head	1.38;
access;
symbols
	PublicRelease_1_2e:1.36
	Interim_Release_1-2e_RC1:1.36
	PublicRelease_1_2d:1.31
	Interim_Release_1-2d_RC1:1.31
	Interim_Release_1-2d_beta1:1.31
	PublicRelease_1_2c:1.28
	Interim_Release_1-2c_RC1:1.28
	Interim_Release_1-2c_beta1:1.28
	PublicRelease_1_2b:1.28
	Interim_Release_1-2b_RC1:1.28
	PublicRelease_1_2a:1.26
	Interim_Release_1-2a_RC1:1.26
	Interim_Release_1-2a_beta2:1.26
	Interim_Release_1-2a_beta1:1.26
	PublicRelease_1_2:1.25
	Interim_Release_1-2_RC1:1.25
	Interim_Release_1-2_beta1:1.25
	PublicRelease_1_1g:1.25
	Interim_Release_1-1g_RC3:1.25
	Interim_Release_1-1g_RC2:1.25
	Interim_Release_1-1g_RC1:1.25
	Interim_Release_1-1g_beta2:1.23
	Interim_Release_1-1g_beta1:1.21
	PublicRelease_1_1f:1.21
	Interim_Release_1-1f_RC1:1.21
	PublicRelease_1_1e:1.21
	Interim_Release_1-1e_RC2:1.21
	Interim_Release_1-1e_RC1:1.21
	Interim_Release_1-1e_beta1:1.21
	PublicRelease_1_1d:1.21
	Interim_Release_1-1d_RC1:1.21
	PublicRelease_1_1c:1.20
	Interim_Release_1-1c_RC1:1.20
	Interim_Release_1-1c_beta2:1.20
	Interim_Release_1-1c_beta1:1.19
	PublicRelease_1_1b:1.16
	Interim_Release_1-1b_RC1:1.16
	PublicRelease_1_1a:1.16
	Interim_Release_1-1a_RC2:1.16
	Interim_Release_1-1a_RC1:1.16
	Interim_Release_1-1a_beta2:1.16
	Interim_Release_1-1a_beta1:1.16
	PublicRelease_1_1:1.16
	Interim_Release_1-1_beta1:1.16
	PublicRelease_1o:1.15
	Interim_Release_1o_RC1:1.15
	Interim_Release_1o_beta1:1.15
	PublicRelease_1n:1.15
	Interim_Release_1n_RC2:1.15
	Interim_Release_1n_RC1:1.15
	Interim_Release_1n_beta2:1.15
	Interim_Release_1n_beta1:1.15
	PublicRelease_1m:1.13
	Interim_Release_1m_beta1:1.13
	PublicRelease_1l:1.13
	Interim_Release_1l_RC3:1.13
	Interim_Release_1l_RC2:1.12
	Interim_Release_1l_RC1:1.12
	Interim_Release_1l_beta2:1.11
	Interim_Release_1l_beta1:1.8;
locks; strict;
comment	@// @;


1.38
date	2012.09.08.04.26.47;	author aw3;	state Exp;
branches;
next	1.37;

1.37
date	2009.10.10.14.04.51;	author aw3;	state Exp;
branches;
next	1.36;

1.36
date	2009.03.30.00.00.30;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2008.11.12.03.52.08;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2008.10.03.04.25.40;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2008.09.09.04.04.35;	author aw3;	state Exp;
branches;
next	1.32;

1.32
date	2008.07.17.05.04.14;	author aw3;	state Exp;
branches;
next	1.31;

1.31
date	2008.01.23.05.10.47;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2007.11.16.05.21.24;	author aw3;	state Exp;
branches;
next	1.29;

1.29
date	2007.10.31.18.26.03;	author fuxie-dk;	state Exp;
branches;
next	1.28;

1.28
date	2007.01.06.06.50.14;	author aw3;	state Exp;
branches;
next	1.27;

1.27
date	2006.11.26.15.12.36;	author aw3;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.09.15.18.10;	author kush_eplus;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.27.22.11.47;	author eklmn;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.27.20.31.04;	author eklmn;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.23.04.00.31;	author aw3;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.05.05.03.13;	author aw3;	state Exp;
branches;
next	1.21;

1.21
date	2005.03.12.13.17.08;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2005.02.08.05.48.41;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2005.01.20.23.42.46;	author aw3;	state Exp;
branches;
next	1.18;

1.18
date	2005.01.19.21.10.47;	author netwolf1;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.16.00.34.59;	author netwolf1;	state Exp;
branches;
next	1.16;

1.16
date	2004.10.18.18.00.45;	author aw3;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.14.02.13.21;	author aw3;	state Exp;
branches;
next	1.14;

1.14
date	2004.06.30.13.38.40;	author dongato;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.08.20.13.08;	author aw3;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.24.09.46.13;	author dongato;	state Exp;
branches;
next	1.11;

1.11
date	2004.05.21.15.50.01;	author dongato;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.16.01.39.42;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.07.04.58.44;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.05.06.09.21;	author katsyonak;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.02.19.04.03;	author katsyonak;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.28.19.46.03;	author aw3;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.27.21.12.26;	author aw3;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.27.02.10.38;	author aw3;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.26.06.14.45;	author katsyonak;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.26.02.36.56;	author aw3;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.23.22.14.10;	author katsyonak;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Switched to MaxMind GeoLite country database (as previous one is no longer supported);
Properly show country names containing comma; Sped up country database parsing;
Added A1, A2 and AP fake country codes ; Added SS and EU, removed old CS code; Added BL (=FR), SJ (=NO), HM (=AU).
@
text
@/*
the IP to country data is provided by http://ip-to-country.webhosting.info/

"IP2Country uses the IP-to-Country Database
 provided by WebHosting.Info (http://www.webhosting.info),
 available from http://ip-to-country.webhosting.info."
*/

/*
flags are from http://sf.net/projects/flags/
*/

// by Superlexx, based on IPFilter by Bouc7

#include "stdafx.h"
#include "IP2Country.h"
#include "emule.h"
#include "otherfunctions.h"
#include "flag/resource.h"

//refresh list
#include "ServerList.h"
#include "ClientList.h"

//refresh server list ctrl
#include "emuleDlg.h"
#include "ServerWnd.h"
#include "ServerListCtrl.h"
#include <share.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define COUNTRY_FLAG_DLL_NAME		_T("countryflag.dll")

static void FirstCharCap(CString *pstrTarget)
{
	pstrTarget->TrimRight(); //remove whitespaces at the end (including carriage return)
	if (!pstrTarget->IsEmpty())
	{
		TCHAR	*pcBuf = const_cast<TCHAR*>(pstrTarget->GetString());

		pstrTarget->MakeLower();
		for (;;)
		{
			*pcBuf = _totupper(*pcBuf);
			if ((pcBuf = _tcspbrk(pcBuf, _T(" ."))) == NULL)
				break;
			pcBuf++;
		}
	}
}

CIP2Country::CIP2Country() : m_rbmapIpList(144)
{
	m_bEnableIP2Country = false;
	m_bEnableCountryFlag = false;

	if (g_App.m_pPrefs->GetShowCountryFlag())
	{
		AddLogLine(LOG_FL_DBG | LOG_FL_EMBEDFMT, _T("IP-to-Country Database based on GeoLite data created by ") RGB_STEEL_BLUE_TXT _T("MaxMind") RGB_DEFAULT_TXT _T(", available from http://www.maxmind.com/app/geoip_country."));
		Load(false);
	}
}

CIP2Country::~CIP2Country()
{
	Unload(false);
}

void CIP2Country::Load(bool bReset)
{
	static const uint16	s_auResID[] =
	{
		IDI_NO_FLAG, IDI_NO_FLAG, IDI_FLAG_AD, IDI_FLAG_AE, IDI_FLAG_AF, IDI_FLAG_AG,
		IDI_FLAG_AI, IDI_FLAG_AL, IDI_FLAG_AM, IDI_FLAG_AN, IDI_FLAG_AO, IDI_NO_FLAG,
		IDI_NO_FLAG, IDI_FLAG_AR, IDI_FLAG_AS, IDI_FLAG_AT, IDI_FLAG_AU, IDI_FLAG_AW,
		IDI_FLAG_AX, IDI_FLAG_AZ, IDI_FLAG_BA, IDI_FLAG_BB, IDI_FLAG_BD, IDI_FLAG_BE,
		IDI_FLAG_BF, IDI_FLAG_BG, IDI_FLAG_BH, IDI_FLAG_BI, IDI_FLAG_BJ, IDI_FLAG_FR,
		IDI_FLAG_BM, IDI_FLAG_BN, IDI_FLAG_BO, IDI_FLAG_BR, IDI_FLAG_BS, IDI_FLAG_BT,
		IDI_FLAG_NO, IDI_FLAG_BW, IDI_FLAG_BY, IDI_FLAG_BZ, IDI_FLAG_CA, IDI_FLAG_CC,
		IDI_FLAG_CD, IDI_FLAG_CF, IDI_FLAG_CG, IDI_FLAG_CH, IDI_FLAG_CI, IDI_FLAG_CK,
		IDI_FLAG_CL, IDI_FLAG_CM, IDI_FLAG_CN, IDI_FLAG_CO, IDI_FLAG_CR, IDI_FLAG_CU,
		IDI_FLAG_CV, IDI_FLAG_CX, IDI_FLAG_CY, IDI_FLAG_CZ, IDI_FLAG_DE, IDI_FLAG_DJ,
		IDI_FLAG_DK, IDI_FLAG_DM, IDI_FLAG_DO, IDI_FLAG_DZ, IDI_FLAG_EC, IDI_FLAG_EE,
		IDI_FLAG_EG, IDI_FLAG_EH, IDI_FLAG_ER, IDI_FLAG_ES, IDI_FLAG_ET, IDI_FLAG_EU,
		IDI_FLAG_FI, IDI_FLAG_FJ, IDI_FLAG_FK, IDI_FLAG_FM, IDI_FLAG_FO, IDI_FLAG_FR,
		IDI_FLAG_GA, IDI_FLAG_GB, IDI_FLAG_GD, IDI_FLAG_GE, IDI_FLAG_FR, IDI_FLAG_GG,
		IDI_FLAG_GH, IDI_FLAG_GI, IDI_FLAG_GL, IDI_FLAG_GM, IDI_FLAG_GN, IDI_FLAG_GP,
		IDI_FLAG_GQ, IDI_FLAG_GR, IDI_FLAG_GS, IDI_FLAG_GT, IDI_FLAG_GU, IDI_FLAG_GW,
		IDI_FLAG_GY, IDI_FLAG_HK, IDI_FLAG_AU, IDI_FLAG_HN, IDI_FLAG_HR, IDI_FLAG_HT,
		IDI_FLAG_HU, IDI_FLAG_ID, IDI_FLAG_IE, IDI_FLAG_IL, IDI_FLAG_IM, IDI_FLAG_IN,
		IDI_FLAG_IO, IDI_FLAG_IQ, IDI_FLAG_IR, IDI_FLAG_IS, IDI_FLAG_IT, IDI_FLAG_JE,
		IDI_FLAG_JM, IDI_FLAG_JO, IDI_FLAG_JP, IDI_FLAG_KE, IDI_FLAG_KG, IDI_FLAG_KH,
		IDI_FLAG_KI, IDI_FLAG_KM, IDI_FLAG_KN, IDI_FLAG_KP, IDI_FLAG_KR, IDI_FLAG_KW,
		IDI_FLAG_KY, IDI_FLAG_KZ, IDI_FLAG_LA, IDI_FLAG_LB, IDI_FLAG_LC, IDI_FLAG_LI,
		IDI_FLAG_LK, IDI_FLAG_LR, IDI_FLAG_LS, IDI_FLAG_LT, IDI_FLAG_LU, IDI_FLAG_LV,
		IDI_FLAG_LY, IDI_FLAG_MA, IDI_FLAG_MC, IDI_FLAG_MD, IDI_FLAG_ME, IDI_FLAG_FR,
		IDI_FLAG_MG, IDI_FLAG_MH, IDI_FLAG_MK, IDI_FLAG_ML, IDI_FLAG_MM, IDI_FLAG_MN,
		IDI_FLAG_MO, IDI_FLAG_MP, IDI_FLAG_MQ, IDI_FLAG_MR, IDI_FLAG_MS, IDI_FLAG_MT,
		IDI_FLAG_MU, IDI_FLAG_MV, IDI_FLAG_MW, IDI_FLAG_MX, IDI_FLAG_MY, IDI_FLAG_MZ,
		IDI_FLAG_NA, IDI_FLAG_FR, IDI_FLAG_NE, IDI_FLAG_NF, IDI_FLAG_NG, IDI_FLAG_NI,
		IDI_FLAG_NL, IDI_FLAG_NO, IDI_FLAG_NP, IDI_FLAG_NR, IDI_FLAG_NU, IDI_FLAG_NZ,
		IDI_FLAG_OM, IDI_FLAG_PA, IDI_FLAG_PE, IDI_FLAG_PF, IDI_FLAG_PG, IDI_FLAG_PH,
		IDI_FLAG_PK, IDI_FLAG_PL, IDI_FLAG_PM, IDI_FLAG_PN, IDI_FLAG_PR, IDI_FLAG_PS,
		IDI_FLAG_PT, IDI_FLAG_PW, IDI_FLAG_PY, IDI_FLAG_QA, IDI_FLAG_FR, IDI_FLAG_RO,
		IDI_FLAG_RS, IDI_FLAG_RU, IDI_FLAG_RW, IDI_FLAG_SA, IDI_FLAG_SB, IDI_FLAG_SC,
		IDI_FLAG_SD, IDI_FLAG_SE, IDI_FLAG_SG, IDI_FLAG_SH, IDI_FLAG_SI, IDI_FLAG_NO,
		IDI_FLAG_SK, IDI_FLAG_SL, IDI_FLAG_SM, IDI_FLAG_SN, IDI_FLAG_SO, IDI_FLAG_SR,
		IDI_FLAG_SS, IDI_FLAG_ST, IDI_FLAG_SV, IDI_FLAG_SY, IDI_FLAG_SZ, IDI_FLAG_TC,
		IDI_FLAG_TD, IDI_FLAG_TF, IDI_FLAG_TG, IDI_FLAG_TH, IDI_FLAG_TJ, IDI_FLAG_TK,
		IDI_FLAG_TL, IDI_FLAG_TM, IDI_FLAG_TN, IDI_FLAG_TO, IDI_FLAG_TR, IDI_FLAG_TT,
		IDI_FLAG_TV, IDI_FLAG_TW, IDI_FLAG_TZ, IDI_FLAG_UA, IDI_FLAG_UG, IDI_FLAG_US,
		IDI_FLAG_US, IDI_FLAG_UY, IDI_FLAG_UZ, IDI_FLAG_VA, IDI_FLAG_VC, IDI_FLAG_VE,
		IDI_FLAG_VG, IDI_FLAG_VI, IDI_FLAG_VN, IDI_FLAG_VU, IDI_FLAG_WF, IDI_FLAG_WS,
		IDI_FLAG_YE, IDI_FLAG_FR, IDI_FLAG_ZA, IDI_FLAG_ZM, IDI_FLAG_ZW
	};
	static const uint16 s_auCountryID[] =
	{
		'A1', 'A2', 'AD', 'AE', 'AF', 'AG',
		'AI', 'AL', 'AM', 'AN', 'AO', 'AP',
		'AQ', 'AR', 'AS', 'AT', 'AU', 'AW',
		'AX', 'AZ', 'BA', 'BB', 'BD', 'BE',
		'BF', 'BG', 'BH', 'BI', 'BJ', 'BL',
		'BM', 'BN', 'BO', 'BR', 'BS', 'BT',
		'BV', 'BW', 'BY', 'BZ', 'CA', 'CC',
		'CD', 'CF', 'CG', 'CH', 'CI', 'CK',
		'CL', 'CM', 'CN', 'CO', 'CR', 'CU',
		'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ',
		'DK', 'DM', 'DO', 'DZ', 'EC', 'EE',
		'EG', 'EH', 'ER', 'ES', 'ET', 'EU',
		'FI', 'FJ', 'FK', 'FM', 'FO', 'FR',
		'GA', 'GB', 'GD', 'GE', 'GF', 'GG',
		'GH', 'GI', 'GL', 'GM', 'GN', 'GP',
		'GQ', 'GR', 'GS', 'GT', 'GU', 'GW',
		'GY', 'HK', 'HM', 'HN', 'HR', 'HT',
		'HU', 'ID', 'IE', 'IL', 'IM', 'IN',
		'IO', 'IQ', 'IR', 'IS', 'IT', 'JE',
		'JM', 'JO', 'JP', 'KE', 'KG', 'KH',
		'KI', 'KM', 'KN', 'KP', 'KR', 'KW',
		'KY', 'KZ', 'LA', 'LB', 'LC', 'LI',
		'LK', 'LR', 'LS', 'LT', 'LU', 'LV',
		'LY', 'MA', 'MC', 'MD', 'ME', 'MF',
		'MG', 'MH', 'MK', 'ML', 'MM', 'MN',
		'MO', 'MP', 'MQ', 'MR', 'MS', 'MT',
		'MU', 'MV', 'MW', 'MX', 'MY', 'MZ',
		'NA', 'NC', 'NE', 'NF', 'NG', 'NI',
		'NL', 'NO', 'NP', 'NR', 'NU', 'NZ',
		'OM', 'PA', 'PE', 'PF', 'PG', 'PH',
		'PK', 'PL', 'PM', 'PN', 'PR', 'PS',
		'PT', 'PW', 'PY', 'QA', 'RE', 'RO',
		'RS', 'RU', 'RW', 'SA', 'SB', 'SC',
		'SD', 'SE', 'SG', 'SH', 'SI', 'SJ',
		'SK', 'SL', 'SM', 'SN', 'SO', 'SR',
		'SS', 'ST', 'SV', 'SY', 'SZ', 'TC',
		'TD', 'TF', 'TG', 'TH', 'TJ', 'TK',
		'TL', 'TM', 'TN', 'TO', 'TR', 'TT',
		'TV', 'TW', 'TZ', 'UA', 'UG', 'UM',
		'US', 'UY', 'UZ', 'VA', 'VC', 'VE',
		'VG', 'VI', 'VN', 'VU', 'WF', 'WS',
		'YE', 'YT', 'ZA', 'ZM', 'ZW'
	};

//	Protect from consecutive loadings
	if (m_bEnableIP2Country)
		return;

//	Temporary resource just for fast lookup
	CRBMap<uint32, uint32>	rbmapCountryIDtoFlagIndex(ARRSIZE(s_auResID));
	CRBMap<uint32, uint32>::CPair	*pPair;

	for (unsigned ui = 0; ui < ARRSIZE(s_auResID); ui++)
	{
		rbmapCountryIDtoFlagIndex.SetAt(
			((s_auCountryID[ui] & 0xFF00) << 8) | (s_auCountryID[ui] & 0xFF), s_auResID[ui] );
	}

	FILE	*pReadFile;
	CString	strIP2CountryCSVfile = g_App.m_pPrefs->GetConfigDir();

	strIP2CountryCSVfile += _T("ip-to-country.csv");

	if ((pReadFile = _tfsopen(strIP2CountryCSVfile, _T("r"), _SH_DENYWR)) != NULL)
	{
		TCHAR			acBuffer[512];
		TCHAR			*pcFields[5], *pcPtr, *pcTmp, *pcPrevField;
		CString			strLongName;
		unsigned		uiLineNum = 0, ui;
		HINSTANCE		hCountryFlagDll;
		IPRange_Struct	ipRangeData;
		CStringList		countryNameTempList;
		uint32			dwIdx, dwKey;
		HICON			hIcon;
		bool			bEnableCountryFlag, bEnableIP2Country;

		setvbuf(pReadFile, NULL, _IOFBF, 64*1024);

		bEnableCountryFlag = true;
		if ((hCountryFlagDll = ::LoadLibrary(COUNTRY_FLAG_DLL_NAME)) == NULL)
		{
			bEnableCountryFlag = false;
	
			AddLogLine(LOG_RGB_ERROR, IDS_ERR_FILEOPEN2, CString(g_App.m_pPrefs->GetAppDir() + COUNTRY_FLAG_DLL_NAME));
		}
		else
		{
			m_lstCountryFlagImage.Create(18, 12, g_App.m_iDfltImageListColorFlags | ILC_MASK, 200, 1);
			m_lstCountryFlagImage.SetBkColor(CLR_NONE);

		//	Load flag for unknown country
			hIcon = reinterpret_cast<HICON>(::LoadImage(hCountryFlagDll, MAKEINTRESOURCE(IDI_NO_FLAG), IMAGE_ICON, 0, 0, 0));
			if (hIcon == NULL)
			{
				bEnableCountryFlag = false;
				AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("Invalid ResID, maybe upgrade is required ") COUNTRY_FLAG_DLL_NAME);
			}
			m_lstCountryFlagImage.Add(hIcon);
			::DestroyIcon(hIcon);
		}
	//	Add unknown country name
		countryNameTempList.AddTail(_T("Not Applicable"));

		bEnableIP2Country = true;
		while (feof(pReadFile) == 0)
		{
			if (_fgetts(acBuffer, ARRSIZE(acBuffer), pReadFile) == 0)
				break;
			uiLineNum++;
			/*
				http://geolite.maxmind.com/download/geoip/database/GeoIPCountryCSV.zip

				This is a sample of how the CSV file is structured:

				"1.0.0.0","1.0.0.255","16777216","16777471","AU","Australia"
				"1.0.1.0","1.0.3.255","16777472","16778239","CN","China"
				"1.0.4.0","1.0.7.255","16778240","16779263","AU","Australia"

				Original CSV file is processed by the following AWK script to prepare our simplified database (shown below):
				BEGIN { FS = "\",\"" }
				{
					sub(/"$/, "", $6)
					$6 = gensub(/(.+), (.*(Republic|States).*)/, "\\2 \\1", 1, $6)
					print $3 "," $4 "," $5 ",," $6
				}

				"0033996344","0033996351","GB","GBR","UNITED KINGDOM"
				"0050331648","0083886079","US","USA","UNITED STATES"
				"0094585424","0094585439","SE","SWE","SWEDEN"

				FIELD           DATA TYPE    FIELD DESCRIPTION
				IP_FROM         NUMERICAL    Beginning of IP address range.
				IP_TO           NUMERICAL    Ending of IP address range.
				COUNTRY_CODE2   CHAR(2)      Two-character country code based on ISO 3166.
				COUNTRY_CODE3   CHAR(3)      (not used) Three-character country code based on ISO 3166.
				COUNTRY_NAME    VARCHAR(50)  Country name based on ISO 3166
			*/
		//	As full country name is at the end of the string,
		//	'\n' trimming is not required here, as it's done inside FirstCharCap()
		//	by TrimRight() which removes all whitespaces including carriage return
			ui = 0;
			pcPtr = acBuffer - 1;
			goto for_beg;
			for (; ui < ARRSIZE(pcFields); ui++)
			{
				while ((*pcPtr != _T(',')) && (*pcPtr != _T('\0')))
					pcPtr++;
				if (*pcPtr == _T('\0'))
				{
					bEnableIP2Country = false;
					AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T(__FUNCTION__) _T(": %s error (line: %u)"), strIP2CountryCSVfile, uiLineNum);
					break;
				}
				pcTmp = pcPtr - 1;
				if (pcTmp > pcPrevField)
				{
					while (*pcTmp == _T('"'))
						pcTmp--;
				}
				// Only COUNTRY_CODE3 can be empty
				if ((pcPrevField == ++pcTmp) && (ui != 4))
				{
					bEnableIP2Country = false;
					AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T(__FUNCTION__) _T(": %s error (line: %u)"), strIP2CountryCSVfile, uiLineNum);
					break;
				}
				*pcTmp = _T('\0');
for_beg:
				do {} while (*(++pcPtr) == _T('"'));
				pcFields[ui] = pcPrevField = pcPtr;
			}
			if (!bEnableIP2Country)
				break;

			ipRangeData.dwIPend = _tstoi(pcFields[1]);
			ipRangeData.uIndex = NO_COUNTRY_INFO;

			if ((pcFields[2][2] == _T('\0')) && (pcFields[2][1] != _T('\0')))	// 2 character country code
			{
				dwKey = pcFields[2][0] << 16 | pcFields[2][1];
				pPair = rbmapCountryIDtoFlagIndex.Lookup(dwKey);	// short country name
			}
			else
				pPair = NULL;
			if (pPair != NULL)
			{
				if ((dwIdx = (pPair->m_value >> 16)) == NO_COUNTRY_INFO)
				{
				//	Country name and flag weren't added yet

					if (bEnableCountryFlag)
					{
						hIcon = reinterpret_cast<HICON>(::LoadImage(hCountryFlagDll, MAKEINTRESOURCE(pPair->m_value & 0xffff), IMAGE_ICON, 0, 0, 0));
						if (hIcon == NULL)
						{
							bEnableCountryFlag = false;
							AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("Invalid ResID, maybe upgrade is required ") COUNTRY_FLAG_DLL_NAME);
							break;
						}
						m_lstCountryFlagImage.Add(hIcon);
						::DestroyIcon(hIcon);
					}
				//	Capitalize words in country name
					strLongName = pcFields[4];
					strLongName.Remove(_T('"'));
					FirstCharCap(&strLongName);
					if (strLongName.IsEmpty())
					{
						bEnableIP2Country = false;
						AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T(__FUNCTION__) _T(": %s error (line: %u)"), strIP2CountryCSVfile, uiLineNum);
						break;
					}

					dwIdx = countryNameTempList.GetCount();
					countryNameTempList.AddTail(strLongName);

				//	Associate flag/country index with short country name
					pPair->m_value |= (dwIdx << 16);
				}
				ipRangeData.uIndex = static_cast<uint16>(dwIdx);
			}
			else
			{
				strLongName = pcFields[4];
				strLongName.Remove(_T('"'));
				AddLogLine( LOG_FL_DBG | LOG_RGB_WARNING, _T("Unsupported country name found %s/%s (line: %u)"),
								 pcFields[2], strLongName.TrimRight(), uiLineNum );
			}
		//	Start of IP range is a key
			m_rbmapIpList.SetAt(_tstoi(pcFields[0]), ipRangeData);
		}	//while
		fclose(pReadFile);

		if (m_rbmapIpList.IsEmpty())
			bEnableIP2Country = false;

		if (!bEnableIP2Country)
		{
			bEnableCountryFlag = false;
			m_rbmapIpList.RemoveAll();
		}
		else
		{
		//	Allocate array memory
			m_astrCountryName.SetSize(countryNameTempList.GetCount());

			POSITION pos;

			for (pos = countryNameTempList.GetHeadPosition(), dwIdx = 0; pos != NULL; dwIdx++)
			{
				m_astrCountryName[dwIdx] = countryNameTempList.GetNext(pos);
			}
			m_bEnableIP2Country = bEnableIP2Country;
			m_bEnableCountryFlag = bEnableCountryFlag;

			if (bReset)
				Reset();
		}
		if (hCountryFlagDll != NULL)
		{
			if (!bEnableCountryFlag)
			{
			//	Destory image list
				m_lstCountryFlagImage.DeleteImageList();
			}
			::FreeLibrary(hCountryFlagDll);
		}
	}
	else
		AddLogLine(LOG_RGB_ERROR, IDS_ERR_FILEOPEN2, strIP2CountryCSVfile);
}

void CIP2Country::Unload(bool bReset)
{
//	Protect from consecutive unloadings
	if (!m_bEnableIP2Country)
		return;

	m_bEnableIP2Country = false;
	m_bEnableCountryFlag = false;

	if (bReset)
		Reset();

//	Release resources	
	m_astrCountryName.RemoveAll();
	m_rbmapIpList.RemoveAll();
//	Destory image list
	m_lstCountryFlagImage.DeleteImageList();
}

void CIP2Country::Reset()
{
	g_App.m_pServerList->ResetIP2Country();
	g_App.m_pClientList->ResetIP2Country();
}

void CIP2Country::Refresh()
{
	g_App.m_pMDlg->m_wndServer.m_ctlServerList.RefreshAllServer();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	GetCountryFromIP() obtains country information based on IP.
//		Params:
//			dwClientIP - IP address.
//		Return:
//			index of Country Name and flag.
uint16 CIP2Country::GetCountryFromIP(uint32 dwClientIP)
{
	if (m_bEnableIP2Country && (dwClientIP != 0))
	{
		dwClientIP = fast_htonl(dwClientIP);

		POSITION pos = m_rbmapIpList.FindFirstKeyAfter(dwClientIP);

		if (pos == NULL)
			pos = m_rbmapIpList.GetTailPosition();
		else
			m_rbmapIpList.GetPrev(pos);

		while(pos)
		{
			const CRBMap<uint32, IPRange_Struct>::CPair *pPair = m_rbmapIpList.GetPrev(pos);

			if (dwClientIP > pPair->m_value.dwIPend)
				break;
			if (dwClientIP >= pPair->m_key)
				return pPair->m_value.uIndex;
		}
	}
	return NO_COUNTRY_INFO;
}

CString CIP2Country::GetCountryNameByIndex(uint16 uCountryIndex)
{
	return (uCountryIndex < m_astrCountryName.GetSize()) ? m_astrCountryName[uCountryIndex] : CString(_T(""));
}
@


1.37
log
@Added MF (St-Martin) support.
@
text
@a44 1
		TCHAR	acCh[2];
a45 1
		acCh[1] = _T('\0');
d47 1
a47 1
		for (int iIdx = 0;;)
d49 2
a50 5
			acCh[0] = pcBuf[iIdx];
			_tcsupr(acCh);	// convert string (first word's char) to the upper case
			pcBuf[iIdx] = acCh[0];
			iIdx = pstrTarget->Find(_T(' '), iIdx) + 1;
			if (iIdx <= 0)
d52 1
d64 1
a64 1
		AddLogLine(LOG_FL_DBG | LOG_FL_EMBEDFMT, _T("IP-to-Country Database provided by ") RGB_STEEL_BLUE_TXT _T("WEBH") RGB_DARK_ORANGE_TXT _T("O") RGB_STEEL_BLUE_TXT _T("STING") RGB_DARK_ORANGE_TXT _T(".INFO") RGB_DEFAULT_TXT _T(", available from http://ip-to-country.webhosting.info."));
d78 34
a111 33
		IDI_FLAG_AD, IDI_FLAG_AE, IDI_FLAG_AF, IDI_FLAG_AG, IDI_FLAG_AI, IDI_FLAG_AL,
		IDI_FLAG_AM, IDI_FLAG_AN, IDI_FLAG_AO, IDI_NO_FLAG, IDI_FLAG_AR, IDI_FLAG_AS,
		IDI_FLAG_AT, IDI_FLAG_AU, IDI_FLAG_AW, IDI_FLAG_AX, IDI_FLAG_AZ, IDI_FLAG_BA,
		IDI_FLAG_BB, IDI_FLAG_BD, IDI_FLAG_BE, IDI_FLAG_BF, IDI_FLAG_BG, IDI_FLAG_BH,
		IDI_FLAG_BI, IDI_FLAG_BJ, IDI_FLAG_BM, IDI_FLAG_BN, IDI_FLAG_BO, IDI_FLAG_BR,
		IDI_FLAG_BS, IDI_FLAG_BT, IDI_FLAG_NO, IDI_FLAG_BW, IDI_FLAG_BY, IDI_FLAG_BZ,
		IDI_FLAG_CA, IDI_FLAG_CC, IDI_FLAG_CD, IDI_FLAG_CF, IDI_FLAG_CG, IDI_FLAG_CH,
		IDI_FLAG_CI, IDI_FLAG_CK, IDI_FLAG_CL, IDI_FLAG_CM, IDI_FLAG_CN, IDI_FLAG_CO,
		IDI_FLAG_CR, IDI_FLAG_YU, IDI_FLAG_CU, IDI_FLAG_CV, IDI_FLAG_CX, IDI_FLAG_CY,
		IDI_FLAG_CZ, IDI_FLAG_DE, IDI_FLAG_DJ, IDI_FLAG_DK, IDI_FLAG_DM, IDI_FLAG_DO,
		IDI_FLAG_DZ, IDI_FLAG_EC, IDI_FLAG_EE, IDI_FLAG_EG, IDI_FLAG_EH, IDI_FLAG_ER,
		IDI_FLAG_ES, IDI_FLAG_ET, IDI_FLAG_FI, IDI_FLAG_FJ, IDI_FLAG_FK, IDI_FLAG_FM,
		IDI_FLAG_FO, IDI_FLAG_FR, IDI_FLAG_GA, IDI_FLAG_GB, IDI_FLAG_GD, IDI_FLAG_GE,
		IDI_FLAG_FR, IDI_FLAG_GG, IDI_FLAG_GH, IDI_FLAG_GI, IDI_FLAG_GL, IDI_FLAG_GM,
		IDI_FLAG_GN, IDI_FLAG_GP, IDI_FLAG_GQ, IDI_FLAG_GR, IDI_FLAG_GS, IDI_FLAG_GT,
		IDI_FLAG_GU, IDI_FLAG_GW, IDI_FLAG_GY, IDI_FLAG_HK, IDI_FLAG_HN, IDI_FLAG_HR,
		IDI_FLAG_HT, IDI_FLAG_HU, IDI_FLAG_ID, IDI_FLAG_IE, IDI_FLAG_IL, IDI_FLAG_IM,
		IDI_FLAG_IN, IDI_FLAG_IO, IDI_FLAG_IQ, IDI_FLAG_IR, IDI_FLAG_IS, IDI_FLAG_IT,
		IDI_FLAG_JE, IDI_FLAG_JM, IDI_FLAG_JO, IDI_FLAG_JP, IDI_FLAG_KE, IDI_FLAG_KG,
		IDI_FLAG_KH, IDI_FLAG_KI, IDI_FLAG_KM, IDI_FLAG_KN, IDI_FLAG_KP, IDI_FLAG_KR,
		IDI_FLAG_KW, IDI_FLAG_KY, IDI_FLAG_KZ, IDI_FLAG_LA, IDI_FLAG_LB, IDI_FLAG_LC,
		IDI_FLAG_LI, IDI_FLAG_LK, IDI_FLAG_LR, IDI_FLAG_LS, IDI_FLAG_LT, IDI_FLAG_LU,
		IDI_FLAG_LV, IDI_FLAG_LY, IDI_FLAG_MA, IDI_FLAG_MC, IDI_FLAG_MD, IDI_FLAG_ME,
		IDI_FLAG_FR, IDI_FLAG_MG, IDI_FLAG_MH, IDI_FLAG_MK, IDI_FLAG_ML, IDI_FLAG_MM,
		IDI_FLAG_MN, IDI_FLAG_MO, IDI_FLAG_MP, IDI_FLAG_MQ, IDI_FLAG_MR, IDI_FLAG_MS,
		IDI_FLAG_MT, IDI_FLAG_MU, IDI_FLAG_MV, IDI_FLAG_MW, IDI_FLAG_MX, IDI_FLAG_MY,
		IDI_FLAG_MZ, IDI_FLAG_NA, IDI_FLAG_FR, IDI_FLAG_NE, IDI_FLAG_NF, IDI_FLAG_NG,
		IDI_FLAG_NI, IDI_FLAG_NL, IDI_FLAG_NO, IDI_FLAG_NP, IDI_FLAG_NR, IDI_FLAG_NU,
		IDI_FLAG_NZ, IDI_FLAG_OM, IDI_FLAG_PA, IDI_FLAG_PE, IDI_FLAG_PF, IDI_FLAG_PG,
		IDI_FLAG_PH, IDI_FLAG_PK, IDI_FLAG_PL, IDI_FLAG_PM, IDI_FLAG_PN, IDI_FLAG_PR,
		IDI_FLAG_PS, IDI_FLAG_PT, IDI_FLAG_PW, IDI_FLAG_PY, IDI_FLAG_QA, IDI_FLAG_FR,
		IDI_FLAG_RO, IDI_FLAG_RS, IDI_FLAG_RU, IDI_FLAG_RW, IDI_FLAG_SA, IDI_FLAG_SB,
		IDI_FLAG_SC, IDI_FLAG_SD, IDI_FLAG_SE, IDI_FLAG_SG, IDI_FLAG_SH, IDI_FLAG_SI,
d113 7
a119 7
		IDI_FLAG_ST, IDI_FLAG_SV, IDI_FLAG_SY, IDI_FLAG_SZ, IDI_FLAG_TC, IDI_FLAG_TD,
		IDI_FLAG_TF, IDI_FLAG_TG, IDI_FLAG_TH, IDI_FLAG_TJ, IDI_FLAG_TK, IDI_FLAG_TL,
		IDI_FLAG_TM, IDI_FLAG_TN, IDI_FLAG_TO, IDI_FLAG_TR, IDI_FLAG_TT, IDI_FLAG_TV,
		IDI_FLAG_TW, IDI_FLAG_TZ, IDI_FLAG_UA, IDI_FLAG_UG, IDI_FLAG_US, IDI_FLAG_US,
		IDI_FLAG_UY, IDI_FLAG_UZ, IDI_FLAG_VA, IDI_FLAG_VC, IDI_FLAG_VE, IDI_FLAG_VG,
		IDI_FLAG_VI, IDI_FLAG_VN, IDI_FLAG_VU, IDI_FLAG_WF, IDI_FLAG_WS, IDI_FLAG_YE,
		IDI_FLAG_FR, IDI_FLAG_ZA, IDI_FLAG_ZM, IDI_FLAG_ZW
d123 34
a156 33
		'AD', 'AE', 'AF', 'AG', 'AI', 'AL',
		'AM', 'AN', 'AO', 'AQ', 'AR', 'AS',
		'AT', 'AU', 'AW', 'AX', 'AZ', 'BA',
		'BB', 'BD', 'BE', 'BF', 'BG', 'BH',
		'BI', 'BJ', 'BM', 'BN', 'BO', 'BR',
		'BS', 'BT', 'BV', 'BW', 'BY', 'BZ',
		'CA', 'CC', 'CD', 'CF', 'CG', 'CH',
		'CI', 'CK', 'CL', 'CM', 'CN', 'CO',
		'CR', 'CS', 'CU', 'CV', 'CX', 'CY',
		'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO',
		'DZ', 'EC', 'EE', 'EG', 'EH', 'ER',
		'ES', 'ET', 'FI', 'FJ', 'FK', 'FM',
		'FO', 'FR', 'GA', 'GB', 'GD', 'GE',
		'GF', 'GG', 'GH', 'GI', 'GL', 'GM',
		'GN', 'GP', 'GQ', 'GR', 'GS', 'GT',
		'GU', 'GW', 'GY', 'HK', 'HN', 'HR',
		'HT', 'HU', 'ID', 'IE', 'IL', 'IM',
		'IN', 'IO', 'IQ', 'IR', 'IS', 'IT',
		'JE', 'JM', 'JO', 'JP', 'KE', 'KG',
		'KH', 'KI', 'KM', 'KN', 'KP', 'KR',
		'KW', 'KY', 'KZ', 'LA', 'LB', 'LC',
		'LI', 'LK', 'LR', 'LS', 'LT', 'LU',
		'LV', 'LY', 'MA', 'MC', 'MD', 'ME',
		'MF', 'MG', 'MH', 'MK', 'ML', 'MM',
		'MN', 'MO', 'MP', 'MQ', 'MR', 'MS',
		'MT', 'MU', 'MV', 'MW', 'MX', 'MY',
		'MZ', 'NA', 'NC', 'NE', 'NF', 'NG',
		'NI', 'NL', 'NO', 'NP', 'NR', 'NU',
		'NZ', 'OM', 'PA', 'PE', 'PF', 'PG',
		'PH', 'PK', 'PL', 'PM', 'PN', 'PR',
		'PS', 'PT', 'PW', 'PY', 'QA', 'RE',
		'RO', 'RS', 'RU', 'RW', 'SA', 'SB',
		'SC', 'SD', 'SE', 'SG', 'SH', 'SI',
d158 7
a164 7
		'ST', 'SV', 'SY', 'SZ', 'TC', 'TD',
		'TF', 'TG', 'TH', 'TJ', 'TK', 'TL',
		'TM', 'TN', 'TO', 'TR', 'TT', 'TV',
		'TW', 'TZ', 'UA', 'UG', 'UM', 'US',
		'UY', 'UZ', 'VA', 'VC', 'VE', 'VG',
		'VI', 'VN', 'VU', 'WF', 'WS', 'YE',
		'YT', 'ZA', 'ZM', 'ZW'
d189 3
a191 2
		CString			strBuffer, strTemp[5];
		unsigned		uiLineNum = 0;
a230 1
			strBuffer = acBuffer;
d233 1
a233 1
				http://ip-to-country.webhosting.info/node/view/54
d237 12
d253 6
a258 6
				FIELD  			DATA TYPE		  	FIELD DESCRIPTION
				IP_FROM 		NUMERICAL (DOUBLE) 	Beginning of IP address range.
				IP_TO			NUMERICAL (DOUBLE) 	Ending of IP address range.
				COUNTRY_CODE2 	CHAR(2)				Two-character country code based on ISO 3166.
				COUNTRY_CODE3 	CHAR(3)				Three-character country code based on ISO 3166.
				COUNTRY_NAME 	VARCHAR(50) 		Country name based on ISO 3166
d263 4
a266 6
			//strBuffer.TrimRight(_T('\n'));
			strBuffer.Remove(_T('"')); // get rid of the " signs

			int iCurPos = 0;

			for (unsigned ui = 0; ui < ARRSIZE(strTemp); ui++)
d268 16
a283 2
				strTemp[ui] = strBuffer.Tokenize(_T(","), iCurPos);
				if (strTemp[ui].IsEmpty())
d289 4
d296 2
a297 2
			
			ipRangeData.dwIPend = _tstoi(strTemp[1]);
d300 1
a300 1
			if (strTemp[2].GetLength() == 2)	// 2 character country code
d302 1
a302 1
				dwKey = strTemp[2].GetString()[0] << 16 | strTemp[2].GetString()[1];
d326 9
a334 1
					FirstCharCap(&strTemp[4]);
d337 1
a337 1
					countryNameTempList.AddTail(strTemp[4]);
d346 2
d349 1
a349 1
								 strTemp[2], strTemp[4].TrimRight(), uiLineNum );
d352 1
a352 1
			m_rbmapIpList.SetAt(_tstoi(strTemp[0]), ipRangeData);
@


1.36
log
@Slightly faster ip2country loading; Don't send untranslated debug error messages to the main log.
@
text
@d105 18
a122 18
		IDI_FLAG_MG, IDI_FLAG_MH, IDI_FLAG_MK, IDI_FLAG_ML, IDI_FLAG_MM, IDI_FLAG_MN,
		IDI_FLAG_MO, IDI_FLAG_MP, IDI_FLAG_MQ, IDI_FLAG_MR, IDI_FLAG_MS, IDI_FLAG_MT,
		IDI_FLAG_MU, IDI_FLAG_MV, IDI_FLAG_MW, IDI_FLAG_MX, IDI_FLAG_MY, IDI_FLAG_MZ,
		IDI_FLAG_NA, IDI_FLAG_FR, IDI_FLAG_NE, IDI_FLAG_NF, IDI_FLAG_NG, IDI_FLAG_NI,
		IDI_FLAG_NL, IDI_FLAG_NO, IDI_FLAG_NP, IDI_FLAG_NR, IDI_FLAG_NU, IDI_FLAG_NZ,
		IDI_FLAG_OM, IDI_FLAG_PA, IDI_FLAG_PE, IDI_FLAG_PF, IDI_FLAG_PG, IDI_FLAG_PH,
		IDI_FLAG_PK, IDI_FLAG_PL, IDI_FLAG_PM, IDI_FLAG_PN, IDI_FLAG_PR, IDI_FLAG_PS,
		IDI_FLAG_PT, IDI_FLAG_PW, IDI_FLAG_PY, IDI_FLAG_QA, IDI_FLAG_FR, IDI_FLAG_RO,
		IDI_FLAG_RS, IDI_FLAG_RU, IDI_FLAG_RW, IDI_FLAG_SA, IDI_FLAG_SB, IDI_FLAG_SC,
		IDI_FLAG_SD, IDI_FLAG_SE, IDI_FLAG_SG, IDI_FLAG_SH, IDI_FLAG_SI, IDI_FLAG_SK,
		IDI_FLAG_SL, IDI_FLAG_SM, IDI_FLAG_SN, IDI_FLAG_SO, IDI_FLAG_SR, IDI_FLAG_ST,
		IDI_FLAG_SV, IDI_FLAG_SY, IDI_FLAG_SZ, IDI_FLAG_TC, IDI_FLAG_TD, IDI_FLAG_TF,
		IDI_FLAG_TG, IDI_FLAG_TH, IDI_FLAG_TJ, IDI_FLAG_TK, IDI_FLAG_TL, IDI_FLAG_TM,
		IDI_FLAG_TN, IDI_FLAG_TO, IDI_FLAG_TR, IDI_FLAG_TT, IDI_FLAG_TV, IDI_FLAG_TW,
		IDI_FLAG_TZ, IDI_FLAG_UA, IDI_FLAG_UG, IDI_FLAG_US, IDI_FLAG_US, IDI_FLAG_UY,
		IDI_FLAG_UZ, IDI_FLAG_VA, IDI_FLAG_VC, IDI_FLAG_VE, IDI_FLAG_VG, IDI_FLAG_VI,
		IDI_FLAG_VN, IDI_FLAG_VU, IDI_FLAG_WF, IDI_FLAG_WS, IDI_FLAG_YE, IDI_FLAG_FR,
		IDI_FLAG_ZA, IDI_FLAG_ZM, IDI_FLAG_ZW
d149 18
a166 18
		'MG', 'MH', 'MK', 'ML', 'MM', 'MN',
		'MO', 'MP', 'MQ', 'MR', 'MS', 'MT',
		'MU', 'MV', 'MW', 'MX', 'MY', 'MZ',
		'NA', 'NC', 'NE', 'NF', 'NG', 'NI',
		'NL', 'NO', 'NP', 'NR', 'NU', 'NZ',
		'OM', 'PA', 'PE', 'PF', 'PG', 'PH',
		'PK', 'PL', 'PM', 'PN', 'PR', 'PS',
		'PT', 'PW', 'PY', 'QA', 'RE', 'RO',
		'RS', 'RU', 'RW', 'SA', 'SB', 'SC',
		'SD', 'SE', 'SG', 'SH', 'SI', 'SK',
		'SL', 'SM', 'SN', 'SO', 'SR', 'ST',
		'SV', 'SY', 'SZ', 'TC', 'TD', 'TF',
		'TG', 'TH', 'TJ', 'TK', 'TL', 'TM',
		'TN', 'TO', 'TR', 'TT', 'TV', 'TW',
		'TZ', 'UA', 'UG', 'UM', 'US', 'UY',
		'UZ', 'VA', 'VC', 'VE', 'VG', 'VI',
		'VN', 'VU', 'WF', 'WS', 'YE', 'YT',
		'ZA', 'ZM', 'ZW'
@


1.35
log
@Simplified logging system implementation.
@
text
@d41 1
a41 1
	pstrTarget->TrimRight(); //clean out the space at the end, prevent exception for index++
d55 1
a55 1
			if (iIdx == 0)
d124 1
a124 1
	static const TCHAR s_apcCountryID[][3] =
d126 41
a166 41
		_T("AD"), _T("AE"), _T("AF"), _T("AG"), _T("AI"), _T("AL"),
		_T("AM"), _T("AN"), _T("AO"), _T("AQ"), _T("AR"), _T("AS"),
		_T("AT"), _T("AU"), _T("AW"), _T("AX"), _T("AZ"), _T("BA"),
		_T("BB"), _T("BD"), _T("BE"), _T("BF"), _T("BG"), _T("BH"),
		_T("BI"), _T("BJ"), _T("BM"), _T("BN"), _T("BO"), _T("BR"),
		_T("BS"), _T("BT"), _T("BV"), _T("BW"), _T("BY"), _T("BZ"),
		_T("CA"), _T("CC"), _T("CD"), _T("CF"), _T("CG"), _T("CH"),
		_T("CI"), _T("CK"), _T("CL"), _T("CM"), _T("CN"), _T("CO"),
		_T("CR"), _T("CS"), _T("CU"), _T("CV"), _T("CX"), _T("CY"),
		_T("CZ"), _T("DE"), _T("DJ"), _T("DK"), _T("DM"), _T("DO"),
		_T("DZ"), _T("EC"), _T("EE"), _T("EG"), _T("EH"), _T("ER"),
		_T("ES"), _T("ET"), _T("FI"), _T("FJ"), _T("FK"), _T("FM"),
		_T("FO"), _T("FR"), _T("GA"), _T("GB"), _T("GD"), _T("GE"),
		_T("GF"), _T("GG"), _T("GH"), _T("GI"), _T("GL"), _T("GM"),
		_T("GN"), _T("GP"), _T("GQ"), _T("GR"), _T("GS"), _T("GT"),
		_T("GU"), _T("GW"), _T("GY"), _T("HK"), _T("HN"), _T("HR"),
		_T("HT"), _T("HU"), _T("ID"), _T("IE"), _T("IL"), _T("IM"),
		_T("IN"), _T("IO"), _T("IQ"), _T("IR"), _T("IS"), _T("IT"),
		_T("JE"), _T("JM"), _T("JO"), _T("JP"), _T("KE"), _T("KG"),
		_T("KH"), _T("KI"), _T("KM"), _T("KN"), _T("KP"), _T("KR"),
		_T("KW"), _T("KY"), _T("KZ"), _T("LA"), _T("LB"), _T("LC"),
		_T("LI"), _T("LK"), _T("LR"), _T("LS"), _T("LT"), _T("LU"),
		_T("LV"), _T("LY"), _T("MA"), _T("MC"), _T("MD"), _T("ME"),
		_T("MG"), _T("MH"), _T("MK"), _T("ML"), _T("MM"), _T("MN"),
		_T("MO"), _T("MP"), _T("MQ"), _T("MR"), _T("MS"), _T("MT"),
		_T("MU"), _T("MV"), _T("MW"), _T("MX"), _T("MY"), _T("MZ"),
		_T("NA"), _T("NC"), _T("NE"), _T("NF"), _T("NG"), _T("NI"),
		_T("NL"), _T("NO"), _T("NP"), _T("NR"), _T("NU"), _T("NZ"),
		_T("OM"), _T("PA"), _T("PE"), _T("PF"), _T("PG"), _T("PH"),
		_T("PK"), _T("PL"), _T("PM"), _T("PN"), _T("PR"), _T("PS"),
		_T("PT"), _T("PW"), _T("PY"), _T("QA"), _T("RE"), _T("RO"),
		_T("RS"), _T("RU"), _T("RW"), _T("SA"), _T("SB"), _T("SC"),
		_T("SD"), _T("SE"), _T("SG"), _T("SH"), _T("SI"), _T("SK"),
		_T("SL"), _T("SM"), _T("SN"), _T("SO"), _T("SR"), _T("ST"),
		_T("SV"), _T("SY"), _T("SZ"), _T("TC"), _T("TD"), _T("TF"),
		_T("TG"), _T("TH"), _T("TJ"), _T("TK"), _T("TL"), _T("TM"),
		_T("TN"), _T("TO"), _T("TR"), _T("TT"), _T("TV"), _T("TW"),
		_T("TZ"), _T("UA"), _T("UG"), _T("UM"), _T("US"), _T("UY"),
		_T("UZ"), _T("VA"), _T("VC"), _T("VE"), _T("VG"), _T("VI"),
		_T("VN"), _T("VU"), _T("WF"), _T("WS"), _T("YE"), _T("YT"),
		_T("ZA"), _T("ZM"), _T("ZW")
d174 2
a175 2
	CRBMap<CString, uint32>	rbmapCountryIDtoFlagIndex(ARRSIZE(s_auResID));
	CRBMap<CString, uint32>::CPair	*pPair;
d179 2
a180 1
		rbmapCountryIDtoFlagIndex.SetAt(CString(reinterpret_cast<const TCHAR*>(&s_apcCountryID[ui])), s_auResID[ui]);
d196 1
a196 1
		uint32			dwIdx;
d219 1
a219 1
				AddLogLine(LOG_RGB_ERROR, _T("Invalid ResID, maybe upgrade is required ") COUNTRY_FLAG_DLL_NAME);
d250 4
a253 1
			strBuffer.TrimRight(_T('\n'));
d274 7
a280 1
			pPair = rbmapCountryIDtoFlagIndex.Lookup(strTemp[2]);	// short country name
d293 1
a293 1
							AddLogLine(LOG_RGB_ERROR, _T("Invalid ResID, maybe upgrade is required ") COUNTRY_FLAG_DLL_NAME);
d313 1
a313 1
								 strTemp[2], strTemp[4], uiLineNum );
@


1.34
log
@Added static for some local functions.
@
text
@d68 1
a68 1
		AddDebugLogLine(_T("IP-to-Country Database provided by ") RGB_STEEL_BLUE_TXT _T("WEBH") RGB_DARK_ORANGE_TXT _T("O") RGB_STEEL_BLUE_TXT _T("STING") RGB_DARK_ORANGE_TXT _T(".INFO") RGB_DEFAULT_TXT _T(", available from http://ip-to-country.webhosting.info."));
d206 1
a206 1
			AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_ERR_FILEOPEN2), CString(g_App.m_pPrefs->GetAppDir() + COUNTRY_FLAG_DLL_NAME));
d218 1
a218 1
				AddLogLine(false, RGB_LOG_ERROR_TXT _T("Invalid ResID, maybe upgrade is required ") COUNTRY_FLAG_DLL_NAME);
d260 1
a260 1
					AddDebugLogLine(RGB_LOG_ERROR_TXT _T(__FUNCTION__) _T(": %s error (line: %u)"), strIP2CountryCSVfile, uiLineNum);
d283 1
a283 1
							AddLogLine(false, RGB_LOG_ERROR_TXT _T("Invalid ResID, maybe upgrade is required ") COUNTRY_FLAG_DLL_NAME);
d302 1
a302 1
				AddDebugLogLine( RGB_LOG_WARNING_TXT _T("Unsupported country name found %s/%s (line: %u)"),
d346 1
a346 3
	{
		AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_ERR_FILEOPEN2), strIP2CountryCSVfile);
	}
@


1.33
log
@Removed GK as there's no country like this;
NC flag replaced with FR as it's their official flag at this moment.
@
text
@d39 1
a39 1
void FirstCharCap(CString *pstrTarget)
@


1.32
log
@Faster (intrinsic) htonl and htons implementation; Optimized the first letter capitalization of country words.
@
text
@d95 28
a122 28
		IDI_FLAG_FR, IDI_FLAG_GG, IDI_FLAG_GH, IDI_FLAG_GI, IDI_FLAG_GK, IDI_FLAG_GL,
		IDI_FLAG_GM, IDI_FLAG_GN, IDI_FLAG_GP, IDI_FLAG_GQ, IDI_FLAG_GR, IDI_FLAG_GS,
		IDI_FLAG_GT, IDI_FLAG_GU, IDI_FLAG_GW, IDI_FLAG_GY, IDI_FLAG_HK, IDI_FLAG_HN,
		IDI_FLAG_HR, IDI_FLAG_HT, IDI_FLAG_HU, IDI_FLAG_ID, IDI_FLAG_IE, IDI_FLAG_IL,
		IDI_FLAG_IM, IDI_FLAG_IN, IDI_FLAG_IO, IDI_FLAG_IQ, IDI_FLAG_IR, IDI_FLAG_IS,
		IDI_FLAG_IT, IDI_FLAG_JE, IDI_FLAG_JM, IDI_FLAG_JO, IDI_FLAG_JP, IDI_FLAG_KE,
		IDI_FLAG_KG, IDI_FLAG_KH, IDI_FLAG_KI, IDI_FLAG_KM, IDI_FLAG_KN, IDI_FLAG_KP,
		IDI_FLAG_KR, IDI_FLAG_KW, IDI_FLAG_KY, IDI_FLAG_KZ, IDI_FLAG_LA, IDI_FLAG_LB,
		IDI_FLAG_LC, IDI_FLAG_LI, IDI_FLAG_LK, IDI_FLAG_LR, IDI_FLAG_LS, IDI_FLAG_LT,
		IDI_FLAG_LU, IDI_FLAG_LV, IDI_FLAG_LY, IDI_FLAG_MA, IDI_FLAG_MC, IDI_FLAG_MD,
		IDI_FLAG_ME, IDI_FLAG_MG, IDI_FLAG_MH, IDI_FLAG_MK, IDI_FLAG_ML, IDI_FLAG_MM,
		IDI_FLAG_MN, IDI_FLAG_MO, IDI_FLAG_MP, IDI_FLAG_MQ, IDI_FLAG_MR, IDI_FLAG_MS,
		IDI_FLAG_MT, IDI_FLAG_MU, IDI_FLAG_MV, IDI_FLAG_MW, IDI_FLAG_MX, IDI_FLAG_MY,
		IDI_FLAG_MZ, IDI_FLAG_NA, IDI_FLAG_NC, IDI_FLAG_NE, IDI_FLAG_NF, IDI_FLAG_NG,
		IDI_FLAG_NI, IDI_FLAG_NL, IDI_FLAG_NO, IDI_FLAG_NP, IDI_FLAG_NR, IDI_FLAG_NU,
		IDI_FLAG_NZ, IDI_FLAG_OM, IDI_FLAG_PA, IDI_FLAG_PE, IDI_FLAG_PF, IDI_FLAG_PG,
		IDI_FLAG_PH, IDI_FLAG_PK, IDI_FLAG_PL, IDI_FLAG_PM, IDI_FLAG_PN, IDI_FLAG_PR,
		IDI_FLAG_PS, IDI_FLAG_PT, IDI_FLAG_PW, IDI_FLAG_PY, IDI_FLAG_QA, IDI_FLAG_FR,
		IDI_FLAG_RO, IDI_FLAG_RS, IDI_FLAG_RU, IDI_FLAG_RW, IDI_FLAG_SA, IDI_FLAG_SB,
		IDI_FLAG_SC, IDI_FLAG_SD, IDI_FLAG_SE, IDI_FLAG_SG, IDI_FLAG_SH, IDI_FLAG_SI,
		IDI_FLAG_SK, IDI_FLAG_SL, IDI_FLAG_SM, IDI_FLAG_SN, IDI_FLAG_SO, IDI_FLAG_SR,
		IDI_FLAG_ST, IDI_FLAG_SV, IDI_FLAG_SY, IDI_FLAG_SZ, IDI_FLAG_TC, IDI_FLAG_TD,
		IDI_FLAG_TF, IDI_FLAG_TG, IDI_FLAG_TH, IDI_FLAG_TJ, IDI_FLAG_TK, IDI_FLAG_TL,
		IDI_FLAG_TM, IDI_FLAG_TN, IDI_FLAG_TO, IDI_FLAG_TR, IDI_FLAG_TT, IDI_FLAG_TV,
		IDI_FLAG_TW, IDI_FLAG_TZ, IDI_FLAG_UA, IDI_FLAG_UG, IDI_FLAG_US, IDI_FLAG_US,
		IDI_FLAG_UY, IDI_FLAG_UZ, IDI_FLAG_VA, IDI_FLAG_VC, IDI_FLAG_VE, IDI_FLAG_VG,
		IDI_FLAG_VI, IDI_FLAG_VN, IDI_FLAG_VU, IDI_FLAG_WF, IDI_FLAG_WS, IDI_FLAG_YE,
		IDI_FLAG_FR, IDI_FLAG_ZA, IDI_FLAG_ZM, IDI_FLAG_ZW
d139 28
a166 28
		_T("GF"), _T("GG"), _T("GH"), _T("GI"), _T("GK"), _T("GL"),
		_T("GM"), _T("GN"), _T("GP"), _T("GQ"), _T("GR"), _T("GS"),
		_T("GT"), _T("GU"), _T("GW"), _T("GY"), _T("HK"), _T("HN"),
		_T("HR"), _T("HT"), _T("HU"), _T("ID"), _T("IE"), _T("IL"),
		_T("IM"), _T("IN"), _T("IO"), _T("IQ"), _T("IR"), _T("IS"),
		_T("IT"), _T("JE"), _T("JM"), _T("JO"), _T("JP"), _T("KE"),
		_T("KG"), _T("KH"), _T("KI"), _T("KM"), _T("KN"), _T("KP"),
		_T("KR"), _T("KW"), _T("KY"), _T("KZ"), _T("LA"), _T("LB"),
		_T("LC"), _T("LI"), _T("LK"), _T("LR"), _T("LS"), _T("LT"),
		_T("LU"), _T("LV"), _T("LY"), _T("MA"), _T("MC"), _T("MD"),
		_T("ME"), _T("MG"), _T("MH"), _T("MK"), _T("ML"), _T("MM"),
		_T("MN"), _T("MO"), _T("MP"), _T("MQ"), _T("MR"), _T("MS"),
		_T("MT"), _T("MU"), _T("MV"), _T("MW"), _T("MX"), _T("MY"),
		_T("MZ"), _T("NA"), _T("NC"), _T("NE"), _T("NF"), _T("NG"),
		_T("NI"), _T("NL"), _T("NO"), _T("NP"), _T("NR"), _T("NU"),
		_T("NZ"), _T("OM"), _T("PA"), _T("PE"), _T("PF"), _T("PG"),
		_T("PH"), _T("PK"), _T("PL"), _T("PM"), _T("PN"), _T("PR"),
		_T("PS"), _T("PT"), _T("PW"), _T("PY"), _T("QA"), _T("RE"),
		_T("RO"), _T("RS"), _T("RU"), _T("RW"), _T("SA"), _T("SB"),
		_T("SC"), _T("SD"), _T("SE"), _T("SG"), _T("SH"), _T("SI"),
		_T("SK"), _T("SL"), _T("SM"), _T("SN"), _T("SO"), _T("SR"),
		_T("ST"), _T("SV"), _T("SY"), _T("SZ"), _T("TC"), _T("TD"),
		_T("TF"), _T("TG"), _T("TH"), _T("TJ"), _T("TK"), _T("TL"),
		_T("TM"), _T("TN"), _T("TO"), _T("TR"), _T("TT"), _T("TV"),
		_T("TW"), _T("TZ"), _T("UA"), _T("UG"), _T("UM"), _T("US"),
		_T("UY"), _T("UZ"), _T("VA"), _T("VC"), _T("VE"), _T("VG"),
		_T("VI"), _T("VN"), _T("VU"), _T("WF"), _T("WS"), _T("YE"),
		_T("YT"), _T("ZA"), _T("ZM"), _T("ZW")
@


1.31
log
@Proper share mode for open files (before other applications could write to a file while we were reading).
@
text
@d44 4
d51 3
a53 1
			pstrTarget->SetAt(iIdx, pstrTarget->Mid(iIdx, 1).MakeUpper().GetAt(0));
d390 1
a390 1
		dwClientIP = htonl(dwClientIP);
@


1.30
log
@BV country code added.
@
text
@d29 1
d181 1
a181 1
	if ((pReadFile = _tfopen(strIP2CountryCSVfile, _T("r"))) != NULL)
@


1.29
log
@Replaced used macro name [Aw3].
@
text
@d80 36
a115 36
		IDI_FLAG_BS, IDI_FLAG_BT, IDI_FLAG_BW, IDI_FLAG_BY, IDI_FLAG_BZ, IDI_FLAG_CA,
		IDI_FLAG_CC, IDI_FLAG_CD, IDI_FLAG_CF, IDI_FLAG_CG, IDI_FLAG_CH, IDI_FLAG_CI,
		IDI_FLAG_CK, IDI_FLAG_CL, IDI_FLAG_CM, IDI_FLAG_CN, IDI_FLAG_CO, IDI_FLAG_CR,
		IDI_FLAG_YU, IDI_FLAG_CU, IDI_FLAG_CV, IDI_FLAG_CX, IDI_FLAG_CY, IDI_FLAG_CZ,
		IDI_FLAG_DE, IDI_FLAG_DJ, IDI_FLAG_DK, IDI_FLAG_DM, IDI_FLAG_DO, IDI_FLAG_DZ,
		IDI_FLAG_EC, IDI_FLAG_EE, IDI_FLAG_EG, IDI_FLAG_EH, IDI_FLAG_ER, IDI_FLAG_ES,
		IDI_FLAG_ET, IDI_FLAG_FI, IDI_FLAG_FJ, IDI_FLAG_FK, IDI_FLAG_FM, IDI_FLAG_FO,
		IDI_FLAG_FR, IDI_FLAG_GA, IDI_FLAG_GB, IDI_FLAG_GD, IDI_FLAG_GE, IDI_FLAG_FR,
		IDI_FLAG_GG, IDI_FLAG_GH, IDI_FLAG_GI, IDI_FLAG_GK, IDI_FLAG_GL, IDI_FLAG_GM,
		IDI_FLAG_GN, IDI_FLAG_GP, IDI_FLAG_GQ, IDI_FLAG_GR, IDI_FLAG_GS, IDI_FLAG_GT,
		IDI_FLAG_GU, IDI_FLAG_GW, IDI_FLAG_GY, IDI_FLAG_HK, IDI_FLAG_HN, IDI_FLAG_HR,
		IDI_FLAG_HT, IDI_FLAG_HU, IDI_FLAG_ID, IDI_FLAG_IE, IDI_FLAG_IL, IDI_FLAG_IM,
		IDI_FLAG_IN, IDI_FLAG_IO, IDI_FLAG_IQ, IDI_FLAG_IR, IDI_FLAG_IS, IDI_FLAG_IT,
		IDI_FLAG_JE, IDI_FLAG_JM, IDI_FLAG_JO, IDI_FLAG_JP, IDI_FLAG_KE, IDI_FLAG_KG,
		IDI_FLAG_KH, IDI_FLAG_KI, IDI_FLAG_KM, IDI_FLAG_KN, IDI_FLAG_KP, IDI_FLAG_KR,
		IDI_FLAG_KW, IDI_FLAG_KY, IDI_FLAG_KZ, IDI_FLAG_LA, IDI_FLAG_LB, IDI_FLAG_LC,
		IDI_FLAG_LI, IDI_FLAG_LK, IDI_FLAG_LR, IDI_FLAG_LS, IDI_FLAG_LT, IDI_FLAG_LU,
		IDI_FLAG_LV, IDI_FLAG_LY, IDI_FLAG_MA, IDI_FLAG_MC, IDI_FLAG_MD, IDI_FLAG_ME,
		IDI_FLAG_MG, IDI_FLAG_MH, IDI_FLAG_MK, IDI_FLAG_ML, IDI_FLAG_MM, IDI_FLAG_MN,
		IDI_FLAG_MO, IDI_FLAG_MP, IDI_FLAG_MQ, IDI_FLAG_MR, IDI_FLAG_MS, IDI_FLAG_MT,
		IDI_FLAG_MU, IDI_FLAG_MV, IDI_FLAG_MW, IDI_FLAG_MX, IDI_FLAG_MY, IDI_FLAG_MZ,
		IDI_FLAG_NA, IDI_FLAG_NC, IDI_FLAG_NE, IDI_FLAG_NF, IDI_FLAG_NG, IDI_FLAG_NI,
		IDI_FLAG_NL, IDI_FLAG_NO, IDI_FLAG_NP, IDI_FLAG_NR, IDI_FLAG_NU, IDI_FLAG_NZ,
		IDI_FLAG_OM, IDI_FLAG_PA, IDI_FLAG_PE, IDI_FLAG_PF, IDI_FLAG_PG, IDI_FLAG_PH,
		IDI_FLAG_PK, IDI_FLAG_PL, IDI_FLAG_PM, IDI_FLAG_PN, IDI_FLAG_PR, IDI_FLAG_PS,
		IDI_FLAG_PT, IDI_FLAG_PW, IDI_FLAG_PY, IDI_FLAG_QA, IDI_FLAG_FR, IDI_FLAG_RO,
		IDI_FLAG_RS, IDI_FLAG_RU, IDI_FLAG_RW, IDI_FLAG_SA, IDI_FLAG_SB, IDI_FLAG_SC,
		IDI_FLAG_SD, IDI_FLAG_SE, IDI_FLAG_SG, IDI_FLAG_SH, IDI_FLAG_SI, IDI_FLAG_SK,
		IDI_FLAG_SL, IDI_FLAG_SM, IDI_FLAG_SN, IDI_FLAG_SO, IDI_FLAG_SR, IDI_FLAG_ST,
		IDI_FLAG_SV, IDI_FLAG_SY, IDI_FLAG_SZ, IDI_FLAG_TC, IDI_FLAG_TD, IDI_FLAG_TF,
		IDI_FLAG_TG, IDI_FLAG_TH, IDI_FLAG_TJ, IDI_FLAG_TK, IDI_FLAG_TL, IDI_FLAG_TM,
		IDI_FLAG_TN, IDI_FLAG_TO, IDI_FLAG_TR, IDI_FLAG_TT, IDI_FLAG_TV, IDI_FLAG_TW,
		IDI_FLAG_TZ, IDI_FLAG_UA, IDI_FLAG_UG, IDI_FLAG_US, IDI_FLAG_US, IDI_FLAG_UY,
		IDI_FLAG_UZ, IDI_FLAG_VA, IDI_FLAG_VC, IDI_FLAG_VE, IDI_FLAG_VG, IDI_FLAG_VI,
		IDI_FLAG_VN, IDI_FLAG_VU, IDI_FLAG_WF, IDI_FLAG_WS, IDI_FLAG_YE, IDI_FLAG_FR,
		IDI_FLAG_ZA, IDI_FLAG_ZM, IDI_FLAG_ZW
d124 36
a159 36
		_T("BS"), _T("BT"), _T("BW"), _T("BY"), _T("BZ"), _T("CA"),
		_T("CC"), _T("CD"), _T("CF"), _T("CG"), _T("CH"), _T("CI"),
		_T("CK"), _T("CL"), _T("CM"), _T("CN"), _T("CO"), _T("CR"),
		_T("CS"), _T("CU"), _T("CV"), _T("CX"), _T("CY"), _T("CZ"),
		_T("DE"), _T("DJ"), _T("DK"), _T("DM"), _T("DO"), _T("DZ"),
		_T("EC"), _T("EE"), _T("EG"), _T("EH"), _T("ER"), _T("ES"),
		_T("ET"), _T("FI"), _T("FJ"), _T("FK"), _T("FM"), _T("FO"),
		_T("FR"), _T("GA"), _T("GB"), _T("GD"), _T("GE"), _T("GF"),
		_T("GG"), _T("GH"), _T("GI"), _T("GK"), _T("GL"), _T("GM"),
		_T("GN"), _T("GP"), _T("GQ"), _T("GR"), _T("GS"), _T("GT"),
		_T("GU"), _T("GW"), _T("GY"), _T("HK"), _T("HN"), _T("HR"),
		_T("HT"), _T("HU"), _T("ID"), _T("IE"), _T("IL"), _T("IM"),
		_T("IN"), _T("IO"), _T("IQ"), _T("IR"), _T("IS"), _T("IT"),
		_T("JE"), _T("JM"), _T("JO"), _T("JP"), _T("KE"), _T("KG"),
		_T("KH"), _T("KI"), _T("KM"), _T("KN"), _T("KP"), _T("KR"),
		_T("KW"), _T("KY"), _T("KZ"), _T("LA"), _T("LB"), _T("LC"),
		_T("LI"), _T("LK"), _T("LR"), _T("LS"), _T("LT"), _T("LU"),
		_T("LV"), _T("LY"), _T("MA"), _T("MC"), _T("MD"), _T("ME"),
		_T("MG"), _T("MH"), _T("MK"), _T("ML"), _T("MM"), _T("MN"),
		_T("MO"), _T("MP"), _T("MQ"), _T("MR"), _T("MS"), _T("MT"),
		_T("MU"), _T("MV"), _T("MW"), _T("MX"), _T("MY"), _T("MZ"),
		_T("NA"), _T("NC"), _T("NE"), _T("NF"), _T("NG"), _T("NI"),
		_T("NL"), _T("NO"), _T("NP"), _T("NR"), _T("NU"), _T("NZ"),
		_T("OM"), _T("PA"), _T("PE"), _T("PF"), _T("PG"), _T("PH"),
		_T("PK"), _T("PL"), _T("PM"), _T("PN"), _T("PR"), _T("PS"),
		_T("PT"), _T("PW"), _T("PY"), _T("QA"), _T("RE"), _T("RO"),
		_T("RS"), _T("RU"), _T("RW"), _T("SA"), _T("SB"), _T("SC"),
		_T("SD"), _T("SE"), _T("SG"), _T("SH"), _T("SI"), _T("SK"),
		_T("SL"), _T("SM"), _T("SN"), _T("SO"), _T("SR"), _T("ST"),
		_T("SV"), _T("SY"), _T("SZ"), _T("TC"), _T("TD"), _T("TF"),
		_T("TG"), _T("TH"), _T("TJ"), _T("TK"), _T("TL"), _T("TM"),
		_T("TN"), _T("TO"), _T("TR"), _T("TT"), _T("TV"), _T("TW"),
		_T("TZ"), _T("UA"), _T("UG"), _T("UM"), _T("US"), _T("UY"),
		_T("UZ"), _T("VA"), _T("VC"), _T("VE"), _T("VG"), _T("VI"),
		_T("VN"), _T("VU"), _T("WF"), _T("WS"), _T("YE"), _T("YT"),
		_T("ZA"), _T("ZM"), _T("ZW")
@


1.28
log
@Removed former PC (PACIFIC ISLANDS) flag support, added AX (ALAND ISLANDS) and ME (MONTENEGRO).
@
text
@d167 1
a167 1
	CRBMap<CString, uint32>	rbmapCountryIDtoFlagIndex(ELEMENT_COUNT(s_auResID));
d170 1
a170 1
	for (unsigned ui = 0; ui < ELEMENT_COUNT(s_auResID); ui++)
d247 1
a247 1
			for (unsigned ui = 0; ui < ELEMENT_COUNT(strTemp); ui++)
@


1.27
log
@Added Serbian flag.
@
text
@d77 39
a115 39
		IDI_FLAG_AT, IDI_FLAG_AU, IDI_FLAG_AW, IDI_FLAG_AZ, IDI_FLAG_BA, IDI_FLAG_BB,
		IDI_FLAG_BD, IDI_FLAG_BE, IDI_FLAG_BF, IDI_FLAG_BG, IDI_FLAG_BH, IDI_FLAG_BI,
		IDI_FLAG_BJ, IDI_FLAG_BM, IDI_FLAG_BN, IDI_FLAG_BO, IDI_FLAG_BR, IDI_FLAG_BS,
		IDI_FLAG_BT, IDI_FLAG_BW, IDI_FLAG_BY, IDI_FLAG_BZ, IDI_FLAG_CA, IDI_FLAG_CC,
		IDI_FLAG_CD, IDI_FLAG_CF, IDI_FLAG_CG, IDI_FLAG_CH, IDI_FLAG_CI, IDI_FLAG_CK,
		IDI_FLAG_CL, IDI_FLAG_CM, IDI_FLAG_CN, IDI_FLAG_CO, IDI_FLAG_CR, IDI_FLAG_YU,
		IDI_FLAG_CU, IDI_FLAG_CV, IDI_FLAG_CX, IDI_FLAG_CY, IDI_FLAG_CZ, IDI_FLAG_DE,
		IDI_FLAG_DJ, IDI_FLAG_DK, IDI_FLAG_DM, IDI_FLAG_DO, IDI_FLAG_DZ, IDI_FLAG_EC,
		IDI_FLAG_EE, IDI_FLAG_EG, IDI_FLAG_EH, IDI_FLAG_ER, IDI_FLAG_ES, IDI_FLAG_ET,
		IDI_FLAG_FI, IDI_FLAG_FJ, IDI_FLAG_FK, IDI_FLAG_FM, IDI_FLAG_FO, IDI_FLAG_FR,
		IDI_FLAG_GA, IDI_FLAG_GB, IDI_FLAG_GD, IDI_FLAG_GE, IDI_FLAG_FR, IDI_FLAG_GG,
		IDI_FLAG_GH, IDI_FLAG_GI, IDI_FLAG_GK, IDI_FLAG_GL, IDI_FLAG_GM, IDI_FLAG_GN,
		IDI_FLAG_GP, IDI_FLAG_GQ, IDI_FLAG_GR, IDI_FLAG_GS, IDI_FLAG_GT, IDI_FLAG_GU,
		IDI_FLAG_GW, IDI_FLAG_GY, IDI_FLAG_HK, IDI_FLAG_HN, IDI_FLAG_HR, IDI_FLAG_HT,
		IDI_FLAG_HU, IDI_FLAG_ID, IDI_FLAG_IE, IDI_FLAG_IL, IDI_FLAG_IM, IDI_FLAG_IN,
		IDI_FLAG_IO, IDI_FLAG_IQ, IDI_FLAG_IR, IDI_FLAG_IS, IDI_FLAG_IT, IDI_FLAG_JE,
		IDI_FLAG_JM, IDI_FLAG_JO, IDI_FLAG_JP, IDI_FLAG_KE, IDI_FLAG_KG, IDI_FLAG_KH,
		IDI_FLAG_KI, IDI_FLAG_KM, IDI_FLAG_KN, IDI_FLAG_KP, IDI_FLAG_KR, IDI_FLAG_KW,
		IDI_FLAG_KY, IDI_FLAG_KZ, IDI_FLAG_LA, IDI_FLAG_LB, IDI_FLAG_LC, IDI_FLAG_LI,
		IDI_FLAG_LK, IDI_FLAG_LR, IDI_FLAG_LS, IDI_FLAG_LT, IDI_FLAG_LU, IDI_FLAG_LV,
		IDI_FLAG_LY, IDI_FLAG_MA, IDI_FLAG_MC, IDI_FLAG_MD, IDI_FLAG_MG, IDI_FLAG_MH,
		IDI_FLAG_MK, IDI_FLAG_ML, IDI_FLAG_MM, IDI_FLAG_MN, IDI_FLAG_MO, IDI_FLAG_MP,
		IDI_FLAG_MQ, IDI_FLAG_MR, IDI_FLAG_MS, IDI_FLAG_MT, IDI_FLAG_MU, IDI_FLAG_MV,
		IDI_FLAG_MW, IDI_FLAG_MX, IDI_FLAG_MY, IDI_FLAG_MZ, IDI_FLAG_NA, IDI_FLAG_NC,
		IDI_FLAG_NE, IDI_FLAG_NF, IDI_FLAG_NG, IDI_FLAG_NI, IDI_FLAG_NL, IDI_FLAG_NO,
		IDI_FLAG_NP, IDI_FLAG_NR, IDI_FLAG_NU, IDI_FLAG_NZ, IDI_FLAG_OM, IDI_FLAG_PA,
		IDI_FLAG_PC, IDI_FLAG_PE, IDI_FLAG_PF, IDI_FLAG_PG, IDI_FLAG_PH, IDI_FLAG_PK,
		IDI_FLAG_PL, IDI_FLAG_PM, IDI_FLAG_PN, IDI_FLAG_PR, IDI_FLAG_PS, IDI_FLAG_PT,
		IDI_FLAG_PW, IDI_FLAG_PY, IDI_FLAG_QA, IDI_FLAG_FR, IDI_FLAG_RO, IDI_FLAG_RS,
		IDI_FLAG_RU, IDI_FLAG_RW, IDI_FLAG_SA, IDI_FLAG_SB, IDI_FLAG_SC, IDI_FLAG_SD,
		IDI_FLAG_SE, IDI_FLAG_SG, IDI_FLAG_SH, IDI_FLAG_SI, IDI_FLAG_SK, IDI_FLAG_SL,
		IDI_FLAG_SM, IDI_FLAG_SN, IDI_FLAG_SO, IDI_FLAG_SR, IDI_FLAG_ST, IDI_FLAG_SV,
		IDI_FLAG_SY, IDI_FLAG_SZ, IDI_FLAG_TC, IDI_FLAG_TD, IDI_FLAG_TF, IDI_FLAG_TG,
		IDI_FLAG_TH, IDI_FLAG_TJ, IDI_FLAG_TK, IDI_FLAG_TL, IDI_FLAG_TM, IDI_FLAG_TN,
		IDI_FLAG_TO, IDI_FLAG_TR, IDI_FLAG_TT, IDI_FLAG_TV, IDI_FLAG_TW, IDI_FLAG_TZ,
		IDI_FLAG_UA, IDI_FLAG_UG, IDI_FLAG_US, IDI_FLAG_US, IDI_FLAG_UY, IDI_FLAG_UZ,
		IDI_FLAG_VA, IDI_FLAG_VC, IDI_FLAG_VE, IDI_FLAG_VG, IDI_FLAG_VI, IDI_FLAG_VN,
		IDI_FLAG_VU, IDI_FLAG_WF, IDI_FLAG_WS, IDI_FLAG_YE, IDI_FLAG_FR, IDI_FLAG_ZA,
		IDI_FLAG_ZM, IDI_FLAG_ZW
d121 39
a159 39
		_T("AT"), _T("AU"), _T("AW"), _T("AZ"), _T("BA"), _T("BB"),
		_T("BD"), _T("BE"), _T("BF"), _T("BG"), _T("BH"), _T("BI"),
		_T("BJ"), _T("BM"), _T("BN"), _T("BO"), _T("BR"), _T("BS"),
		_T("BT"), _T("BW"), _T("BY"), _T("BZ"), _T("CA"), _T("CC"),
		_T("CD"), _T("CF"), _T("CG"), _T("CH"), _T("CI"), _T("CK"),
		_T("CL"), _T("CM"), _T("CN"), _T("CO"), _T("CR"), _T("CS"),
		_T("CU"), _T("CV"), _T("CX"), _T("CY"), _T("CZ"), _T("DE"),
		_T("DJ"), _T("DK"), _T("DM"), _T("DO"), _T("DZ"), _T("EC"),
		_T("EE"), _T("EG"), _T("EH"), _T("ER"), _T("ES"), _T("ET"),
		_T("FI"), _T("FJ"), _T("FK"), _T("FM"), _T("FO"), _T("FR"),
		_T("GA"), _T("GB"), _T("GD"), _T("GE"), _T("GF"), _T("GG"),
		_T("GH"), _T("GI"), _T("GK"), _T("GL"), _T("GM"), _T("GN"),
		_T("GP"), _T("GQ"), _T("GR"), _T("GS"), _T("GT"), _T("GU"),
		_T("GW"), _T("GY"), _T("HK"), _T("HN"), _T("HR"), _T("HT"),
		_T("HU"), _T("ID"), _T("IE"), _T("IL"), _T("IM"), _T("IN"),
		_T("IO"), _T("IQ"), _T("IR"), _T("IS"), _T("IT"), _T("JE"),
		_T("JM"), _T("JO"), _T("JP"), _T("KE"), _T("KG"), _T("KH"),
		_T("KI"), _T("KM"), _T("KN"), _T("KP"), _T("KR"), _T("KW"),
		_T("KY"), _T("KZ"), _T("LA"), _T("LB"), _T("LC"), _T("LI"),
		_T("LK"), _T("LR"), _T("LS"), _T("LT"), _T("LU"), _T("LV"),
		_T("LY"), _T("MA"), _T("MC"), _T("MD"), _T("MG"), _T("MH"),
		_T("MK"), _T("ML"), _T("MM"), _T("MN"), _T("MO"), _T("MP"),
		_T("MQ"), _T("MR"), _T("MS"), _T("MT"), _T("MU"), _T("MV"),
		_T("MW"), _T("MX"), _T("MY"), _T("MZ"), _T("NA"), _T("NC"),
		_T("NE"), _T("NF"), _T("NG"), _T("NI"), _T("NL"), _T("NO"),
		_T("NP"), _T("NR"), _T("NU"), _T("NZ"), _T("OM"), _T("PA"),
		_T("PC"), _T("PE"), _T("PF"), _T("PG"), _T("PH"), _T("PK"),
		_T("PL"), _T("PM"), _T("PN"), _T("PR"), _T("PS"), _T("PT"),
		_T("PW"), _T("PY"), _T("QA"), _T("RE"), _T("RO"), _T("RS"),
		_T("RU"), _T("RW"), _T("SA"), _T("SB"), _T("SC"), _T("SD"),
		_T("SE"), _T("SG"), _T("SH"), _T("SI"), _T("SK"), _T("SL"),
		_T("SM"), _T("SN"), _T("SO"), _T("SR"), _T("ST"), _T("SV"),
		_T("SY"), _T("SZ"), _T("TC"), _T("TD"), _T("TF"), _T("TG"),
		_T("TH"), _T("TJ"), _T("TK"), _T("TL"), _T("TM"), _T("TN"),
		_T("TO"), _T("TR"), _T("TT"), _T("TV"), _T("TW"), _T("TZ"),
		_T("UA"), _T("UG"), _T("UM"), _T("US"), _T("UY"), _T("UZ"),
		_T("VA"), _T("VC"), _T("VE"), _T("VG"), _T("VI"), _T("VN"),
		_T("VU"), _T("WF"), _T("WS"), _T("YE"), _T("YT"), _T("ZA"),
		_T("ZM"), _T("ZW")
@


1.26
log
@UNICODE preparations
@
text
@d105 11
a115 11
		IDI_FLAG_PW, IDI_FLAG_PY, IDI_FLAG_QA, IDI_FLAG_FR, IDI_FLAG_RO, IDI_FLAG_RU,
		IDI_FLAG_RW, IDI_FLAG_SA, IDI_FLAG_SB, IDI_FLAG_SC, IDI_FLAG_SD, IDI_FLAG_SE,
		IDI_FLAG_SG, IDI_FLAG_SH, IDI_FLAG_SI, IDI_FLAG_SK, IDI_FLAG_SL, IDI_FLAG_SM,
		IDI_FLAG_SN, IDI_FLAG_SO, IDI_FLAG_SR, IDI_FLAG_ST, IDI_FLAG_SV, IDI_FLAG_SY,
		IDI_FLAG_SZ, IDI_FLAG_TC, IDI_FLAG_TD, IDI_FLAG_TF, IDI_FLAG_TG, IDI_FLAG_TH,
		IDI_FLAG_TJ, IDI_FLAG_TK, IDI_FLAG_TL, IDI_FLAG_TM, IDI_FLAG_TN, IDI_FLAG_TO,
		IDI_FLAG_TR, IDI_FLAG_TT, IDI_FLAG_TV, IDI_FLAG_TW, IDI_FLAG_TZ, IDI_FLAG_UA,
		IDI_FLAG_UG, IDI_FLAG_US, IDI_FLAG_US, IDI_FLAG_UY, IDI_FLAG_UZ, IDI_FLAG_VA,
		IDI_FLAG_VC, IDI_FLAG_VE, IDI_FLAG_VG, IDI_FLAG_VI, IDI_FLAG_VN, IDI_FLAG_VU,
		IDI_FLAG_WF, IDI_FLAG_WS, IDI_FLAG_YE, IDI_FLAG_FR, IDI_FLAG_ZA, IDI_FLAG_ZM,
		IDI_FLAG_ZW
d149 11
a159 11
		_T("PW"), _T("PY"), _T("QA"), _T("RE"), _T("RO"), _T("RU"),
		_T("RW"), _T("SA"), _T("SB"), _T("SC"), _T("SD"), _T("SE"),
		_T("SG"), _T("SH"), _T("SI"), _T("SK"), _T("SL"), _T("SM"),
		_T("SN"), _T("SO"), _T("SR"), _T("ST"), _T("SV"), _T("SY"),
		_T("SZ"), _T("TC"), _T("TD"), _T("TF"), _T("TG"), _T("TH"),
		_T("TJ"), _T("TK"), _T("TL"), _T("TM"), _T("TN"), _T("TO"),
		_T("TR"), _T("TT"), _T("TV"), _T("TW"), _T("TZ"), _T("UA"),
		_T("UG"), _T("UM"), _T("US"), _T("UY"), _T("UZ"), _T("VA"),
		_T("VC"), _T("VE"), _T("VG"), _T("VI"), _T("VN"), _T("VU"),
		_T("WF"), _T("WS"), _T("YE"), _T("YT"), _T("ZA"), _T("ZM"),
		_T("ZW")
@


1.25
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d180 1
a180 1
	if ((pReadFile = fopen(strIP2CountryCSVfile, _T("r"))) != NULL)
d182 1
a182 1
		char			acBuffer[512];
d189 1
a189 1
		HICON				hIcon;
d220 1
a220 1
		while (!feof(pReadFile))
d222 1
a222 1
			if (fgets(acBuffer, sizeof(acBuffer), pReadFile) == 0)
@


1.24
log
@renamed 3 variables
@
text
@d59 1
a59 1
	if (g_App.g_pPrefs->GetShowCountryFlag())
d176 1
a176 1
	CString	strIP2CountryCSVfile = g_App.g_pPrefs->GetConfigDir();
d199 1
a199 1
			AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_ERR_FILEOPEN2), CString(g_App.g_pPrefs->GetAppDir() + COUNTRY_FLAG_DLL_NAME));
@


1.23
log
@Unicode corrections {KuSh}.
@
text
@d59 1
a59 1
	if (g_eMuleApp.m_pGlobPrefs->GetShowCountryFlag())
d176 1
a176 1
	CString	strIP2CountryCSVfile = g_eMuleApp.m_pGlobPrefs->GetConfigDir();
d199 1
a199 1
			AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_ERR_FILEOPEN2), CString(g_eMuleApp.m_pGlobPrefs->GetAppDir() + COUNTRY_FLAG_DLL_NAME));
d203 1
a203 1
			m_lstCountryFlagImage.Create(18, 12, g_eMuleApp.m_iDfltImageListColorFlags | ILC_MASK, 200, 1);
d365 2
a366 2
	g_eMuleApp.m_pServerList->ResetIP2Country();
	g_eMuleApp.m_pClientList->ResetIP2Country();
d371 1
a371 1
	g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.RefreshAllServer();
@


1.22
log
@Applied some corrections for Unicode.
@
text
@d253 1
a253 1
					AddDebugLogLine(RGB_LOG_ERROR_TXT _T("%s: %s error (line: %u)"), __FUNCTION__, strIP2CountryCSVfile, uiLineNum);
@


1.21
log
@Added Mayotte support.
@
text
@d119 41
a159 17
		"AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW",
		"AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS",
		"BT", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN",
		"CO", "CR", "CS", "CU", "CV", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC",
		"EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD",
		"GE", "GF", "GG", "GH", "GI", "GK", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU",
		"GW", "GY", "HK", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR",
		"IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW",
		"KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC",
		"MD", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV",
		"MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU",
		"NZ", "OM", "PA", "PC", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT",
		"PW", "PY", "QA", "RE", "RO", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI",
		"SK", "SL", "SM", "SN", "SO", "SR", "ST", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH",
		"TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US",
		"UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM",
		"ZW"
d260 1
a260 1
			ipRangeData.dwIPend = atoi(strTemp[1]);
d299 1
a299 1
			m_rbmapIpList.SetAt(atoi(strTemp[0]), ipRangeData);
@


1.20
log
@Faster loading of ip-to-country information (improved disk I/O access);
Constants renaming; Added Antarctica support.
@
text
@d114 2
a115 1
		IDI_FLAG_WF, IDI_FLAG_WS, IDI_FLAG_YE, IDI_FLAG_ZA, IDI_FLAG_ZM, IDI_FLAG_ZW
d134 2
a135 1
		"UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "ZA", "ZM", "ZW"
@


1.19
log
@Fixed file open error report; Improved string processing.
@
text
@d7 1
a7 2

 */
a9 1

a10 1

d15 1
a15 1
#include "StdAfx.h"
d75 40
a114 60
		IDI_COUNTRY_FLAG_AD, IDI_COUNTRY_FLAG_AE, IDI_COUNTRY_FLAG_AF, IDI_COUNTRY_FLAG_AG,
		IDI_COUNTRY_FLAG_AI, IDI_COUNTRY_FLAG_AL, IDI_COUNTRY_FLAG_AM, IDI_COUNTRY_FLAG_AN,
		IDI_COUNTRY_FLAG_AO, IDI_COUNTRY_FLAG_AR, IDI_COUNTRY_FLAG_AS, IDI_COUNTRY_FLAG_AT,
		IDI_COUNTRY_FLAG_AU, IDI_COUNTRY_FLAG_AW, IDI_COUNTRY_FLAG_AZ, IDI_COUNTRY_FLAG_BA,
		IDI_COUNTRY_FLAG_BB, IDI_COUNTRY_FLAG_BD, IDI_COUNTRY_FLAG_BE, IDI_COUNTRY_FLAG_BF,
		IDI_COUNTRY_FLAG_BG, IDI_COUNTRY_FLAG_BH, IDI_COUNTRY_FLAG_BI, IDI_COUNTRY_FLAG_BJ,
		IDI_COUNTRY_FLAG_BM, IDI_COUNTRY_FLAG_BN, IDI_COUNTRY_FLAG_BO, IDI_COUNTRY_FLAG_BR,
		IDI_COUNTRY_FLAG_BS, IDI_COUNTRY_FLAG_BT, IDI_COUNTRY_FLAG_BW, IDI_COUNTRY_FLAG_BY,
		IDI_COUNTRY_FLAG_BZ, IDI_COUNTRY_FLAG_CA, IDI_COUNTRY_FLAG_CC, IDI_COUNTRY_FLAG_CD,
		IDI_COUNTRY_FLAG_CF, IDI_COUNTRY_FLAG_CG, IDI_COUNTRY_FLAG_CH, IDI_COUNTRY_FLAG_CI,
		IDI_COUNTRY_FLAG_CK, IDI_COUNTRY_FLAG_CL, IDI_COUNTRY_FLAG_CM, IDI_COUNTRY_FLAG_CN,
		IDI_COUNTRY_FLAG_CO, IDI_COUNTRY_FLAG_CR, IDI_COUNTRY_FLAG_YU, IDI_COUNTRY_FLAG_CU,
		IDI_COUNTRY_FLAG_CV, IDI_COUNTRY_FLAG_CX, IDI_COUNTRY_FLAG_CY, IDI_COUNTRY_FLAG_CZ,
		IDI_COUNTRY_FLAG_DE, IDI_COUNTRY_FLAG_DJ, IDI_COUNTRY_FLAG_DK, IDI_COUNTRY_FLAG_DM,
		IDI_COUNTRY_FLAG_DO, IDI_COUNTRY_FLAG_DZ, IDI_COUNTRY_FLAG_EC, IDI_COUNTRY_FLAG_EE,
		IDI_COUNTRY_FLAG_EG, IDI_COUNTRY_FLAG_EH, IDI_COUNTRY_FLAG_ER, IDI_COUNTRY_FLAG_ES,
		IDI_COUNTRY_FLAG_ET, IDI_COUNTRY_FLAG_FI, IDI_COUNTRY_FLAG_FJ, IDI_COUNTRY_FLAG_FK,
		IDI_COUNTRY_FLAG_FM, IDI_COUNTRY_FLAG_FO, IDI_COUNTRY_FLAG_FR, IDI_COUNTRY_FLAG_GA,
		IDI_COUNTRY_FLAG_GB, IDI_COUNTRY_FLAG_GD, IDI_COUNTRY_FLAG_GE, IDI_COUNTRY_FLAG_FR,
		IDI_COUNTRY_FLAG_GG, IDI_COUNTRY_FLAG_GH, IDI_COUNTRY_FLAG_GI, IDI_COUNTRY_FLAG_GK,
		IDI_COUNTRY_FLAG_GL, IDI_COUNTRY_FLAG_GM, IDI_COUNTRY_FLAG_GN, IDI_COUNTRY_FLAG_GP,
		IDI_COUNTRY_FLAG_GQ, IDI_COUNTRY_FLAG_GR, IDI_COUNTRY_FLAG_GS, IDI_COUNTRY_FLAG_GT,
		IDI_COUNTRY_FLAG_GU, IDI_COUNTRY_FLAG_GW, IDI_COUNTRY_FLAG_GY, IDI_COUNTRY_FLAG_HK,
		IDI_COUNTRY_FLAG_HN, IDI_COUNTRY_FLAG_HR, IDI_COUNTRY_FLAG_HT, IDI_COUNTRY_FLAG_HU,
		IDI_COUNTRY_FLAG_ID, IDI_COUNTRY_FLAG_IE, IDI_COUNTRY_FLAG_IL, IDI_COUNTRY_FLAG_IM,
		IDI_COUNTRY_FLAG_IN, IDI_COUNTRY_FLAG_IO, IDI_COUNTRY_FLAG_IQ, IDI_COUNTRY_FLAG_IR,
		IDI_COUNTRY_FLAG_IS, IDI_COUNTRY_FLAG_IT, IDI_COUNTRY_FLAG_JE, IDI_COUNTRY_FLAG_JM,
		IDI_COUNTRY_FLAG_JO, IDI_COUNTRY_FLAG_JP, IDI_COUNTRY_FLAG_KE, IDI_COUNTRY_FLAG_KG,
		IDI_COUNTRY_FLAG_KH, IDI_COUNTRY_FLAG_KI, IDI_COUNTRY_FLAG_KM, IDI_COUNTRY_FLAG_KN,
		IDI_COUNTRY_FLAG_KP, IDI_COUNTRY_FLAG_KR, IDI_COUNTRY_FLAG_KW, IDI_COUNTRY_FLAG_KY,
		IDI_COUNTRY_FLAG_KZ, IDI_COUNTRY_FLAG_LA, IDI_COUNTRY_FLAG_LB, IDI_COUNTRY_FLAG_LC,
		IDI_COUNTRY_FLAG_LI, IDI_COUNTRY_FLAG_LK, IDI_COUNTRY_FLAG_LR, IDI_COUNTRY_FLAG_LS,
		IDI_COUNTRY_FLAG_LT, IDI_COUNTRY_FLAG_LU, IDI_COUNTRY_FLAG_LV, IDI_COUNTRY_FLAG_LY,
		IDI_COUNTRY_FLAG_MA, IDI_COUNTRY_FLAG_MC, IDI_COUNTRY_FLAG_MD, IDI_COUNTRY_FLAG_MG,
		IDI_COUNTRY_FLAG_MH, IDI_COUNTRY_FLAG_MK, IDI_COUNTRY_FLAG_ML, IDI_COUNTRY_FLAG_MM,
		IDI_COUNTRY_FLAG_MN, IDI_COUNTRY_FLAG_MO, IDI_COUNTRY_FLAG_MP, IDI_COUNTRY_FLAG_MQ,
		IDI_COUNTRY_FLAG_MR, IDI_COUNTRY_FLAG_MS, IDI_COUNTRY_FLAG_MT, IDI_COUNTRY_FLAG_MU,
		IDI_COUNTRY_FLAG_MV, IDI_COUNTRY_FLAG_MW, IDI_COUNTRY_FLAG_MX, IDI_COUNTRY_FLAG_MY,
		IDI_COUNTRY_FLAG_MZ, IDI_COUNTRY_FLAG_NA, IDI_COUNTRY_FLAG_NC, IDI_COUNTRY_FLAG_NE,
		IDI_COUNTRY_FLAG_NF, IDI_COUNTRY_FLAG_NG, IDI_COUNTRY_FLAG_NI, IDI_COUNTRY_FLAG_NL,
		IDI_COUNTRY_FLAG_NO, IDI_COUNTRY_FLAG_NP, IDI_COUNTRY_FLAG_NR, IDI_COUNTRY_FLAG_NU,
		IDI_COUNTRY_FLAG_NZ, IDI_COUNTRY_FLAG_OM, IDI_COUNTRY_FLAG_PA, IDI_COUNTRY_FLAG_PC,
		IDI_COUNTRY_FLAG_PE, IDI_COUNTRY_FLAG_PF, IDI_COUNTRY_FLAG_PG, IDI_COUNTRY_FLAG_PH,
		IDI_COUNTRY_FLAG_PK, IDI_COUNTRY_FLAG_PL, IDI_COUNTRY_FLAG_PM, IDI_COUNTRY_FLAG_PN,
		IDI_COUNTRY_FLAG_PR, IDI_COUNTRY_FLAG_PS, IDI_COUNTRY_FLAG_PT, IDI_COUNTRY_FLAG_PW,
		IDI_COUNTRY_FLAG_PY, IDI_COUNTRY_FLAG_QA, IDI_COUNTRY_FLAG_FR, IDI_COUNTRY_FLAG_RO,
		IDI_COUNTRY_FLAG_RU, IDI_COUNTRY_FLAG_RW, IDI_COUNTRY_FLAG_SA, IDI_COUNTRY_FLAG_SB,
		IDI_COUNTRY_FLAG_SC, IDI_COUNTRY_FLAG_SD, IDI_COUNTRY_FLAG_SE, IDI_COUNTRY_FLAG_SG,
		IDI_COUNTRY_FLAG_SH, IDI_COUNTRY_FLAG_SI, IDI_COUNTRY_FLAG_SK, IDI_COUNTRY_FLAG_SL,
		IDI_COUNTRY_FLAG_SM, IDI_COUNTRY_FLAG_SN, IDI_COUNTRY_FLAG_SO, IDI_COUNTRY_FLAG_SR,
		IDI_COUNTRY_FLAG_ST, IDI_COUNTRY_FLAG_SV, IDI_COUNTRY_FLAG_SY, IDI_COUNTRY_FLAG_SZ,
		IDI_COUNTRY_FLAG_TC, IDI_COUNTRY_FLAG_TD, IDI_COUNTRY_FLAG_TF, IDI_COUNTRY_FLAG_TG,
		IDI_COUNTRY_FLAG_TH, IDI_COUNTRY_FLAG_TJ, IDI_COUNTRY_FLAG_TK, IDI_COUNTRY_FLAG_TL,
		IDI_COUNTRY_FLAG_TM, IDI_COUNTRY_FLAG_TN, IDI_COUNTRY_FLAG_TO, IDI_COUNTRY_FLAG_TR,
		IDI_COUNTRY_FLAG_TT, IDI_COUNTRY_FLAG_TV, IDI_COUNTRY_FLAG_TW, IDI_COUNTRY_FLAG_TZ,
		IDI_COUNTRY_FLAG_UA, IDI_COUNTRY_FLAG_UG, IDI_COUNTRY_FLAG_US, IDI_COUNTRY_FLAG_US,
		IDI_COUNTRY_FLAG_UY, IDI_COUNTRY_FLAG_UZ, IDI_COUNTRY_FLAG_VA, IDI_COUNTRY_FLAG_VC,
		IDI_COUNTRY_FLAG_VE, IDI_COUNTRY_FLAG_VG, IDI_COUNTRY_FLAG_VI, IDI_COUNTRY_FLAG_VN,
		IDI_COUNTRY_FLAG_VU, IDI_COUNTRY_FLAG_WF, IDI_COUNTRY_FLAG_WS, IDI_COUNTRY_FLAG_YE,
		IDI_COUNTRY_FLAG_ZA, IDI_COUNTRY_FLAG_ZM, IDI_COUNTRY_FLAG_ZW
d118 16
a133 16
		"AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AR", "AS", "AT", "AU", "AW", "AZ",
		"BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS", "BT",
		"BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO",
		"CR", "CS", "CU", "CV", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE",
		"EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE",
		"GF", "GG", "GH", "GI", "GK", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW",
		"GY", "HK", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS",
		"IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY",
		"KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD",
		"MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW",
		"MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ",
		"OM", "PA", "PC", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW",
		"PY", "QA", "RE", "RO", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SK",
		"SL", "SM", "SN", "SO", "SR", "ST", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ",
		"TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY",
		"UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "ZA", "ZM", "ZW"
d166 2
d181 1
a181 1
			hIcon = reinterpret_cast<HICON>(::LoadImage(hCountryFlagDll, MAKEINTRESOURCE(IDI_COUNTRY_FLAG_NOFLAG), IMAGE_ICON, 0, 0, 0));
@


1.18
log
@Don't use 32 bit color resources if OS/comctl32.dll doesn't support it and some other minor changes/optimizations.
@
text
@d194 1
a194 3
			CString buffer;
			buffer.Format(GetResString(IDS_ERR_FILEOPEN),  CString(g_eMuleApp.m_pGlobPrefs->GetAppDir() + COUNTRY_FLAG_DLL_NAME), _T(""));
			AddLogLine(false, RGB_LOG_ERROR + buffer.Left(buffer.GetLength()-2));
d335 1
a335 3
			CString buffer;
			buffer.Format(GetResString(IDS_ERR_FILEOPEN),  strIP2CountryCSVfile, _T(""));
			AddLogLine(false, RGB_LOG_ERROR + buffer.Left(buffer.GetLength()-2));
@


1.17
log
@Add sources possibly received from global search (official).
Added missing translations in case countryflag.dll / ip-to-country.cvs is not found.
Notifier informs if a new version is available (not annoying, but still more likely
 to be noticed than just a log line).
Added 'Folder' column to Shared files window.
Prevent adding install/working dirs (\Webserver, \Db...) to Shared files.
+ some other minor changes/fixes.
@
text
@d200 1
a200 1
			m_lstCountryFlagImage.Create(18, 12, ILC_COLOR32 | ILC_MASK, 200, 1);
@


1.16
log
@Added French Guiana flag support.
@
text
@d193 4
a196 1
			AddLogLine(false, RGB_LOG_ERROR_TXT _T("CountryFlag disabled, failed to load ") COUNTRY_FLAG_DLL_NAME);
d337 3
a339 1
		AddLogLine(false, RGB_LOG_ERROR_TXT _T("Failed to load %s"), strIP2CountryCSVfile);
@


1.15
log
@Removed old and not used anymore country abbreviations: YU and TP.
@
text
@d96 42
a137 42
		IDI_COUNTRY_FLAG_GB, IDI_COUNTRY_FLAG_GD, IDI_COUNTRY_FLAG_GE, IDI_COUNTRY_FLAG_GG,
		IDI_COUNTRY_FLAG_GH, IDI_COUNTRY_FLAG_GI, IDI_COUNTRY_FLAG_GK, IDI_COUNTRY_FLAG_GL,
		IDI_COUNTRY_FLAG_GM, IDI_COUNTRY_FLAG_GN, IDI_COUNTRY_FLAG_GP, IDI_COUNTRY_FLAG_GQ,
		IDI_COUNTRY_FLAG_GR, IDI_COUNTRY_FLAG_GS, IDI_COUNTRY_FLAG_GT, IDI_COUNTRY_FLAG_GU,
		IDI_COUNTRY_FLAG_GW, IDI_COUNTRY_FLAG_GY, IDI_COUNTRY_FLAG_HK, IDI_COUNTRY_FLAG_HN,
		IDI_COUNTRY_FLAG_HR, IDI_COUNTRY_FLAG_HT, IDI_COUNTRY_FLAG_HU, IDI_COUNTRY_FLAG_ID,
		IDI_COUNTRY_FLAG_IE, IDI_COUNTRY_FLAG_IL, IDI_COUNTRY_FLAG_IM, IDI_COUNTRY_FLAG_IN,
		IDI_COUNTRY_FLAG_IO, IDI_COUNTRY_FLAG_IQ, IDI_COUNTRY_FLAG_IR, IDI_COUNTRY_FLAG_IS,
		IDI_COUNTRY_FLAG_IT, IDI_COUNTRY_FLAG_JE, IDI_COUNTRY_FLAG_JM, IDI_COUNTRY_FLAG_JO,
		IDI_COUNTRY_FLAG_JP, IDI_COUNTRY_FLAG_KE, IDI_COUNTRY_FLAG_KG, IDI_COUNTRY_FLAG_KH,
		IDI_COUNTRY_FLAG_KI, IDI_COUNTRY_FLAG_KM, IDI_COUNTRY_FLAG_KN, IDI_COUNTRY_FLAG_KP,
		IDI_COUNTRY_FLAG_KR, IDI_COUNTRY_FLAG_KW, IDI_COUNTRY_FLAG_KY, IDI_COUNTRY_FLAG_KZ,
		IDI_COUNTRY_FLAG_LA, IDI_COUNTRY_FLAG_LB, IDI_COUNTRY_FLAG_LC, IDI_COUNTRY_FLAG_LI,
		IDI_COUNTRY_FLAG_LK, IDI_COUNTRY_FLAG_LR, IDI_COUNTRY_FLAG_LS, IDI_COUNTRY_FLAG_LT,
		IDI_COUNTRY_FLAG_LU, IDI_COUNTRY_FLAG_LV, IDI_COUNTRY_FLAG_LY, IDI_COUNTRY_FLAG_MA,
		IDI_COUNTRY_FLAG_MC, IDI_COUNTRY_FLAG_MD, IDI_COUNTRY_FLAG_MG, IDI_COUNTRY_FLAG_MH,
		IDI_COUNTRY_FLAG_MK, IDI_COUNTRY_FLAG_ML, IDI_COUNTRY_FLAG_MM, IDI_COUNTRY_FLAG_MN,
		IDI_COUNTRY_FLAG_MO, IDI_COUNTRY_FLAG_MP, IDI_COUNTRY_FLAG_MQ, IDI_COUNTRY_FLAG_MR,
		IDI_COUNTRY_FLAG_MS, IDI_COUNTRY_FLAG_MT, IDI_COUNTRY_FLAG_MU, IDI_COUNTRY_FLAG_MV,
		IDI_COUNTRY_FLAG_MW, IDI_COUNTRY_FLAG_MX, IDI_COUNTRY_FLAG_MY, IDI_COUNTRY_FLAG_MZ,
		IDI_COUNTRY_FLAG_NA, IDI_COUNTRY_FLAG_NC, IDI_COUNTRY_FLAG_NE, IDI_COUNTRY_FLAG_NF,
		IDI_COUNTRY_FLAG_NG, IDI_COUNTRY_FLAG_NI, IDI_COUNTRY_FLAG_NL, IDI_COUNTRY_FLAG_NO,
		IDI_COUNTRY_FLAG_NP, IDI_COUNTRY_FLAG_NR, IDI_COUNTRY_FLAG_NU, IDI_COUNTRY_FLAG_NZ,
		IDI_COUNTRY_FLAG_OM, IDI_COUNTRY_FLAG_PA, IDI_COUNTRY_FLAG_PC, IDI_COUNTRY_FLAG_PE,
		IDI_COUNTRY_FLAG_PF, IDI_COUNTRY_FLAG_PG, IDI_COUNTRY_FLAG_PH, IDI_COUNTRY_FLAG_PK,
		IDI_COUNTRY_FLAG_PL, IDI_COUNTRY_FLAG_PM, IDI_COUNTRY_FLAG_PN, IDI_COUNTRY_FLAG_PR,
		IDI_COUNTRY_FLAG_PS, IDI_COUNTRY_FLAG_PT, IDI_COUNTRY_FLAG_PW, IDI_COUNTRY_FLAG_PY,
		IDI_COUNTRY_FLAG_QA, IDI_COUNTRY_FLAG_FR, IDI_COUNTRY_FLAG_RO, IDI_COUNTRY_FLAG_RU,
		IDI_COUNTRY_FLAG_RW, IDI_COUNTRY_FLAG_SA, IDI_COUNTRY_FLAG_SB, IDI_COUNTRY_FLAG_SC,
		IDI_COUNTRY_FLAG_SD, IDI_COUNTRY_FLAG_SE, IDI_COUNTRY_FLAG_SG, IDI_COUNTRY_FLAG_SH,
		IDI_COUNTRY_FLAG_SI, IDI_COUNTRY_FLAG_SK, IDI_COUNTRY_FLAG_SL, IDI_COUNTRY_FLAG_SM,
		IDI_COUNTRY_FLAG_SN, IDI_COUNTRY_FLAG_SO, IDI_COUNTRY_FLAG_SR, IDI_COUNTRY_FLAG_ST,
		IDI_COUNTRY_FLAG_SV, IDI_COUNTRY_FLAG_SY, IDI_COUNTRY_FLAG_SZ, IDI_COUNTRY_FLAG_TC,
		IDI_COUNTRY_FLAG_TD, IDI_COUNTRY_FLAG_TF, IDI_COUNTRY_FLAG_TG, IDI_COUNTRY_FLAG_TH,
		IDI_COUNTRY_FLAG_TJ, IDI_COUNTRY_FLAG_TK, IDI_COUNTRY_FLAG_TL, IDI_COUNTRY_FLAG_TM,
		IDI_COUNTRY_FLAG_TN, IDI_COUNTRY_FLAG_TO, IDI_COUNTRY_FLAG_TR, IDI_COUNTRY_FLAG_TT,
		IDI_COUNTRY_FLAG_TV, IDI_COUNTRY_FLAG_TW, IDI_COUNTRY_FLAG_TZ, IDI_COUNTRY_FLAG_UA,
		IDI_COUNTRY_FLAG_UG, IDI_COUNTRY_FLAG_US, IDI_COUNTRY_FLAG_US, IDI_COUNTRY_FLAG_UY,
		IDI_COUNTRY_FLAG_UZ, IDI_COUNTRY_FLAG_VA, IDI_COUNTRY_FLAG_VC, IDI_COUNTRY_FLAG_VE,
		IDI_COUNTRY_FLAG_VG, IDI_COUNTRY_FLAG_VI, IDI_COUNTRY_FLAG_VN, IDI_COUNTRY_FLAG_VU,
		IDI_COUNTRY_FLAG_WF, IDI_COUNTRY_FLAG_WS, IDI_COUNTRY_FLAG_YE, IDI_COUNTRY_FLAG_ZA,
		IDI_COUNTRY_FLAG_ZM, IDI_COUNTRY_FLAG_ZW
d146 11
a156 11
		"GG", "GH", "GI", "GK", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY",
		"HK", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT",
		"JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ",
		"LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "MG",
		"MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX",
		"MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM",
		"PA", "PC", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY",
		"QA", "RE", "RO", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SK", "SL",
		"SM", "SN", "SO", "SR", "ST", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK",
		"TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ",
		"VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "ZA", "ZM", "ZW"
@


1.14
log
@Removed AddDebugLogLine statusbar message option, added client transfer debug log option
@
text
@d89 43
a131 43
		IDI_COUNTRY_FLAG_CO, IDI_COUNTRY_FLAG_CR, IDI_COUNTRY_FLAG_CU, IDI_COUNTRY_FLAG_CV,
		IDI_COUNTRY_FLAG_CX, IDI_COUNTRY_FLAG_CY, IDI_COUNTRY_FLAG_CZ, IDI_COUNTRY_FLAG_DE,
		IDI_COUNTRY_FLAG_DJ, IDI_COUNTRY_FLAG_DK, IDI_COUNTRY_FLAG_DM, IDI_COUNTRY_FLAG_DO,
		IDI_COUNTRY_FLAG_DZ, IDI_COUNTRY_FLAG_EC, IDI_COUNTRY_FLAG_EE, IDI_COUNTRY_FLAG_EG,
		IDI_COUNTRY_FLAG_EH, IDI_COUNTRY_FLAG_ER, IDI_COUNTRY_FLAG_ES, IDI_COUNTRY_FLAG_ET,
		IDI_COUNTRY_FLAG_FI, IDI_COUNTRY_FLAG_FJ, IDI_COUNTRY_FLAG_FK, IDI_COUNTRY_FLAG_FM,
		IDI_COUNTRY_FLAG_FO, IDI_COUNTRY_FLAG_FR, IDI_COUNTRY_FLAG_GA, IDI_COUNTRY_FLAG_GB,
		IDI_COUNTRY_FLAG_GD, IDI_COUNTRY_FLAG_GE, IDI_COUNTRY_FLAG_GG, IDI_COUNTRY_FLAG_GH,
		IDI_COUNTRY_FLAG_GI, IDI_COUNTRY_FLAG_GK, IDI_COUNTRY_FLAG_GL, IDI_COUNTRY_FLAG_GM,
		IDI_COUNTRY_FLAG_GN, IDI_COUNTRY_FLAG_GP, IDI_COUNTRY_FLAG_GQ, IDI_COUNTRY_FLAG_GR,
		IDI_COUNTRY_FLAG_GS, IDI_COUNTRY_FLAG_GT, IDI_COUNTRY_FLAG_GU, IDI_COUNTRY_FLAG_GW,
		IDI_COUNTRY_FLAG_GY, IDI_COUNTRY_FLAG_HK, IDI_COUNTRY_FLAG_HN, IDI_COUNTRY_FLAG_HR,
		IDI_COUNTRY_FLAG_HT, IDI_COUNTRY_FLAG_HU, IDI_COUNTRY_FLAG_ID, IDI_COUNTRY_FLAG_IE,
		IDI_COUNTRY_FLAG_IL, IDI_COUNTRY_FLAG_IM, IDI_COUNTRY_FLAG_IN, IDI_COUNTRY_FLAG_IO,
		IDI_COUNTRY_FLAG_IQ, IDI_COUNTRY_FLAG_IR, IDI_COUNTRY_FLAG_IS, IDI_COUNTRY_FLAG_IT,
		IDI_COUNTRY_FLAG_JE, IDI_COUNTRY_FLAG_JM, IDI_COUNTRY_FLAG_JO, IDI_COUNTRY_FLAG_JP,
		IDI_COUNTRY_FLAG_KE, IDI_COUNTRY_FLAG_KG, IDI_COUNTRY_FLAG_KH, IDI_COUNTRY_FLAG_KI,
		IDI_COUNTRY_FLAG_KM, IDI_COUNTRY_FLAG_KN, IDI_COUNTRY_FLAG_KP, IDI_COUNTRY_FLAG_KR,
		IDI_COUNTRY_FLAG_KW, IDI_COUNTRY_FLAG_KY, IDI_COUNTRY_FLAG_KZ, IDI_COUNTRY_FLAG_LA,
		IDI_COUNTRY_FLAG_LB, IDI_COUNTRY_FLAG_LC, IDI_COUNTRY_FLAG_LI, IDI_COUNTRY_FLAG_LK,
		IDI_COUNTRY_FLAG_LR, IDI_COUNTRY_FLAG_LS, IDI_COUNTRY_FLAG_LT, IDI_COUNTRY_FLAG_LU,
		IDI_COUNTRY_FLAG_LV, IDI_COUNTRY_FLAG_LY, IDI_COUNTRY_FLAG_MA, IDI_COUNTRY_FLAG_MC,
		IDI_COUNTRY_FLAG_MD, IDI_COUNTRY_FLAG_MG, IDI_COUNTRY_FLAG_MH, IDI_COUNTRY_FLAG_MK,
		IDI_COUNTRY_FLAG_ML, IDI_COUNTRY_FLAG_MM, IDI_COUNTRY_FLAG_MN, IDI_COUNTRY_FLAG_MO,
		IDI_COUNTRY_FLAG_MP, IDI_COUNTRY_FLAG_MQ, IDI_COUNTRY_FLAG_MR, IDI_COUNTRY_FLAG_MS,
		IDI_COUNTRY_FLAG_MT, IDI_COUNTRY_FLAG_MU, IDI_COUNTRY_FLAG_MV, IDI_COUNTRY_FLAG_MW,
		IDI_COUNTRY_FLAG_MX, IDI_COUNTRY_FLAG_MY, IDI_COUNTRY_FLAG_MZ, IDI_COUNTRY_FLAG_NA,
		IDI_COUNTRY_FLAG_NC, IDI_COUNTRY_FLAG_NE, IDI_COUNTRY_FLAG_NF, IDI_COUNTRY_FLAG_NG,
		IDI_COUNTRY_FLAG_NI, IDI_COUNTRY_FLAG_NL, IDI_COUNTRY_FLAG_NO, IDI_COUNTRY_FLAG_NP,
		IDI_COUNTRY_FLAG_NR, IDI_COUNTRY_FLAG_NU, IDI_COUNTRY_FLAG_NZ, IDI_COUNTRY_FLAG_OM,
		IDI_COUNTRY_FLAG_PA, IDI_COUNTRY_FLAG_PC, IDI_COUNTRY_FLAG_PE, IDI_COUNTRY_FLAG_PF,
		IDI_COUNTRY_FLAG_PG, IDI_COUNTRY_FLAG_PH, IDI_COUNTRY_FLAG_PK, IDI_COUNTRY_FLAG_PL,
		IDI_COUNTRY_FLAG_PM, IDI_COUNTRY_FLAG_PN, IDI_COUNTRY_FLAG_PR, IDI_COUNTRY_FLAG_PS,
		IDI_COUNTRY_FLAG_PT, IDI_COUNTRY_FLAG_PW, IDI_COUNTRY_FLAG_PY, IDI_COUNTRY_FLAG_QA,
		IDI_COUNTRY_FLAG_FR, IDI_COUNTRY_FLAG_RO, IDI_COUNTRY_FLAG_RU, IDI_COUNTRY_FLAG_RW,
		IDI_COUNTRY_FLAG_SA, IDI_COUNTRY_FLAG_SB, IDI_COUNTRY_FLAG_SC, IDI_COUNTRY_FLAG_SD,
		IDI_COUNTRY_FLAG_SE, IDI_COUNTRY_FLAG_SG, IDI_COUNTRY_FLAG_SH, IDI_COUNTRY_FLAG_SI,
		IDI_COUNTRY_FLAG_SK, IDI_COUNTRY_FLAG_SL, IDI_COUNTRY_FLAG_SM, IDI_COUNTRY_FLAG_SN,
		IDI_COUNTRY_FLAG_SO, IDI_COUNTRY_FLAG_SR, IDI_COUNTRY_FLAG_ST, IDI_COUNTRY_FLAG_SV,
		IDI_COUNTRY_FLAG_SY, IDI_COUNTRY_FLAG_SZ, IDI_COUNTRY_FLAG_TC, IDI_COUNTRY_FLAG_TD,
		IDI_COUNTRY_FLAG_TF, IDI_COUNTRY_FLAG_TG, IDI_COUNTRY_FLAG_TH, IDI_COUNTRY_FLAG_TJ,
		IDI_COUNTRY_FLAG_TK, IDI_COUNTRY_FLAG_TL, IDI_COUNTRY_FLAG_TM, IDI_COUNTRY_FLAG_TN,
		IDI_COUNTRY_FLAG_TO, IDI_COUNTRY_FLAG_TL, IDI_COUNTRY_FLAG_TR, IDI_COUNTRY_FLAG_TT,
d136 2
a137 2
		IDI_COUNTRY_FLAG_WF, IDI_COUNTRY_FLAG_WS, IDI_COUNTRY_FLAG_YE, IDI_COUNTRY_FLAG_YU,
		IDI_COUNTRY_FLAG_ZA, IDI_COUNTRY_FLAG_ZM, IDI_COUNTRY_FLAG_ZW, IDI_COUNTRY_FLAG_YU
d144 13
a156 13
		"CR", "CU", "CV", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG",
		"EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GG",
		"GH", "GI", "GK", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK",
		"HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE",
		"JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA",
		"LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "MG", "MH",
		"MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY",
		"MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA",
		"PC", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA",
		"RE", "RO", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SK", "SL", "SM",
		"SN", "SO", "SR", "ST", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL",
		"TM", "TN", "TO", "TP", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ",
		"VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YU", "ZA", "ZM", "ZW", "CS"
@


1.13
log
@Slightly reduce tree memory usage by granularity increasing.
@
text
@d64 1
a64 1
		AddDebugLogLine(false, _T("IP-to-Country Database provided by ") RGB_STEEL_BLUE_TXT _T("WEBH") RGB_DARK_ORANGE_TXT _T("O") RGB_STEEL_BLUE_TXT _T("STING") RGB_DARK_ORANGE_TXT _T(".INFO") RGB_DEFAULT_TXT _T(", available from http://ip-to-country.webhosting.info."));
d247 1
a247 1
					AddDebugLogLine(false, RGB_LOG_ERROR_TXT _T("%s: %s error (line: %u)"), __FUNCTION__, strIP2CountryCSVfile, uiLineNum);
d289 2
a290 2
				AddDebugLogLine( false, RGB_LOG_WARNING_TXT _T("Unsupported country name found %s/%s (line: %u)"),
										strTemp[2], strTemp[4], uiLineNum );
@


1.12
log
@Reverted some __FUNCTION__ logs as they weren't useful for users and were taking too much log space. We can always resort to search for the string.
@
text
@d57 1
a57 1
CIP2Country::CIP2Country() : m_rbmapIpList(128)
@


1.11
log
@More DebugLog formating and changes
@
text
@d289 2
a290 2
				AddDebugLogLine( false, RGB_LOG_WARNING_TXT _T("%s: Unsupported country name found %s/%s (line: %u)"),
										__FUNCTION__, strTemp[2], strTemp[4], uiLineNum );
@


1.10
log
@Removed duplicate flags (us = um; yu = cs).
@
text
@d247 1
a247 1
					AddDebugLogLine(false, RGB_LOG_ERROR_TXT _T("%s error (line: %u)"), strIP2CountryCSVfile, uiLineNum);
d289 2
a290 1
				AddDebugLogLine(false, RGB_LOG_WARNING_TXT _T("Unsupported country name found %s/%s (line: %u)"), strTemp[2], strTemp[4], uiLineNum);
@


1.9
log
@Totally reworked country information feature to minimize memory usage;
Speeded up country information loading time;
Added flag support for Reunion and East Timor.
@
text
@d133 1
a133 1
		IDI_COUNTRY_FLAG_UG, IDI_COUNTRY_FLAG_UM, IDI_COUNTRY_FLAG_US, IDI_COUNTRY_FLAG_UY,
d137 1
a137 1
		IDI_COUNTRY_FLAG_ZA, IDI_COUNTRY_FLAG_ZM, IDI_COUNTRY_FLAG_ZW, IDI_COUNTRY_FLAG_CS
@


1.8
log
@Connected server is now background highlighted; Aw3 fix for IP2Country constant DB/LIB loading from preferences; Replaced all ZeroMemory with memzero; Replaced all CopyMemory with memcpy2
@
text
@d39 1
a39 2
// N/A flag is the first Res, so it should at index zero
#define NO_FLAG 0
d57 1
a57 1
CIP2Country::CIP2Country()
d59 2
a60 10
	defaultIP2Country.IPstart = 0;
	defaultIP2Country.IPend = 0;

	defaultIP2Country.ShortCountryName = _T("N/A");
	defaultIP2Country.LongCountryName = _T("Not Applicable");

	defaultIP2Country.FlagIndex = NO_FLAG;

	EnableIP2Country = false;
	EnableCountryFlag = false;
d64 1
a64 1
		AddDebugLogLine(false, _T("IP-to-Country Database provided by ") + RGB_STEEL_BLUE + _T("WEBH") + RGB_DARK_ORANGE + _T("O") + RGB_STEEL_BLUE + _T("STING") + RGB_DARK_ORANGE + _T(".INFO") + RGB_DEFAULT + _T(", available from http://ip-to-country.webhosting.info."));
d76 85
a160 1
	if (EnableCountryFlag || EnableIP2Country)
d163 3
a165 2
	EnableCountryFlag = LoadCountryFlagLib(); // flag lib first, so ip range can map to flag
	EnableIP2Country = LoadFromFile();
d167 4
a170 2
	if(bReset)
		Reset();
d172 2
a173 2
	//AddDebugLogLine(false, _T("IP2Country loaded"));
}
d175 1
a175 4
void CIP2Country::Unload(bool bReset)
{
	EnableIP2Country = false;
	EnableCountryFlag = false;
d177 11
a187 2
	if(bReset)
		Reset();
d189 10
a198 2
	RemoveAllIPs();
	RemoveAllFlags();
d200 12
a211 2
	//AddDebugLogLine(false, _T("IP2Country unloaded"));  // Warning: will crash on exit
}
d213 25
a237 5
void CIP2Country::Reset()
{
	g_eMuleApp.m_pServerList->ResetIP2Country();
	g_eMuleApp.m_pClientList->ResetIP2Country();
}
d239 1
a239 4
void CIP2Country::Refresh()
{
	g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.RefreshAllServer();
}
d241 15
a255 3
bool CIP2Country::LoadFromFile()
{
	char buffer[1024];
d257 6
a262 1
	CString ip2countryCSVfile = g_eMuleApp.m_pGlobPrefs->GetConfigDir() + _T("ip-to-country.csv");
d264 14
a277 1
	FILE* readFile = fopen(ip2countryCSVfile, _T("r"));
d279 2
a280 7
	try
	{
		if (readFile != NULL)
		{
			CString strTemp[5];
			CString	strBuffer;
			int		count = 0;
d282 6
a287 1
			while (!feof(readFile))
d289 6
a294 22
				if (fgets(buffer, sizeof(buffer), readFile)==0)
					break;
				strBuffer = buffer;
				/*
					http://ip-to-country.webhosting.info/node/view/54

					This is a sample of how the CSV file is structured:

					"0033996344","0033996351","GB","GBR","UNITED KINGDOM"
					"0050331648","0083886079","US","USA","UNITED STATES"
					"0094585424","0094585439","SE","SWE","SWEDEN"

					FIELD  			DATA TYPE		  	FIELD DESCRIPTION
					IP_FROM 		NUMERICAL (DOUBLE) 	Beginning of IP address range.
					IP_TO			NUMERICAL (DOUBLE) 	Ending of IP address range.
					COUNTRY_CODE2 	CHAR(2)				Two-character country code based on ISO 3166.
					COUNTRY_CODE3 	CHAR(3)				Three-character country code based on ISO 3166.
					COUNTRY_NAME 	VARCHAR(50) 		Country name based on ISO 3166
				*/
				// we assume that the ip-to-country.csv is valid and doesn't cause any troubles
				// get & process IP range
				strBuffer.Remove(_T('"')); // get rid of the " signs
d296 2
a297 1
				int curPos = 0;
d299 4
a302 13
				for (int forCount = 0; forCount < ELEMENT_COUNT(strTemp); forCount++)
				{
					strTemp[forCount] = strBuffer.Tokenize(_T(","), curPos);
					if(strTemp[forCount].IsEmpty())
						throw CString(_T("Error line in"));
				}
				
			//	Capitalize words in country name
				FirstCharCap(&strTemp[4]);
				count++;
				AddIPRange(atoi(strTemp[0]),atoi(strTemp[1]), strTemp[2], strTemp[4]);
			}
			fclose(readFile);
a304 24
			throw CString(_T("Failed to load in"));
	}
	catch(CString error)
	{
		AddLogLine(false,RGB_LOG_ERROR + _T("%s %s"), error, ip2countryCSVfile);
		RemoveAllIPs();
		return false;
	}
	//AddDebugLogLine(false, _T("IP2Country database file has been loaded"));
	return true;
}

bool CIP2Country::LoadCountryFlagLib()
{
	CString		ip2countryCountryFlag = _T("countryflag.dll");
	HINSTANCE	hCountryFlagDll;

	try
	{
		hCountryFlagDll = LoadLibrary(ip2countryCountryFlag); 
		if (hCountryFlagDll == NULL) 
			throw CString(_T("CountryFlag Disabled, failed to load"));

		static const uint16	s_auResID[] =
d306 2
a307 1
			IDI_COUNTRY_FLAG_NOFLAG,//first res in image list should be N/A
d309 1
a309 61
			IDI_COUNTRY_FLAG_AD, IDI_COUNTRY_FLAG_AE, IDI_COUNTRY_FLAG_AF, IDI_COUNTRY_FLAG_AG,
			IDI_COUNTRY_FLAG_AI, IDI_COUNTRY_FLAG_AL, IDI_COUNTRY_FLAG_AM, IDI_COUNTRY_FLAG_AN,
			IDI_COUNTRY_FLAG_AO, IDI_COUNTRY_FLAG_AR, IDI_COUNTRY_FLAG_AS, IDI_COUNTRY_FLAG_AT,
			IDI_COUNTRY_FLAG_AU, IDI_COUNTRY_FLAG_AW, IDI_COUNTRY_FLAG_AZ, IDI_COUNTRY_FLAG_BA,
			IDI_COUNTRY_FLAG_BB, IDI_COUNTRY_FLAG_BD, IDI_COUNTRY_FLAG_BE, IDI_COUNTRY_FLAG_BF,
			IDI_COUNTRY_FLAG_BG, IDI_COUNTRY_FLAG_BH, IDI_COUNTRY_FLAG_BI, IDI_COUNTRY_FLAG_BJ,
			IDI_COUNTRY_FLAG_BM, IDI_COUNTRY_FLAG_BN, IDI_COUNTRY_FLAG_BO, IDI_COUNTRY_FLAG_BR,
			IDI_COUNTRY_FLAG_BS, IDI_COUNTRY_FLAG_BT, IDI_COUNTRY_FLAG_BW, IDI_COUNTRY_FLAG_BY,
			IDI_COUNTRY_FLAG_BZ, IDI_COUNTRY_FLAG_CA, IDI_COUNTRY_FLAG_CC, IDI_COUNTRY_FLAG_CD,
			IDI_COUNTRY_FLAG_CF, IDI_COUNTRY_FLAG_CG, IDI_COUNTRY_FLAG_CH, IDI_COUNTRY_FLAG_CI,
			IDI_COUNTRY_FLAG_CK, IDI_COUNTRY_FLAG_CL, IDI_COUNTRY_FLAG_CM, IDI_COUNTRY_FLAG_CN,
			IDI_COUNTRY_FLAG_CO, IDI_COUNTRY_FLAG_CR, IDI_COUNTRY_FLAG_CU, IDI_COUNTRY_FLAG_CV,
			IDI_COUNTRY_FLAG_CX, IDI_COUNTRY_FLAG_CY, IDI_COUNTRY_FLAG_CZ, IDI_COUNTRY_FLAG_DE,
			IDI_COUNTRY_FLAG_DJ, IDI_COUNTRY_FLAG_DK, IDI_COUNTRY_FLAG_DM, IDI_COUNTRY_FLAG_DO,
			IDI_COUNTRY_FLAG_DZ, IDI_COUNTRY_FLAG_EC, IDI_COUNTRY_FLAG_EE, IDI_COUNTRY_FLAG_EG,
			IDI_COUNTRY_FLAG_EH, IDI_COUNTRY_FLAG_ER, IDI_COUNTRY_FLAG_ES, IDI_COUNTRY_FLAG_ET,
			IDI_COUNTRY_FLAG_FI, IDI_COUNTRY_FLAG_FJ, IDI_COUNTRY_FLAG_FK, IDI_COUNTRY_FLAG_FM,
			IDI_COUNTRY_FLAG_FO, IDI_COUNTRY_FLAG_FR, IDI_COUNTRY_FLAG_GA, IDI_COUNTRY_FLAG_GB,
			IDI_COUNTRY_FLAG_GD, IDI_COUNTRY_FLAG_GE, IDI_COUNTRY_FLAG_GG, IDI_COUNTRY_FLAG_GH,
			IDI_COUNTRY_FLAG_GI, IDI_COUNTRY_FLAG_GK, IDI_COUNTRY_FLAG_GL, IDI_COUNTRY_FLAG_GM,
			IDI_COUNTRY_FLAG_GN, IDI_COUNTRY_FLAG_GP, IDI_COUNTRY_FLAG_GQ, IDI_COUNTRY_FLAG_GR,
			IDI_COUNTRY_FLAG_GS, IDI_COUNTRY_FLAG_GT, IDI_COUNTRY_FLAG_GU, IDI_COUNTRY_FLAG_GW,
			IDI_COUNTRY_FLAG_GY, IDI_COUNTRY_FLAG_HK, IDI_COUNTRY_FLAG_HN, IDI_COUNTRY_FLAG_HR,
			IDI_COUNTRY_FLAG_HT, IDI_COUNTRY_FLAG_HU, IDI_COUNTRY_FLAG_ID, IDI_COUNTRY_FLAG_IE,
			IDI_COUNTRY_FLAG_IL, IDI_COUNTRY_FLAG_IM, IDI_COUNTRY_FLAG_IN, IDI_COUNTRY_FLAG_IO,
			IDI_COUNTRY_FLAG_IQ, IDI_COUNTRY_FLAG_IR, IDI_COUNTRY_FLAG_IS, IDI_COUNTRY_FLAG_IT,
			IDI_COUNTRY_FLAG_JE, IDI_COUNTRY_FLAG_JM, IDI_COUNTRY_FLAG_JO, IDI_COUNTRY_FLAG_JP,
			IDI_COUNTRY_FLAG_KE, IDI_COUNTRY_FLAG_KG, IDI_COUNTRY_FLAG_KH, IDI_COUNTRY_FLAG_KI,
			IDI_COUNTRY_FLAG_KM, IDI_COUNTRY_FLAG_KN, IDI_COUNTRY_FLAG_KP, IDI_COUNTRY_FLAG_KR,
			IDI_COUNTRY_FLAG_KW, IDI_COUNTRY_FLAG_KY, IDI_COUNTRY_FLAG_KZ, IDI_COUNTRY_FLAG_LA,
			IDI_COUNTRY_FLAG_LB, IDI_COUNTRY_FLAG_LC, IDI_COUNTRY_FLAG_LI, IDI_COUNTRY_FLAG_LK,
			IDI_COUNTRY_FLAG_LR, IDI_COUNTRY_FLAG_LS, IDI_COUNTRY_FLAG_LT, IDI_COUNTRY_FLAG_LU,
			IDI_COUNTRY_FLAG_LV, IDI_COUNTRY_FLAG_LY, IDI_COUNTRY_FLAG_MA, IDI_COUNTRY_FLAG_MC,
			IDI_COUNTRY_FLAG_MD, IDI_COUNTRY_FLAG_MG, IDI_COUNTRY_FLAG_MH, IDI_COUNTRY_FLAG_MK,
			IDI_COUNTRY_FLAG_ML, IDI_COUNTRY_FLAG_MM, IDI_COUNTRY_FLAG_MN, IDI_COUNTRY_FLAG_MO,
			IDI_COUNTRY_FLAG_MP, IDI_COUNTRY_FLAG_MQ, IDI_COUNTRY_FLAG_MR, IDI_COUNTRY_FLAG_MS,
			IDI_COUNTRY_FLAG_MT, IDI_COUNTRY_FLAG_MU, IDI_COUNTRY_FLAG_MV, IDI_COUNTRY_FLAG_MW,
			IDI_COUNTRY_FLAG_MX, IDI_COUNTRY_FLAG_MY, IDI_COUNTRY_FLAG_MZ, IDI_COUNTRY_FLAG_NA,
			IDI_COUNTRY_FLAG_NC, IDI_COUNTRY_FLAG_NE, IDI_COUNTRY_FLAG_NF, IDI_COUNTRY_FLAG_NG,
			IDI_COUNTRY_FLAG_NI, IDI_COUNTRY_FLAG_NL, IDI_COUNTRY_FLAG_NO, IDI_COUNTRY_FLAG_NP,
			IDI_COUNTRY_FLAG_NR, IDI_COUNTRY_FLAG_NU, IDI_COUNTRY_FLAG_NZ, IDI_COUNTRY_FLAG_OM,
			IDI_COUNTRY_FLAG_PA, IDI_COUNTRY_FLAG_PC, IDI_COUNTRY_FLAG_PE, IDI_COUNTRY_FLAG_PF,
			IDI_COUNTRY_FLAG_PG, IDI_COUNTRY_FLAG_PH, IDI_COUNTRY_FLAG_PK, IDI_COUNTRY_FLAG_PL,
			IDI_COUNTRY_FLAG_PM, IDI_COUNTRY_FLAG_PN, IDI_COUNTRY_FLAG_PR, IDI_COUNTRY_FLAG_PS,
			IDI_COUNTRY_FLAG_PT, IDI_COUNTRY_FLAG_PW, IDI_COUNTRY_FLAG_PY, IDI_COUNTRY_FLAG_QA,
			IDI_COUNTRY_FLAG_RO, IDI_COUNTRY_FLAG_RU, IDI_COUNTRY_FLAG_RW, IDI_COUNTRY_FLAG_SA,
			IDI_COUNTRY_FLAG_SB, IDI_COUNTRY_FLAG_SC, IDI_COUNTRY_FLAG_SD, IDI_COUNTRY_FLAG_SE,
			IDI_COUNTRY_FLAG_SG, IDI_COUNTRY_FLAG_SH, IDI_COUNTRY_FLAG_SI, IDI_COUNTRY_FLAG_SK,
			IDI_COUNTRY_FLAG_SL, IDI_COUNTRY_FLAG_SM, IDI_COUNTRY_FLAG_SN, IDI_COUNTRY_FLAG_SO,
			IDI_COUNTRY_FLAG_SR, IDI_COUNTRY_FLAG_ST, IDI_COUNTRY_FLAG_SV, IDI_COUNTRY_FLAG_SY,
			IDI_COUNTRY_FLAG_SZ, IDI_COUNTRY_FLAG_TC, IDI_COUNTRY_FLAG_TD, IDI_COUNTRY_FLAG_TF,
			IDI_COUNTRY_FLAG_TG, IDI_COUNTRY_FLAG_TH, IDI_COUNTRY_FLAG_TJ, IDI_COUNTRY_FLAG_TK,
			IDI_COUNTRY_FLAG_TL, IDI_COUNTRY_FLAG_TM, IDI_COUNTRY_FLAG_TN, IDI_COUNTRY_FLAG_TO,
			IDI_COUNTRY_FLAG_TR, IDI_COUNTRY_FLAG_TT, IDI_COUNTRY_FLAG_TV, IDI_COUNTRY_FLAG_TW,
			IDI_COUNTRY_FLAG_TZ, IDI_COUNTRY_FLAG_UA, IDI_COUNTRY_FLAG_UG, IDI_COUNTRY_FLAG_UM,
			IDI_COUNTRY_FLAG_US, IDI_COUNTRY_FLAG_UY, IDI_COUNTRY_FLAG_UZ, IDI_COUNTRY_FLAG_VA,
			IDI_COUNTRY_FLAG_VC, IDI_COUNTRY_FLAG_VE, IDI_COUNTRY_FLAG_VG, IDI_COUNTRY_FLAG_VI,
			IDI_COUNTRY_FLAG_VN, IDI_COUNTRY_FLAG_VU, IDI_COUNTRY_FLAG_WF, IDI_COUNTRY_FLAG_WS,
			IDI_COUNTRY_FLAG_YE, IDI_COUNTRY_FLAG_YU, IDI_COUNTRY_FLAG_ZA, IDI_COUNTRY_FLAG_ZM,
			IDI_COUNTRY_FLAG_ZW, IDI_COUNTRY_FLAG_CS
		};
d311 6
a316 3
		static const TCHAR *const s_apcCountryID[] =
		{
			"N/A",//first res in image list should be N/A
d318 4
a321 22
			"AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AR", "AS", "AT", "AU", "AW", "AZ",
			"BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS", "BT",
			"BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO",
			"CR", "CU", "CV", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG",
			"EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GG",
			"GH", "GI", "GK", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK",
			"HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE",
			"JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA",
			"LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "MG", "MH",
			"MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY",
			"MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA",
			"PC", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA",
			"RO", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SK", "SL", "SM", "SN",
			"SO", "SR", "ST", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM",
			"TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC",
			"VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YU", "ZA", "ZM", "ZW", "CS"
		};

		m_lstCountryFlagImage.Create(18, 12, ILC_COLOR32 | ILC_MASK, ELEMENT_COUNT(s_auResID), 0);
		m_lstCountryFlagImage.SetBkColor(CLR_NONE);

		for(int cur_pos = 0; cur_pos < ELEMENT_COUNT(s_auResID); cur_pos++)
d323 6
a328 7
			CountryIDtoFlagIndex.SetAt(CString(s_apcCountryID[cur_pos]), cur_pos);

			HICON iconHandle = reinterpret_cast<HICON>(::LoadImage(hCountryFlagDll, MAKEINTRESOURCE(s_auResID[cur_pos]), IMAGE_ICON, 0, 0, 0));
			if(iconHandle == NULL)
				throw CString(_T("Invalid ResID, maybe you need to upgrade your flag icon Dll,"));
			m_lstCountryFlagImage.Add(iconHandle);
			::DestroyIcon(iconHandle);
d331 1
a331 1
	catch(CString error)
d333 1
a333 6
		AddLogLine(false, RGB_LOG_ERROR + _T("%s in %s"), error, ip2countryCountryFlag);
		RemoveAllFlags();
		//free lib
		if (hCountryFlagDll != NULL)
			FreeLibrary(hCountryFlagDll);
		return false;
a334 7

	//free lib
	if(hCountryFlagDll != NULL)
		FreeLibrary(hCountryFlagDll);

	//AddDebugLogLine(false, _T("Country Flags have been loaded"));
	return true;
d337 1
a337 1
void CIP2Country::RemoveAllIPs()
d339 6
a344 10
	uint32 key;
	IPRange_Struct2* value;
	POSITION pos1;
	for(POSITION pos = iplist.GetHeadPosition(); pos1 = pos; )
	{
		iplist.GetNextAssoc(pos, key, value);
		delete value;
		iplist.RemoveAt(pos1);
	}
	iplist.RemoveAll();
d346 2
a347 2
	//AddDebugLogLine(false, _T("IP2Country database file has been unloaded")); // Warning: will crash on exit
}
d349 3
a351 2
void CIP2Country::RemoveAllFlags()
{
d354 1
d356 4
a359 4
	//also clean out the map table
	CountryIDtoFlagIndex.RemoveAll();

	//AddDebugLogLine(false, _T("Country Flags have been unloaded")); // Warning: will crash on exit
d362 1
a362 1
bool CIP2Country::AddIPRange(uint32 IPfrom, uint32 IPto, CString &strShortCountryName, CString &strLongCountryName)
d364 1
a364 25
	IPRange_Struct2* newRange = new IPRange_Struct2();

	newRange->IPstart = IPfrom;
	newRange->IPend = IPto;
	newRange->ShortCountryName = strShortCountryName;
	newRange->LongCountryName = strLongCountryName;

	if(EnableCountryFlag)
	{
		const CRBMap<CString, uint16>::CPair* pair;
		pair = CountryIDtoFlagIndex.Lookup(strShortCountryName);

		if (pair != NULL)
			newRange->FlagIndex = pair->m_value;
		else
			newRange->FlagIndex = NO_FLAG;
	}
	else
	{
		//this valuse is useless if the country flag havn't been load up, should be safe I think ...
		//newRange->FlagIndex = 0;
	}

	iplist.SetAt(IPfrom, newRange);
	return true;
d366 7
a372 2

struct IPRange_Struct2* CIP2Country::GetCountryFromIP(uint32 ClientIP)
d374 1
a374 3
	if (EnableIP2Country == false)
		return &defaultIP2Country;
	else if (ClientIP == 0)
d376 3
a378 8
		//AddDebugLogLine(false, "CIP2Country::GetCountryFromIP doesn't have ip to search for");
		return &defaultIP2Country;
	}
	else if (iplist.IsEmpty())
	{
		AddDebugLogLine(false, RGB_LOG_ERROR + _T("CIP2Country::GetCountryFromIP iplist doesn't exist"));
		return &defaultIP2Country;
	}
d380 4
a383 6
	ClientIP = htonl(ClientIP);
	POSITION pos = iplist.FindFirstKeyAfter(ClientIP);
	if (!pos)
		pos = iplist.GetTailPosition();
	else
		iplist.GetPrev(pos);
d385 3
a387 3
	while(pos)
	{
		const CRBMap<uint32, IPRange_Struct2*>::CPair* pair = iplist.GetPrev(pos);
d389 5
a393 4
		if (ClientIP > pair->m_value->IPend)
			break;
		if (ClientIP >= pair->m_key && ClientIP <= pair->m_value->IPend)
			return pair->m_value;
d395 1
a395 1
	return &defaultIP2Country;
d398 1
a398 1
bool CIP2Country::ShowCountryFlag()
d400 1
a400 7
	return 
		//user wanna see flag,
		(g_eMuleApp.m_pGlobPrefs->GetShowCountryFlag() &&
		//flag have been loaded
		EnableCountryFlag && 
		//ip table have been loaded
		EnableIP2Country);
@


1.7
log
@added percentage indicators to countries stats + minor changes
@
text
@d85 3
@


1.6
log
@Deleted icon top & bottom transparent margins to save memory & speed up drawing;
Removed unused icons.
@
text
@d51 1
a51 1
			iIdx = pstrTarget->Find(' ', iIdx) + 1;
d73 1
a73 1
		AddDebugLogLine(false, _T("IP2Country uses the IP-to-Country Database provided by WebHosting.Info (http://www.webhosting.info), available from http://ip-to-country.webhosting.info."));
d125 1
a125 1
	FILE* readFile = fopen(ip2countryCSVfile, "r");
d166 1
a166 1
						throw CString(_T("error line in"));
d191 1
a191 1
	CString		ip2countryCountryFlag;
a195 2
		ip2countryCountryFlag = _T("countryflag.dll");

@


1.5
log
@Removal of 32bit flag icon DLL (32bit icons won't be supported);
Significantly reduced the number of GDI resources used by flag icons.
@
text
@d255 11
a265 11
			IDI_COUNTRY_FLAG_SR, IDI_COUNTRY_FLAG_ST, IDI_COUNTRY_FLAG_SU, IDI_COUNTRY_FLAG_SV,
			IDI_COUNTRY_FLAG_SY, IDI_COUNTRY_FLAG_SZ, IDI_COUNTRY_FLAG_TC, IDI_COUNTRY_FLAG_TD,
			IDI_COUNTRY_FLAG_TF, IDI_COUNTRY_FLAG_TG, IDI_COUNTRY_FLAG_TH, IDI_COUNTRY_FLAG_TJ,
			IDI_COUNTRY_FLAG_TK, IDI_COUNTRY_FLAG_TL, IDI_COUNTRY_FLAG_TM, IDI_COUNTRY_FLAG_TN,
			IDI_COUNTRY_FLAG_TO, IDI_COUNTRY_FLAG_TR, IDI_COUNTRY_FLAG_TT, IDI_COUNTRY_FLAG_TV,
			IDI_COUNTRY_FLAG_TW, IDI_COUNTRY_FLAG_TZ, IDI_COUNTRY_FLAG_UA, IDI_COUNTRY_FLAG_UG,
			IDI_COUNTRY_FLAG_UM, IDI_COUNTRY_FLAG_US, IDI_COUNTRY_FLAG_UY, IDI_COUNTRY_FLAG_UZ,
			IDI_COUNTRY_FLAG_VA, IDI_COUNTRY_FLAG_VC, IDI_COUNTRY_FLAG_VE, IDI_COUNTRY_FLAG_VG,
			IDI_COUNTRY_FLAG_VI, IDI_COUNTRY_FLAG_VN, IDI_COUNTRY_FLAG_VU, IDI_COUNTRY_FLAG_WF,
			IDI_COUNTRY_FLAG_WS, IDI_COUNTRY_FLAG_YE, IDI_COUNTRY_FLAG_YU, IDI_COUNTRY_FLAG_ZA,
			IDI_COUNTRY_FLAG_ZM, IDI_COUNTRY_FLAG_ZW, IDI_COUNTRY_FLAG_UK, IDI_COUNTRY_FLAG_CS
d285 3
a287 3
			"SO", "SR", "ST", "SU", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL",
			"TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA",
			"VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YU", "ZA", "ZM", "ZW", "UK", "CS"
d290 1
a290 1
		m_lstCountryFlagImage.Create(18, 16, ILC_COLOR32 | ILC_MASK, ELEMENT_COUNT(s_auResID), 0);
@


1.4
log
@Corrected updating of Country information if option was disabled on start;
Removed some unreqired class members; Some methods became private;
Better memory assumption for image list.
@
text
@d196 1
a196 7
		//detect windows version
		if (g_eMuleApp.m_pGlobPrefs->GetWindowsVersion() == _WINVER_XP_)
			//it's XP, we can use beautiful 32bits flags with alpha channel :)
			ip2countryCountryFlag = _T("countryflag32.dll");
		else
			//oh~ it's not XP, but we still can load the 24bits flags
			ip2countryCountryFlag = _T("countryflag.dll");
a289 2
		HICON iconHandle;

d297 1
a297 1
			iconHandle = ::LoadIcon(hCountryFlagDll, MAKEINTRESOURCE(s_auResID[cur_pos]));
d301 1
d340 1
a340 1
	//destory all image
@


1.3
log
@no longer loading mid size names + some small changes
@
text
@a59 2
	m_bRunning = false;

d74 1
a74 2
		Load();
		m_bRunning = true;
d80 1
a80 2
	m_bRunning = false;
	Unload();
d83 1
a83 1
void CIP2Country::Load()
d88 1
a88 1
	if(m_bRunning)
d94 1
a94 1
void CIP2Country::Unload()
d99 1
a99 1
	if(m_bRunning)
d169 1
a169 1
				//strTemp[4] is full country name, capitalize country name from rayita
d191 2
a192 1
	CString ip2countryCountryFlag;
d204 2
a205 2
		_hCountryFlagDll = LoadLibrary(ip2countryCountryFlag); 
		if (_hCountryFlagDll == NULL) 
d298 2
a299 3
		CountryFlagImageList.DeleteImageList();
		CountryFlagImageList.Create(18,16,ILC_COLOR32 | ILC_MASK, 0, 1);
		CountryFlagImageList.SetBkColor(CLR_NONE);
a300 1
		//the res Array have one element to be the STOP
d305 1
a305 1
			iconHandle = LoadIcon(_hCountryFlagDll, MAKEINTRESOURCE(s_auResID[cur_pos]));
d308 1
a308 2
			
			CountryFlagImageList.Add(iconHandle);
d316 2
a317 2
		if(_hCountryFlagDll != NULL)
			FreeLibrary(_hCountryFlagDll);
d322 2
a323 2
	if(_hCountryFlagDll != NULL)
		FreeLibrary(_hCountryFlagDll);
d348 1
a348 1
	CountryFlagImageList.DeleteImageList();
@


1.2
log
@Fix not to load country resources if option is disabled by katsyonak;
Corrected supremely awful way of table declarations;
Improved string processing.
@
text
@a65 1
	defaultIP2Country.MidCountryName = _T("N/A");
d74 2
d77 2
a78 4

	AddDebugLogLine(false, _T("IP2Country uses the IP-to-Country Database provided by WebHosting.Info (http://www.webhosting.info), available from http://ip-to-country.webhosting.info."));

	m_bRunning = true;
d176 1
a176 1
				AddIPRange(atoi(strTemp[0]),atoi(strTemp[1]), strTemp[2], strTemp[3], strTemp[4]);
d362 1
a362 1
bool CIP2Country::AddIPRange(uint32 IPfrom, uint32 IPto, CString &strShortCountryName, CString &strMidCountryName, CString &strLongCountryName)
a368 1
	newRange->MidCountryName = strMidCountryName;
@


1.1
log
@added IP to Country from MorphXT (Please extract ip-to-country.rar in your config dir in order for this to work)
@
text
@d25 2
a26 2
#include "serverlist.h"
#include "clientlist.h"
d29 3
a31 3
#include "emuledlg.h"
#include "serverwnd.h"
#include "serverlistctrl.h"
d42 1
a42 1
CString FirstCharCap(CString target)
d44 2
a45 6
	target.TrimRight(); //clean out the space at the end, prevent exception for index++
	if(target.IsEmpty())
		return _T("");
	target.MakeLower();
	target.SetAt(0, target.Left(1).MakeUpper().GetAt(0));
	for(int index = target.Find(' '); index != -1; index = target.Find(' ', index))
d47 8
a54 2
		index++; //set the character next to space be Upper
		target.SetAt(index, target.Mid(index, 1).MakeUpper().GetAt(0));
a55 1
	return target;
d74 2
a75 2
	// if(g_eMuleApp.m_pGlobPrefs.GetIP2CountryNameMode() != IP2CountryName_DISABLE || g_eMuleApp.m_pGlobPrefs.IsIP2CountryShowFlag())
	Load();
a126 1
	int	lenBuf = 1024;
d136 3
a138 2

			int count = 0;
d142 1
a142 1
				if (fgets(buffer,lenBuf,readFile)==0)
d144 1
a144 2
				CString	sbuffer;
				sbuffer = buffer;
d163 1
a163 3
				sbuffer.Remove(_T('"')); // get rid of the " signs

				CString tempStr[5];
d167 1
a167 1
				for(int forCount = 0; forCount !=  5; forCount++)
d169 2
a170 2
					tempStr[forCount] = sbuffer.Tokenize(_T(","), curPos);
					if(tempStr[forCount].IsEmpty())
d174 2
a175 2
				//tempStr[4] is full country name, capitalize country name from rayita
				tempStr[4] = FirstCharCap(tempStr[4]);
d177 1
a177 1
				AddIPRange(atoi(tempStr[0]),atoi(tempStr[1]), tempStr[2], tempStr[3], tempStr[4]);
a191 1

d212 1
a212 1
		uint16	resID[] =
d216 60
a275 64
			IDI_COUNTRY_FLAG_AD, IDI_COUNTRY_FLAG_AE, IDI_COUNTRY_FLAG_AF, IDI_COUNTRY_FLAG_AG, 
			IDI_COUNTRY_FLAG_AI, IDI_COUNTRY_FLAG_AL, IDI_COUNTRY_FLAG_AM, IDI_COUNTRY_FLAG_AN, 
			IDI_COUNTRY_FLAG_AO, IDI_COUNTRY_FLAG_AR, IDI_COUNTRY_FLAG_AS, IDI_COUNTRY_FLAG_AT, 
			IDI_COUNTRY_FLAG_AU, IDI_COUNTRY_FLAG_AW, IDI_COUNTRY_FLAG_AZ, IDI_COUNTRY_FLAG_BA, 
			IDI_COUNTRY_FLAG_BB, IDI_COUNTRY_FLAG_BD, IDI_COUNTRY_FLAG_BE, IDI_COUNTRY_FLAG_BF, 
			IDI_COUNTRY_FLAG_BG, IDI_COUNTRY_FLAG_BH, IDI_COUNTRY_FLAG_BI, IDI_COUNTRY_FLAG_BJ, 
			IDI_COUNTRY_FLAG_BM, IDI_COUNTRY_FLAG_BN, IDI_COUNTRY_FLAG_BO, IDI_COUNTRY_FLAG_BR, 
			IDI_COUNTRY_FLAG_BS, IDI_COUNTRY_FLAG_BT, IDI_COUNTRY_FLAG_BW, IDI_COUNTRY_FLAG_BY, 
			IDI_COUNTRY_FLAG_BZ, IDI_COUNTRY_FLAG_CA, IDI_COUNTRY_FLAG_CC, IDI_COUNTRY_FLAG_CD, 
			IDI_COUNTRY_FLAG_CF, IDI_COUNTRY_FLAG_CG, IDI_COUNTRY_FLAG_CH, IDI_COUNTRY_FLAG_CI, 
			IDI_COUNTRY_FLAG_CK, IDI_COUNTRY_FLAG_CL, IDI_COUNTRY_FLAG_CM, IDI_COUNTRY_FLAG_CN, 
			IDI_COUNTRY_FLAG_CO, IDI_COUNTRY_FLAG_CR, IDI_COUNTRY_FLAG_CU, IDI_COUNTRY_FLAG_CV, 
			IDI_COUNTRY_FLAG_CX, IDI_COUNTRY_FLAG_CY, IDI_COUNTRY_FLAG_CZ, IDI_COUNTRY_FLAG_DE, 
			IDI_COUNTRY_FLAG_DJ, IDI_COUNTRY_FLAG_DK, IDI_COUNTRY_FLAG_DM, IDI_COUNTRY_FLAG_DO, 
			IDI_COUNTRY_FLAG_DZ, IDI_COUNTRY_FLAG_EC, IDI_COUNTRY_FLAG_EE, IDI_COUNTRY_FLAG_EG, 
			IDI_COUNTRY_FLAG_EH, IDI_COUNTRY_FLAG_ER, IDI_COUNTRY_FLAG_ES, IDI_COUNTRY_FLAG_ET, 
			IDI_COUNTRY_FLAG_FI, IDI_COUNTRY_FLAG_FJ, IDI_COUNTRY_FLAG_FK, IDI_COUNTRY_FLAG_FM, 
			IDI_COUNTRY_FLAG_FO, IDI_COUNTRY_FLAG_FR, IDI_COUNTRY_FLAG_GA, IDI_COUNTRY_FLAG_GB, 
			IDI_COUNTRY_FLAG_GD, IDI_COUNTRY_FLAG_GE, IDI_COUNTRY_FLAG_GG, IDI_COUNTRY_FLAG_GH, 
			IDI_COUNTRY_FLAG_GI, IDI_COUNTRY_FLAG_GK, IDI_COUNTRY_FLAG_GL, IDI_COUNTRY_FLAG_GM, 
			IDI_COUNTRY_FLAG_GN, IDI_COUNTRY_FLAG_GP, IDI_COUNTRY_FLAG_GQ, IDI_COUNTRY_FLAG_GR, 
			IDI_COUNTRY_FLAG_GS, IDI_COUNTRY_FLAG_GT, IDI_COUNTRY_FLAG_GU, IDI_COUNTRY_FLAG_GW, 
			IDI_COUNTRY_FLAG_GY, IDI_COUNTRY_FLAG_HK, IDI_COUNTRY_FLAG_HN, IDI_COUNTRY_FLAG_HR, 
			IDI_COUNTRY_FLAG_HT, IDI_COUNTRY_FLAG_HU, IDI_COUNTRY_FLAG_ID, IDI_COUNTRY_FLAG_IE, 
			IDI_COUNTRY_FLAG_IL, IDI_COUNTRY_FLAG_IM, IDI_COUNTRY_FLAG_IN, IDI_COUNTRY_FLAG_IO, 
			IDI_COUNTRY_FLAG_IQ, IDI_COUNTRY_FLAG_IR, IDI_COUNTRY_FLAG_IS, IDI_COUNTRY_FLAG_IT, 
			IDI_COUNTRY_FLAG_JE, IDI_COUNTRY_FLAG_JM, IDI_COUNTRY_FLAG_JO, IDI_COUNTRY_FLAG_JP, 
			IDI_COUNTRY_FLAG_KE, IDI_COUNTRY_FLAG_KG, IDI_COUNTRY_FLAG_KH, IDI_COUNTRY_FLAG_KI, 
			IDI_COUNTRY_FLAG_KM, IDI_COUNTRY_FLAG_KN, IDI_COUNTRY_FLAG_KP, IDI_COUNTRY_FLAG_KR, 
			IDI_COUNTRY_FLAG_KW, IDI_COUNTRY_FLAG_KY, IDI_COUNTRY_FLAG_KZ, IDI_COUNTRY_FLAG_LA, 
			IDI_COUNTRY_FLAG_LB, IDI_COUNTRY_FLAG_LC, IDI_COUNTRY_FLAG_LI, IDI_COUNTRY_FLAG_LK, 
			IDI_COUNTRY_FLAG_LR, IDI_COUNTRY_FLAG_LS, IDI_COUNTRY_FLAG_LT, IDI_COUNTRY_FLAG_LU, 
			IDI_COUNTRY_FLAG_LV, IDI_COUNTRY_FLAG_LY, IDI_COUNTRY_FLAG_MA, IDI_COUNTRY_FLAG_MC, 
			IDI_COUNTRY_FLAG_MD, IDI_COUNTRY_FLAG_MG, IDI_COUNTRY_FLAG_MH, IDI_COUNTRY_FLAG_MK, 
			IDI_COUNTRY_FLAG_ML, IDI_COUNTRY_FLAG_MM, IDI_COUNTRY_FLAG_MN, IDI_COUNTRY_FLAG_MO, 
			IDI_COUNTRY_FLAG_MP, IDI_COUNTRY_FLAG_MQ, IDI_COUNTRY_FLAG_MR, IDI_COUNTRY_FLAG_MS, 
			IDI_COUNTRY_FLAG_MT, IDI_COUNTRY_FLAG_MU, IDI_COUNTRY_FLAG_MV, IDI_COUNTRY_FLAG_MW, 
			IDI_COUNTRY_FLAG_MX, IDI_COUNTRY_FLAG_MY, IDI_COUNTRY_FLAG_MZ, IDI_COUNTRY_FLAG_NA, 
			IDI_COUNTRY_FLAG_NC, IDI_COUNTRY_FLAG_NE, IDI_COUNTRY_FLAG_NF, IDI_COUNTRY_FLAG_NG, 
			IDI_COUNTRY_FLAG_NI, IDI_COUNTRY_FLAG_NL, IDI_COUNTRY_FLAG_NO, IDI_COUNTRY_FLAG_NP, 
			IDI_COUNTRY_FLAG_NR, IDI_COUNTRY_FLAG_NU, IDI_COUNTRY_FLAG_NZ, IDI_COUNTRY_FLAG_OM, 
			IDI_COUNTRY_FLAG_PA, IDI_COUNTRY_FLAG_PC, IDI_COUNTRY_FLAG_PE, IDI_COUNTRY_FLAG_PF, 
			IDI_COUNTRY_FLAG_PG, IDI_COUNTRY_FLAG_PH, IDI_COUNTRY_FLAG_PK, IDI_COUNTRY_FLAG_PL, 
			IDI_COUNTRY_FLAG_PM, IDI_COUNTRY_FLAG_PN, IDI_COUNTRY_FLAG_PR, IDI_COUNTRY_FLAG_PS, 
			IDI_COUNTRY_FLAG_PT, IDI_COUNTRY_FLAG_PW, IDI_COUNTRY_FLAG_PY, IDI_COUNTRY_FLAG_QA, 
			IDI_COUNTRY_FLAG_RO, IDI_COUNTRY_FLAG_RU, IDI_COUNTRY_FLAG_RW, IDI_COUNTRY_FLAG_SA, 
			IDI_COUNTRY_FLAG_SB, IDI_COUNTRY_FLAG_SC, IDI_COUNTRY_FLAG_SD, IDI_COUNTRY_FLAG_SE, 
			IDI_COUNTRY_FLAG_SG, IDI_COUNTRY_FLAG_SH, IDI_COUNTRY_FLAG_SI, IDI_COUNTRY_FLAG_SK, 
			IDI_COUNTRY_FLAG_SL, IDI_COUNTRY_FLAG_SM, IDI_COUNTRY_FLAG_SN, IDI_COUNTRY_FLAG_SO, 
			IDI_COUNTRY_FLAG_SR, IDI_COUNTRY_FLAG_ST, IDI_COUNTRY_FLAG_SU, IDI_COUNTRY_FLAG_SV, 
			IDI_COUNTRY_FLAG_SY, IDI_COUNTRY_FLAG_SZ, IDI_COUNTRY_FLAG_TC, IDI_COUNTRY_FLAG_TD, 
			IDI_COUNTRY_FLAG_TF, IDI_COUNTRY_FLAG_TG, IDI_COUNTRY_FLAG_TH, IDI_COUNTRY_FLAG_TJ, 
			IDI_COUNTRY_FLAG_TK, IDI_COUNTRY_FLAG_TL, IDI_COUNTRY_FLAG_TM, IDI_COUNTRY_FLAG_TN, 
			IDI_COUNTRY_FLAG_TO, IDI_COUNTRY_FLAG_TR, IDI_COUNTRY_FLAG_TT, IDI_COUNTRY_FLAG_TV, 
			IDI_COUNTRY_FLAG_TW, IDI_COUNTRY_FLAG_TZ, IDI_COUNTRY_FLAG_UA, IDI_COUNTRY_FLAG_UG, 
			IDI_COUNTRY_FLAG_UM, IDI_COUNTRY_FLAG_US, IDI_COUNTRY_FLAG_UY, IDI_COUNTRY_FLAG_UZ, 
			IDI_COUNTRY_FLAG_VA, IDI_COUNTRY_FLAG_VC, IDI_COUNTRY_FLAG_VE, IDI_COUNTRY_FLAG_VG, 
			IDI_COUNTRY_FLAG_VI, IDI_COUNTRY_FLAG_VN, IDI_COUNTRY_FLAG_VU, IDI_COUNTRY_FLAG_WF, 
			IDI_COUNTRY_FLAG_WS, IDI_COUNTRY_FLAG_YE, IDI_COUNTRY_FLAG_YU, IDI_COUNTRY_FLAG_ZA, 
			IDI_COUNTRY_FLAG_ZM, IDI_COUNTRY_FLAG_ZW, 
			IDI_COUNTRY_FLAG_UK, //by tharghan
			IDI_COUNTRY_FLAG_CS, //by propaganda

			65535//the end
d278 1
a278 1
		CString countryID[] =
d282 16
a297 18
			"AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AR", "AS", "AT", "AU", "AW", "AZ", 
			"BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS", "BT", 
			"BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", 
			"CR", "CU", "CV", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", 
			"EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GG", 
			"GH", "GI", "GK", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", 
			"HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", 
			"JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", 
			"LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "MG", "MH", 
			"MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", 
			"MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", 
			"PC", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", 
			"RO", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SK", "SL", "SM", "SN", 
			"SO", "SR", "ST", "SU", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", 
			"TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", 
			"VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YU", "ZA", "ZM", "ZW", 
			"UK", //by tharghan
			"CS" //by propaganda
d307 1
a307 1
		for(int cur_pos = 0; resID[cur_pos] != 65535; cur_pos++)
d309 1
a309 1
			CountryIDtoFlagIndex.SetAt(countryID[cur_pos], cur_pos);
d311 1
a311 1
			iconHandle = LoadIcon(_hCountryFlagDll, MAKEINTRESOURCE(resID[cur_pos]));
d313 1
a313 1
				throw CString(_T("Invalid resID, maybe you need to upgrade your flag icon Dll,"));
d363 1
a363 1
bool CIP2Country::AddIPRange(uint32 IPfrom,uint32 IPto, CString shortCountryName, CString midCountryName, CString longCountryName)
d369 3
a371 3
	newRange->ShortCountryName = shortCountryName;
	newRange->MidCountryName = midCountryName;
	newRange->LongCountryName = longCountryName;
d376 1
a376 1
		pair = CountryIDtoFlagIndex.Lookup(shortCountryName);
a436 1

@

