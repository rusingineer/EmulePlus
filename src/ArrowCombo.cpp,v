head	1.7;
access;
symbols
	PublicRelease_1_2e:1.7
	Interim_Release_1-2e_RC1:1.7
	PublicRelease_1_2d:1.7
	Interim_Release_1-2d_RC1:1.7
	Interim_Release_1-2d_beta1:1.6
	PublicRelease_1_2c:1.6
	Interim_Release_1-2c_RC1:1.6
	Interim_Release_1-2c_beta1:1.6
	PublicRelease_1_2b:1.6
	Interim_Release_1-2b_RC1:1.6
	PublicRelease_1_2a:1.6
	Interim_Release_1-2a_RC1:1.6
	Interim_Release_1-2a_beta2:1.6
	Interim_Release_1-2a_beta1:1.6
	PublicRelease_1_2:1.6
	Interim_Release_1-2_RC1:1.6
	Interim_Release_1-2_beta1:1.6
	PublicRelease_1_1g:1.6
	Interim_Release_1-1g_RC3:1.6
	Interim_Release_1-1g_RC2:1.6
	Interim_Release_1-1g_RC1:1.6
	Interim_Release_1-1g_beta2:1.6
	Interim_Release_1-1g_beta1:1.6
	PublicRelease_1_1f:1.6
	Interim_Release_1-1f_RC1:1.6
	PublicRelease_1_1e:1.6
	Interim_Release_1-1e_RC2:1.6
	Interim_Release_1-1e_RC1:1.5
	Interim_Release_1-1e_beta1:1.5
	PublicRelease_1_1d:1.5
	Interim_Release_1-1d_RC1:1.5
	PublicRelease_1_1c:1.5
	Interim_Release_1-1c_RC1:1.5
	Interim_Release_1-1c_beta2:1.5
	Interim_Release_1-1c_beta1:1.5
	PublicRelease_1_1b:1.5
	Interim_Release_1-1b_RC1:1.5
	PublicRelease_1_1a:1.5
	Interim_Release_1-1a_RC2:1.5
	Interim_Release_1-1a_RC1:1.5
	Interim_Release_1-1a_beta2:1.5
	Interim_Release_1-1a_beta1:1.5
	PublicRelease_1_1:1.5
	Interim_Release_1-1_beta1:1.5
	PublicRelease_1o:1.5
	Interim_Release_1o_RC1:1.5
	Interim_Release_1o_beta1:1.5
	PublicRelease_1n:1.5
	Interim_Release_1n_RC2:1.5
	Interim_Release_1n_RC1:1.5
	Interim_Release_1n_beta2:1.5
	Interim_Release_1n_beta1:1.5
	PublicRelease_1m:1.5
	Interim_Release_1m_beta1:1.5
	PublicRelease_1l:1.5
	Interim_Release_1l_RC3:1.5
	Interim_Release_1l_RC2:1.5
	Interim_Release_1l_RC1:1.5
	Interim_Release_1l_beta2:1.5
	Interim_Release_1l_beta1:1.5
	PublicRelease_1k:1.5
	Interim_Release_1k_RC4:1.5
	Interim_1k_RC3:1.5
	Interim_1k_RC2:1.5
	Interim_Release_1k_RC1:1.5
	Interim_Release_1k_beta5:1.5
	Intrerim_Release_1k_beta4:1.5
	Interim_Release_1k_beta1:1.5
	PublicRelease_1j:1.5
	Interim_Release_1J_RC3:1.5
	Interim_Release_1j_RC3:1.5
	Interim_Release_1j_RC2:1.5
	Interim_Release_1j_RC1:1.5
	Interim_Release_1j_beta2:1.5
	Interim_Release_1j_beta1:1.5
	PublicRelease_1i:1.5
	Interim_Release_1i_RC6:1.5
	Interim_Release_1i_RC3:1.5
	Interim_Release_1i_RC2:1.5
	Interim_Release_1i_RC1:1.5
	Interim_Release_1i_beta3:1.5
	Interim_Release_1i_beta2:1.5
	Interim_Release_1i_beta1:1.5
	PublicRelease_1h:1.4
	Interim_Release_1h_rc2:1.4
	Interim_Release_1h_RC1:1.4
	Interim_Release_1h_beta2:1.4
	Interim_Release_1h_beta1_now:1.4
	Interim_Release_1h_beta1:1.4
	PublicRelease_1g:1.4
	Interim_Release_1g_RC6_Final:1.4
	Interim_Release_1g_RC6:1.4
	Interim_Release_1g_RC5:1.4
	Interim_Release_1g_RC4:1.4
	Interim_Release_1g_RC3:1.4
	Interim_Release_1g_beta2:1.3
	Interim_Release_1g_beta1:1.3
	Interim_Release_1f_RC4:1.3
	Interim_Release_1f_RC3:1.3
	Interim_Release_1f_RC2:1.3
	Interim_Release_1f_RC:1.3
	Interim_Release_1f_beta2:1.3
	Interim_Release_1f_beta1:1.3
	PublicRelease_1e:1.3
	Interim_Release_1e_RC2:1.3
	Interim_Release_1e_RC:1.3
	Interim_Release_1e_beta3:1.3
	Interim_Release_1e_beta2:1.3
	Interim_Release_1e_beta2_before_kuchin:1.3
	Interim_Release_1e_beta1:1.3
	PublicRelease_1c:1.3
	featurestest:1.3.0.2
	Interim_Release_1c_RC:1.3
	Interim_Release_1c_beta2:1.3
	Interim_Release_1c_beta1:1.2
	threaded_downloadqueue:1.2.0.6
	PublicRelease_1b:1.2
	Interim_Release_1b_beta2:1.2
	Interim_Release_1b_beta1:1.2
	proxydeadlake:1.2.0.4
	PublicRelease_1a:1.2
	Interim_Release_1a_beta2:1.2
	BerkeleyDb:1.2.0.2
	Interim_Release_1a_beta1:1.2
	PublicRelease_1:1.2
	goldfish:1.2
	eMulePlus_1_RC2:1.2
	eMulePlus_26b_1RC1:1.2
	PreRelease_26b_i0e:1.2
	before_26d_merge:1.2
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.7
date	2008.03.10.04.11.27;	author aw3;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.27.20.11.08;	author eklmn;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.01.15.08.35;	author eklmn;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.19.16.48.04;	author partyckip;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.17.20.48.28;	author cax2;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.16.22.01.45;	author lord_kiron;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.17.59.08;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.53.55;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Removed meaningless set/restore brush around FillRect; Removed pen deletion (done in destructor);
Some generic and strings display optimization.
@
text
@/*********************************************************************
	ArrowCombo: a combo box with up & down arrows, CopyLeft by Cax2.
	Displays 2 different fonts in the same combo box line. 
	
	This code is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either
	version 2 of the License, or (at your option) any later version.

	Inspired by the FontPreviewCombo code by
	http://www.smalleranimals.com
	smallest@@smalleranimals.com

	which is based, in part, on:
	"A WTL-based Font preview combo box", Ramon Smits
	http://www.codeproject.com/wtl/rsprevfontcmb.asp

**********************************************************************/

#include "stdafx.h"
#include "ArrowCombo.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif



static CArrowCombo *m_pComboBox = 0;
#define SPACE      4

/////////////////////////////////////////////////////////////////////////////
// CArrowCombo

CArrowCombo::CArrowCombo(){
	m_iFontHeight = 16;
}

CArrowCombo::~CArrowCombo(){
}

BEGIN_MESSAGE_MAP(CArrowCombo, CComboBox)
	ON_WM_DRAWITEM()
	ON_WM_MEASUREITEM()
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CArrowCombo message handlers

void CArrowCombo::DrawItem(LPDRAWITEMSTRUCT lpDIS)
{
	ASSERT(lpDIS->CtlType == ODT_COMBOBOX); 
	CRect rect = lpDIS->rcItem;
	CDC dc;
	dc.Attach(lpDIS->hDC);
	if (lpDIS->itemState & ODS_FOCUS) dc.DrawFocusRect(&rect);
	if (lpDIS->itemID == -1) return;
	int nIndexDC = dc.SaveDC();
	
	CBrush brush;

	if (lpDIS->itemState & ODS_SELECTED)
	{
		brush.CreateSolidBrush(GetSysColor(COLOR_HIGHLIGHT));
		dc.SetTextColor(GetSysColor(COLOR_HIGHLIGHTTEXT));
	} 
	else 
		brush.CreateSolidBrush(dc.GetBkColor());
	
	dc.SetBkMode(TRANSPARENT);
	dc.FillRect(&rect, &brush);

	CString itemText;
	GetLBText(lpDIS->itemID, itemText);
	bool bArrowUp = false;
	bool bArrowDouble = false;
	bool ShowArrow = (!_tcsstr(itemText,_T("[-]")));
	if (ShowArrow)
	{
		if (_tcsstr(itemText,_T("[^]")) != NULL)
			bArrowUp = true;
		else if (_tcsstr(itemText,_T("[^^]")) != NULL)
		{
			bArrowUp = true;
			bArrowDouble = true;
		}
		else if (_tcsstr(itemText,_T("[vv]")) != NULL)
			bArrowDouble = true;
	}
	itemText= itemText.SpanExcluding(_T("["));

	CSize sz = dc.GetTextExtent(itemText);
	int txtHeight = (rect.Height() - sz.cy) / 2;

	dc.SetTextColor((GetStyle() & WS_DISABLED)? (COLORREF)RGB(128,128,128):dc.GetTextColor());	//Cax2 - grey them out
	dc.TextOut(rect.left+SPACE, rect.top + txtHeight, itemText);
	if(ShowArrow)
	{
		int txtLen = sz.cx+SPACE;
		//marlett is (AFAIK) available with all windows distributions...
		CFont marlett, *pOldFont; 
		marlett.CreateFont(m_iFontHeight-2,0,0,0,FW_NORMAL,FALSE, FALSE, FALSE,DEFAULT_CHARSET ,OUT_DEFAULT_PRECIS,CLIP_DEFAULT_PRECIS,ANTIALIASED_QUALITY,DEFAULT_PITCH, _T("Marlett"));
		pOldFont = dc.SelectObject(&marlett);
		sz = dc.GetTextExtent(_T("t"), 1);		//both t(^) & u (v) arrows are the same width...
		dc.SetTextColor((GetStyle() & WS_DISABLED)?(COLORREF)RGB(160,160,160):(COLORREF)RGB(128,128,128));
		dc.TextOut(rect.left + txtLen, rect.top + txtHeight, (bArrowUp) ? _T("t") : _T("u"), 1);
		if (bArrowDouble)
		{
			dc.SetTextColor((GetStyle() & WS_DISABLED)?(COLORREF)RGB(192,192,192):(COLORREF)RGB(255,255,255));
			dc.TextOut(rect.left+txtLen+SPACE-1, rect.top + txtHeight, (bArrowUp) ? _T("t") : _T("u"), 1);
			dc.SetTextColor((GetStyle() & WS_DISABLED)?(COLORREF)RGB(160,160,160):(COLORREF)RGB(128,128,128));
			dc.TextOut(rect.left+txtLen+SPACE, rect.top + txtHeight, (bArrowUp) ? _T("t") : _T("u"), 1);
		}
		dc.SelectObject(pOldFont);
	}
	dc.RestoreDC(nIndexDC);
	dc.Detach();
}
@


1.6
log
@small optimization
@
text
@a72 1
	CBrush* pOldBrush = dc.SelectObject(&brush);	//eklmn: select a new brush
d74 1
a74 2
	dc.SelectObject(pOldBrush);		//eklmn: select an old brush
	brush.DeleteObject();
d77 2
a78 3
	bool arrowUp = false;
	bool doubleUp = false;
	bool doubleDown = false;
d83 1
a83 1
			arrowUp = true;
d86 2
a87 2
			arrowUp = true;
			doubleUp = true;
d90 1
a90 1
			doubleDown = true;
d106 1
a106 1
		sz = dc.GetTextExtent(_T("t"));		//both t(^) & u (v) arrows are the same width...
d108 3
a110 2
		dc.TextOut(rect.left + txtLen, rect.top + txtHeight, ((arrowUp)?_T("t"):_T("u")));
		if (doubleUp || doubleDown) {
d112 1
a112 1
			dc.TextOut(rect.left+txtLen+SPACE-1, rect.top + txtHeight, ((doubleUp)?_T("t"):_T("u")));
d114 1
a114 1
			dc.TextOut(rect.left+txtLen+SPACE, rect.top + txtHeight, ((doubleUp)?_T("t"):_T("u")));
d116 1
a116 1
		dc.SelectObject(pOldFont);	// FoRcHa
d120 1
a120 1
}@


1.5
log
@an incorrect use of GDI resources (CBrush class)
@
text
@d79 16
a94 4
	bool arrowUp=(_tcsstr(itemText,_T("[^")));
	bool doubleUp=(_tcsstr(itemText,_T("[^^]")));
	bool doubleDown=(_tcsstr(itemText,_T("[vv]")));
	bool ShowArrow=(!_tcsstr(itemText,_T("[-]")));
d96 1
d99 1
@


1.4
log
@unicode cleanup
@
text
@d52 2
a53 1
void CArrowCombo::DrawItem(LPDRAWITEMSTRUCT lpDIS){
d64 2
a65 1
	if (lpDIS->itemState & ODS_SELECTED){
d68 3
a70 1
	} else brush.CreateSolidBrush(dc.GetBkColor());
d73 1
d75 1
@


1.3
log
@bugfix for bug #8, and now arrow combo displays properly, when disabled.
@
text
@d73 5
a77 5
	bool arrowUp=(strstr(itemText,"[^"));
	bool doubleUp=(strstr(itemText,"[^^]"));
	bool doubleDown=(strstr(itemText,"[vv]"));
	bool ShowArrow=(!strstr(itemText,"[-]"));
	itemText= itemText.SpanExcluding("[");
d87 1
a87 1
		marlett.CreateFont(m_iFontHeight-2,0,0,0,FW_NORMAL,FALSE, FALSE, FALSE,DEFAULT_CHARSET ,OUT_DEFAULT_PRECIS,CLIP_DEFAULT_PRECIS,ANTIALIASED_QUALITY,DEFAULT_PITCH, "Marlett");
d89 1
a89 1
		sz = dc.GetTextExtent("t");		//both t(^) & u (v) arrows are the same width...
d91 1
a91 1
		dc.TextOut(rect.left + txtLen, rect.top + txtHeight, ((arrowUp)?"t":"u"));
d94 1
a94 1
			dc.TextOut(rect.left+txtLen+SPACE-1, rect.top + txtHeight, ((doubleUp)?"t":"u"));
d96 1
a96 1
			dc.TextOut(rect.left+txtLen+SPACE, rect.top + txtHeight, ((doubleUp)?"t":"u"));
@


1.2
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d64 2
a65 2
		brush.CreateSolidBrush(::GetSysColor(COLOR_HIGHLIGHT));
		dc.SetTextColor(::GetSysColor(COLOR_HIGHLIGHTTEXT));
d80 1
d90 1
a90 1
		dc.SetTextColor((COLORREF)RGB(128,128,128));
d93 1
a93 1
			dc.SetTextColor((COLORREF)RGB(255,255,255));
d95 1
a95 1
			dc.SetTextColor((COLORREF)RGB(128,128,128));
@


1.1
log
@*** empty log message ***
@
text
@d23 8
@


1.1.4.1
log
@updating this branch...
@
text
@@

