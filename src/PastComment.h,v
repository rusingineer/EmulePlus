head	1.8;
access;
symbols
	PublicRelease_1_2e:1.8
	Interim_Release_1-2e_RC1:1.8
	PublicRelease_1_2d:1.8
	Interim_Release_1-2d_RC1:1.8
	Interim_Release_1-2d_beta1:1.7
	PublicRelease_1_2c:1.5
	Interim_Release_1-2c_RC1:1.5
	Interim_Release_1-2c_beta1:1.4
	PublicRelease_1_2b:1.4
	Interim_Release_1-2b_RC1:1.4
	PublicRelease_1_2a:1.4
	Interim_Release_1-2a_RC1:1.4
	Interim_Release_1-2a_beta2:1.4
	Interim_Release_1-2a_beta1:1.4
	PublicRelease_1_2:1.4
	Interim_Release_1-2_RC1:1.4
	Interim_Release_1-2_beta1:1.4
	PublicRelease_1_1g:1.4
	Interim_Release_1-1g_RC3:1.4
	Interim_Release_1-1g_RC2:1.4
	Interim_Release_1-1g_RC1:1.4
	Interim_Release_1-1g_beta2:1.4
	Interim_Release_1-1g_beta1:1.4
	PublicRelease_1_1f:1.4
	Interim_Release_1-1f_RC1:1.4
	PublicRelease_1_1e:1.4
	Interim_Release_1-1e_RC2:1.4
	Interim_Release_1-1e_RC1:1.4
	Interim_Release_1-1e_beta1:1.4
	PublicRelease_1_1d:1.4
	Interim_Release_1-1d_RC1:1.4
	PublicRelease_1_1c:1.4
	Interim_Release_1-1c_RC1:1.4
	Interim_Release_1-1c_beta2:1.3
	Interim_Release_1-1c_beta1:1.3
	PublicRelease_1_1b:1.3
	Interim_Release_1-1b_RC1:1.3
	PublicRelease_1_1a:1.3
	Interim_Release_1-1a_RC2:1.3
	Interim_Release_1-1a_RC1:1.3
	Interim_Release_1-1a_beta2:1.3
	Interim_Release_1-1a_beta1:1.3
	PublicRelease_1_1:1.3
	Interim_Release_1-1_beta1:1.3
	PublicRelease_1o:1.3
	Interim_Release_1o_RC1:1.3
	Interim_Release_1o_beta1:1.3
	PublicRelease_1n:1.3
	Interim_Release_1n_RC2:1.3
	Interim_Release_1n_RC1:1.3
	Interim_Release_1n_beta2:1.3
	Interim_Release_1n_beta1:1.3
	PublicRelease_1m:1.3
	Interim_Release_1m_beta1:1.3
	PublicRelease_1l:1.3
	Interim_Release_1l_RC3:1.3
	Interim_Release_1l_RC2:1.3
	Interim_Release_1l_RC1:1.3
	Interim_Release_1l_beta2:1.3
	Interim_Release_1l_beta1:1.3
	PublicRelease_1k:1.3
	Interim_Release_1k_RC4:1.3
	Interim_1k_RC3:1.3
	Interim_1k_RC2:1.3
	Interim_Release_1k_RC1:1.3
	Interim_Release_1k_beta5:1.3
	Intrerim_Release_1k_beta4:1.3
	Interim_Release_1k_beta1:1.3
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.2
	PublicRelease_1i:1.2
	Interim_Release_1i_RC6:1.2
	Interim_Release_1i_RC3:1.2
	Interim_Release_1i_RC2:1.2
	Interim_Release_1i_RC1:1.2
	Interim_Release_1i_beta3:1.2
	Interim_Release_1i_beta2:1.2
	Interim_Release_1i_beta1:1.1
	PublicRelease_1h:1.1
	Interim_Release_1h_rc2:1.1
	Interim_Release_1h_RC1:1.1
	Interim_Release_1h_beta2:1.1
	Interim_Release_1h_beta1_now:1.1
	Interim_Release_1h_beta1:1.1;
locks; strict;
comment	@ * @;


1.8
date	2008.03.01.19.01.50;	author aw3;	state Exp;
branches;
next	1.7;

1.7
date	2008.01.02.05.30.52;	author aw3;	state Exp;
branches;
next	1.6;

1.6
date	2008.01.01.11.12.06;	author eklmn;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.27.03.19.05;	author aw3;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.18.18.03.29;	author kuchin;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.10.17.59.02;	author morevit;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.10.14.12.52;	author zegzav;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Reorganized inline code; Removed unused code; Faster comment search (eliminated extra class object creation)
Suppressed compiler warnings; Formatting.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

enum _EnumPartFileRating
{
	PF_RATING_NONE = 0,
	PF_RATING_FAKE,
	PF_RATING_POOR,
	PF_RATING_GOOD,			//Fair and Good are reversed for some reason
	PF_RATING_FAIR,
	PF_RATING_EXCELLENT
};
typedef EnumDomain<_EnumPartFileRating>		EnumPartFileRating;

class CPastComment
{
public:
	CPastComment();
	CPastComment(const uchar client[16]);
	CPastComment( const uchar client[16], const CString &strClientName, const CString &strFileName,
					const CString &strComment, EnumPartFileRating eRating );
	~CPastComment() {}

	const CString& GetClientName() const			{ return m_strClientName; }
	const CString& GetFileName() const				{ return m_strFileName; }
	const CString& GetComment() const				{ return m_strComment; }
	EnumPartFileRating GetRating() const			{ return m_eRating; }
	const uchar* GetClientHash() const				{ return m_ClientHash; }

	bool operator==(const CPastComment &pc) const;

protected:
	uchar				m_ClientHash[16];
	CString				m_strClientName;
	CString				m_strFileName;
	CString				m_strComment;
	EnumPartFileRating	m_eRating;
};

#ifndef NEW_SOCKETS_TRAY
class CPastCommentList : public CList<CPastComment, CPastComment&>
{
public:
	CPastCommentList() {}
	~CPastCommentList() {}

	void Add(const uchar client[16], const CString &strClientName, const CString &strFileName, const CString &strComment, EnumPartFileRating eRating);
	void Remove(const uchar client[16]);
	POSITION FindComment(const uchar client[16]) const;

	bool GetCommentRating(const uchar client[16], CString *pstrComment, EnumPartFileRating *peRating) const;
	const CString& GetFileName(const uchar client[16]);
	const CString& GetComment(const uchar client[16]);
	EnumPartFileRating GetRate(const uchar client[16]);
};
#endif //NEW_SOCKETS_TRAY
@


1.7
log
@Fixed 'improved comment processing' which screwed comment processing big time.
@
text
@d1 15
a15 2
// #zegzav:pastcomment

a16 1
#include "types.h"
d25 1
a25 1
	PF_RATING_EXCELLENT,
d31 21
a51 24
	public:
		CPastComment();
		CPastComment(const uchar client[16]);
		CPastComment(const uchar client[16], const CString &strClientName);
		CPastComment( const uchar client[16], const CString &strClientName, const CString &strFileName,
					  const CString &strComment, EnumPartFileRating eRating );
		~CPastComment();

		const CString &GetClientName() const;
		void SetFileName(const CString &strFileName);
		const CString &GetFileName() const;
		void SetComment(const CString &strComment);
		const CString &GetComment() const;
		void SetRating(EnumPartFileRating eRating);
		EnumPartFileRating GetRating() const;

		bool operator==(const CPastComment &pc) const;

	protected:
		uchar				m_ClientHash[16];
		CString				m_strClientName;
		CString				m_strFileName;
		CString				m_strComment;
		EnumPartFileRating	m_eRating;
d57 12
a68 12
	public:
		CPastCommentList();
		~CPastCommentList();

		void Add(const uchar client[16], const CString &strClientName, const CString &strFileName, const CString &strComment, EnumPartFileRating eRating);
		void Remove(const uchar client[16]);
		int GetCount() const;

		bool GetCommentRating(const uchar client[16], CString *pstrComment, EnumPartFileRating *peRating) const;
		const CString &GetFileName(const uchar client[16]);
		const CString &GetComment(const uchar client[16]);
		byte GetRate(const uchar client[16]);
a70 50


inline CPastComment::~CPastComment()
{
}

inline const CString &CPastComment::GetClientName() const
{
	return m_strClientName;
}

inline void CPastComment::SetComment(const CString &strComment)
{
	m_strComment= strComment;
}

inline const CString &CPastComment::GetComment() const
{ 
	return m_strComment; 
}

inline void CPastComment::SetFileName(const CString &strFileName)
{
	m_strFileName= strFileName;
}

inline const CString &CPastComment::GetFileName() const
{ 
	return m_strFileName; 
}

inline void CPastComment::SetRating(EnumPartFileRating eRating)
{ 
	m_eRating = eRating; 
}

inline EnumPartFileRating CPastComment::GetRating() const
{ 
	return m_eRating;
}

#ifndef NEW_SOCKETS_TRAY
inline CPastCommentList::CPastCommentList()
{
}

inline CPastCommentList::~CPastCommentList()
{
}
#endif //NEW_SOCKETS_TRAY
@


1.6
log
@improved comment processing
@
text
@d6 1
a6 1
enum EnumPartFileRating
d15 1
@


1.5
log
@Stricter definitions of class methods.
@
text
@d6 1
a6 1
enum _EnumPartFileRating
a14 1
typedef EnumDomain<_EnumPartFileRating>		EnumPartFileRating;
@


1.4
log
@v2 - minor rearrangements, fixes for EngineTray compilation
@
text
@d21 3
a23 3
		CPastComment(uchar client[16]);
		CPastComment(uchar client[16], const CString &strClientName);
		CPastComment( uchar client[16], const CString &strClientName, const CString &strFileName,
d52 2
a53 2
		void Add(uchar client[16], const CString &strClientName, const CString &strFileName, const CString &strComment, EnumPartFileRating eRating);
		void Remove(uchar client[16]);
d56 4
a59 7
		bool GetCommentRating(uchar client[16], CString *pstrComment, EnumPartFileRating *peRating) const;
		const CString &GetFileName(uchar client[16]);
		const CString &GetComment(uchar client[16]);
		byte GetRate(uchar client[16]);

	protected:
		// POSITION Find(uchar client[16]) const;
d111 1
a111 1
#endif //NEW_SOCKETS_TRAY@


1.3
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d45 1
d64 1
a64 2


d106 1
d114 1
@


1.2
log
@Formatting, comments, and name changes.
@
text
@d58 1
a58 1
		int8 GetRate(uchar client[16]);
@


1.1
log
@added past comments
@
text
@d6 10
d23 2
a24 1
		CPastComment(uchar client[16], const CString &strClientName, const CString &strFileName, const CString &strComment, int8 nRate);
d32 2
a33 2
		void SetRate(int8 nRate);
		int8 GetRate() const;
d38 5
a42 5
		uchar m_ClientHash[16];
		CString m_strClientName;
		CString m_strFileName;
		CString m_strComment;
		int8 m_nRate;
d51 1
a51 1
		void Add(uchar client[16], const CString &strClientName, const CString &strFileName, const CString &strComment, int8 nRate);
d55 1
a55 1
		bool GetCommentRate(uchar client[16], CString *pstrComment, int8 *pnRate) const;
d96 1
a96 1
inline void CPastComment::SetRate(int8 nRate)
d98 1
a98 1
	m_nRate= nRate; 
d101 1
a101 1
inline int8 CPastComment::GetRate() const
d103 1
a103 1
	return m_nRate; 
@

