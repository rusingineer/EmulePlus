head	1.50;
access;
symbols
	PublicRelease_1_2e:1.47
	Interim_Release_1-2e_RC1:1.47
	PublicRelease_1_2d:1.47
	Interim_Release_1-2d_RC1:1.47
	Interim_Release_1-2d_beta1:1.47
	PublicRelease_1_2c:1.44
	Interim_Release_1-2c_RC1:1.44
	Interim_Release_1-2c_beta1:1.43
	PublicRelease_1_2b:1.43
	Interim_Release_1-2b_RC1:1.43
	PublicRelease_1_2a:1.41
	Interim_Release_1-2a_RC1:1.41
	Interim_Release_1-2a_beta2:1.39
	Interim_Release_1-2a_beta1:1.38
	PublicRelease_1_2:1.36
	Interim_Release_1-2_RC1:1.36
	Interim_Release_1-2_beta1:1.35
	PublicRelease_1_1g:1.35
	Interim_Release_1-1g_RC3:1.35
	Interim_Release_1-1g_RC2:1.35
	Interim_Release_1-1g_RC1:1.35
	Interim_Release_1-1g_beta2:1.35
	Interim_Release_1-1g_beta1:1.33
	PublicRelease_1_1f:1.33
	Interim_Release_1-1f_RC1:1.33
	PublicRelease_1_1e:1.33
	Interim_Release_1-1e_RC2:1.33
	Interim_Release_1-1e_RC1:1.33
	Interim_Release_1-1e_beta1:1.33
	PublicRelease_1_1d:1.31
	Interim_Release_1-1d_RC1:1.31
	PublicRelease_1_1c:1.31
	Interim_Release_1-1c_RC1:1.31
	Interim_Release_1-1c_beta2:1.31
	Interim_Release_1-1c_beta1:1.30
	PublicRelease_1_1b:1.29
	Interim_Release_1-1b_RC1:1.29
	PublicRelease_1_1a:1.29
	Interim_Release_1-1a_RC2:1.29
	Interim_Release_1-1a_RC1:1.28
	Interim_Release_1-1a_beta2:1.28
	Interim_Release_1-1a_beta1:1.27
	PublicRelease_1_1:1.26
	Interim_Release_1-1_beta1:1.26
	PublicRelease_1o:1.26
	Interim_Release_1o_RC1:1.26
	Interim_Release_1o_beta1:1.26
	PublicRelease_1n:1.26
	Interim_Release_1n_RC2:1.26
	Interim_Release_1n_RC1:1.26
	Interim_Release_1n_beta2:1.26
	Interim_Release_1n_beta1:1.26
	PublicRelease_1m:1.26
	Interim_Release_1m_beta1:1.26
	PublicRelease_1l:1.26
	Interim_Release_1l_RC3:1.26
	Interim_Release_1l_RC2:1.26
	Interim_Release_1l_RC1:1.26
	Interim_Release_1l_beta2:1.26
	Interim_Release_1l_beta1:1.26
	PublicRelease_1k:1.26
	Interim_Release_1k_RC4:1.26
	Interim_1k_RC3:1.26
	Interim_1k_RC2:1.26
	Interim_Release_1k_RC1:1.26
	Interim_Release_1k_beta5:1.25
	Intrerim_Release_1k_beta4:1.25
	Interim_Release_1k_beta1:1.21
	PublicRelease_1j:1.18
	Interim_Release_1J_RC3:1.18
	Interim_Release_1j_RC3:1.18
	Interim_Release_1j_RC2:1.18
	Interim_Release_1j_RC1:1.18
	Interim_Release_1j_beta2:1.18
	Interim_Release_1j_beta1:1.18
	PublicRelease_1i:1.18
	Interim_Release_1i_RC6:1.18
	Interim_Release_1i_RC3:1.16
	Interim_Release_1i_RC2:1.16
	Interim_Release_1i_RC1:1.15
	Interim_Release_1i_beta3:1.14
	Interim_Release_1i_beta2:1.13
	Interim_Release_1i_beta1:1.10
	PublicRelease_1h:1.8
	Interim_Release_1h_rc2:1.8
	Interim_Release_1h_RC1:1.8
	Interim_Release_1h_beta2:1.8
	Interim_Release_1h_beta1_now:1.6
	Interim_Release_1h_beta1:1.6
	PublicRelease_1g:1.5
	Interim_Release_1g_RC6_Final:1.5
	Interim_Release_1g_RC6:1.5
	Interim_Release_1g_RC5:1.5
	Interim_Release_1g_RC4:1.5
	Interim_Release_1g_RC3:1.5
	Interim_Release_1g_beta2:1.4
	Interim_Release_1g_beta1:1.3
	Interim_Release_1f_RC4:1.3
	Interim_Release_1f_RC3:1.3
	Interim_Release_1f_RC2:1.2
	Interim_Release_1f_RC:1.2
	Interim_Release_1f_beta2:1.2
	Interim_Release_1f_beta1:1.2
	PublicRelease_1e:1.2
	Interim_Release_1e_RC2:1.2
	Interim_Release_1e_RC:1.2
	Interim_Release_1e_beta3:1.2
	Interim_Release_1e_beta2:1.2
	Interim_Release_1e_beta2_before_kuchin:1.2
	Interim_Release_1e_beta1:1.1
	PublicRelease_1c:1.1
	featurestest:1.1.0.16
	Interim_Release_1c_RC:1.1
	Interim_Release_1c_beta2:1.1
	Interim_Release_1c_beta1:1.1
	threaded_downloadqueue:1.1.0.14
	PublicRelease_1b:1.1
	Interim_Release_1b_beta2:1.1
	Interim_Release_1b_beta1:1.1
	proxydeadlake:1.1.0.12
	PublicRelease_1a:1.1
	Interim_Release_1a_beta2:1.1
	BerkeleyDb:1.1.0.10
	Interim_Release_1a_beta1:1.1
	PublicRelease_1:1.1
	goldfish:1.1
	eMulePlus_1_RC2:1.1
	eMulePlus_26b_1RC1:1.1
	PreRelease_26b_i0e:1.1
	before_26d_merge:1.1
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.50
date	2009.09.10.03.13.18;	author aw3;	state Exp;
branches;
next	1.49;

1.49
date	2009.07.26.14.06.08;	author aw3;	state Exp;
branches;
next	1.48;

1.48
date	2009.06.02.02.19.55;	author aw3;	state Exp;
branches;
next	1.47;

1.47
date	2008.01.14.01.19.52;	author aw3;	state Exp;
branches;
next	1.46;

1.46
date	2008.01.11.15.34.03;	author eklmn;	state Exp;
branches;
next	1.45;

1.45
date	2007.12.19.21.02.42;	author aw3;	state Exp;
branches;
next	1.44;

1.44
date	2007.06.07.04.30.42;	author aw3;	state Exp;
branches;
next	1.43;

1.43
date	2007.01.17.07.53.33;	author aw3;	state Exp;
branches;
next	1.42;

1.42
date	2007.01.11.19.57.05;	author eklmn;	state Exp;
branches;
next	1.41;

1.41
date	2006.08.16.04.25.30;	author aw3;	state Exp;
branches;
next	1.40;

1.40
date	2006.07.23.00.29.15;	author aw3;	state Exp;
branches;
next	1.39;

1.39
date	2006.05.22.03.45.00;	author aw3;	state Exp;
branches;
next	1.38;

1.38
date	2006.04.06.04.07.12;	author aw3;	state Exp;
branches;
next	1.37;

1.37
date	2006.03.05.23.57.52;	author aw3;	state Exp;
branches;
next	1.36;

1.36
date	2006.02.13.05.39.19;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2005.09.05.17.25.17;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2005.08.29.03.06.06;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2005.04.02.22.33.19;	author aw3;	state Exp;
branches;
next	1.32;

1.32
date	2005.03.22.05.20.16;	author aw3;	state Exp;
branches;
next	1.31;

1.31
date	2005.02.16.05.10.11;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2005.01.16.21.46.11;	author netwolf1;	state Exp;
branches;
next	1.29;

1.29
date	2004.12.06.17.55.51;	author dongato;	state Exp;
branches;
next	1.28;

1.28
date	2004.11.11.05.37.58;	author aw3;	state Exp;
branches;
next	1.27;

1.27
date	2004.11.02.17.24.24;	author aw3;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.25.09.17.18;	author eklmn;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.21.10.34.05;	author eklmn;	state Exp;
branches;
next	1.24;

1.24
date	2004.03.08.22.45.04;	author kush_eplus;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.08.17.11.18;	author kush_eplus;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.22.20.19.04;	author kush_eplus;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.19.00.40.33;	author kush_eplus;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.04.19.06.00;	author morevit;	state Exp;
branches;
next	1.18;

1.18
date	2003.11.22.13.11.19;	author eklmn;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.21.20.24.58;	author eklmn;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.11.23.30.07;	author syrus77;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.31.18.33.23;	author puritynn666;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.26.15.57.56;	author morevit;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.15.03.51.45;	author morevit;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.08.01.53.32;	author morevit;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.06.21.57.05;	author puritynn666;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.02.00.58.14;	author morevit;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.22.16.13.52;	author morevit;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.02.18.28.57;	author puritynn666;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.24.20.28.04;	author zegzav;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.30.12.29.31;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.21.17.52.33;	author partyckip;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.06.19.56.47;	author partyckip;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.20.21.14.41;	author netwolf1;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.19.07.17.00;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.22;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.25;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.50
log
@Show media information in the search results received from consecutive servers (before media information was shown only when the server provided file information was attaching it; media information wasn't added to the list even when next server sent it for the same file).
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

typedef struct
{
	CString	strFileName;
	LPCTSTR	pcFileType;
	CString	strFakeCheck;
	CString	strFileHash;
	CString	strIndex;
	uint64	qwFileSize;
	uint32	dwSourceCount;
	uint32	dwCompleteSourceCount;
	uint32	dwSrvRating;
} SearchFileStruct;

class SearchList;

class CSearchFile : public CAbstractFile
{
	friend class CPartFile;
public:
	CSearchFile(CFile &in_stream, ECodingFormat eCF, uint32 dwSearchID, CServer *pSrv, CUpDownClient *pClient = NULL, LPCTSTR pszDirectory = NULL);
	virtual ~CSearchFile();
	uint32	GetIntTagValue(byte tagname);
	bool	GetIntTagValue(byte tagname, uint32 *pdwOut);
	uint64	GetInt64TagValue(byte tagname);
	void	SetIntTagValue(byte tagname, uint32 dwVal);
	CString	GetStrTagValue(byte tagname);
	void	AddExistentIntTag(byte tagname, uint32 dwInc);
	void	AddCompleteSources(uint32 dwCount);
	void	UpdateLastSeenComplete(uint32 dwSeconds);
	void	UpdateSrvRating(CSearchFile *pAdd);
	bool	AnyMediaTagExists() const;
	void	UpdateMediaTags(CSearchFile *pAdd);
	uint32	GetSourceCount()				{ return GetIntTagValue(FT_SOURCES); }
	uint32	GetCompleteSourceCount()		{ return GetIntTagValue(FT_COMPLETE_SOURCES); }
	uint32	GetLastSeenCompleteValue()		{ uint32 dwVal = 0x7FFFFFFF; GetIntTagValue(FT_LASTSEENCOMPLETE, &dwVal); return dwVal; }
	uint32	GetSearchID()					{ return m_nSearchID; }
	uint32	GetClientHybridID() const		{ return m_dwClientIDHybrid; }
	uint32	GetClientID() const				{ return m_dwClientID; }
	uint16	GetClientPort() const			{ return m_uClientPort; }
	uint32	GetClientServerIP() const		{ return m_nClientServerIP; }
	uint16	GetClientServerPort() const		{ return m_nClientServerPort; }
	const byte*	GetClientHash() const		{ return abyteClientHash; }
	EnumSearchFileTypes GetType()			{ return m_eType; }
	CString	GetSearchFileDir()				{ return m_strSearchFileDirectory; }
	uint32	GetMediaLength()				{ return GetIntTagValue(FT_MEDIA_LENGTH); }
	uint32	GetMediaBitrate()				{ return GetIntTagValue(FT_MEDIA_BITRATE); }
	CString	GetMediaCodec()					{ return GetStrTagValue(FT_MEDIA_CODEC); }
	int		GetSrvFileRating() const		{ return m_iSrvRating; }
	void	GetSrvFileRatingEx(double *pdRating, uint32 *pdwUsers) const	{ *pdRating = m_dSrvRating; *pdwUsers = m_dwVoters; }

private:
	uint32	m_dwClientIDHybrid;
	uint32	m_dwClientID;
	uint32	m_nSearchID;
	uint16	m_uClientPort;

	uint16	m_nClientServerPort;
	uint32	m_nClientServerIP;
	byte	abyteClientHash[16];
	CString	m_strSearchFileDirectory;
	int		m_iSrvRating;	// integer server rating to draw an image
	double	m_dSrvRating;	// float server rating to estimate and show overall rating
	uint32	m_dwVoters;		// estimated value of voted users
	EnumSearchFileTypes m_eType;
};

class CSearchList
{
friend class CSearchListCtrl;
public:
	CSearchList();
	~CSearchList();
	void	Clear();
	void	NewSearch(CSearchListCtrl *in_wnd, const CString &strTypes, uint32 dwSearchID, bool MobilMuleSearch = false);
	uint16	ProcessSearchAnswer(char *packet, uint32 dwSize, ECodingFormat eCF, bool *pbIsMoreResultsAvailable, CServer *pSrv);
	void	ProcessSharedFileListAnswer(byte *pbytePacket, uint32 size, CUpDownClient* Sender, LPCTSTR pszDirectory = NULL, bool bFirstDir = false);
	bool	AllowUDPSearchAnswer();
	uint16	ProcessUDPSearchAnswer(CMemFile &pckStream, ECodingFormat eCF, CServer *pSrv);
	void	SetOutputWnd(CSearchListCtrl* in_wnd)		{ m_pctlSearchList = in_wnd; }
	void	RemoveResults(uint32 nSearchID);
	void	RemoveResults(CSearchFile* todel);
	void	ShowResults(uint32 nSearchID);
	CString	GetWebList(const CString &strLinePattern, int iSortBy, bool bAscending, bool bShowColumn1, bool bShowColumn2, bool bShowColumn3, bool bShowColumn4, bool bShowColumn5) const;
	void	AddFileToDownloadByHash(uchar* hash);
	void	AddFileToDownloadByHash(uchar* hash, EnumCategories eCatID);

	uint16	GetFoundFiles(uint32 searchID) {
		uint16 returnVal;
		foundFilesCount.Lookup(searchID,returnVal);
		return returnVal;
	}
	// mobilemule
	CSearchFile*	DetachNextFile(uint32 nSearchID);

private:
	bool	AddToList(CSearchFile *pAddedFile, bool bClientResponse);

	CTypedPtrList<CPtrList, CSearchFile*> list;
	CMap<uint32, uint32, uint16, uint16> foundFilesCount;

	CSearchListCtrl		*m_pctlSearchList;
	CString				m_strResultType;
	uint32				m_dwCurrentSearchCount;
	bool				m_bMobilMuleSearch;
};
@


1.49
log
@Ability to add LowID sources with a file from search list results (before if a local server was providing LowID source with search result they were not used).
@
text
@d46 1
a46 1
	void	AddCompleteSources(uint32 in_dwCount);
d49 2
@


1.48
log
@Ability to add known LowID source through remote client shared files list.
@
text
@d38 1
a38 1
	CSearchFile(CFile& in_data, ECodingFormat eCF, uint32 nSearchID, CUpDownClient* Sender = NULL, LPCTSTR pszDirectory = NULL);
d91 1
a91 1
	uint16	ProcessSearchAnswer(char* packet, uint32 size, ECodingFormat eCF, bool* pbIsMoreResultsAvailable = NULL);
d94 1
a94 1
	uint16	ProcessUDPSearchAnswer(CMemFile &pckStream, ECodingFormat eCF);
@


1.47
log
@Tag array was moved to abstract class to unify processing; Reduced H-file dependency.
@
text
@d55 4
a58 3
	uint16	GetClientPort()					{ return m_uClientPort; }
	uint32	GetClientServerIP()				{ return m_nClientServerIP; }
	uint16	GetClientServerPort()			{ return m_nClientServerPort; }
d75 1
@


1.46
log
@added Unicode support for server search
@
text
@a18 3
#include "emule.h"
#include "types.h"

d39 1
a39 1
	~CSearchFile();
a69 1
	CArray<CTag*, CTag*> m_tagArray;
@


1.45
log
@Suppressed compiler warnings.
@
text
@d41 1
a41 1
	CSearchFile(CFile& in_data, uint32 nSearchID, CUpDownClient* Sender = NULL, LPCTSTR pszDirectory = NULL);
d93 1
a93 1
	uint16	ProcessSearchAnswer(char* packet, uint32 size, bool* pbIsMoreResultsAvailable = NULL);
d96 1
a96 1
	uint16	ProcessUDPSearchAnswer(CMemFile &pckStream);
@


1.44
log
@WebServer: show overall file rating provided by servers in the search list.
@
text
@a18 1
#include "opcodes.h"
a19 1
#include "KnownFile.h"
a20 1
#include "SearchListCtrl.h"
d46 1
a46 1
	void	SetIntTagValue(EnumFileTags tagname, uint32 dwVal);
d92 1
a92 1
	void	NewSearch(CSearchListCtrl *in_wnd, const CString &strTypes, uint16 nSearchID, bool MobilMuleSearch = false);
@


1.43
log
@Recovered back proper variable alignment in the class;
Removed unused code; Removed unused include; Formatting and renaming.
@
text
@d35 1
@


1.42
log
@1) updated source exchange protocol to ver.3
2) support of HighID clients with IP "x.x.x.0"  (see description in updownclient.h)
3) removed dublicated ip check for LowID clients in TryToConnect()
4) fixed a client name change by download start from remote client shared file list.
5) some formating
@
text
@d17 1
a18 1
#pragma once
d21 1
a22 2
#include "Preferences.h"
#include "KnownFile.h"
a42 1
	//CSearchFile() {};
d58 2
a59 2
	uint32	GetClientHybridID()				{ return m_dwClientHybridID; }
	uint32	GetClientID()						{ return m_dwClientID; }
d72 2
a73 6
	uint32		m_dwClientHybridID;
	uint32		m_dwClientID;
	uint16		m_uClientPort;
	uint32		m_nClientServerIP;
	uint16		m_nClientServerPort;

d76 1
d78 2
a98 3
	void	AddResultCount(uint32 dwSearchID, const uchar* hash, uint32 dwCount);
	uint16	GetResultCount();
	uint16	GetResultCount(uint32 nSearchID);
d114 1
a119 1
	CMap<uint32, uint32, uint16, uint16> foundSourcesCount;
@


1.41
log
@Large file size support preparations.
@
text
@d60 3
a62 2
	uint32	GetClientID()					{ return m_dwClientIP; }
	uint16	GetClientPort()					{ return clientport; }
d74 6
a79 1
	uint32	m_dwClientIP;
a81 1
	uint16	clientport;
a82 2
	uint16	m_nClientServerPort;
	uint32	m_nClientServerIP;
@


1.40
log
@Unified packet buffer type.
@
text
@d49 1
@


1.39
log
@Large file size support preparations.
@
text
@d95 1
a95 1
	void	ProcessSharedFileListAnswer(char* packet, uint32 size, CUpDownClient* Sender, LPCTSTR pszDirectory = NULL, bool bFirstDir = false);
@


1.38
log
@Show overall file rating provided by servers in the search list; Reduced H-file dependency;
Removed CLoggable based class (not much required here).
@
text
@d33 1
a33 1
	uint32	uFileSize;
@


1.37
log
@WebServer: faster preparation of the search page; Formatting.
@
text
@a23 1
#include "packets.h"
a24 1
#include "otherfunctions.h"
d54 1
d69 1
d80 3
a82 1
	int		m_iSrvRating;
d86 1
a86 1
class CSearchList : public CLoggable
d92 2
a93 2
	void Clear();
	void NewSearch(CSearchListCtrl *in_wnd, const CString &strTypes, uint16 nSearchID, bool MobilMuleSearch = false);
d117 1
a117 1
	bool AddToList(CSearchFile* toadd, bool bClientResponse = false);
@


1.36
log
@Show file rating received from the server in the search list; Data alignment.
@
text
@d30 8
a37 8
	CString	m_strFileName;
	CString	m_strFileType;
	CString	m_strFakeCheck;
	CString	m_strFileHash;
	CString	m_strIndex;
	uint32	m_uFileSize;
	uint32	m_uSourceCount;
	uint32	m_dwCompleteSourceCount;
@


1.35
log
@Don't discard UDP search results of the same packet when search limit is reached.
@
text
@d69 1
a72 1
	uint16	clientport;
d75 1
d77 1
d79 2
a80 1
	uint16	m_nClientServerPort;
a81 1
	CString	m_strSearchFileDirectory;
d116 1
@


1.34
log
@Improved string processing.
@
text
@d92 1
@


1.33
log
@Show media information (length, bitrate and codec) for search results.
@
text
@d89 1
a89 1
	void NewSearch(CSearchListCtrl* in_wnd, CString resTypes, uint16 nSearchID, bool MobilMuleSearch = false);
@


1.32
log
@Added support for extended UDP server protocol to get multiple file search results in one UDP packet.
@
text
@d66 3
@


1.31
log
@Support new ed2k tag format (client<->server,
as well as used for shared list transfers to eMule v0.43a+ and eMule Plus v1.1a+).
@
text
@d89 1
a89 1
	uint16	ProcessUDPSearchAnswer(byte* pbytePacketBuf, uint32 size);
@


1.30
log
@Added 'Folder' column to Search window (shows the location of the remote client's files).
@
text
@d60 4
a63 4
	uint32 GetClientID()					{ return m_dwClientIP; }
	uint16 GetClientPort()					{ return clientport; }
	uint32 GetClientServerIP()				{ return m_nClientServerIP; }
	uint16 GetClientServerPort()			{ return m_nClientServerPort; }
d65 1
a65 1
	CString GetSearchFileDir()				{ return m_strSearchFileDirectory; }
d71 1
a71 1
	CArray<CFileTag*,CFileTag*> m_tagArray;
@


1.29
log
@Changes to last features
@
text
@d65 1
@


1.28
log
@WebServer: faster way to detect file type as well as more file extentions added
(thanks eklmn for idea);
WebServer: some file types were incorrectly represented in the lists;
Removed unused variable; Improved string processing.
@
text
@d47 1
a47 1
	CSearchFile(CFile& in_data, uint32 nSearchID, CUpDownClient* Sender = NULL, LPCTSTR pszDirectory = NULL);	// netwolf 20.05.03 enhanced source finding (bluecow)
d56 9
a64 12
	uint32	GetSourceCount()				{return GetIntTagValue(FT_SOURCES);}
	uint32	GetCompleteSourceCount()		{return GetIntTagValue(FT_COMPLETE_SOURCES);}
	uint32	GetLastSeenCompleteValue()		{uint32 dwVal = 0x7FFFFFFF; GetIntTagValue(FT_LASTSEENCOMPLETE, &dwVal); return dwVal;}
	uint32	GetSearchID() {return m_nSearchID;}

	enum EnumSearchFileTypes {SFT_SERVER, SFT_CLIENT };	// netwolf 20.05.03 enhanced source finding

	EnumSearchFileTypes GetType() { return m_eType; }
	uint32 GetClientID() { return m_dwClientIP; }
	uint16 GetClientPort() { return clientport; }
	uint32 GetClientServerIP() { return m_nClientServerIP; }
	uint16 GetClientServerPort() { return m_nClientServerPort; }
d92 3
a94 3
	void	SetOutputWnd(CSearchListCtrl* in_wnd)		{m_pctlSearchList = in_wnd;}
	void	RemoveResults(  uint32 nSearchID );
	void	RemoveResults( CSearchFile* todel );
@


1.27
log
@Last Seen Complete was added to search results.
@
text
@a17 1

d22 1
a22 1
#include "preferences.h"
d25 1
a25 1
#include "searchlistctrl.h"
d31 4
a34 4
	CString m_strFileType;
	CString m_strFakeCheck;
	CString m_strFileHash;
	CString m_strIndex;
d75 2
a76 2
	uint32  m_nClientServerIP;	// netwolf 20.05.03 enhanced source finding
	uint16  m_nClientServerPort;
d99 1
a99 2
	CString GetWebList(CString strLinePattern, int iSortBy, bool bAscending, bool bShowColumn1, bool bShowColumn2, bool bShowColumn3, bool bShowColumn4, bool bShowColumn5) const;
	CString	GetFileType(CString strFileName) const;
a115 1
	CString myHashList;
@


1.26
log
@feature: show number of complete files by search (untested)
@
text
@d51 2
d54 3
a56 2
	uint32	AddSources(uint32 count);
	uint32	AddCompleteSources(uint32 in_dwCount);
d59 1
@


1.25
log
@name changes
@
text
@d38 1
d53 3
a55 1
	uint32	GetSourceCount();
@


1.24
log
@reverted a silly thing (thanks to Syrus again)
@
text
@d72 1
a72 1
	CString m_strDirectory;
@


1.23
log
@removed old search code + some fix and changes
@
text
@d95 2
a96 2
	void	AddFileToDownloadByHash(const uchar* hash);
	void	AddFileToDownloadByHash(const uchar* hash, EnumCategories eCatID);
@


1.22
log
@formatting;
more button code comitted but not compiled as default
@
text
@a82 1
#ifdef NEW_SEARCH_ENABLED
a84 3
#else
	uint16	ProcessSearchAnswer(char* packet, uint32 size, CUpDownClient* Sender = NULL, LPCTSTR pszDirectory = NULL, bool bFirstDir = false);
#endif // NEW_SEARCH_ENABLED
d86 1
d95 2
a96 2
	void	AddFileToDownloadByHash(uchar* hash);
	void	AddFileToDownloadByHash(uchar* hash, EnumCategories eCatID);
d109 1
@


1.21
log
@minor optimisations
@
text
@d83 4
d88 1
@


1.20
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d54 1
a54 1
	
d68 1
a68 1
	
d83 1
a83 1
	uint16	ProcessSearchAnswer(char* packet, uint32 size, CUpDownClient* Sender = NULL, LPCTSTR pszDirectory = NULL, bool bFirstDir= false);
d95 1
a95 1
	
@


1.19
log
@Formatting, comments, and name changes.
@
text
@d49 2
a50 2
	uint32	GetIntTagValue(uint8 tagname);
	CString	GetStrTagValue(uint8 tagname);
d84 1
a84 1
	uint16	ProcessUDPSearchAnswer(char* packet, uint32 size);
@


1.18
log
@fix for serch with new filetyp
@
text
@d42 2
a43 1
class CSearchFile : public CAbstractFile {
d56 1
d58 1
a58 1
	uint32 GetClientID() { return *((uint32*)clientip); }
d64 1
a64 1
	uint8	clientip[4];
d71 1
a71 1
	enum EnumSearchFileTypes m_eType;
@


1.17
log
@File Type correction & related name changes
@
text
@d73 1
a73 1
class CSearchList
@


1.16
log
@quicksorting of searchresults for webserver
@
text
@d81 2
a82 2
	uint16	ProcessSearchanswer(char* packet, uint32 size, CUpDownClient* Sender = NULL, LPCTSTR pszDirectory = NULL, bool bFirstDir= false);
	uint16	ProcessUDPSearchanswer(char* packet, uint32 size);
@


1.15
log
@extended filetype recognisation for transfer list, shared files list and search result (WebServer)
@
text
@d29 11
d89 1
a89 1
	CString GetWebList(CString linePattern,int sortby,bool asc,bool column1,bool column2,bool column3,bool column4,bool column5) const;
@


1.14
log
@Formatting, comments, and name changes.
Fixed a couple of sorting related bugs in SearchListCtrl.
@
text
@d79 1
a79 1
	CString	GetFileType(CString strExtension) const;
@


1.13
log
@DownloadListCtrl rewrite.
Changed Category ID types to an enumeration.
More async update work.
The usual formatting, comments, and name changes.
@
text
@d74 1
a74 1
	void	SetOutputWnd(CSearchListCtrl* in_wnd)		{m_ctlSearchList = in_wnd;}
d96 4
a99 4
	CSearchListCtrl		*m_ctlSearchList;
	CString resultType;
	uint32	m_nCurrentSearch;
	bool	m_bMobilMuleSearch;
@


1.12
log
@Formatting, comments, and name changes.
Created distinct tag classes and typed enumerations for tags, opcodes, and protocols.
@
text
@d81 1
a81 1
	void	AddFileToDownloadByHash(uchar* hash, uint8 iCatID);
@


1.11
log
@FakeCheck for Search Result and Download List (Check and Report ... made by milobac ... merged by DropF ... tested by n@@boleo and me)
@
text
@d54 1
a54 1
	CArray<CTag*,CTag*> m_tagArray;
@


1.10
log
@Formatting, comments, and name changes.
@
text
@d78 2
a79 1
	CString GetWebList(CString linePattern,int sortby,bool asc,bool column1,bool column2,bool column3,bool column4) const;
@


1.9
log
@Formatting, comments, and name changes.
@
text
@d43 2
a44 2
	enum EType {Server, Client };	// netwolf 20.05.03 enhanced source finding
	EType GetType() { return m_eType; }
d58 1
a58 1
	enum EType m_eType;
d80 1
a80 1
	void	AddFileToDownloadByHash(uchar* hash, uint8 cat);
@


1.8
log
@merging category code for webserver
@
text
@d54 1
a54 1
	CArray<CTag*,CTag*> taglist;
d74 1
a74 1
	void	SetOutputWnd(CSearchListCtrl* in_wnd)		{outputwnd = in_wnd;}
d95 1
a95 1
	CSearchListCtrl*	outputwnd;
d98 1
a98 1
	bool	m_MobilMuleSearch;
@


1.7
log
@added OP_ASKSHAREDDIRS protocol
@
text
@d78 1
a78 1
	CString GetWebList(CString linePattern);
d80 1
@


1.6
log
@Purity's changes
@
text
@d35 1
a35 1
	CSearchFile(CFile& in_data, uint32 nSearchID, CUpDownClient* Sender = NULL);	// netwolf 20.05.03 enhanced source finding (bluecow)
d59 1
d70 1
a70 1
	uint16	ProcessSearchanswer(char* packet, uint32 size, CUpDownClient* Sender = NULL);
@


1.5
log
@char * to CString conversion
@
text
@d68 1
a68 1
	void NewSearch(CSearchListCtrl* in_wnd, CString resTypes, uint16 nSearchID);
d85 2
a86 1

d96 1
@


1.4
log
@code cleanup
@
text
@d38 1
a38 1
	char*	GetStrTagValue(uint8 tagname);
@


1.3
log
@enhanced source finding
@
text
@d35 1
a35 1
	CSearchFile(CFile* in_data, uint32 nSearchID, CUpDownClient* Sender = NULL);	// netwolf 20.05.03 enhanced source finding (bluecow)
@


1.2
log
@Upgrade to webserver official 0.28a
@
text
@d35 1
a35 1
	CSearchFile(CFile* in_data, uint32 nSearchID);
d42 8
d55 4
@


1.1
log
@*** empty log message ***
@
text
@d65 2
@


1.1.4.1
log
@updating this branch...
@
text
@@

