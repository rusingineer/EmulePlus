head	1.14;
access;
symbols
	PublicRelease_1_2e:1.14
	Interim_Release_1-2e_RC1:1.14
	PublicRelease_1_2d:1.14
	Interim_Release_1-2d_RC1:1.14
	Interim_Release_1-2d_beta1:1.14
	PublicRelease_1_2c:1.14
	Interim_Release_1-2c_RC1:1.14
	Interim_Release_1-2c_beta1:1.14
	PublicRelease_1_2b:1.14
	Interim_Release_1-2b_RC1:1.14
	PublicRelease_1_2a:1.14
	Interim_Release_1-2a_RC1:1.14
	Interim_Release_1-2a_beta2:1.14
	Interim_Release_1-2a_beta1:1.14
	PublicRelease_1_2:1.14
	Interim_Release_1-2_RC1:1.14
	Interim_Release_1-2_beta1:1.14
	PublicRelease_1_1g:1.13
	Interim_Release_1-1g_RC3:1.13
	Interim_Release_1-1g_RC2:1.13
	Interim_Release_1-1g_RC1:1.13
	Interim_Release_1-1g_beta2:1.13
	Interim_Release_1-1g_beta1:1.13
	PublicRelease_1_1f:1.13
	Interim_Release_1-1f_RC1:1.13
	PublicRelease_1_1e:1.13
	Interim_Release_1-1e_RC2:1.13
	Interim_Release_1-1e_RC1:1.13
	Interim_Release_1-1e_beta1:1.13
	PublicRelease_1_1d:1.13
	Interim_Release_1-1d_RC1:1.13
	PublicRelease_1_1c:1.13
	Interim_Release_1-1c_RC1:1.13
	Interim_Release_1-1c_beta2:1.13
	Interim_Release_1-1c_beta1:1.13
	PublicRelease_1_1b:1.12
	Interim_Release_1-1b_RC1:1.12
	PublicRelease_1_1a:1.12
	Interim_Release_1-1a_RC2:1.12
	Interim_Release_1-1a_RC1:1.12
	Interim_Release_1-1a_beta2:1.12
	Interim_Release_1-1a_beta1:1.12
	PublicRelease_1_1:1.12
	Interim_Release_1-1_beta1:1.12
	PublicRelease_1o:1.12
	Interim_Release_1o_RC1:1.12
	Interim_Release_1o_beta1:1.12
	PublicRelease_1n:1.12
	Interim_Release_1n_RC2:1.12
	Interim_Release_1n_RC1:1.12
	Interim_Release_1n_beta2:1.12
	Interim_Release_1n_beta1:1.12
	PublicRelease_1m:1.12
	Interim_Release_1m_beta1:1.12
	PublicRelease_1l:1.12
	Interim_Release_1l_RC3:1.12
	Interim_Release_1l_RC2:1.12
	Interim_Release_1l_RC1:1.11
	Interim_Release_1l_beta2:1.11
	Interim_Release_1l_beta1:1.11
	PublicRelease_1k:1.11
	Interim_Release_1k_RC4:1.11
	Interim_1k_RC3:1.11
	Interim_1k_RC2:1.11
	Interim_Release_1k_RC1:1.11
	Interim_Release_1k_beta5:1.11
	Intrerim_Release_1k_beta4:1.11
	Interim_Release_1k_beta1:1.11
	PublicRelease_1j:1.9
	Interim_Release_1J_RC3:1.9
	Interim_Release_1j_RC3:1.9
	Interim_Release_1j_RC2:1.8
	Interim_Release_1j_RC1:1.8
	Interim_Release_1j_beta2:1.8
	Interim_Release_1j_beta1:1.8
	PublicRelease_1i:1.8
	Interim_Release_1i_RC6:1.8
	Interim_Release_1i_RC3:1.8
	Interim_Release_1i_RC2:1.8
	Interim_Release_1i_RC1:1.7
	Interim_Release_1i_beta3:1.6
	Interim_Release_1i_beta2:1.6
	Interim_Release_1i_beta1:1.5
	PublicRelease_1h:1.5
	Interim_Release_1h_rc2:1.5
	Interim_Release_1h_RC1:1.5
	Interim_Release_1h_beta2:1.5
	Interim_Release_1h_beta1_now:1.3
	Interim_Release_1h_beta1:1.3;
locks; strict;
comment	@ * @;


1.14
date	2006.01.15.18.22.24;	author aw3;	state Exp;
branches;
next	1.13;

1.13
date	2005.01.14.14.21.13;	author kush_eplus;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.02.18.27.35;	author kush_eplus;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.13.16.13.35;	author netwolf1;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.22.20.46.52;	author dongato;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.04.22.24.44;	author puritynn666;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.31.18.27.54;	author puritynn666;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.06.19.19.12;	author puritynn666;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.02.18.28.14;	author puritynn666;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.24.15.55.18;	author bond006;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.17.13.15.04;	author puritynn666;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.10.16.42.02;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.30.12.29.32;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Unicode corrections; Reduced H-files dependency;
Removed base class CLoggable as unrequired; Formatting.
@
text
@//this file is part of eMule
//Copyright (C)2003 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#ifdef OLD_SOCKETS_ENABLED

class CMMSocket;
class CMMData;
class CMMPacket;
class CListenMMSocket;
class CSearchFile;
class CKnownFile;
class CPartFile;

#define  MMS_BLOCKTIME	600000
#define  MMS_SEARCHID	500

class CMMServer
{
public:
	CMMServer(void);
	~CMMServer(void);
	void	Init();
	void	StopServer();
	// packet processing
	bool	PreProcessPacket(char *pPacket, uint32 nSize, CMMSocket *sender);
	void	ProcessHelloPacket(CMMData *data, CMMSocket *sender);
	void	ProcessStatusRequest(CMMSocket *sender, CMMPacket *usePacket = NULL);
	void	ProcessFileListRequest(CMMSocket *sender, CMMPacket *usePacket = NULL);
	void	ProcessFileCommand(CMMData *data, CMMSocket *sender);
	void	ProcessDetailRequest(CMMData *data, CMMSocket *socket);
	void	ProcessCommandRequest(CMMData *data, CMMSocket *sender);
	void	ProcessSearchRequest(CMMData *data, CMMSocket *sender);
	void	ProcessPreviewRequest(CMMData *data, CMMSocket *sender);
	void	ProcessDownloadRequest(CMMData *data, CMMSocket *sender);
	void	ProcessChangeLimitRequest(CMMData *data, CMMSocket *sender);
	void	ProcessFinishedListRequest(CMMSocket *sender);
	void	ProcessStatisticsRequest(CMMData *data, CMMSocket *sender);
	// other
	void	SearchFinished(bool bTimeOut);
	void	Process();
	void	AddFinishedFile(CKnownFile *file)	{m_SentFinishedList.Add(file);}
	const char*	GetContentType();

	UINT_PTR	h_timer;
	byte		m_byPendingCommand;
	CMMSocket	*m_pPendingCommandSocket;

protected:
	static VOID CALLBACK CommandTimer(HWND hWnd, UINT nMsg, UINT nId, DWORD dwTime);
	void	DeleteSearchFiles();
	void	WriteFileInfo(CPartFile *selFile, CMMPacket *packet);

private:
	CListenMMSocket		*m_pSocket;
	uint16				m_nSessionID;
	CArray<CPartFile*,CPartFile*>		m_SentFileList;
	CArray<CSearchFile*, CSearchFile*>	m_SendSearchList;
	CArray<CKnownFile*,CKnownFile*>		m_SentFinishedList;
	byte				m_cPWFailed;
	uint32				m_dwBlocked;
	bool				m_bUseFakeContent;
	uint16				m_nMaxDownloads;
	uint16				m_nMaxBufDownloads;
	bool				m_bGrabListLogin;
};
#endif //OLD_SOCKETS_ENABLED
@


1.13
log
@CxImage lib has never been needed
@
text
@d17 11
a27 5
#include "types.h"
#include "mmsocket.h"
#include "partfile.h"
#include "knownfile.h"
#include "loggable.h"
a28 1
#pragma once
d32 1
a32 3
#ifdef OLD_SOCKETS_ENABLED

class CMMServer: public CLoggable
d40 13
a52 13
	bool	PreProcessPacket(char* pPacket, uint32 nSize, CMMSocket* sender);
	void	ProcessHelloPacket(CMMData* data, CMMSocket* sender);
	void	ProcessStatusRequest(CMMSocket* sender, CMMPacket* usePacket = NULL);
	void	ProcessFileListRequest(CMMSocket* sender, CMMPacket* usePacket = NULL);
	void	ProcessFileCommand(CMMData* data, CMMSocket* sender);
	void	ProcessDetailRequest(CMMData* data, CMMSocket* socket);
	void	ProcessCommandRequest(CMMData* data, CMMSocket* sender);
	void	ProcessSearchRequest(CMMData* data, CMMSocket* sender);
	void	ProcessPreviewRequest(CMMData* data, CMMSocket* sender);
	void	ProcessDownloadRequest(CMMData* data, CMMSocket* sender);
	void	ProcessChangeLimitRequest(CMMData* data, CMMSocket* sender);
	void	ProcessFinishedListRequest(CMMSocket* sender);
	void	ProcessStatisticsRequest(CMMData* data, CMMSocket* sender);
d56 2
a57 2
	void	AddFinishedFile(CKnownFile* file)	{m_SentFinishedList.Add(file);}
	CString GetContentType();
d59 3
a61 3
	UINT_PTR h_timer;
	byte	m_byPendingCommand;
	CMMSocket*	m_pPendingCommandSocket;
d66 1
a66 1
	void	WriteFileInfo(CPartFile* selFile, CMMPacket* packet);
d69 1
a69 1
	CListenMMSocket*	m_pSocket;
d81 1
a81 2

#endif //OLD_SOCKETS_ENABLED@


1.12
log
@updated MobileMule up to 0.8a
@
text
@a21 1
#include "CxImage/xImage.h"
@


1.11
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d25 1
a25 1
#define  MMS_BLOCKTIME	600000	
a52 1
	void	PreviewFinished(CxImage** imgFrames, byte nCount);
d64 2
a65 3
#ifdef	DIRECTX_SDK_AVAILABLE
	bool CMMServer::GrabAndWriteFrame(int nMaxWidth, CString strFileName, CMMPacket* packet);
#endif
d75 3
@


1.10
log
@removed MOBILE_MULE and JUMPSTART defines + minor improvements (thx aw3)
@
text
@d53 1
a53 1
	void	PreviewFinished(CxImage** imgFrames, uint8 nCount);
d59 1
a59 1
	uint8	m_byPendingCommand;
d74 1
a74 1
	uint8				m_cPWFailed;
@


1.9
log
@Update to MobileMule 0.7a
@
text
@a0 1
#ifdef MOBILE_MULE
d79 1
a79 2
#endif //OLD_SOCKETS_ENABLED
#endif //MOBILE_MULE@


1.8
log
@MobileMule Update 0.6b (>0.30C) ;-)
@
text
@d51 1
@


1.7
log
@mobileMule update -> 0.6a (>0.30c hey we are ahead of official mule ;-)
@
text
@d56 1
d76 1
@


1.6
log
@mobileMule update -> 0.5a (0.30b)
@
text
@d49 1
@


1.5
log
@mobile mule 29c<>30a changes
@
text
@d22 2
d31 1
a31 1
class CMMServer
d52 1
@


1.4
log
@built in compiler switch for mobileMule
@
text
@a25 1
#define DIRECTX_SDK_AVAILABLE	1
@


1.3
log
@latest mobile mule changes + some additional webserver stuff (see changelog)
@
text
@d1 1
d75 1
@


1.2
log
@Preparing for new sockets
@
text
@d20 1
d25 1
d36 1
d45 4
a49 1
	void	ProcessDownloadRequest(CMMData* data, CMMSocket* sender);
d51 2
d60 3
d66 3
a68 2
	CArray<CPartFile*,CPartFile*> m_SentFileList;
	CArray<CSearchFile*, CSearchFile*> m_SendSearchList;
@


1.1
log
@Purity's changes
@
text
@d25 2
d59 3
a61 1
};@

