head	1.5;
access;
symbols
	PublicRelease_1_2e:1.5
	Interim_Release_1-2e_RC1:1.5
	PublicRelease_1_2d:1.5
	Interim_Release_1-2d_RC1:1.5
	Interim_Release_1-2d_beta1:1.5
	PublicRelease_1_2c:1.5
	Interim_Release_1-2c_RC1:1.5
	Interim_Release_1-2c_beta1:1.5
	PublicRelease_1_2b:1.5
	Interim_Release_1-2b_RC1:1.5
	PublicRelease_1_2a:1.5
	Interim_Release_1-2a_RC1:1.5
	Interim_Release_1-2a_beta2:1.5
	Interim_Release_1-2a_beta1:1.5
	PublicRelease_1_2:1.5
	Interim_Release_1-2_RC1:1.5
	Interim_Release_1-2_beta1:1.5
	PublicRelease_1_1g:1.5
	Interim_Release_1-1g_RC3:1.5
	Interim_Release_1-1g_RC2:1.5
	Interim_Release_1-1g_RC1:1.5
	Interim_Release_1-1g_beta2:1.5
	Interim_Release_1-1g_beta1:1.5
	PublicRelease_1_1f:1.5
	Interim_Release_1-1f_RC1:1.5
	PublicRelease_1_1e:1.5
	Interim_Release_1-1e_RC2:1.5
	Interim_Release_1-1e_RC1:1.5
	Interim_Release_1-1e_beta1:1.5
	PublicRelease_1_1d:1.5
	Interim_Release_1-1d_RC1:1.5
	PublicRelease_1_1c:1.5
	Interim_Release_1-1c_RC1:1.5
	Interim_Release_1-1c_beta2:1.5
	Interim_Release_1-1c_beta1:1.5
	PublicRelease_1_1b:1.5
	Interim_Release_1-1b_RC1:1.5
	PublicRelease_1_1a:1.5
	Interim_Release_1-1a_RC2:1.5
	Interim_Release_1-1a_RC1:1.5
	Interim_Release_1-1a_beta2:1.5
	Interim_Release_1-1a_beta1:1.5
	PublicRelease_1_1:1.5
	Interim_Release_1-1_beta1:1.5
	PublicRelease_1o:1.5
	Interim_Release_1o_RC1:1.5
	Interim_Release_1o_beta1:1.5
	PublicRelease_1n:1.5
	Interim_Release_1n_RC2:1.5
	Interim_Release_1n_RC1:1.5
	Interim_Release_1n_beta2:1.5
	Interim_Release_1n_beta1:1.5
	PublicRelease_1m:1.5
	Interim_Release_1m_beta1:1.5
	PublicRelease_1l:1.5
	Interim_Release_1l_RC3:1.5
	Interim_Release_1l_RC2:1.5
	Interim_Release_1l_RC1:1.5
	Interim_Release_1l_beta2:1.5
	Interim_Release_1l_beta1:1.4;
locks; strict;
comment	@ * @;


1.5
date	2004.05.07.04.56.18;	author aw3;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.27.02.10.38;	author aw3;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.26.06.14.45;	author katsyonak;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.26.02.36.56;	author aw3;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.23.22.14.10;	author katsyonak;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Totally reworked country information feature to minimaze memory usage.
@
text
@// by Superlexx, based on IPFilter by Bouc7
#pragma once
#include "Loggable.h"
#include <atlcoll.h>

// N/A flag/country has zero index
#define NO_COUNTRY_INFO		0

class CIP2Country : public CLoggable
{
public:
	CIP2Country(void);
	~CIP2Country(void);

	void	Load(bool bReset = true);
	void	Unload(bool bReset = true);

	//refresh passive windows
	void	Refresh();

	bool	IsIP2Country() const			{return m_bEnableIP2Country;}
	bool	ShowCountryFlag() const			{return m_bEnableCountryFlag;}

	CString	GetCountryNameByIndex(uint16 uCountryIndex);

	uint16	CIP2Country::GetCountryFromIP(uint32 dwClientIP);

	CImageList *GetFlagImageList()			{return &m_lstCountryFlagImage;}

private:
	struct IPRange_Struct
	{
		uint32		dwIPend;
		uint16		uIndex;
	};
//	Reset ip2country reference
	void	Reset();

	CImageList	m_lstCountryFlagImage;

	bool	m_bEnableIP2Country;
	bool	m_bEnableCountryFlag;
	CRBMap<uint32, IPRange_Struct> m_rbmapIpList;
	CArray<CString> m_astrCountryName;
};
@


1.4
log
@Corrected updating of Country information if option was disabled on start;
Removed some unreqired class members; Some methods became private;
Better memory assumption for image list.
@
text
@d3 1
a3 1
#include "loggable.h"
d6 2
a7 9
struct IPRange_Struct2
{
	uint32          IPstart;
	uint32          IPend;
	CString			ShortCountryName;
	CString			LongCountryName;
	WORD			FlagIndex;
	~IPRange_Struct2() {  }
};
d9 1
a9 1
class CIP2Country: public CLoggable
d11 3
a13 6
	public:
		CIP2Country(void);
		~CIP2Country(void);
		
		void	Load(bool bReset = true);
		void	Unload(bool bReset = true);
d15 2
a16 2
		//reset ip2country referense
		void	Reset();
d18 2
a19 2
		//refresh passive windows
		void	Refresh();
d21 2
a22 2
		bool	IsIP2Country() const			{return EnableIP2Country;}
		bool	ShowCountryFlag();
d24 1
a24 1
		IPRange_Struct2*	GetDefaultIP2Country() {return &defaultIP2Country;}
d26 1
a26 1
		IPRange_Struct2*	GetCountryFromIP(uint32 IP);
d28 1
a28 1
		CImageList* GetFlagImageList()			{return &m_lstCountryFlagImage;}
d31 14
a44 14
		bool	LoadFromFile();
		bool	LoadCountryFlagLib();
		void	RemoveAllIPs();
		void	RemoveAllFlags();
		bool	AddIPRange(uint32 IPfrom, uint32 IPto, CString &strShortCountryName, CString &strLongCountryName);

		CImageList	m_lstCountryFlagImage;

		bool	EnableIP2Country;
		bool	EnableCountryFlag;
		struct	IPRange_Struct2 defaultIP2Country;

		CRBMap<uint32, IPRange_Struct2*> iplist;
		CRBMap<CString, uint16>	CountryIDtoFlagIndex;
@


1.3
log
@no longer loading mid size names + some small changes
@
text
@d22 2
a23 2
		void	Load();
		void	Unload();
d31 1
a31 1
		bool	IsIP2Country()			{return EnableIP2Country;}
d36 5
a44 1

d47 1
a47 11
		IPRange_Struct2*	GetCountryFromIP(uint32 IP);
		WORD	GetFlagResIDfromCountryCode(CString shortCountryName);

		CImageList* GetFlagImageList() {return &CountryFlagImageList;}
	private:

		//check is program current running, if it's under init or shutdown, set to false
		bool	m_bRunning;

		HINSTANCE _hCountryFlagDll;
		CImageList	CountryFlagImageList;
@


1.2
log
@Fix not to load country resources if option is disabled by katsyonak;
Corrected supremely awful way of table declarations;
Improved string processing.
@
text
@a10 1
	CString			MidCountryName;
d41 1
a41 1
		bool	AddIPRange(uint32 IPfrom, uint32 IPto, CString &strShortCountryName, CString &strMidCountryName, CString &strLongCountryName);
@


1.1
log
@added IP to Country from MorphXT (Please extract ip-to-country.rar in your config dir in order for this to work)
@
text
@d42 1
a42 1
		bool	AddIPRange(uint32 IPfrom,uint32 IPto, CString shortCountryName, CString midCountryName, CString longCountryName);
@

