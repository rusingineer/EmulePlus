head	1.36;
access;
symbols
	PublicRelease_1_2e:1.36
	Interim_Release_1-2e_RC1:1.36
	PublicRelease_1_2d:1.35
	Interim_Release_1-2d_RC1:1.34
	Interim_Release_1-2d_beta1:1.33
	PublicRelease_1_2c:1.32
	Interim_Release_1-2c_RC1:1.32
	Interim_Release_1-2c_beta1:1.31
	PublicRelease_1_2b:1.31
	Interim_Release_1-2b_RC1:1.31
	PublicRelease_1_2a:1.30
	Interim_Release_1-2a_RC1:1.30
	Interim_Release_1-2a_beta2:1.30
	Interim_Release_1-2a_beta1:1.30
	PublicRelease_1_2:1.29
	Interim_Release_1-2_RC1:1.29
	Interim_Release_1-2_beta1:1.29
	PublicRelease_1_1g:1.29
	Interim_Release_1-1g_RC3:1.29
	Interim_Release_1-1g_RC2:1.29
	Interim_Release_1-1g_RC1:1.29
	Interim_Release_1-1g_beta2:1.28
	Interim_Release_1-1g_beta1:1.28
	PublicRelease_1_1f:1.28
	Interim_Release_1-1f_RC1:1.28
	PublicRelease_1_1e:1.28
	Interim_Release_1-1e_RC2:1.28
	Interim_Release_1-1e_RC1:1.28
	Interim_Release_1-1e_beta1:1.28
	PublicRelease_1_1d:1.27
	Interim_Release_1-1d_RC1:1.27
	PublicRelease_1_1c:1.27
	Interim_Release_1-1c_RC1:1.27
	Interim_Release_1-1c_beta2:1.27
	Interim_Release_1-1c_beta1:1.27
	PublicRelease_1_1b:1.26
	Interim_Release_1-1b_RC1:1.26
	PublicRelease_1_1a:1.26
	Interim_Release_1-1a_RC2:1.26
	Interim_Release_1-1a_RC1:1.25
	Interim_Release_1-1a_beta2:1.25
	Interim_Release_1-1a_beta1:1.25
	PublicRelease_1_1:1.25
	Interim_Release_1-1_beta1:1.25
	PublicRelease_1o:1.24
	Interim_Release_1o_RC1:1.24
	Interim_Release_1o_beta1:1.24
	PublicRelease_1n:1.24
	Interim_Release_1n_RC2:1.24
	Interim_Release_1n_RC1:1.24
	Interim_Release_1n_beta2:1.24
	Interim_Release_1n_beta1:1.23
	PublicRelease_1m:1.23
	Interim_Release_1m_beta1:1.23
	PublicRelease_1l:1.22
	Interim_Release_1l_RC3:1.22
	Interim_Release_1l_RC2:1.22
	Interim_Release_1l_RC1:1.22
	Interim_Release_1l_beta2:1.21
	Interim_Release_1l_beta1:1.21
	PublicRelease_1k:1.19
	Interim_Release_1k_RC4:1.19
	Interim_1k_RC3:1.19
	Interim_1k_RC2:1.19
	Interim_Release_1k_RC1:1.19
	Interim_Release_1k_beta5:1.19
	Intrerim_Release_1k_beta4:1.19
	Interim_Release_1k_beta1:1.19
	PublicRelease_1j:1.18
	Interim_Release_1J_RC3:1.18
	Interim_Release_1j_RC3:1.18
	Interim_Release_1j_RC2:1.18
	Interim_Release_1j_RC1:1.18
	Interim_Release_1j_beta2:1.18
	Interim_Release_1j_beta1:1.18
	PublicRelease_1i:1.18
	Interim_Release_1i_RC6:1.18
	Interim_Release_1i_RC3:1.18
	Interim_Release_1i_RC2:1.18
	Interim_Release_1i_RC1:1.18
	Interim_Release_1i_beta3:1.17
	Interim_Release_1i_beta2:1.17
	Interim_Release_1i_beta1:1.17
	PublicRelease_1h:1.13
	Interim_Release_1h_rc2:1.13
	Interim_Release_1h_RC1:1.13
	Interim_Release_1h_beta2:1.13
	Interim_Release_1h_beta1_now:1.12
	Interim_Release_1h_beta1:1.12
	PublicRelease_1g:1.11
	Interim_Release_1g_RC6_Final:1.11
	Interim_Release_1g_RC6:1.11
	Interim_Release_1g_RC5:1.11
	Interim_Release_1g_RC4:1.10
	Interim_Release_1g_RC3:1.9
	Interim_Release_1g_beta2:1.7
	Interim_Release_1g_beta1:1.7
	Interim_Release_1f_RC4:1.7
	Interim_Release_1f_RC3:1.7
	Interim_Release_1f_RC2:1.7
	Interim_Release_1f_RC:1.7
	Interim_Release_1f_beta2:1.7
	Interim_Release_1f_beta1:1.7
	PublicRelease_1e:1.7
	Interim_Release_1e_RC2:1.7
	Interim_Release_1e_RC:1.7
	Interim_Release_1e_beta3:1.6
	Interim_Release_1e_beta2:1.6
	Interim_Release_1e_beta2_before_kuchin:1.6
	Interim_Release_1e_beta1:1.6
	PublicRelease_1c:1.6
	featurestest:1.6.0.6
	Interim_Release_1c_RC:1.6
	Interim_Release_1c_beta2:1.6
	Interim_Release_1c_beta1:1.6
	threaded_downloadqueue:1.6.0.4
	PublicRelease_1b:1.6
	Interim_Release_1b_beta2:1.6
	Interim_Release_1b_beta1:1.6
	proxydeadlake:1.6.0.2
	PublicRelease_1a:1.6
	Interim_Release_1a_beta2:1.6
	BerkeleyDb:1.5.0.2
	Interim_Release_1a_beta1:1.5
	PublicRelease_1:1.5
	goldfish:1.5
	eMulePlus_1_RC2:1.5
	eMulePlus_26b_1RC1:1.4
	PreRelease_26b_i0e:1.4
	before_26d_merge:1.4
	Interim_Release_26b_i0d:1.3
	Interim_Release_26b_i0c:1.3
	Interim_Release_26b_i0b:1.3
	Interim_Release_26b_i0a:1.3
	systraydlg:1.3.0.4
	plus26based:1.3.0.2
	Interim_Release_25b_i0b:1.3
	Proxy_Dev:1.2
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.36
date	2008.11.03.05.45.23;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2008.04.30.05.03.16;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2008.02.25.04.54.52;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2007.12.30.06.10.44;	author aw3;	state Exp;
branches;
next	1.32;

1.32
date	2007.04.02.23.14.14;	author kush_eplus;	state Exp;
branches;
next	1.31;

1.31
date	2006.11.29.13.31.50;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2006.04.15.22.53.55;	author aw3;	state Exp;
branches;
next	1.29;

1.29
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.28;

1.28
date	2005.06.06.04.32.27;	author aw3;	state Exp;
branches;
next	1.27;

1.27
date	2005.01.16.00.34.59;	author netwolf1;	state Exp;
branches;
next	1.26;

1.26
date	2004.12.03.20.38.17;	author aw3;	state Exp;
branches;
next	1.25;

1.25
date	2004.10.14.05.19.25;	author aw3;	state Exp;
branches;
next	1.24;

1.24
date	2004.07.20.22.34.38;	author aw3;	state Exp;
branches;
next	1.23;

1.23
date	2004.06.18.17.08.23;	author aw3;	state Exp;
branches;
next	1.22;

1.22
date	2004.05.24.11.40.21;	author netwolf1;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.16.08.37.01;	author dongato;	state Exp;
branches;
next	1.20;

1.20
date	2004.04.15.17.10.48;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.19.20.42.29;	author naboleo;	state Exp;
branches;
next	1.18;

1.18
date	2003.11.02.12.38.12;	author dongato;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.02.11.08.27;	author dongato;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.22.16.39.11;	author morevit;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.22.00.17.22;	author morevit;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.20.15.39.31;	author morevit;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.23.00.20.50;	author forcha;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.28.13.25.33;	author dongato;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.11.00.57.27;	author dongato;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.06.16.50.48;	author partyckip;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.22.19.33.23;	author eklmn;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.15.09.10.05;	author partyckip;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.26.19.46.44;	author lord_kiron;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.26.21.12.32;	author cax2;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2003.02.20.07.25.21;	author cax2;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2003.02.16.22.01.48;	author lord_kiron;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.02.13.27.42;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.02.03.39.55;	author cax2;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.21;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.20;	author cax2;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.02.02.02.36.27;	author cax2;	state Exp;
branches;
next	;

1.5.2.1
date	2003.02.28.22.44.55;	author obaldin;	state Exp;
branches;
next	;

1.6.6.1
date	2003.03.23.06.22.02;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Reduced H-file dependency.
@
text
@//this file is part of eMule
//Copyright (C)2002-2007 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "PPgDirectories.h"
#include "SharedFileList.h"
#include "AddBuddy.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNAMIC(CPPgDirectories, CPropertyPage)
CPPgDirectories::CPPgDirectories()
	: CPropertyPage(CPPgDirectories::IDD)
	, m_bVideoBackup(FALSE)
	, m_bSmallBlocks(FALSE)
{
	m_bSharedDirsModified = false;
}

CPPgDirectories::~CPPgDirectories()
{
}

void CPPgDirectories::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_SHARESELECTOR, m_ShareSelector);
	DDX_Control(pDX, IDC_TEMPSELECTOR, m_TempSelector);
	DDX_Text(pDX, IDC_INCFILES, m_strIncomingDir);
	DDX_Text(pDX, IDC_TEMPFILES, m_strMainTempDir);
	DDX_Text(pDX, IDC_VLC, m_strPlayer);
	DDX_Text(pDX, IDC_VIDEO_PARAMS, m_strPlayerArgs);
	DDX_Check(pDX, IDC_VIDEOBACKUP, m_bVideoBackup);
	DDX_Check(pDX, IDC_PREVIEW_SMALL, m_bSmallBlocks);
}

BEGIN_MESSAGE_MAP(CPPgDirectories, CPropertyPage)
	ON_EN_CHANGE(IDC_INCFILES, OnEnChange)
	ON_EN_CHANGE(IDC_TEMPFILES, OnEnChange)
	ON_EN_CHANGE(IDC_VLC, OnEnChange)
	ON_EN_CHANGE(IDC_VIDEO_PARAMS, OnEnChange)
	ON_BN_CLICKED(IDC_SELINCDIR, OnBnClickedSelincdir)
	ON_BN_CLICKED(IDC_SELTEMPDIR, OnBnClickedSeltempdir)
	ON_BN_CLICKED(IDC_SELVLC, OnBnClickedSelvlc)
	ON_BN_CLICKED(IDC_VIDEOBACKUP, OnBnClickedBackupPreview)
	ON_BN_CLICKED(IDC_PREVIEW_SMALL, OnEnChange)
END_MESSAGE_MAP()

BOOL CPPgDirectories::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	CWnd	*pWnd;

	pWnd = GetDlgItem(IDC_INCFILES);
	(reinterpret_cast<CEdit*>(pWnd))->SetLimitText(MAX_PATH);
	AddBuddy(pWnd->m_hWnd, ::GetDlgItem(m_hWnd, IDC_SELINCDIR), BDS_RIGHT);

	pWnd = GetDlgItem(IDC_TEMPFILES);
	(reinterpret_cast<CEdit*>(pWnd))->SetLimitText(MAX_PATH);
	AddBuddy(pWnd->m_hWnd, ::GetDlgItem(m_hWnd, IDC_SELTEMPDIR), BDS_RIGHT);

	pWnd = GetDlgItem(IDC_VLC);
	(reinterpret_cast<CEdit*>(pWnd))->SetLimitText(MAX_PATH);
	AddBuddy(pWnd->m_hWnd, ::GetDlgItem(m_hWnd, IDC_SELVLC), BDS_RIGHT);

	LoadSettings();
	Localize();

	return TRUE;
}

void CPPgDirectories::LoadSettings(void)
{
	m_strIncomingDir = m_pPrefs->GetIncomingDir();
	m_strMainTempDir = m_pPrefs->GetTempDir();
	m_strPlayer = m_pPrefs->GetVideoPlayer();
	m_strPlayerArgs = m_pPrefs->GetVideoPlayerArgs();

	m_ShareSelector.m_lstShared.RemoveAll();
	m_pPrefs->SharedDirListCopy(&m_ShareSelector.m_lstShared);
	m_ShareSelector.Init();

	m_TempSelector.m_lstShared.RemoveAll();
	m_pPrefs->TempDirListCopy(&m_TempSelector.m_lstShared);
	m_TempSelector.Init(false);	// disable CD-ROM drives as temp. location

	m_bVideoBackup = m_pPrefs->BackupPreview();
	m_bSmallBlocks = m_pPrefs->GetPreviewSmallBlocks();

	UpdateData(FALSE);
	OnBnClickedBackupPreview();
	SetModified(FALSE);
}

BOOL CPPgDirectories::SelectDir(const TCHAR* indir, TCHAR* outdir, const CString& titletext)
{
	CoInitialize(0);
	TCHAR buffer[MAX_PATH];
	BROWSEINFO bi = { GetSafeHwnd(), 0, buffer, titletext, BIF_VALIDATE | BIF_NEWDIALOGSTYLE | BIF_RETURNONLYFSDIRS, BrowseCallbackProc, (LPARAM)indir, 0 };
	LPITEMIDLIST pidl = SHBrowseForFolder(&bi);
	BOOL bDone = SHGetPathFromIDList(pidl, outdir);
	LPMALLOC ppMalloc;
	if(SHGetMalloc(&ppMalloc) == NOERROR)
	{
		ppMalloc->Free(pidl);
		ppMalloc->Release();
	}
	CoUninitialize();
	return bDone;
}

void CPPgDirectories::OnBnClickedSelincdir()
{
	TCHAR buffer[MAX_PATH];

	UpdateData(TRUE);
	if(SelectDir(m_strIncomingDir, buffer, GetResString(IDS_SELECT_INCOMINGDIR)))
	{
		m_strIncomingDir = buffer;

		UpdateData(FALSE);
		SetModified();
	}
}

void CPPgDirectories::OnBnClickedSeltempdir()
{
	TCHAR buffer[MAX_PATH];

	UpdateData(TRUE);
	if(SelectDir(m_strMainTempDir, buffer, GetResString(IDS_SELECT_TEMPDIR)))
	{
		m_strMainTempDir = buffer;

		UpdateData(FALSE);
		SetModified();
	}
}

void CPPgDirectories::OnBnClickedSelvlc()
{
	CFileDialog dlgFile(TRUE, _T("*.exe"), NULL, OFN_FILEMUSTEXIST | OFN_NOREADONLYRETURN, _T("Program (*.exe)|*.exe||"));

	dlgFile.m_pOFN->lpstrInitialDir = GetPathToFile(m_pPrefs->GetVideoPlayer());
	if (dlgFile.DoModal() == IDOK)
	{
		UpdateData(TRUE);

		m_strPlayer = dlgFile.GetPathName();

		UpdateData(FALSE);
		SetModified();
	}
}

BOOL CPPgDirectories::OnApply()
{
	if(m_bModified)
	{
		UpdateData(TRUE);

		if (!m_strIncomingDir.IsEmpty())
			m_pPrefs->SetIncomingDir(m_strIncomingDir);

		if (!m_strMainTempDir.IsEmpty())
			m_pPrefs->SetTempDir(m_strMainTempDir);

		m_pPrefs->SetVideoPlayer(m_strPlayer);
		m_pPrefs->SetVideoPlayerArgs(m_strPlayerArgs);
		m_pPrefs->SetBackupPreview(B2b(m_bVideoBackup));
		m_pPrefs->SetPreviewSmallBlocks(B2b(m_bSmallBlocks));

		if (m_bSharedDirsModified)
		{
			POSITION pos, pos1;

			for (pos = m_ShareSelector.m_lstShared.GetHeadPosition(); (pos1 = pos) != NULL;)
			{
				if (!m_pPrefs->IsShareableDirectory(m_ShareSelector.m_lstShared.GetNext(pos)))
					m_ShareSelector.m_lstShared.RemoveAt(pos1);
			}
			m_pPrefs->SharedDirListRefill(&m_ShareSelector.m_lstShared);
			g_App.m_pSharedFilesList->Reload();
		//	Required to update file colors as file attributes can change
			g_App.m_pMDlg->m_dlgSearch.m_ctlSearchList.Invalidate();
		}

	//	Remove main temporary directory from the list if user added it
		POSITION pos, pos1;
		CString	strMainTemp = m_pPrefs->GetTempDir();

		strMainTemp += _T('\\');

		for (pos = m_TempSelector.m_lstShared.GetHeadPosition(); (pos1 = pos) != NULL;)
		{
			if (m_TempSelector.m_lstShared.GetNext(pos).CompareNoCase(strMainTemp) == 0)
			{
				m_TempSelector.m_lstShared.RemoveAt(pos1);
				break;
			}
		}
		m_pPrefs->TempDirListRefill(&m_TempSelector.m_lstShared);

		SetModified(FALSE);
		m_bSharedDirsModified = false;
	}
	return CPropertyPage::OnApply();
}

BOOL CPPgDirectories::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if(wParam == DIRLIST_ITEMSTATECHANGED)
	{
		if(lParam == (long)m_ShareSelector.m_hWnd)
			CheckSharedChanges();
		else if(lParam == (long)m_TempSelector.m_hWnd)
			CheckTempChanges();
	}
	return CPropertyPage::OnCommand(wParam, lParam);
}

void CPPgDirectories::Localize(void)
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_INCOMING_LBL, IDS_PW_INCOMING },
		{ IDC_TEMP_LBL, IDS_PW_TEMP },
		{ IDC_VLC_LBL, IDS_PW_VLC },
		{ IDC_SHARED_LBL, IDS_PW_SHARED },
		{ IDC_TEMPDIR_LBL, IDS_PW_TEMPDIR },
		{ IDC_VIDEOBACKUP, IDS_VIDEOBACKUP },
		{ IDC_PREVIEW_SMALL, IDS_PREVIEW_SMALL },
		{ IDC_VIDEO_PARAM_LBL, IDS_AV_PARAMS }
	};

	if (::IsWindow(m_hWnd))
	{
		CString	strRes;

		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl[i][1]));
			SetDlgItemText(s_auResTbl[i][0], strRes);
		}
	}
}

void CPPgDirectories::CheckSharedChanges(void)
{
	if (m_pPrefs->SharedDirListCmp(&m_ShareSelector.m_lstShared))
	{
		SetModified();
		m_bSharedDirsModified = true;
	}
}

void CPPgDirectories::CheckTempChanges(void)
{
	if (m_pPrefs->TempDirListCmp(&m_TempSelector.m_lstShared))
		SetModified();
}

void CPPgDirectories::OnBnClickedBackupPreview()
{
	UpdateData(TRUE);
	GetDlgItem(IDC_PREVIEW_SMALL)->EnableWindow(!m_bVideoBackup);
	SetModified();
}
@


1.35
log
@Fixed applying of some preferences settings when several are altered at once {Vladimir (SV)}.
@
text
@d21 1
@


1.34
log
@Added Video Player parameters {glaskrug/Lastwebpage}.
@
text
@d134 2
d139 1
d148 2
d153 1
d162 1
a163 1

d166 2
d169 1
@


1.33
log
@Removed old not used localization;
Optimized dialog regarding required memory and speed;
Player small block configuration now is active only when backup preview is disabled to represent internal logic;
Suppressed compiler warnings; Formatting.
@
text
@d50 1
d59 1
d96 1
d179 1
d242 2
a243 1
		{ IDC_PREVIEW_SMALL, IDS_PREVIEW_SMALL }
@


1.32
log
@Removed unneeded CString initializations.
@
text
@d1 2
a2 1
// PPgDirectories.cpp : implementation file
d4 13
a22 1

a28 2
// CPPgDirectories dialog

d32 2
a33 2
	, videoBackup(FALSE)
	, smallBlocks(FALSE)
d47 5
a51 18
	DDX_Text(pDX, IDC_INCFILES, incFiles);
	DDX_Text(pDX, IDC_TEMPFILES, tempFiles);
	DDX_Text(pDX, IDC_VLC, vlc);
	DDX_Check(pDX, IDC_VIDEOBACKUP, videoBackup);
	DDX_Check(pDX, IDC_PREVIEW_SMALL, smallBlocks);
	DDX_Control(pDX, IDC_INCFILES, incFilesEdit);
	DDX_Control(pDX, IDC_TEMPFILES, tempFilesEdit);
	DDX_Control(pDX, IDC_VLC, vlcEdit);
	DDX_Text(pDX, IDC_INCOMING_LBL, incomingDesc);
	DDX_Text(pDX, IDC_TEMP_LBL, tempDesc);
	DDX_Text(pDX, IDC_VLC_LBL, vlcDesc);
	DDX_Text(pDX, IDC_SHARED_LBL, sharedDesc);
	DDX_Text(pDX, IDC_TEMPDIR_LBL, tempDirDesc);
	DDX_Control(pDX, IDC_VIDEOBACKUP, videoBackupCheck);
	DDX_Control(pDX, IDC_PREVIEW_SMALL, smallBlocksCheck);
	DDX_Control(pDX, IDC_SELINCDIR, selIncDirButton);
	DDX_Control(pDX, IDC_SELTEMPDIR, selTempDirButton);
	DDX_Control(pDX, IDC_SELVLC, selVlcButton);
d61 1
a61 1
	ON_BN_CLICKED(IDC_VIDEOBACKUP, OnEnChange)
d69 13
a81 7
	incFilesEdit.SetLimitText(MAX_PATH);
	tempFilesEdit.SetLimitText(MAX_PATH);
	vlcEdit.SetLimitText(MAX_PATH);
	
	AddBuddy(incFilesEdit.m_hWnd, selIncDirButton.m_hWnd, BDS_RIGHT);
	AddBuddy(tempFilesEdit.m_hWnd, selTempDirButton.m_hWnd, BDS_RIGHT);
	AddBuddy(vlcEdit.m_hWnd, selVlcButton.m_hWnd, BDS_RIGHT);
d91 3
a93 3
	incFiles = m_pPrefs->GetIncomingDir();
	tempFiles = m_pPrefs->GetTempDir();
	vlc = m_pPrefs->GetVideoPlayer();
d103 3
a105 2
	videoBackup = m_pPrefs->BackupPreview();
	smallBlocks = m_pPrefs->GetPreviewSmallBlocks();
d107 1
d111 1
a111 1
bool CPPgDirectories::SelectDir(const TCHAR* indir, TCHAR* outdir, const CString& titletext)
d113 1
a113 1
	CoInitialize(0);	
d115 3
a117 3
	BROWSEINFO bi = { GetSafeHwnd(), 0, buffer, titletext, BIF_VALIDATE | BIF_NEWDIALOGSTYLE | BIF_RETURNONLYFSDIRS, BrowseCallbackProc, (LPARAM)indir, 0};
	LPITEMIDLIST pidl = SHBrowseForFolder(&bi);	
	bool done = SHGetPathFromIDList(pidl,outdir);
d125 1
a125 1
	return done;
d131 3
a133 2
	if(SelectDir(incFiles, buffer, GetResString(IDS_SELECT_INCOMINGDIR))) {
		incFiles = buffer;
d142 3
a144 2
	if(SelectDir(tempFiles, buffer, GetResString(IDS_SELECT_TEMPDIR))) {
		tempFiles = buffer;
d152 1
a152 1
	CFileDialog dlgFile(TRUE, _T("*.exe"), NULL,OFN_FILEMUSTEXIST | OFN_NOREADONLYRETURN ,_T("Program (*.exe)|*.exe||"));
d154 4
a157 3
	
	if (dlgFile.DoModal() == IDOK) {
		vlc = dlgFile.GetPathName();
d169 2
a170 2
		if (!incFiles.IsEmpty())
			m_pPrefs->SetIncomingDir(incFiles);
d172 2
a173 2
		if (!tempFiles.IsEmpty())
			m_pPrefs->SetTempDir(tempFiles);
d175 3
a177 3
		m_pPrefs->SetVideoPlayer(vlc);
		m_pPrefs->SetBackupPreview(videoBackup);
		m_pPrefs->SetPreviewSmallBlocks(smallBlocks);
d181 1
a181 1
			POSITION pos, pos1;	
d183 1
a183 1
			for (pos = m_ShareSelector.m_lstShared.GetHeadPosition(); (pos1 = pos) != NULL; )
d200 1
a200 1
		for (pos = m_TempSelector.m_lstShared.GetHeadPosition(); (pos1 = pos) != NULL; )
d230 1
a230 1
	if(::IsWindow(m_hWnd))
d232 8
a239 1
		SetWindowText(GetResString(IDS_PW_DIR));
d241 3
a243 7
		GetResString(&incomingDesc, IDS_PW_INCOMING);
		GetResString(&tempDesc, IDS_PW_TEMP);
		GetResString(&vlcDesc, IDS_PW_VLC);
		GetResString(&sharedDesc, IDS_PW_SHARED);
		GetResString(&tempDirDesc, IDS_PW_TEMPDIR);
		videoBackupCheck.SetWindowText(GetResString(IDS_VIDEOBACKUP));
		smallBlocksCheck.SetWindowText(GetResString(IDS_PREVIEW_SMALL));
d245 5
a249 1
		UpdateData(FALSE);
d267 7
@


1.31
log
@Unified way to preselect default folder for select dialog.
@
text
@a20 3
	, incFiles(_T(""))
	, tempFiles(_T(""))
	, vlc(_T(""))
a22 5
	, incomingDesc(_T(""))
	, tempDesc(_T(""))
	, vlcDesc(_T(""))
	, sharedDesc(_T(""))
	, tempDirDesc(_T(""))
@


1.30
log
@Corrected search and download list redraw after color related settings change in preferences {Fuxie - DK}.
@
text
@a112 10
int CPPgDirectories::BrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData)
{
	if (uMsg == BFFM_INITIALIZED)
	{
		::SendMessage(hwnd, BFFM_SETSELECTION, TRUE, lpData);
	}

	return 0;
}

@


1.29
log
@renamed 3 variables
@
text
@a178 1
		{
a179 1
		}
a181 1
		{
a182 1
		}
d199 2
@


1.28
log
@Removed locking of Reload button.
@
text
@d202 1
a202 1
			g_eMuleApp.m_pSharedFilesList->Reload();
@


1.27
log
@Add sources possibly received from global search (official).
Added missing translations in case countryflag.dll / ip-to-country.cvs is not found.
Notifier informs if a new version is available (not annoying, but still more likely
 to be noticed than just a log line).
Added 'Folder' column to Shared files window.
Prevent adding install/working dirs (\Webserver, \Db...) to Shared files.
+ some other minor changes/fixes.
@
text
@a198 1
				{
a199 1
				}
a201 1
			g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.GetDlgItem(IDC_RELOADSHAREDFILES)->EnableWindow(false);
@


1.26
log
@Avoid shared directories reloading after change of other preferences settings.
@
text
@d194 9
@


1.25
log
@Fixed temporary directory list processing (double list entries which could be caused
by case sensitive compares; remove incorrect entries from the list; don't allow
main temp dir to be added to the list).
@
text
@d32 1
d177 1
a177 1
		
d180 1
a180 1
			m_pPrefs->SetIncomingDir(incFiles);			
d182 1
a182 1
		
d185 1
a185 1
			m_pPrefs->SetTempDir(tempFiles);			
d187 2
a188 2
				
		m_pPrefs->SetVideoPlayer(vlc);		
d191 8
a198 5
	
		m_pPrefs->SharedDirListRefill(&m_ShareSelector.m_lstShared);
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.GetDlgItem(IDC_RELOADSHAREDFILES)->EnableWindow(false);
		g_eMuleApp.m_pSharedFilesList->Reload();
		
d214 1
a214 1
	
d216 1
d254 1
d256 2
@


1.24
log
@Fixed double initialization of preferences directory tree controls;
Removed waiting cursor, because dialog startup time is significantly reduced.
@
text
@d102 4
a105 1
	m_TempSelector.SetSharedDirectories(&m_pPrefs->m_tempDirList);
d195 15
a209 2
		m_pPrefs->m_tempDirList.RemoveAll();
		m_TempSelector.GetSharedDirectories(&m_pPrefs->m_tempDirList);
a248 1
	{
a249 1
	}			
d254 1
a254 17
	CStringList lstTemp;
	m_TempSelector.GetSharedDirectories(&lstTemp);
	
	if(lstTemp.GetCount() == m_pPrefs->m_tempDirList.GetCount())
	{	
		POSITION pos1 = lstTemp.GetHeadPosition();
		POSITION pos2 = m_pPrefs->m_tempDirList.GetHeadPosition();
		for(int i = 0; i < lstTemp.GetCount(); i++)
		{	
			if(lstTemp.GetNext(pos1) != m_pPrefs->m_tempDirList.GetNext(pos2))
			{
				SetModified();
				i = lstTemp.GetCount();
			}
		}
	}			
	else
@


1.23
log
@Improved preferences localization.
@
text
@a31 1
	
d42 1
a42 1
	DDX_Control(pDX, IDC_TEMPSELECTOR, m_TempSelector);	// added by InterCeptor (multiple tempdirs) 19.11.02
a75 3
//	Initialization of that dialog may take a while
	CWaitCursor curWait;
	
a76 2
	m_ShareSelector.Init();	
	m_TempSelector.Init();	// InterCeptor (multiple tempdirs)
d203 1
a203 1
	{	
@


1.22
log
@Minor cosmetic change.
@
text
@d224 5
a228 5
		incomingDesc = GetResString(IDS_PW_INCOMING);
		tempDesc = GetResString(IDS_PW_TEMP);
		vlcDesc = GetResString(IDS_PW_VLC);
		sharedDesc = GetResString(IDS_PW_SHARED);
		tempDirDesc = GetResString(IDS_PW_TEMPDIR);
@


1.21
log
@Reload button now is disabled whenever there are files to be hashed
@
text
@d77 3
@


1.20
log
@Fixed shared directory list corruption caused by asynchronous access (bug #502);
Fixed shared directory list processing to eliminate double list entries (that can be caused by case sensitive compares, by the bug on file completion after file destination change, or by initial shareddir.dat values);
Removed useless reloadings of the lists.
@
text
@d192 1
@


1.19
log
@Res' patch for selecting the currently set temp resp. incoming directory in the browser dialog
@
text
@d100 6
a105 2
	m_ShareSelector.SetSharedDirectories(&m_pPrefs->m_sharedDirList);
	m_TempSelector.SetSharedDirectories(&m_pPrefs->m_tempDirList);	// InterCeptor (multiple tempdirs)
d109 1
a109 1
	SetModified(FALSE);	// FoRcHa
d112 1
a112 1
int CPPgDirectories::BrowseCallbackProc (HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData)
d114 4
a117 6
  switch (uMsg)
  {
    case BFFM_INITIALIZED:
      ::SendMessage (hwnd, BFFM_SETSELECTION, TRUE, lpData);
      break;
  }
d119 1
a119 1
  return 0;
a176 3
		m_pPrefs->LoadSharedDirs();
		m_pPrefs->LoadTempDirs();

d191 1
a191 2
		m_pPrefs->m_sharedDirList.RemoveAll();
		m_ShareSelector.GetSharedDirectories(&m_pPrefs->m_sharedDirList);
a193 1
		// InterCeptor (multiple tempdirs)
d234 3
a236 15
	CStringList lstShared;
	m_ShareSelector.GetSharedDirectories(&lstShared);
	
	if(lstShared.GetCount() == m_pPrefs->m_sharedDirList.GetCount())
	{	
		POSITION pos1 = lstShared.GetHeadPosition();
		POSITION pos2 = m_pPrefs->m_sharedDirList.GetHeadPosition();
		for(int i = 0; i < lstShared.GetCount(); i++)
		{	
			if(lstShared.GetNext(pos1) != m_pPrefs->m_sharedDirList.GetNext(pos2))
			{
				SetModified();
				i = lstShared.GetCount();
			}
		}
a237 2
	else
		SetModified();
@


1.18
log
@Various fixes for Interim beta2 reported bugs
@
text
@d108 13
a120 1
bool CPPgDirectories::SelectDir(TCHAR* outdir, const CString& titletext)
d124 1
a124 1
	BROWSEINFO bi = { GetSafeHwnd(), 0, buffer, titletext, BIF_VALIDATE | BIF_NEWDIALOGSTYLE | BIF_RETURNONLYFSDIRS, 0, 0, 0};
d140 1
a140 1
	if(SelectDir(buffer,GetResString(IDS_SELECT_INCOMINGDIR))) {
d150 1
a150 1
	if(SelectDir(buffer,GetResString(IDS_SELECT_TEMPDIR))) {
@


1.17
log
@Official code merge (katsyonak)
@
text
@d163 5
a167 1
		if (!incFiles.IsEmpty()) {
d171 2
a172 1
		if (!tempFiles.IsEmpty()) {
@


1.16
log
@Formatting, comments, and name changes.
@
text
@d25 1
d48 1
d58 1
d72 1
d103 1
d173 1
d212 1
@


1.15
log
@A little more method factoring, a few name changes, no (intended) logic changes.
@
text
@d93 6
a98 6
	incFiles = app_prefs->GetIncomingDir();
	tempFiles = app_prefs->GetTempDir();
	vlc = app_prefs->GetVideoPlayer();
	m_ShareSelector.SetSharedDirectories(&app_prefs->m_sharedDirList);
	m_TempSelector.SetSharedDirectories(&app_prefs->m_tempDirList);	// InterCeptor (multiple tempdirs)
	videoBackup = app_prefs->BackupPreview();
d143 1
a143 1
	dlgFile.m_pOFN->lpstrInitialDir = GetPathToFile(app_prefs->GetVideoPlayer());
d159 1
a159 1
			app_prefs->SetIncomingDir(incFiles);			
d163 1
a163 1
			app_prefs->SetTempDir(tempFiles);			
d166 2
a167 2
		app_prefs->SetVideoPlayer(vlc);		
		app_prefs->SetBackupPreview(videoBackup);
d169 2
a170 2
		app_prefs->m_sharedDirList.RemoveAll();
		m_ShareSelector.GetSharedDirectories(&app_prefs->m_sharedDirList);
d174 2
a175 2
		app_prefs->m_tempDirList.RemoveAll();
		m_TempSelector.GetSharedDirectories(&app_prefs->m_tempDirList);
d216 1
a216 1
	if(lstShared.GetCount() == app_prefs->m_sharedDirList.GetCount())
d219 1
a219 1
		POSITION pos2 = app_prefs->m_sharedDirList.GetHeadPosition();
d222 1
a222 1
			if(lstShared.GetNext(pos1) != app_prefs->m_sharedDirList.GetNext(pos2))
d238 1
a238 1
	if(lstTemp.GetCount() == app_prefs->m_tempDirList.GetCount())
d241 1
a241 1
		POSITION pos2 = app_prefs->m_tempDirList.GetHeadPosition();
d244 1
a244 1
			if(lstTemp.GetNext(pos1) != app_prefs->m_tempDirList.GetNext(pos2))
@


1.14
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d96 2
a97 2
	m_ShareSelector.SetSharedDirectories(&app_prefs->shareddir_list);
	m_TempSelector.SetSharedDirectories(&app_prefs->tempdir_list);	// InterCeptor (multiple tempdirs)
d169 2
a170 2
		app_prefs->shareddir_list.RemoveAll();
		m_ShareSelector.GetSharedDirectories(&app_prefs->shareddir_list);
d174 2
a175 2
		app_prefs->tempdir_list.RemoveAll();
		m_TempSelector.GetSharedDirectories(&app_prefs->tempdir_list);
d216 1
a216 1
	if(lstShared.GetCount() == app_prefs->shareddir_list.GetCount())
d219 1
a219 1
		POSITION pos2 = app_prefs->shareddir_list.GetHeadPosition();
d222 1
a222 1
			if(lstShared.GetNext(pos1) != app_prefs->shareddir_list.GetNext(pos2))
d238 1
a238 1
	if(lstTemp.GetCount() == app_prefs->tempdir_list.GetCount())
d241 1
a241 1
		POSITION pos2 = app_prefs->tempdir_list.GetHeadPosition();
d244 1
a244 1
			if(lstTemp.GetNext(pos1) != app_prefs->tempdir_list.GetNext(pos2))
@


1.13
log
@*** empty log message ***
@
text
@d171 1
a171 1
		theApp.sharedfiles->Reload();
@


1.12
log
@Updated dialogs
@
text
@d7 1
d81 4
@


1.11
log
@Solved bug in preferences browse buttons
@
text
@a197 3
		selIncDirButton.SetWindowText(GetResString(IDS_PW_BROWSE));
		selTempDirButton.SetWindowText(GetResString(IDS_PW_BROWSE));
		selVlcButton.SetWindowText(GetResString(IDS_PW_BROWSE));
@


1.10
log
@converted to use DDX framework
@
text
@d121 1
d131 1
d143 1
@


1.9
log
@TCHAR buffer chaged to CString
@
text
@d20 9
d42 16
d76 3
a78 3
	((CEdit*)GetDlgItem(IDC_INCFILES))->SetLimitText(509);
	((CEdit*)GetDlgItem(IDC_TEMPFILES))->SetLimitText(509);
	((CEdit*)GetDlgItem(IDC_VLC))->SetLimitText(509);
d88 3
a90 3
	GetDlgItem(IDC_INCFILES)->SetWindowText(app_prefs->GetIncomingDir());
	GetDlgItem(IDC_TEMPFILES)->SetWindowText(app_prefs->GetTempDir());
	GetDlgItem(IDC_VLC)->SetWindowText(app_prefs->GetVideoPlayer());
d93 2
a94 4
	if(app_prefs->BackupPreview())
		CheckDlgButton(IDC_VIDEOBACKUP,1);
	else
		CheckDlgButton(IDC_VIDEOBACKUP,0);
d98 1
a98 1
bool CPPgDirectories::SelectDir(TCHAR* outdir, CString titletext)
d100 2
a101 3
	CoInitialize(0);
	bool done;
	TCHAR* buffer = new TCHAR[MAX_PATH];
d103 2
a104 3
	LPITEMIDLIST pidl = SHBrowseForFolder(&bi);
	delete[] buffer;
	done = SHGetPathFromIDList(pidl,outdir);
d118 4
a121 2
	if(SelectDir(buffer,GetResString(IDS_SELECT_INCOMINGDIR)))
		GetDlgItem(IDC_INCFILES)->SetWindowText(buffer);
d127 4
a130 2
	if(SelectDir(buffer,GetResString(IDS_SELECT_TEMPDIR)))
		GetDlgItem(IDC_TEMPFILES)->SetWindowText(buffer);
d136 5
a140 6
	CString runDir=app_prefs->GetVideoPlayer();
	int i=runDir.ReverseFind('\\');
	if (i>=0)
	{
		runDir=runDir.Left(i+1);
		dlgFile.m_pOFN->lpstrInitialDir=runDir;	//Cax2 - set the initial directory!
a141 6
	if (dlgFile.DoModal()==IDOK) GetDlgItem(IDC_VLC)->SetWindowText(dlgFile.GetPathName());

/*	char buffer[MAX_PATH];
	if(SelectDir(buffer,GetResString(IDS_SELECT_VLCDIR)))
		GetDlgItem(IDC_VLC)->SetWindowText(buffer);
*/
a145 2
//	CSingleLock PrefLock(&(app_prefs->m_Pref_Mutex),TRUE); 

d148 4
a151 8
		//TCHAR buffer[510];
		//char shortPath[510]; // Cax2 - 8.3 filename 
		CString strPath;

		GetDlgItem(IDC_INCFILES)->GetWindowText(strPath);
		if (strPath.GetLength() != 0) {
			app_prefs->SetIncomingDir(strPath);
			GetDlgItem(IDC_INCFILES)->SetWindowText(strPath); //???
d153 3
a155 5

		GetDlgItem(IDC_TEMPFILES)->GetWindowText(strPath);
		if (strPath.GetLength() != 0) {
			app_prefs->SetTempDir(strPath);
			GetDlgItem(IDC_TEMPFILES)->SetWindowText(strPath); //???
d157 3
a159 9

		GetDlgItem(IDC_VLC)->GetWindowText(strPath);
		if (strPath.GetLength() != 0) {
			app_prefs->SetVideoPlayer(strPath);
			GetDlgItem(IDC_VLC)->SetWindowText(strPath);	//???
		} else
			app_prefs->SetVideoPlayer(_T(""));

		app_prefs->SetBackupPreview(IsDlgButtonChecked(IDC_VIDEOBACKUP));
d188 1
a188 1
	if(m_hWnd)
d192 11
a202 9
		GetDlgItem(IDC_INCOMING_LBL)->SetWindowText(GetResString(IDS_PW_INCOMING));
		GetDlgItem(IDC_TEMP_LBL)->SetWindowText(GetResString(IDS_PW_TEMP));
		GetDlgItem(IDC_VLC_LBL)->SetWindowText(GetResString(IDS_PW_VLC));
		GetDlgItem(IDC_SELINCDIR)->SetWindowText(GetResString(IDS_PW_BROWSE));
		GetDlgItem(IDC_SELTEMPDIR)->SetWindowText(GetResString(IDS_PW_BROWSE));
		GetDlgItem(IDC_SELVLC)->SetWindowText(GetResString(IDS_PW_BROWSE));
		GetDlgItem(IDC_SHARED_LBL)->SetWindowText(GetResString(IDS_PW_SHARED));
		GetDlgItem(IDC_TEMPDIR_LBL)->SetWindowText(GetResString(IDS_PW_TEMPDIR));
		GetDlgItem(IDC_VIDEOBACKUP)->SetWindowText(GetResString(IDS_VIDEOBACKUP));	
@


1.8
log
@unicode cleanup
@
text
@d132 1
a132 1
		TCHAR buffer[510];
d134 6
a139 6
		
		if(GetDlgItem(IDC_INCFILES)->GetWindowTextLength())
		{
			GetDlgItem(IDC_INCFILES)->GetWindowText(buffer,509);
			app_prefs->SetIncomingDir(buffer);
			//strcpy(app_prefs->prefs->incomingdir,buffer);
d141 5
a145 6
		
		if(GetDlgItem(IDC_TEMPFILES)->GetWindowTextLength())
		{
			GetDlgItem(IDC_TEMPFILES)->GetWindowText(buffer,509);
			app_prefs->SetTempDir(buffer);
			GetDlgItem(IDC_TEMPFILES)->SetWindowText(app_prefs->GetTempDir());
d147 5
a151 6
	
		if(GetDlgItem(IDC_VLC)->GetWindowTextLength())
		{
			GetDlgItem(IDC_VLC)->GetWindowText(buffer,509);
			app_prefs->SetVideoPlayer(buffer);
			GetDlgItem(IDC_VLC)->SetWindowText(app_prefs->GetVideoPlayer());
@


1.7
log
@Fixed a bug with not being able to set some folders as output folder (0000225)   (it was not only drives root but some "special" folders too). .
also fixed few COM/Shell related memory leaks.
@
text
@d75 1
a75 1
bool CPPgDirectories::SelectDir(char* outdir, CString titletext)
d79 1
a79 1
	char* buffer = new char[MAX_PATH];
d96 1
a96 1
	char buffer[MAX_PATH];
d103 1
a103 1
	char buffer[MAX_PATH];
d110 1
a110 1
	CFileDialog dlgFile(TRUE, "*.exe", NULL,OFN_FILEMUSTEXIST | OFN_NOREADONLYRETURN ,"Program (*.exe)|*.exe||");
d132 1
a132 1
		char buffer[510];
@


1.6
log
@minor graphic details bugfixed, now preview player selection same as official
@
text
@d86 1
d88 2
@


1.6.6.1
log
@27a partial merge
@
text
@d136 1
@


1.5
log
@minor updates & bugfixes
@
text
@d65 1
a65 1
	GetDlgItem(IDC_VLC)->SetWindowText(app_prefs->GetVlcDir());
d107 11
a117 1
	char buffer[MAX_PATH];
d120 1
a141 2
			//GetShortPathName(buffer,shortPath, 510); // Cax2 - 8.3 filename
			//strcpy(app_prefs->prefs->tempdir,shortPath);
d149 2
a150 4
			//GetShortPathName(buffer,shortPath, 510); // Cax2 - 8.3 filename
			app_prefs->SetVlcDir(buffer);
			//strcpy(app_prefs->prefs->vlcdir,shortPath);
			GetDlgItem(IDC_VLC)->SetWindowText(app_prefs->GetVlcDir());
d152 2
a153 2
			app_prefs->SetVlcDir(_T(""));
			//strcpy(app_prefs->prefs->vlcdir,"");
@


1.5.2.1
log
@v1a upgrade
@
text
@d65 1
a65 1
	GetDlgItem(IDC_VLC)->SetWindowText(app_prefs->GetVideoPlayer());
d107 1
a107 11
	CFileDialog dlgFile(TRUE, "*.exe", NULL,OFN_FILEMUSTEXIST | OFN_NOREADONLYRETURN ,"Program (*.exe)|*.exe||");
	CString runDir=app_prefs->GetVideoPlayer();
	int i=runDir.ReverseFind('\\');
	if (i>=0)
	{
		runDir=runDir.Left(i+1);
		dlgFile.m_pOFN->lpstrInitialDir=runDir;	//Cax2 - set the initial directory!
	}
	if (dlgFile.DoModal()==IDOK) GetDlgItem(IDC_VLC)->SetWindowText(dlgFile.GetPathName());

/*	char buffer[MAX_PATH];
a109 1
*/
d131 2
d140 4
a143 2
			app_prefs->SetVideoPlayer(buffer);
			GetDlgItem(IDC_VLC)->SetWindowText(app_prefs->GetVideoPlayer());
d145 2
a146 2
			app_prefs->SetVideoPlayer(_T(""));

@


1.4
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d36 3
a38 3
	ON_EN_CHANGE(IDC_INCFILES, OnEnChangeIncfiles)
	ON_EN_CHANGE(IDC_TEMPFILES, OnEnChangeTempfiles)
	ON_EN_CHANGE(IDC_VLC, OnEnChangeVlc)
d42 1
d68 4
d147 1
d188 1
@


1.3
log
@Removed SingleLock - no need there.
@
text
@d8 7
@


1.2
log
@bugfixes & control panel updates
@
text
@d102 1
a102 1
	CSingleLock PrefLock(&(app_prefs->m_Pref_Mutex),TRUE); 
@


1.1
log
@*** empty log message ***
@
text
@d107 1
a107 1
		char shortPath[510]; // Cax2 - 8.3 filename 
d119 1
a119 1
			GetShortPathName(buffer,shortPath, 510); // Cax2 - 8.3 filename
d121 1
a121 1
			app_prefs->SetTempDir(shortPath);
d128 2
a129 2
			GetShortPathName(buffer,shortPath, 510); // Cax2 - 8.3 filename
			app_prefs->SetVlcDir(shortPath);
@


1.1.4.1
log
@updating this branch...
@
text
@@


1.1.4.2
log
@updated control panes, and assorted bugfixes
@
text
@d107 1
a107 1
		//char shortPath[510]; // Cax2 - 8.3 filename 
d119 1
a119 1
			//GetShortPathName(buffer,shortPath, 510); // Cax2 - 8.3 filename
d121 1
a121 1
			app_prefs->SetTempDir(buffer);
d128 2
a129 2
			//GetShortPathName(buffer,shortPath, 510); // Cax2 - 8.3 filename
			app_prefs->SetVlcDir(buffer);
@


