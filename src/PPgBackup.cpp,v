head	1.23;
access;
symbols
	PublicRelease_1_2e:1.23
	Interim_Release_1-2e_RC1:1.23
	PublicRelease_1_2d:1.23
	Interim_Release_1-2d_RC1:1.21
	Interim_Release_1-2d_beta1:1.21
	PublicRelease_1_2c:1.20
	Interim_Release_1-2c_RC1:1.20
	Interim_Release_1-2c_beta1:1.19
	PublicRelease_1_2b:1.19
	Interim_Release_1-2b_RC1:1.19
	PublicRelease_1_2a:1.19
	Interim_Release_1-2a_RC1:1.19
	Interim_Release_1-2a_beta2:1.19
	Interim_Release_1-2a_beta1:1.19
	PublicRelease_1_2:1.19
	Interim_Release_1-2_RC1:1.19
	Interim_Release_1-2_beta1:1.19
	PublicRelease_1_1g:1.19
	Interim_Release_1-1g_RC3:1.19
	Interim_Release_1-1g_RC2:1.19
	Interim_Release_1-1g_RC1:1.19
	Interim_Release_1-1g_beta2:1.18
	Interim_Release_1-1g_beta1:1.18
	PublicRelease_1_1f:1.18
	Interim_Release_1-1f_RC1:1.18
	PublicRelease_1_1e:1.18
	Interim_Release_1-1e_RC2:1.18
	Interim_Release_1-1e_RC1:1.18
	Interim_Release_1-1e_beta1:1.18
	PublicRelease_1_1d:1.18
	Interim_Release_1-1d_RC1:1.18
	PublicRelease_1_1c:1.18
	Interim_Release_1-1c_RC1:1.18
	Interim_Release_1-1c_beta2:1.18
	Interim_Release_1-1c_beta1:1.18
	PublicRelease_1_1b:1.18
	Interim_Release_1-1b_RC1:1.18
	PublicRelease_1_1a:1.18
	Interim_Release_1-1a_RC2:1.18
	Interim_Release_1-1a_RC1:1.18
	Interim_Release_1-1a_beta2:1.18
	Interim_Release_1-1a_beta1:1.18
	PublicRelease_1_1:1.18
	Interim_Release_1-1_beta1:1.18
	PublicRelease_1o:1.17
	Interim_Release_1o_RC1:1.17
	Interim_Release_1o_beta1:1.17
	PublicRelease_1n:1.16
	Interim_Release_1n_RC2:1.16
	Interim_Release_1n_RC1:1.16
	Interim_Release_1n_beta2:1.16
	Interim_Release_1n_beta1:1.15
	PublicRelease_1m:1.15
	Interim_Release_1m_beta1:1.15
	PublicRelease_1l:1.14
	Interim_Release_1l_RC3:1.14
	Interim_Release_1l_RC2:1.14
	Interim_Release_1l_RC1:1.14
	Interim_Release_1l_beta2:1.14
	Interim_Release_1l_beta1:1.14
	PublicRelease_1k:1.12
	Interim_Release_1k_RC4:1.12
	Interim_1k_RC3:1.12
	Interim_1k_RC2:1.12
	Interim_Release_1k_RC1:1.12
	Interim_Release_1k_beta5:1.12
	Intrerim_Release_1k_beta4:1.12
	Interim_Release_1k_beta1:1.12
	PublicRelease_1j:1.12
	Interim_Release_1J_RC3:1.12
	Interim_Release_1j_RC3:1.12
	Interim_Release_1j_RC2:1.12
	Interim_Release_1j_RC1:1.12
	Interim_Release_1j_beta2:1.11
	Interim_Release_1j_beta1:1.11
	PublicRelease_1i:1.11
	Interim_Release_1i_RC6:1.11
	Interim_Release_1i_RC3:1.11
	Interim_Release_1i_RC2:1.11
	Interim_Release_1i_RC1:1.11
	Interim_Release_1i_beta3:1.11
	Interim_Release_1i_beta2:1.11
	Interim_Release_1i_beta1:1.11
	PublicRelease_1h:1.8
	Interim_Release_1h_rc2:1.8
	Interim_Release_1h_RC1:1.8
	Interim_Release_1h_beta2:1.7
	Interim_Release_1h_beta1_now:1.5
	Interim_Release_1h_beta1:1.5;
locks; strict;
comment	@// @;


1.23
date	2008.04.30.05.03.00;	author aw3;	state Exp;
branches;
next	1.22;

1.22
date	2008.04.28.04.20.49;	author aw3;	state Exp;
branches;
next	1.21;

1.21
date	2008.02.20.05.15.51;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2007.04.02.23.14.13;	author kush_eplus;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.18;

1.18
date	2004.10.13.20.06.52;	author aw3;	state Exp;
branches;
next	1.17;

1.17
date	2004.09.22.17.46.10;	author aw3;	state Exp;
branches;
next	1.16;

1.16
date	2004.08.05.01.25.32;	author aw3;	state Exp;
branches;
next	1.15;

1.15
date	2004.06.18.17.08.23;	author aw3;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.04.09.45.35;	author netwolf1;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.03.10.57.13;	author netwolf1;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.10.11.37.47;	author dongato;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.26.10.21.06;	author dongato;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.22.16.36.31;	author morevit;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.20.15.39.31;	author morevit;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.08.10.18.19;	author dongato;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.25.19.45.07;	author partyckip;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.23.00.20.50;	author forcha;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.29.02.05.56;	author dongato;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.28.13.25.33;	author dongato;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.28.10.27.35;	author dongato;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.28.09.04.32;	author netwolf1;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.28.02.33.12;	author dongato;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Correction for the previous fix to show properly previously selected value.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
// Partialy based on emule 0.26d_Fusion_Flux_[R6]

#include "stdafx.h"
#include "emule.h"
#include "PPgBackup.h"
#include "AddBuddy.h"

IMPLEMENT_DYNAMIC(CPPgBackup, CPropertyPage)
CPPgBackup::CPPgBackup()
	: CPropertyPage(CPPgBackup::IDD)
	, m_bDatFiles(FALSE)
	, m_bMetFiles(FALSE)
	, m_bIniFiles(FALSE)
	, m_bPartFiles(FALSE)
	, m_bPartMetFiles(FALSE)
	, m_bTxtsrcFiles(FALSE)
	, m_bAutoBackup(FALSE)
	, m_bOverwriteFiles(FALSE)
	, m_bScheduledBackup(FALSE)
{
}

CPPgBackup::~CPPgBackup()
{
}

void CPPgBackup::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Check(pDX, IDC_DAT, m_bDatFiles);
	DDX_Check(pDX, IDC_MET, m_bMetFiles);
	DDX_Check(pDX, IDC_INI, m_bIniFiles);
	DDX_Check(pDX, IDC_PART, m_bPartFiles);
	DDX_Check(pDX, IDC_PARTMET, m_bPartMetFiles);
	DDX_Check(pDX, IDC_PARTTXTSRC, m_bTxtsrcFiles);
	DDX_Check(pDX, IDC_BACKUP_AUTO, m_bAutoBackup);
	DDX_Check(pDX, IDC_BACKUP_OVERWRITE, m_bOverwriteFiles);
	DDX_Check(pDX, IDC_SCHEDULED_BACKUP, m_bScheduledBackup);
	DDX_Text(pDX, IDC_SCHEDULED_BACKUP_INTERVAL, m_strScheduledBackupInterval);
	DDX_Text(pDX, IDC_BACKUP_DIR, m_strBackupDir);
}

BOOL CPPgBackup::OnInitDialog()
{
	CPropertyPage::OnInitDialog();
	LoadSettings();
	Localize();
	CheckBackupNowButton();

	AddBuddy(::GetDlgItem(m_hWnd, IDC_BACKUP_DIR), ::GetDlgItem(m_hWnd, IDC_BACKUP_BROWSE), BDS_RIGHT);

	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
}

BEGIN_MESSAGE_MAP(CPPgBackup, CPropertyPage)
	ON_BN_CLICKED(IDC_BACKUP_NOW, OnBnClickedBackupnow)
	ON_BN_CLICKED(IDC_DAT, OnBnClickedCommon)
	ON_BN_CLICKED(IDC_MET, OnBnClickedCommon)
	ON_BN_CLICKED(IDC_INI, OnBnClickedCommon)
	ON_BN_CLICKED(IDC_PART, OnBnClickedPart)
	ON_BN_CLICKED(IDC_PARTMET, OnBnClickedCommon)
	ON_BN_CLICKED(IDC_PARTTXTSRC, OnBnClickedCommon)
	ON_BN_CLICKED(IDC_BACKUP_SELECTALL, OnBnClickedSelectall)
	ON_BN_CLICKED(IDC_BACKUP_OVERWRITE, OnSettingsChange)
	ON_BN_CLICKED(IDC_BACKUP_BROWSE, OnBnClickedBrowse)
	ON_EN_CHANGE(IDC_BACKUP_DIR, OnSettingsChange)
	ON_BN_CLICKED(IDC_BACKUP_AUTO, OnSettingsChange)
	ON_BN_CLICKED(IDC_SCHEDULED_BACKUP, OnBnClickedScheduledBackupCheck)
	ON_EN_CHANGE(IDC_SCHEDULED_BACKUP_INTERVAL, OnSettingsChange)
END_MESSAGE_MAP()


void CPPgBackup::OnBnClickedCommon()
{
	SetModified();
	CheckBackupNowButton();
}

void CPPgBackup::OnBnClickedPart()
{
	UpdateData(TRUE);

	if (m_bPartFiles)
	{
		if (MessageBox(GetResString(IDS_BACKUP_LONGTIME), GetResString(IDS_BACKUP_SURE), MB_ICONQUESTION|MB_YESNO) == IDYES)
		{
			m_bPartFiles = true;
			CheckBackupNowButton();
		}
		else
			m_bPartFiles = false;
	}

	UpdateData(FALSE);
	SetModified();
}

void CPPgBackup::OnBnClickedBrowse()
{
	TCHAR buffer[MAX_PATH];

	UpdateData(TRUE);
	if (SelectDir(m_strBackupDir, buffer, GetResString(IDS_SELECT_BACKUPDIR)))
	{
		m_strBackupDir = buffer;

		UpdateData(FALSE);
		SetModified();
	}
}

void CPPgBackup::OnBnClickedBackupnow()
{
	OnApply();
	g_App.m_pMDlg->RunBackupNow(false);
}

void CPPgBackup::OnBnClickedSelectall()
{
	UpdateData(TRUE);
	m_bDatFiles = true;
	m_bMetFiles = true;
	m_bIniFiles = true;
	m_bPartFiles = true;
	m_bPartMetFiles = true;
	m_bTxtsrcFiles = true;
	UpdateData(FALSE);
	SetModified();

	CheckBackupNowButton();
}

void CPPgBackup::CheckBackupNowButton()
{
	UpdateData(TRUE);

	bool	bSmthToBackup = m_bDatFiles || m_bMetFiles || m_bIniFiles || m_bPartFiles || m_bPartMetFiles || m_bTxtsrcFiles;

	GetDlgItem(IDC_BACKUP_NOW)->EnableWindow(bSmthToBackup);
	GetDlgItem(IDC_BACKUP_OVERWRITE)->EnableWindow(bSmthToBackup);
	GetDlgItem(IDC_BACKUP_AUTO)->EnableWindow(bSmthToBackup);
	GetDlgItem(IDC_SCHEDULED_BACKUP)->EnableWindow(bSmthToBackup);
	OnBnClickedScheduledBackupCheck();
}

BOOL CPPgBackup::SelectDir(const TCHAR *pcInDir, TCHAR *outdir, const CString &titletext)
{
	CoInitialize(0);
	BOOL	bDone;
	TCHAR buffer[MAX_PATH];
	BROWSEINFO bi = { GetSafeHwnd(), 0, buffer, titletext, BIF_VALIDATE | BIF_NEWDIALOGSTYLE | BIF_RETURNONLYFSDIRS, BrowseCallbackProc, (LPARAM)pcInDir, 0 };
	LPITEMIDLIST pidl = SHBrowseForFolder(&bi);
	bDone = SHGetPathFromIDList(pidl, outdir);
	LPMALLOC ppMalloc;
	if(SHGetMalloc(&ppMalloc) == NOERROR)
	{
		ppMalloc->Free(pidl);
		ppMalloc->Release();
	}
	CoUninitialize();
	return bDone;
}

void CPPgBackup::Localize(void)
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_BACKUP_GRPFILETYPE, IDS_BACKUP_GRPFILETYPE },
		{ IDC_BACKUP_SELECTALL, IDS_BACKUP_SELECTALL },
		{ IDC_BACKUP_NOW, IDS_BACKUP_NOW },
		{ IDC_BACKUP_OPTION, IDS_BACKUP_OPTION },
		{ IDC_BACKUP_TITLETXT, IDS_BACKUP_TITLETXT },
		{ IDC_BACKUP_OVERWRITE, IDS_BACKUP_OVERWRITE },
		{ IDC_BACKUP_AUTO, IDS_BACKUP_AUTO },
		{ IDC_SCHEDULED_BACKUP, IDS_SCHEDULED_BACKUP },
		{ IDC_HOURS, IDS_HOURS }
	};

	if (::IsWindow(m_hWnd))
	{
		CString	strRes;

		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl[i][1]));
			SetDlgItemText(s_auResTbl[i][0], strRes);
		}
	}
}

void CPPgBackup::LoadSettings(void)
{
	m_bDatFiles = m_pPrefs->GetBackupDatFiles();
	m_bMetFiles = m_pPrefs->GetBackupMetFiles();
	m_bIniFiles = m_pPrefs->GetBackupIniFiles();
	m_bPartFiles = m_pPrefs->GetBackupPartFiles();
	m_bPartMetFiles = m_pPrefs->GetBackupPartMetFiles();
	m_bTxtsrcFiles = m_pPrefs->GetBackupPartTxtsrcFiles();
	m_bAutoBackup = m_pPrefs->IsAutoBackup();
	m_bOverwriteFiles = m_pPrefs->GetBackupOverwrite();
	m_strBackupDir = m_pPrefs->GetBackupDir();
	m_bScheduledBackup = m_pPrefs->IsScheduledBackup();
	m_strScheduledBackupInterval.Format(_T("%u"), m_pPrefs->GetScheduledBackupInterval());

	UpdateData(FALSE);
	SetModified(FALSE);
}

BOOL CPPgBackup::OnApply()
{
	if (m_bModified)
	{
		UpdateData(TRUE);

		m_pPrefs->SetBackupDatFiles(B2b(m_bDatFiles));
		m_pPrefs->SetBackupMetFiles(B2b(m_bMetFiles));
		m_pPrefs->SetBackupIniFiles(B2b(m_bIniFiles));
		m_pPrefs->SetBackupPartFiles(B2b(m_bPartFiles));
		m_pPrefs->SetBackupPartMetFiles(B2b(m_bPartMetFiles));
		m_pPrefs->SetBackupPartTxtsrcFiles(B2b(m_bTxtsrcFiles));
		m_pPrefs->SetAutoBackup(B2b(m_bAutoBackup));
		m_pPrefs->SetBackupOverwrite(B2b(m_bOverwriteFiles));
		m_pPrefs->SetScheduledBackup(B2b(m_bScheduledBackup));
		m_pPrefs->SetScheduledBackupInterval(static_cast<uint16>(_tstoi(m_strScheduledBackupInterval)));

		if (!m_strBackupDir.IsEmpty())
			m_pPrefs->SetBackupDir(m_strBackupDir);
	}
	return CPropertyPage::OnApply();
}

void CPPgBackup::OnBnClickedScheduledBackupCheck()
{
	UpdateData(TRUE);

	bool	bSmthToBackup = m_bDatFiles || m_bMetFiles || m_bIniFiles || m_bPartFiles || m_bPartMetFiles || m_bTxtsrcFiles;

	GetDlgItem(IDC_SCHEDULED_BACKUP_INTERVAL)->EnableWindow(m_bScheduledBackup && bSmthToBackup);

	SetModified();
}
@


1.22
log
@Fixed applying of some preferences settings when several are altered at once {Vladimir (SV)} (directory browse was undoing other changes);
Cancel from backup directory browse was showing Apply active although there's nothing to apply;
"Select All" click was undoing some other changes done in the dialog.
@
text
@d117 3
a119 1
	TCHAR buffer[MAX_PATH];	
a121 2
		UpdateData(TRUE);

@


1.21
log
@Select current backup directory on backup directory browsing;
Optimized dialog regarding required memory and speed;
Removed old not used localization; Removed old not working code;
Suppressed compiler warnings; Formatting.
@
text
@d120 2
d123 1
d125 1
a126 1
	SetModified();
d137 1
@


1.20
log
@Removed unneeded CString initializations.
@
text
@d1 16
a16 1
// PPgBackup.cpp : implementation file
a21 1
#include "string.h"
a23 1
// CPPgBackup dialog
d27 9
a35 9
	, datFiles(FALSE)
	, metFiles(FALSE)
	, iniFiles(FALSE)
	, partFiles(FALSE)
	, partMetFiles(FALSE)
	, partTxtsrcFiles(FALSE)
	, autoBackup(FALSE)
	, overwriteFiles(FALSE)
	, scheduledBackup(FALSE)
d46 11
a56 23
	DDX_Check(pDX, IDC_DAT, datFiles);
	DDX_Check(pDX, IDC_MET, metFiles);
	DDX_Check(pDX, IDC_INI, iniFiles);
	DDX_Check(pDX, IDC_PART, partFiles);
	DDX_Check(pDX, IDC_PARTMET, partMetFiles);
	DDX_Check(pDX, IDC_PARTTXTSRC, partTxtsrcFiles);
	DDX_Check(pDX, IDC_BACKUP_AUTO, autoBackup);
	DDX_Check(pDX, IDC_BACKUP_OVERWRITE, overwriteFiles);
	DDX_Text(pDX, IDC_BACKUP_DIR, backupDir);
	DDX_Text(pDX, IDC_BACKUP_GRPFILETYPE, backupTypeDesc);
	DDX_Control(pDX, IDC_BACKUP_SELECTALL, selectAllButton);
	DDX_Control(pDX, IDC_BACKUP_NOW, backupNowButton);
	DDX_Text(pDX, IDC_BACKUP_OPTION, backupOptionDesc);
	DDX_Text(pDX, IDC_BACKUP_TITLETXT, backupDirDesc);
	DDX_Control(pDX, IDC_BACKUP_OVERWRITE, overwriteFilesCheck);
	DDX_Control(pDX, IDC_BACKUP_AUTO, autoBackupCheck);
	DDX_Control(pDX, IDC_BACKUP_DIR, backupDirEdit);
	DDX_Control(pDX, IDC_BACKUP_BROWSE, backupBrowseButton);
	DDX_Check(pDX, IDC_SCHEDULED_BACKUP, scheduledBackup);
	DDX_Control(pDX, IDC_SCHEDULED_BACKUP, scheduledBackupCheck);
	DDX_Control(pDX, IDC_SCHEDULED_BACKUP_INTERVAL, scheduledBackupEdit);
	DDX_Text(pDX, IDC_SCHEDULED_BACKUP_INTERVAL, scheduledBackupInterval);
	DDX_Text(pDX, IDC_HOURS, hours);
d63 1
d66 1
a66 1
	AddBuddy(backupDirEdit.m_hWnd, backupBrowseButton.m_hWnd, BDS_RIGHT);
d81 1
a81 2
	ON_BN_CLICKED(IDC_AUTOBACKUP, OnBnClickedAutobackup)
	ON_BN_CLICKED(IDC_BACKUP_OVERWRITE, OnBnClickedOverwrite)
d83 2
a84 2
	ON_EN_CHANGE(IDC_BACKUP_DIR, OnEnChangeBackupDir)
	ON_BN_CLICKED(IDC_BACKUP_AUTO, OnBnClickedBackupAuto)
d86 1
a86 1
	ON_EN_CHANGE(IDC_SCHEDULED_BACKUP_INTERVAL, OnEnChangeScheduledBackupInterval)
d100 1
a100 1
	if (partFiles)
d102 1
a102 1
		if (MessageBox(GetResString(IDS_BACKUP_LONGTIME),GetResString(IDS_BACKUP_SURE),MB_ICONQUESTION|MB_YESNO)== IDYES)
d104 1
a104 1
			partFiles = true;
d108 1
a108 1
			partFiles = false;
a114 10
void CPPgBackup::OnBnClickedBackupAuto()
{
	SetModified();
}

void CPPgBackup::OnBnClickedOverwrite()
{
	SetModified();
}

d118 1
a118 1
	if(SelectDir(buffer,GetResString(IDS_SELECT_BACKUPDIR)))
d120 1
a120 1
		backupDir = buffer;
a125 5
void CPPgBackup::OnEnChangeBackupDir()
{
	SetModified();
}

d134 6
a139 6
	datFiles = true;
	metFiles = true;
	iniFiles = true;
	partFiles = true;
	partMetFiles = true;
	partTxtsrcFiles = true;
a145 15
void CPPgBackup::OnBnClickedAutobackup()
{
	SetModified();

	//Avoid 2 backups at the same time
	if(guardian) 
		return;
	guardian=true;

	UpdateData(TRUE);
	backupNowButton.EnableWindow(autoBackup);	

	guardian=false;
}

d150 1
a150 1
	bool	bSmthToBackup = datFiles || metFiles || iniFiles || partFiles || partMetFiles || partTxtsrcFiles;
d152 4
a155 3
	backupNowButton.EnableWindow(bSmthToBackup);
	overwriteFilesCheck.EnableWindow(bSmthToBackup);
	autoBackupCheck.EnableWindow(bSmthToBackup);
d159 1
a159 1
bool CPPgBackup::SelectDir(TCHAR* outdir, CString titletext)
d162 3
a164 3
	bool done;
	TCHAR* buffer = new TCHAR[MAX_PATH];
	BROWSEINFO bi = { GetSafeHwnd(), 0, buffer, titletext, BIF_VALIDATE | BIF_NEWDIALOGSTYLE | BIF_RETURNONLYFSDIRS, 0, 0, 0};
d166 1
a166 2
	delete[] buffer;
	done = SHGetPathFromIDList(pidl,outdir);
d174 1
a174 1
	return done;
d179 14
a192 1
	if(::IsWindow(m_hWnd))
d194 1
a194 10
		SetWindowText(GetResString(IDS_PW_BACKUP));
		GetResString(&backupTypeDesc, IDS_BACKUP_GRPFILETYPE);
		selectAllButton.SetWindowText(GetResString(IDS_BACKUP_SELECTALL));
		backupNowButton.SetWindowText(GetResString(IDS_BACKUP_NOW));
		GetResString(&backupOptionDesc, IDS_BACKUP_OPTION);
		GetResString(&backupDirDesc, IDS_BACKUP_TITLETXT);
		overwriteFilesCheck.SetWindowText(GetResString(IDS_BACKUP_OVERWRITE));		
		autoBackupCheck.SetWindowText(GetResString(IDS_BACKUP_AUTO));	
		scheduledBackupCheck.SetWindowText(GetResString(IDS_SCHEDULED_BACKUP));
		GetResString(&hours, IDS_HOURS);
d196 5
a200 1
		UpdateData(FALSE);
d206 11
a216 13
	if(::IsWindow(m_hWnd))
	{		
		datFiles = m_pPrefs->GetBackupDatFiles();
		metFiles = m_pPrefs->GetBackupMetFiles();
		iniFiles = m_pPrefs->GetBackupIniFiles();
		partFiles = m_pPrefs->GetBackupPartFiles();
		partMetFiles = m_pPrefs->GetBackupPartMetFiles();
		partTxtsrcFiles = m_pPrefs->GetBackupPartTxtsrcFiles();
		autoBackup = m_pPrefs->IsAutoBackup();
		overwriteFiles = m_pPrefs->GetBackupOverwrite();
		backupDir = m_pPrefs->GetBackupDir();
		scheduledBackup = m_pPrefs->IsScheduledBackup();
		scheduledBackupInterval.Format(_T("%d"), m_pPrefs->GetScheduledBackupInterval());
d218 2
a219 3
		UpdateData(FALSE);
		Localize();
	}
d228 10
a237 11
		m_pPrefs->SetBackupDatFiles(datFiles);
		m_pPrefs->SetBackupMetFiles(metFiles);
		m_pPrefs->SetBackupIniFiles(iniFiles);
		m_pPrefs->SetBackupPartFiles(partFiles);
		m_pPrefs->SetBackupPartMetFiles(partMetFiles);
		m_pPrefs->SetBackupPartTxtsrcFiles(partTxtsrcFiles);
		m_pPrefs->SetAutoBackup(autoBackup);
		m_pPrefs->SetBackupOverwrite(overwriteFiles);
		m_pPrefs->SetScheduledBackup(scheduledBackup);
		int sbi = _tstoi(scheduledBackupInterval);
		m_pPrefs->SetScheduledBackupInterval(sbi);
d239 2
a240 2
		if (backupDir.GetLength() != 0)
			m_pPrefs->SetBackupDir(backupDir);
d248 4
a251 2
	scheduledBackupCheck.EnableWindow(datFiles || metFiles || iniFiles || partFiles || partMetFiles || partTxtsrcFiles);
	scheduledBackupEdit.EnableWindow(scheduledBackup && (datFiles || metFiles || iniFiles || partFiles || partMetFiles || partTxtsrcFiles));
@


1.19
log
@renamed 3 variables
@
text
@d13 10
a22 15
: CPropertyPage(CPPgBackup::IDD)
, datFiles(FALSE)
, metFiles(FALSE)
, iniFiles(FALSE)
, partFiles(FALSE)
, partMetFiles(FALSE)
, partTxtsrcFiles(FALSE)
, autoBackup(FALSE)
, overwriteFiles(FALSE)
, backupDir(_T(""))
, backupTypeDesc(_T(""))
, backupOptionDesc(_T(""))
, backupDirDesc(_T(""))
, scheduledBackup(FALSE)
, scheduledBackupInterval(_T(""))
@


1.18
log
@Fixed enabling of required backup controls when 'Select all' is pressed.
@
text
@d148 1
a148 1
	g_eMuleApp.m_pdlgEmule->RunBackupNow(false);
@


1.17
log
@Disable also 'Auto backup on exit' and 'overwrite files' controls if nothing to backup.
@
text
@d153 6
a158 7
	datFiles = TRUE;
	metFiles = TRUE;
	iniFiles = TRUE;
	partFiles = TRUE;
	partMetFiles = TRUE;
	partTxtsrcFiles = TRUE;
	backupNowButton.EnableWindow(true);
d161 2
a189 1
	SetModified();
@


1.16
log
@Possibility to backup .part.txtsrc files.
@
text
@d182 6
a187 1
	backupNowButton.EnableWindow(datFiles || metFiles || iniFiles || partFiles || partMetFiles || partTxtsrcFiles);
@


1.15
log
@Improved preferences localization.
@
text
@d19 1
d43 1
d77 3
a79 3
	ON_BN_CLICKED(IDC_DAT, OnBnClickedDat)
	ON_BN_CLICKED(IDC_MET, OnBnClickedMet)
	ON_BN_CLICKED(IDC_INI, OnBnClickedIni)
d81 2
a82 1
	ON_BN_CLICKED(IDC_PARTMET, OnBnClickedPartMet)
d94 1
a94 13
void CPPgBackup::OnBnClickedDat()
{
	SetModified();
	CheckBackupNowButton();
}

void CPPgBackup::OnBnClickedMet()
{
	SetModified();
	CheckBackupNowButton();
}

void CPPgBackup::OnBnClickedIni()
a118 6
void CPPgBackup::OnBnClickedPartMet()
{
	SetModified();
	CheckBackupNowButton();
}

d142 1
a142 1
		SetModified();
d158 1
d182 1
a182 1
	backupNowButton.EnableWindow(datFiles || metFiles || iniFiles || partFiles || partMetFiles);
d234 1
d257 1
d273 2
a274 2
	scheduledBackupCheck.EnableWindow(datFiles || metFiles || iniFiles || partFiles || partMetFiles);
	scheduledBackupEdit.EnableWindow(scheduledBackup && (datFiles || metFiles || iniFiles || partFiles || partMetFiles));
@


1.14
log
@Disable scheduled backup and backup on exit if a file corruption is detected on start + minor changes
@
text
@d225 1
a225 1
		backupTypeDesc = GetResString(IDS_BACKUP_GRPFILETYPE);
d228 2
a229 2
		backupOptionDesc = GetResString(IDS_BACKUP_OPTION);
		backupDirDesc = GetResString(IDS_BACKUP_TITLETXT);
d233 1
a233 1
		hours = GetResString(IDS_HOURS);
@


1.13
log
@added Scheduled Backup feature
@
text
@d248 1
a248 1
		autoBackup = m_pPrefs->GetAutoBackup();
@


1.12
log
@Some fixes, added debug log for file starting to be hashed.
@
text
@d25 2
d54 5
d86 2
d197 1
d232 2
d251 3
d272 4
a275 1
		
d281 9
@


1.11
log
@Warning while selecting to backup part files.
@
text
@d215 7
a221 7
		backupTypeDesc = GetResString(IDC_BACKUP_GRPFILETYPE);
		selectAllButton.SetWindowText(GetResString(IDC_BACKUP_SELECTALL));
		backupNowButton.SetWindowText(GetResString(IDC_BACKUP_NOW));
		backupOptionDesc = GetResString(IDC_BACKUP_OPTION);
		backupDirDesc = GetResString(IDC_BACKUP_TITLETXT);
		overwriteFilesCheck.SetWindowText(GetResString(IDC_BACKUP_OVERWRITE));		
		autoBackupCheck.SetWindowText(GetResString(IDC_BACKUP_AUTO));	
@


1.10
log
@Formatting, comments, and name changes.
@
text
@d47 1
a47 1
	DDX_Text(pDX, IDC_BACKUP_TITLETXT, backupDirDesc);	
d102 14
a116 1
	CheckBackupNowButton();
d159 1
a159 1
	datFiles = TRUE;;
@


1.9
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d218 8
a225 8
		datFiles = app_prefs->GetBackupDatFiles();
		metFiles = app_prefs->GetBackupMetFiles();
		iniFiles = app_prefs->GetBackupIniFiles();
		partFiles = app_prefs->GetBackupPartFiles();
		partMetFiles = app_prefs->GetBackupPartMetFiles();
		autoBackup = app_prefs->GetAutoBackup();
		overwriteFiles = app_prefs->GetBackupOverwrite();
		backupDir = app_prefs->GetBackupDir();
d237 7
a243 7
		app_prefs->SetBackupDatFiles(datFiles);
		app_prefs->SetBackupMetFiles(metFiles);
		app_prefs->SetBackupIniFiles(iniFiles);
		app_prefs->SetBackupPartFiles(partFiles);
		app_prefs->SetBackupPartMetFiles(partMetFiles);
		app_prefs->SetAutoBackup(autoBackup);
		app_prefs->SetBackupOverwrite(overwriteFiles);
d246 1
a246 1
			app_prefs->SetBackupDir(backupDir);
@


1.8
log
@Minor fix
@
text
@d141 1
a141 1
	theApp.emuledlg->RunBackupNow(false);
@


1.7
log
@converted to use DDX framework
@
text
@d140 1
@


1.6
log
@*** empty log message ***
@
text
@d14 11
d35 17
d60 1
a60 1
	AddBuddy(GetDlgItem(IDC_BACKUP_DIR)->m_hWnd, GetDlgItem(IDC_BACKUP_BROWSE)->m_hWnd, BDS_RIGHT);
d124 1
a124 2
	TCHAR buffer[MAX_PATH];
	CString strPath;
d127 2
a128 2
		GetDlgItem(IDC_BACKUP_DIR)->SetWindowText(buffer);
		GetDlgItem(IDC_BACKUP_DIR)->GetWindowText(strPath);
d130 1
a130 1
		SetModified();
d145 7
a151 6
	CheckDlgButton(IDC_DAT,BST_CHECKED);
	CheckDlgButton(IDC_MET,BST_CHECKED);
	CheckDlgButton(IDC_INI,BST_CHECKED);
	CheckDlgButton(IDC_PART,BST_CHECKED);
	CheckDlgButton(IDC_PARTMET,BST_CHECKED);
	GetDlgItem(IDC_BACKUP_NOW)->EnableWindow(true);
d164 2
a165 1
	GetDlgItem(IDC_AUTOBACKUP)->EnableWindow(IsDlgButtonChecked(IDC_AUTOBACKUP));	
d172 2
a173 4
	if (IsDlgButtonChecked(IDC_DAT) || IsDlgButtonChecked(IDC_MET) || IsDlgButtonChecked(IDC_INI) || (bool)IsDlgButtonChecked(IDC_PART) || (bool)IsDlgButtonChecked(IDC_PARTMET))
		GetDlgItem(IDC_BACKUP_NOW)->EnableWindow(true);
	else
		GetDlgItem(IDC_BACKUP_NOW)->EnableWindow(false);
d198 2
a199 1
	if(m_hWnd){
d201 9
a209 7
		GetDlgItem(IDC_BACKUP_GRPFILETYPE)->SetWindowText(GetResString(IDC_BACKUP_GRPFILETYPE));
		GetDlgItem(IDC_BACKUP_SELECTALL)->SetWindowText(GetResString(IDC_BACKUP_SELECTALL));
		GetDlgItem(IDC_BACKUP_NOW)->SetWindowText(GetResString(IDC_BACKUP_NOW));
		GetDlgItem(IDC_BACKUP_OPTION)->SetWindowText(GetResString(IDC_BACKUP_OPTION));
		GetDlgItem(IDC_BACKUP_OVERWRITE)->SetWindowText(GetResString(IDC_BACKUP_OVERWRITE));
		GetDlgItem(IDC_BACKUP_TITLETXT)->SetWindowText(GetResString(IDC_BACKUP_TITLETXT));
		GetDlgItem(IDC_BACKUP_AUTO)->SetWindowText(GetResString(IDC_BACKUP_AUTO));	
d215 11
a225 10
	if(m_hWnd)
	{
		CheckDlgButton(IDC_DAT,app_prefs->GetBackupDatFiles());
		CheckDlgButton(IDC_MET,app_prefs->GetBackupMetFiles());
		CheckDlgButton(IDC_INI,app_prefs->GetBackupIniFiles());
		CheckDlgButton(IDC_PART,app_prefs->GetBackupPartFiles());
		CheckDlgButton(IDC_PARTMET,app_prefs->GetBackupPartMetFiles());
		CheckDlgButton(IDC_BACKUP_AUTO,app_prefs->GetAutoBackup());
		CheckDlgButton(IDC_BACKUP_OVERWRITE,app_prefs->GetBackupOverwrite());
		GetDlgItem(IDC_BACKUP_DIR)->SetWindowText(app_prefs->GetBackupDir());
d232 3
a234 14
	CString strPath;

	app_prefs->SetBackupDatFiles(IsDlgButtonChecked(IDC_DAT));
	app_prefs->SetBackupMetFiles(IsDlgButtonChecked(IDC_MET));
	app_prefs->SetBackupIniFiles(IsDlgButtonChecked(IDC_INI));
	app_prefs->SetBackupPartFiles(IsDlgButtonChecked(IDC_PART));
	app_prefs->SetBackupPartMetFiles(IsDlgButtonChecked(IDC_PARTMET));
	app_prefs->SetAutoBackup(IsDlgButtonChecked(IDC_BACKUP_AUTO));
	app_prefs->SetBackupOverwrite(IsDlgButtonChecked(IDC_BACKUP_OVERWRITE));

	GetDlgItem(IDC_BACKUP_DIR)->GetWindowText(strPath);

	if (strPath.GetLength() != 0)
		app_prefs->SetBackupDir(strPath);
d236 11
@


1.5
log
@Fixed problem with Backup option
@
text
@d8 1
d31 2
@


1.4
log
@Updated dialogs
@
text
@d53 2
a54 2
		SetModified();
		CheckBackupNowButton();
d59 2
a60 2
		SetModified();
		CheckBackupNowButton();
d65 2
a66 2
		SetModified();
		CheckBackupNowButton();
d71 2
a72 2
		SetModified();
		CheckBackupNowButton();
d77 2
a78 2
		SetModified();
		CheckBackupNowButton();
d88 1
a88 1
		SetModified();
d189 1
a189 1
		CheckDlgButton(IDC_AUTOBACKUP,app_prefs->GetAutoBackup());
d205 1
a205 1
	app_prefs->SetAutoBackup(IsDlgButtonChecked(IDC_AUTOBACKUP));
@


1.3
log
@Updated string
@
text
@a175 1
		GetDlgItem(IDC_BACKUP_BROWSE)->SetWindowText(GetResString(IDS_PW_BROWSE));
@


1.2
log
@use existing 'Browse' string
@
text
@d95 1
a95 1
	if(SelectDir(buffer,GetResString(IDC_BACKUP_DIR)))
@


1.1
log
@BackUp feature [n@@boleo]
@
text
@d176 1
a176 1
		GetDlgItem(IDC_BACKUP_BROWSE)->SetWindowText(GetResString(IDC_BACKUP_BROWSE));
@

