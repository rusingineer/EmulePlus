head	1.9;
access;
symbols
	PublicRelease_1_2e:1.9
	Interim_Release_1-2e_RC1:1.9
	PublicRelease_1_2d:1.9
	Interim_Release_1-2d_RC1:1.9
	Interim_Release_1-2d_beta1:1.9
	PublicRelease_1_2c:1.9
	Interim_Release_1-2c_RC1:1.9
	Interim_Release_1-2c_beta1:1.9
	PublicRelease_1_2b:1.9
	Interim_Release_1-2b_RC1:1.9
	PublicRelease_1_2a:1.7
	Interim_Release_1-2a_RC1:1.7
	Interim_Release_1-2a_beta2:1.7
	Interim_Release_1-2a_beta1:1.7
	PublicRelease_1_2:1.7
	Interim_Release_1-2_RC1:1.7
	Interim_Release_1-2_beta1:1.6
	PublicRelease_1_1g:1.6
	Interim_Release_1-1g_RC3:1.6
	Interim_Release_1-1g_RC2:1.6
	Interim_Release_1-1g_RC1:1.6
	Interim_Release_1-1g_beta2:1.6
	Interim_Release_1-1g_beta1:1.6
	PublicRelease_1_1f:1.6
	Interim_Release_1-1f_RC1:1.6
	PublicRelease_1_1e:1.6
	Interim_Release_1-1e_RC2:1.6
	Interim_Release_1-1e_RC1:1.6
	Interim_Release_1-1e_beta1:1.6
	PublicRelease_1_1d:1.6
	Interim_Release_1-1d_RC1:1.6
	PublicRelease_1_1c:1.6
	Interim_Release_1-1c_RC1:1.6
	Interim_Release_1-1c_beta2:1.6
	Interim_Release_1-1c_beta1:1.5
	PublicRelease_1_1b:1.3
	Interim_Release_1-1b_RC1:1.3
	PublicRelease_1_1a:1.3
	Interim_Release_1-1a_RC2:1.3
	Interim_Release_1-1a_RC1:1.3
	Interim_Release_1-1a_beta2:1.3
	Interim_Release_1-1a_beta1:1.3
	PublicRelease_1_1:1.3
	Interim_Release_1-1_beta1:1.3
	PublicRelease_1o:1.3
	Interim_Release_1o_RC1:1.3
	Interim_Release_1o_beta1:1.3
	PublicRelease_1n:1.3
	Interim_Release_1n_RC2:1.3
	Interim_Release_1n_RC1:1.3
	Interim_Release_1n_beta2:1.3
	Interim_Release_1n_beta1:1.3
	PublicRelease_1m:1.3
	Interim_Release_1m_beta1:1.3
	PublicRelease_1l:1.3
	Interim_Release_1l_RC3:1.3
	Interim_Release_1l_RC2:1.3
	Interim_Release_1l_RC1:1.3
	Interim_Release_1l_beta2:1.3
	Interim_Release_1l_beta1:1.3
	PublicRelease_1k:1.2
	Interim_Release_1k_RC4:1.2
	Interim_1k_RC3:1.2
	Interim_1k_RC2:1.2
	Interim_Release_1k_RC1:1.2
	Interim_Release_1k_beta5:1.2
	Intrerim_Release_1k_beta4:1.2
	Interim_Release_1k_beta1:1.2
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.2
	PublicRelease_1i:1.2
	Interim_Release_1i_RC6:1.2
	Interim_Release_1i_RC3:1.2
	Interim_Release_1i_RC2:1.2
	Interim_Release_1i_RC1:1.2
	Interim_Release_1i_beta3:1.2
	Interim_Release_1i_beta2:1.2
	Interim_Release_1i_beta1:1.1
	PublicRelease_1h:1.1
	Interim_Release_1h_rc2:1.1
	Interim_Release_1h_RC1:1.1
	Interim_Release_1h_beta2:1.1
	Interim_Release_1h_beta1_now:1.1
	Interim_Release_1h_beta1:1.1
	PublicRelease_1g:1.1
	Interim_Release_1g_RC6_Final:1.1
	Interim_Release_1g_RC6:1.1
	Interim_Release_1g_RC5:1.1
	Interim_Release_1g_RC4:1.1;
locks; strict;
comment	@ * @;


1.9
date	2007.01.17.07.55.27;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2007.01.11.19.57.05;	author eklmn;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.19.22.54.30;	author kush_eplus;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.03.19.48.07;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.28.20.39.21;	author aw3;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.17.14.26.44;	author dongato;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.01.05.38.16;	author aw3;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.21.14.33.59;	author dongato;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.05.11.56.27;	author dongato;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Local class was moved to the .cpp file.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#include "types.h"

class CPartFile;
class CSourceData;

class CSourceSaver
{
public:
	CSourceSaver();

	bool	Process(CPartFile *pPartFile, int iMaxSourcesToSave = 10, bool bIgnoreTimer = false);
	void	LoadSources(CPartFile *pPartFile);

private:
	typedef	CTypedPtrList<CPtrList, CSourceData*> SourceList;

	void	LoadSourcesFromFile(CPartFile *pPartFile, SourceList *plistSources);
	void	SaveSources(CPartFile *pPartFile, int iMaxSourcesToSave);

	CString	CalcExpiration(uint32 dwDays);
	bool	IsExpired(const CString &strExpirationDate);

	uint32	m_dwLastTimeSaved;
};
@


1.8
log
@1) updated source exchange protocol to ver.3
2) support of HighID clients with IP "x.x.x.0"  (see description in updownclient.h)
3) removed dublicated ip check for LowID clients in TryToConnect()
4) fixed a client name change by download start from remote client shared file list.
5) some formating
@
text
@a15 1

d21 1
a21 1
class CUpDownClient;
a22 19
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
class CSourceData
{
public:
	CSourceData(uint32 dwID, uint16 uPort, LPCTSTR pachExpDate);
#ifndef NEW_SOCKETS_ENGINE
	CSourceData(CUpDownClient *pClient, LPCTSTR pachExpDate);
#endif //NEW_SOCKETS_ENGINE

	bool Compare(const CSourceData *pSourceData);

	uint32	m_dwSourceIP;
	uint32	m_dwPartsAvailable;
	uint16	m_uSourcePort;
	TCHAR	m_pachExpDate[7];
};
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
d32 1
a32 1
	typedef	CTypedPtrList<CPtrList, CSourceData *> SourceList;
a41 1
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////@


1.7
log
@UNICODE preparations; optimizations; formattings
@
text
@d36 1
a36 1
	uint32	m_dwSourceID;
@


1.6
log
@More ifdefs for v2
@
text
@d1 15
a15 1
#include "types.h"
d19 2
d24 3
a26 1
class CSourceSaver
d29 1
a29 10
	CSourceSaver(void);
	~CSourceSaver(void);
	bool Process(CPartFile *file, int maxSourcesToSave = 10, bool bIgnoreTimer = false);
	void LoadSources(CPartFile *file);

protected:
	class CSourceData
	{
	public:
		CSourceData(uint32 dwID, uint16 uPort, const char *exp);
d31 1
a31 1
		CSourceData(CUpDownClient *pClient, const char *exp);
a32 1
		CSourceData(CSourceData *pOld);
d34 25
a58 2
		bool Compare(CSourceData* tocompare) {						return ((sourceID == tocompare->sourceID) 
																	 && (sourcePort == tocompare->sourcePort)); }
a59 12
		uint32	sourceID;
		uint32	partsavailable;
		uint16	sourcePort;
		char	expiration[7];
	};
	typedef CTypedPtrList<CPtrList, CSourceData*> SourceList;

	void LoadSourcesFromFile(CPartFile* file, SourceList* sources, const CString& slsfile);
	void SaveSources(CPartFile* file, SourceList* prevsources, const CString& slsfile, int maxSourcesToSave);
	void AddSourcesToDownload(CPartFile* file, SourceList* sources);
	
	uint32	m_dwLastTimeLoaded;
a60 3
	
	CString CalcExpiration(int nDays);
	bool IsExpired(const CString &strExpirationDate);
d62 1
@


1.5
log
@Removed one extra file sources saving attempt (initial attempt right after start);
Improved string processing and other minor optimization.
@
text
@d21 1
d23 1
@


1.4
log
@Fix for my last change...
@
text
@d13 2
a14 2
	bool Process(CPartFile* file, int maxSourcesToSave=10, bool bIgnoreTimer = false);
	void LoadSources(CPartFile* file);
d20 3
a22 11
		CSourceData(uint32 dwID, uint16 wPort, const char* exp) {	sourceID = dwID; 
																	sourcePort = wPort; 
																	memcpy(expiration, exp, 7);
																	expiration[6] = 0;}

		CSourceData(CUpDownClient* client, const char* exp);
		CSourceData(CSourceData* pOld) {							sourceID = pOld->sourceID; 
																	sourcePort = pOld->sourcePort; 
																	memcpy(expiration, pOld->expiration, 7); 
																	partsavailable = pOld->partsavailable;
																	expiration[6] = 0;}
d28 1
a29 1
		uint32	partsavailable;
d34 2
a35 2
	void LoadSourcesFromFile(CPartFile* file, SourceList* sources, CString& slsfile);
	void SaveSources(CPartFile* file, SourceList* prevsources, CString& slsfile, int maxSourcesToSave);
d39 1
a39 1
	uint32  m_dwLastTimeSaved;
d42 1
a42 1
	bool IsExpired(CString expirationdate);
@


1.3
log
@Method removal (deletion now is implemented during part file processing).
@
text
@d13 1
a13 1
	bool Process(CPartFile* file, int maxSourcesToSave=10);
@


1.2
log
@Removed NNS feature and changed SLS
@
text
@a14 1
	void DeleteFile(CPartFile* file);
@


1.1
log
@Missing files :P
@
text
@d14 1
@

