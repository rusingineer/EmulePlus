head	1.4;
access;
symbols
	PublicRelease_1_2e:1.4
	Interim_Release_1-2e_RC1:1.4
	PublicRelease_1_2d:1.1
	Interim_Release_1-2d_RC1:1.1
	Interim_Release_1-2d_beta1:1.1
	PublicRelease_1_2c:1.1
	Interim_Release_1-2c_RC1:1.1
	Interim_Release_1-2c_beta1:1.1
	PublicRelease_1_2b:1.1
	Interim_Release_1-2b_RC1:1.1
	PublicRelease_1_2a:1.1
	Interim_Release_1-2a_RC1:1.1
	Interim_Release_1-2a_beta2:1.1
	Interim_Release_1-2a_beta1:1.1
	PublicRelease_1_2:1.1
	Interim_Release_1-2_RC1:1.1
	Interim_Release_1-2_beta1:1.1
	PublicRelease_1_1g:1.1
	Interim_Release_1-1g_RC3:1.1
	Interim_Release_1-1g_RC2:1.1
	Interim_Release_1-1g_RC1:1.1
	Interim_Release_1-1g_beta2:1.1
	Interim_Release_1-1g_beta1:1.1
	PublicRelease_1_1f:1.1
	Interim_Release_1-1f_RC1:1.1
	PublicRelease_1_1e:1.1
	Interim_Release_1-1e_RC2:1.1
	Interim_Release_1-1e_RC1:1.1
	Interim_Release_1-1e_beta1:1.1
	PublicRelease_1_1d:1.1
	Interim_Release_1-1d_RC1:1.1
	PublicRelease_1_1c:1.1
	Interim_Release_1-1c_RC1:1.1
	Interim_Release_1-1c_beta2:1.1
	Interim_Release_1-1c_beta1:1.1
	PublicRelease_1_1b:1.1
	Interim_Release_1-1b_RC1:1.1;
locks; strict;
comment	@ * @;


1.4
date	2008.12.01.03.51.23;	author kush_eplus;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.12.16.57.08;	author kush_eplus;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.04.53.32;	author aw3;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.15.14.53.09;	author katsyonak;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Better fix as per Aw3 suggestion, kept default constructor for CArray initialization;
Minor optimization;
Formattings
@
text
@//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software

// Class to configure the ICS-Firewall of Windows XP - will not work with WinXP-SP2 yet

#pragma once
#include <comdef.h>
#include <InitGuid.h>
#include <NetCon.h>

typedef _com_ptr_t<_com_IIID<INetSharingEveryConnectionCollection, &IID_INetSharingEveryConnectionCollection> >	INetSharingEveryConnectionCollectionPtr;
typedef _com_ptr_t<_com_IIID<INetConnection, &IID_INetConnection> >												INetConnectionPtr;
typedef _com_ptr_t<_com_IIID<INetConnectionProps, &IID_INetConnectionProps> >									INetConnectionPropsPtr;
typedef _com_ptr_t<_com_IIID<INetSharingPortMapping, &IID_INetSharingPortMapping> >								INetSharingPortMappingPtr;
typedef _com_ptr_t<_com_IIID<INetSharingConfiguration, &IID_INetSharingConfiguration> >							INetSharingConfigurationPtr;
typedef _com_ptr_t<_com_IIID<INetSharingPortMappingProps, &IID_INetSharingPortMappingProps> >					INetSharingPortMappingPropsPtr;
typedef _com_ptr_t<_com_IIID<INetSharingPortMappingCollection, &IID_INetSharingPortMappingCollection> >			INetSharingPortMappingCollectionPtr;

enum EFOCAction
{
	FOC_ADDRULE,
	FOC_DELETERULEBYNAME,
	FOC_FINDRULEBYNAME,
	FOC_FINDRULEBYPORT,
	FOC_DELETERULEEXCACT,
	FOC_FWCONNECTIONEXISTS
};

#define EMULE_DEFAULTRULENAME_UDP	_T("ePlus_UDP_Port")
#define EMULE_DEFAULTRULENAME_TCP	_T("ePlus_TCP_Port")

#define NAT_PROTOCOL_TCP 6
#define NAT_PROTOCOL_UDP 17

///////////////////////////////////////////////////////////////////////////////////////
/// CICSRuleInfo
class CICSRuleInfo
{
public:
	CICSRuleInfo()	{}

	CICSRuleInfo(uint16 nPortNumber, byte byProtocol, CString strRuleName, bool bRemoveOnExit = false)
		: m_strRuleName(strRuleName)
	{
		m_nPortNumber = nPortNumber;
		m_byProtocol = byProtocol;
		m_bRemoveOnExit = bRemoveOnExit;
	}

	CICSRuleInfo& operator=(const CICSRuleInfo& ri)
	{
		m_nPortNumber = ri.m_nPortNumber;
		m_byProtocol = ri.m_byProtocol;
		m_strRuleName = ri.m_strRuleName;
		m_bRemoveOnExit = ri.m_bRemoveOnExit;
		return *this;
	}

	uint16	m_nPortNumber;
	byte	m_byProtocol;
	bool	m_bRemoveOnExit;
	CString	m_strRuleName;
};

///////////////////////////////////////////////////////////////////////////////////////
/// CFirewallOpener

class CFirewallOpener
{
public:
	CFirewallOpener(void);
	~CFirewallOpener(void);
	bool			OpenPort(const CICSRuleInfo& riPortRule);
	bool			OpenPort(const uint16 nPortNumber,const byte byProtocol,const CString strRuleName, const bool bRemoveOnExit = false);
	bool			RemoveRule(const CString strName);
	bool			RemoveRule(const CICSRuleInfo& riPortRule);
	bool			DoesRuleExist(const CString strName);
	bool			DoesRuleExist(const uint16 nPortNumber,const byte byProtocol);
	bool			DoesFWConnectionExist();
	void			UnInit();
	bool			Init(bool bPreInit = false);

protected:

	bool			AddRule(const CICSRuleInfo& riPortRule, const INetSharingConfigurationPtr pNSC, const INetConnectionPropsPtr pNCP);
	bool			DoAction(const EFOCAction eAction, const CICSRuleInfo *pPortRule);
	bool			FindRule(const EFOCAction eAction, const CICSRuleInfo& riPortRule, const INetSharingConfigurationPtr pNSC, INetSharingPortMappingPropsPtr* outNSPMP);

	CArray<CICSRuleInfo>	m_liAddedRules;

private:
	INetSharingManager*		m_pINetSM;
	bool					m_bInited;
};
@


1.3
log
@Fix uninitialized member variables;
Formatting.
@
text
@d21 2
a22 2
#include <initguid.h>
#include <Netcon.h>
d53 2
a54 6
	CICSRuleInfo()
	{
		m_nPortNumber = 0;
		m_byProtocol = 0;
		m_bRemoveOnExit = false;
	}
d99 1
a99 1
	bool			DoAction(const EFOCAction eAction, const CICSRuleInfo& riPortRule);			
d102 1
a102 1
	CArray<CICSRuleInfo, CICSRuleInfo>	m_liAddedRules;
@


1.2
log
@Removed unused constructor; Removed unused CLoggable base class; Improved string initialization at construction time.
@
text
@d17 1
a17 1
// class to configure the ICS-Firewall of Windows XP - will not work with WinXP-SP2 yet
d24 7
a30 7
typedef _com_ptr_t<_com_IIID<INetSharingEveryConnectionCollection,&IID_INetSharingEveryConnectionCollection>	>	INetSharingEveryConnectionCollectionPtr;
typedef _com_ptr_t<_com_IIID<INetConnection,&IID_INetConnection>	>												INetConnectionPtr;
typedef _com_ptr_t<_com_IIID<INetConnectionProps,&IID_INetConnectionProps>	>										INetConnectionPropsPtr;
typedef _com_ptr_t<_com_IIID<INetSharingPortMapping,&IID_INetSharingPortMapping>	>								INetSharingPortMappingPtr;
typedef _com_ptr_t<_com_IIID<INetSharingConfiguration,&IID_INetSharingConfiguration>	>							INetSharingConfigurationPtr;
typedef _com_ptr_t<_com_IIID<INetSharingPortMappingProps,&IID_INetSharingPortMappingProps>	>						INetSharingPortMappingPropsPtr;
typedef _com_ptr_t<_com_IIID<INetSharingPortMappingCollection,&IID_INetSharingPortMappingCollection>	>			INetSharingPortMappingCollectionPtr;
d32 2
a33 1
enum EFOCAction{
d53 8
a60 3
	CICSRuleInfo()								{}
	CICSRuleInfo(uint16 nPortNumber, byte byProtocol, CString strRuleName, bool bRemoveOnExit = false) :
		m_strRuleName(strRuleName)
@


1.1
log
@Open client ports on Windows XP internal firewall (adopted from koizo)
@
text
@d2 1
a2 1
//Copyright (C)2004 Merkur ( devs@@emule-project.net / http://www.emule-project.net )
a22 1
#include "loggable.h"
d53 2
a54 2
	CICSRuleInfo(const CICSRuleInfo& ri)		{*this = ri;}
	CICSRuleInfo(uint16 nPortNumber, byte byProtocol, CString strRuleName, bool bRemoveOnExit = false)
a57 1
		m_strRuleName = strRuleName;
d79 1
a79 1
class CFirewallOpener: public CLoggable
@

