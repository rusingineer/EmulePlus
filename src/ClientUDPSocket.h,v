head	1.13;
access;
symbols
	PublicRelease_1_2e:1.10
	Interim_Release_1-2e_RC1:1.10
	PublicRelease_1_2d:1.10
	Interim_Release_1-2d_RC1:1.10
	Interim_Release_1-2d_beta1:1.9
	PublicRelease_1_2c:1.9
	Interim_Release_1-2c_RC1:1.9
	Interim_Release_1-2c_beta1:1.9
	PublicRelease_1_2b:1.9
	Interim_Release_1-2b_RC1:1.9
	PublicRelease_1_2a:1.9
	Interim_Release_1-2a_RC1:1.9
	Interim_Release_1-2a_beta2:1.9
	Interim_Release_1-2a_beta1:1.9
	PublicRelease_1_2:1.8
	Interim_Release_1-2_RC1:1.8
	Interim_Release_1-2_beta1:1.8
	PublicRelease_1_1g:1.8
	Interim_Release_1-1g_RC3:1.8
	Interim_Release_1-1g_RC2:1.8
	Interim_Release_1-1g_RC1:1.8
	Interim_Release_1-1g_beta2:1.8
	Interim_Release_1-1g_beta1:1.8
	PublicRelease_1_1f:1.8
	Interim_Release_1-1f_RC1:1.8
	PublicRelease_1_1e:1.8
	Interim_Release_1-1e_RC2:1.8
	Interim_Release_1-1e_RC1:1.8
	Interim_Release_1-1e_beta1:1.8
	PublicRelease_1_1d:1.8
	Interim_Release_1-1d_RC1:1.8
	PublicRelease_1_1c:1.8
	Interim_Release_1-1c_RC1:1.8
	Interim_Release_1-1c_beta2:1.8
	Interim_Release_1-1c_beta1:1.8
	PublicRelease_1_1b:1.8
	Interim_Release_1-1b_RC1:1.8
	PublicRelease_1_1a:1.8
	Interim_Release_1-1a_RC2:1.8
	Interim_Release_1-1a_RC1:1.8
	Interim_Release_1-1a_beta2:1.8
	Interim_Release_1-1a_beta1:1.8
	PublicRelease_1_1:1.8
	Interim_Release_1-1_beta1:1.8
	PublicRelease_1o:1.8
	Interim_Release_1o_RC1:1.8
	Interim_Release_1o_beta1:1.8
	PublicRelease_1n:1.8
	Interim_Release_1n_RC2:1.8
	Interim_Release_1n_RC1:1.7
	Interim_Release_1n_beta2:1.7
	Interim_Release_1n_beta1:1.7
	PublicRelease_1m:1.7
	Interim_Release_1m_beta1:1.7
	PublicRelease_1l:1.7
	Interim_Release_1l_RC3:1.7
	Interim_Release_1l_RC2:1.7
	Interim_Release_1l_RC1:1.7
	Interim_Release_1l_beta2:1.7
	Interim_Release_1l_beta1:1.7
	PublicRelease_1k:1.7
	Interim_Release_1k_RC4:1.7
	Interim_1k_RC3:1.7
	Interim_1k_RC2:1.7
	Interim_Release_1k_RC1:1.7
	Interim_Release_1k_beta5:1.7
	Intrerim_Release_1k_beta4:1.7
	Interim_Release_1k_beta1:1.7
	PublicRelease_1j:1.6
	Interim_Release_1J_RC3:1.6
	Interim_Release_1j_RC3:1.6
	Interim_Release_1j_RC2:1.6
	Interim_Release_1j_RC1:1.6
	Interim_Release_1j_beta2:1.6
	Interim_Release_1j_beta1:1.6
	PublicRelease_1i:1.6
	Interim_Release_1i_RC6:1.6
	Interim_Release_1i_RC3:1.6
	Interim_Release_1i_RC2:1.6
	Interim_Release_1i_RC1:1.6
	Interim_Release_1i_beta3:1.6
	Interim_Release_1i_beta2:1.6
	Interim_Release_1i_beta1:1.5
	PublicRelease_1h:1.5
	Interim_Release_1h_rc2:1.5
	Interim_Release_1h_RC1:1.5
	Interim_Release_1h_beta2:1.5
	Interim_Release_1h_beta1_now:1.5
	Interim_Release_1h_beta1:1.5
	PublicRelease_1g:1.5
	Interim_Release_1g_RC6_Final:1.5
	Interim_Release_1g_RC6:1.5
	Interim_Release_1g_RC5:1.5
	Interim_Release_1g_RC4:1.5
	Interim_Release_1g_RC3:1.5
	Interim_Release_1g_beta2:1.4
	Interim_Release_1g_beta1:1.4
	Interim_Release_1f_RC4:1.4
	Interim_Release_1f_RC3:1.4
	Interim_Release_1f_RC2:1.4
	Interim_Release_1f_RC:1.4
	Interim_Release_1f_beta2:1.4
	Interim_Release_1f_beta1:1.4
	PublicRelease_1e:1.4
	Interim_Release_1e_RC2:1.4
	Interim_Release_1e_RC:1.4
	Interim_Release_1e_beta3:1.4
	Interim_Release_1e_beta2:1.4
	Interim_Release_1e_beta2_before_kuchin:1.4
	Interim_Release_1e_beta1:1.4
	PublicRelease_1c:1.4
	featurestest:1.4.0.4
	Interim_Release_1c_RC:1.4
	Interim_Release_1c_beta2:1.4
	Interim_Release_1c_beta1:1.4
	threaded_downloadqueue:1.4.0.2
	PublicRelease_1b:1.3
	Interim_Release_1b_beta2:1.3
	Interim_Release_1b_beta1:1.3
	proxydeadlake:1.3.0.4
	PublicRelease_1a:1.3
	Interim_Release_1a_beta2:1.3
	BerkeleyDb:1.3.0.2
	Interim_Release_1a_beta1:1.3
	PublicRelease_1:1.3
	goldfish:1.3
	eMulePlus_1_RC2:1.3
	eMulePlus_26b_1RC1:1.3
	PreRelease_26b_i0e:1.3
	before_26d_merge:1.3
	Interim_Release_26b_i0d:1.3
	Interim_Release_26b_i0c:1.2
	Interim_Release_26b_i0b:1.2
	Interim_Release_26b_i0a:1.2
	systraydlg:1.2.0.6
	plus26based:1.2.0.4
	Interim_Release_25b_i0b:1.2
	Proxy_Dev:1.2
	Interim_Release_25b_i0a:1.2.2.1
	proxytest:1.2.2.1.0.2
	official_sockets:1.2.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.13
date	2009.07.19.01.07.01;	author aw3;	state Exp;
branches;
next	1.12;

1.12
date	2009.07.15.02.23.05;	author aw3;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.14.19.15.52;	author aw3;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.10.03.59.43;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.16.00.22.59;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.06.18.42.36;	author eklmn;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.08.01.53.31;	author morevit;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.19.16.48.04;	author partyckip;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.14.15.57.15;	author partyckip;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.12.20.18.21;	author obaldin;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.22.17.58.44;	author kuchin;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2003.01.21.18.07.05;	author cax2;	state Exp;
branches;
next	;

1.2.2.1
date	2003.01.28.16.53.59;	author cax2;	state Exp;
branches;
next	;

1.2.4.1
date	2003.02.05.01.58.41;	author obaldin;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Encryption preparations.
@
text
@//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#include "EncryptedDatagramSocket.h"
#include "Loggable.h"

class Packet;
struct UDPPack;

class CClientUDPSocket : public CAsyncSocket, public CEncryptedDatagramSocket, public CLoggable
{
public:
	CClientUDPSocket();
	virtual ~CClientUDPSocket();
	bool	SendPacket(Packet *packet, uint32 dwIP, uint16 nPort, bool bEncrypt, const uchar *pachTargetClientHashORKadID, bool bKad, uint32 nReceiverVerifyKey);
 	bool	IsBusy()	{return m_bWouldBlock;}
	bool	Create();

protected:
	bool	ProcessPacket(byte *pbytePacket, uint32 dwSize, byte opcode, uint32 dwIP, uint16 port);
	
	virtual void	OnSend(int nErrorCode);	
	virtual void	OnReceive(int nErrorCode);

private:
	void	ClearQueues();	
	int		SendTo(const void *pcBuf, int nBufLen, uint32 dwIP, uint16 nPort);
	bool	m_bWouldBlock;

	CTypedPtrList<CPtrList, UDPPack*> m_controlPacketQueue;
};
@


1.12
log
@Encryption preparations.
@
text
@d42 1
a42 1
	int		SendTo(const char *pcBuf, int nBufLen, uint32 dwIP, uint16 nPort);
@


1.11
log
@Encryption preparations.
@
text
@d2 1
a2 1
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
d30 2
a31 2
	bool	SendPacket(Packet* packet, uint32 dwIP, uint16 nPort);
	bool	IsBusy()	{return m_bWouldBlock;}
@


1.10
log
@Suppressed compiler warnings; Formatting.
@
text
@d19 1
d25 1
a25 1
class CClientUDPSocket : public CAsyncSocket, public CLoggable
@


1.9
log
@Removed useless redefinition.
@
text
@d17 1
a18 3
#pragma once
#include "types.h"
#include "packets.h"
d21 2
a22 10
#pragma pack(1)
struct UDPPack
{
	Packet* packet;
	uint32 dwIP;
	uint16 nPort;
};
#pragma pack()

// CClientUDPSocket command target
d32 1
d34 1
a34 1
	bool	ProcessPacket(byte* pbytePacketBuf, uint16 size, byte opcode, uint32 dwIP, uint16 port);
d38 1
d41 1
a41 1
	int		SendTo(char* lpBuf,int nBufLen,uint32 dwIP, uint16 nPort);
a45 3



@


1.8
log
@filtering of UDP packets
@
text
@d34 1
a34 5
// By Maverick Added CClientUDPSocketBaseClass 
// to make it easier to change BaseSocket
#define CClientUDPSocketBaseClass CAsyncSocket

class CClientUDPSocket : public CClientUDPSocketBaseClass, public CLoggable
@


1.7
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d47 1
a47 1
	bool	ProcessPacket(byte* pbytePacketBuf, uint16 size, byte opcode, LPCTSTR host, uint16 port);
@


1.6
log
@Formatting, comments, and name changes.
Created distinct tag classes and typed enumerations for tags, opcodes, and protocols.
@
text
@d47 1
a47 1
	bool	ProcessPacket(char* packet, int16 size, int8 opcode, LPCTSTR host, uint16 port);
@


1.5
log
@unicode cleanup
@
text
@d56 1
a56 1
	CTypedPtrList<CPtrList, UDPPack*> controlpacket_queue;
@


1.4
log
@converted to new logging method
@
text
@d47 1
a47 1
	bool	ProcessPacket(char* packet, int16 size, int8 opcode, char* host, uint16 port);
@


1.3
log
@more 26b merges
@
text
@d21 1
d38 1
a38 1
class CClientUDPSocket : public CClientUDPSocketBaseClass
@


1.2
log
@*** empty log message ***
@
text
@d22 3
a24 1
struct UDPPack{
d29 1
@


1.2.4.1
log
@initial upgrade to .26
@
text
@d30 5
a34 1
class CClientUDPSocket : public CAsyncSocket
@


1.2.2.1
log
@updating this branch...
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d30 5
a34 1
class CClientUDPSocket : public CAsyncSocket
@

