head	1.3;
access;
symbols
	PublicRelease_1_1c:1.2
	Interim_Release_1-1c_RC1:1.2
	Interim_Release_1-1c_beta2:1.2
	Interim_Release_1-1c_beta1:1.2
	PublicRelease_1_1b:1.2
	Interim_Release_1-1b_RC1:1.2
	PublicRelease_1_1a:1.2
	Interim_Release_1-1a_RC2:1.2
	Interim_Release_1-1a_RC1:1.2
	Interim_Release_1-1a_beta2:1.2
	Interim_Release_1-1a_beta1:1.2
	PublicRelease_1_1:1.2
	Interim_Release_1-1_beta1:1.2
	PublicRelease_1o:1.2
	Interim_Release_1o_RC1:1.2
	Interim_Release_1o_beta1:1.2
	PublicRelease_1n:1.2
	Interim_Release_1n_RC2:1.2
	Interim_Release_1n_RC1:1.2
	Interim_Release_1n_beta2:1.2
	Interim_Release_1n_beta1:1.2
	PublicRelease_1m:1.2
	Interim_Release_1m_beta1:1.2
	PublicRelease_1l:1.2
	Interim_Release_1l_RC3:1.2
	Interim_Release_1l_RC2:1.2
	Interim_Release_1l_RC1:1.2
	Interim_Release_1l_beta2:1.2
	Interim_Release_1l_beta1:1.2
	PublicRelease_1k:1.2
	Interim_Release_1k_RC4:1.2
	Interim_1k_RC3:1.2
	Interim_1k_RC2:1.2
	Interim_Release_1k_RC1:1.2
	Interim_Release_1k_beta5:1.2
	Intrerim_Release_1k_beta4:1.2
	Interim_Release_1k_beta1:1.2
	PublicRelease_1j:1.1
	Interim_Release_1J_RC3:1.1
	Interim_Release_1j_RC3:1.1
	Interim_Release_1j_RC2:1.1
	Interim_Release_1j_RC1:1.1
	Interim_Release_1j_beta2:1.1
	Interim_Release_1j_beta1:1.1
	PublicRelease_1i:1.1
	Interim_Release_1i_RC6:1.1
	Interim_Release_1i_RC3:1.1
	Interim_Release_1i_RC2:1.1
	Interim_Release_1i_RC1:1.1
	Interim_Release_1i_beta3:1.1
	Interim_Release_1i_beta2:1.1
	Interim_Release_1i_beta1:1.1
	PublicRelease_1h:1.1
	Interim_Release_1h_rc2:1.1
	Interim_Release_1h_RC1:1.1
	Interim_Release_1h_beta2:1.1
	Interim_Release_1h_beta1_now:1.1
	Interim_Release_1h_beta1:1.1
	PublicRelease_1g:1.1
	Interim_Release_1g_RC6_Final:1.1
	Interim_Release_1g_RC6:1.1
	Interim_Release_1g_RC5:1.1
	Interim_Release_1g_RC4:1.1
	Interim_Release_1g_RC3:1.1
	Interim_Release_1g_beta2:1.1
	Interim_Release_1g_beta1:1.1
	Interim_Release_1f_RC4:1.1
	Interim_Release_1f_RC3:1.1
	Interim_Release_1f_RC2:1.1
	Interim_Release_1f_RC:1.1
	Interim_Release_1f_beta2:1.1
	Interim_Release_1f_beta1:1.1
	PublicRelease_1e:1.1
	Interim_Release_1e_RC2:1.1
	Interim_Release_1e_RC:1.1
	Interim_Release_1e_beta3:1.1
	Interim_Release_1e_beta2:1.1
	Interim_Release_1e_beta2_before_kuchin:1.1
	Interim_Release_1e_beta1:1.1
	PublicRelease_1c:1.1
	featurestest:1.1.0.16
	Interim_Release_1c_RC:1.1
	Interim_Release_1c_beta2:1.1
	Interim_Release_1c_beta1:1.1
	threaded_downloadqueue:1.1.0.14
	PublicRelease_1b:1.1
	Interim_Release_1b_beta2:1.1
	Interim_Release_1b_beta1:1.1
	proxydeadlake:1.1.0.12
	PublicRelease_1a:1.1
	Interim_Release_1a_beta2:1.1
	BerkeleyDb:1.1.0.10
	Interim_Release_1a_beta1:1.1
	PublicRelease_1:1.1
	goldfish:1.1
	eMulePlus_1_RC2:1.1
	eMulePlus_26b_1RC1:1.1
	PreRelease_26b_i0e:1.1
	before_26d_merge:1.1
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2005.03.06.22.12.01;	author aw3;	state dead;
branches;
next	1.2;

1.2
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.20;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.15;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Rewritten shared files list sorting to make it according to other lists;
Fixed sorting arrow in shared files list when second sorting level is used by default.
@
text
@//--- xrmb:downloadclientslist ---
//--- xrmb:parttraffic ---

#pragma once
#include "types.h"
#include "MuleListCtrl.h"

class	CListCtrlSorterItem
{
friend class CListCtrlSorter;

public:
	CListCtrlSorterItem(byte id) : m_id(id) { set(); }
	
	void	set(byte levels=1, bool reverse=false, bool defaultDir=true,byte defaultLevel=1); //Cax2 changed defaultlevel from bool to int
	void	sortIt(byte level, bool dir); //Cax2 - I needed a REAL set function...
	void	clicked(byte id);
	CMuleListCtrl::ArrowType arrow();
protected:
	byte	m_level;
	bool	m_dir;
	bool	m_reverse;
private:
	byte	m_id;

	byte	m_levels;

	byte	m_defaultLevel;
	bool	m_defaultDir;
};

class	CListCtrlSorter
{
public:
	CListCtrlSorter();
	~CListCtrlSorter();
	void						init(byte items);
	CListCtrlSorterItem*		item(byte item)	{ return m_items[item]; }
	void						clicked(byte id)	{ m_items[id]->clicked(m_selected); m_selected=id; }
	bool						dir()				{ return m_items[m_selected]->m_dir ^ m_items[m_selected]->m_reverse; }
	byte						level()				{ return m_items[m_selected]->m_level; }
	byte						selected()			{ return m_selected; }
	CMuleListCtrl::ArrowType	arrow()				{ return m_items[m_selected]->arrow(); }

private:
	byte					m_itemc;
	CListCtrlSorterItem**	m_items;
	byte					m_selected;
};@


1.2
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d13 1
a13 1
	CListCtrlSorterItem(uint8 id) : m_id(id) { set(); }
d15 3
a17 3
	void	set(uint8 levels=1, bool reverse=false, bool defaultDir=true,uint8 defaultLevel=1); //Cax2 changed defaultlevel from bool to int
	void	sortIt(uint8 level, bool dir); //Cax2 - I needed a REAL set function...
	void	clicked(uint8 id);
d20 1
a20 1
	uint8	m_level;
d24 1
a24 1
	uint8	m_id;
d26 1
a26 1
	uint8	m_levels;
d28 1
a28 1
	uint8	m_defaultLevel;
d37 3
a39 3
	void						init(uint8 items);
	CListCtrlSorterItem*		item(uint8 item)	{ return m_items[item]; }
	void						clicked(uint8 id)	{ m_items[id]->clicked(m_selected); m_selected=id; }
d41 2
a42 2
	uint8						level()				{ return m_items[m_selected]->m_level; }
	uint8						selected()			{ return m_selected; }
d46 1
a46 1
	uint8					m_itemc;
d48 1
a48 1
	uint8					m_selected;
@


1.1.4.1
log
@updating this branch...
@
text
@@

