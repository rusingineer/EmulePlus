head	1.2;
access;
symbols
	Interim_Release_1k_beta1:1.1
	PublicRelease_1j:1.1
	Interim_Release_1J_RC3:1.1
	Interim_Release_1j_RC3:1.1
	Interim_Release_1j_RC2:1.1
	Interim_Release_1j_RC1:1.1
	Interim_Release_1j_beta2:1.1
	Interim_Release_1j_beta1:1.1
	PublicRelease_1i:1.1
	Interim_Release_1i_RC6:1.1
	Interim_Release_1i_RC3:1.1
	Interim_Release_1i_RC2:1.1
	Interim_Release_1i_RC1:1.1
	Interim_Release_1i_beta3:1.1
	Interim_Release_1i_beta2:1.1
	Interim_Release_1i_beta1:1.1
	PublicRelease_1h:1.1
	Interim_Release_1h_rc2:1.1
	Interim_Release_1h_RC1:1.1
	Interim_Release_1h_beta2:1.1
	Interim_Release_1h_beta1_now:1.1
	Interim_Release_1h_beta1:1.1
	PublicRelease_1g:1.1
	Interim_Release_1g_RC6_Final:1.1
	Interim_Release_1g_RC6:1.1
	Interim_Release_1g_RC5:1.1
	Interim_Release_1g_RC4:1.1
	Interim_Release_1g_RC3:1.1
	Interim_Release_1g_beta2:1.1
	Interim_Release_1g_beta1:1.1
	Interim_Release_1f_RC4:1.1
	Interim_Release_1f_RC3:1.1
	Interim_Release_1f_RC2:1.1
	Interim_Release_1f_RC:1.1
	Interim_Release_1f_beta2:1.1
	Interim_Release_1f_beta1:1.1
	PublicRelease_1e:1.1
	Interim_Release_1e_RC2:1.1
	Interim_Release_1e_RC:1.1
	Interim_Release_1e_beta3:1.1
	Interim_Release_1e_beta2:1.1
	Interim_Release_1e_beta2_before_kuchin:1.1
	Interim_Release_1e_beta1:1.1
	PublicRelease_1c:1.1
	featurestest:1.1.0.16
	Interim_Release_1c_RC:1.1
	Interim_Release_1c_beta2:1.1
	Interim_Release_1c_beta1:1.1
	threaded_downloadqueue:1.1.0.14
	PublicRelease_1b:1.1
	Interim_Release_1b_beta2:1.1
	Interim_Release_1b_beta1:1.1
	proxydeadlake:1.1.0.12
	PublicRelease_1a:1.1
	Interim_Release_1a_beta2:1.1
	BerkeleyDb:1.1.0.10
	Interim_Release_1a_beta1:1.1
	PublicRelease_1:1.1
	goldfish:1.1
	eMulePlus_1_RC2:1.1
	eMulePlus_26b_1RC1:1.1
	PreRelease_26b_i0e:1.1
	before_26d_merge:1.1
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.2
date	2004.03.18.18.07.09;	author eklmn;	state dead;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.23;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.28;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.2
log
@replaced TrackPopupMenu over TrackPopupMenuEx
@
text
@#include "stdafx.h"

#include "StatusBarCtrl.h"
#include "opcodes.h"
#include "emule.h"



BEGIN_MESSAGE_MAP(StatusBarCtrl, CStatusBarCtrl)
	ON_WM_LBUTTONDOWN()
	ON_WM_RBUTTONDOWN()
END_MESSAGE_MAP()



//-------------------------------------------------------------------------------------------------
StatusBarCtrl::~StatusBarCtrl()
{
	//--- free the menu memory ---
	m_popupMenuUp.DestroyMenu();
	m_popupMenuDown.DestroyMenu();
}



//-------------------------------------------------------------------------------------------------
void StatusBarCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
	//--- get the rect where the speed is displayed ---
	CRect rect;
	GetRect(2, rect);

	//--- is point in this rect ---
	if(rect.PtInRect(point)==false)
		return;

	//--- destroy and create the menu ---
	m_popupMenuUp.DestroyMenu();
	m_popupMenuUp.CreatePopupMenu();

	//--- title ---
	m_popupMenuUp.AddMenuTitle("Upload Speed");

	CString text;

	//--- speed settings overview ---
	text.Format("%s:\t%i KB/s", GetResString(IDS_PW_UPC), theApp.glob_prefs->GetMaxGraphUploadRate());	
	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_UPC, text);
	m_popupMenuUp.EnableMenuItem(MP_QS_UPC, MF_DISABLED);

	if(theApp.glob_prefs->GetMaxUpload()==UNLIMITED)
		text.Format("%s:\tunlimited", GetResString(IDS_PW_UPL), theApp.glob_prefs->GetMaxUpload());
	else
		text.Format("%s:\t%i KB/s", GetResString(IDS_PW_UPL), theApp.glob_prefs->GetMaxUpload());	
	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_UPL,  text);
	m_popupMenuUp.EnableMenuItem(MP_QS_UPL, MF_DISABLED);

	m_popupMenuUp.AppendMenu(MF_SEPARATOR);

	//--- 10..20..30.....100% ---
	text.Format("&10%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.1));	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U10,  text);
	text.Format("&20%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.2));	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U20,  text);
	text.Format("&30%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.3));	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U30,  text);
	text.Format("&40%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.4));	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U40,  text);
	text.Format("&50%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.5));	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U50,  text);
	text.Format("&60%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.6));	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U60,  text);
	text.Format("&70%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.7));	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U70,  text);
	text.Format("&80%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.8));	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U80,  text);
	text.Format("&90%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.9));	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U90,  text);
	text.Format("1&00%%\t%i KB/s", (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()));		m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_U100, text);
	m_popupMenuUp.AppendMenu(MF_STRING, MP_QS_UPC, "unlimited");

	//--- get mouse pos ---
	POINT cp;
	GetCursorPos(&cp);
	m_popupMenuUp.TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, cp.x, cp.y, theApp.emuledlg);
}



//-------------------------------------------------------------------------------------------------
void StatusBarCtrl::OnRButtonDown(UINT nFlags, CPoint point)
{
	//--- get the rect where the speed is displayed ---
	CRect rect;
	GetRect(2, rect);

	//--- is point in this rect ---
	if(rect.PtInRect(point)==false)
		return;

	//--- destroy and create the menu ---
	m_popupMenuDown.DestroyMenu();
	m_popupMenuDown.CreatePopupMenu();

	//--- title ---
	m_popupMenuDown.AddMenuTitle("Download Speed");

	CString text;

	//--- speed settings overview ---
	text.Format("%s:\t%i KB/s", GetResString(IDS_PW_DOWNC), theApp.glob_prefs->GetMaxGraphDownloadRate());	
	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_DC,  text);
	m_popupMenuDown.EnableMenuItem(MP_QS_DC, MF_DISABLED);

	if(theApp.glob_prefs->GetMaxDownload()==UNLIMITED)
		text.Format("%s:\tunlimited", GetResString(IDS_PW_DOWNL), theApp.glob_prefs->GetMaxDownload());
	else
		text.Format("%s:\t%i KB/s", GetResString(IDS_PW_DOWNL), theApp.glob_prefs->GetMaxDownload());	
	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_DL,  text);
	m_popupMenuDown.EnableMenuItem(MP_QS_DL, MF_DISABLED);

	m_popupMenuDown.AppendMenu(MF_SEPARATOR);

	//--- 10..20..30.....100% ---
	text.Format("&10%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.1));	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D10,  text);
	text.Format("&20%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.2));	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D20,  text);
	text.Format("&30%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.3));	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D30,  text);
	text.Format("&40%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.4));	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D40,  text);
	text.Format("&50%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.5));	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D50,  text);
	text.Format("&60%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.6));	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D60,  text);
	text.Format("&70%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.7));	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D70,  text);
	text.Format("&80%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.8));	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D80,  text);
	text.Format("&90%%\t%i KB/s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.9));	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D90,  text);
	text.Format("1&00%%\t%i KB/s", (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()));		m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_D100, text);
	m_popupMenuDown.AppendMenu(MF_STRING, MP_QS_DC, "unlimited");

	//--- get mouse pos ---
	POINT cp;
	GetCursorPos(&cp);
	m_popupMenuDown.TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, cp.x, cp.y, theApp.emuledlg);
}
@


1.1
log
@*** empty log message ***
@
text
@@


1.1.4.1
log
@updating this branch...
@
text
@@

