head	1.4;
access;
symbols
	PublicRelease_1_2:1.3
	Interim_Release_1-2_RC1:1.3
	Interim_Release_1-2_beta1:1.3
	PublicRelease_1_1g:1.3
	Interim_Release_1-1g_RC3:1.3
	Interim_Release_1-1g_RC2:1.3
	Interim_Release_1-1g_RC1:1.3
	Interim_Release_1-1g_beta2:1.3
	Interim_Release_1-1g_beta1:1.3
	PublicRelease_1_1f:1.3
	Interim_Release_1-1f_RC1:1.3
	PublicRelease_1_1e:1.3
	Interim_Release_1-1e_RC2:1.3
	Interim_Release_1-1e_RC1:1.3
	Interim_Release_1-1e_beta1:1.3
	PublicRelease_1_1d:1.3
	Interim_Release_1-1d_RC1:1.3
	PublicRelease_1_1c:1.3
	Interim_Release_1-1c_RC1:1.3
	Interim_Release_1-1c_beta2:1.3
	Interim_Release_1-1c_beta1:1.3
	PublicRelease_1_1b:1.3
	Interim_Release_1-1b_RC1:1.3
	PublicRelease_1_1a:1.3
	Interim_Release_1-1a_RC2:1.3
	Interim_Release_1-1a_RC1:1.3
	Interim_Release_1-1a_beta2:1.3
	Interim_Release_1-1a_beta1:1.3
	PublicRelease_1_1:1.3
	Interim_Release_1-1_beta1:1.3
	PublicRelease_1o:1.3
	Interim_Release_1o_RC1:1.3
	Interim_Release_1o_beta1:1.3
	PublicRelease_1n:1.3
	Interim_Release_1n_RC2:1.3
	Interim_Release_1n_RC1:1.3
	Interim_Release_1n_beta2:1.3
	Interim_Release_1n_beta1:1.3
	PublicRelease_1m:1.3
	Interim_Release_1m_beta1:1.3
	PublicRelease_1l:1.3
	Interim_Release_1l_RC3:1.3
	Interim_Release_1l_RC2:1.3
	Interim_Release_1l_RC1:1.3
	Interim_Release_1l_beta2:1.3
	Interim_Release_1l_beta1:1.3
	PublicRelease_1k:1.2
	Interim_Release_1k_RC4:1.2
	Interim_1k_RC3:1.2
	Interim_1k_RC2:1.2
	Interim_Release_1k_RC1:1.2
	Interim_Release_1k_beta5:1.2
	Intrerim_Release_1k_beta4:1.2
	Interim_Release_1k_beta1:1.2
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.2
	PublicRelease_1i:1.2
	Interim_Release_1i_RC6:1.2
	Interim_Release_1i_RC3:1.2
	Interim_Release_1i_RC2:1.2
	Interim_Release_1i_RC1:1.2
	Interim_Release_1i_beta3:1.2
	Interim_Release_1i_beta2:1.2
	Interim_Release_1i_beta1:1.1
	PublicRelease_1h:1.1
	Interim_Release_1h_rc2:1.1
	Interim_Release_1h_RC1:1.1
	Interim_Release_1h_beta2:1.1
	Interim_Release_1h_beta1_now:1.1
	Interim_Release_1h_beta1:1.1;
locks; strict;
comment	@ * @;


1.4
date	2006.04.04.23.43.28;	author kush_eplus;	state dead;
branches;
next	1.3;

1.3
date	2004.05.05.06.09.20;	author katsyonak;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.08.01.49.48;	author morevit;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.27.19.56.57;	author dongato;	state Exp;
branches;
next	;


desc
@@


1.4
log
@new email notifier code (adapted from original) - fully UNICODE ready
@
text
@/*
Module : Base64Coder.CPP
Purpose: Definition for the Base64 encoder / decoder class
Created: PJN / 20-06-2000
History: None

Copyright (c) 1998 - 2002 by PJ Naughter.  
All rights reserved.

*/

#pragma once

#include "otherfunctions.h"


/////////////////////////////// Defines ///////////////////////////////////////
#ifndef __BASE64CODER_H__
#define __BASE64CODER_H__


/////////////////////////////// Classes ///////////////////////////////////////

class CBase64Coder  
{
public:
//Constructors / Destructors
	CBase64Coder();
	virtual ~CBase64Coder();

//Methods
	virtual void	 Encode(const PBYTE, DWORD);
	virtual void	 Decode(const PBYTE, DWORD);
	virtual void	 Encode(LPCSTR sMessage);
	virtual void	 Decode(LPCSTR sMessage);
	virtual LPSTR  DecodedMessage() const;
	virtual LPSTR  EncodedMessage() const;
	virtual LONG	 DecodedMessageSize() const;
	virtual LONG	 EncodedMessageSize() const;

protected:
// Internal bucket class.
	class TempBucket
	{
	public:
		BYTE		nData[4];
		BYTE		nSize;
		void		Clear() { memzero(nData, 4); nSize = 0; };
	};

//Variables
	PBYTE	m_pDBuffer;
	PBYTE	m_pEBuffer;
	DWORD	m_nDBufLen;
	DWORD	m_nEBufLen;
	DWORD	m_nDDataLen;
	DWORD	m_nEDataLen;
	static char m_DecodeTable[256];
	static BOOL m_Init;

//Methods
	virtual void	 AllocEncode(DWORD);
	virtual void	 AllocDecode(DWORD);
	virtual void	 SetEncodeBuffer(const PBYTE pbyteBuffer, DWORD nBufLen);
	virtual void	 SetDecodeBuffer(const PBYTE pbyteBuffer, DWORD nBufLen);
	virtual void	_EncodeToBuffer(const TempBucket &Decode, PBYTE pbyteBuffer);
	virtual ULONG	_DecodeToBuffer(const TempBucket &Decode, PBYTE pbyteBuffer);
	virtual void	_EncodeRaw(TempBucket &, const TempBucket &);
	virtual void	_DecodeRaw(TempBucket &, const TempBucket &);
	virtual BOOL	_IsBadMimeChar(BYTE);
	void					_Init();
};


#endif //__BASE64CODER_H__
@


1.3
log
@Connected server is now background highlighted; Aw3 fix for IP2Country constant DB/LIB loading from preferences; Replaced all ZeroMemory with memzero; Replaced all CopyMemory with memcpy2
@
text
@@


1.2
log
@Formatting, comments, and name changes
@
text
@d12 5
d48 1
a48 1
		void		Clear() { ::ZeroMemory(nData, 4); nSize = 0; };
@


1.1
log
@SMTP Messenger: added authentication
@
text
@d59 4
a62 4
	virtual void	 SetEncodeBuffer(const PBYTE pBuffer, DWORD nBufLen);
	virtual void	 SetDecodeBuffer(const PBYTE pBuffer, DWORD nBufLen);
	virtual void	_EncodeToBuffer(const TempBucket &Decode, PBYTE pBuffer);
	virtual ULONG	_DecodeToBuffer(const TempBucket &Decode, PBYTE pBuffer);
@

