head	1.2;
access;
symbols
	Interim_Release_1h_beta1_now:1.1
	Interim_Release_1h_beta1:1.1;
locks; strict;
comment	@// @;


1.2
date	2003.08.23.00.20.51;	author forcha;	state dead;
branches;
next	1.1;

1.1
date	2003.08.03.20.49.13;	author forcha;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@// TabListWnd.cpp : implementation file
//

#include "stdafx.h"
#include "TabListWnd.h"
#include ".\tablistwnd.h"

// CTabListWnd

IMPLEMENT_DYNAMIC(CTabListWnd, CWnd)
CTabListWnd::CTabListWnd()
: m_pListCtrl(NULL)
, m_pTabs(NULL)
{
}

CTabListWnd::~CTabListWnd()
{
}


BEGIN_MESSAGE_MAP(CTabListWnd, CWnd)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_SHOWWINDOW()
	ON_WM_ENABLE()
	ON_WM_PAINT()
END_MESSAGE_MAP()



// CTabListWnd message handlers


int CTabListWnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CWnd::OnCreate(lpCreateStruct) == -1)
		return -1;
	return 0;
}

void CTabListWnd::OnSize(UINT nType, int cx, int cy)
{
	CWnd::OnSize(nType, cx, cy);

	CRect rClient;
	GetClientRect(rClient);

	CRect rWindow;
	GetWindowRect(rWindow);

	BOOL bShowTabs = FALSE;

	if(m_pTabs)
	{
		CRect rTabs = rClient;

		CWnd *pParent = m_pTabs->GetParent();
		if(pParent)
		{
			ClientToScreen(&rTabs);
			pParent->ScreenToClient(&rTabs);
		}
		m_pTabs->SetWindowPos(NULL, rTabs.left, rTabs.top,
			rTabs.Width(), rTabs.Height(), SWP_NOZORDER|SWP_SHOWWINDOW);
		bShowTabs = TRUE;
	}

	if(m_pListCtrl)
	{
		CRect rListRect;

		if(bShowTabs)
		{
			CRect rItem;
			m_pTabs->GetClientRect(rListRect);
			m_pTabs->GetItemRect(0,rItem);
			
			if(m_pTabs->GetStyle() & TCS_BOTTOM)
			{
				rListRect.bottom = rItem.top-1;
			}
			else
			{
				rListRect.top = rItem.bottom;
				rListRect.InflateRect(0,-2,2,2);
			}
		}
		else
		{	
			rListRect = rClient;
		}
		
		CWnd *pParent = m_pListCtrl->GetParent();
		if(pParent)
		{
			ClientToScreen(&rListRect);
			pParent->ScreenToClient(&rListRect);
		}
		
		m_pListCtrl->SetWindowPos(NULL, rListRect.left, rListRect.top, 
			rListRect.Width(), rListRect.Height(), SWP_NOZORDER|SWP_SHOWWINDOW);
	}
}

void CTabListWnd::OnShowWindow(BOOL bShow, UINT nStatus)
{
//	CWnd::OnShowWindow(bShow, nStatus);
	ShowWindow(SW_HIDE);
	if(bShow)
	{
		if(m_pTabs)
			m_pTabs->ShowWindow(SW_SHOW);
		if(m_pListCtrl)
			m_pListCtrl->ShowWindow(SW_SHOW);
	}
	else
	{
		if(m_pTabs)
			m_pTabs->ShowWindow(SW_HIDE);
		if(m_pListCtrl)
			m_pListCtrl->ShowWindow(SW_HIDE);
	}
}

void CTabListWnd::OnEnable(BOOL bEnable)
{
	CWnd::OnEnable(bEnable);

	if(m_pTabs)
		m_pTabs->EnableWindow(bEnable);
	if(m_pListCtrl)
		m_pListCtrl->EnableWindow(bEnable);
}

void CTabListWnd::OnPaint()
{
	CPaintDC dc(this); // device context for painting
}
@


1.1
log
@*** empty log message ***
@
text
@@

