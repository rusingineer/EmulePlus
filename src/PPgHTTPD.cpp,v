head	1.45;
access;
symbols
	PublicRelease_1_2e:1.45
	Interim_Release_1-2e_RC1:1.44
	PublicRelease_1_2d:1.44
	Interim_Release_1-2d_RC1:1.43
	Interim_Release_1-2d_beta1:1.42
	PublicRelease_1_2c:1.41
	Interim_Release_1-2c_RC1:1.41
	Interim_Release_1-2c_beta1:1.40
	PublicRelease_1_2b:1.39
	Interim_Release_1-2b_RC1:1.39
	PublicRelease_1_2a:1.39
	Interim_Release_1-2a_RC1:1.39
	Interim_Release_1-2a_beta2:1.39
	Interim_Release_1-2a_beta1:1.39
	PublicRelease_1_2:1.39
	Interim_Release_1-2_RC1:1.39
	Interim_Release_1-2_beta1:1.39
	PublicRelease_1_1g:1.39
	Interim_Release_1-1g_RC3:1.39
	Interim_Release_1-1g_RC2:1.39
	Interim_Release_1-1g_RC1:1.39
	Interim_Release_1-1g_beta2:1.38
	Interim_Release_1-1g_beta1:1.38
	PublicRelease_1_1f:1.37
	Interim_Release_1-1f_RC1:1.37
	PublicRelease_1_1e:1.37
	Interim_Release_1-1e_RC2:1.37
	Interim_Release_1-1e_RC1:1.37
	Interim_Release_1-1e_beta1:1.37
	PublicRelease_1_1d:1.37
	Interim_Release_1-1d_RC1:1.37
	PublicRelease_1_1c:1.37
	Interim_Release_1-1c_RC1:1.37
	Interim_Release_1-1c_beta2:1.37
	Interim_Release_1-1c_beta1:1.37
	PublicRelease_1_1b:1.37
	Interim_Release_1-1b_RC1:1.37
	PublicRelease_1_1a:1.37
	Interim_Release_1-1a_RC2:1.37
	Interim_Release_1-1a_RC1:1.37
	Interim_Release_1-1a_beta2:1.37
	Interim_Release_1-1a_beta1:1.37
	PublicRelease_1_1:1.37
	Interim_Release_1-1_beta1:1.37
	PublicRelease_1o:1.35
	Interim_Release_1o_RC1:1.35
	Interim_Release_1o_beta1:1.35
	PublicRelease_1n:1.34
	Interim_Release_1n_RC2:1.34
	Interim_Release_1n_RC1:1.34
	Interim_Release_1n_beta2:1.34
	Interim_Release_1n_beta1:1.34
	PublicRelease_1m:1.34
	Interim_Release_1m_beta1:1.34
	PublicRelease_1l:1.32
	Interim_Release_1l_RC3:1.32
	Interim_Release_1l_RC2:1.32
	Interim_Release_1l_RC1:1.32
	Interim_Release_1l_beta2:1.32
	Interim_Release_1l_beta1:1.32
	PublicRelease_1k:1.32
	Interim_Release_1k_RC4:1.32
	Interim_1k_RC3:1.32
	Interim_1k_RC2:1.32
	Interim_Release_1k_RC1:1.32
	Interim_Release_1k_beta5:1.32
	Intrerim_Release_1k_beta4:1.32
	Interim_Release_1k_beta1:1.31
	PublicRelease_1j:1.30
	Interim_Release_1J_RC3:1.30
	Interim_Release_1j_RC3:1.30
	Interim_Release_1j_RC2:1.30
	Interim_Release_1j_RC1:1.30
	Interim_Release_1j_beta2:1.30
	Interim_Release_1j_beta1:1.30
	PublicRelease_1i:1.30
	Interim_Release_1i_RC6:1.30
	Interim_Release_1i_RC3:1.29
	Interim_Release_1i_RC2:1.29
	Interim_Release_1i_RC1:1.29
	Interim_Release_1i_beta3:1.29
	Interim_Release_1i_beta2:1.29
	Interim_Release_1i_beta1:1.29
	PublicRelease_1h:1.27
	Interim_Release_1h_rc2:1.27
	Interim_Release_1h_RC1:1.27
	Interim_Release_1h_beta2:1.27
	Interim_Release_1h_beta1_now:1.25
	Interim_Release_1h_beta1:1.25
	PublicRelease_1g:1.21
	Interim_Release_1g_RC6_Final:1.21
	Interim_Release_1g_RC6:1.21
	Interim_Release_1g_RC5:1.21
	Interim_Release_1g_RC4:1.17
	Interim_Release_1g_RC3:1.16
	Interim_Release_1g_beta2:1.12
	Interim_Release_1g_beta1:1.12
	Interim_Release_1f_RC4:1.12
	Interim_Release_1f_RC3:1.12
	Interim_Release_1f_RC2:1.12
	Interim_Release_1f_RC:1.12
	Interim_Release_1f_beta2:1.12
	Interim_Release_1f_beta1:1.12
	PublicRelease_1e:1.12
	Interim_Release_1e_RC2:1.12
	Interim_Release_1e_RC:1.12
	Interim_Release_1e_beta3:1.12
	Interim_Release_1e_beta2:1.12
	Interim_Release_1e_beta2_before_kuchin:1.11
	Interim_Release_1e_beta1:1.10
	PublicRelease_1c:1.7
	featurestest:1.7.0.2
	Interim_Release_1c_RC:1.7
	Interim_Release_1c_beta2:1.7
	Interim_Release_1c_beta1:1.6
	threaded_downloadqueue:1.6.0.2
	PublicRelease_1b:1.5
	Interim_Release_1b_beta2:1.5
	Interim_Release_1b_beta1:1.4
	proxydeadlake:1.4.0.4
	PublicRelease_1a:1.4
	Interim_Release_1a_beta2:1.4
	BerkeleyDb:1.4.0.2
	Interim_Release_1a_beta1:1.4
	PublicRelease_1:1.4
	goldfish:1.4
	eMulePlus_1_RC2:1.3
	eMulePlus_26b_1RC1:1.3
	PreRelease_26b_i0e:1.3
	before_26d_merge:1.3
	Interim_Release_26b_i0d:1.2
	Interim_Release_26b_i0c:1.2
	Interim_Release_26b_i0b:1.2
	Interim_Release_26b_i0a:1.2
	systraydlg:1.2.0.4
	plus26based:1.2.0.2
	Interim_Release_25b_i0b:1.2
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.45
date	2009.04.08.04.05.38;	author aw3;	state Exp;
branches;
next	1.44;

1.44
date	2008.04.28.04.18.27;	author aw3;	state Exp;
branches;
next	1.43;

1.43
date	2008.03.02.14.14.03;	author aw3;	state Exp;
branches;
next	1.42;

1.42
date	2008.02.18.03.40.13;	author aw3;	state Exp;
branches;
next	1.41;

1.41
date	2007.04.02.23.14.14;	author kush_eplus;	state Exp;
branches;
next	1.40;

1.40
date	2007.02.18.05.30.14;	author aw3;	state Exp;
branches;
next	1.39;

1.39
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.38;

1.38
date	2005.08.04.03.34.41;	author aw3;	state Exp;
branches;
next	1.37;

1.37
date	2004.10.15.17.01.57;	author aw3;	state Exp;
branches;
next	1.36;

1.36
date	2004.10.13.01.36.59;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2004.09.13.23.50.57;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2004.06.19.05.29.18;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2004.06.15.17.43.04;	author aw3;	state Exp;
branches;
next	1.32;

1.32
date	2004.02.26.10.03.17;	author dongato;	state Exp;
branches;
next	1.31;

1.31
date	2004.02.13.16.13.35;	author netwolf1;	state Exp;
branches;
next	1.30;

1.30
date	2003.12.02.04.33.13;	author katsyonak;	state Exp;
branches;
next	1.29;

1.29
date	2003.09.22.16.40.49;	author morevit;	state Exp;
branches;
next	1.28;

1.28
date	2003.09.20.15.39.31;	author morevit;	state Exp;
branches;
next	1.27;

1.27
date	2003.08.24.15.55.18;	author bond006;	state Exp;
branches;
next	1.26;

1.26
date	2003.08.23.13.10.55;	author forcha;	state Exp;
branches;
next	1.25;

1.25
date	2003.08.10.16.42.02;	author kuchin;	state Exp;
branches;
next	1.24;

1.24
date	2003.07.30.12.29.31;	author kuchin;	state Exp;
branches;
next	1.23;

1.23
date	2003.07.29.20.19.19;	author dongato;	state Exp;
branches;
next	1.22;

1.22
date	2003.07.28.13.25.33;	author dongato;	state Exp;
branches;
next	1.21;

1.21
date	2003.07.11.00.57.27;	author dongato;	state Exp;
branches;
next	1.20;

1.20
date	2003.07.09.19.37.59;	author partyckip;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.09.19.32.13;	author partyckip;	state Exp;
branches;
next	1.18;

1.18
date	2003.07.08.21.51.13;	author partyckip;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.08.00.04.59;	author netwolf1;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.23.21.55.16;	author partyckip;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.22.14.21.10;	author dongato;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.22.13.18.17;	author kuchin;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.15.09.10.05;	author partyckip;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.22.12.41.51;	author kuchin;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.19.07.17.00;	author kuchin;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.05.09.35.17;	author dongato;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.03.10.12.16;	author kuchin;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.23.19.17.49;	author emoulari;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.19.15.35.39;	author cax2;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2003.03.14.16.24.20;	author partyckip;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.08.08.12.24;	author kuchin;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.20.12.15.48;	author kuchin;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.16.22.01.48;	author lord_kiron;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.02.13.27.42;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.21;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.21;	author cax2;	state Exp;
branches;
next	;

1.7.2.1
date	2003.03.24.09.39.43;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.45
log
@Reduced H-file dependency.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "PPgHTTPD.h"
#include "WebServer.h"
#include "otherfunctions.h"
#include "AddBuddy.h"
#include "MMServer.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif


#define HIDDEN_PASSWORD _T("*****")

IMPLEMENT_DYNAMIC(CPPgHTTPD, CPropertyPage)
CPPgHTTPD::CPPgHTTPD()
	: CPropertyPage(CPPgHTTPD::IDD)
	, m_bWSEnabled(FALSE)
	, m_bWSGuestEnabled(FALSE)
	, m_bWSIntruderDetectEnabled(FALSE)
	, m_bMMEnabled(FALSE)
	, m_strWSPasswd(HIDDEN_PASSWORD)
	, m_strWSGuestPasswd(HIDDEN_PASSWORD)
	, m_strMMPasswd(HIDDEN_PASSWORD)
{
}

CPPgHTTPD::~CPPgHTTPD()
{
}

void CPPgHTTPD::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_HTTPDPORT, m_strWSPort);
	DDX_Text(pDX, IDC_HTTPDPASS, m_strWSPasswd);
	DDX_Text(pDX, IDC_HTTPDPASSLOW, m_strWSGuestPasswd);
	DDX_Text(pDX, IDC_TMPLPATH, m_strTmplPath);
	DDX_Check(pDX, IDC_HTTPDENABLED, m_bWSEnabled);
	DDX_Check(pDX, IDC_HTTPDENABLEDLOW, m_bWSGuestEnabled);
	DDX_Check(pDX, IDC_HTTPDINTRUDERDETECTION, m_bWSIntruderDetectEnabled);
	DDX_Text(pDX, IDC_HTTPDTEMPDISABLELOGIN, m_strTempDisableLogin);
	DDX_Text(pDX, IDC_HTTPDLOGINATTEMPTSALLOWED, m_strLoginAttemptsAllowed);
	DDX_Text(pDX, IDC_MMPORT, m_strMMPort);
	DDX_Text(pDX, IDC_MMPASS, m_strMMPasswd);
	DDX_Check(pDX, IDC_MMENABLED, m_bMMEnabled);
}

BEGIN_MESSAGE_MAP(CPPgHTTPD, CPropertyPage)
	ON_EN_CHANGE(IDC_HTTPDPASS, OnDataChange)
	ON_EN_CHANGE(IDC_HTTPDPASSLOW, OnDataChange)
	ON_EN_CHANGE(IDC_HTTPDPORT, OnDataChange)
	ON_EN_CHANGE(IDC_TMPLPATH, OnDataChange)
	ON_BN_CLICKED(IDC_HTTPDENABLED, OnEnChangeHTTPDEnabled)
	ON_BN_CLICKED(IDC_HTTPDENABLEDLOW, OnEnChangeHTTPDGuestEnabled)
	ON_BN_CLICKED(IDC_HTTPDRELOADTMPL, OnReloadTemplates)
	ON_EN_CHANGE(IDC_HTTPDLOGINATTEMPTSALLOWED, OnDataChange)
	ON_EN_CHANGE(IDC_HTTPDTEMPDISABLELOGIN, OnDataChange)
	ON_BN_CLICKED(IDC_HTTPDINTRUDERDETECTION, OnEnChangeIntruderDetection)
	ON_BN_CLICKED(IDC_TMPLBROWSE, OnBnClickedTmplbrowse)
	ON_EN_CHANGE(IDC_MMPORT, OnDataChange)
	ON_EN_CHANGE(IDC_MMPASS, OnDataChange)
	ON_BN_CLICKED(IDC_MMENABLED, OnEnChangeMMEnabled)
END_MESSAGE_MAP()

BOOL CPPgHTTPD::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	CWnd	*pWnd = (reinterpret_cast<CEdit*>(GetDlgItem(IDC_TMPLPATH)));

	(reinterpret_cast<CEdit*>(GetDlgItem(IDC_HTTPDPASS)))->SetLimitText(32);
	(reinterpret_cast<CEdit*>(GetDlgItem(IDC_HTTPDPASSLOW)))->SetLimitText(32);
	(reinterpret_cast<CEdit*>(GetDlgItem(IDC_HTTPDPORT)))->SetLimitText(5);
	(reinterpret_cast<CEdit*>(pWnd))->SetLimitText(MAX_PATH);
	(reinterpret_cast<CEdit*>(GetDlgItem(IDC_HTTPDLOGINATTEMPTSALLOWED)))->SetLimitText(2);
	(reinterpret_cast<CEdit*>(GetDlgItem(IDC_HTTPDTEMPDISABLELOGIN)))->SetLimitText(2);
	(reinterpret_cast<CEdit*>(GetDlgItem(IDC_MMPORT)))->SetLimitText(5);
	(reinterpret_cast<CEdit*>(GetDlgItem(IDC_MMPASS)))->SetLimitText(32);

	AddBuddy(pWnd->m_hWnd, ::GetDlgItem(m_hWnd, IDC_TMPLBROWSE), BDS_RIGHT);

	LoadSettings();
	Localize();

	return TRUE;
}

void CPPgHTTPD::LoadSettings(void)
{
	m_strWSPort.Format(_T("%u"), m_pPrefs->GetWSPort());
	m_strMMPort.Format(_T("%u"), m_pPrefs->GetMMPort());
	
	m_strTmplPath = m_pPrefs->GetTemplate();
	m_bWSEnabled = m_pPrefs->GetWSIsEnabled();
	m_bWSGuestEnabled = m_pPrefs->GetWSIsLowUserEnabled();
	m_bMMEnabled = m_pPrefs->IsMMServerEnabled();

	m_bWSIntruderDetectEnabled = m_pPrefs->IsWSIntruderDetectionEnabled();

	m_strTempDisableLogin.Format(_T("%u"), m_pPrefs->GetWSTempDisableLogin());
	m_strLoginAttemptsAllowed.Format(_T("%u"), m_pPrefs->GetWSLoginAttemptsAllowed());	

	UpdateData(FALSE);

	OnEnChangeMMEnabled();
	OnEnChangeHTTPDEnabled();

	SetModified(FALSE);
}

BOOL CPPgHTTPD::OnApply()
{
	if(m_bModified)
	{
		UpdateData(TRUE);
		
		if (m_strWSPasswd != HIDDEN_PASSWORD)
			m_pPrefs->SetWSPass(m_strWSPasswd);

		if (m_strWSGuestPasswd != HIDDEN_PASSWORD)
			m_pPrefs->SetWSLowPass(m_strWSGuestPasswd);

		if (m_strMMPasswd != HIDDEN_PASSWORD)
			m_pPrefs->SetMMPass(m_strMMPasswd);

		uint32	dwVal;

		if (((dwVal = _tstoi(m_strMMPort)) - 1u) > 0xFFFEu)	//	Valid values range is 1..65535
			dwVal = m_pPrefs->GetMMPort();
		if (dwVal != m_pPrefs->GetMMPort())
		{
#ifdef OLD_SOCKETS_ENABLED
			m_pPrefs->SetMMPort(static_cast<uint16>(dwVal));
			g_App.m_pMMServer->StopServer();
			g_App.m_pMMServer->Init();
#endif
		}

		if (((dwVal = _tstoi(m_strWSPort)) - 1u) > 0xFFFEu)	//	Valid values range is 1..65535
			dwVal = m_pPrefs->GetWSPort();
		if (dwVal != m_pPrefs->GetWSPort())
		{
			m_pPrefs->SetWSPort(static_cast<uint16>(dwVal));
			g_App.m_pWebServer->RestartServer();
		}
		m_pPrefs->SetWSIsEnabled(B2b(m_bWSEnabled));
		m_pPrefs->SetWSIsLowUserEnabled(B2b(m_bWSGuestEnabled));
		m_pPrefs->SetMMIsEnabled(B2b(m_bMMEnabled));
		m_pPrefs->SetTemplate(m_strTmplPath);
		m_pPrefs->SetWSIntruderDetectionEnabled(B2b(m_bWSIntruderDetectEnabled));

		dwVal = _tstoi(m_strTempDisableLogin);
		for (;;)
		{
			if (dwVal > PREF_MAX_WSDISABLELOGIN)
				dwVal = PREF_MAX_WSDISABLELOGIN;
			else if ((dwVal - 1u) <= (PREF_MIN_WSDISABLELOGIN - 1))	// < min & != 0
				dwVal = PREF_MIN_WSDISABLELOGIN;
			else
				break;
			m_strTempDisableLogin.Format(_T("%u"), dwVal);
			break;
		}
		m_pPrefs->SetWSTempDisableLogin(dwVal);

		dwVal = _tstoi(m_strLoginAttemptsAllowed);
		for (;;)
		{
			if (dwVal > PREF_MAX_WSBADLOGINTRIES)
				dwVal = PREF_MAX_WSBADLOGINTRIES;
			else if (dwVal < PREF_MIN_WSBADLOGINTRIES)
				dwVal = PREF_MIN_WSBADLOGINTRIES;
			else
				break;
			m_strLoginAttemptsAllowed.Format(_T("%u"), dwVal);
			break;
		}
		m_pPrefs->SetWSLoginAttemptsAllowed(dwVal);

#ifdef OLD_SOCKETS_ENABLED
		if (m_bMMEnabled)
			g_App.m_pMMServer->Init();
		else
			g_App.m_pMMServer->StopServer();
#endif

		UpdateData(FALSE);

		g_App.m_pWebServer->StartServer();

		SetModified(FALSE);
	}

	return CPropertyPage::OnApply();
}

void CPPgHTTPD::Localize(void)
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_HTTPDPASS_LBL, IDS_PASSWORD },
		{ IDC_HTTPDPORT_LBL, IDS_PORT },
		{ IDC_HTTPDENABLED, IDS_ENABLED },
		{ IDC_HTTPDRELOADTMPL, IDS_HTTPD_RELOAD_TMPL },
		{ IDC_HTTPDPASS_LBL2, IDS_PASSWORD },
		{ IDC_STATIC_GENERAL, IDS_PW_GENERAL },
		{ IDC_HTTPDTEMPLATE_LBL, IDS_TEMPLATE },
		{ IDC_STATIC_LOWUSER, IDS_WEB_LOWUSER },
		{ IDC_HTTPDENABLEDLOW, IDS_ENABLED },
		{ IDC_STATIC_INTRUDER, IDS_INTR },
		{ IDC_HTTPDINTRUDERDETECTION, IDS_ENABLED },
		{ IDC_INTR_LOGIN, IDS_INTR_LOGIN },
		{ IDC_INTR_TIME, IDS_INTR_TIME },
		{ IDC_INTR_DISABLE, IDS_INTR_DISABLE },
		{ IDC_MMENABLED, IDS_ENABLED },
		{ IDC_MMPASSWORD, IDS_PASSWORD },
		{ IDC_MMPORT_LBL, IDS_PORT }
	};

	if (::IsWindow(m_hWnd))
	{
		CString	strRes;

		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl[i][1]));
			SetDlgItemText(s_auResTbl[i][0], strRes);
		}
	}
}

void CPPgHTTPD::OnEnChangeMMEnabled()
{
	UpdateData(TRUE);
	GetDlgItem(IDC_MMPASS)->EnableWindow(m_bMMEnabled);
	GetDlgItem(IDC_MMPORT)->EnableWindow(m_bMMEnabled);
	SetModified();
}

void CPPgHTTPD::OnEnChangeHTTPDEnabled()
{
	OnEnChangeIntruderDetection();

	GetDlgItem(IDC_HTTPDPASS)->EnableWindow(m_bWSEnabled);
	GetDlgItem(IDC_HTTPDPORT)->EnableWindow(m_bWSEnabled);
	GetDlgItem(IDC_HTTPDRELOADTMPL)->EnableWindow(m_bWSEnabled);
	GetDlgItem(IDC_HTTPDENABLEDLOW)->EnableWindow(m_bWSEnabled);
	GetDlgItem(IDC_HTTPDPASSLOW)->EnableWindow(m_bWSEnabled && m_bWSGuestEnabled);
	GetDlgItem(IDC_HTTPDINTRUDERDETECTION)->EnableWindow(m_bWSEnabled);
	GetDlgItem(IDC_TMPLPATH)->EnableWindow(m_bWSEnabled);
	GetDlgItem(IDC_TMPLBROWSE)->EnableWindow(m_bWSEnabled);
	SetModified();
}

void CPPgHTTPD::OnReloadTemplates()
{
	UpdateData(TRUE);
	m_pPrefs->SetTemplate(m_strTmplPath);
	g_App.m_pWebServer->ReloadTemplates();
}

void CPPgHTTPD::OnBnClickedTmplbrowse()
{
	CString	strBuf(GetResString(IDS_TEMPLATE));

	strBuf += _T(" (*.tmpl)|*.tmpl||");

	UpdateData(TRUE);
	if (DialogBrowseFile(m_strTmplPath, strBuf, NULL, OFN_FILEMUSTEXIST, true, g_App.m_pPrefs->GetAppDir()))
	{
		UpdateData(FALSE);
		SetModified();
	}
}

void CPPgHTTPD::OnEnChangeHTTPDGuestEnabled()
{
	UpdateData(TRUE);

	GetDlgItem(IDC_HTTPDPASSLOW)->EnableWindow(m_bWSGuestEnabled);

	SetModified();
}

void CPPgHTTPD::OnEnChangeIntruderDetection()
{
	UpdateData(TRUE);

	GetDlgItem(IDC_HTTPDTEMPDISABLELOGIN)->EnableWindow(m_bWSEnabled && m_bWSIntruderDetectEnabled);
	GetDlgItem(IDC_HTTPDLOGINATTEMPTSALLOWED)->EnableWindow(m_bWSEnabled && m_bWSIntruderDetectEnabled);

	SetModified();
}
@


1.44
log
@Fixed applying of some preferences settings when several are altered at once {Vladimir (SV)} (directory browse was undoing other changes).
@
text
@d20 1
@


1.43
log
@Selected file for reading should exist - let open dialog verify that (skin, WS templates, notify wav, antivirus exe).
@
text
@d286 2
@


1.42
log
@Optimized dialog regarding required memory and speed; Added more sanity checks for input;
Removed old not used localization; Suppressed compiler warnings; Formatting.
@
text
@d286 1
a286 1
	if (DialogBrowseFile(m_strTmplPath, strBuf, NULL, 0, true, g_App.m_pPrefs->GetAppDir()))
@


1.41
log
@Removed unneeded CString initializations.
@
text
@d1 15
a15 1
// PPgHTTPD.cpp : implementation file
d36 7
a42 4
	, httpdEnabled(FALSE)
	, httpdEnabledLow(FALSE)
	, httpdIntruderDetectEnabled(FALSE)
	, mmEnabled(FALSE)
d53 12
a64 38
	DDX_Text(pDX, IDC_HTTPDPORT, httpdPort);
	DDX_Text(pDX, IDC_HTTPDPASS, httpdPass);
	DDX_Text(pDX, IDC_HTTPDPASSLOW, httpdPassLow);
	DDX_Text(pDX, IDC_TMPLPATH, tmplPath);
	DDX_Check(pDX, IDC_HTTPDENABLED, httpdEnabled);
	DDX_Check(pDX, IDC_HTTPDENABLEDLOW, httpdEnabledLow);
	DDX_Check(pDX, IDC_HTTPDINTRUDERDETECTION, httpdIntruderDetectEnabled);
	DDX_Text(pDX, IDC_HTTPDTEMPDISABLELOGIN, tempDisableLogin);
	DDX_Text(pDX, IDC_HTTPDLOGINATTEMPTSALLOWED, loginAttemptsAllowed);
	DDX_Control(pDX, IDC_HTTPDPORT, httpdPortEdit);
	DDX_Control(pDX, IDC_TMPLPATH, tmplPathEdit);
	DDX_Control(pDX, IDC_HTTPDPASS, httpdPassEdit);
	DDX_Control(pDX, IDC_HTTPDPASSLOW, httpdPassLowEdit);
	DDX_Control(pDX, IDC_HTTPDLOGINATTEMPTSALLOWED, loginAttemptsAllowedEdit);
	DDX_Control(pDX, IDC_HTTPDTEMPDISABLELOGIN, tempDisableLoginEdit);
	DDX_Control(pDX, IDC_TMPLBROWSE, tmplBrowseButton);
	DDX_Control(pDX, IDC_HTTPDINTRUDERDETECTION, intruderDetectionCheck);
	DDX_Control(pDX, IDC_HTTPDRELOADTMPL, httpdReloadTmplButton);
	DDX_Control(pDX, IDC_HTTPDENABLEDLOW, httpdEnabledLowCheck);
	DDX_Text(pDX, IDC_STATIC_GENERAL, generalDesc);
	DDX_Text(pDX, IDC_STATIC_LOWUSER, lowUserDesc);
	DDX_Text(pDX, IDC_STATIC_INTRUDER, intruderDesc);
	DDX_Control(pDX, IDC_HTTPDENABLED, httpdEnabledCheck);
	DDX_Text(pDX, IDC_HTTPDTEMPLATE_LBL, templateDesc);
	DDX_Text(pDX, IDC_HTTPDPASS_LBL, adminPassDesc);
	DDX_Text(pDX, IDC_HTTPDPASS_LBL2, lowUserPassDesc);
	DDX_Text(pDX, IDC_HTTPDPORT_LBL, portDesc);
	DDX_Text(pDX, IDC_MMPORT_LBL, mmPortDesc);
	DDX_Text(pDX, IDC_MMPASSWORD, mmPassDesc);
	DDX_Text(pDX, IDC_INTR_LOGIN, intrLoginDesc);
	DDX_Text(pDX, IDC_INTR_TIME, intrTimeDesc);
	DDX_Text(pDX, IDC_INTR_DISABLE, intrDisableDesc);
	DDX_Text(pDX, IDC_MMPORT, mmPort);
	DDX_Text(pDX, IDC_MMPASS, mmPass);
	DDX_Check(pDX, IDC_MMENABLED, mmEnabled);
	DDX_Control(pDX, IDC_MMPORT, mmPortEdit);
	DDX_Control(pDX, IDC_MMPASS, mmPassEdit);
	DDX_Control(pDX, IDC_MMENABLED, mmEnabledCheck);
d88 1
a88 8
	httpdPassEdit.SetLimitText(12);
	httpdPassLowEdit.SetLimitText(12);
	httpdPortEdit.SetLimitText(5);
	tmplPathEdit.SetLimitText(MAX_PATH);
	loginAttemptsAllowedEdit.SetLimitText(2);
	tempDisableLoginEdit.SetLimitText(2);
	mmPortEdit.SetLimitText(5);
	mmPassEdit.SetLimitText(12);
d90 10
a99 1
	AddBuddy(tmplPathEdit.m_hWnd, tmplBrowseButton.m_hWnd, BDS_RIGHT);
d109 2
a110 5
	httpdPass = HIDDEN_PASSWORD;
	httpdPassLow = HIDDEN_PASSWORD;
	mmPass = HIDDEN_PASSWORD;
	httpdPort.Format(_T("%u"), m_pPrefs->GetWSPort());
	mmPort.Format(_T("%u"), m_pPrefs->GetMMPort());
d112 4
a115 6
	tmplPath = m_pPrefs->GetTemplate();
	httpdEnabled = m_pPrefs->GetWSIsEnabled();
	httpdEnabledLow = m_pPrefs->GetWSIsLowUserEnabled();
	mmEnabled = m_pPrefs->IsMMServerEnabled();

	httpdIntruderDetectEnabled = m_pPrefs->IsWSIntruderDetectionEnabled();
d117 1
a117 1
	tempDisableLogin.Format(_T("%u"), m_pPrefs->GetWSTempDisableLogin());
d119 2
a120 1
	loginAttemptsAllowed.Format(_T("%u"), m_pPrefs->GetWSLoginAttemptsAllowed());	
d136 2
a137 2
		if(httpdPass != HIDDEN_PASSWORD)
			m_pPrefs->SetWSPass(httpdPass);
d139 2
a140 2
		if(httpdPassLow != HIDDEN_PASSWORD)
			m_pPrefs->SetWSLowPass(httpdPassLow);
d142 2
a143 2
		if(mmPass != HIDDEN_PASSWORD)
			m_pPrefs->SetMMPass(mmPass);
a144 1
		uint16	uNewPort;
d147 3
a149 2
		uNewPort = _tstoi(mmPort);
		if (uNewPort != m_pPrefs->GetMMPort())
d152 1
a152 1
			m_pPrefs->SetMMPort(uNewPort);
d155 1
a155 1
#endif //OLD_SOCKETS_ENABLED
d158 3
a160 2
		uNewPort = _tstoi(httpdPort);
		if (uNewPort != m_pPrefs->GetWSPort())
d162 1
a162 1
			m_pPrefs->SetWSPort(uNewPort);
d165 5
a169 6
		m_pPrefs->SetWSIsEnabled(httpdEnabled);
		m_pPrefs->SetWSIsLowUserEnabled(httpdEnabledLow);
		m_pPrefs->SetMMIsEnabled(mmEnabled);

		m_pPrefs->SetTemplate(tmplPath);
		m_pPrefs->SetWSIntruderDetectionEnabled(httpdIntruderDetectEnabled);
d171 2
a172 2
		dwVal = _tstoi(tempDisableLogin);
		if (dwVal > 60)
d174 8
a181 7
			dwVal = 60;
			tempDisableLogin = _T("60");
		}
		else if ((dwVal - 1u) <= 4u)	// < 5 & != 0
		{
			dwVal = 5;
			tempDisableLogin = _T("5");
d185 2
a186 7
		dwVal = _tstoi(loginAttemptsAllowed);
		if (dwVal > 5)
		{
			dwVal = 5;
			loginAttemptsAllowed = _T("5");
		}
		else if (dwVal < 2)
d188 8
a195 2
			dwVal = 2;
			loginAttemptsAllowed = _T("2");
d197 1
a197 1
		m_pPrefs->SetWSLoginAttemptsAllowed(static_cast<byte>(dwVal));
d200 1
a200 1
		if (mmEnabled)
d204 1
a204 1
#endif //OLD_SOCKETS_ENABLED
d218 1
a218 1
	if(::IsWindow(m_hWnd))
d220 18
a237 1
		CString	strEnabled = GetResString(IDS_ENABLED);
d239 3
a241 22
		SetWindowText(GetResString(IDS_PW_HTTPD));
		GetResString(&adminPassDesc, IDS_PASSWORD);
		GetResString(&portDesc, IDS_PORT);
		httpdEnabledCheck.SetWindowText(strEnabled);
		httpdReloadTmplButton.SetWindowText(GetResString(IDS_HTTPD_RELOAD_TMPL));

		GetResString(&lowUserPassDesc, IDS_PASSWORD);
		GetResString(&generalDesc, IDS_PW_GENERAL);

		GetResString(&templateDesc, IDS_TEMPLATE);
		GetResString(&lowUserDesc, IDS_WEB_LOWUSER);
		httpdEnabledLowCheck.SetWindowText(strEnabled);

		GetResString(&intruderDesc, IDS_INTR);
		intruderDetectionCheck.SetWindowText(strEnabled);
		GetResString(&intrLoginDesc, IDS_INTR_LOGIN);
		GetResString(&intrTimeDesc, IDS_INTR_TIME);
		GetResString(&intrDisableDesc, IDS_INTR_DISABLE);

		mmEnabledCheck.SetWindowText(strEnabled);
		GetResString(&mmPassDesc, IDS_PASSWORD);
		GetResString(&mmPortDesc, IDS_PORT);
d243 5
a247 1
		UpdateData(FALSE);
d254 2
a255 2
	mmPassEdit.EnableWindow(mmEnabled);
	mmPortEdit.EnableWindow(mmEnabled);
d261 1
a261 1
	UpdateData(TRUE);
d263 8
a270 12
	httpdPassEdit.EnableWindow(httpdEnabled);
	httpdPortEdit.EnableWindow(httpdEnabled);
	httpdReloadTmplButton.EnableWindow(httpdEnabled);
	httpdEnabledLowCheck.EnableWindow(httpdEnabled);
	httpdPassLowEdit.EnableWindow(httpdEnabled && httpdEnabledLow);
	intruderDetectionCheck.EnableWindow(httpdEnabled);
	tempDisableLoginEdit.EnableWindow(httpdEnabled && httpdIntruderDetectEnabled);
	loginAttemptsAllowedEdit.EnableWindow(httpdEnabled && httpdIntruderDetectEnabled);
	tmplPathEdit.EnableWindow(httpdEnabled);
	tmplBrowseButton.EnableWindow(httpdEnabled);
	mmPassEdit.EnableWindow(mmEnabled);
	mmPortEdit.EnableWindow(mmEnabled);
d277 1
a277 1
	m_pPrefs->SetTemplate(tmplPath);
d283 1
a283 1
	CString	strBuf = GetResString(IDS_TEMPLATE);
d286 1
a286 1
	if (DialogBrowseFile(tmplPath, strBuf, NULL, 0, true, g_App.m_pPrefs->GetAppDir()))
d297 1
a297 1
	httpdPassLowEdit.EnableWindow(httpdEnabledLow);
d306 2
a307 2
	tempDisableLoginEdit.EnableWindow(httpdIntruderDetectEnabled);
	loginAttemptsAllowedEdit.EnableWindow(httpdIntruderDetectEnabled);
@


1.40
log
@Default browsing directory for WebServer templates and while saving logs (default is main e+ dir) {muleteer};
Some optimization, cleanup and formatting.
@
text
@a21 4
	, httpdPort(_T(""))
	, httpdPass(_T(""))
	, httpdPassLow(_T(""))
	, tmplPath(_T(""))
a24 14
	, tempDisableLogin(_T(""))
	, loginAttemptsAllowed(_T(""))
	, generalDesc(_T(""))
	, templateDesc(_T(""))
	, lowUserDesc(_T(""))
	, intruderDesc(_T(""))
	, adminPassDesc(_T(""))
	, lowUserPassDesc(_T(""))
	, portDesc(_T(""))
	, intrLoginDesc(_T(""))
	, intrTimeDesc(_T(""))
	, intrDisableDesc(_T(""))
	, mmPort(_T(""))
	, mmPass(_T(""))
a25 2
	, mmPassDesc(_T(""))
	, mmPortDesc(_T(""))
@


1.39
log
@renamed 3 variables
@
text
@d149 1
a149 1
	tempDisableLogin.Format(_T("%i"), m_pPrefs->GetWSTempDisableLogin());
d151 1
a151 1
	loginAttemptsAllowed.Format(_T("%i"), m_pPrefs->GetWSLoginAttemptsAllowed());	
d176 2
a177 2
		uint16 oldPort;
		uint16 newPort;
d179 2
a180 3
		oldPort = m_pPrefs->GetMMPort();
		newPort = _tstoi(mmPort);
		if (newPort != oldPort)
d183 1
a183 1
			m_pPrefs->SetMMPort(newPort);
d189 2
a190 3
		oldPort = m_pPrefs->GetWSPort();
		newPort = _tstoi(httpdPort);
		if (newPort != oldPort)
d192 1
a192 1
			m_pPrefs->SetWSPort(newPort);
a199 1

d202 2
a203 7
		int t = _tstoi(tempDisableLogin);
		if (t > 60)
		{
			m_pPrefs->SetWSTempDisableLogin(60);
			tempDisableLogin.Format(_T("%i"), 60);
		}
		else if (t < 5 && t != 0)
d205 2
a206 2
			m_pPrefs->SetWSTempDisableLogin(5);
			tempDisableLogin.Format(_T("%i"), 5);
d208 1
a208 1
		else
d210 2
a211 1
			m_pPrefs->SetWSTempDisableLogin(t);
d213 1
d215 2
a216 2
		int a = _tstoi(loginAttemptsAllowed);
		if (a > 5)
d218 2
a219 2
			m_pPrefs->SetWSLoginAttemptsAllowed(5);
			loginAttemptsAllowed.Format(_T("%i"), 5);
d221 1
a221 1
		else if (a < 2)
d223 2
a224 6
			m_pPrefs->SetWSLoginAttemptsAllowed(2);
			loginAttemptsAllowed.Format(_T("%i"), 2);
		}
		else
		{
			m_pPrefs->SetWSLoginAttemptsAllowed(a);
d226 1
a232 1
		//GetDlgItem(IDC_MMPASSWORDFIELD)->GetWindowText(sBuf);
d314 4
a317 1
	if(DialogBrowseFile(tmplPath, (GetResString(IDS_TEMPLATE) + _T(" (*.tmpl)|*.tmpl||"))))
@


1.38
log
@Slightly cleaned a mess of including one H-file into another.
@
text
@d185 2
a186 2
			g_eMuleApp.m_pMMServer->StopServer();
			g_eMuleApp.m_pMMServer->Init();
d195 1
a195 1
			g_eMuleApp.m_pWebServer->RestartServer();
d239 1
a239 1
			g_eMuleApp.m_pMMServer->Init();
d241 1
a241 1
			g_eMuleApp.m_pMMServer->StopServer();
d247 1
a247 1
		g_eMuleApp.m_pWebServer->StartServer();
d319 1
a319 1
	g_eMuleApp.m_pWebServer->ReloadTemplates();
@


1.37
log
@Removed duplicate string.
@
text
@d8 1
@


1.36
log
@Corrected editbox disabling in Preferences\WebServer.
@
text
@d261 1
a261 1
		GetResString(&adminPassDesc, IDS_HTTPD_PASS);
d266 1
a266 1
		GetResString(&lowUserPassDesc, IDS_HTTPD_PASS);
d280 1
a280 1
		GetResString(&mmPassDesc, IDS_HTTPD_PASS);
@


1.35
log
@Corrected editbox enabling/disabling according to enabled options;
Corrected max. port string length; Whitespace formatting.
@
text
@a155 2
	OnEnChangeHTTPDGuestEnabled();
	OnEnChangeIntruderDetection();
@


1.34
log
@Improved preferences localization; Removed unused string.
@
text
@d1 1
a1 1
// Apfelteig Patch ;-)
d94 1
d118 1
a118 1
	httpdPortEdit.SetLimitText(6);
d122 1
a122 1
	mmPortEdit.SetLimitText(6);
d134 1
a134 1
{	
d138 2
a139 2
	httpdPort.Format(_T("%d"), m_pPrefs->GetWSPort());
	mmPort.Format(_T("%d"), m_pPrefs->GetMMPort());
d149 1
a149 1
	
d163 1
a163 1
{	
d201 1
a201 1
		
d210 1
a210 1
			tempDisableLogin.Format(_T("%i"), 60);			
d215 1
a215 1
			tempDisableLogin.Format(_T("%i"), 5);			
d226 1
a226 1
			loginAttemptsAllowed.Format(_T("%i"), 5);			
d231 1
a231 1
			loginAttemptsAllowed.Format(_T("%i"), 2);			
d268 1
a268 1
		GetResString(&lowUserPassDesc, IDS_HTTPD_PASS);		
d272 1
a272 1
		GetResString(&lowUserDesc, IDS_WEB_LOWUSER);		
d292 2
a293 2
	mmPassEdit.EnableWindow(mmEnabled);	
	mmPortEdit.EnableWindow(mmEnabled);	
d301 2
a302 2
	httpdPassEdit.EnableWindow(httpdEnabled);	
	httpdPortEdit.EnableWindow(httpdEnabled);	
d305 1
a305 1
	httpdPassLowEdit.EnableWindow(httpdEnabled);
d307 2
a308 2
	tempDisableLoginEdit.EnableWindow(httpdEnabled);
	loginAttemptsAllowedEdit.EnableWindow(httpdEnabled);
d311 2
a312 2
	mmPassEdit.EnableWindow(mmEnabled);	
	mmPortEdit.EnableWindow(mmEnabled);	
d320 1
a320 1
	g_eMuleApp.m_pWebServer->ReloadTemplates();	
d324 1
a324 1
{	
@


1.33
log
@Resource string "MobileMule" is removed
(it didn't have translation and it shouldn't be translated).
@
text
@d259 2
d262 3
a264 3
		adminPassDesc = GetResString(IDS_HTTPD_PASS);
		portDesc = GetResString(IDS_PORT);
		httpdEnabledCheck.SetWindowText(GetResString(IDS_ENABLED));
d267 2
a268 2
		lowUserPassDesc = GetResString(IDS_HTTPD_PASS);		
		generalDesc = GetResString(IDS_PW_GENERAL);
d270 13
a282 14
		templateDesc = GetResString(IDS_TEMPLATE);
		lowUserDesc = GetResString(IDS_WEB_LOWUSER);		
		httpdEnabledLowCheck.SetWindowText(GetResString(IDS_ENABLED));

		intruderDesc = GetResString(IDS_INTR);
		intruderDetectionCheck.SetWindowText(GetResString(IDS_ENABLED));
		intrLoginDesc = GetResString(IDS_INTR_LOGIN);
		intrTimeDesc = GetResString(IDS_INTR_TIME);
		intrDisableDesc = GetResString(IDS_INTR_DISABLE);

		mmEnabledCheck.SetWindowText(GetResString(IDS_ENABLED));
		mmMobileMuleDesc = _T("MobileMule");
		mmPassDesc = GetResString(IDS_HTTPD_PASS);
		mmPortDesc = GetResString(IDS_PORT);
@


1.32
log
@Fixed localization issues, removed old non-used code
@
text
@d279 1
a279 1
		mmMobileMuleDesc =  GetResString(IDS_MOBILEMULE);
@


1.31
log
@removed MOBILE_MULE and JUMPSTART defines + minor improvements (thx aw3)
@
text
@d44 1
d82 2
d279 1
a279 1
		mmStatic =  GetResString(IDS_MOBILEMULE);
a327 1

@


1.30
log
@Formatting + minor changes
@
text
@a180 1
#ifdef MOBILE_MULE
a183 1
#endif //MOBILE_MULE
a234 1
#ifdef MOBILE_MULE
a239 1
#endif //MOBILE_MULE
@


1.29
log
@Formatting, comments, and name changes.
@
text
@d137 1
a137 1
	tmplPath = m_pPrefs->GetTemplate();	//netwolf
a141 1
	//Added by Johnny-B 
a146 1
	//End Johnny-B
d155 1
a155 1
	SetModified(FALSE);	// FoRcHa
d178 2
a179 1
		if (newPort != oldPort) {
d191 2
a192 1
		if (newPort != oldPort) {
a201 1
		//Added by Johnny-B
d205 2
a206 1
		if (t > 60) {
d209 3
a211 1
		} else if (t < 5 && t != 0) {
d214 3
a216 1
		} else {
d221 2
a222 1
		if (a > 5) {
d225 3
a227 1
		} else if (a < 2) {
d230 3
a232 1
		}else{
a234 1
		//End Johnny-B
a235 1
		// mobilemule
d258 2
a259 1
	if(::IsWindow(m_hWnd)){
d302 1
a302 1
	httpdReloadTmplButton.EnableWindow(httpdEnabled); // EC
d324 1
a324 1
	if((tmplPath = DialogBrowseFile((GetResString(IDS_TEMPLATE) + _T(" (*.tmpl)|*.tmpl||")))))
d326 2
a327 5
		if(tmplPath != "")
		{
			UpdateData(FALSE);
			SetModified();
		}
@


1.28
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d134 2
a135 2
	httpdPort.Format(_T("%d"), app_prefs->GetWSPort());
	mmPort.Format(_T("%d"), app_prefs->GetMMPort());
d137 4
a140 4
	tmplPath = app_prefs->GetTemplate();	//netwolf
	httpdEnabled = app_prefs->GetWSIsEnabled();
	httpdEnabledLow = app_prefs->GetWSIsLowUserEnabled();
	mmEnabled = app_prefs->IsMMServerEnabled();
d143 1
a143 1
	httpdIntruderDetectEnabled = app_prefs->IsWSIntruderDetectionEnabled();
d145 1
a145 1
	tempDisableLogin.Format(_T("%i"), app_prefs->GetWSTempDisableLogin());
d147 1
a147 1
	loginAttemptsAllowed.Format(_T("%i"), app_prefs->GetWSLoginAttemptsAllowed());	
d167 1
a167 1
			app_prefs->SetWSPass(httpdPass);
d170 1
a170 1
			app_prefs->SetWSLowPass(httpdPassLow);
d173 1
a173 1
			app_prefs->SetMMPass(mmPass);
d178 1
a178 1
		oldPort = app_prefs->GetMMPort();
d183 1
a183 1
			app_prefs->SetMMPort(newPort);
d190 1
a190 1
		oldPort = app_prefs->GetWSPort();
d193 1
a193 1
			app_prefs->SetWSPort(newPort);
d196 3
a198 3
		app_prefs->SetWSIsEnabled(httpdEnabled);
		app_prefs->SetWSIsLowUserEnabled(httpdEnabledLow);
		app_prefs->SetMMIsEnabled(mmEnabled);
d200 1
a200 1
		app_prefs->SetTemplate(tmplPath);
d203 1
a203 1
		app_prefs->SetWSIntruderDetectionEnabled(httpdIntruderDetectEnabled);
d207 1
a207 1
			app_prefs->SetWSTempDisableLogin(60);
d210 1
a210 1
			app_prefs->SetWSTempDisableLogin(5);
d213 1
a213 1
			app_prefs->SetWSTempDisableLogin(t);
d218 1
a218 1
			app_prefs->SetWSLoginAttemptsAllowed(5);
d221 1
a221 1
			app_prefs->SetWSLoginAttemptsAllowed(2);
d224 1
a224 1
			app_prefs->SetWSLoginAttemptsAllowed(a);
d310 1
a310 1
	app_prefs->SetTemplate(tmplPath);
@


1.27
log
@built in compiler switch for mobileMule
@
text
@d184 2
a185 2
			theApp.mmserver->StopServer();
			theApp.mmserver->Init();
d194 1
a194 1
			theApp.webserver->RestartServer();
d232 1
a232 1
			theApp.mmserver->Init();
d234 1
a234 1
			theApp.mmserver->StopServer();
d241 1
a241 1
		theApp.webserver->StartServer();
d311 1
a311 1
	theApp.webserver->ReloadTemplates();	
@


1.26
log
@bugfix
@
text
@d182 1
d186 1
d230 1
d236 1
@


1.25
log
@Preparing for new sockets
@
text
@d7 1
d120 2
@


1.24
log
@Purity's changes
@
text
@d178 1
d182 1
d224 1
d230 1
@


1.23
log
@Fixed HTTPD preferences.
@
text
@d39 4
d83 6
d102 3
d117 2
d130 1
d132 1
d137 1
d149 1
d169 16
a184 2
		uint16 oldPort = app_prefs->GetWSPort();
		uint16 newPort = _tstoi(httpdPort);
d191 1
d221 7
d260 5
d269 8
d291 2
a292 1

@


1.22
log
@Updated dialogs
@
text
@d86 1
a86 1
	ON_BN_CLICKED(IDC_HTTPDENABLEDLOW, OnEnChangeHTTPDEnabled)
d90 1
a90 1
	ON_BN_CLICKED(IDC_HTTPDINTRUDERDETECTION, OnDataChange)
d132 2
d259 20
a278 1
}@


1.21
log
@Solved bug in preferences browse buttons
@
text
@d30 1
a30 1
	, adminDesc(_T(""))
a68 1
	DDX_Text(pDX, IDC_STATIC_ADMIN, adminDesc);
d72 1
d207 1
a207 1
		adminDesc = GetResString(IDS_WEB_ADMIN);
@


1.20
log
@reload template path after clicking "Reload templates"
@
text
@d248 8
a255 2
    tmplPath = DialogBrowseFile(GetResString(IDS_TEMPLATE) + _T(" (*.tmpl)|*.tmpl||"));
	UpdateData(FALSE);
a256 1
	SetModified();
@


1.19
log
@enabled Apply after changing template path
@
text
@d241 3
a243 1
	theApp.webserver->ReloadTemplates();
@


1.18
log
@converted to use DDX framework
@
text
@d248 2
@


1.17
log
@FATURE: specify path to WebServer template in preferences
@
text
@d20 19
d49 30
d98 6
a103 5
	((CEdit*)GetDlgItem(IDC_HTTPDPASS))->SetLimitText(12);
	((CEdit*)GetDlgItem(IDC_HTTPDPASSLOW))->SetLimitText(12);
	((CEdit*)GetDlgItem(IDC_HTTPDPORT))->SetLimitText(6);
	((CEdit*)GetDlgItem(IDC_HTTPDLOGINATTEMPTSALLOWED))->SetLimitText(2);
	((CEdit*)GetDlgItem(IDC_HTTPDTEMPDISABLELOGIN))->SetLimitText(2);
d112 8
a119 17
{
	CString strBuffer;

	GetDlgItem(IDC_HTTPDPASS)->SetWindowText(HIDDEN_PASSWORD);
	GetDlgItem(IDC_HTTPDPASSLOW)->SetWindowText(HIDDEN_PASSWORD);
	strBuffer.Format(_T("%d"), app_prefs->GetWSPort());
	GetDlgItem(IDC_HTTPDPORT)->SetWindowText(strBuffer);
	GetDlgItem(IDC_TMPLPATH)->SetWindowText(app_prefs->GetTemplate());	//netwolf
	if(app_prefs->GetWSIsEnabled())
		CheckDlgButton(IDC_HTTPDENABLED,1);
	else
		CheckDlgButton(IDC_HTTPDENABLED,0);

	if(app_prefs->GetWSIsLowUserEnabled())
		CheckDlgButton(IDC_HTTPDENABLEDLOW,1);
	else
		CheckDlgButton(IDC_HTTPDENABLEDLOW,0);
d122 1
a122 4
	if(app_prefs->IsWSIntruderDetectionEnabled())
	  CheckDlgButton(IDC_HTTPDINTRUDERDETECTION,1);
	else
	  CheckDlgButton(IDC_HTTPDINTRUDERDETECTION,0);
d124 4
a127 2
	strBuffer.Format(_T("%i"), app_prefs->GetWSTempDisableLogin());
	GetDlgItem(IDC_HTTPDTEMPDISABLELOGIN)->SetWindowText(strBuffer);
d129 1
a129 3
	strBuffer.Format(_T("%i"), app_prefs->GetWSLoginAttemptsAllowed());
	GetDlgItem(IDC_HTTPDLOGINATTEMPTSALLOWED)->SetWindowText(strBuffer);
	//End Johnny-B
a137 2
//	CSingleLock PrefLock(&(app_prefs->m_Pref_Mutex),TRUE); 

d140 12
a151 13
		CString sBuf;
		uint16 oldPort=app_prefs->GetWSPort();

		GetDlgItem(IDC_HTTPDPASS)->GetWindowText(sBuf);
		if(sBuf != HIDDEN_PASSWORD)
			app_prefs->SetWSPass(sBuf);
		GetDlgItem(IDC_HTTPDPASSLOW)->GetWindowText(sBuf);
		if(sBuf != HIDDEN_PASSWORD)
			app_prefs->SetWSLowPass(sBuf);

		GetDlgItem(IDC_HTTPDPORT)->GetWindowText(sBuf);
		if (_tstoi(sBuf)!=oldPort) {
			app_prefs->SetWSPort(_tstoi(sBuf));
d154 4
a157 5
		app_prefs->SetWSIsEnabled((int8)IsDlgButtonChecked(IDC_HTTPDENABLED));
		app_prefs->SetWSIsLowUserEnabled((int8)IsDlgButtonChecked(IDC_HTTPDENABLEDLOW));

		GetDlgItem(IDC_TMPLPATH)->GetWindowText(sBuf);
		app_prefs->SetTemplate(sBuf);
d160 1
a160 1
		app_prefs->SetWSIntruderDetectionEnabled(IsDlgButtonChecked(IDC_HTTPDINTRUDERDETECTION));
d162 2
a163 2
		GetDlgItem(IDC_HTTPDTEMPDISABLELOGIN)->GetWindowText(sBuf);
		if (_tstoi(sBuf) > 60) {
d165 2
a166 4

			sBuf.Format(_T("%i"), 60);
			GetDlgItem(IDC_HTTPDTEMPDISABLELOGIN)->SetWindowText(sBuf);
		} else if (_tstoi(sBuf) < 5 && _tstoi(sBuf) !=0) {
d168 1
a168 2
			sBuf.Format(_T("%i"), 5);
			GetDlgItem(IDC_HTTPDTEMPDISABLELOGIN)->SetWindowText(sBuf);
d170 1
a170 1
			app_prefs->SetWSTempDisableLogin(_tstoi(sBuf));
d173 2
a174 2
		GetDlgItem(IDC_HTTPDLOGINATTEMPTSALLOWED)->GetWindowText(sBuf);
		if (_tstoi(sBuf) > 5) {
d176 2
a177 3
			sBuf.Format(_T("%i"), 5);
			GetDlgItem(IDC_HTTPDLOGINATTEMPTSALLOWED)->SetWindowText(sBuf);
		} else if (_tstoi(sBuf) < 2) {
d179 1
a179 2
			sBuf.Format(_T("%i"), 2);
			GetDlgItem(IDC_HTTPDLOGINATTEMPTSALLOWED)->SetWindowText(sBuf);
d181 1
a181 1
			app_prefs->SetWSLoginAttemptsAllowed(_tstoi(sBuf));
d185 2
d197 1
a197 1
	if(m_hWnd){
d199 19
a217 18
		GetDlgItem(IDC_HTTPDPASS_LBL)->SetWindowText(GetResString(IDS_HTTPD_PASS));
		GetDlgItem(IDC_HTTPDPORT_LBL)->SetWindowText(GetResString(IDS_PORT));
		GetDlgItem(IDC_HTTPDENABLED)->SetWindowText(GetResString(IDS_ENABLED));
		GetDlgItem(IDC_HTTPDRELOADTMPL)->SetWindowText(GetResString(IDS_HTTPD_RELOAD_TMPL));

		GetDlgItem(IDC_HTTPDPASS_LBL2)->SetWindowText(GetResString(IDS_HTTPD_PASS));
		GetDlgItem(IDC_HTTPDENABLEDLOW)->SetWindowText(GetResString(IDS_ENABLED));
		GetDlgItem(IDC_STATIC_GENERAL)->SetWindowText(GetResString(IDS_PW_GENERAL));

		GetDlgItem(IDC_STATIC_ADMIN)->SetWindowText(GetResString(IDS_WEB_ADMIN));
		GetDlgItem(IDC_STATIC_LOWUSER)->SetWindowText(GetResString(IDS_WEB_LOWUSER));
		GetDlgItem(IDC_HTTPDENABLEDLOW)->SetWindowText(GetResString(IDS_ENABLED));

		GetDlgItem(IDC_STATIC_INTRUDER)->SetWindowText(GetResString(IDS_INTR));
		GetDlgItem(IDC_HTTPDINTRUDERDETECTION)->SetWindowText(GetResString(IDS_ENABLED));
		GetDlgItem(IDC_INTR_LOGIN)->SetWindowText(GetResString(IDS_INTR_LOGIN));
		GetDlgItem(IDC_INTR_TIME)->SetWindowText(GetResString(IDS_INTR_TIME));
		GetDlgItem(IDC_INTR_DISABLE)->SetWindowText(GetResString(IDS_INTR_DISABLE));
d223 12
a234 10
	GetDlgItem(IDC_HTTPDPASS)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED));	
	GetDlgItem(IDC_HTTPDPORT)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED));	
	GetDlgItem(IDC_HTTPDRELOADTMPL)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED)); // EC
	GetDlgItem(IDC_HTTPDENABLEDLOW)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED));
	GetDlgItem(IDC_HTTPDPASSLOW)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED));
	GetDlgItem(IDC_HTTPDINTRUDERDETECTION)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED));
	GetDlgItem(IDC_HTTPDTEMPDISABLELOGIN)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED));
	GetDlgItem(IDC_HTTPDLOGINATTEMPTSALLOWED)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED));
	GetDlgItem(IDC_TMPLPATH)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED));
	GetDlgItem(IDC_TMPLBROWSE)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED));
d245 3
a247 5
{
	CString buffer;
	buffer=GetResString(IDS_TEMPLATE)+" (*.tmpl)|*.tmpl||";
    buffer = DialogBrowseFile(buffer);
	GetDlgItem(IDC_TMPLPATH)->SetWindowText(buffer);
@


1.16
log
@unicode cleanup
@
text
@d6 1
d35 1
a38 1
	ON_BN_CLICKED(IDC_STATIC_GENERAL, OnBnClickedStaticGeneral)
d42 1
d69 1
d122 3
d199 2
d210 1
a210 1
void CPPgHTTPD::OnBnClickedStaticGeneral()
d212 5
a216 2
	// TODO: Add your control notification handler code here
}
@


1.15
log
@Updated PPG_HTTPD
@
text
@d83 1
a83 1
	strBuffer.Format("%i", app_prefs->GetWSTempDisableLogin());
d86 1
a86 1
	strBuffer.Format("%i", app_prefs->GetWSLoginAttemptsAllowed());
d123 1
a123 1
		if (atoi(sBuf) > 60) {
d126 1
a126 1
			sBuf.Format("%i", 60);
d128 1
a128 1
		} else if (atoi(sBuf) < 5 && atoi(sBuf) !=0) {
d130 1
a130 1
			sBuf.Format("%i", 5);
d133 1
a133 1
			app_prefs->SetWSTempDisableLogin(atoi(sBuf));
d137 1
a137 1
		if (atoi(sBuf) > 5) {
d139 1
a139 1
			sBuf.Format("%i", 5);
d141 1
a141 1
		} else if (atoi(sBuf) < 2) {
d143 1
a143 1
			sBuf.Format("%i", 2);
d146 1
a146 1
			app_prefs->SetWSLoginAttemptsAllowed(atoi(sBuf));
@


1.14
log
@Webserver intruder detection by Purity
@
text
@d174 6
d190 3
@


1.13
log
@unicode cleanup
@
text
@d38 3
d50 2
d77 13
d118 32
@


1.12
log
@Upgrade to 0.28a
@
text
@d60 1
a60 1
	strBuffer.Format("%d", app_prefs->GetWSPort());
d94 2
a95 2
		if (atoi(sBuf)!=oldPort) {
			app_prefs->SetWSPort(atoi(sBuf));
@


1.11
log
@Upgrade to webserver official 0.28a
@
text
@d60 1
a60 1
	strBuffer.Format("%d", app_prefs->GetHTTPPort());
d62 1
a62 1
	if(app_prefs->GetHTTPIsEnabled())
d67 1
a67 1
	if(app_prefs->GetHTTPIsLowUserEnabled())
d84 1
a84 1
		uint16 oldPort=app_prefs->GetHTTPPort();
d88 1
a88 1
			app_prefs->SetHTTPPass(sBuf);
d91 1
a91 2
			app_prefs->SetHTTPLowPass(sBuf);
			//strcpy(app_prefs->prefs->httppassword, MD5Sum(sBuf).GetHash());
d95 1
a95 1
			app_prefs->SetHTTPPort(atoi(sBuf));
d98 2
a99 2
		app_prefs->SetHTTPIsEnabled((int8)IsDlgButtonChecked(IDC_HTTPDENABLED));
		app_prefs->SetHTTPIsLowUserEnabled((int8)IsDlgButtonChecked(IDC_HTTPDENABLEDLOW));
@


1.10
log
@Updates to HTTPD Template, DownloadClient and Web Server panel.
@
text
@d84 2
d95 4
a98 2
		app_prefs->SetHTTPPort(atoi(sBuf));
		
@


1.9
log
@Webserver from official 0.27c
@
text
@d37 1
d129 1
d138 5
@


1.8
log
@Reload Templates button is disabled when server is disabled
@
text
@d31 3
a33 2
	ON_EN_CHANGE(IDC_HTTPDPASS, OnEnChangeHTTPDPass)
	ON_EN_CHANGE(IDC_HTTPDPORT, OnEnChangeHTTPDPort)
d35 1
d44 1
d58 1
d65 6
d86 3
d92 1
a92 10
		if((bool)IsDlgButtonChecked(IDC_HTTPDENABLED)!=app_prefs->GetHTTPIsEnabled())
		{
			app_prefs->SetHTTPIsEnabled((int8)IsDlgButtonChecked(IDC_HTTPDENABLED));
			theApp.webserver->StartServer();
		}
		if (atoi(sBuf)-app_prefs->GetHTTPPort()!=0)
		{
			app_prefs->SetHTTPPort(atoi(sBuf));
			theApp.webserver->RestartServer();	//Cax2 - restarts the server with the new port settings
		}
d94 3
d112 8
d128 1
a129 8
/*	// performed in WebServer.cpp
	if(IsDlgButtonChecked(IDC_HTTPDENABLED))
	{
		AddLogLine(false,"%s: %s",GetResString(IDS_PW_HTTPD), GetResString(IDS_ENABLED).MakeLower());
	} else {
		AddLogLine(false,"%s: %s",GetResString(IDS_PW_HTTPD), GetResString(IDS_DISABLED).MakeLower());
	}
*/
@


1.7
log
@webserver port can be changed without restarting, & bugfix for #143
@
text
@d112 1
@


1.7.2.1
log
@27c
@
text
@a111 1
	GetDlgItem(IDC_HTTPDRELOADTMPL)->EnableWindow(IsDlgButtonChecked(IDC_HTTPDENABLED)); // EC
@


1.6
log
@converted to new logging method
@
text
@d79 11
a89 3
		app_prefs->SetHTTPPort(atoi(sBuf));

		app_prefs->SetHTTPIsEnabled((int8)IsDlgButtonChecked(IDC_HTTPDENABLED));
@


1.5
log
@Reload templates in runtime feature
@
text
@d108 1
a108 1
		theApp.emuledlg->AddLogLine(false,"%s: %s",GetResString(IDS_PW_HTTPD), GetResString(IDS_ENABLED).MakeLower());
d110 1
a110 1
		theApp.emuledlg->AddLogLine(false,"%s: %s",GetResString(IDS_PW_HTTPD), GetResString(IDS_DISABLED).MakeLower());
@


1.4
log
@Small webserver fixes
@
text
@d34 1
d96 1
d114 5
@


1.3
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d103 1
d110 1
a110 1

@


1.2
log
@Removed SingleLock - no need there.
@
text
@d7 6
@


1.1
log
@*** empty log message ***
@
text
@d61 1
a61 1
	CSingleLock PrefLock(&(app_prefs->m_Pref_Mutex),TRUE); 
@


1.1.4.1
log
@updating this branch...
@
text
@@

