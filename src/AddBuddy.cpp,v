head	1.3;
access;
symbols
	PublicRelease_1_2e:1.3
	Interim_Release_1-2e_RC1:1.3
	PublicRelease_1_2d:1.3
	Interim_Release_1-2d_RC1:1.3
	Interim_Release_1-2d_beta1:1.2
	PublicRelease_1_2c:1.2
	Interim_Release_1-2c_RC1:1.2
	Interim_Release_1-2c_beta1:1.2
	PublicRelease_1_2b:1.2
	Interim_Release_1-2b_RC1:1.2
	PublicRelease_1_2a:1.2
	Interim_Release_1-2a_RC1:1.2
	Interim_Release_1-2a_beta2:1.2
	Interim_Release_1-2a_beta1:1.2
	PublicRelease_1_2:1.2
	Interim_Release_1-2_RC1:1.2
	Interim_Release_1-2_beta1:1.2
	PublicRelease_1_1g:1.2
	Interim_Release_1-1g_RC3:1.2
	Interim_Release_1-1g_RC2:1.2
	Interim_Release_1-1g_RC1:1.2
	Interim_Release_1-1g_beta2:1.2
	Interim_Release_1-1g_beta1:1.2
	PublicRelease_1_1f:1.2
	Interim_Release_1-1f_RC1:1.2
	PublicRelease_1_1e:1.2
	Interim_Release_1-1e_RC2:1.2
	Interim_Release_1-1e_RC1:1.2
	Interim_Release_1-1e_beta1:1.2
	PublicRelease_1_1d:1.2
	Interim_Release_1-1d_RC1:1.2
	PublicRelease_1_1c:1.2
	Interim_Release_1-1c_RC1:1.2
	Interim_Release_1-1c_beta2:1.2
	Interim_Release_1-1c_beta1:1.2
	PublicRelease_1_1b:1.2
	Interim_Release_1-1b_RC1:1.2
	PublicRelease_1_1a:1.2
	Interim_Release_1-1a_RC2:1.2
	Interim_Release_1-1a_RC1:1.2
	Interim_Release_1-1a_beta2:1.2
	Interim_Release_1-1a_beta1:1.2
	PublicRelease_1_1:1.2
	Interim_Release_1-1_beta1:1.2
	PublicRelease_1o:1.2
	Interim_Release_1o_RC1:1.2
	Interim_Release_1o_beta1:1.2
	PublicRelease_1n:1.2
	Interim_Release_1n_RC2:1.2
	Interim_Release_1n_RC1:1.2
	Interim_Release_1n_beta2:1.2
	Interim_Release_1n_beta1:1.2
	PublicRelease_1m:1.2
	Interim_Release_1m_beta1:1.2
	PublicRelease_1l:1.2
	Interim_Release_1l_RC3:1.2
	Interim_Release_1l_RC2:1.2
	Interim_Release_1l_RC1:1.2
	Interim_Release_1l_beta2:1.2
	Interim_Release_1l_beta1:1.2
	PublicRelease_1k:1.2
	Interim_Release_1k_RC4:1.2
	Interim_1k_RC3:1.2
	Interim_1k_RC2:1.2
	Interim_Release_1k_RC1:1.2
	Interim_Release_1k_beta5:1.2
	Intrerim_Release_1k_beta4:1.2
	Interim_Release_1k_beta1:1.2
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.2
	PublicRelease_1i:1.2
	Interim_Release_1i_RC6:1.2
	Interim_Release_1i_RC3:1.2
	Interim_Release_1i_RC2:1.2
	Interim_Release_1i_RC1:1.2
	Interim_Release_1i_beta3:1.2
	Interim_Release_1i_beta2:1.2
	Interim_Release_1i_beta1:1.2
	PublicRelease_1h:1.2
	Interim_Release_1h_rc2:1.2
	Interim_Release_1h_RC1:1.2
	Interim_Release_1h_beta2:1.1;
locks; strict;
comment	@// @;


1.3
date	2008.03.13.02.40.22;	author aw3;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.07.13.46.33;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.23.00.20.51;	author forcha;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Suppressed compiler warnings; Formatting.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//-----------------------------------------------------------------------------
// (p) 2003 by FoRcHa  ... (based on Gipsysoft's BuddyButton)

#include "stdafx.h"
#include "AddBuddy.h"


static const TCHAR g_szOldProc[] = _T("BuddyOldProc");
static const TCHAR g_szData[] = _T("BuddyData");

class CData
{
public:
	UINT m_uBuddyWidth;
	UINT m_uBuddyHeight;
	HWND m_hwndBuddy;
	UINT m_uStyle;
	BOOL m_bVisible;
};

static LRESULT CALLBACK SubClassedProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	WNDPROC WndProc = reinterpret_cast<WNDPROC>(::GetProp(hwnd, g_szOldProc));
	CData *pData = reinterpret_cast<CData*>(::GetProp(hwnd, g_szData));

	ASSERT(WndProc);

	switch(message)
	{
		case WM_NCDESTROY:
		{
			SetWindowLong(hwnd, GWL_WNDPROC, (long)WndProc);
			RemoveProp(hwnd, g_szOldProc);
			RemoveProp(hwnd, g_szData);

			delete pData;
			break;
		}
		case WM_NCHITTEST:
		{
			LRESULT lr = CallWindowProc(WndProc, hwnd, message, wParam, lParam);
			if(lr == HTNOWHERE)
			{
				lr = HTTRANSPARENT;
			}
			return lr;
		}
		case WM_NCCALCSIZE:
		{
			LRESULT lr = CallWindowProc(WndProc, hwnd, message, wParam, lParam);
			LPNCCALCSIZE_PARAMS lpnccs = reinterpret_cast<LPNCCALCSIZE_PARAMS>(lParam);

			switch(pData->m_uStyle)
			{
				case BDS_LEFT:
					lpnccs->rgrc[0].left += pData->m_uBuddyWidth;
					break;
				case BDS_RIGHT:
					lpnccs->rgrc[0].right -= pData->m_uBuddyWidth;
					break;
				case BDS_TOP:
					lpnccs->rgrc[0].top += pData->m_uBuddyHeight;
					break;
				case BDS_BOTTOM:
					lpnccs->rgrc[0].bottom -= pData->m_uBuddyHeight;
					break;
				default:
					break;
			}

			return lr;
		}
		case WM_SIZE:
		{
			CRect rc;
			::GetClientRect(hwnd, rc);

			switch(pData->m_uStyle)
			{
				case BDS_LEFT:
					rc.right = rc.left;
					rc.left = rc.left - pData->m_uBuddyWidth;
					break;
				case BDS_RIGHT:
					rc.left = rc.right;
					rc.right = rc.left + pData->m_uBuddyWidth;
					break;
				case BDS_TOP:
					rc.bottom = rc.top;
					rc.top = rc.top - pData->m_uBuddyHeight;
					break;
				case BDS_BOTTOM:
					rc.top = rc.bottom;
					rc.bottom = rc.bottom + pData->m_uBuddyHeight;
					break;
			}

			::MapWindowPoints(hwnd, GetParent(hwnd), (LPPOINT)&rc, 2);
			::SetWindowPos(pData->m_hwndBuddy, NULL, rc.left, rc.top, 
					rc.Width(), rc.Height(), SWP_NOZORDER);
			break;
		}
		case WM_SHOWWINDOW:
		{
			if(static_cast<BOOL>(wParam) != pData->m_bVisible)
			{
				pData->m_bVisible = wParam;
				::ShowWindow(pData->m_hwndBuddy, wParam ? SW_SHOW : SW_HIDE);
			}
			break;
		}
	}

	return CallWindowProc(WndProc, hwnd, message, wParam, lParam);
}

BOOL AddBuddy(HWND hwndTarget, HWND hwndBuddy, UINT uStyle)
{
	if(uStyle == BDS_LEFT || uStyle == BDS_RIGHT || uStyle == BDS_TOP || uStyle == BDS_BOTTOM)
	{
		if(::IsWindow(hwndTarget) && ::IsWindow(hwndBuddy))
		{
			FARPROC lpfnWndProc = reinterpret_cast<FARPROC>(SetWindowLong(hwndTarget, GWL_WNDPROC, (long)SubClassedProc));
			ASSERT(lpfnWndProc != NULL);
			VERIFY(::SetProp(hwndTarget, g_szOldProc, reinterpret_cast<HANDLE>(lpfnWndProc)));
			
			CData *pData = new CData;
			pData->m_uStyle = uStyle;

			CRect rcBuddy;
			::GetWindowRect(hwndBuddy, rcBuddy);

			pData->m_uBuddyWidth = rcBuddy.Width();
			pData->m_uBuddyHeight = rcBuddy.Height();
			pData->m_hwndBuddy = hwndBuddy;
			pData->m_bVisible = -1;

			VERIFY(::SetProp(hwndTarget, g_szData, reinterpret_cast<HANDLE>(pData)));

			::SetWindowPos(hwndTarget, NULL, 0, 0, 0, 0, SWP_NOMOVE|SWP_NOSIZE|SWP_NOZORDER|SWP_FRAMECHANGED);
			
			return TRUE;
		}
		else
		{
			SetLastErrorEx(ERROR_INVALID_WINDOW_HANDLE, SLE_ERROR);
		}
	}
	else
	{
		SetLastErrorEx(ERROR_INVALID_DATA, SLE_ERROR);
	}

	return FALSE;
}
@


1.2
log
@Fix for tabs showing when download list is hidden
@
text
@d1 17
a17 1
// AddBuddy.cpp: --------------------------------------------------------------
d23 2
a24 2
static LPCTSTR g_szOldProc = _T("BuddyOldProc");
static LPCTSTR g_szData = _T("BuddyData");
d33 1
a33 1
	short m_bVisible;
d51 1
a51 1
			delete pData;	
d67 1
a67 1
			
d92 1
a92 1
			
d112 1
a112 1
	
d120 1
a120 1
			if(wParam != pData->m_bVisible)
a170 4
//-----------------------------------------------------------------------------
// (p) 2003 by FoRcHa  ... (based on Gipsysoft's BuddyButton)


@


1.1
log
@*** empty log message ***
@
text
@d17 1
d102 9
d135 1
@

