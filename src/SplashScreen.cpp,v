head	1.23;
access;
symbols
	PublicRelease_1_2e:1.23
	Interim_Release_1-2e_RC1:1.23
	PublicRelease_1_2d:1.23
	Interim_Release_1-2d_RC1:1.22
	Interim_Release_1-2d_beta1:1.22
	PublicRelease_1_2c:1.22
	Interim_Release_1-2c_RC1:1.22
	Interim_Release_1-2c_beta1:1.22
	PublicRelease_1_2b:1.22
	Interim_Release_1-2b_RC1:1.22
	PublicRelease_1_2a:1.22
	Interim_Release_1-2a_RC1:1.22
	Interim_Release_1-2a_beta2:1.22
	Interim_Release_1-2a_beta1:1.22
	PublicRelease_1_2:1.22
	Interim_Release_1-2_RC1:1.22
	Interim_Release_1-2_beta1:1.22
	PublicRelease_1_1g:1.22
	Interim_Release_1-1g_RC3:1.22
	Interim_Release_1-1g_RC2:1.22
	Interim_Release_1-1g_RC1:1.22
	Interim_Release_1-1g_beta2:1.22
	Interim_Release_1-1g_beta1:1.22
	PublicRelease_1_1f:1.22
	Interim_Release_1-1f_RC1:1.22
	PublicRelease_1_1e:1.22
	Interim_Release_1-1e_RC2:1.22
	Interim_Release_1-1e_RC1:1.22
	Interim_Release_1-1e_beta1:1.22
	PublicRelease_1_1d:1.22
	Interim_Release_1-1d_RC1:1.22
	PublicRelease_1_1c:1.22
	Interim_Release_1-1c_RC1:1.21
	Interim_Release_1-1c_beta2:1.21
	Interim_Release_1-1c_beta1:1.20
	PublicRelease_1_1b:1.20
	Interim_Release_1-1b_RC1:1.20
	PublicRelease_1_1a:1.20
	Interim_Release_1-1a_RC2:1.20
	Interim_Release_1-1a_RC1:1.20
	Interim_Release_1-1a_beta2:1.20
	Interim_Release_1-1a_beta1:1.20
	PublicRelease_1_1:1.20
	Interim_Release_1-1_beta1:1.20
	PublicRelease_1o:1.20
	Interim_Release_1o_RC1:1.20
	Interim_Release_1o_beta1:1.20
	PublicRelease_1n:1.20
	Interim_Release_1n_RC2:1.20
	Interim_Release_1n_RC1:1.20
	Interim_Release_1n_beta2:1.20
	Interim_Release_1n_beta1:1.20
	PublicRelease_1m:1.20
	Interim_Release_1m_beta1:1.20
	PublicRelease_1l:1.20
	Interim_Release_1l_RC3:1.20
	Interim_Release_1l_RC2:1.20
	Interim_Release_1l_RC1:1.19
	Interim_Release_1l_beta2:1.19
	Interim_Release_1l_beta1:1.19
	PublicRelease_1k:1.19
	Interim_Release_1k_RC4:1.19
	Interim_1k_RC3:1.19
	Interim_1k_RC2:1.19
	Interim_Release_1k_RC1:1.19
	Interim_Release_1k_beta5:1.19
	Intrerim_Release_1k_beta4:1.18
	Interim_Release_1k_beta1:1.17
	PublicRelease_1j:1.14
	Interim_Release_1J_RC3:1.14
	Interim_Release_1j_RC3:1.14
	Interim_Release_1j_RC2:1.14
	Interim_Release_1j_RC1:1.14
	Interim_Release_1j_beta2:1.14
	Interim_Release_1j_beta1:1.13
	PublicRelease_1i:1.13
	Interim_Release_1i_RC6:1.13
	Interim_Release_1i_RC3:1.12
	Interim_Release_1i_RC2:1.12
	Interim_Release_1i_RC1:1.9
	Interim_Release_1i_beta3:1.9
	Interim_Release_1i_beta2:1.9
	Interim_Release_1i_beta1:1.8
	PublicRelease_1h:1.8
	Interim_Release_1h_rc2:1.8
	Interim_Release_1h_RC1:1.8
	Interim_Release_1h_beta2:1.8
	Interim_Release_1h_beta1_now:1.8
	Interim_Release_1h_beta1:1.8
	PublicRelease_1g:1.8
	Interim_Release_1g_RC6_Final:1.8
	Interim_Release_1g_RC6:1.8
	Interim_Release_1g_RC5:1.8
	Interim_Release_1g_RC4:1.8
	Interim_Release_1g_RC3:1.8
	Interim_Release_1g_beta2:1.6
	Interim_Release_1g_beta1:1.6
	Interim_Release_1f_RC4:1.6
	Interim_Release_1f_RC3:1.6
	Interim_Release_1f_RC2:1.6
	Interim_Release_1f_RC:1.6
	Interim_Release_1f_beta2:1.6
	Interim_Release_1f_beta1:1.6
	PublicRelease_1e:1.6
	Interim_Release_1e_RC2:1.6
	Interim_Release_1e_RC:1.6
	Interim_Release_1e_beta3:1.6
	Interim_Release_1e_beta2:1.6
	Interim_Release_1e_beta2_before_kuchin:1.6
	Interim_Release_1e_beta1:1.6
	PublicRelease_1c:1.6
	featurestest:1.6.0.2
	Interim_Release_1c_RC:1.6
	Interim_Release_1c_beta2:1.6
	Interim_Release_1c_beta1:1.2
	threaded_downloadqueue:1.2.0.6
	PublicRelease_1b:1.2
	Interim_Release_1b_beta2:1.2
	Interim_Release_1b_beta1:1.2
	proxydeadlake:1.2.0.4
	PublicRelease_1a:1.2
	Interim_Release_1a_beta2:1.2
	BerkeleyDb:1.2.0.2
	Interim_Release_1a_beta1:1.2
	PublicRelease_1:1.2
	goldfish:1.2
	eMulePlus_1_RC2:1.2
	eMulePlus_26b_1RC1:1.2
	PreRelease_26b_i0e:1.2
	before_26d_merge:1.2
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.23
date	2008.04.23.04.55.35;	author aw3;	state Exp;
branches;
next	1.22;

1.22
date	2005.02.26.04.13.34;	author aw3;	state Exp;
branches;
next	1.21;

1.21
date	2005.02.13.18.40.14;	author kuchin;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.31.20.02.34;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.22.19.55.12;	author katsyonak;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.20.01.41.15;	author aw3;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.09.21.11.04;	author aw3;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.29.10.09.21;	author dongato;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.28.17.24.46;	author katsyonak;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.04.17.01.23;	author katsyonak;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.24.15.01.39;	author katsyonak;	state Exp;
branches;
next	1.12;

1.12
date	2003.11.11.00.22.59;	author katsyonak;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.10.12.47.04;	author katsyonak;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.10.11.58.12;	author katsyonak;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.14.18.40.58;	author syrus77;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.17.13.38.43;	author dongato;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.15.13.41.14;	author partyckip;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.20.21.52.40;	author forcha;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.19.20.13.41;	author forcha;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.16.18.33.25;	author forcha;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.15.19.50.54;	author dongato;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.16.22.01.49;	author lord_kiron;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.23;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.27;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Reduced H-file dependency; Suppressed compiler warnings; Formatting.
@
text
@//this file is part of eMule
//Copyright (C)2002-2007 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "resource.h"
#include "opcodes.h"
#include "memcpy_amd.h"
#include "SplashScreen.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNAMIC(CSplashScreen, CDialog)
CSplashScreen::CSplashScreen(CWnd* pParent /*=NULL*/)
	: CDialog(CSplashScreen::IDD, pParent)
{
	m_bLButtonDown = false;
}

CSplashScreen::~CSplashScreen()
{
	m_imgSplash.DeleteObject();
}

void CSplashScreen::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BOOL CSplashScreen::OnInitDialog()
{
	CDialog::OnInitDialog();

	m_Layered.AddLayeredStyle(m_hWnd);
	m_Layered.SetLayeredWindowAttributes(m_hWnd, 0, 0, LWA_ALPHA);

	VERIFY(m_imgSplash.LoadImage(IDR_LOGO, _T("JPG")));
	(static_cast<CStatic*>(GetDlgItem(IDC_BACKGROUND)))->SetBitmap(m_imgSplash);

#ifndef _DEBUG
#define VERSION_FONTSIZE _T("22")
#else
#define VERSION_FONTSIZE _T("14")
#endif //_DEBUG

	CString s =
		_T("<font face='arial' size='10' style='b' color='0,0,0' background='255,255,255' align='center' valign='bottom'>")
		_T("<br><br><br>")
		_T("<font face='Arial Bold' size='22' style='b' color='0,0,0' background='255,255,255' align='center' valign='bottom'>") CLIENT_NAME _T("</font>")
		_T("<br>")
		_T("<font face='Arial Bold' size='") VERSION_FONTSIZE _T("' style='b' color='128,128,128' background='255,255,255' align='center' valign='bottom'>v") CURRENT_VERSION_LONG;
	switch (get_cpu_type())
	{
		case 2:
			s += _T(" MMX");
			break;
		case 3:
			s += _T(" AMD");
			break;
		case 4:
		case 5:
			s += _T(" SSE");
			break;
	}
	s += _T("</font><br>")
		_T("<font face='Verdana Regular' size='11' style='u | -b' color='0,0,255' background='255,255,255' align='center' valign='bottom'><a href='http://emuleplus.info'>emuleplus.info</a></font>");

	m_ctrlText.SetDataString(s);
	m_ctrlText.SetDefaultBkColor(RGB(255,255,255));

//	Resize dialog window to the picture size to look well for any system font size
	CRect rWndRect, rBmpRect;

	GetWindowRect(rWndRect);
	GetDlgItem(IDC_BACKGROUND)->GetWindowRect(rBmpRect);
	MoveWindow(rWndRect.left, rWndRect.top, rBmpRect.Width(), rBmpRect.Height(), FALSE);

	CRect rClient;
	GetClientRect(rClient);
	rClient.top = 147;
	rClient.left += 10;
	rClient.bottom = rClient.top + 120;
	rClient.right = rClient.left + 220;

	m_ctrlText.m_nTimerSpeed = 0;
	m_ctrlText.Create(NULL, WS_CHILD | WS_VISIBLE, rClient, this);

	m_iTranslucency = 0;
	m_nTimeOut = 0;
	SetTimer(1, (256/7)+2, 0);
	SetCapture();
	return true;
}

BEGIN_MESSAGE_MAP(CSplashScreen, CDialog)
	ON_WM_TIMER()
	ON_WM_LBUTTONDBLCLK()
	ON_WM_LBUTTONDOWN()
	ON_WM_LBUTTONUP()
END_MESSAGE_MAP()

void CSplashScreen::OnTimer(UINT nIDEvent)
{
	if (m_iTranslucency < 255)
	{
		m_Layered.SetLayeredWindowAttributes(m_hWnd, 0, static_cast<BYTE>(m_iTranslucency), LWA_ALPHA);
		m_iTranslucency += 7;
	}
	else
	{
		if (m_nTimeOut == 0)
		{
			m_nTimeOut = SetTimer(300, 1500, 0);
			m_Layered.SetLayeredWindowAttributes(m_hWnd, 0, 255, LWA_ALPHA);
		}
		else
		{
			if(nIDEvent == m_nTimeOut)
			{
				KillTimer(m_nTimeOut);
				ReleaseCapture();
				OnOK();
				GetParent()->RedrawWindow();
			}
		}
	}
	CDialog::OnTimer(nIDEvent);
}

void CSplashScreen::OnLButtonDblClk(UINT nFlags, CPoint point)
{
	OnTimer(m_nTimeOut);
	CDialog::OnLButtonDblClk(nFlags, point);
}

void CSplashScreen::OnLButtonDown(UINT nFlags, CPoint point)
{
	CRect rClient;
	GetClientRect(rClient);
	if(point.x >= rClient.left && point.x <= rClient.right &&
		point.y >= rClient.top && point.y <= rClient.bottom)
	{
		m_bLButtonDown = true;
	}
	CDialog::OnLButtonDown(nFlags, point);
}

void CSplashScreen::OnLButtonUp(UINT nFlags, CPoint point)
{
	CRect rClient;
	GetClientRect(rClient);
	if(point.x >= rClient.left && point.x <= rClient.right &&
		point.y >= rClient.top && point.y <= rClient.bottom && m_bLButtonDown)
	{
		OnTimer(m_nTimeOut);
	}

	m_bLButtonDown = false;
	CDialog::OnLButtonUp(nFlags, point);
}
@


1.22
log
@Unicode preparations.
@
text
@d1 2
a2 1
// SplashScreen.cpp : implementation file
d4 13
d19 3
a21 1
#include "emule.h"
a23 1

a29 2
// CSplashScreen dialog

d105 1
a105 1
	bTranslucency = 0;
d121 1
a121 1
	if (bTranslucency < 255)
d123 2
a124 2
		m_Layered.SetLayeredWindowAttributes(m_hWnd, 0, bTranslucency, LWA_ALPHA);
		bTranslucency += 7;
@


1.21
log
@AutoDL - finalization, should work now, plus set smaller font in splash/about screens so debug version can be shown correctly
@
text
@d41 1
a41 1
	VERIFY(m_imgSplash.LoadImage(IDR_LOGO,_T("JPG")));
d51 5
a55 5
		"<font face='arial' size='10' style='b' color='0,0,0' background='255,255,255' align='center' valign='bottom'>"
		"<br><br><br>"
		"<font face='Arial Bold' size='22' style='b' color='0,0,0' background='255,255,255' align='center' valign='bottom'>" CLIENT_NAME "</font>"
		"<br>"
		"<font face='Arial Bold' size='" VERSION_FONTSIZE "' style='b' color='128,128,128' background='255,255,255' align='center' valign='bottom'>v" CURRENT_VERSION_LONG;
d59 1
a59 1
			s += " MMX";
d62 1
a62 1
			s += " AMD";
d66 1
a66 1
			s += " SSE";
d69 2
a70 2
	s += "</font><br>"
		"<font face='Verdana Regular' size='11' style='u | -b' color='0,0,255' background='255,255,255' align='center' valign='bottom'><a href='http://emuleplus.info'>emuleplus.info</a></font>";
@


1.20
log
@Unified definitions for client name.
@
text
@d44 6
d55 1
a55 1
		"<font face='Arial Bold' size='22' style='b' color='128,128,128' background='255,255,255' align='center' valign='bottom'>v" CURRENT_VERSION_LONG;
@


1.19
log
@minor fix
@
text
@d47 1
a47 1
		"<font face='Arial Bold' size='22' style='b' color='0,0,0' background='255,255,255' align='center' valign='bottom'>eMule Plus</font>"
@


1.18
log
@Improved string processing
@
text
@d49 1
a49 1
		"<font face='Arial Bold' size='22' style='b' color='128,128,128' background='255,255,255' align='center' valign='bottom'>v%s";
@


1.17
log
@Fix for Splash dialog when system font size is different from small; Improved string processing; Trailing whitespaces removal
@
text
@d66 1
a66 1
	m_ctrlText.FormatDataString(s, CURRENT_VERSION_LONG);
@


1.16
log
@More links update to new domain
@
text
@a39 5
	/*GetParent()->ShowWindow(SW_SHOW);
    GetParent()->RedrawWindow(NULL, NULL, RDW_UPDATENOW);*/

	CRect rClient;
	GetClientRect(rClient);
d42 1
a42 2
	m_ctrlPic.Create(NULL, WS_CHILD | WS_VISIBLE | SS_BITMAP, rClient, this);
	m_ctrlPic.SetBitmap(m_imgSplash);
d44 6
a49 6
	CString s;
	s  = "<font face='arial' size='10' style='b' color='0,0,0' background='255,255,255' align='center' valign='bottom'>";
	s += "<br><br><br>";
	s += "<font face='Arial Bold' size='22' style='b' color='0,0,0' background='255,255,255' align='center' valign='bottom'>eMule Plus</font>";
	s += "<br>";
	s += "<font face='Arial Bold' size='22' style='b' color='128,128,128' background='255,255,255' align='center' valign='bottom'>v%s";
d63 3
a65 3
	s += "</font><br>";
	s += "<font face='Verdana Regular' size='11' style='u | -b' color='0,0,255' background='255,255,255' align='center' valign='bottom'><a href='http://emuleplus.info'>emuleplus.info</a></font>";
	
d68 10
a77 1
		
d82 1
a82 1
	
d84 1
a84 1
	m_ctrlText.Create(NULL, WS_CHILD | WS_VISIBLE /*| WS_BORDER*/, rClient, this);
a93 1
	ON_WM_PAINT()
d129 1
a129 1
{	
d137 1
a137 1
	GetClientRect(rClient);	
d147 1
a147 1
{	
@


1.15
log
@Replaced punpcklqdq SSE2 CPU instruction with SSE punpckldq + Removed old MMX/AMD/SSE configurations defines
@
text
@d70 1
a70 1
	s += "<font face='Verdana Regular' size='11' style='u | -b' color='0,0,255' background='255,255,255' align='center' valign='bottom'><a href='http://www.emuleplus.tk'>www.emuleplus.tk</a></font>";
@


1.14
log
@removed FPU optimization indication from splash & about + added try/catch to OutputLogText
@
text
@a55 1
#if !defined(MMX) && !defined(AMD) && !defined(SSE)
d58 10
a67 13
	/*case 1:
		s += " FPU";
		break;*/
	case 2:
		s += " MMX";
		break;
	case 3:
		s += " AMD";
		break;
	case 4:
	case 5:
		s += " SSE";
		break;
a68 1
#endif
@


1.13
log
@Old Pentium machines (without MMX) are now FPU optimized
@
text
@d59 1
a59 1
	case 1:
d61 1
a61 1
		break;
@


1.12
log
@minor changes
@
text
@d59 3
@


1.11
log
@Added SSE2 (Pentium 4) detection
@
text
@d87 1
a87 1
	SetTimer(1, (256/8)+1, 0);
d105 1
a105 1
		bTranslucency += 8;
d111 1
a111 1
			m_nTimeOut = SetTimer(300, 1400, 0);
@


1.10
log
@Fade-in effect for Splash & About dialogs (Windows 2000 and above only)
@
text
@d66 1
@


1.9
log
@Added MMX/AMD/SSE optimized memset [katsyonak]
@
text
@d38 4
a41 2
	GetParent()->ShowWindow(SW_SHOW);
    GetParent()->RedrawWindow(NULL, NULL, RDW_UPDATENOW); 
d84 3
a86 1
	m_nTimeOut = SetTimer(300, 2500, 0);
d101 1
a101 1
	if(nIDEvent == m_nTimeOut)
d103 20
a122 4
		KillTimer(m_nTimeOut);
		ReleaseCapture();
		OnOK();
		GetParent()->RedrawWindow();
a123 1

@


1.8
log
@Minor updates
@
text
@d53 16
a68 2
	s += "<font face='Arial Bold' size='22' style='b' color='128,128,128' background='255,255,255' align='center' valign='bottom'>v%s</font>";
	s += "<br>";
@


1.7
log
@unicode cleanup
@
text
@d52 2
a53 1
	s += "<font face='Arial Bold' size='22' style='b' color='128,128,128' background='255,255,255' align='center' valign='bottom'> %s</font>";
@


1.6
log
@*** empty log message ***
@
text
@d44 1
a44 1
	VERIFY(m_imgSplash.LoadImage(IDR_LOGO,"JPG"));
@


1.5
log
@same look as about box
@
text
@d21 1
d76 2
d97 26
@


1.4
log
@new logo from DrSirius
@
text
@a20 1
	m_strText = "";
d33 2
a34 1
BOOL CSplashScreen::OnInitDialog(){
d36 2
a37 5
	//::SetWindowLong(GetParent()->m_hWnd,GWL_EXSTYLE,::GetWindowLong(GetParent()->m_hWnd,GWL_EXSTYLE) | WS_EX_LAYERED);
	//::SetWindowLong(m_hWnd,GWL_EXSTYLE,::GetWindowLong(GetParent()->m_hWnd,GWL_EXSTYLE) | WS_EX_LAYERED);
	//::SetLayeredWindowAttributes(GetParent()->m_hWnd,0, 0, LWA_ALPHA);
	//::SetLayeredWindowAttributes(m_hWnd,0, 255, LWA_ALPHA);
    GetParent()->ShowWindow(SW_SHOW);
d40 3
d44 24
a67 2
	m_translucency = 0;
	m_timer = SetTimer(300,90,0);
d72 1
d74 1
a74 1
	ON_WM_PAINT()
d77 6
a82 10
void CSplashScreen::OnTimer(UINT_PTR nIDEvent){
	m_translucency += 18;
	if (m_translucency > 255){
		if (m_translucency < 450){
			//::SetLayeredWindowAttributes(GetParent()->m_hWnd, 0, 255, LWA_ALPHA);
			//::SetLayeredWindowAttributes(m_hWnd, 0, 255 - (m_translucency-255), LWA_ALPHA);
			return;
		}
		KillTimer(m_timer);
		//::SetWindowLong(GetParent()->m_hWnd,GWL_EXSTYLE,::GetWindowLong(GetParent()->m_hWnd,GWL_EXSTYLE) ^ WS_EX_LAYERED);
a84 1
		return;
a85 7
	//::SetLayeredWindowAttributes(GetParent()->m_hWnd, 0, m_translucency, LWA_ALPHA);
}

BOOL CSplashScreen::PreTranslateMessage(MSG* pMsg) {
   if(pMsg->message == WM_LBUTTONDOWN){
		m_translucency = 500;
   }
d87 1
a87 1
   return CDialog::PreTranslateMessage(pMsg);
a88 36
// CSplashScreen message handlers
void CSplashScreen::OnPaint()
{
	CPaintDC dc(this); // device context for painting
	
	if(m_imgSplash.GetSafeHandle())
	{
		CDC dcMem;

		if (dcMem.CreateCompatibleDC(&dc))
		{
			CRect r;
			GetClientRect(&r);
			
			CBitmap* pOldBM = dcMem.SelectObject(&m_imgSplash);
			BITMAP BM;
			m_imgSplash.GetBitmap(&BM);		

			CFont cfFont, *pOldFont; // FoRcHa
			cfFont.CreateFont(-24,0,0,0,700,0,0,0,0,3,2,1,34,"Arial"); // FoRcHa
			pOldFont = dcMem.SelectObject(&cfFont);
			dcMem.DrawState(CPoint(0,0), CSize(BM.bmWidth, BM.bmHeight), m_imgSplash, DST_BITMAP | DSS_NORMAL);
			dcMem.SetTextColor(RGB(0,0,0));
			dcMem.SetBkMode(TRANSPARENT);
			r.top = 167;
			r.left += 10;
			r.bottom = r.top + 100;
			r.right = r.left + 220;
			
			dcMem.DrawText(m_strText, r, /*DT_SINGLELINE |*/ DT_CENTER | DT_VCENTER);
			
			dc.BitBlt(0, 0, BM.bmWidth, BM.bmHeight, &dcMem, 0, 0, SRCCOPY);
			dcMem.SelectObject(pOldBM);
			dcMem.SelectObject(pOldFont); // FoRcHa
		}
	}
d90 4
a93 2

	
@


1.3
log
@Changes to credits and ed2k links.
@
text
@d102 5
a106 4
			r.top = 100;
			r.left += 20;
			r.bottom -= 10;
			r.right -= 230;
d108 1
a108 1

@


1.2
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d97 1
a97 1
			cfFont.CreateFont(-29,0,0,0,700,0,0,0,0,3,2,1,34,"Arial"); // FoRcHa
d102 5
a106 2
			r.top = 176;
			dcMem.DrawText(m_strText, r, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
@


1.1
log
@*** empty log message ***
@
text
@d8 7
@


1.1.4.1
log
@updating this branch...
@
text
@@

