head	1.53;
access;
symbols
	PublicRelease_1_2e:1.52
	Interim_Release_1-2e_RC1:1.52
	PublicRelease_1_2d:1.52
	Interim_Release_1-2d_RC1:1.52
	Interim_Release_1-2d_beta1:1.50
	PublicRelease_1_2c:1.49
	Interim_Release_1-2c_RC1:1.49
	Interim_Release_1-2c_beta1:1.49
	PublicRelease_1_2b:1.49
	Interim_Release_1-2b_RC1:1.49
	PublicRelease_1_2a:1.49
	Interim_Release_1-2a_RC1:1.48
	Interim_Release_1-2a_beta2:1.48
	Interim_Release_1-2a_beta1:1.48
	PublicRelease_1_2:1.48
	Interim_Release_1-2_RC1:1.48
	Interim_Release_1-2_beta1:1.48
	PublicRelease_1_1g:1.47
	Interim_Release_1-1g_RC3:1.47
	Interim_Release_1-1g_RC2:1.47
	Interim_Release_1-1g_RC1:1.47
	Interim_Release_1-1g_beta2:1.45
	Interim_Release_1-1g_beta1:1.45
	PublicRelease_1_1f:1.43
	Interim_Release_1-1f_RC1:1.43
	PublicRelease_1_1e:1.43
	Interim_Release_1-1e_RC2:1.43
	Interim_Release_1-1e_RC1:1.42
	Interim_Release_1-1e_beta1:1.42
	PublicRelease_1_1d:1.42
	Interim_Release_1-1d_RC1:1.42
	PublicRelease_1_1c:1.42
	Interim_Release_1-1c_RC1:1.42
	Interim_Release_1-1c_beta2:1.42
	Interim_Release_1-1c_beta1:1.42
	PublicRelease_1_1b:1.40
	Interim_Release_1-1b_RC1:1.40
	PublicRelease_1_1a:1.40
	Interim_Release_1-1a_RC2:1.40
	Interim_Release_1-1a_RC1:1.40
	Interim_Release_1-1a_beta2:1.40
	Interim_Release_1-1a_beta1:1.40
	PublicRelease_1_1:1.40
	Interim_Release_1-1_beta1:1.40
	PublicRelease_1o:1.40
	Interim_Release_1o_RC1:1.40
	Interim_Release_1o_beta1:1.40
	PublicRelease_1n:1.40
	Interim_Release_1n_RC2:1.40
	Interim_Release_1n_RC1:1.40
	Interim_Release_1n_beta2:1.40
	Interim_Release_1n_beta1:1.39
	PublicRelease_1m:1.38
	Interim_Release_1m_beta1:1.38
	PublicRelease_1l:1.38
	Interim_Release_1l_RC3:1.38
	Interim_Release_1l_RC2:1.38
	Interim_Release_1l_RC1:1.38
	Interim_Release_1l_beta2:1.38
	Interim_Release_1l_beta1:1.38
	PublicRelease_1k:1.38
	Interim_Release_1k_RC4:1.38
	Interim_1k_RC3:1.38
	Interim_1k_RC2:1.38
	Interim_Release_1k_RC1:1.38
	Interim_Release_1k_beta5:1.38
	Intrerim_Release_1k_beta4:1.38
	Interim_Release_1k_beta1:1.32
	PublicRelease_1j:1.32
	Interim_Release_1J_RC3:1.32
	Interim_Release_1j_RC3:1.32
	Interim_Release_1j_RC2:1.32
	Interim_Release_1j_RC1:1.32
	Interim_Release_1j_beta2:1.32
	Interim_Release_1j_beta1:1.32
	PublicRelease_1i:1.32
	Interim_Release_1i_RC6:1.32
	Interim_Release_1i_RC3:1.30
	Interim_Release_1i_RC2:1.30
	Interim_Release_1i_RC1:1.30
	Interim_Release_1i_beta3:1.30
	Interim_Release_1i_beta2:1.28
	Interim_Release_1i_beta1:1.26
	PublicRelease_1h:1.20
	Interim_Release_1h_rc2:1.20
	Interim_Release_1h_RC1:1.20
	Interim_Release_1h_beta2:1.19
	Interim_Release_1h_beta1_now:1.19
	Interim_Release_1h_beta1:1.19
	PublicRelease_1g:1.19
	Interim_Release_1g_RC6_Final:1.19
	Interim_Release_1g_RC6:1.19
	Interim_Release_1g_RC5:1.19
	Interim_Release_1g_RC4:1.19
	Interim_Release_1g_RC3:1.19
	Interim_Release_1g_beta2:1.15
	Interim_Release_1g_beta1:1.15
	Interim_Release_1f_RC4:1.14
	Interim_Release_1f_RC3:1.14
	Interim_Release_1f_RC2:1.14
	Interim_Release_1f_RC:1.14
	Interim_Release_1f_beta2:1.14
	Interim_Release_1f_beta1:1.14
	PublicRelease_1e:1.14
	Interim_Release_1e_RC2:1.14
	Interim_Release_1e_RC:1.14
	Interim_Release_1e_beta3:1.14
	Interim_Release_1e_beta2:1.14
	Interim_Release_1e_beta2_before_kuchin:1.14
	Interim_Release_1e_beta1:1.14
	PublicRelease_1c:1.9
	featurestest:1.9.0.2
	Interim_Release_1c_RC:1.9
	Interim_Release_1c_beta2:1.9
	Interim_Release_1c_beta1:1.7
	threaded_downloadqueue:1.7.0.2
	PublicRelease_1b:1.7
	Interim_Release_1b_beta2:1.7
	Interim_Release_1b_beta1:1.6
	proxydeadlake:1.3.0.4
	PublicRelease_1a:1.3
	Interim_Release_1a_beta2:1.3
	BerkeleyDb:1.3.0.2
	Interim_Release_1a_beta1:1.3
	PublicRelease_1:1.3
	goldfish:1.3
	eMulePlus_1_RC2:1.3
	eMulePlus_26b_1RC1:1.3
	PreRelease_26b_i0e:1.3
	before_26d_merge:1.3
	Interim_Release_26b_i0d:1.2
	Interim_Release_26b_i0c:1.2
	Interim_Release_26b_i0b:1.2
	Interim_Release_26b_i0a:1.2
	systraydlg:1.2.0.6
	plus26based:1.2.0.4
	Interim_Release_25b_i0b:1.2
	Proxy_Dev:1.2
	Interim_Release_25b_i0a:1.2.2.1
	proxytest:1.2.2.1.0.2
	official_sockets:1.2.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.53
date	2009.10.28.04.34.59;	author aw3;	state Exp;
branches;
next	1.52;

1.52
date	2008.03.19.03.32.30;	author aw3;	state Exp;
branches;
next	1.51;

1.51
date	2008.03.02.14.14.03;	author aw3;	state Exp;
branches;
next	1.50;

1.50
date	2008.01.17.22.02.51;	author eklmn;	state Exp;
branches;
next	1.49;

1.49
date	2006.10.10.01.10.38;	author aw3;	state Exp;
branches;
next	1.48;

1.48
date	2005.12.29.05.35.35;	author aw3;	state Exp;
branches;
next	1.47;

1.47
date	2005.11.27.22.11.48;	author eklmn;	state Exp;
branches;
next	1.46;

1.46
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.45;

1.45
date	2005.08.21.18.07.11;	author aw3;	state Exp;
branches;
next	1.44;

1.44
date	2005.08.20.04.31.32;	author aw3;	state Exp;
branches;
next	1.43;

1.43
date	2005.07.08.11.39.12;	author aw3;	state Exp;
branches;
next	1.42;

1.42
date	2005.01.19.21.10.47;	author netwolf1;	state Exp;
branches;
next	1.41;

1.41
date	2005.01.14.14.23.24;	author kush_eplus;	state Exp;
branches;
next	1.40;

1.40
date	2004.08.05.21.30.49;	author aw3;	state Exp;
branches;
next	1.39;

1.39
date	2004.07.18.12.20.31;	author eklmn;	state Exp;
branches;
next	1.38;

1.38
date	2004.03.18.18.03.15;	author eklmn;	state Exp;
branches;
next	1.37;

1.37
date	2004.03.17.23.09.13;	author aw3;	state Exp;
branches;
next	1.36;

1.36
date	2004.03.10.01.43.14;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2004.03.05.07.21.42;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2004.02.22.20.19.04;	author kush_eplus;	state Exp;
branches;
next	1.33;

1.33
date	2004.02.22.00.43.02;	author kush_eplus;	state Exp;
branches;
next	1.32;

1.32
date	2003.11.22.12.30.33;	author forcha;	state Exp;
branches;
next	1.31;

1.31
date	2003.11.22.11.09.36;	author forcha;	state Exp;
branches;
next	1.30;

1.30
date	2003.10.28.21.58.43;	author morevit;	state Exp;
branches;
next	1.29;

1.29
date	2003.10.28.18.36.28;	author katsyonak;	state Exp;
branches;
next	1.28;

1.28
date	2003.10.24.01.21.20;	author morevit;	state Exp;
branches;
next	1.27;

1.27
date	2003.10.08.12.56.33;	author morevit;	state Exp;
branches;
next	1.26;

1.26
date	2003.10.05.10.32.23;	author eklmn;	state Exp;
branches;
next	1.25;

1.25
date	2003.09.30.06.58.45;	author dongato;	state Exp;
branches;
next	1.24;

1.24
date	2003.09.29.12.14.05;	author morevit;	state Exp;
branches;
next	1.23;

1.23
date	2003.09.28.23.45.34;	author dongato;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.21.22.05.16;	author morevit;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.20.15.39.30;	author morevit;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.07.11.22.47;	author dongato;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.16.04.44.44;	author partyckip;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.15.09.10.04;	author partyckip;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.11.18.27.10;	author eklmn;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.10.09.36.45;	author kuchin;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.31.08.50.54;	author partyckip;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.03.00.14.25;	author recdvst;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.27.03.48.24;	author recdvst;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.27.02.41.53;	author recdvst;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.25.09.29.37;	author pooz;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.24.17.40.31;	author pooz;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.16.01.50.52;	author recdvst;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.15.20.53.47;	author lord_kiron;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.08.12.09.42;	author recdvst;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.02.12.31.31;	author recdvst;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.02.06.11.13;	author recdvst;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.02.04.41.22;	author recdvst;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.16.22.01.47;	author lord_kiron;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.23.17.25.24;	author kuchin;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2003.01.21.18.21.20;	author cax2;	state Exp;
branches;
next	;

1.2.2.1
date	2003.01.28.16.54.16;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.53
log
@Reduced H-file dependency.
@
text
@// MuleToolBarCtrl.cpp : implementation file
///////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "MuleToolbarCtrl.h"
#include "emule.h"
#include "EnBitmap.h"
#include "otherfunctions.h"
#ifdef OLD_SOCKETS_ENABLED
#include "sockets.h"
#endif

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

#if (_WIN32_IE < 0x0500)
#define TBN_INITCUSTOMIZE       (TBN_FIRST - 23)
#define    TBNRF_HIDEHELP       0x00000001
#endif

BEGIN_MESSAGE_MAP(CMuleToolbarCtrl, CToolBarCtrl)
	ON_WM_SIZE()
	ON_NOTIFY_REFLECT(NM_RCLICK, OnNMRclick)
	ON_NOTIFY_REFLECT(TBN_QUERYDELETE, OnTbnQueryDelete)
	ON_NOTIFY_REFLECT(TBN_QUERYINSERT, OnTbnQueryInsert)
	ON_NOTIFY_REFLECT(TBN_GETBUTTONINFO, OnTbnGetButtonInfo)
	ON_NOTIFY_REFLECT(TBN_TOOLBARCHANGE, OnTbnToolbarChange)
	ON_NOTIFY_REFLECT(TBN_RESET, OnTbnReset)
	ON_NOTIFY_REFLECT(TBN_INITCUSTOMIZE, OnTbnInitCustomize)
END_MESSAGE_MAP()

IMPLEMENT_DYNAMIC(CMuleToolbarCtrl, CToolBarCtrl)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CMuleToolbarCtrl::CMuleToolbarCtrl()
{
	m_bUseSpeedMeter = false;
	m_iLastPressedButton = -1;
	m_iToolbarLabelSettings = 4;

	m_oldcx = 0;
	m_oldcy = 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CMuleToolbarCtrl::~CMuleToolbarCtrl()
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CMuleToolbarCtrl::Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID)
{
//	Some of those styles needs to be set before the window is shown
//		in order to prevent gui bugs when refreshing
	dwStyle |= TBSTYLE_FLAT | CCS_ADJUSTABLE | CCS_NODIVIDER | ((g_App.m_qwComCtrlVer >= MAKEDLLVERULL(6,0,0,0)) ? TBSTYLE_TRANSPARENT : 0);

	return CToolBarCtrl::Create(dwStyle, rect, pParentWnd, nID);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::Init(void)
{
	int	i;

#ifdef _UNICODE
//	Win9x: Explicitly set to Unicode to receive Unicode notifications.
	SendMessage(CCM_SETUNICODEFORMAT, TRUE);
#endif

	ChangeToolbarBitmap(g_App.m_pPrefs->GetToolbarBitmapSettings(), false);
//	Add buttons
	for (i = 0; i < MTB_NUMBUTTONS; i++)
	{
		m_buttonDefs[i].fsState	= TBSTATE_ENABLED;
		m_buttonDefs[i].fsStyle	= TBSTYLE_CHECK;
		m_buttonDefs[i].iBitmap	= i;
		m_buttonDefs[i].idCommand = IDC_TOOLBARBUTTON + i;
		m_buttonDefs[i].iString	= -1;

		switch (i)
		{
			case MTB_CONNECT: // Connect button
			case MTB_PREFS:
				m_buttonDefs[i].fsStyle = TBSTYLE_BUTTON;
				break;
			case MTB_SERVERS:
				m_buttonDefs[i].fsState |= TBSTATE_CHECKED;
		}
	}
	m_iLastPressedButton = IDC_TOOLBARBUTTON + MTB_SERVERS;

	TBBUTTON	sepButton;

	sepButton.idCommand = 0;
	sepButton.fsStyle = TBSTYLE_SEP;
	sepButton.fsState = TBSTATE_ENABLED;
	sepButton.iString = -1;
	sepButton.iBitmap = -1;

	CString		config = g_App.m_pPrefs->GetToolbarSettings();

	for (i = 0; i < config.GetLength(); i += 2)
	{
		int			iIndex = _tstoi(config.Mid(i,2));
		TBBUTTON	*pButton;

		if (iIndex == 99)
			pButton = &sepButton;
		else if (iIndex >= ARRSIZE(m_buttonDefs))
		//	Unknown button index, skip it
			continue;
		else
			pButton = &m_buttonDefs[iIndex];
		AddButtons(1, pButton);
	}

//	Recalc toolbar-size:
	Localize();		// At first we have to localize the button-text!!!
	ChangeTextLabelStyle(g_App.m_pPrefs->GetToolbarLabelSettings(), false);
	SetBtnWidth();		// Then calc and set the button width
	AutoSize();		// And finally call the original (but maybe obsolete) function

//	Add speed-meter to upper-right corner
	CRect		rClient;

	GetClientRect(&rClient);
	rClient.DeflateRect(7, 7);

	rClient.left = rClient.right - rClient.Height() * 2;
	if (m_bUseSpeedMeter)
		m_ctrlSpeedMeter.CreateEx(WS_EX_STATICEDGE, NULL, NULL, WS_CHILD | WS_VISIBLE, rClient, this, 123);
	else
		m_ctrlSpeedMeter.CreateEx(WS_EX_STATICEDGE, NULL, NULL, WS_CHILD, rClient, this, 123);
	m_ctrlSpeedMeter.SetRange(0, 100);

//	Resize speed-meter
	CRect		r;

	GetWindowRect(&r);
	OnSize(0,r.Width(),r.Height());
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::Localize(void)
{
	if (m_hWnd != NULL)
	{
		static const uint16	s_auTBStrIDs[] =
		{
			IDS_SERVERS,
			IDS_EM_TRANS,
			IDS_SEARCH_NOUN,
			IDS_EM_FILES,
			IDS_MESSAGES,
			IDS_IRC,
			IDS_STATISTICS,
			IDS_PREFERENCES
		};
		TBBUTTONINFO		tbi;

		tbi.dwMask = TBIF_TEXT;
		tbi.cbSize = sizeof(TBBUTTONINFO);

		CString		strBuffer;

#ifdef OLD_SOCKETS_ENABLED
		if (g_App.m_pServerConnect->IsConnected())
			GetResString(&strBuffer, IDS_MAIN_BTN_DISCONNECT);
		else if(g_App.m_pServerConnect->IsConnecting())
			GetResString(&strBuffer, IDS_MAIN_BTN_CANCEL);
		else
#endif //OLD_SOCKETS_ENABLED
			GetResString(&strBuffer, IDS_MAIN_BTN_CONNECT);
		tbi.pszText = lstrcpy(m_tstrButtonTitles[0], strBuffer);
		SetButtonInfo(IDC_TOOLBARBUTTON + MTB_CONNECT, &tbi);

		for (int i = 1; i < MTB_NUMBUTTONS; i++)
		{
			GetResString(&strBuffer, s_auTBStrIDs[i - 1]);
			tbi.pszText = lstrcpy(m_tstrButtonTitles[i], strBuffer);
			SetButtonInfo(IDC_TOOLBARBUTTON + i, &tbi);
		}

		m_iToolbarLabelSettings = 4;
		ChangeTextLabelStyle(g_App.m_pPrefs->GetToolbarLabelSettings(), false);

		SetBtnWidth();
		AutoSize();
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::OnSize(UINT nType, int cx, int cy)
{
	CToolBarCtrl::OnSize(nType, cx, cy);

	if ((!cx && !cy) || (cx==m_oldcx && cy==m_oldcy)) return;

	m_oldcx=cx; m_oldcy=cy;

	if (m_bUseSpeedMeter && ::IsWindow(m_ctrlSpeedMeter.GetSafeHwnd()))
	{
		CRect		rClient;

		GetClientRect(&rClient);
		rClient.DeflateRect(7,7);

		int		iHeight = rClient.Height();
		int		iLeft  = rClient.right - iHeight;

		CSize	csMaxSize;

		GetMaxSize(&csMaxSize);
		if (rClient.left + csMaxSize.cx + 7 > iLeft)
		{
			m_ctrlSpeedMeter.ShowWindow(SW_HIDE);
			return;
		}

		iLeft -= iHeight;
		if (iLeft <= rClient.left + csMaxSize.cx + 7)
			iLeft = rClient.left + csMaxSize.cx + 7;
		rClient.left = iLeft;

		m_ctrlSpeedMeter.SetWindowPos( NULL, rClient.left, rClient.top,
									   rClient.Width(), rClient.Height(),
									   SWP_NOZORDER | SWP_SHOWWINDOW );
	}

	SetBtnWidth();
	AutoSize();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::ShowSpeedMeter(bool bShow)
{
	m_bUseSpeedMeter = bShow;

	if (bShow)
	{
		if (!m_ctrlSpeedMeter.IsWindowVisible())
		{
			m_ctrlSpeedMeter.EnableWindow(true);

		//	Resize speed-meter
			CRect		r;

			m_oldcx = m_oldcy = 0;
			GetWindowRect(&r);
			OnSize(0,r.Width(),r.Height());
		}
	}
	else
	{
		m_ctrlSpeedMeter.EnableWindow(false);
		m_ctrlSpeedMeter.ShowWindow(SW_HIDE);

		CRect		rInvalidate;

		m_ctrlSpeedMeter.GetWindowRect(&rInvalidate);
		ScreenToClient(rInvalidate);
		InvalidateRect(rInvalidate);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::SetBtnWidth()
{
	if (m_iToolbarLabelSettings == 1)
	{
		CDC		*pDC = GetDC();
		CFont	*pFnt = GetFont();
		CFont	*pOldFnt = pDC->SelectObject(pFnt);
		CRect	r(0,0,0,0);

	//	Calculate the max. possible button-size
		int		iCalcSize = 0;

		for (int i = 0; i < MTB_NUMBUTTONS; i++)
		{
			if (!IsButtonHidden(IDC_TOOLBARBUTTON + i))
			{
				pDC->DrawText(m_tstrButtonTitles[i], -1, r, DT_SINGLELINE | DT_CALCRECT);
 				if (r.Width() > iCalcSize)
					iCalcSize = r.Width();
			}
		}

		iCalcSize += 10;

		pDC->SelectObject(pOldFnt);
		ReleaseDC(pDC);

		GetClientRect(&r);

		int		iMaxPossible = r.Width() / MTB_NUMBUTTONS;

	//	If the buttons are to big, reduze their size
		if (iCalcSize > iMaxPossible)
			iCalcSize = iMaxPossible;

		SetButtonWidth(iCalcSize, iCalcSize);
	}
	else if(m_iToolbarLabelSettings == 2)
	{
		CRect rcItem;
		GetItemRect(0, &rcItem); // includes the width of the text
		SetButtonSize(CSize(rcItem.Width(), 0));
		SetButtonWidth(0,0);
	}
	else
	{
		SetButtonSize(CSize(0,0));
		SetButtonWidth(0,0);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::OnNMRclick(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR);
	EMULE_TRY

	POINT		point;
	CMenu		menuToolbar, menuBitmaps, menuTextLabels;

	GetCursorPos(&point);

	menuToolbar.CreatePopupMenu();

	menuBitmaps.CreateMenu();
	menuBitmaps.AppendMenu(MF_STRING,MP_SELECTTOOLBARBITMAP, GetResString(IDS_SELECTTOOLBARBITMAP));
	menuBitmaps.AppendMenu(MF_STRING,MP_SELECTTOOLBARBITMAPDIR, GetResString(IDS_SELECTTOOLBARBITMAPDIR));
	menuBitmaps.AppendMenu(MF_SEPARATOR);
	m_strBitmapPaths.RemoveAll();

	CString		strCurrBitmapSettings = g_App.m_pPrefs->GetToolbarBitmapSettings();
	bool		bChecked = false;
	UINT		dwFlags = MF_STRING;

	if (strCurrBitmapSettings.IsEmpty())
	{
		dwFlags |= (MF_CHECKED | MF_DISABLED);
		bChecked = true;
	}
	menuBitmaps.AppendMenu(dwFlags, MP_TOOLBARBITMAP, GetResString(IDS_DEFAULT));
	m_strBitmapPaths.Add(_T(""));

	int		i = 1;

	if (!g_App.m_pPrefs->GetToolbarBitmapFolderSettings().IsEmpty())
	{
		WIN32_FIND_DATA	FileData;
		HANDLE			hSearch;
		CString			strBitmapFileName;
		CString			strConfigDir = g_App.m_pPrefs->GetToolbarBitmapFolderSettings();

		strConfigDir += _T("\\");
		hSearch = ::FindFirstFile(strConfigDir + _T("*.eMuleToolbar.bmp"), &FileData);
		if (hSearch != INVALID_HANDLE_VALUE)
		{
			do
			{
				strBitmapFileName = FileData.cFileName;
				m_strBitmapPaths.Add(strConfigDir + strBitmapFileName);

				dwFlags = MF_STRING;
				if (!bChecked && strCurrBitmapSettings == m_strBitmapPaths[i])
				{
					dwFlags |= (MF_CHECKED | MF_DISABLED);
					bChecked = true;
				}
				menuBitmaps.AppendMenu( dwFlags, MP_TOOLBARBITMAP + i,
					strBitmapFileName.Left(strBitmapFileName.GetLength() - CSTRLEN(_T(".eMuleToolbar.bmp"))) );
			} while ((++i < 50) && ::FindNextFile(hSearch, &FileData));

			::FindClose(hSearch);
		}
	}
	if (!bChecked)
	{
		menuBitmaps.AppendMenu(MF_STRING | MF_CHECKED | MF_DISABLED, MP_TOOLBARBITMAP + i, strCurrBitmapSettings);
		m_strBitmapPaths.Add(strCurrBitmapSettings);
	}
	menuToolbar.AppendMenu(MF_STRING|MF_POPUP, (UINT_PTR)menuBitmaps.m_hMenu, GetResString(IDS_TOOLBARSKINS));

	menuTextLabels.CreateMenu();
	menuTextLabels.AppendMenu(MF_STRING, MP_NOTEXTLABELS, GetResString(IDS_NOTEXTLABELS));
	menuTextLabels.AppendMenu(MF_STRING, MP_TEXTLABELS, GetResString(IDS_ENABLETEXTLABELS));
	menuTextLabels.AppendMenu(MF_STRING, MP_TEXTLABELSONRIGHT, GetResString(IDS_TEXTLABELSONRIGHT));

	UINT		dwPos = static_cast<UINT>(g_App.m_pPrefs->GetToolbarLabelSettings());

	menuTextLabels.CheckMenuItem(dwPos, MF_BYPOSITION | MF_CHECKED);
	menuTextLabels.EnableMenuItem(dwPos, MF_BYPOSITION | MF_DISABLED);
	menuToolbar.AppendMenu(MF_STRING|MF_POPUP, (UINT_PTR)menuTextLabels.m_hMenu, GetResString(IDS_TEXTLABELS));
	menuToolbar.AppendMenu(MF_STRING, MP_CUSTOMIZETOOLBAR, GetResString(IDS_CUSTOMIZETOOLBAR));
	menuToolbar.TrackPopupMenuEx(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this, NULL);

	*pResult = TRUE;

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::OnTbnQueryDelete(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR);
	*pResult = TRUE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::OnTbnQueryInsert(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR);
	*pResult = TRUE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::OnTbnGetButtonInfo(NMHDR *pNMHDR, LRESULT *pResult)
{
	LPNMTOOLBAR		pNMTB = reinterpret_cast<LPNMTOOLBAR>(pNMHDR);

	if (pNMTB->iItem < MTB_NUMBUTTONS)
	{
		lstrcpy(pNMTB->pszText, m_tstrButtonTitles[pNMTB->iItem]);
		pNMTB->tbButton = m_buttonDefs[pNMTB->iItem];
		*pResult = TRUE;
	}
	else
	{
		*pResult = FALSE;
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::OnTbnToolbarChange(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR);
	TBBUTTON	buttoninfo;
	CString		strConfig;

	for (int i = 0; i < GetButtonCount(); i++)
	{
		if (GetButton(i, &buttoninfo))
		{
			switch (buttoninfo.idCommand)
			{
				case 0:
					strConfig += _T("99");
					break;
				default:
					strConfig.AppendFormat(_T("%02u"), buttoninfo.idCommand - IDC_TOOLBARBUTTON);
					break;
			}
		}
	}
	g_App.m_pPrefs->SetToolbarSettings(strConfig);
	Localize();
#ifdef OLD_SOCKETS_ENABLED
	g_App.m_pMDlg->ShowConnectionState(g_App.m_pServerConnect->IsConnected(), _T(""), true);
#endif //OLD_SOCKETS_ENABLED
	SetBtnWidth();
	AutoSize();
	*pResult = 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::ChangeToolbarBitmap(const CString &strPath, bool bRefresh)
{
	CImageList		imageList;
	CEnBitmap		Bitmap;

	if (strPath.IsEmpty() || !Bitmap.LoadImage(strPath))
		Bitmap.LoadBitmap(IDB_TOOLBAR);

	BITMAP			bm;

	Bitmap.GetBitmap(&bm);

	if (imageList.Create(bm.bmWidth/11, bm.bmHeight, g_App.m_iDfltImageListColorFlags | ILC_MASK, 11, 1))
		imageList.Add(&Bitmap, RGB(255,0,255));

	CImageList	*pimlOld = SetImageList(&imageList);

	imageList.Detach();
	if (pimlOld != NULL)
		pimlOld->DeleteImageList();

	if (bRefresh)
		Refresh();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CMuleToolbarCtrl::OnCommand(WPARAM wParam, LPARAM lParam)
{
	NOPRM(lParam);
	EMULE_TRY

	switch (wParam)
	{
		case MP_SELECTTOOLBARBITMAPDIR:
		{
			g_App.m_pPrefs->SetToolbarBitmapFolderSettings(BrowseFolder(m_hWnd,GetResString(IDS_SELECT_TOOLBARBITMAPDIR),g_App.m_pPrefs->GetToolbarBitmapFolderSettings()));
			break;
		}
		case MP_CUSTOMIZETOOLBAR:
		{
			Customize();
			break;
		}
		case MP_SELECTTOOLBARBITMAP:
		{
			CFileDialog dialog(TRUE, _T("eMuleToolbar.bmp"), NULL, OFN_FILEMUSTEXIST | OFN_HIDEREADONLY, _T("*.eMuleToolbar.bmp|*.eMuleToolbar.bmp||"));
			if (IDOK == dialog.DoModal())
			{
				if (g_App.m_pPrefs->GetToolbarBitmapSettings() != dialog.GetPathName())
				{
					g_App.m_pPrefs->SetToolbarBitmapSettings(dialog.GetPathName());
					ChangeToolbarBitmap(dialog.GetPathName(), true);
				}
			}
			break;
		}
		case MP_NOTEXTLABELS:
		{
			ChangeTextLabelStyle(0, true);
			g_App.m_pPrefs->SetToolbarLabelSettings(0);
			break;
		}
		case MP_TEXTLABELS:
		{
			ChangeTextLabelStyle(1, true);
			g_App.m_pPrefs->SetToolbarLabelSettings(1);
			break;
		}
		case MP_TEXTLABELSONRIGHT:
		{
			ChangeTextLabelStyle(2, true);
			g_App.m_pPrefs->SetToolbarLabelSettings(2);
			break;
		}
		default:
		{
			if (wParam >= MP_TOOLBARBITMAP && wParam <= MP_TOOLBARBITMAP + 50)
			{
				if (g_App.m_pPrefs->GetToolbarBitmapSettings() != m_strBitmapPaths[wParam - MP_TOOLBARBITMAP])
				{
					g_App.m_pPrefs->SetToolbarBitmapSettings(m_strBitmapPaths[wParam - MP_TOOLBARBITMAP]);
					ChangeToolbarBitmap(m_strBitmapPaths[wParam - MP_TOOLBARBITMAP], true);
				}
			}
			break;
		}
	}

	return true;

	EMULE_CATCH

	return false;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::ChangeTextLabelStyle(int settings, bool refresh)
{
	if (m_iToolbarLabelSettings != settings)
	{
		switch (settings)
		{
			case 0:
				SetStyle(GetStyle() & ~TBSTYLE_LIST);
				SetMaxTextRows(0);
				break;
			case 1:
				SetStyle(GetStyle() & ~TBSTYLE_LIST);
				SetMaxTextRows(1);
				break;
			case 2:
				SetStyle(GetStyle() | TBSTYLE_LIST);
				SetMaxTextRows(1);
				break;
		}
		if ((m_iToolbarLabelSettings + settings) != 2) //if not changing between no labels and labels on right
		{
			for (int i = 0; i < MTB_NUMBUTTONS; i++)
			{
				TBBUTTONINFO		buttonInfo;

				buttonInfo.cbSize=sizeof(buttonInfo);
				buttonInfo.dwMask=TBIF_STYLE;
				GetButtonInfo(IDC_TOOLBARBUTTON + i, &buttonInfo);

				if (settings == 1)
					buttonInfo.fsStyle &= ~TBSTYLE_AUTOSIZE;
				else
					buttonInfo.fsStyle |= TBSTYLE_AUTOSIZE;
				SetButtonInfo(IDC_TOOLBARBUTTON + i, &buttonInfo);
			}
		}
		m_iToolbarLabelSettings = settings;
		if (refresh)
			Refresh();
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::Refresh()
{
	SetBtnWidth();
	AutoSize();

	CRect		rToolbarRect;

	GetWindowRect(&rToolbarRect);

	static int	previousheight = 0;

	if (previousheight == rToolbarRect.Height())
	{
		Invalidate();
		RedrawWindow();
	}
	else
	{
		previousheight = rToolbarRect.Height();
#ifdef USE_REBAR
		REBARBANDINFO	rbbi;
		CSize			sizeBar;

		GetMaxSize(&sizeBar);
		rbbi.cbSize = sizeof(rbbi);
		rbbi.fMask = RBBIM_SIZE | RBBIM_CHILDSIZE;
		rbbi.cxMinChild = 0;
		rbbi.cyMinChild = sizeBar.cy;
		rbbi.cx = 0;
		g_App.m_pMDlg->m_ctlReBar.SetBandInfo(0, &rbbi);

		CRect		rReBarRect;

		g_App.m_pMDlg->m_ctlReBar.GetWindowRect(&rReBarRect);

		CRect		rClientRect;

		g_App.m_pMDlg->GetClientRect(&rClientRect);

		CRect		rStatusbarRect;

		g_App.m_pMDlg->m_ctlStatusBar.GetWindowRect(&rStatusbarRect);
		rClientRect.top += rReBarRect.Height();
		rClientRect.bottom -= rStatusbarRect.Height();
#else
		CRect		rClientRect;

		g_App.m_pMDlg->GetClientRect(&rClientRect);

		CRect		rStatusbarRect;

		g_App.m_pMDlg->m_ctlStatusBar.GetWindowRect(&rStatusbarRect);
		rClientRect.top += rToolbarRect.Height();
		rClientRect.bottom -= rStatusbarRect.Height();
#endif
		static CWnd *const	s_pwndWndsTbl[] =
		{
			&g_App.m_pMDlg->m_wndServer,
			&g_App.m_pMDlg->m_wndTransfer,
			&g_App.m_pMDlg->m_wndSharedFiles,
			&g_App.m_pMDlg->m_dlgSearch,
			&g_App.m_pMDlg->m_wndChat,
			&g_App.m_pMDlg->m_wndIRC,
			&g_App.m_pMDlg->m_dlgStatistics
		};

		for (int i = 0; i < _countof(s_pwndWndsTbl); i++)
		{
			s_pwndWndsTbl[i]->SetWindowPos(NULL, rClientRect.left, rClientRect.top, rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
			g_App.m_pMDlg->RemoveAnchor(s_pwndWndsTbl[i]->m_hWnd);
			g_App.m_pMDlg->AddAnchor(s_pwndWndsTbl[i]->m_hWnd, TOP_LEFT, BOTTOM_RIGHT);
		}
		g_App.m_pMDlg->Invalidate();
		g_App.m_pMDlg->RedrawWindow();
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::OnTbnReset(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR); NOPRM(pResult);
	int			i, iIdx;
	TBBUTTON	sepButton;

//	First get rid of old buttons while saving their states
	for (i = GetButtonCount() - 1; i >= 0; i--)
		DeleteButton(i);

	sepButton.idCommand = 0;
	sepButton.fsStyle = TBSTYLE_SEP;
	sepButton.fsState = TBSTATE_ENABLED;
	sepButton.iString = -1;
	sepButton.iBitmap = -1;

//	Set default configuration
	for (i = 0; i < g_App.m_pPrefs->GetDefaultToolbarSettings().GetLength(); i += 2)
	{
		iIdx = _tstoi(g_App.m_pPrefs->GetDefaultToolbarSettings().Mid(i, 2));
		AddButtons(1, (iIdx == 99) ? &sepButton : &m_buttonDefs[iIdx]);
	}
//	Save new (default) configuration
	g_App.m_pPrefs->SetToolbarSettings(g_App.m_pPrefs->GetDefaultToolbarSettings());

	Localize();		// we have to localize the button-text
#ifdef OLD_SOCKETS_ENABLED
	g_App.m_pMDlg->ShowConnectionState(g_App.m_pServerConnect->IsConnected(), _T(""), true);
#endif //OLD_SOCKETS_ENABLED
	m_iToolbarLabelSettings = 4;
	ChangeTextLabelStyle(g_App.m_pPrefs->GetToolbarLabelSettings(), false);
	SetBtnWidth();		// then calc and set the button width
	AutoSize();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMuleToolbarCtrl::OnTbnInitCustomize(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR);
	TBBUTTON	Button;
	unsigned	uiIdx;

//	Update saved button statuses
	for (int i = GetButtonCount() - 1; i >= 0; i--)
	{
		GetButton(i, &Button);
		if ((uiIdx = (Button.idCommand - IDC_TOOLBARBUTTON)) < static_cast<unsigned>(MTB_NUMBUTTONS))
		{
			m_buttonDefs[uiIdx].fsState = Button.fsState;
			m_buttonDefs[uiIdx].fsStyle = Button.fsStyle;
		}
	}
	*pResult = TBNRF_HIDEHELP;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@


1.52
log
@Formatting; Improved string processing; Suppressed compiler warnings.
@
text
@d9 3
@


1.51
log
@Selected file for reading should exist - let open dialog verify that (skin, WS templates, notify wav, antivirus exe).
@
text
@a33 2
// CMuleToolbarCtrl

a38 1

d273 1
d280 1
d313 1
d365 2
a366 1
				menuBitmaps.AppendMenu(dwFlags, MP_TOOLBARBITMAP + i, strBitmapFileName.Left(strBitmapFileName.GetLength() - 17));
d399 1
d405 1
d427 1
d456 1
a456 1
void CMuleToolbarCtrl::ChangeToolbarBitmap(CString strPath, bool bRefresh)
d483 1
d513 1
a513 1
			ChangeTextLabelStyle(0, TRUE);
d519 1
a519 1
			ChangeTextLabelStyle(1, TRUE);
d525 1
a525 1
			ChangeTextLabelStyle(2, TRUE);
d671 1
d706 1
@


1.50
log
@set Unicode message format for Win9x systems
@
text
@d495 1
a495 1
			CFileDialog dialog(TRUE, _T("eMuleToolbar.bmp"), NULL, NULL, _T("*.eMuleToolbar.bmp|*.eMuleToolbar.bmp||"));
@


1.49
log
@Fixed toolbar button state while up/down customizing {DoubleT}.
@
text
@d65 5
@


1.48
log
@Compatibility with VC2005 [brengarne]; Formatting.
@
text
@d419 2
a420 2
	TBBUTTON		buttoninfo;
	CString			strConfig;
d661 2
a662 1
	int	i, iIdx;
a665 13
	{
		TBBUTTON		Button;

		GetButton(i,&Button);
		for (int j = 0; j < MTB_NUMBUTTONS; j++)
		{
			if (m_buttonDefs[j].idCommand == Button.idCommand)
			{
				m_buttonDefs[j].fsState = Button.fsState;
				m_buttonDefs[j].fsStyle = Button.fsStyle;
				m_buttonDefs[j].iString = Button.iString;
			}
		}
a666 3
	}

	TBBUTTON		sepButton;
d695 13
@


1.47
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d63 2
a65 1

d67 1
a67 1
	for (int i = 0; i < MTB_NUMBUTTONS; i++)
d122 1
a122 1
	rClient.DeflateRect(7,7);
d129 1
a129 1
	m_ctrlSpeedMeter.SetRange(0,100);
d661 4
a664 3
//	First get rid of old buttons
//	while saving their states
	for ( int i = GetButtonCount()-1; i >= 0 ; i-- )
d669 1
a669 1
		for (int j= 0; j < MTB_NUMBUTTONS ; j++)
d671 1
a671 1
			if ( m_buttonDefs[j].idCommand == Button.idCommand )
d692 2
a693 3
		int		iIndex = _tstoi(g_App.m_pPrefs->GetDefaultToolbarSettings().Mid(i, 2));

		AddButtons(1, (iIndex == 99) ? &sepButton : &m_buttonDefs[iIndex]);
@


1.46
log
@renamed 3 variables
@
text
@d63 1
a63 1
	ChangeToolbarBitmap(g_App.g_pPrefs->GetToolbarBitmapSettings(), false);
d94 1
a94 1
	CString		config = g_App.g_pPrefs->GetToolbarSettings();
d113 1
a113 1
	ChangeTextLabelStyle(g_App.g_pPrefs->GetToolbarLabelSettings(), false);
d178 1
a178 1
		ChangeTextLabelStyle(g_App.g_pPrefs->GetToolbarLabelSettings(), false);
d323 1
a323 1
	CString		strCurrBitmapSettings = g_App.g_pPrefs->GetToolbarBitmapSettings();
d337 1
a337 1
	if (!g_App.g_pPrefs->GetToolbarBitmapFolderSettings().IsEmpty())
d342 1
a342 1
		CString			strConfigDir = g_App.g_pPrefs->GetToolbarBitmapFolderSettings();
d377 1
a377 1
	UINT		dwPos = static_cast<UINT>(g_App.g_pPrefs->GetToolbarLabelSettings());
d436 1
a436 1
	g_App.g_pPrefs->SetToolbarSettings(strConfig);
d479 1
a479 1
			g_App.g_pPrefs->SetToolbarBitmapFolderSettings(BrowseFolder(m_hWnd,GetResString(IDS_SELECT_TOOLBARBITMAPDIR),g_App.g_pPrefs->GetToolbarBitmapFolderSettings()));
d492 1
a492 1
				if (g_App.g_pPrefs->GetToolbarBitmapSettings() != dialog.GetPathName())
d494 1
a494 1
					g_App.g_pPrefs->SetToolbarBitmapSettings(dialog.GetPathName());
d503 1
a503 1
			g_App.g_pPrefs->SetToolbarLabelSettings(0);
d509 1
a509 1
			g_App.g_pPrefs->SetToolbarLabelSettings(1);
d515 1
a515 1
			g_App.g_pPrefs->SetToolbarLabelSettings(2);
d522 1
a522 1
				if (g_App.g_pPrefs->GetToolbarBitmapSettings() != m_strBitmapPaths[wParam - MP_TOOLBARBITMAP])
d524 1
a524 1
					g_App.g_pPrefs->SetToolbarBitmapSettings(m_strBitmapPaths[wParam - MP_TOOLBARBITMAP]);
d688 1
a688 1
	for (i = 0; i < g_App.g_pPrefs->GetDefaultToolbarSettings().GetLength(); i += 2)
d690 1
a690 1
		int		iIndex = _tstoi(g_App.g_pPrefs->GetDefaultToolbarSettings().Mid(i, 2));
d695 1
a695 1
	g_App.g_pPrefs->SetToolbarSettings(g_App.g_pPrefs->GetDefaultToolbarSettings());
d702 1
a702 1
	ChangeTextLabelStyle(g_App.g_pPrefs->GetToolbarLabelSettings(), false);
@


1.45
log
@IDS_SF_STATISTICS renamed into IDS_STATISTICS;
IDS_EM_SEARCH renamed into IDS_SEARCH_NOUN.
@
text
@d56 1
a56 1
	dwStyle |= TBSTYLE_FLAT | CCS_ADJUSTABLE | CCS_NODIVIDER | ((g_eMuleApp.m_qwComCtrlVer >= MAKEDLLVERULL(6,0,0,0)) ? TBSTYLE_TRANSPARENT : 0);
d63 1
a63 1
	ChangeToolbarBitmap(g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapSettings(), false);
d94 1
a94 1
	CString		config = g_eMuleApp.m_pGlobPrefs->GetToolbarSettings();
d113 1
a113 1
	ChangeTextLabelStyle(g_eMuleApp.m_pGlobPrefs->GetToolbarLabelSettings(), false);
d160 1
a160 1
		if (g_eMuleApp.m_pServerConnect->IsConnected())
d162 1
a162 1
		else if(g_eMuleApp.m_pServerConnect->IsConnecting())
d178 1
a178 1
		ChangeTextLabelStyle(g_eMuleApp.m_pGlobPrefs->GetToolbarLabelSettings(), false);
d323 1
a323 1
	CString		strCurrBitmapSettings = g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapSettings();
d337 1
a337 1
	if (!g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapFolderSettings().IsEmpty())
d342 1
a342 1
		CString			strConfigDir = g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapFolderSettings();
d377 1
a377 1
	UINT		dwPos = static_cast<UINT>(g_eMuleApp.m_pGlobPrefs->GetToolbarLabelSettings());
d436 1
a436 1
	g_eMuleApp.m_pGlobPrefs->SetToolbarSettings(strConfig);
d439 1
a439 1
	g_eMuleApp.m_pdlgEmule->ShowConnectionState(g_eMuleApp.m_pServerConnect->IsConnected(), _T(""), true);
d458 1
a458 1
	if (imageList.Create(bm.bmWidth/11, bm.bmHeight, g_eMuleApp.m_iDfltImageListColorFlags | ILC_MASK, 11, 1))
d479 1
a479 1
			g_eMuleApp.m_pGlobPrefs->SetToolbarBitmapFolderSettings(BrowseFolder(m_hWnd,GetResString(IDS_SELECT_TOOLBARBITMAPDIR),g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapFolderSettings()));
d492 1
a492 1
				if (g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapSettings() != dialog.GetPathName())
d494 1
a494 1
					g_eMuleApp.m_pGlobPrefs->SetToolbarBitmapSettings(dialog.GetPathName());
d503 1
a503 1
			g_eMuleApp.m_pGlobPrefs->SetToolbarLabelSettings(0);
d509 1
a509 1
			g_eMuleApp.m_pGlobPrefs->SetToolbarLabelSettings(1);
d515 1
a515 1
			g_eMuleApp.m_pGlobPrefs->SetToolbarLabelSettings(2);
d522 1
a522 1
				if (g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapSettings() != m_strBitmapPaths[wParam - MP_TOOLBARBITMAP])
d524 1
a524 1
					g_eMuleApp.m_pGlobPrefs->SetToolbarBitmapSettings(m_strBitmapPaths[wParam - MP_TOOLBARBITMAP]);
d610 1
a610 1
		g_eMuleApp.m_pdlgEmule->m_ctlReBar.SetBandInfo(0, &rbbi);
d614 1
a614 1
		g_eMuleApp.m_pdlgEmule->m_ctlReBar.GetWindowRect(&rReBarRect);
d618 1
a618 1
		g_eMuleApp.m_pdlgEmule->GetClientRect(&rClientRect);
d622 1
a622 1
		g_eMuleApp.m_pdlgEmule->m_ctlStatusBar.GetWindowRect(&rStatusbarRect);
d628 1
a628 1
		g_eMuleApp.m_pdlgEmule->GetClientRect(&rClientRect);
d632 1
a632 1
		g_eMuleApp.m_pdlgEmule->m_ctlStatusBar.GetWindowRect(&rStatusbarRect);
d638 7
a644 7
			&g_eMuleApp.m_pdlgEmule->m_wndServer,
			&g_eMuleApp.m_pdlgEmule->m_wndTransfer,
			&g_eMuleApp.m_pdlgEmule->m_wndSharedFiles,
			&g_eMuleApp.m_pdlgEmule->m_dlgSearch,
			&g_eMuleApp.m_pdlgEmule->m_wndChat,
			&g_eMuleApp.m_pdlgEmule->m_wndIRC,
			&g_eMuleApp.m_pdlgEmule->m_dlgStatistics
d650 2
a651 2
			g_eMuleApp.m_pdlgEmule->RemoveAnchor(s_pwndWndsTbl[i]->m_hWnd);
			g_eMuleApp.m_pdlgEmule->AddAnchor(s_pwndWndsTbl[i]->m_hWnd, TOP_LEFT, BOTTOM_RIGHT);
d653 2
a654 2
		g_eMuleApp.m_pdlgEmule->Invalidate();
		g_eMuleApp.m_pdlgEmule->RedrawWindow();
d688 1
a688 1
	for (i = 0; i < g_eMuleApp.m_pGlobPrefs->GetDefaultToolbarSettings().GetLength(); i += 2)
d690 1
a690 1
		int		iIndex = _tstoi(g_eMuleApp.m_pGlobPrefs->GetDefaultToolbarSettings().Mid(i, 2));
d695 1
a695 1
	g_eMuleApp.m_pGlobPrefs->SetToolbarSettings(g_eMuleApp.m_pGlobPrefs->GetDefaultToolbarSettings());
d699 1
a699 1
	g_eMuleApp.m_pdlgEmule->ShowConnectionState(g_eMuleApp.m_pServerConnect->IsConnected(), _T(""), true);
d702 1
a702 1
	ChangeTextLabelStyle(g_eMuleApp.m_pGlobPrefs->GetToolbarLabelSettings(), false);
@


1.44
log
@IDS_EM_SERVER renamed into IDS_SERVERS;
IDS_CW_MESSAGES renamed into IDS_MESSAGES;
IDS_EM_PREFS renamed into IDS_PREFERENCES.
@
text
@d145 1
a145 1
			IDS_EM_SEARCH,
d149 1
a149 1
			IDS_EM_STATISTIC,
@


1.43
log
@Fixed speed-meter disappearance after several turns on/off.
@
text
@d143 1
a143 1
			IDS_EM_SERVER,
d147 1
a147 1
			IDS_EM_MESSAGES,
d150 1
a150 1
			IDS_EM_PREFS
@


1.42
log
@Don't use 32 bit color resources if OS/comctl32.dll doesn't support it and some other minor changes/optimizations.
@
text
@d239 1
@


1.41
log
@Better fix for gui bugs (not need to force redraw anymore)
Code refactoring and optimisation
@
text
@d457 1
a457 1
	if (imageList.Create(bm.bmWidth/11, bm.bmHeight, ILC_COLOR32 | ILC_MASK, 11, 1))
@


1.40
log
@IDS_MAIN_BTN_CANCEL, IDS_MAIN_BTN_CONNECT, IDS_EM_TRANS, IDS_EM_SEARCH,
IDS_EM_FILES, IDS_EM_MESSAGES and IDS_EM_STATISTIC don't contain '&' any more;
Removed useless code to set toolbar labels.
@
text
@d52 9
a62 1
	ModifyStyle(0, TBSTYLE_FLAT | CCS_ADJUSTABLE | CCS_NODIVIDER | ((g_eMuleApp.m_qwComCtrlVer >= MAKEDLLVERULL(6,0,0,0)) ? TBSTYLE_TRANSPARENT : 0));
d112 1
a112 1
	Localize();		// at first we have to localize the button-text!!!
d114 2
a115 2
	SetBtnWidth();		// then calc and set the button width
	AutoSize();		// and finally call the original (but maybe obsolete) function
d139 1
a139 1
	if(m_hWnd)
d141 11
a151 1
		static const uint16	auTBStrIDs[] = {IDS_EM_SERVER,IDS_EM_TRANS,IDS_EM_SEARCH,IDS_EM_FILES,IDS_EM_MESSAGES,IDS_IRC,IDS_EM_STATISTIC,IDS_EM_PREFS};
d157 1
a157 1
		CString			buffer;
d161 1
a161 1
			GetResString(&buffer, IDS_MAIN_BTN_DISCONNECT);
d163 1
a163 1
			GetResString(&buffer, IDS_MAIN_BTN_CANCEL);
d166 2
a167 2
			GetResString(&buffer, IDS_MAIN_BTN_CONNECT);
		tbi.pszText = lstrcpy(m_tstrButtonTitles[0], buffer);
d169 1
d172 2
a173 2
			GetResString(&buffer, auTBStrIDs[i - 1]);
			tbi.pszText = lstrcpy(m_tstrButtonTitles[i], buffer);
d193 1
a193 1
	if (m_ctrlSpeedMeter.m_hWnd && m_bUseSpeedMeter)
d269 1
a269 1
			if (!IsButtonHidden(IDC_TOOLBARBUTTON+i))
d326 1
a326 1
	if (strCurrBitmapSettings == "")
d336 1
a336 1
	if (g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapFolderSettings() != "")
d344 1
a344 1
		hSearch = ::FindFirstFile(strConfigDir + CString("*.eMuleToolbar.bmp"), &FileData);
d418 1
a418 1
	CString			config;
d427 1
a427 1
					config += _T("99");
d430 1
a430 1
					config.AppendFormat(_T("%02u"), buttoninfo.idCommand - IDC_TOOLBARBUTTON);
d435 1
a435 1
	g_eMuleApp.m_pGlobPrefs->SetToolbarSettings(config);
d438 1
a438 1
	g_eMuleApp.m_pdlgEmule->ShowConnectionState(g_eMuleApp.m_pServerConnect->IsConnected(),_T(""),true);
d445 1
a445 1
void CMuleToolbarCtrl::ChangeToolbarBitmap(CString path, bool refresh)
d450 2
a451 2
//	Free previous image list resources
	HIMAGELIST hImgLst = reinterpret_cast<HIMAGELIST>(::SendMessage(m_hWnd, TB_GETIMAGELIST, 0, 0));
d453 3
a455 2
	if (hImgLst)
		ImageList_Destroy(hImgLst);
d457 4
a460 8
	if (path != _T("") && Bitmap.LoadImage(path))
	{
	}
	else
	{
		Bitmap.LoadBitmap(IDB_TOOLBAR);
	}
	BITMAP		bm;
a461 9
	Bitmap.GetBitmap(&bm);
	imageList.Create(bm.bmWidth/11, bm.bmHeight, ILC_COLOR32 | ILC_MASK, 11, 1);
	imageList.Add(&Bitmap, RGB(255,0,255));
	SetImageList(&imageList);
//	DonGato: force redraw of toolbar because if we don't the first time we change it
//		isn't refreshed at all. Don't know why... it might be a bug of CToolBarCtrl
	Invalidate(true);
	RedrawWindow();
//
d463 4
a466 1
	if (refresh)
d477 1
d480 1
a480 1

d482 1
d485 1
a485 1

d491 1
a491 1
				if(g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapSettings()!=dialog.GetPathName())
a498 1

d500 2
a501 1
			ChangeTextLabelStyle(0,TRUE);
d504 1
a504 1

d506 2
a507 1
			ChangeTextLabelStyle(1,TRUE);
d510 1
a510 1

d512 2
a513 1
			ChangeTextLabelStyle(2,TRUE);
d516 1
d518 4
a521 2
			if(wParam >= MP_TOOLBARBITMAP && wParam <= MP_TOOLBARBITMAP+50)
				if(g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapSettings()!=m_strBitmapPaths[wParam-MP_TOOLBARBITMAP])
d523 2
a524 2
					g_eMuleApp.m_pGlobPrefs->SetToolbarBitmapSettings(m_strBitmapPaths[wParam-MP_TOOLBARBITMAP]);
					ChangeToolbarBitmap(m_strBitmapPaths[wParam-MP_TOOLBARBITMAP], true);
d526 3
d589 1
a589 1
	static int	previousheight=0;
d598 1
a598 1
		previousheight=rToolbarRect.Height();
d635 1
a635 3
		CWnd		*wnds[] = {&g_eMuleApp.m_pdlgEmule->m_wndServer,&g_eMuleApp.m_pdlgEmule->m_wndTransfer,&g_eMuleApp.m_pdlgEmule->m_wndSharedFiles,&g_eMuleApp.m_pdlgEmule->m_dlgSearch,&g_eMuleApp.m_pdlgEmule->m_wndChat,&g_eMuleApp.m_pdlgEmule->m_wndIRC,&g_eMuleApp.m_pdlgEmule->m_dlgStatistics};

		for (int i = 0; i < 7; i++)
d637 14
a650 3
			wnds[i]->SetWindowPos(NULL, rClientRect.left, rClientRect.top,rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
			g_eMuleApp.m_pdlgEmule->RemoveAnchor(wnds[i]->m_hWnd);
			g_eMuleApp.m_pdlgEmule->AddAnchor(wnds[i]->m_hWnd,TOP_LEFT,BOTTOM_RIGHT);
@


1.39
log
@1) corrected default toolbar definition
2) improved processing of the username by anti-leecher feature
3) unified async GUI updade of Upload, Queue & Client lists
@
text
@a56 14
//	Add button-text
	static const UINT s_adwResIdTbl[] = {
		IDS_MAIN_BTN_CONNECT, IDS_EM_SERVER, IDS_EM_TRANS, IDS_EM_SEARCH,
		IDS_EM_FILES, IDS_EM_MESSAGES, IDS_IRC, IDS_EM_STATISTIC, IDS_EM_PREFS
	};
	CString		strBarText;

	for (unsigned ui = 0; ui < ELEMENT_COUNT(s_adwResIdTbl); ui++)
	{
		strBarText += GetResString(s_adwResIdTbl[ui]);
		strBarText += _T('\0');
	}
	AddStrings(strBarText);

d61 1
a61 1
		m_buttonDefs[i].fsStyle	= TBSTYLE_CHECK;	// TBSTYLE_CHECKGROUP;
d64 1
a64 1
		m_buttonDefs[i].iString	= i;
a104 1
	//m_iToolbarLabelSettings = 4; // eklmn: move into constructor
d133 1
a133 1
		static const int	TBStringIDs[] = {IDS_EM_SERVER,IDS_EM_TRANS,IDS_EM_SEARCH,IDS_EM_FILES,IDS_EM_MESSAGES,IDS_IRC,IDS_EM_STATISTIC,IDS_EM_PREFS};
d137 1
a137 1
		tbi.cbSize = sizeof (TBBUTTONINFO);
d143 1
a143 1
			buffer = GetResString(IDS_MAIN_BTN_DISCONNECT);
d145 1
a145 1
			buffer = GetResString(IDS_MAIN_BTN_CANCEL);
d148 7
a154 11
			buffer = GetResString(IDS_MAIN_BTN_CONNECT);
		buffer.Remove('&');
		_stprintf(m_tstrButtonTitles[0], _T("%s"), buffer);
		tbi.pszText = m_tstrButtonTitles[0];
		SetButtonInfo(IDC_TOOLBARBUTTON+MTB_CONNECT, &tbi);
		for (int i = 1; i < 9; i++)
		{
			buffer = GetResString(TBStringIDs[i-1]); // EC
			buffer.Remove('&');
			_stprintf(m_tstrButtonTitles[i], _T("%s"), buffer);
			tbi.pszText = m_tstrButtonTitles[i];
d260 1
a260 1
		ReleaseDC(pDC); // FoRcHa
d384 1
a384 1
	if (pNMTB->iItem > 8)
d386 3
a388 1
		*pResult = FALSE;
d392 1
a392 3
		pNMTB->pszText = m_tstrButtonTitles[pNMTB->iItem];
		pNMTB->tbButton = m_buttonDefs[pNMTB->iItem];
		*pResult = TRUE;
@


1.38
log
@replaced TrackPopupMenu over TrackPopupMenuEx
@
text
@d677 1
a677 1
	for (i = 0; i < strDefaultToolbar.GetLength(); i += 2)
d679 1
a679 1
		int		iIndex = _tstoi(strDefaultToolbar.Mid(i, 2));
d684 1
a684 1
	g_eMuleApp.m_pGlobPrefs->SetToolbarSettings(strDefaultToolbar);
@


1.37
log
@Improved string processing
@
text
@d382 1
a382 1
	menuToolbar.TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this);
@


1.36
log
@Solved potential crash which can be caused by incorrect value of ToolbarSettings (preferences.ini);
Improved string processing.
@
text
@a55 3
//	Add button-text:
	TCHAR		cButtonStrings[2000];
	int			lLen, lLen2;
d57 6
a62 2
	_tcscpy(cButtonStrings, GetResString(IDS_MAIN_BTN_CONNECT));
	lLen = _tcslen(GetResString(IDS_MAIN_BTN_CONNECT)) + 1;
d64 6
a69 35
	lLen2 = _tcslen(GetResString(IDS_EM_SERVER)) + 1;
	memcpy2(cButtonStrings+lLen, GetResString(IDS_EM_SERVER), lLen2);
	lLen += lLen2;

	lLen2 = _tcslen(GetResString(IDS_EM_TRANS)) + 1;
	memcpy2(cButtonStrings+lLen, GetResString(IDS_EM_TRANS), lLen2);
	lLen += lLen2;

	lLen2 = _tcslen(GetResString(IDS_EM_SEARCH)) + 1;
	memcpy2(cButtonStrings+lLen, GetResString(IDS_EM_SEARCH), lLen2);
	lLen += lLen2;

	lLen2 = _tcslen(GetResString(IDS_EM_FILES)) + 1;
	memcpy2(cButtonStrings+lLen, GetResString(IDS_EM_FILES), lLen2);
	lLen += lLen2;

	lLen2 = _tcslen(GetResString(IDS_EM_MESSAGES)) + 1;
	memcpy2(cButtonStrings+lLen, GetResString(IDS_EM_MESSAGES), lLen2);
	lLen += lLen2;

	lLen2 = _tcslen(GetResString(IDS_IRC)) + 1;
	memcpy2(cButtonStrings+lLen, GetResString(IDS_IRC), lLen2);
	lLen += lLen2;

	lLen2 = _tcslen(GetResString(IDS_EM_STATISTIC)) + 1;
	memcpy2(cButtonStrings+lLen, GetResString(IDS_EM_STATISTIC), lLen2);
	lLen += lLen2;

	lLen2 = _tcslen(GetResString(IDS_EM_PREFS)) + 1;
	memcpy2(cButtonStrings+lLen, GetResString(IDS_EM_PREFS), lLen2);
	lLen += lLen2;

	memcpy2(cButtonStrings+lLen, "\0", 1);

	AddStrings(cButtonStrings);
d71 1
a71 1
//	Add buttons:
@


1.35
log
@Fixed GDI resource loss after toolbar skin changing;
Improved context menu creation; optimization;
Bitmap.DeleteObject() is removed, because destructor does it.
@
text
@d132 2
a133 1
		int		index = _tstoi(config.Mid(i,2));
d135 5
a139 4
		if (index == 99)
		{
			AddButtons(1, &sepButton);
		}
d141 2
a142 3
		{
			AddButtons(1, &m_buttonDefs[index]);
		}
d158 1
a158 3
	int			iHeight = rClient.Height();

	rClient.left = rClient.right - iHeight * 2;
a446 1
	CString			strTmp;
d458 1
a458 2
					strTmp.Format(_T("%.2lu"), buttoninfo.idCommand-IDC_TOOLBARBUTTON);
					config += strTmp;
d705 1
a705 3
	CString		config = strDefaultToolbar;

	for( i = 0; i < config.GetLength(); i += 2)
d707 1
a707 1
		int		index = _tstoi(config.Mid(i,2));
d709 1
a709 8
		if (index == 99)
		{
			AddButtons(1,&sepButton);
		}
		else
		{
			AddButtons(1,&m_buttonDefs[index]);
		}
d712 1
a712 2
	g_eMuleApp.m_pGlobPrefs->SetToolbarSettings(config.GetBuffer(256));
	config.ReleaseBuffer();
@


1.34
log
@formatting;
more button code comitted but not compiled as default
@
text
@d339 1
d343 1
a343 1
	CMenu		m_ToolbarMenu;
d345 4
a348 9
	m_ToolbarMenu.CreatePopupMenu();

	CMenu		m_BitmapsMenu;

	m_BitmapsMenu.CreateMenu();
	m_BitmapsMenu.AppendMenu(MF_STRING,MP_SELECTTOOLBARBITMAP, GetResString(IDS_SELECTTOOLBARBITMAP));
	m_BitmapsMenu.AppendMenu(MF_STRING,MP_SELECTTOOLBARBITMAPDIR, GetResString(IDS_SELECTTOOLBARBITMAPDIR));
	m_BitmapsMenu.AppendMenu(MF_SEPARATOR);
	m_BitmapsMenu.AppendMenu(MF_STRING,MP_TOOLBARBITMAP,GetResString(IDS_DEFAULT));
d351 3
a353 2
	CString		currentBitmapSettings = g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapSettings();
	bool		checked = false;
d355 1
a355 1
	if (currentBitmapSettings == "")
d357 2
a358 3
		m_BitmapsMenu.CheckMenuItem(MP_TOOLBARBITMAP,MF_CHECKED);
		m_BitmapsMenu.EnableMenuItem(MP_TOOLBARBITMAP,MF_DISABLED);
		checked = true;
d360 1
d363 1
a363 1
	int		i=1;
d367 8
a374 10
		WIN32_FIND_DATA		FileData;
		HANDLE				hSearch;
		bool				fFinished = false;
		CString				configDir;

		configDir = g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapFolderSettings();
		hSearch = FindFirstFile(configDir + CString("\\*.eMuleToolbar.bmp"), &FileData);
		if (hSearch == INVALID_HANDLE_VALUE)
			fFinished = true;
		for ( ; !fFinished && i < 50; i++)
d376 4
a379 1
			CString		bitmapFileName = FileData.cFileName;
d381 10
a390 10
			m_BitmapsMenu.AppendMenu(MF_STRING,MP_TOOLBARBITMAP + i, bitmapFileName.Left(bitmapFileName.GetLength() - 17));
			m_strBitmapPaths.Add(configDir + CString("\\")+bitmapFileName);
			if (!checked && currentBitmapSettings == m_strBitmapPaths[i])
			{
				m_BitmapsMenu.CheckMenuItem(MP_TOOLBARBITMAP+i,MF_CHECKED);
				m_BitmapsMenu.EnableMenuItem(MP_TOOLBARBITMAP+i,MF_DISABLED);
				checked = true;
			}
			if (!FindNextFile(hSearch, &FileData))
				fFinished = true;
a391 1
		FindClose(hSearch);
d393 1
a393 1
	if (!checked)
d395 17
a411 18
		m_BitmapsMenu.AppendMenu(MF_STRING,MP_TOOLBARBITMAP + i, currentBitmapSettings);
		m_BitmapsMenu.CheckMenuItem(MP_TOOLBARBITMAP+i, MF_CHECKED);
		m_BitmapsMenu.EnableMenuItem(MP_TOOLBARBITMAP+i, MF_DISABLED);
		m_strBitmapPaths.Add(currentBitmapSettings);
	}
	m_ToolbarMenu.AppendMenu(MF_STRING|MF_POPUP, (UINT_PTR)m_BitmapsMenu.m_hMenu, GetResString(IDS_TOOLBARSKINS));

	CMenu		m_TextLabelsMenu;

	m_TextLabelsMenu.CreateMenu();
	m_TextLabelsMenu.AppendMenu(MF_STRING,MP_NOTEXTLABELS, GetResString(IDS_NOTEXTLABELS));
	m_TextLabelsMenu.AppendMenu(MF_STRING,MP_TEXTLABELS,GetResString(IDS_ENABLETEXTLABELS));
	m_TextLabelsMenu.AppendMenu(MF_STRING,MP_TEXTLABELSONRIGHT,GetResString(IDS_TEXTLABELSONRIGHT));
	m_TextLabelsMenu.CheckMenuItem(g_eMuleApp.m_pGlobPrefs->GetToolbarLabelSettings(),MF_BYPOSITION|MF_CHECKED);
	m_TextLabelsMenu.EnableMenuItem(g_eMuleApp.m_pGlobPrefs->GetToolbarLabelSettings(),MF_BYPOSITION|MF_DISABLED);
	m_ToolbarMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_TextLabelsMenu.m_hMenu, GetResString(IDS_TEXTLABELS));
	m_ToolbarMenu.AppendMenu(MF_STRING,MP_CUSTOMIZETOOLBAR, GetResString(IDS_CUSTOMIZETOOLBAR));
	m_ToolbarMenu.TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this);
d481 6
d496 1
a496 1
	Bitmap.GetObject(sizeof(BITMAP),&bm);
a505 1
	Bitmap.DeleteObject();
@


1.33
log
@fix: min search doesn't work, due to my changes
@
text
@d103 1
a103 1
		m_buttonDefs[i].fsStyle	= TBSTYLE_CHECK;//TBSTYLE_CHECKGROUP;
d105 1
a105 1
		m_buttonDefs[i].idCommand	= IDC_TOOLBARBUTTON + i;
a136 1
			continue;
d138 4
a141 1
		AddButtons(1, &m_buttonDefs[index]);
d177 1
a177 1
		static const int	TBStringIDs[]={IDS_EM_SERVER,IDS_EM_TRANS,IDS_EM_SEARCH,IDS_EM_FILES,IDS_EM_MESSAGES,IDS_IRC,IDS_EM_STATISTIC,IDS_EM_PREFS};
d203 1
a203 1
			SetButtonInfo(IDC_TOOLBARBUTTON+i, &tbi);
d206 1
a206 1
		m_iToolbarLabelSettings=4;
d287 1
a287 1
	if (m_iToolbarLabelSettings==1)
d320 1
a320 1
	else if(m_iToolbarLabelSettings==2)
d586 1
a586 1
		if ((m_iToolbarLabelSettings+settings) != 2) //if not changing between no labels and labels on right
d603 1
a603 1
		m_iToolbarLabelSettings=settings;
d664 1
a664 1
		CWnd		*wnds[]={&g_eMuleApp.m_pdlgEmule->m_wndServer,&g_eMuleApp.m_pdlgEmule->m_wndTransfer,&g_eMuleApp.m_pdlgEmule->m_wndSharedFiles,&g_eMuleApp.m_pdlgEmule->m_dlgSearch,&g_eMuleApp.m_pdlgEmule->m_wndChat,&g_eMuleApp.m_pdlgEmule->m_wndIRC,&g_eMuleApp.m_pdlgEmule->m_dlgStatistics};
a715 1
			continue;
d717 4
a720 1
		AddButtons(1,&m_buttonDefs[index]);
@


1.32
log
@*** empty log message ***
@
text
@d59 1
a59 1
	
d99 1
a99 1
//	Add buttons:	
d101 1
a101 1
	{		
d109 1
a109 1
		{		
d119 1
a119 1
	
d127 1
a127 1
	
d142 1
a142 1
//	Recalc toolbar-size:	
d148 1
a148 1
	
d164 1
a164 1
//	Resize speed-meter	
d172 1
a172 1
{	
d182 1
a182 1
		
d215 1
a215 1
		
d219 1
a219 1
		
d229 1
a229 1
		
d234 1
a234 1
		{	
d238 1
a238 1
		
d243 1
a243 1
		
d256 1
a256 1
	
d263 1
a263 1
		//	Resize speed-meter	
d339 1
a339 1
	
d516 1
a516 1
		
d584 1
a584 1
		if ((m_iToolbarLabelSettings+settings) != 2) //if not changing between no labels and labels on right 
d587 1
a587 1
			{	
d637 1
a637 1
		
d695 1
a695 1
	
d703 2
a704 2
	
//	Set default configuration 
d718 1
a718 1
//	Save new (default) configuration 
d729 1
a729 1
	AutoSize();		
@


1.31
log
@fixed CString::Format mistakes
@
text
@d459 1
a459 1
					config += "99";
d483 1
a483 1
	if (path != "" && Bitmap.LoadImage(path))
@


1.30
log
@Formatting, comments, and name changes.
@
text
@d450 1
d459 1
a459 1
					config.Format(_T("%s99"), config);
d462 2
a463 1
					config.Format(_T("%s%.2lu"), config, buttoninfo.idCommand-IDC_TOOLBARBUTTON);
@


1.29
log
@Fixed bug #0000411 - Sort arrow background color does not match some color schemes
@
text
@d54 1
a54 1
	ModifyStyle(0, TBSTYLE_FLAT | CCS_ADJUSTABLE | CCS_NODIVIDER | ((g_eMuleApp.m_ullComCtrlVer >= MAKEDLLVERULL(6,0,0,0)) ? TBSTYLE_TRANSPARENT : 0));
@


1.28
log
@Formatting, comments, and name changes.
@
text
@d54 1
a54 1
	ModifyStyle(0, TBSTYLE_FLAT | CCS_ADJUSTABLE | TBSTYLE_TRANSPARENT | CCS_NODIVIDER);
@


1.27
log
@Formatting, comments, and name changes.
Removed #includes for "memcpy_amd.h".
@
text
@d478 1
a478 1
	CImageList		ImageList;
d491 3
a493 3
	ImageList.Create(bm.bmWidth/11, bm.bmHeight, ILC_COLOR32 | ILC_MASK, 11, 1);
	ImageList.Add(&Bitmap, RGB(255,0,255));
	SetImageList(&ImageList);
d499 1
a499 1
	ImageList.Detach();
@


1.26
log
@speed optimization in OnSize()
@
text
@d8 1
a8 1
#include "memcpy_amd.h"
@


1.25
log
@Customization for Scan Filter.
Fix for preferences toolbar button (take care when you do code renaming to keep the correct values)
@
text
@d41 5
d144 1
a144 1
	m_iToolbarLabelSettings = 4;
d215 4
@


1.24
log
@Formatting, comments, and name changes.
@
text
@d106 1
a106 1
			case MTB_STATISTICS:
@


1.23
log
@fixed toolbar text disappears when buttons were rearranged (#0000319)
proper resize of toolbar when language is changed (just a Plus :P)
@
text
@a20 14
// CMuleToolbarCtrl

IMPLEMENT_DYNAMIC(CMuleToolbarCtrl, CToolBarCtrl)
CMuleToolbarCtrl::CMuleToolbarCtrl()
{
	m_bUseSpeedMeter = false;
	m_iLastPressedButton = -1;
}

CMuleToolbarCtrl::~CMuleToolbarCtrl()
{
}


d32 15
d51 3
a53 3
	// add button-text:
	TCHAR cButtonStrings[2000];
	int lLen, lLen2;
d94 2
a95 2
	// add buttons:	
	for(int i = 0; i < 9; i++)
d97 5
a101 5
		TBButtons[i].fsState	= TBSTATE_ENABLED;
		TBButtons[i].fsStyle	= TBSTYLE_CHECK;//TBSTYLE_CHECKGROUP;
		TBButtons[i].iBitmap	= i;
		TBButtons[i].idCommand	= IDC_TOOLBARBUTTON + i;
		TBButtons[i].iString	= i;
d103 1
a103 1
		switch(i)
d105 3
a107 3
			case 0:
			case 8:
				TBButtons[i].fsStyle = TBSTYLE_BUTTON;
d109 2
a110 2
			case 1:
				TBButtons[i].fsState |= TBSTATE_CHECKED;
d113 1
a113 1
	m_iLastPressedButton = IDC_TOOLBARBUTTON+1;
d115 2
a116 1
	TBBUTTON sepButton;
d123 3
a125 2
	CString config = g_eMuleApp.m_pGlobPrefs->GetToolbarSettings();
	for(i=0;i<config.GetLength();i+=2)
d127 3
a129 2
		int index = _tstoi(config.Mid(i,2));
		if(index==99)
d131 1
a131 1
			AddButtons(1,&sepButton);
d134 1
a134 1
		AddButtons(1,&TBButtons[index]);
d137 1
a137 1
	// recalc toolbar-size:	
d139 1
a139 1
	m_iToolbarLabelSettings=4;
d144 3
a146 2
	// add speed-meter to upper-right corner
	CRect rClient;
d149 3
a151 1
	int iHeight = rClient.Height();
d153 1
a153 1
	if(m_bUseSpeedMeter)
d159 3
a161 2
	// resize speed-meter	
	CRect r;
d165 1
a165 1

d170 3
a172 2
		static const int TBStringIDs[]={IDS_EM_SERVER,IDS_EM_TRANS,IDS_EM_SEARCH,IDS_EM_FILES,IDS_EM_MESSAGES,IDS_IRC,IDS_EM_STATISTIC,IDS_EM_PREFS};
		TBBUTTONINFO tbi;
d175 2
a176 1
		CString buffer;
d179 1
a179 1
		if(g_eMuleApp.m_pServerConnect->IsConnected())
d187 3
a189 3
		_stprintf(TBStrings[0], _T("%s"), buffer);
		tbi.pszText = TBStrings[0];
		SetButtonInfo(IDC_TOOLBARBUTTON+0, &tbi);
d194 2
a195 2
			_stprintf(TBStrings[i], _T("%s"), buffer);
			tbi.pszText = TBStrings[i];
d206 1
a206 1

d211 1
a211 1
	if(m_ctrlSpeedMeter.m_hWnd && m_bUseSpeedMeter)
d213 2
a214 1
		CRect rClient;
d218 2
a219 2
		int iHeight = rClient.Height();
		int iLeft  = rClient.right - iHeight;
d221 2
a222 1
		CSize csMaxSize;
d224 1
a224 1
		if(rClient.left + csMaxSize.cx + 7 > iLeft)
d231 1
a231 1
		if(iLeft <= rClient.left + csMaxSize.cx + 7)
d235 3
a237 3
		m_ctrlSpeedMeter.SetWindowPos(NULL, rClient.left, rClient.top, 
										rClient.Width(), rClient.Height(), 
											SWP_NOZORDER | SWP_SHOWWINDOW);
d243 1
a243 1

d248 1
a248 1
	if(bShow)
d250 1
a250 1
		if(!m_ctrlSpeedMeter.IsWindowVisible())
d253 4
a256 2
			// resize speed-meter	
			CRect r;
d265 3
a267 1
		CRect rInvalidate;
d273 1
a273 1

d276 1
a276 1
	if(m_iToolbarLabelSettings==1)
d278 4
a281 4
		CDC *pDC = GetDC();
		CFont *pFnt = GetFont();
		CFont *pOldFnt = pDC->SelectObject(pFnt);
		CRect r(0,0,0,0);
d283 2
a284 2
		// calculate the max. possible button-size
		int iCalcSize = 0;
d286 2
a287 2
		for(int i = 0; i < 9; i++)
			if(!IsButtonHidden(IDC_TOOLBARBUTTON+i))
d289 1
a289 1
				pDC->DrawText(TBStrings[i], -1, r, DT_SINGLELINE | DT_CALCRECT);
a299 1
		int iMaxPossible = r.Width() / 9;
d301 4
a304 2
		// if the buttons are to big, reduze their size
		if(iCalcSize > iMaxPossible)
d322 1
a322 1

d326 4
a329 2
	POINT point;
	GetCursorPos (&point);
d331 2
a332 1
	CMenu m_ToolbarMenu;
d334 3
a336 1
	CMenu m_BitmapsMenu;
d342 6
a347 4
	bitmappaths.RemoveAll();
	CString currentBitmapSettings = g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapSettings();
	bool checked=false;
	if(currentBitmapSettings=="")
d351 1
a351 1
		checked=true;
d353 11
a363 8
	bitmappaths.Add(_T(""));
	int i=1;
	if(g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapFolderSettings() != "")
	{
		WIN32_FIND_DATA FileData;
		HANDLE hSearch;
		bool fFinished = false;
		CString configDir;
d368 1
a368 1
		for(;!fFinished && i<50;i++)
d370 5
a374 4
			CString bitmapFileName = FileData.cFileName;
			m_BitmapsMenu.AppendMenu(MF_STRING,MP_TOOLBARBITMAP+i,bitmapFileName.Left(bitmapFileName.GetLength()-17));
			bitmappaths.Add(configDir + CString("\\")+bitmapFileName);
			if(!checked && currentBitmapSettings==bitmappaths[i])
d378 1
a378 1
				checked=true;
d385 1
a385 1
	if(!checked)
d387 4
a390 4
		m_BitmapsMenu.AppendMenu(MF_STRING,MP_TOOLBARBITMAP+i,currentBitmapSettings);
		m_BitmapsMenu.CheckMenuItem(MP_TOOLBARBITMAP+i,MF_CHECKED);
		m_BitmapsMenu.EnableMenuItem(MP_TOOLBARBITMAP+i,MF_DISABLED);
		bitmappaths.Add(currentBitmapSettings);
d392 4
a395 2
	m_ToolbarMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_BitmapsMenu.m_hMenu, GetResString(IDS_TOOLBARSKINS));
	CMenu m_TextLabelsMenu;
d410 1
a410 1

d415 1
a415 1

d420 1
a420 1

d423 2
a424 1
	LPNMTOOLBAR pNMTB = reinterpret_cast<LPNMTOOLBAR>(pNMHDR);
d431 2
a432 2
		pNMTB->pszText=TBStrings[pNMTB->iItem];
		pNMTB->tbButton = TBButtons[pNMTB->iItem];
d436 1
a436 1

d439 4
a442 3
	TBBUTTON buttoninfo;
	CString config;
	for(int i=0;i<GetButtonCount();i++)
d444 3
a446 2
		if(GetButton(i, &buttoninfo))
			switch(buttoninfo.idCommand)
d455 1
d466 1
a466 1

d469 6
a474 3
	CImageList ImageList;
	CEnBitmap Bitmap;
	if(path!="" && Bitmap.LoadImage(path));
d476 1
d478 3
a480 1
	BITMAP bm;
d485 2
a486 2
	// DonGato: force redraw of toolbar because if we don't the first time we change it
	// isn't refreshed at all. Don't know why... it might be a bug of CToolBarCtrl
d489 1
a489 1
	//
d492 1
a492 1
	if(refresh)
d495 1
a495 1

d514 1
d520 1
d540 1
a540 1
				if(g_eMuleApp.m_pGlobPrefs->GetToolbarBitmapSettings()!=bitmappaths[wParam-MP_TOOLBARBITMAP])
d542 2
a543 2
					g_eMuleApp.m_pGlobPrefs->SetToolbarBitmapSettings(bitmappaths[wParam-MP_TOOLBARBITMAP]);
					ChangeToolbarBitmap(bitmappaths[wParam-MP_TOOLBARBITMAP], true);
d553 1
a553 1

d556 1
a556 1
	if(m_iToolbarLabelSettings!=settings)
d558 1
a558 1
		switch(settings)
d573 1
a573 1
		if((m_iToolbarLabelSettings+settings)!=2) //if not changing between no labels and labels on right 
d575 1
a575 1
			for(int i = 0; i < 9; i++)
d577 2
a578 1
				TBBUTTONINFO buttonInfo;
d582 2
a583 1
				if(settings==1)
d591 1
a591 1
		if(refresh)
d595 1
a595 1

d600 3
a602 1
	CRect rToolbarRect;
d604 4
a607 2
	static int previousheight=0;
	if(previousheight==rToolbarRect.Height())
d616 3
a618 2
		REBARBANDINFO rbbi;
		CSize sizeBar;
d627 2
a628 1
		CRect rReBarRect;
d630 3
a632 1
		CRect rClientRect;
d634 3
a636 1
		CRect rStatusbarRect;
d641 2
a642 1
		CRect rClientRect;
d644 3
a646 1
		CRect rStatusbarRect;
d651 3
a653 2
		CWnd* wnds[]={&g_eMuleApp.m_pdlgEmule->m_wndServer,&g_eMuleApp.m_pdlgEmule->m_wndTransfer,&g_eMuleApp.m_pdlgEmule->m_wndSharedFiles,&g_eMuleApp.m_pdlgEmule->m_dlgSearch,&g_eMuleApp.m_pdlgEmule->m_wndChat,&g_eMuleApp.m_pdlgEmule->m_wndIRC,&g_eMuleApp.m_pdlgEmule->m_dlgStatistics};
		for(int i=0;i<7;i++)
d663 1
a663 1

d666 2
a667 2
	// First get rid of old buttons
	// while saving their states
d670 2
a671 1
		TBBUTTON Button;
d673 1
a673 1
		for ( int j= 0; j < 9 ; j++ )
d675 1
a675 1
			if ( TBButtons[j].idCommand == Button.idCommand )
d677 3
a679 3
				TBButtons[j].fsState	=	Button.fsState;
				TBButtons[j].fsStyle	=	Button.fsStyle;
				TBButtons[j].iString	=	Button.iString;
d685 2
a686 1
	TBBUTTON sepButton;
d693 4
a696 3
	// set default configuration 
	CString config = strDefaultToolbar;
	for(i=0;i<config.GetLength();i+=2)
d698 3
a700 2
		int index = _tstoi(config.Mid(i,2));
		if(index==99)
d705 1
a705 1
		AddButtons(1,&TBButtons[index]);
d707 1
a707 1
	// save new (default) configuration 
d713 1
a713 1
	g_eMuleApp.m_pdlgEmule->ShowConnectionState(g_eMuleApp.m_pServerConnect->IsConnected(),_T(""),true);
d715 1
a715 1
	m_iToolbarLabelSettings=4;
d720 1
a720 1

d725 1
@


1.22
log
@Removed all #ifndef AMDs and consolidated CPU specific behavior in md4cpy() and new method memcpy2() (come up with a better name if you can :P ).
@
text
@d189 4
a193 1
		SetBtnWidth();
a231 1

d291 7
@


1.21
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d58 1
a58 5
	#ifndef AMD
	memcpy(cButtonStrings+lLen, GetResString(IDS_EM_SERVER), lLen2);
	#else
	memcpy_amd(cButtonStrings+lLen, GetResString(IDS_EM_SERVER), lLen2);
	#endif
d62 1
a62 5
	#ifndef AMD
	memcpy(cButtonStrings+lLen, GetResString(IDS_EM_TRANS), lLen2);
	#else
	memcpy_amd(cButtonStrings+lLen, GetResString(IDS_EM_TRANS), lLen2);
	#endif
d66 1
a66 5
	#ifndef AMD
	memcpy(cButtonStrings+lLen, GetResString(IDS_EM_SEARCH), lLen2);
	#else
	memcpy_amd(cButtonStrings+lLen, GetResString(IDS_EM_SEARCH), lLen2);
	#endif
d70 1
a70 5
	#ifndef AMD
	memcpy(cButtonStrings+lLen, GetResString(IDS_EM_FILES), lLen2);
	#else
	memcpy_amd(cButtonStrings+lLen, GetResString(IDS_EM_FILES), lLen2);
	#endif
d74 1
a74 5
	#ifndef AMD
	memcpy(cButtonStrings+lLen, GetResString(IDS_EM_MESSAGES), lLen2);
	#else
	memcpy_amd(cButtonStrings+lLen, GetResString(IDS_EM_MESSAGES), lLen2);
	#endif
d78 1
a78 5
	#ifndef AMD
	memcpy(cButtonStrings+lLen, GetResString(IDS_IRC), lLen2);
	#else
	memcpy_amd(cButtonStrings+lLen, GetResString(IDS_IRC), lLen2);
	#endif
d82 1
a82 5
	#ifndef AMD
	memcpy(cButtonStrings+lLen, GetResString(IDS_EM_STATISTIC), lLen2);
	#else
	memcpy_amd(cButtonStrings+lLen, GetResString(IDS_EM_STATISTIC), lLen2);
	#endif
d86 1
a86 5
	#ifndef AMD
	memcpy(cButtonStrings+lLen, GetResString(IDS_EM_PREFS), lLen2);
	#else
	memcpy_amd(cButtonStrings+lLen, GetResString(IDS_EM_PREFS), lLen2);
	#endif
d89 1
a89 5
	#ifndef AMD
	memcpy(cButtonStrings+lLen, "\0", 1);
	#else
	memcpy_amd(cButtonStrings+lLen, "\0", 1);
	#endif
@


1.20
log
@Fixed toolbar skin change
@
text
@d49 1
a49 1
	ChangeToolbarBitmap(theApp.glob_prefs->GetToolbarBitmapSettings(), false);
d157 1
a157 1
	CString config = theApp.glob_prefs->GetToolbarSettings();
d172 1
a172 1
	ChangeTextLabelStyle(theApp.glob_prefs->GetToolbarLabelSettings(), false);
d205 1
a205 1
		if(theApp.serverconnect->IsConnected())
d207 1
a207 1
		else if(theApp.serverconnect->IsConnecting())
d348 1
a348 1
	CString currentBitmapSettings = theApp.glob_prefs->GetToolbarBitmapSettings();
d358 1
a358 1
	if(theApp.glob_prefs->GetToolbarBitmapFolderSettings() != "")
d364 1
a364 1
		configDir = theApp.glob_prefs->GetToolbarBitmapFolderSettings();
d397 2
a398 2
	m_TextLabelsMenu.CheckMenuItem(theApp.glob_prefs->GetToolbarLabelSettings(),MF_BYPOSITION|MF_CHECKED);
	m_TextLabelsMenu.EnableMenuItem(theApp.glob_prefs->GetToolbarLabelSettings(),MF_BYPOSITION|MF_DISABLED);
d450 1
a450 1
	theApp.glob_prefs->SetToolbarSettings(config);
d453 1
a453 1
	theApp.emuledlg->ShowConnectionState(theApp.serverconnect->IsConnected(),_T(""),true);
d490 1
a490 1
			theApp.glob_prefs->SetToolbarBitmapFolderSettings(BrowseFolder(m_hWnd,GetResString(IDS_SELECT_TOOLBARBITMAPDIR),theApp.glob_prefs->GetToolbarBitmapFolderSettings()));
d501 1
a501 1
				if(theApp.glob_prefs->GetToolbarBitmapSettings()!=dialog.GetPathName())
d503 1
a503 1
					theApp.glob_prefs->SetToolbarBitmapSettings(dialog.GetPathName());
d511 1
a511 1
			theApp.glob_prefs->SetToolbarLabelSettings(0);
d516 1
a516 1
			theApp.glob_prefs->SetToolbarLabelSettings(1);
d521 1
a521 1
			theApp.glob_prefs->SetToolbarLabelSettings(2);
d525 1
a525 1
				if(theApp.glob_prefs->GetToolbarBitmapSettings()!=bitmappaths[wParam-MP_TOOLBARBITMAP])
d527 1
a527 1
					theApp.glob_prefs->SetToolbarBitmapSettings(bitmappaths[wParam-MP_TOOLBARBITMAP]);
d603 1
a603 1
		theApp.emuledlg->rebar.SetBandInfo(0, &rbbi);
d606 1
a606 1
		theApp.emuledlg->rebar.GetWindowRect(&rReBarRect);
d608 1
a608 1
		theApp.emuledlg->GetClientRect(&rClientRect);
d610 1
a610 1
		theApp.emuledlg->statusbar.GetWindowRect(&rStatusbarRect);
d615 1
a615 1
		theApp.emuledlg->GetClientRect(&rClientRect);
d617 1
a617 1
		theApp.emuledlg->statusbar.GetWindowRect(&rStatusbarRect);
d621 1
a621 1
		CWnd* wnds[]={&theApp.emuledlg->serverwnd,&theApp.emuledlg->transferwnd,&theApp.emuledlg->sharedfileswnd,&theApp.emuledlg->searchwnd,&theApp.emuledlg->chatwnd,&theApp.emuledlg->ircwnd,&theApp.emuledlg->statisticswnd};
d625 2
a626 2
			theApp.emuledlg->RemoveAnchor(wnds[i]->m_hWnd);
			theApp.emuledlg->AddAnchor(wnds[i]->m_hWnd,TOP_LEFT,BOTTOM_RIGHT);
d628 2
a629 2
		theApp.emuledlg->Invalidate();
		theApp.emuledlg->RedrawWindow();
d673 1
a673 1
	theApp.glob_prefs->SetToolbarSettings(config.GetBuffer(256));
d678 1
a678 1
	theApp.emuledlg->ShowConnectionState(theApp.serverconnect->IsConnected(),_T(""),true);
d681 1
a681 1
	ChangeTextLabelStyle(theApp.glob_prefs->GetToolbarLabelSettings(), false);
@


1.19
log
@unicode cleanup
@
text
@a45 1

d140 6
a145 6
		case 0:
		case 8:
			TBButtons[i].fsStyle = TBSTYLE_BUTTON;
			break;
		case 1:
			TBButtons[i].fsState |= TBSTATE_CHECKED;
d275 1
a275 2
			//m_ctrlSpeedMeter.ShowWindow(SW_SHOW);
		// resize speed-meter	
d442 6
a447 6
			case 0:
				config.Format(_T("%s99"), config);
				break;
			default:
				config.Format(_T("%s%.2lu"), config, buttoninfo.idCommand-IDC_TOOLBARBUTTON);
				break;
d472 5
d503 1
a504 1
					theApp.glob_prefs->SetToolbarBitmapSettings(dialog.GetPathName());
d527 1
a528 1
					theApp.glob_prefs->SetToolbarBitmapSettings(bitmappaths[wParam-MP_TOOLBARBITMAP]);
d632 1
@


1.18
log
@unicode cleanup
@
text
@d52 1
a52 1
	char cButtonStrings[2000];
d55 2
a56 2
	strcpy(cButtonStrings, GetResString(IDS_MAIN_BTN_CONNECT));
	lLen = strlen(GetResString(IDS_MAIN_BTN_CONNECT)) + 1;
d58 1
a58 1
	lLen2 = strlen(GetResString(IDS_EM_SERVER)) + 1;
d66 1
a66 1
	lLen2 = strlen(GetResString(IDS_EM_TRANS)) + 1;
d74 1
a74 1
	lLen2 = strlen(GetResString(IDS_EM_SEARCH)) + 1;
d82 1
a82 1
	lLen2 = strlen(GetResString(IDS_EM_FILES)) + 1;
d90 1
a90 1
	lLen2 = strlen(GetResString(IDS_EM_MESSAGES)) + 1;
d98 1
a98 1
	lLen2 = strlen(GetResString(IDS_IRC)) + 1;
d106 1
a106 1
	lLen2 = strlen(GetResString(IDS_EM_STATISTIC)) + 1;
d114 1
a114 1
	lLen2 = strlen(GetResString(IDS_EM_PREFS)) + 1;
d214 1
a214 1
		sprintf(TBStrings[0], "%s", buffer);
d221 1
a221 1
			sprintf(TBStrings[i], "%s", buffer);
d358 1
a358 1
	bitmappaths.Add("");
d445 1
a445 1
				config.Format("%s99", config);
d448 1
a448 1
				config.Format("%s%.2lu", config, buttoninfo.idCommand-IDC_TOOLBARBUTTON);
d455 1
a455 1
	theApp.emuledlg->ShowConnectionState(theApp.serverconnect->IsConnected(),"",true);
d496 1
a496 1
			CFileDialog dialog(TRUE, "eMuleToolbar.bmp", NULL, NULL, "*.eMuleToolbar.bmp|*.eMuleToolbar.bmp||");
d674 1
a674 1
	theApp.emuledlg->ShowConnectionState(theApp.serverconnect->IsConnected(),"",true);
@


1.17
log
@memcpy() optimized for AMD (faster in 2-2.5 times). AMD only. Compile with tag AMD
@
text
@d161 1
a161 1
		int index = atoi(config.Mid(i,2));
d660 1
a660 1
		int index = atoi(config.Mid(i,2));
@


1.16
log
@Preparing for new sockets
@
text
@d8 1
d59 1
d61 3
d67 1
d69 3
d75 1
d77 3
d83 1
d85 3
d91 1
d93 3
d99 1
d101 3
d107 1
d109 3
d115 1
d117 3
d122 1
d124 3
d685 1
a685 1
}@


1.15
log
@code cleanup
@
text
@d168 1
d174 1
d417 1
d419 1
d636 1
d638 1
@


1.14
log
@fixed a few very trivial bugs
@
text
@d399 1
a399 1
	char config[256]="";
d406 1
a406 1
				sprintf(config, "%s99", config);
d409 1
a409 1
				sprintf(config, "%s%.2lu", config, buttoninfo.idCommand-IDC_TOOLBARBUTTON);
@


1.13
log
@Fixed and improved customization
@
text
@d162 1
a162 1
		static const int TBStringIDs[]={IDS_MAIN_BTN_CONNECT,IDS_EM_SERVER,IDS_EM_TRANS,IDS_EM_SEARCH,IDS_EM_FILES,IDS_EM_MESSAGES,IDS_IRC,IDS_EM_STATISTIC,IDS_EM_PREFS};
d167 12
a178 2

		for (int i = 0; i < 9; i++)
d180 1
a180 1
			buffer = GetResString(TBStringIDs[i]); // EC
d415 1
d632 1
@


1.12
log
@Fixed bug #168
@
text
@d168 1
a168 1
		for (int i = 0; i < sizeof (TBStringIDs) / sizeof(TBStringIDs[0]); i++)
a169 1
			// buffer.LoadString(TBStringIDs[i]);
d258 6
a263 6
		{  
			// calculate textsize
			pDC->DrawText(TBStrings[i], -1, r, DT_SINGLELINE | DT_CALCRECT);
 			if (r.Width() > iCalcSize)
				iCalcSize = r.Width();
		}
d404 3
@


1.11
log
@Fine tuned rebar.
@
text
@a249 11
		CString strMaxText = "";
		char szBuf[200] = "";
		
		TBBUTTONINFO tbi;
		LPTBBUTTONINFO lptbbi;
		lptbbi = &tbi;
		tbi.dwMask = TBIF_TEXT;
		tbi.cbSize = sizeof (TBBUTTONINFO);
		tbi.pszText = szBuf;
		tbi.cchText = 200;
		
d258 1
a258 1
		for(int i = 0; i < GetButtonCount(); i++)
a259 2
			// get button text
			GetButtonInfo(IDC_TOOLBARBUTTON+i, lptbbi);
d261 2
a262 3
			pDC->DrawText(szBuf, strlen(szBuf), r, DT_SINGLELINE | DT_CALCRECT);

			if (r.Width() > iCalcSize)
@


1.10
log
@Added rebar. You can disable rebar by undefining USE_REBAR.
@
text
@d558 1
a558 1
		rbbi.cyMinChild = sizeBar.cy + 2;
d568 1
a568 1
		rClientRect.top += rReBarRect.Height() + 2;
@


1.9
log
@hid help button
@
text
@a265 15
	/*	for(int i = 0; i < GetButtonCount(); i++)
		{		
			// get button text
			GetButtonInfo(IDC_TOOLBARBUTTON+i, lptbbi);
			// calculate textsize
			pDC->DrawText(szBuf, strlen(szBuf), r, DT_SINGLELINE | DT_CALCRECT);
		}

		pDC->SelectObject(pOldFnt);
		ReleaseDC(pDC); // FoRcHa

		// calculate the max. possible button-size
		int iCalcSize = r.Width() + 10;
	*/
		// pooz
d284 1
a284 1
		// end pooz
d551 20
d577 1
a577 1

@


1.8
log
@*** empty log message ***
@
text
@d15 4
d42 1
d633 5
@


1.7
log
@all my stable changes and some minor fixes (refer to changelog)
@
text
@d37 1
d578 50
a627 1
}@


1.6
log
@minor fixes
@
text
@a42 1
	SetButtonSize(CSize(60,65));
d330 1
d353 1
d365 1
d375 1
d435 2
a436 1
	if(path=="")
a437 2
	else
		Bitmap.LoadImage(path);
d456 1
a456 14
		{
			CoInitialize(0);
			char outdir[MAX_PATH];
			CString titletext=GetResString(IDS_SELECT_TOOLBARBITMAPDIR);
			char* buffer = new char[MAX_PATH];
			BROWSEINFO bi = { GetSafeHwnd(), 0, buffer, titletext, BIF_VALIDATE | BIF_NEWDIALOGSTYLE | BIF_RETURNONLYFSDIRS, 0, 0, 0};
			LPITEMIDLIST pidl = SHBrowseForFolder(&bi);
			delete[] buffer;
			if(SHGetPathFromIDList(pidl,outdir))
				theApp.glob_prefs->SetToolbarBitmapFolderSettings(outdir);
			LPMALLOC ppMalloc;
			if(SHGetMalloc(&ppMalloc) == NOERROR)
				ppMalloc->Free(pidl);
			CoUninitialize();
a457 1
		}
d489 7
d497 1
a497 6
	if(wParam >= MP_TOOLBARBITMAP && wParam <= MP_TOOLBARBITMAP+50)
		if(theApp.glob_prefs->GetToolbarBitmapSettings()!=bitmappaths[wParam-MP_TOOLBARBITMAP])
		{
			ChangeToolbarBitmap(bitmappaths[wParam-MP_TOOLBARBITMAP], true);
			theApp.glob_prefs->SetToolbarBitmapSettings(bitmappaths[wParam-MP_TOOLBARBITMAP]);
		}
d567 7
a573 14
		theApp.emuledlg->serverwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
			rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
		theApp.emuledlg->transferwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
			rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
		theApp.emuledlg->sharedfileswnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
			rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
		theApp.emuledlg->searchwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
			rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
		theApp.emuledlg->chatwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
			rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
		theApp.emuledlg->ircwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top,
			rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
		theApp.emuledlg->statisticswnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
			rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
@


1.5
log
@quick hacks for layout, will improve when have more time
@
text
@d364 1
d479 5
a483 4
			{
				ChangeToolbarBitmap(dialog.GetPathName(), true);
				theApp.glob_prefs->SetToolbarBitmapSettings(dialog.GetPathName());
			}
d503 5
a507 4
	{
		ChangeToolbarBitmap(bitmappaths[wParam-MP_TOOLBARBITMAP], true);
		theApp.glob_prefs->SetToolbarBitmapSettings(bitmappaths[wParam-MP_TOOLBARBITMAP]);
	}
d534 1
a534 1
		if((m_iToolbarLabelSettings+settings)!=2)
a537 4
				TBBUTTONINFO buttonInfo2;
				buttonInfo2.cbSize=sizeof(buttonInfo2);
				buttonInfo2.dwMask=TBIF_STYLE;
				GetButtonInfo(IDC_TOOLBARBUTTON + i, &buttonInfo2);
d541 1
d543 1
a543 1
					buttonInfo.fsStyle = buttonInfo2.fsStyle & ~TBSTYLE_AUTOSIZE;
d545 1
a545 1
					buttonInfo.fsStyle = buttonInfo2.fsStyle | TBSTYLE_AUTOSIZE;
@


1.4
log
@Toolbar Enhancements (preliminary)
@
text
@d43 1
a44 1
	ChangeTextLabelStyle(theApp.glob_prefs->GetToolbarLabelSettings(), false);
d92 1
a92 1
		TBButtons[i].fsStyle	= TBSTYLE_CHECK|TBSTYLE_AUTOSIZE;//TBSTYLE_CHECKGROUP;
d101 1
a101 1
			TBButtons[i].fsStyle = TBSTYLE_BUTTON|TBSTYLE_AUTOSIZE;
d130 2
d245 46
a290 15
	CString strMaxText = "";
	char szBuf[200] = "";
	
	TBBUTTONINFO tbi;
	LPTBBUTTONINFO lptbbi;
	lptbbi = &tbi;
	tbi.dwMask = TBIF_TEXT;
	tbi.cbSize = sizeof (TBBUTTONINFO);
	tbi.pszText = szBuf;
	tbi.cchText = 200;
	
	CDC *pDC = GetDC();
	CFont *pFnt = GetFont();
	CFont *pOldFnt = pDC->SelectObject(pFnt);
	CRect r(0,0,0,0);
d292 9
a300 40
/*	for(int i = 0; i < GetButtonCount(); i++)
	{		
		// get button text
		GetButtonInfo(IDC_TOOLBARBUTTON+i, lptbbi);
		// calculate textsize
		pDC->DrawText(szBuf, strlen(szBuf), r, DT_SINGLELINE | DT_CALCRECT);
	}

	pDC->SelectObject(pOldFnt);
	ReleaseDC(pDC); // FoRcHa

	// calculate the max. possible button-size
	int iCalcSize = r.Width() + 10;
*/
	// pooz
	// calculate the max. possible button-size
	int iCalcSize = 0;

	for(int i = 0; i < GetButtonCount(); i++)
	{  
		// get button text
		GetButtonInfo(IDC_TOOLBARBUTTON+i, lptbbi);
		// calculate textsize
		pDC->DrawText(szBuf, strlen(szBuf), r, DT_SINGLELINE | DT_CALCRECT);

		if (r.Width() > iCalcSize)
			iCalcSize = r.Width();
	}

	iCalcSize += 10;

	pDC->SelectObject(pOldFnt);
	ReleaseDC(pDC); // FoRcHa
	// end pooz
	GetClientRect(&r);
	int iMaxPossible = r.Width() / 9;

	// if the buttons are to big, reduze their size
	if(iCalcSize > iMaxPossible)
		iCalcSize = iMaxPossible;
d302 1
a302 1
	SetButtonWidth(iCalcSize, iCalcSize);
d514 1
a514 2
	m_iToolbarLabelSettings=settings;
	switch(settings)
d516 36
a551 12
		case 0:
			SetStyle(GetStyle() & ~TBSTYLE_LIST);
			SetMaxTextRows(0);
			break;
		case 1:
			SetStyle(GetStyle() & ~TBSTYLE_LIST);
			SetMaxTextRows(1);
			break;
		case 2:
			SetStyle(GetStyle() | TBSTYLE_LIST);
			SetMaxTextRows(1);
			break;
a552 2
	if(refresh)
		Refresh();
@


1.3
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d7 1
a30 1
//	ON_WM_ERASEBKGND()
d42 3
a44 36
	ModifyStyle(0, TBSTYLE_FLAT | WS_BORDER | CCS_ADJUSTABLE);
	SetButtonSize(CSize(60,65));
	SetBitmapSize(CSize(32,35));
	
// add button-images:
	CImageList ImageList;
	CBitmap Bitmap, *pOldBitmap;
	CDC *pCtrlDC = GetDC(), TempDC;
	TempDC.CreateCompatibleDC(pCtrlDC);
	Bitmap.CreateCompatibleBitmap(pCtrlDC, 32 * 11, 35);
	pOldBitmap = TempDC.SelectObject(&Bitmap);
		
	TempDC.FillSolidRect(0,0,32*11,35,RGB(255,0,255));
	TempDC.DrawIcon(CPoint(  0,3), theApp.LoadIcon(IDI_TB_CONNECT));
	TempDC.DrawIcon(CPoint( 32,3), theApp.LoadIcon(IDI_TB_SERVER));
	TempDC.DrawIcon(CPoint( 64,3), theApp.LoadIcon(IDI_TB_TRANSFERS));
	TempDC.DrawIcon(CPoint( 96,3), theApp.LoadIcon(IDI_TB_SEARCH));
	TempDC.DrawIcon(CPoint(128,3), theApp.LoadIcon(IDI_TB_SHARED));
	TempDC.DrawIcon(CPoint(160,3), theApp.LoadIcon(IDI_TB_MESSAGES));
	TempDC.DrawIcon(CPoint(192,3), theApp.LoadIcon(IDI_TB_IRC));
	TempDC.DrawIcon(CPoint(224,3), theApp.LoadIcon(IDI_TB_STATISTICS));
	TempDC.DrawIcon(CPoint(256,3), theApp.LoadIcon(IDI_TB_PREFERENCES));
	TempDC.DrawIcon(CPoint(288,3), theApp.LoadIcon(IDI_TB_DISCONNECT));
	TempDC.DrawIcon(CPoint(320,3), theApp.LoadIcon(IDI_TB_STOPCONNECTING));
	TempDC.SelectObject(pOldBitmap);
	
	ImageList.Create(32, 35, ILC_COLOR32 | ILC_MASK, 11, 1);
	ImageList.Add(&Bitmap, RGB(255,0,255));
	SetImageList(&ImageList);
	ImageList.Detach();
	// FoRcHa
	//Bitmap.Detach();
	Bitmap.DeleteObject();

	ReleaseDC(pCtrlDC);

d92 1
a92 1
		TBButtons[i].fsStyle	= TBSTYLE_CHECK;//TBSTYLE_CHECKGROUP;
d101 1
a101 1
			TBButtons[i].fsStyle = TBSTYLE_BUTTON;
a171 2
		CSize bs=GetButtonSize();
		bs.cx=bs.cx+5;
d241 2
d301 6
d311 63
a373 1
	Customize();
d375 2
d424 148
@


1.2
log
@*** empty log message ***
@
text
@d8 6
@


1.2.2.1
log
@updating this branch...
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d286 1
a286 1
	for(int i = 0; i < GetButtonCount(); i++)
d299 21
@

