head	1.381;
access;
symbols
	PublicRelease_1_2e:1.372
	Interim_Release_1-2e_RC1:1.371
	PublicRelease_1_2d:1.363
	Interim_Release_1-2d_RC1:1.362
	Interim_Release_1-2d_beta1:1.362
	PublicRelease_1_2c:1.349
	Interim_Release_1-2c_RC1:1.348
	Interim_Release_1-2c_beta1:1.343
	PublicRelease_1_2b:1.340
	Interim_Release_1-2b_RC1:1.339
	PublicRelease_1_2a:1.339
	Interim_Release_1-2a_RC1:1.339
	Interim_Release_1-2a_beta2:1.336
	Interim_Release_1-2a_beta1:1.336
	PublicRelease_1_2:1.333
	Interim_Release_1-2_RC1:1.333
	Interim_Release_1-2_beta1:1.331
	PublicRelease_1_1g:1.325
	Interim_Release_1-1g_RC3:1.325
	Interim_Release_1-1g_RC2:1.325
	Interim_Release_1-1g_RC1:1.325
	Interim_Release_1-1g_beta2:1.322
	Interim_Release_1-1g_beta1:1.316
	PublicRelease_1_1f:1.315
	Interim_Release_1-1f_RC1:1.315
	PublicRelease_1_1e:1.314
	Interim_Release_1-1e_RC2:1.314
	Interim_Release_1-1e_RC1:1.314
	Interim_Release_1-1e_beta1:1.311
	PublicRelease_1_1d:1.309
	Interim_Release_1-1d_RC1:1.308
	PublicRelease_1_1c:1.308
	Interim_Release_1-1c_RC1:1.308
	Interim_Release_1-1c_beta2:1.307
	Interim_Release_1-1c_beta1:1.306
	PublicRelease_1_1b:1.302
	Interim_Release_1-1b_RC1:1.302
	PublicRelease_1_1a:1.301
	Interim_Release_1-1a_RC2:1.300
	Interim_Release_1-1a_RC1:1.299
	Interim_Release_1-1a_beta2:1.299
	Interim_Release_1-1a_beta1:1.298
	PublicRelease_1_1:1.295
	Interim_Release_1-1_beta1:1.295
	PublicRelease_1o:1.290
	Interim_Release_1o_RC1:1.290
	Interim_Release_1o_beta1:1.289
	PublicRelease_1n:1.287
	Interim_Release_1n_RC2:1.286
	Interim_Release_1n_RC1:1.285
	Interim_Release_1n_beta2:1.282
	Interim_Release_1n_beta1:1.278
	PublicRelease_1m:1.270
	Interim_Release_1m_beta1:1.270
	PublicRelease_1l:1.266
	Interim_Release_1l_RC3:1.263
	Interim_Release_1l_RC2:1.260
	Interim_Release_1l_RC1:1.255
	Interim_Release_1l_beta2:1.254
	Interim_Release_1l_beta1:1.244
	PublicRelease_1k:1.234
	Interim_Release_1k_RC4:1.234
	Interim_1k_RC3:1.232
	Interim_1k_RC2:1.231
	Interim_Release_1k_RC1:1.227
	Interim_Release_1k_beta5:1.224
	Intrerim_Release_1k_beta4:1.224
	Interim_Release_1k_beta1:1.210
	PublicRelease_1j:1.196
	Interim_Release_1J_RC3:1.195
	Interim_Release_1j_RC3:1.195
	Interim_Release_1j_RC2:1.195
	Interim_Release_1j_RC1:1.195
	Interim_Release_1j_beta2:1.194
	Interim_Release_1j_beta1:1.181
	PublicRelease_1i:1.160
	Interim_Release_1i_RC6:1.160
	Interim_Release_1i_RC3:1.157
	Interim_Release_1i_RC2:1.157
	Interim_Release_1i_RC1:1.151
	Interim_Release_1i_beta3:1.140
	Interim_Release_1i_beta2:1.135
	Interim_Release_1i_beta1:1.120
	PublicRelease_1h:1.102
	Interim_Release_1h_rc2:1.101
	Interim_Release_1h_RC1:1.100
	Interim_Release_1h_beta2:1.98
	Interim_Release_1h_beta1_now:1.90
	Interim_Release_1h_beta1:1.89
	PublicRelease_1g:1.80
	Interim_Release_1g_RC6_Final:1.80
	Interim_Release_1g_RC6:1.80
	Interim_Release_1g_RC5:1.79
	Interim_Release_1g_RC4:1.77
	Interim_Release_1g_RC3:1.76
	Interim_Release_1g_beta2:1.67
	Interim_Release_1g_beta1:1.65
	Interim_Release_1f_RC4:1.63
	Interim_Release_1f_RC3:1.63
	Interim_Release_1f_RC2:1.62
	Interim_Release_1f_RC:1.61
	Interim_Release_1f_beta2:1.61
	Interim_Release_1f_beta1:1.60
	PublicRelease_1e:1.59
	Interim_Release_1e_RC2:1.59
	Interim_Release_1e_RC:1.59
	Interim_Release_1e_beta3:1.59
	Interim_Release_1e_beta2:1.59
	Interim_Release_1e_beta2_before_kuchin:1.59
	Interim_Release_1e_beta1:1.57
	PublicRelease_1c:1.53
	featurestest:1.53.0.2
	Interim_Release_1c_RC:1.53
	Interim_Release_1c_beta2:1.53
	Interim_Release_1c_beta1:1.48
	threaded_downloadqueue:1.46.0.2
	PublicRelease_1b:1.39
	Interim_Release_1b_beta2:1.39
	Interim_Release_1b_beta1:1.38
	proxydeadlake:1.34.0.2
	PublicRelease_1a:1.34
	Interim_Release_1a_beta2:1.34
	BerkeleyDb:1.32.0.2
	Interim_Release_1a_beta1:1.32
	PublicRelease_1:1.30
	goldfish:1.30
	eMulePlus_1_RC2:1.30
	eMulePlus_26b_1RC1:1.27
	PreRelease_26b_i0e:1.27
	before_26d_merge:1.20
	Interim_Release_26b_i0d:1.14
	Interim_Release_26b_i0c:1.11
	Interim_Release_26b_i0b:1.11
	Interim_Release_26b_i0a:1.11
	systraydlg:1.9.0.4
	plus26based:1.9.0.2
	Interim_Release_25b_i0b:1.9
	Proxy_Dev:1.8
	Interim_Release_25b_i0a:1.5.2.4
	proxytest:1.5.2.1.0.2
	official_sockets:1.5.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.381
date	2012.03.15.03.21.48;	author aw3;	state Exp;
branches;
next	1.380;

1.380
date	2010.08.13.01.45.09;	author aw3;	state Exp;
branches;
next	1.379;

1.379
date	2010.08.11.04.39.50;	author aw3;	state Exp;
branches;
next	1.378;

1.378
date	2010.08.06.01.53.53;	author aw3;	state Exp;
branches;
next	1.377;

1.377
date	2009.10.22.05.38.53;	author aw3;	state Exp;
branches;
next	1.376;

1.376
date	2009.07.30.03.50.48;	author aw3;	state Exp;
branches;
next	1.375;

1.375
date	2009.07.14.03.54.08;	author aw3;	state Exp;
branches;
next	1.374;

1.374
date	2009.06.14.19.13.17;	author aw3;	state Exp;
branches;
next	1.373;

1.373
date	2009.05.05.03.43.56;	author aw3;	state Exp;
branches;
next	1.372;

1.372
date	2009.04.09.03.58.38;	author aw3;	state Exp;
branches;
next	1.371;

1.371
date	2008.12.15.22.39.31;	author aw3;	state Exp;
branches;
next	1.370;

1.370
date	2008.12.08.13.26.56;	author kush_eplus;	state Exp;
branches;
next	1.369;

1.369
date	2008.11.12.03.53.40;	author aw3;	state Exp;
branches;
next	1.368;

1.368
date	2008.11.04.11.07.38;	author kush_eplus;	state Exp;
branches;
next	1.367;

1.367
date	2008.10.03.01.43.20;	author aw3;	state Exp;
branches;
next	1.366;

1.366
date	2008.08.24.19.54.03;	author aw3;	state Exp;
branches;
next	1.365;

1.365
date	2008.07.01.04.43.51;	author aw3;	state Exp;
branches;
next	1.364;

1.364
date	2008.06.10.04.38.41;	author aw3;	state Exp;
branches;
next	1.363;

1.363
date	2008.04.23.04.54.09;	author aw3;	state Exp;
branches;
next	1.362;

1.362
date	2008.02.16.04.29.50;	author aw3;	state Exp;
branches;
next	1.361;

1.361
date	2008.02.09.12.32.08;	author eklmn;	state Exp;
branches;
next	1.360;

1.360
date	2008.02.01.03.17.32;	author aw3;	state Exp;
branches;
next	1.359;

1.359
date	2008.01.31.22.50.31;	author eklmn;	state Exp;
branches;
next	1.358;

1.358
date	2008.01.23.05.16.52;	author aw3;	state Exp;
branches;
next	1.357;

1.357
date	2007.12.19.04.58.20;	author aw3;	state Exp;
branches;
next	1.356;

1.356
date	2007.12.15.13.19.13;	author eklmn;	state Exp;
branches;
next	1.355;

1.355
date	2007.12.14.21.20.02;	author kush_eplus;	state Exp;
branches;
next	1.354;

1.354
date	2007.12.12.20.15.32;	author eklmn;	state Exp;
branches;
next	1.353;

1.353
date	2007.12.01.10.38.06;	author eklmn;	state Exp;
branches;
next	1.352;

1.352
date	2007.11.02.14.43.37;	author kush_eplus;	state Exp;
branches;
next	1.351;

1.351
date	2007.10.11.18.06.48;	author fuxie-dk;	state Exp;
branches;
next	1.350;

1.350
date	2007.09.27.14.27.13;	author fuxie-dk;	state Exp;
branches;
next	1.349;

1.349
date	2007.08.24.05.19.46;	author aw3;	state Exp;
branches;
next	1.348;

1.348
date	2007.07.08.22.31.19;	author kush_eplus;	state Exp;
branches;
next	1.347;

1.347
date	2007.07.07.04.07.37;	author aw3;	state Exp;
branches;
next	1.346;

1.346
date	2007.07.03.23.18.18;	author aw3;	state Exp;
branches;
next	1.345;

1.345
date	2007.07.01.05.30.34;	author aw3;	state Exp;
branches;
next	1.344;

1.344
date	2007.06.04.11.59.35;	author aw3;	state Exp;
branches;
next	1.343;

1.343
date	2007.02.24.18.37.00;	author aw3;	state Exp;
branches;
next	1.342;

1.342
date	2007.02.22.00.45.10;	author kush_eplus;	state Exp;
branches;
next	1.341;

1.341
date	2007.02.20.00.44.21;	author kush_eplus;	state Exp;
branches;
next	1.340;

1.340
date	2007.02.04.11.00.13;	author kush_eplus;	state Exp;
branches;
next	1.339;

1.339
date	2006.09.06.05.52.41;	author aw3;	state Exp;
branches;
next	1.338;

1.338
date	2006.07.16.23.15.55;	author kush_eplus;	state Exp;
branches;
next	1.337;

1.337
date	2006.07.02.22.28.48;	author kush_eplus;	state Exp;
branches;
next	1.336;

1.336
date	2006.04.27.18.25.00;	author dongato;	state Exp;
branches;
next	1.335;

1.335
date	2006.04.05.02.25.27;	author aw3;	state Exp;
branches;
next	1.334;

1.334
date	2006.03.03.05.38.30;	author aw3;	state Exp;
branches;
next	1.333;

1.333
date	2006.02.13.17.55.31;	author kush_eplus;	state Exp;
branches;
next	1.332;

1.332
date	2006.02.01.06.18.02;	author aw3;	state Exp;
branches;
next	1.331;

1.331
date	2006.01.23.07.03.10;	author kush_eplus;	state Exp;
branches;
next	1.330;

1.330
date	2006.01.22.18.04.47;	author aw3;	state Exp;
branches;
next	1.329;

1.329
date	2006.01.21.19.59.43;	author aw3;	state Exp;
branches;
next	1.328;

1.328
date	2006.01.07.05.45.51;	author aw3;	state Exp;
branches;
next	1.327;

1.327
date	2006.01.06.20.05.55;	author kush_eplus;	state Exp;
branches;
next	1.326;

1.326
date	2006.01.03.03.26.33;	author aw3;	state Exp;
branches;
next	1.325;

1.325
date	2005.11.28.03.11.13;	author aw3;	state Exp;
branches;
next	1.324;

1.324
date	2005.11.27.22.11.52;	author eklmn;	state Exp;
branches;
next	1.323;

1.323
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.322;

1.322
date	2005.11.22.12.26.58;	author aw3;	state Exp;
branches;
next	1.321;

1.321
date	2005.11.15.01.45.59;	author aw3;	state Exp;
branches;
next	1.320;

1.320
date	2005.09.23.10.56.08;	author eklmn;	state Exp;
branches;
next	1.319;

1.319
date	2005.09.22.00.51.32;	author aw3;	state Exp;
branches;
next	1.318;

1.318
date	2005.09.19.22.14.59;	author eklmn;	state Exp;
branches;
next	1.317;

1.317
date	2005.09.16.02.24.46;	author aw3;	state Exp;
branches;
next	1.316;

1.316
date	2005.08.04.03.34.39;	author aw3;	state Exp;
branches;
next	1.315;

1.315
date	2005.07.19.04.15.55;	author aw3;	state Exp;
branches;
next	1.314;

1.314
date	2005.06.18.01.02.45;	author aw3;	state Exp;
branches;
next	1.313;

1.313
date	2005.06.08.04.55.54;	author aw3;	state Exp;
branches;
next	1.312;

1.312
date	2005.06.08.00.25.28;	author aw3;	state Exp;
branches;
next	1.311;

1.311
date	2005.06.06.04.36.11;	author aw3;	state Exp;
branches;
next	1.310;

1.310
date	2005.03.28.02.53.00;	author aw3;	state Exp;
branches;
next	1.309;

1.309
date	2005.03.19.21.06.12;	author aw3;	state Exp;
branches;
next	1.308;

1.308
date	2005.02.18.19.16.56;	author aw3;	state Exp;
branches;
next	1.307;

1.307
date	2005.02.02.07.15.34;	author aw3;	state Exp;
branches;
next	1.306;

1.306
date	2005.01.19.21.10.54;	author netwolf1;	state Exp;
branches;
next	1.305;

1.305
date	2005.01.19.10.48.09;	author dongato;	state Exp;
branches;
next	1.304;

1.304
date	2005.01.16.12.02.00;	author dongato;	state Exp;
branches;
next	1.303;

1.303
date	2005.01.16.00.35.00;	author netwolf1;	state Exp;
branches;
next	1.302;

1.302
date	2004.12.13.05.25.08;	author aw3;	state Exp;
branches;
next	1.301;

1.301
date	2004.12.10.00.27.01;	author aw3;	state Exp;
branches;
next	1.300;

1.300
date	2004.12.08.19.34.58;	author aw3;	state Exp;
branches;
next	1.299;

1.299
date	2004.11.11.16.51.08;	author eklmn;	state Exp;
branches;
next	1.298;

1.298
date	2004.10.30.00.19.32;	author aw3;	state Exp;
branches;
next	1.297;

1.297
date	2004.10.28.15.24.23;	author aw3;	state Exp;
branches;
next	1.296;

1.296
date	2004.10.27.21.25.04;	author aw3;	state Exp;
branches;
next	1.295;

1.295
date	2004.10.14.05.15.10;	author aw3;	state Exp;
branches;
next	1.294;

1.294
date	2004.10.08.04.41.02;	author aw3;	state Exp;
branches;
next	1.293;

1.293
date	2004.10.03.04.17.33;	author aw3;	state Exp;
branches;
next	1.292;

1.292
date	2004.10.01.04.42.36;	author aw3;	state Exp;
branches;
next	1.291;

1.291
date	2004.09.29.16.10.16;	author eklmn;	state Exp;
branches;
next	1.290;

1.290
date	2004.09.25.07.32.25;	author aw3;	state Exp;
branches;
next	1.289;

1.289
date	2004.09.21.20.15.04;	author aw3;	state Exp;
branches;
next	1.288;

1.288
date	2004.09.17.20.52.51;	author aw3;	state Exp;
branches;
next	1.287;

1.287
date	2004.09.09.19.58.48;	author aw3;	state Exp;
branches;
next	1.286;

1.286
date	2004.09.07.19.58.43;	author aw3;	state Exp;
branches;
next	1.285;

1.285
date	2004.08.21.11.42.56;	author eklmn;	state Exp;
branches;
next	1.284;

1.284
date	2004.08.15.22.17.51;	author aw3;	state Exp;
branches;
next	1.283;

1.283
date	2004.08.11.01.23.43;	author aw3;	state Exp;
branches;
next	1.282;

1.282
date	2004.08.05.01.25.32;	author aw3;	state Exp;
branches;
next	1.281;

1.281
date	2004.07.29.02.13.02;	author katsyonak;	state Exp;
branches;
next	1.280;

1.280
date	2004.07.28.11.39.31;	author katsyonak;	state Exp;
branches;
next	1.279;

1.279
date	2004.07.24.06.58.02;	author aw3;	state Exp;
branches;
next	1.278;

1.278
date	2004.07.18.17.37.25;	author katsyonak;	state Exp;
branches;
next	1.277;

1.277
date	2004.07.12.14.10.46;	author katsyonak;	state Exp;
branches;
next	1.276;

1.276
date	2004.07.04.14.04.34;	author dongato;	state Exp;
branches;
next	1.275;

1.275
date	2004.06.30.13.38.44;	author dongato;	state Exp;
branches;
next	1.274;

1.274
date	2004.06.29.14.14.57;	author dongato;	state Exp;
branches;
next	1.273;

1.273
date	2004.06.28.18.45.32;	author katsyonak;	state Exp;
branches;
next	1.272;

1.272
date	2004.06.28.08.30.18;	author katsyonak;	state Exp;
branches;
next	1.271;

1.271
date	2004.06.28.02.39.30;	author katsyonak;	state Exp;
branches;
next	1.270;

1.270
date	2004.06.21.17.29.13;	author katsyonak;	state Exp;
branches;
next	1.269;

1.269
date	2004.06.16.18.33.01;	author aw3;	state Exp;
branches;
next	1.268;

1.268
date	2004.06.15.17.40.57;	author aw3;	state Exp;
branches;
next	1.267;

1.267
date	2004.06.15.05.05.47;	author katsyonak;	state Exp;
branches;
next	1.266;

1.266
date	2004.06.10.06.05.14;	author katsyonak;	state Exp;
branches;
next	1.265;

1.265
date	2004.06.10.01.56.47;	author katsyonak;	state Exp;
branches;
next	1.264;

1.264
date	2004.06.09.15.51.55;	author dongato;	state Exp;
branches;
next	1.263;

1.263
date	2004.06.07.16.36.40;	author katsyonak;	state Exp;
branches;
next	1.262;

1.262
date	2004.06.04.17.04.58;	author dongato;	state Exp;
branches;
next	1.261;

1.261
date	2004.06.04.15.54.23;	author dongato;	state Exp;
branches;
next	1.260;

1.260
date	2004.05.31.20.02.33;	author aw3;	state Exp;
branches;
next	1.259;

1.259
date	2004.05.27.10.20.01;	author dongato;	state Exp;
branches;
next	1.258;

1.258
date	2004.05.27.09.24.17;	author katsyonak;	state Exp;
branches;
next	1.257;

1.257
date	2004.05.27.07.40.43;	author katsyonak;	state Exp;
branches;
next	1.256;

1.256
date	2004.05.26.21.37.42;	author katsyonak;	state Exp;
branches;
next	1.255;

1.255
date	2004.05.23.15.00.05;	author katsyonak;	state Exp;
branches;
next	1.254;

1.254
date	2004.05.21.14.37.57;	author dongato;	state Exp;
branches;
next	1.253;

1.253
date	2004.05.19.10.14.34;	author netwolf1;	state Exp;
branches;
next	1.252;

1.252
date	2004.05.17.18.07.44;	author katsyonak;	state Exp;
branches;
next	1.251;

1.251
date	2004.05.15.09.39.25;	author dongato;	state Exp;
branches;
next	1.250;

1.250
date	2004.05.12.15.35.58;	author katsyonak;	state Exp;
branches;
next	1.249;

1.249
date	2004.05.12.00.34.55;	author aw3;	state Exp;
branches;
next	1.248;

1.248
date	2004.05.11.23.27.41;	author katsyonak;	state Exp;
branches;
next	1.247;

1.247
date	2004.05.11.14.03.20;	author katsyonak;	state Exp;
branches;
next	1.246;

1.246
date	2004.05.10.15.57.14;	author katsyonak;	state Exp;
branches;
next	1.245;

1.245
date	2004.05.10.01.25.33;	author katsyonak;	state Exp;
branches;
next	1.244;

1.244
date	2004.05.06.11.46.01;	author katsyonak;	state Exp;
branches;
next	1.243;

1.243
date	2004.05.04.14.45.24;	author dropf;	state Exp;
branches;
next	1.242;

1.242
date	2004.05.04.09.45.35;	author netwolf1;	state Exp;
branches;
next	1.241;

1.241
date	2004.04.30.09.06.13;	author katsyonak;	state Exp;
branches;
next	1.240;

1.240
date	2004.04.27.21.49.46;	author aw3;	state Exp;
branches;
next	1.239;

1.239
date	2004.04.22.19.44.04;	author aw3;	state Exp;
branches;
next	1.238;

1.238
date	2004.04.21.02.06.04;	author katsyonak;	state Exp;
branches;
next	1.237;

1.237
date	2004.04.20.23.53.04;	author katsyonak;	state Exp;
branches;
next	1.236;

1.236
date	2004.04.16.20.53.41;	author aw3;	state Exp;
branches;
next	1.235;

1.235
date	2004.04.13.01.01.35;	author katsyonak;	state Exp;
branches;
next	1.234;

1.234
date	2004.04.07.06.58.11;	author dongato;	state Exp;
branches;
next	1.233;

1.233
date	2004.04.06.18.45.39;	author dongato;	state Exp;
branches;
next	1.232;

1.232
date	2004.04.01.15.14.22;	author dongato;	state Exp;
branches;
next	1.231;

1.231
date	2004.03.30.20.55.49;	author dongato;	state Exp;
branches;
next	1.230;

1.230
date	2004.03.30.15.26.02;	author dongato;	state Exp;
branches;
next	1.229;

1.229
date	2004.03.30.12.32.56;	author dongato;	state Exp;
branches;
next	1.228;

1.228
date	2004.03.28.14.53.09;	author kuchin;	state Exp;
branches;
next	1.227;

1.227
date	2004.03.26.22.25.16;	author aw3;	state Exp;
branches;
next	1.226;

1.226
date	2004.03.25.15.49.33;	author dongato;	state Exp;
branches;
next	1.225;

1.225
date	2004.03.25.06.22.16;	author aw3;	state Exp;
branches;
next	1.224;

1.224
date	2004.03.21.07.49.32;	author eklmn;	state Exp;
branches;
next	1.223;

1.223
date	2004.03.17.23.09.13;	author aw3;	state Exp;
branches;
next	1.222;

1.222
date	2004.03.17.21.10.05;	author eklmn;	state Exp;
branches;
next	1.221;

1.221
date	2004.03.17.13.21.41;	author aw3;	state Exp;
branches;
next	1.220;

1.220
date	2004.03.17.11.10.41;	author eklmn;	state Exp;
branches;
next	1.219;

1.219
date	2004.03.14.21.10.11;	author aw3;	state Exp;
branches;
next	1.218;

1.218
date	2004.03.13.05.42.33;	author aw3;	state Exp;
branches;
next	1.217;

1.217
date	2004.03.12.06.29.44;	author aw3;	state Exp;
branches;
next	1.216;

1.216
date	2004.03.11.05.07.43;	author aw3;	state Exp;
branches;
next	1.215;

1.215
date	2004.02.26.10.03.19;	author dongato;	state Exp;
branches;
next	1.214;

1.214
date	2004.02.25.18.23.41;	author dongato;	state Exp;
branches;
next	1.213;

1.213
date	2004.02.25.17.58.55;	author kush_eplus;	state Exp;
branches;
next	1.212;

1.212
date	2004.02.24.15.01.39;	author dongato;	state Exp;
branches;
next	1.211;

1.211
date	2004.02.23.13.33.24;	author kush_eplus;	state Exp;
branches;
next	1.210;

1.210
date	2004.02.20.18.18.44;	author dongato;	state Exp;
branches;
next	1.209;

1.209
date	2004.02.18.16.25.12;	author kush_eplus;	state Exp;
branches;
next	1.208;

1.208
date	2004.02.16.23.22.39;	author aw3;	state Exp;
branches;
next	1.207;

1.207
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.206;

1.206
date	2004.02.13.16.13.35;	author netwolf1;	state Exp;
branches;
next	1.205;

1.205
date	2004.02.12.10.38.01;	author morevit;	state Exp;
branches;
next	1.204;

1.204
date	2004.02.06.19.55.59;	author netwolf1;	state Exp;
branches;
next	1.203;

1.203
date	2004.02.05.00.00.06;	author kush_eplus;	state Exp;
branches;
next	1.202;

1.202
date	2004.02.01.15.39.40;	author katsyonak;	state Exp;
branches;
next	1.201;

1.201
date	2004.01.29.00.25.54;	author dongato;	state Exp;
branches;
next	1.200;

1.200
date	2004.01.28.20.41.52;	author dongato;	state Exp;
branches;
next	1.199;

1.199
date	2004.01.28.17.24.46;	author katsyonak;	state Exp;
branches;
next	1.198;

1.198
date	2004.01.27.14.03.00;	author dongato;	state Exp;
branches;
next	1.197;

1.197
date	2004.01.26.21.25.23;	author kush_eplus;	state Exp;
branches;
next	1.196;

1.196
date	2004.01.26.06.16.16;	author kush_eplus;	state Exp;
branches;
next	1.195;

1.195
date	2004.01.10.10.15.27;	author katsyonak;	state Exp;
branches;
next	1.194;

1.194
date	2004.01.05.20.26.56;	author katsyonak;	state Exp;
branches;
next	1.193;

1.193
date	2004.01.05.16.14.47;	author katsyonak;	state Exp;
branches;
next	1.192;

1.192
date	2004.01.05.08.09.11;	author katsyonak;	state Exp;
branches;
next	1.191;

1.191
date	2004.01.04.17.01.23;	author katsyonak;	state Exp;
branches;
next	1.190;

1.190
date	2004.01.04.16.31.16;	author dongato;	state Exp;
branches;
next	1.189;

1.189
date	2004.01.04.11.44.40;	author katsyonak;	state Exp;
branches;
next	1.188;

1.188
date	2004.01.04.04.25.36;	author dongato;	state Exp;
branches;
next	1.187;

1.187
date	2004.01.03.22.12.46;	author syrus77;	state Exp;
branches;
next	1.186;

1.186
date	2004.01.03.09.28.40;	author katsyonak;	state Exp;
branches;
next	1.185;

1.185
date	2004.01.02.04.55.27;	author katsyonak;	state Exp;
branches;
next	1.184;

1.184
date	2004.01.01.07.31.06;	author katsyonak;	state Exp;
branches;
next	1.183;

1.183
date	2003.12.31.19.07.50;	author bavariansnail;	state Exp;
branches;
next	1.182;

1.182
date	2003.12.31.18.27.15;	author dongato;	state Exp;
branches;
next	1.181;

1.181
date	2003.12.27.11.26.50;	author katsyonak;	state Exp;
branches;
next	1.180;

1.180
date	2003.12.25.16.29.23;	author dongato;	state Exp;
branches;
next	1.179;

1.179
date	2003.12.25.08.49.16;	author katsyonak;	state Exp;
branches;
next	1.178;

1.178
date	2003.12.24.01.21.14;	author katsyonak;	state Exp;
branches;
next	1.177;

1.177
date	2003.12.23.23.41.12;	author katsyonak;	state Exp;
branches;
next	1.176;

1.176
date	2003.12.23.19.03.21;	author katsyonak;	state Exp;
branches;
next	1.175;

1.175
date	2003.12.23.15.35.17;	author katsyonak;	state Exp;
branches;
next	1.174;

1.174
date	2003.12.23.12.05.09;	author katsyonak;	state Exp;
branches;
next	1.173;

1.173
date	2003.12.22.23.56.30;	author dongato;	state Exp;
branches;
next	1.172;

1.172
date	2003.12.22.22.41.31;	author katsyonak;	state Exp;
branches;
next	1.171;

1.171
date	2003.12.22.18.28.27;	author katsyonak;	state Exp;
branches;
next	1.170;

1.170
date	2003.12.22.08.29.34;	author kuchin;	state Exp;
branches;
next	1.169;

1.169
date	2003.12.22.03.14.02;	author katsyonak;	state Exp;
branches;
next	1.168;

1.168
date	2003.12.22.02.37.35;	author katsyonak;	state Exp;
branches;
next	1.167;

1.167
date	2003.12.21.22.06.00;	author katsyonak;	state Exp;
branches;
next	1.166;

1.166
date	2003.12.20.00.40.28;	author katsyonak;	state Exp;
branches;
next	1.165;

1.165
date	2003.12.19.11.05.30;	author katsyonak;	state Exp;
branches;
next	1.164;

1.164
date	2003.12.19.09.55.33;	author naboleo;	state Exp;
branches;
next	1.163;

1.163
date	2003.12.18.13.35.30;	author katsyonak;	state Exp;
branches;
next	1.162;

1.162
date	2003.12.11.10.44.40;	author kuchin;	state Exp;
branches;
next	1.161;

1.161
date	2003.12.10.17.14.14;	author kuchin;	state Exp;
branches;
next	1.160;

1.160
date	2003.11.27.13.57.18;	author eklmn;	state Exp;
branches;
next	1.159;

1.159
date	2003.11.24.15.01.39;	author katsyonak;	state Exp;
branches;
next	1.158;

1.158
date	2003.11.21.07.18.17;	author dongato;	state Exp;
branches;
next	1.157;

1.157
date	2003.11.17.10.24.29;	author kuchin;	state Exp;
branches;
next	1.156;

1.156
date	2003.11.13.22.17.06;	author katsyonak;	state Exp;
branches;
next	1.155;

1.155
date	2003.11.12.11.33.58;	author katsyonak;	state Exp;
branches;
next	1.154;

1.154
date	2003.11.11.16.31.02;	author kuchin;	state Exp;
branches;
next	1.153;

1.153
date	2003.11.10.12.47.04;	author katsyonak;	state Exp;
branches;
next	1.152;

1.152
date	2003.11.09.09.41.51;	author kuchin;	state Exp;
branches;
next	1.151;

1.151
date	2003.11.04.18.31.06;	author kuchin;	state Exp;
branches;
next	1.150;

1.150
date	2003.11.04.16.09.17;	author katsyonak;	state Exp;
branches;
next	1.149;

1.149
date	2003.11.04.14.13.19;	author kuchin;	state Exp;
branches;
next	1.148;

1.148
date	2003.11.04.09.20.49;	author kuchin;	state Exp;
branches;
next	1.147;

1.147
date	2003.11.03.17.55.52;	author kuchin;	state Exp;
branches;
next	1.146;

1.146
date	2003.11.03.11.47.16;	author kuchin;	state Exp;
branches;
next	1.145;

1.145
date	2003.11.02.15.37.16;	author kuchin;	state Exp;
branches;
next	1.144;

1.144
date	2003.11.02.10.36.41;	author katsyonak;	state Exp;
branches;
next	1.143;

1.143
date	2003.11.01.18.00.50;	author morevit;	state Exp;
branches;
next	1.142;

1.142
date	2003.11.01.14.46.18;	author syrus77;	state Exp;
branches;
next	1.141;

1.141
date	2003.11.01.12.21.01;	author dongato;	state Exp;
branches;
next	1.140;

1.140
date	2003.10.30.02.44.37;	author morevit;	state Exp;
branches;
next	1.139;

1.139
date	2003.10.29.19.18.46;	author katsyonak;	state Exp;
branches;
next	1.138;

1.138
date	2003.10.29.17.04.52;	author katsyonak;	state Exp;
branches;
next	1.137;

1.137
date	2003.10.26.15.57.56;	author morevit;	state Exp;
branches;
next	1.136;

1.136
date	2003.10.26.13.50.15;	author morevit;	state Exp;
branches;
next	1.135;

1.135
date	2003.10.24.01.21.19;	author morevit;	state Exp;
branches;
next	1.134;

1.134
date	2003.10.22.17.30.37;	author kuchin;	state Exp;
branches;
next	1.133;

1.133
date	2003.10.15.11.45.03;	author syrus77;	state Exp;
branches;
next	1.132;

1.132
date	2003.10.15.03.51.45;	author morevit;	state Exp;
branches;
next	1.131;

1.131
date	2003.10.14.18.40.58;	author syrus77;	state Exp;
branches;
next	1.130;

1.130
date	2003.10.13.15.09.45;	author morevit;	state Exp;
branches;
next	1.129;

1.129
date	2003.10.08.15.39.47;	author morevit;	state Exp;
branches;
next	1.128;

1.128
date	2003.10.08.12.56.33;	author morevit;	state Exp;
branches;
next	1.127;

1.127
date	2003.10.08.02.07.10;	author morevit;	state Exp;
branches;
next	1.126;

1.126
date	2003.10.08.01.53.32;	author morevit;	state Exp;
branches;
next	1.125;

1.125
date	2003.10.06.23.43.00;	author dongato;	state Exp;
branches;
next	1.124;

1.124
date	2003.10.06.21.57.06;	author puritynn666;	state Exp;
branches;
next	1.123;

1.123
date	2003.10.05.20.00.17;	author dongato;	state Exp;
branches;
next	1.122;

1.122
date	2003.10.05.19.25.54;	author dongato;	state Exp;
branches;
next	1.121;

1.121
date	2003.10.05.17.53.56;	author morevit;	state Exp;
branches;
next	1.120;

1.120
date	2003.10.05.05.20.01;	author dongato;	state Exp;
branches;
next	1.119;

1.119
date	2003.10.04.22.17.46;	author morevit;	state Exp;
branches;
next	1.118;

1.118
date	2003.10.02.00.58.14;	author morevit;	state Exp;
branches;
next	1.117;

1.117
date	2003.09.30.06.58.45;	author dongato;	state Exp;
branches;
next	1.116;

1.116
date	2003.09.29.14.54.50;	author morevit;	state Exp;
branches;
next	1.115;

1.115
date	2003.09.29.13.12.40;	author dongato;	state Exp;
branches;
next	1.114;

1.114
date	2003.09.29.10.57.22;	author dongato;	state Exp;
branches;
next	1.113;

1.113
date	2003.09.29.10.15.47;	author dongato;	state Exp;
branches;
next	1.112;

1.112
date	2003.09.28.14.23.45;	author dongato;	state Exp;
branches;
next	1.111;

1.111
date	2003.09.24.20.37.32;	author dongato;	state Exp;
branches;
next	1.110;

1.110
date	2003.09.24.16.47.09;	author morevit;	state Exp;
branches;
next	1.109;

1.109
date	2003.09.23.16.52.50;	author morevit;	state Exp;
branches;
next	1.108;

1.108
date	2003.09.22.16.27.18;	author morevit;	state Exp;
branches;
next	1.107;

1.107
date	2003.09.22.00.17.22;	author morevit;	state Exp;
branches;
next	1.106;

1.106
date	2003.09.20.15.28.47;	author morevit;	state Exp;
branches;
next	1.105;

1.105
date	2003.09.20.14.20.45;	author partyckip;	state Exp;
branches;
next	1.104;

1.104
date	2003.09.19.14.42.46;	author morevit;	state Exp;
branches;
next	1.103;

1.103
date	2003.09.19.00.13.37;	author morevit;	state Exp;
branches;
next	1.102;

1.102
date	2003.09.16.16.34.38;	author kuchin;	state Exp;
branches;
next	1.101;

1.101
date	2003.09.14.13.48.42;	author dongato;	state Exp;
branches;
next	1.100;

1.100
date	2003.09.09.16.21.59;	author dongato;	state Exp;
branches;
next	1.99;

1.99
date	2003.09.05.11.12.13;	author dongato;	state Exp;
branches;
next	1.98;

1.98
date	2003.09.04.11.19.25;	author kuchin;	state Exp;
branches;
next	1.97;

1.97
date	2003.09.03.17.56.27;	author kuchin;	state Exp;
branches;
next	1.96;

1.96
date	2003.09.03.12.40.32;	author kuchin;	state Exp;
branches;
next	1.95;

1.95
date	2003.09.03.11.50.57;	author kuchin;	state Exp;
branches;
next	1.94;

1.94
date	2003.08.31.16.49.55;	author dongato;	state Exp;
branches;
next	1.93;

1.93
date	2003.08.24.15.55.18;	author bond006;	state Exp;
branches;
next	1.92;

1.92
date	2003.08.23.16.28.38;	author bond006;	state Exp;
branches;
next	1.91;

1.91
date	2003.08.23.00.20.51;	author forcha;	state Exp;
branches;
next	1.90;

1.90
date	2003.08.18.16.09.38;	author bond006;	state Exp;
branches;
next	1.89;

1.89
date	2003.08.10.16.42.03;	author kuchin;	state Exp;
branches;
next	1.88;

1.88
date	2003.08.10.04.42.50;	author eklmn;	state Exp;
branches;
next	1.87;

1.87
date	2003.08.08.11.05.49;	author dongato;	state Exp;
branches;
next	1.86;

1.86
date	2003.07.31.15.25.49;	author bond006;	state Exp;
branches;
next	1.85;

1.85
date	2003.07.31.15.02.20;	author puritynn666;	state Exp;
branches;
next	1.84;

1.84
date	2003.07.31.07.27.43;	author dongato;	state Exp;
branches;
next	1.83;

1.83
date	2003.07.30.12.29.32;	author kuchin;	state Exp;
branches;
next	1.82;

1.82
date	2003.07.28.17.07.09;	author eklmn;	state Exp;
branches;
next	1.81;

1.81
date	2003.07.28.02.33.12;	author dongato;	state Exp;
branches;
next	1.80;

1.80
date	2003.07.16.22.37.33;	author partyckip;	state Exp;
branches;
next	1.79;

1.79
date	2003.07.12.14.10.37;	author dongato;	state Exp;
branches;
next	1.78;

1.78
date	2003.07.11.14.34.37;	author dongato;	state Exp;
branches;
next	1.77;

1.77
date	2003.07.06.14.50.04;	author dongato;	state Exp;
branches;
next	1.76;

1.76
date	2003.06.20.14.49.54;	author syrus77;	state Exp;
branches;
next	1.75;

1.75
date	2003.06.19.21.57.51;	author eklmn;	state Exp;
branches;
next	1.74;

1.74
date	2003.06.17.09.34.58;	author netwolf1;	state Exp;
branches;
next	1.73;

1.73
date	2003.06.15.09.10.05;	author partyckip;	state Exp;
branches;
next	1.72;

1.72
date	2003.06.11.18.35.45;	author eklmn;	state Exp;
branches;
next	1.71;

1.71
date	2003.06.10.20.51.58;	author eklmn;	state Exp;
branches;
next	1.70;

1.70
date	2003.06.10.09.36.49;	author kuchin;	state Exp;
branches;
next	1.69;

1.69
date	2003.06.09.16.51.35;	author syrus77;	state Exp;
branches;
next	1.68;

1.68
date	2003.06.09.15.14.38;	author kuchin;	state Exp;
branches;
next	1.67;

1.67
date	2003.06.09.11.57.42;	author kuchin;	state Exp;
branches;
next	1.66;

1.66
date	2003.06.08.07.36.58;	author partyckip;	state Exp;
branches;
next	1.65;

1.65
date	2003.05.30.20.35.19;	author partyckip;	state Exp;
branches;
next	1.64;

1.64
date	2003.05.26.22.24.58;	author partyckip;	state Exp;
branches;
next	1.63;

1.63
date	2003.05.20.20.46.33;	author netwolf1;	state Exp;
branches;
next	1.62;

1.62
date	2003.05.13.17.59.39;	author lord_kiron;	state Exp;
branches;
next	1.61;

1.61
date	2003.05.08.17.08.27;	author netwolf1;	state Exp;
branches;
next	1.60;

1.60
date	2003.04.30.19.47.22;	author lord_kiron;	state Exp;
branches;
next	1.59;

1.59
date	2003.04.20.17.27.35;	author kuchin;	state Exp;
branches;
next	1.58;

1.58
date	2003.04.20.16.59.33;	author kuchin;	state Exp;
branches;
next	1.57;

1.57
date	2003.04.03.10.12.30;	author kuchin;	state Exp;
branches;
next	1.56;

1.56
date	2003.03.25.09.29.37;	author pooz;	state Exp;
branches;
next	1.55;

1.55
date	2003.03.24.22.03.50;	author forcha;	state Exp;
branches;
next	1.54;

1.54
date	2003.03.24.17.40.33;	author pooz;	state Exp;
branches;
next	1.53;

1.53
date	2003.03.20.18.09.55;	author cax2;	state Exp;
branches
	1.53.2.1;
next	1.52;

1.52
date	2003.03.19.20.15.18;	author forcha;	state Exp;
branches;
next	1.51;

1.51
date	2003.03.19.15.35.39;	author cax2;	state Exp;
branches;
next	1.50;

1.50
date	2003.03.16.20.41.23;	author lord_kiron;	state Exp;
branches;
next	1.49;

1.49
date	2003.03.15.19.50.55;	author dongato;	state Exp;
branches;
next	1.48;

1.48
date	2003.03.15.00.54.08;	author cax2;	state Exp;
branches;
next	1.47;

1.47
date	2003.03.15.00.28.23;	author lord_kiron;	state Exp;
branches;
next	1.46;

1.46
date	2003.03.14.16.24.23;	author partyckip;	state Exp;
branches;
next	1.45;

1.45
date	2003.03.14.11.50.35;	author partyckip;	state Exp;
branches;
next	1.44;

1.44
date	2003.03.14.10.55.32;	author lord_kiron;	state Exp;
branches;
next	1.43;

1.43
date	2003.03.14.10.33.49;	author lord_kiron;	state Exp;
branches;
next	1.42;

1.42
date	2003.03.13.21.50.43;	author partyckip;	state Exp;
branches;
next	1.41;

1.41
date	2003.03.13.11.39.37;	author kuchin;	state Exp;
branches;
next	1.40;

1.40
date	2003.03.10.16.08.51;	author cax2;	state Exp;
branches;
next	1.39;

1.39
date	2003.03.08.12.09.42;	author recdvst;	state Exp;
branches;
next	1.38;

1.38
date	2003.03.03.18.34.15;	author cax2;	state Exp;
branches;
next	1.37;

1.37
date	2003.03.03.17.10.51;	author cax2;	state Exp;
branches;
next	1.36;

1.36
date	2003.03.01.16.38.59;	author dongato;	state Exp;
branches;
next	1.35;

1.35
date	2003.03.01.04.11.44;	author dongato;	state Exp;
branches;
next	1.34;

1.34
date	2003.02.25.18.08.01;	author cax2;	state Exp;
branches;
next	1.33;

1.33
date	2003.02.25.15.36.26;	author dongato;	state Exp;
branches;
next	1.32;

1.32
date	2003.02.24.17.32.23;	author kuchin;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2003.02.22.16.20.56;	author obaldin;	state Exp;
branches;
next	1.30;

1.30
date	2003.02.20.07.42.49;	author cax2;	state Exp;
branches;
next	1.29;

1.29
date	2003.02.20.07.25.22;	author cax2;	state Exp;
branches;
next	1.28;

1.28
date	2003.02.19.20.53.17;	author cax2;	state Exp;
branches;
next	1.27;

1.27
date	2003.02.18.19.10.45;	author cax2;	state Exp;
branches;
next	1.26;

1.26
date	2003.02.18.01.42.50;	author dongato;	state Exp;
branches;
next	1.25;

1.25
date	2003.02.17.19.30.01;	author cax2;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.17.19.26.18;	author dongato;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.17.19.17.23;	author dongato;	state Exp;
branches;
next	1.22;

1.22
date	2003.02.17.15.01.26;	author kuchin;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.17.06.50.29;	author obaldin;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.16.22.01.51;	author lord_kiron;	state Exp;
branches;
next	1.19;

1.19
date	2003.02.14.22.46.36;	author cax2;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.14.18.25.49;	author cax2;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.14.15.32.17;	author dongato;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.13.23.11.03;	author forcha;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.13.20.56.40;	author lord_kiron;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.13.17.45.51;	author cax2;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.12.17.52.37;	author cax2;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.12.17.06.28;	author cax2;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.09.18.39.42;	author kuchin;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.09.08.35.54;	author kuchin;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.02.13.30.56;	author kuchin;	state Exp;
branches
	1.9.2.1
	1.9.4.1;
next	1.8;

1.8
date	2003.02.02.03.39.56;	author cax2;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.01.14.45.40;	author dongato;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.29.14.37.06;	author cax2;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.24.12.26.43;	author obaldin;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2003.01.23.17.27.14;	author cax2;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.23.12.49.07;	author cax2;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.22.15.05.40;	author cax2;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.25;	author cax2;	state Exp;
branches;
next	;

1.5.2.1
date	2003.01.28.16.54.40;	author cax2;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2003.01.29.00.25.46;	author cax2;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.01.29.13.43.11;	author cax2;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2003.01.31.10.21.49;	author cax2;	state Exp;
branches;
next	1.5.2.5;

1.5.2.5
date	2003.02.02.02.36.29;	author cax2;	state Exp;
branches;
next	;

1.9.2.1
date	2003.02.05.01.58.42;	author obaldin;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2003.02.06.10.34.44;	author obaldin;	state Exp;
branches;
next	;

1.9.4.1
date	2003.02.05.23.25.16;	author forcha;	state Exp;
branches;
next	;

1.32.2.1
date	2003.02.25.15.31.54;	author kuchin;	state Exp;
branches;
next	1.32.2.2;

1.32.2.2
date	2003.03.01.11.25.56;	author obaldin;	state Exp;
branches;
next	1.32.2.3;

1.32.2.3
date	2003.03.01.20.59.37;	author obaldin;	state Exp;
branches;
next	1.32.2.4;

1.32.2.4
date	2003.03.02.08.46.06;	author obaldin;	state Exp;
branches;
next	1.32.2.5;

1.32.2.5
date	2003.03.04.14.10.22;	author obaldin;	state Exp;
branches;
next	;

1.53.2.1
date	2003.03.23.06.22.03;	author recdvst;	state Exp;
branches;
next	1.53.2.2;

1.53.2.2
date	2003.03.24.09.39.45;	author recdvst;	state Exp;
branches;
next	1.53.2.3;

1.53.2.3
date	2003.03.27.04.03.27;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.381
log
@Check for the new version every 3 weeks instead of every 2.
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include <afxinet.h>
#include "emule.h"
#include "emuleDlg.h"
#ifdef OLD_SOCKETS_ENABLED
#include "ClientUDPSocket.h"
#include "sockets.h"
#endif //OLD_SOCKETS_ENABLED
#include "KnownFileList.h"
#include "KnownFile.h"
#include "ServerList.h"
#include "server.h"
#include "opcodes.h"
#include "SharedFileList.h"
#include "ED2KLink.h"
#include "SplashScreen.h"
#pragma comment(lib, "winmm.lib")
#include "Mmsystem.h"
#include "EnBitmap.h"
#include "HTRichEditCtrl.h"
#include "ListenSocket.h"
#include "UploadQueue.h"
#include "WebServer.h"
#include "MMServer.h"
#include "AboutDlg.h"
#include <share.h>
#include <io.h>

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

#define EP_BAKMODE_AUTOMATED		0x01
#define EP_BAKMODE_SKIPZERO			0x02

const static UINT		UWM_ARE_YOU_EMULE = RegisterWindowMessage(EMULE_GUID);

BEGIN_MESSAGE_MAP(CEmuleDlg, CTrayDialog)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_WM_SIZE()
	ON_WM_CLOSE()

	ON_COMMAND(MP_CONNECT, StartConnection)
	ON_COMMAND(MP_DISCONNECT, CloseConnection)
	ON_COMMAND(MP_RESTORE, RestoreWindow)
	ON_COMMAND(MP_EXIT, OnClose)

	ON_MESSAGE(WM_TASKBARNOTIFIERCLICKED, OnTaskbarNotifierClicked)
	ON_MESSAGE(WM_COPYDATA, OnWMData)
	ON_MESSAGE(TM_FINISHEDHASHING, OnFileHashed)
	ON_MESSAGE(TM_HASHFAILED, OnHashFailed)
	ON_MESSAGE(TM_HASHINGSTARTED, OnFileHashingStarted)
	ON_MESSAGE(WEB_CONNECT_TO_SERVER, OnWebServerConnect)
	ON_MESSAGE(WEB_REMOVE_SERVER, OnWebServerRemove)
	ON_MESSAGE(WEB_ADD_TO_STATIC, OnWebServerAddToStatic)
	ON_MESSAGE(WEB_REMOVE_FROM_STATIC, OnWebServerRemoveFromStatic)
	ON_MESSAGE(WEB_CLEAR_COMPLETED, OnWebServerClearCompleted)
	ON_MESSAGE(WEB_FILE_RENAME, OnWebServerFileRename)
	ON_MESSAGE(WEB_SHARED_FILES_RELOAD, OnWebSharedFilesReload)
	ON_REGISTERED_MESSAGE(UWM_ARE_YOU_EMULE, OnAreYouEmule)

	ON_WM_QUERYENDSESSION()
	ON_WM_TIMER()
	ON_WM_NCDESTROY()
	ON_WM_ACTIVATE()
END_MESSAGE_MAP()

//Lucas - 08-Jan Define settig the Timer ID to be used.
//Could be interesting to standarize the TIMER_IDs (there are many already)
#define INIT_TIMER_ID 1234 // This is a magic number...

// CEmuleDlg Dialog

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CEmuleDlg::CEmuleDlg(CWnd* pParent /*=NULL*/)
	: CTrayDialog(CEmuleDlg::IDD, pParent)
{
	static const uint16 s_auClientIconResID[] =
	{
		IDI_COMPROT,		//SO_PLUS
		IDI_COMPROT,		//SO_EMULE
		IDI_AMULE,			//SO_AMULE
		IDI_EDONKEYHYBRID,	//SO_EDONKEYHYBRID
		IDI_NORMAL,			//SO_EDONKEY
		IDI_MLDONKEY,		//SO_MLDONKEY
		IDI_SECUREHASH,		//SO_OLDEMULE + non-SUI
		IDI_SHAREAZA,		//SO_SHAREAZA
		IDI_XMULE,			//SO_XMULE
		IDI_LPHANT,			//SO_LPHANT
		IDI_UNKNOWN			//SO_UNKNOWN
	};
	static const uint16 s_auPropIconResID[] =
	{
		IDI_FRIEND_ONLY,			//CLIENT_IMGLST_FRIEND
		IDI_CREDIT_ONLY,			//CLIENT_IMGLST_CREDITUP
		IDI_CREDIT_DOWNESTIMATED,	//CLIENT_IMGLST_CREDITDOWN
		IDI_BANNED_ONLY				//CLIENT_IMGLST_BANNED
	};

	EMULE_TRY

	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	m_hiconMyTray = NULL;
	m_bStartUpMinimized = false;
	m_bCliExit = false;

	m_pstrNewLogTextLines = new CString;
	m_pstrNewDebugLogTextLines = new CString;

	lastuprate = 0;
	lastdownrate = 0;
	g_App.m_app_state = g_App.APP_STATE_RUNNING;
	m_iStatus = 0;

	HINSTANCE hInst = AfxGetInstanceHandle();

	m_hiconConn = NULL;
	m_hiconTrans[0] = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_UP0),IMAGE_ICON,16,16,0);
	m_hiconTrans[1] = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_UP1),IMAGE_ICON,16,16,0);
	m_hiconTrans[2] = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_DOWN0),IMAGE_ICON,16,16,0);
	m_hiconTrans[3] = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_DOWN1),IMAGE_ICON,16,16,0);
	m_hiconIM[0] = 0;
	m_hiconIM[1] = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_MESSAGE),IMAGE_ICON,16,16,0);
	m_hiconIM[2] = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_MPENDING),IMAGE_ICON,16,16,0);
	m_hiconSourceTray = (HICON)LoadImage(hInst, MAKEINTRESOURCE(IDI_TRAYICON),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	m_hiconSourceTrayLowID = (HICON)LoadImage(hInst, MAKEINTRESOURCE(IDI_TRAYICON_LOWID),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	m_hiconSourceTrayGrey = (HICON)LoadImage(hInst, MAKEINTRESOURCE(IDI_TRAYICON_GREY),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	m_hiconUsers = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_USERS),IMAGE_ICON,16,16,0);
	m_pSystrayDlg = NULL;

	m_strDebugLogFilePath.Format(_T("%sdebug.log"), g_App.m_pPrefs->GetAppDir());
#if 1 //code left for smooth migration, delete in v1.3
	if (GetTextFileFormat(m_strDebugLogFilePath) == tffANSI)
	{
		CString strBackupFile(m_strDebugLogFilePath);

		strBackupFile += _T(".ansi");

		_tremove(strBackupFile);
		_trename(m_strDebugLogFilePath, strBackupFile);
	}
#endif
	m_strLogFilePath.Format(_T("%seMule.log"), g_App.m_pPrefs->GetAppDir());
#if 1 //code left for smooth migration, delete in v1.3
	if (GetTextFileFormat(m_strLogFilePath) == tffANSI)
	{
		CString strBackupFile(m_strLogFilePath);

		strBackupFile += _T(".ansi");

		_tremove(strBackupFile);
		_trename(m_strLogFilePath, strBackupFile);
	}
#endif

// Prepare image lists with 16x16 client icons
	CImageList	m_tmpImageList;

//	Load plain client icons
	m_clientImgLists[CLIENT_IMGLST_PLAIN].Create(16, 16, g_App.m_iDfltImageListColorFlags | ILC_MASK, ARRSIZE(s_auClientIconResID), 0);
	m_clientImgLists[CLIENT_IMGLST_PLAIN].SetBkColor(CLR_NONE);
	FillImgLstWith16x16Icons(&m_clientImgLists[CLIENT_IMGLST_PLAIN], s_auClientIconResID, ARRSIZE(s_auClientIconResID));

//	Create client icons with different properties
	m_tmpImageList.Create(16, 16, g_App.m_iDfltImageListColorFlags | ILC_MASK, 1, 0);
	m_tmpImageList.SetImageCount(1);
	for (unsigned uiListIdx = 1; uiListIdx <= ARRSIZE(s_auPropIconResID); uiListIdx++)
	{
		HICON	hIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(s_auPropIconResID[uiListIdx - 1]), IMAGE_ICON, 0, 0, 0));

		m_tmpImageList.Replace(0, hIcon);
		::DestroyIcon(hIcon);

		m_clientImgLists[uiListIdx].Create(16, 16, g_App.m_iDfltImageListColorFlags | ILC_MASK, ARRSIZE(s_auClientIconResID), 0);
		m_clientImgLists[uiListIdx].SetBkColor(CLR_NONE);
		for (unsigned uiIdx = 0; uiIdx < ARRSIZE(s_auClientIconResID); uiIdx++)
		{
			HIMAGELIST hImgLst = ::ImageList_Merge(m_clientImgLists[CLIENT_IMGLST_PLAIN].m_hImageList, uiIdx, m_tmpImageList.m_hImageList, 0, 0, 0);

			hIcon = ::ImageList_GetIcon(hImgLst, 0, 0);
			m_clientImgLists[uiListIdx].Add(hIcon);
			::DestroyIcon(hIcon);
			::ImageList_Destroy(hImgLst);
		}
	}

	m_pdlgActive = NULL;

#ifdef NEW_SOCKETS
//	m_pEngineData = new CEngineData(*g_App.m_pEngine);
#endif //NEW_SOCKETS

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CEmuleDlg::~CEmuleDlg()
{
	EMULE_TRY

	if (m_hiconMyTray != NULL)
		DestroyIcon(m_hiconMyTray);

	::DestroyIcon(m_hIcon);
	if (m_hiconConn != NULL)
		::DestroyIcon(m_hiconConn);
	::DestroyIcon(m_hiconTrans[0]);
	::DestroyIcon(m_hiconTrans[1]);
	::DestroyIcon(m_hiconTrans[2]);
	::DestroyIcon(m_hiconTrans[3]);
	::DestroyIcon(m_hiconIM[1]);
	::DestroyIcon(m_hiconIM[2]);
	::DestroyIcon(m_hiconSourceTray);
	::DestroyIcon(m_hiconSourceTrayLowID);
	::DestroyIcon(m_hiconSourceTrayGrey);
	::DestroyIcon(m_hiconUsers);

	m_wndServer.DestroyWindow();
	m_wndSharedFiles.DestroyWindow();
	m_dlgSearch.DestroyWindow();
	m_wndChat.DestroyWindow();
	m_wndTransfer.DestroyWindow();
	m_dlgStatistics.DestroyWindow();
	m_wndIRC.DestroyWindow();

	delete m_pstrNewLogTextLines;
	delete m_pstrNewDebugLogTextLines;

#ifdef NEW_SOCKETS
//	if (m_pEngineData)
//		delete m_pEngineData;
#endif //NEW_SOCKETS

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::DoDataExchange(CDataExchange *pDX)
{
	CTrayDialog::DoDataExchange(pDX);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnAreYouEmule(WPARAM, LPARAM)
{
	return UWM_ARE_YOU_EMULE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UINT CEmuleDlg::CheckCurrentVersionAtInet(void *)
{
	EMULE_TRY

	g_App.m_pPrefs->InitThreadLocale();

	CString	strTmp;

	strTmp.Format( _T("http://updates.emuleplus.info/get_version.php?version=%u&language=%u"),
		CURRENT_PLUS_VERSION, g_App.m_pPrefs->GetLanguageID() );

	HINTERNET	hOpen = ::InternetOpen(HTTP_USERAGENT, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);

	if (hOpen != NULL)
	{
		HINTERNET	hURL = ::InternetOpenUrl(hOpen, strTmp, _T(""), 0, INTERNET_FLAG_NO_CACHE_WRITE | INTERNET_FLAG_NO_COOKIES, NULL);

		if (hURL != NULL)
		{
			char	pcBuf[192];
			DWORD	dwSize;

			if (::InternetReadFile(hURL, pcBuf, ARRSIZE(pcBuf), &dwSize) && dwSize >= 5)
			{
				static const byte	s_abytePageHdr[5] = {0xEF, 0xBB, 0xBF, 'O', 'K' };	// UTF-8 BOM + 'OK'

				if (memcmp(pcBuf, s_abytePageHdr, 5) == 0)
				{
					WCHAR	pwcBuf[192];

					if ((dwSize = MultiByteToWideChar(CP_UTF8, 0, pcBuf + 5, dwSize - 5, pwcBuf, ARRSIZE(pwcBuf))) != 0)
					{
						strTmp = CStringW(pwcBuf, dwSize);

					// 	Everything alright
						g_App.m_pMDlg->AddLogLine(LOG_FL_SBAR | LOG_RGB_NOTICE, _T("%s"), strTmp);
						if (strTmp.Find(_T("http://emuleplus.info")) >= 0)
							g_App.m_pMDlg->ShowNotifier(strTmp, TBN_LOG, false, true);
						g_App.m_pPrefs->SetAutoCheckLastTime(time(NULL));
					}
				}
			}
			::InternetCloseHandle(hURL);
		}
		::InternetCloseHandle(hOpen);
	}

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CEmuleDlg::OnInitDialog()
{
	EMULE_TRY

	CTrayDialog::OnInitDialog();

	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu	*pSysMenu = GetSystemMenu(FALSE);

	if (pSysMenu != NULL)
	{
		pSysMenu->AppendMenu(MF_SEPARATOR);
		pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, GetResString(IDS_ABOUTBOX));
	}

	SetIcon(m_hIcon, TRUE);
	SetIcon(m_hIcon, FALSE);

//	Set font
	m_fontDefault.CreatePointFont(g_App.m_pPrefs->GetFontSize(),g_App.m_pPrefs->GetUsedFont());

//	Set tool bar
	m_ctlToolBar.Create(WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN, CRect(0,0,0,0), this, IDC_TOOLBAR);
	m_ctlToolBar.Init();
	m_ctlToolBar.ShowSpeedMeter(g_App.m_pPrefs->GetShowToolbarSpeedMeter());

	uint32	dwMaxRange = g_App.m_pPrefs->GetMaxGraphDownloadRate();

	if (g_App.m_pPrefs->GetMaxGraphUploadRate() > dwMaxRange)
		dwMaxRange = g_App.m_pPrefs->GetMaxGraphUploadRate();
	m_ctlToolBar.SetSpeedMeterRange(dwMaxRange / 10, 0);

#ifdef USE_REBAR
//	Set rebar
	REBARBANDINFO	rbbi;
	CSize			sizeBar;

	m_ctlToolBar.GetMaxSize(&sizeBar);
	m_ctlReBar.Create( WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_BORDER | RBS_BANDBORDERS
		| RBS_VARHEIGHT | CCS_NODIVIDER | CCS_TOP,
		CRect(0, 0, 0, 0), this, AFX_IDW_REBAR );

//	Insert the tool bar into the rebar
	rbbi.cbSize       = sizeof(REBARBANDINFO);
	rbbi.fMask        = RBBIM_SIZE | RBBIM_CHILD | RBBIM_CHILDSIZE | RBBIM_STYLE;
	rbbi.cxMinChild   = 0;
	rbbi.cyMinChild   = sizeBar.cy;
	rbbi.cx           = 0;
	rbbi.fStyle       = RBBS_NOGRIPPER | RBBS_BREAK;
	rbbi.hwndChild    = (HWND) m_ctlToolBar;
	m_ctlReBar.InsertBand(~0u, &rbbi);
#endif

//	Set window title
	SetWindowText(CLIENT_NAME_WITH_VER);

//	Initialize Taskbar Notifier
	m_wndTaskbarNotifier.Create(this);

	CEnBitmap		m_imgTaskbar;

	VERIFY(m_imgTaskbar.LoadImage(IDR_POPUP,_T("JPG")));
	m_wndTaskbarNotifier.SetBitmap(&m_imgTaskbar, 255, 0, 255);
	m_wndTaskbarNotifier.SetTextFont(_T("Arial"),g_App.m_pPrefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE);
	m_wndTaskbarNotifier.SetTextColor(RGB(255,255,230),RGB(255,255,255));
	m_wndTaskbarNotifier.SetTextRect(CRect(10, 29, m_wndTaskbarNotifier.m_nBitmapWidth - 10, m_wndTaskbarNotifier.m_nBitmapHeight - 9));
	m_wndTaskbarNotifier.m_bStarted = true;

// 	Set m_ctlStatusBar
	m_ctlStatusBar.Create(WS_CHILD|WS_VISIBLE|CCS_BOTTOM|SBARS_SIZEGRIP,CRect(0,0,0,0), this, IDC_STATUSBAR);
	ResizeStatusBar();
	m_ctlStatusBar.SetIcon(SB_NUMUSERS, m_hiconUsers);

// 	Create dialog pages
	m_dlgPreferences.SetPrefs(g_App.m_pPrefs);
	m_wndServer.Create(IDD_SERVER);
	m_wndSharedFiles.Create(IDD_FILES);
	m_dlgSearch.Create(IDD_SEARCH);
	m_wndChat.Create(IDD_CHAT);
	m_wndTransfer.Create(IDD_TRANSFER);
	m_dlgStatistics.Create(IDD_STATISTICS);
	m_wndIRC.Create(IDD_IRC);
	m_pdlgActive = &m_wndTransfer;

	CRect rClientRect;
	GetClientRect(&rClientRect);
#ifdef USE_REBAR
	CRect rReBarRect;
	m_ctlReBar.GetWindowRect(&rReBarRect);
	CRect rStatusbarRect;
	m_ctlStatusBar.GetWindowRect(&rStatusbarRect);
	rClientRect.top += rReBarRect.Height();
	rClientRect.bottom -= rStatusbarRect.Height();
#else
	CRect rToolbarRect;
	m_ctlToolBar.GetWindowRect(&rToolbarRect);
	CRect rStatusbarRect;
	m_ctlStatusBar.GetWindowRect(&rStatusbarRect);
	rClientRect.top += rToolbarRect.Height();
	rClientRect.bottom -= rStatusbarRect.Height();
#endif
	m_wndServer.SetWindowPos(NULL, rClientRect.left, rClientRect.top,
							rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
	m_wndTransfer.SetWindowPos(NULL, rClientRect.left, rClientRect.top,
								rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
	m_wndSharedFiles.SetWindowPos(NULL, rClientRect.left, rClientRect.top,
								rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
	m_dlgSearch.SetWindowPos(NULL, rClientRect.left, rClientRect.top,
							rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
	m_wndChat.SetWindowPos(NULL, rClientRect.left, rClientRect.top,
							rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
	m_wndIRC.SetWindowPos(NULL, rClientRect.left, rClientRect.top,
							rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);
	m_dlgStatistics.SetWindowPos(NULL, rClientRect.left, rClientRect.top,
								rClientRect.Width(), rClientRect.Height(), SWP_NOZORDER);

// 	Load connection state icon
	ShowConnectionState(false, _T(""), true);

// 	Anchors
	AddAnchor(m_wndServer,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(m_wndTransfer,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(m_wndSharedFiles,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(m_dlgSearch,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(m_wndChat,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(m_wndIRC,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(m_ctlStatusBar,BOTTOM_LEFT,BOTTOM_RIGHT);
	AddAnchor(m_dlgStatistics,TOP_LEFT,BOTTOM_RIGHT);
#ifdef USE_REBAR
	AddAnchor(m_ctlReBar,TOP_LEFT, TOP_RIGHT);
#else
	AddAnchor(m_ctlToolBar,TOP_LEFT, TOP_RIGHT);
#endif

	m_dlgStatistics.ShowInterval();

//	Set Tray icon
	TraySetMinimizeToTray(g_App.m_pPrefs->GetMinTrayPTR());
	TrayMinimizeToTrayChanged();

//	Update Categories
	m_dlgSearch.UpdateCatTabs();

	m_wndServer.ShowWindow(SW_SHOW);
	m_pdlgActive = &m_wndServer;

	g_App.m_pPrefs->SetSmartIdState(1);

//	Restore saved window placement
	WINDOWPLACEMENT wp;wp.length=sizeof(wp);
	wp=g_App.m_pPrefs->GetEmuleWindowPlacement();
	SetWindowPlacement(&wp);

	Localize();

	m_ttip.Create(this);
	m_ttip.SetDelayTime(TTDT_AUTOPOP, 15000);
	m_ttip.SetDelayTime(TTDT_INITIAL, g_App.m_pPrefs->GetToolTipDelay()*1000);
	m_ttip.SendMessage(TTM_SETMAXTIPWIDTH, 0, SHRT_MAX);
	m_ttip.SetBehaviour(PPTOOLTIP_MULTIPLE_SHOW);
	m_ttip.SetNotify(m_hWnd);
	m_ttip.AddTool(&m_ctlStatusBar, _T(""));

#ifdef OLD_SOCKETS_ENABLED
	g_App.m_pMMServer->Init();
#endif //OLD_SOCKETS_ENABLED

//	SplashScreen
	if (g_App.m_pPrefs->UseSplashScreen() && !g_App.m_pPrefs->GetStartMinimized())
	{
		CSplashScreen splash(this);
		splash.DoModal();
	}

	if (!SetTimer(INIT_TIMER_ID,300,NULL))
		AfxMessageBox(GetResString(IDS_ERR_FAILEDTIMER));

//	Set proper Scheduler Shift if option is set
	if (g_App.m_pPrefs->IsSCHEnabled())
	{
		CTime curr_t = CTime::GetCurrentTime();
		uint32 secs = curr_t.GetSecond() + 60*curr_t.GetMinute() + 60*60*curr_t.GetHour();
		bool bShift1;

		if (g_App.m_pPrefs->GetSCHShift1() > g_App.m_pPrefs->GetSCHShift2())
		{
			if (secs >= g_App.m_pPrefs->GetSCHShift1())
				bShift1 = true;
			else if (secs < g_App.m_pPrefs->GetSCHShift2())
				bShift1 = true;
			else
				bShift1 = false;
		}
		else
		{
			if (secs >= g_App.m_pPrefs->GetSCHShift1() && secs < g_App.m_pPrefs->GetSCHShift2())
				bShift1 = true;
			else
				bShift1 = false;
		}

		if(bShift1)
		{
		//	Switching to Shift1 speeds
			g_App.m_pUploadQueue->SCHShift1UploadCheck();
			g_App.m_pPrefs->SetMaxUpload(g_App.m_pPrefs->GetSCHShift1Upload());
			g_App.m_pPrefs->SetMaxDownload(g_App.m_pPrefs->GetSCHShift1Download());
			g_App.m_pPrefs->SetMaxConnections(g_App.m_pPrefs->GetSCHShift1conn());
			g_App.m_pPrefs->SetMaxDownloadConperFive(g_App.m_pPrefs->GetSCHShift15sec());

			CString MessageText;
			MessageText.Format( _T("SCHEDULER: switching to Shift 1 (Max Upload:%.1f Max Download:%.1f Max Connections:%i Max In 5 secs:%i)"),
								static_cast<double>(g_App.m_pPrefs->GetSCHShift1Upload()) / 10.0,
								static_cast<double>(g_App.m_pPrefs->GetSCHShift1Download()) / 10.0,
								g_App.m_pPrefs->GetSCHShift1conn(),
								g_App.m_pPrefs->GetSCHShift15sec() );
			g_App.AddLogLine(LOG_FL_DBG, MessageText);
		}
		else
		{
			int dayOfWeek = curr_t.GetDayOfWeek();

			if ((dayOfWeek==2 && g_App.m_pPrefs->IsSCHExceptMon())
				|| (dayOfWeek==3 && g_App.m_pPrefs->IsSCHExceptTue())
				|| (dayOfWeek==4 && g_App.m_pPrefs->IsSCHExceptWed())
				|| (dayOfWeek==5 && g_App.m_pPrefs->IsSCHExceptThu())
				|| (dayOfWeek==6 && g_App.m_pPrefs->IsSCHExceptFri())
				|| (dayOfWeek==7 && g_App.m_pPrefs->IsSCHExceptSat())
				|| (dayOfWeek==1 && g_App.m_pPrefs->IsSCHExceptSun()))
			{
				g_App.AddLogLine(LOG_FL_DBG, _T("SCHEDULER: day excepted!"));
			}
			else
			{
			//	Switching to Shift2 speeds
				g_App.m_pUploadQueue->SCHShift2UploadCheck();
				g_App.m_pPrefs->SetMaxUpload(g_App.m_pPrefs->GetSCHShift2Upload());
				g_App.m_pPrefs->SetMaxDownload(g_App.m_pPrefs->GetSCHShift2Download());
				g_App.m_pPrefs->SetMaxConnections(g_App.m_pPrefs->GetSCHShift2conn());
				g_App.m_pPrefs->SetMaxDownloadConperFive(g_App.m_pPrefs->GetSCHShift25sec());

				CString MessageText;
				MessageText.Format( _T("SCHEDULER: switching to Shift 2 (Max Upload:%.1f Max Download:%.1f Max Connections:%i Max In 5 secs:%i)"),
									static_cast<double>(g_App.m_pPrefs->GetSCHShift2Upload()) / 10.0,
									static_cast<double>(g_App.m_pPrefs->GetSCHShift2Download()) / 10.0,
									g_App.m_pPrefs->GetSCHShift2conn(),
									g_App.m_pPrefs->GetSCHShift25sec() );
				g_App.AddLogLine(LOG_FL_DBG, MessageText);
			}
		}
	}

	return TRUE;

	EMULE_CATCH2

	return FALSE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OnTimer(UINT_PTR nIDEvent)
{
	EMULE_TRY

	if (nIDEvent == INIT_TIMER_ID)
	{
		switch (m_iStatus)
		{
			case 0:	// State 0 - 300ms after InitDialog()
				m_iStatus++;
				g_App.m_pSharedFilesList->SetOutputCtrl(&m_wndSharedFiles.m_ctlSharedFilesList);
				break;

			case 1:	// State 1 - 300ms after the end of State 0
				m_iStatus++;
				g_App.m_pServerList->Init();
				break;

			case 2:	// State 2 - 300ms after the server list is init'ed.
				KillTimer(nIDEvent);
				m_iStatus++;
			//	Read in all the .met files and make them available for sharing
				g_App.m_pDownloadQueue->Init();
				g_App.m_pFakeCheck->Init();
#ifdef OLD_SOCKETS_ENABLED
				if (!g_App.m_pListenSocket->StartListening())
					AddLogLine(LOG_RGB_ERROR, IDS_MAIN_SOCKETERROR, g_App.m_pPrefs->GetPort());
				if (!g_App.m_pClientUDPSocket->Create())
					AddLogLine(LOG_RGB_ERROR, IDS_MAIN_SOCKETERROR, g_App.m_pPrefs->GetUDPPort());
#endif //OLD_SOCKETS_ENABLED

			//	Display own userhash
				AddLogLine(0, _T("%s: %s"), GetResString(IDS_INFLST_USER_USERHASH), HashToString(g_App.m_pPrefs->GetUserHash()));

			//	Display eMule Plus version
				AddLogLine(LOG_FL_SBAR, IDS_MAIN_READY, CURRENT_VERSION_LONG);

			//	Display used optimization
				UINT		dwResStrId;

				switch (get_cpu_type())
				{
					default:
					case 1:
						dwResStrId = IDS_OPTIMIZATION_NO;
						break;
					case 2:
						dwResStrId = IDS_OPTIMIZATION_MMX;
						break;
					case 3:
						dwResStrId = IDS_OPTIMIZATION_AMD;
						break;
					case 4:
					case 5:
						dwResStrId = IDS_OPTIMIZATION_SSE;
						break;
				}
				AddLogLine(0, dwResStrId);

			//	Start server anyway, but you'll get response		//	WHY do we do that ??
			//	only if it's enabled in preferences.
				g_App.m_pWebServer->StartServer();

			//	Process ed2k link
				if (g_App.m_pstrPendingLink != NULL)
				{
				//	Due to CString cloning m_pstrPendingLink and m_sendStruct point to the same string buffer
					OnWMData(NULL, (LPARAM)&g_App.m_sendStruct);
					delete g_App.m_pstrPendingLink;
					g_App.m_pstrPendingLink = NULL;
				}

			//	Check for a new version every 3 weeks
				if ( g_App.m_pPrefs->IsAutoCheckForNewVersion() &&
					(time(NULL) - g_App.m_pPrefs->GetAutoCheckLastTime()) > 21 * 24 * 60 * 60 )
				{
					AfxBeginThread(CheckCurrentVersionAtInet, NULL, THREAD_PRIORITY_BELOW_NORMAL + g_App.m_pPrefs->GetMainProcessPriority(), 0, 0);
				}

			//	Start one second timer to update session time
				if (SetTimer(INIT_TIMER_ID, 1000, NULL) == 0)
					AfxMessageBox(GetResString(IDS_ERR_FAILEDTIMER));
				break;

			case 3:	// State 3 - 1sec after connect
			//	Show the session time in the status bar once a second.
				ShowSessionTime();
				break;

			default:
				AddLogLine(LOG_FL_DBG, _T("Timer called with no reason"));
		}
	}
	CTrayDialog::OnTimer(nIDEvent);

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	EMULE_TRY

	switch(nID & 0xFFF0)
	{
		case IDM_ABOUTBOX:
		{
			CAboutDlg		dlgAbout;

			dlgAbout.DoModal();
			break;
		}
		case SC_CLOSE:
			if(g_App.m_pPrefs->GetCloseToTray())
			{
				TrayShow();
				ShowWindow(SW_HIDE);
			}
			else
				CTrayDialog::OnSysCommand(nID, lParam);
			break;
		case SC_MINIMIZE:
		case SC_MINIMIZETRAY:
		case SC_RESTORE:
		case SC_MAXIMIZE:
			CTrayDialog::OnSysCommand(nID, lParam);
			ShowTransferRate(true);
			break;
		default:
			CTrayDialog::OnSysCommand(nID, lParam);
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OnPaint()
{
	EMULE_TRY

	if (!m_bStartUpMinimized)
	{
		m_bStartUpMinimized=true;

		if (g_App.m_pPrefs->GetStartMinimized())
			OnCancel();
	}

	if (IsIconic())
	{
		CPaintDC dc(this);

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CTrayDialog::OnPaint();
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
HCURSOR CEmuleDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	OnBnClickedConnect() toggles the server connection on and off
void CEmuleDlg::OnBnClickedConnect()
{
	EMULE_TRY

#ifdef OLD_SOCKETS_ENABLED
	if (!g_App.m_pServerConnect->IsConnected())
	{
	//	Connect if not currently connected
		if (!g_App.m_pServerConnect->IsConnecting())
		{
			if (g_App.m_pServerConnect->IsICCActive())
			{
			//	Internet Connection Check is active, cancel it
				g_App.m_pServerConnect->Disconnect();
				ShowConnectionState(false);
			}
			else
				StartConnection();
		}
		else
		{
			g_App.m_pServerConnect->StopConnectionTry();
			ShowConnectionState(false);
		}
	}
	else
#endif //OLD_SOCKETS_ENABLED
	//	Disconnect if currently connected
		CloseConnection();

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OutputLogText(const CString& strLogText, CHTRichEditCtrl* pRichEditCtrl)
{
	EMULE_TRY

	if (!IsRunning())
		return;

	CString		strLine = strLogText, strPart;
	int			iTagStart, iTagEnd;
	COLORREF	crColor = CLR_DEFAULT, crNewColor;
	unsigned	uiDgt, uiColor, ui;
	const TCHAR	*pcColor;

	while (!strLine.IsEmpty())
	{
		iTagEnd = -1;
		iTagStart = strLine.Find(LOG_COLOR_TAG);
		if (iTagStart >= 0)
			iTagEnd = strLine.Find(_T('>'), iTagStart + LOG_COLOR_TAGLEN);
		if (iTagEnd >= 0)
		{
			crNewColor = ~0ul;
			strPart = strLine.Mid(iTagStart + LOG_COLOR_TAGLEN, iTagEnd - iTagStart - LOG_COLOR_TAGLEN);
			if (!strPart.IsEmpty())
			{
				if (strPart == _T("Default"))
					crNewColor = CLR_DEFAULT;
				else if (strPart.GetLength() == 6)
				{
					pcColor = strPart.GetString();
					for (ui = 0, uiColor = 0; ui < 6; ui++)
					{
						if ((uiDgt = HexChr2Num(pcColor[ui])) > 15)
							break;
						uiColor = (uiColor << 4u) | uiDgt;
					}
					if (ui == 6)
						crNewColor = RGB(uiColor >> 16, uiColor >> 8, uiColor);
				}
			}
			if (crNewColor == -1)
			{
				iTagStart += LOG_COLOR_TAGLEN;	//skip broken tag -- treat it as text
				iTagEnd = iTagStart - 1;
				crNewColor = crColor;
			}
			if (iTagStart > 0)
				pRichEditCtrl->AppendText(strLine.Left(iTagStart), crColor);
			crColor = crNewColor;
			strLine.Delete(0, iTagEnd + 1);
		}
		else
		{
			pRichEditCtrl->AppendText(strLine, crColor);
			break;
		}
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::AddLogText(int iMode, const CString &strTxt)
{
	EMULE_TRY

	CString			strLogLine = strTxt;

	strLogLine.Remove(_T('\b'));
	strLogLine.Remove(_T('\r'));
	strLogLine.Remove(_T('\t'));
	strLogLine.Trim();

	if (strLogLine.IsEmpty())
		return;

	CString		strCleanLine, *pstrCleanLine;
	TCHAR		acColBuf[7];
	const TCHAR	*pcMsgColor = _T("Default");
	unsigned	uiCol, uiRGB;

	if (iMode < 0)	//LOG_FL_EMBEDFMT
	{
		int		iTagStart = 0, iTagEnd;

		strCleanLine = strLogLine;
		for (;;)
		{
			iTagStart = strCleanLine.Find(LOG_COLOR_TAG, iTagStart);
			if (iTagStart < 0)
				break;
			iTagEnd = strCleanLine.Find(_T('>'), iTagStart + LOG_COLOR_TAGLEN);
			if (iTagEnd >= 0)
				strCleanLine.Delete(iTagStart, iTagEnd - iTagStart + 1);
			else
				iTagStart++;
		}
		pstrCleanLine = &strCleanLine;
	}
	else	//one color is passed for the whole message
	{
		pstrCleanLine = &strLogLine;
		uiRGB = iMode & 0xFFFFFF;
		if (uiRGB != 0)	//not default color
		{
			if (uiRGB == LOG_RGB_BLACK)	//restore pure black
				uiRGB = RGB(0x00, 0x00, 0x00);
			uiCol = GetRValue(uiRGB);
			acColBuf[0] = g_acHexDigits[uiCol >> 4];
			acColBuf[1] = g_acHexDigits[uiCol & 0xf];
			uiCol = GetGValue(uiRGB);
			acColBuf[2] = g_acHexDigits[uiCol >> 4];
			acColBuf[3] = g_acHexDigits[uiCol & 0xf];
			uiCol = GetBValue(uiRGB);
			acColBuf[4] = g_acHexDigits[uiCol >> 4];
			acColBuf[5] = g_acHexDigits[uiCol & 0xf];
			acColBuf[6] = _T('\0');
			pcMsgColor = acColBuf;
		}
	}

	if ((iMode & (LOG_FL_SBAR | LOG_FL_DBG)) == LOG_FL_SBAR)
	{
		if (m_ctlStatusBar.m_hWnd && g_App.m_app_state != CEmuleApp::APP_STATE_SHUTTINGDOWN)
			m_ctlStatusBar.SetText(*pstrCleanLine, SB_MESSAGETEXT, 0);
	}

	COleDateTime	currentTime(COleDateTime::GetCurrentTime());
	CString			strLogLine2, strTime = currentTime.Format(_T("%c: "));

	strLogLine2.Format(RGB_DARK_BLUE_TXT _T("%s") LOG_COLOR_TAG _T("%s>%s\n"), strTime, pcMsgColor, strLogLine);

//	Save to file
	if (g_App.m_pPrefs->LogToFile())
	{
		FILE	*pLogFile = _tfsopen((iMode & LOG_FL_DBG) ? m_strDebugLogFilePath : m_strLogFilePath, _T("ab"), _SH_DENYWR);

		if (pLogFile != NULL)
		{
			strTime += *pstrCleanLine;
			strTime += _T("\r\n");
#ifdef _UNICODE
		//	Write the Unicode BOM in the beginning if file was created
			if (_filelength(_fileno(pLogFile)) == 0)
				fputwc(0xFEFF, pLogFile);
#endif
			_fputts(strTime, pLogFile);
			fclose(pLogFile);
		}
	}
	// 	Only when data save to file output them into GUI
	if ((iMode & LOG_FL_DBG) != 0)
	{
		if (m_pstrNewDebugLogTextLines)
			m_pstrNewDebugLogTextLines->Append(strLogLine2);

	//	post message only if box was created
		if(IsRunning() && ::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
			PostUniqueMessage(WM_DLOG_REFRESH);
	}
	else
	{
		if (m_pstrNewLogTextLines)
			m_pstrNewLogTextLines->Append(strLogLine2);

	//	post message only if box was created
		if(IsRunning() && ::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
			PostUniqueMessage(WM_LOG_REFRESH);

		ShowNotifier(*pstrCleanLine, TBN_LOG, false, g_App.m_pPrefs->GetUseLogNotifier());
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::AddServerMessageLine(LPCTSTR line)
{
	EMULE_TRY

	CString strLine = line;

	strLine.Remove(_T('\b'));
	strLine.Remove(_T('\r'));
	strLine.Remove(_T('\t'));
	strLine.Trim();
	if ((!strLine.IsEmpty()) && (::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd)))
	{
		COleDateTime	currentTime(COleDateTime::GetCurrentTime());
		CString			strTime = currentTime.Format(_T("%c: "));

		m_wndServer.m_pctlServerMsgBox->AppendText(strTime, RGB(0, 0, 128), CLR_DEFAULT, HTC_HAVENOLINK);
		strLine += _T('\n');
		m_wndServer.m_pctlServerMsgBox->AppendText(strLine);
		if (m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 1)
			m_wndServer.m_ctrlBoxSwitcher.SetItemState(1, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::AddBugReport(LPCTSTR strFunctionName, LPCTSTR sFile, uint32 dwLine, LPCTSTR pcMsg)
{
	EMULE_TRY

	if (g_App.m_pPrefs->GetBugReport())
	{
		AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("%s: EXCEPTION! (%s) Report to ") CLIENT_NAME _T(" developers. Line %u in file %s"),
			strFunctionName, pcMsg, dwLine, sFile );
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::ShowConnectionState()
{
#ifdef OLD_SOCKETS_ENABLED
	ShowConnectionState(g_App.m_pServerConnect->IsConnected(), _T(""));
#endif //OLD_SOCKETS_ENABLED
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::ShowConnectionState(bool bConnected, const CString &strServer /*=""*/, bool bIconOnly /*=false*/)
{
	static const uint16 s_auConnIconResID[] = { IDI_NOTCONNECTED, IDI_CONNECTED, IDI_CONNECTEDHIGH };

	EMULE_TRY

	if(g_App.m_app_state == g_App.APP_STATE_SHUTTINGDOWN)
		return;

	CString			strBuff;
	TBBUTTONINFO	tbi;
	int				iIconID;

	tbi.dwMask = TBIF_IMAGE | TBIF_TEXT;
	tbi.cbSize = sizeof(TBBUTTONINFO);

	if (bConnected)
	{
		if (!bIconOnly)
		{
			GetResString(&strBuff, IDS_MAIN_CONNECTEDTO);
			strBuff += _T(' ');
			strBuff += strServer;
			m_ctlStatusBar.SetText(strBuff, SB_MESSAGETEXT, 0);
			m_ctlStatusBar.SetText(strServer, SB_SERVER, 0);
		}
		GetResString(&strBuff, IDS_MAIN_BTN_DISCONNECT);
		tbi.iImage = 9;
		tbi.pszText = const_cast<LPTSTR>(strBuff.GetString());
		m_ctlToolBar.SetButtonInfo(IDC_TOOLBARBUTTON + 0, &tbi);
		m_ctlToolBar.AutoSize();

#ifdef OLD_SOCKETS_ENABLED
		iIconID = (g_App.m_pServerConnect->IsLowID()) ? 1 : 2;
#endif //OLD_SOCKETS_ENABLED
	}
	else
	{
#ifdef OLD_SOCKETS_ENABLED
		if (g_App.m_pServerConnect->IsConnecting())
		{
			if (!bIconOnly)
			{
				GetResString(&strBuff, IDS_CONNECTING);
				m_ctlStatusBar.SetText(strBuff, SB_SERVER, 0);
			}
			GetResString(&strBuff, IDS_MAIN_BTN_CANCEL);
			tbi.iImage = 10;
		}
		else
		{
			if (!bIconOnly)
			{
				GetResString(&strBuff, IDS_NOTCONNECTED);
				m_ctlStatusBar.SetText(strBuff, SB_SERVER, 0);
				AddLogLine(0, IDS_DISCONNECTED);
			}
			GetResString(&strBuff, IDS_MAIN_BTN_CONNECT);
			tbi.iImage = 0;
		}
		tbi.pszText = const_cast<LPTSTR>(strBuff.GetString());
		m_ctlToolBar.SetButtonInfo(IDC_TOOLBARBUTTON + 0, &tbi);
		iIconID = 0;
		ShowUserCount(0);
#endif //OLD_SOCKETS_ENABLED
	}
	HICON	hPrevIcon = m_hiconConn;

	m_hiconConn = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(s_auConnIconResID[iIconID]), IMAGE_ICON, 16, 16, 0);
	m_ctlStatusBar.SetIcon(SB_SERVER, m_hiconConn);
	if (hPrevIcon != NULL)
		::DestroyIcon(hPrevIcon);

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::ShowSessionTime()
{
	uint32		dwRunTimeSecs = static_cast<uint32>((::GetTickCount() - g_App.stat_starttime) / 1000);
	CTimeSpan	runTime(static_cast<__time64_t>(dwRunTimeSecs));
	CString		strBuffer;
	unsigned	uiDays, uiHours, uiMinutes;

	uiHours = static_cast<unsigned>(runTime.GetHours());
	uiMinutes = static_cast<unsigned>(runTime.GetMinutes());
	uiDays = static_cast<unsigned>(runTime.GetDays());

	if (uiDays == 0)
		strBuffer.Format(_T("%02u:%02u:%02u"), uiHours, uiMinutes, runTime.GetSeconds());
	else
		strBuffer.Format( _T("%2u %s %02u:%02u"), uiDays,
			GetResString((uiDays == 1) ? IDS_LONGDAY : IDS_LONGDAYS), uiHours, uiMinutes );

	m_ctlStatusBar.SetText(strBuffer, SB_SESSIONTIME, 0);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::ShowUserCount(uint32 dwCount)
{
	EMULE_TRY

	if (g_App.m_app_state == g_App.APP_STATE_SHUTTINGDOWN)
		return;

	CString	sBuffer;

	sBuffer.Format(_T("%u"), dwCount);
	m_ctlStatusBar.SetText(sBuffer, SB_NUMUSERS, 0);

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::ShowMessageState(byte iconnr)
{
	EMULE_TRY

	m_ctlStatusBar.SetIcon(SB_MESSAGESTATUS,m_hiconIM[iconnr]);

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//v- eklmn: bugfix(11): crazy output in statusbar (update only tray or window)
void CEmuleDlg::ShowTransferRate(bool bUpdateAll)
{
	EMULE_TRY

	CString sBuffer, sUpload, sDownload;

//	More detailed upload speed: 5 sec average instead of 40 sec average (calculated only once)
	double lastuprate_kB = static_cast<double>(g_App.m_pUploadQueue->GetDataRate())/1024.0;
	double lastdownrate_kB = static_cast<double>(g_App.m_pDownloadQueue->GetDataRate())/1024.0;

	double lastuprateoverhead_kB = static_cast<double>(g_App.m_pUploadQueue->GetUpDataRateOverhead())/1024.0;
	double lastdownrateoverhead_kB = static_cast<double>(g_App.m_pDownloadQueue->GetDownDataRateOverhead())/1024.0;

//	String preparation doesn't depend on output
	if (g_App.m_pPrefs->ShowOverhead())
	{
		sBuffer.Format(GetResString(IDS_UPDOWNLONG),lastuprate_kB, lastuprateoverhead_kB, lastdownrate_kB, lastdownrateoverhead_kB);
		sUpload.Format(_T("%.2f (%.2f)"),lastuprate_kB, lastuprateoverhead_kB);
		sDownload.Format(_T("%.2f (%.2f)"),lastdownrate_kB, lastdownrateoverhead_kB);
	}
	else
	{
		sBuffer.Format(GetResString(IDS_UPDOWN),lastuprate_kB, lastdownrate_kB);
		sUpload.Format(_T("%.2f"),lastuprate_kB);
		sDownload.Format(_T("%.2f"),lastdownrate_kB);
	}

//	Set SpeedMeterValues if option is activated
	if(g_App.m_pPrefs->GetShowToolbarSpeedMeter())
		m_ctlToolBar.SetSpeedMeterValues((int)lastuprate_kB, (int)lastdownrate_kB);

//	Update window only
	if (IsWindowVisible() || bUpdateAll)
	{
		m_ctlStatusBar.SetText(sUpload,SB_UPLOADRATE,0);
		m_ctlStatusBar.SetText(sDownload,SB_DOWNLOADRATE,0);
		m_ctlStatusBar.SetIcon(SB_UPLOADRATE,m_hiconTrans[(lastuprate_kB)?1:0]);
		m_ctlStatusBar.SetIcon(SB_DOWNLOADRATE,m_hiconTrans[(lastdownrate_kB)?3:2]);

		m_wndTransfer.UpdateDownloadHeader();
		m_wndTransfer.UpdateUploadHeader();
	}

//	Update tray only
	if (TrayIsVisible() || bUpdateAll)
	{
	//	Set trayicon-icon
		int DownRateProcent = (int)ceil(lastdownrate_kB * 1000 / g_App.m_pPrefs->GetMaxGraphDownloadRate());
		if (DownRateProcent>100) DownRateProcent=100;

		TraySetToolTip(sBuffer);

	//	It's better to do TrayUpdate here, because of TrayToolTip
		UpdateTrayIcon(DownRateProcent);
	}
	if (!TrayIsVisible() && g_App.m_pPrefs->ShowRatesOnTitle())
	{
		CString		strTitle;

		strTitle.Format(_T("(U:%.1f D:%.1f) ") CLIENT_NAME_WITH_VER, lastuprate_kB, lastdownrate_kB);
		SetWindowText(strTitle);
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OnCancel()
{
	EMULE_TRY

	if (*g_App.m_pPrefs->GetMinTrayPTR())
	{
		TrayShow();
		ShowWindow(SW_HIDE);
	}
	else
	{
		ShowWindow(SW_MINIMIZE);
	}
	ShowTransferRate();

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OnActivate(UINT nState, CWnd *pWndOther, BOOL bMinimized)
{
	CWnd::OnActivate(nState, pWndOther, bMinimized);

//	Update chat and disable taskbar blinking indicator on application activation
	if ((nState != WA_INACTIVE) && (m_pdlgActive == &m_wndChat))
		g_App.m_pMDlg->m_wndChat.m_ctlChatSelector.ShowChat();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::SetActiveDialog(CDialog* dlg)
{
	EMULE_TRY

	if(dlg == m_pdlgActive)
		return;

	m_pdlgActive->ShowWindow(SW_HIDE);
	dlg->ShowWindow(SW_SHOW);
	dlg->SetFocus();
	m_pdlgActive = dlg;

	if (dlg==&m_wndTransfer)
 	{
		m_wndTransfer.UpdateCatTabTitles();
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON + MTB_TRANSFER);
	}
	else if (dlg==&m_wndServer)
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON + MTB_SERVERS);
	else if (dlg==&m_dlgSearch)
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON + MTB_SEARCH);
	else if (dlg==&m_wndSharedFiles)
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON + MTB_SHAREDFILES);
	else if (dlg==&m_wndChat)
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON + MTB_MESSAGES);
	else if (dlg==&m_wndIRC)
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON + MTB_IRC);
	else if (dlg==&m_dlgStatistics)
	{
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON + MTB_STATISTICS);
		m_dlgStatistics.ShowStatistics(true);
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OnSize(UINT nType,int cx,int cy)
{
	EMULE_TRY

	CTrayDialog::OnSize(nType,cx,cy);
	ResizeStatusBar();

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::ResizeStatusBar()
{
	CRect rect;
	m_ctlStatusBar.GetClientRect(&rect);

	int		iWidths[SB_NUMSBPARTS] =
	{
		0, 105, 22, 80, 70, 70, 258
	};

	int		iRightEdges[SB_NUMSBPARTS];

	if (g_App.m_pPrefs->ShowOverhead())
	{
		iWidths[SB_UPLOADRATE] = 105;
		iWidths[SB_DOWNLOADRATE] = 105;
		iWidths[SB_SERVER] = 188;
	}

//	Calculate the right edges given the widths
	iRightEdges[SB_NUMSBPARTS-1] = -1;	//Indicates right edge of the status bar
	iRightEdges[SB_NUMSBPARTS-2] = rect.right - iWidths[SB_NUMSBPARTS-1];
	for (int i = SB_NUMSBPARTS-3; i >= 0; i--)
	{
		iRightEdges[i] = iRightEdges[i+1] - iWidths[i+1];
	}
//	Set the status bar part sizes
	m_ctlStatusBar.SetParts(SB_NUMSBPARTS, iRightEdges);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnWMData(WPARAM wParam, LPARAM lParam)
{
	NOPRM(wParam);

	EMULE_TRY

	tagCOPYDATASTRUCT	*pCLData = reinterpret_cast<tagCOPYDATASTRUCT*>(lParam);

	if (pCLData->dwData == OP_ED2KLINK)
	{
		FlashWindow(true);
		if (g_App.m_pPrefs->IsBringToFront())
		{
			if (IsIconic())
				ShowWindow(SW_RESTORE);
			else if (TrayHide())
				ShowWindow(SW_SHOW);
			else
				SetForegroundWindow();
		}
		try
		{
			CED2KLink	*pLink = CED2KLink::CreateLinkFromUrl(CString(reinterpret_cast<LPCTSTR>(pCLData->lpData), pCLData->cbData / sizeof(TCHAR)));

			_ASSERT(pLink != NULL);
			switch (pLink->GetKind())
			{
				case CED2KLink::kFile:
				{
					CED2KFileLink	*pFileLink = pLink->GetFileLink();

					g_App.m_pDownloadQueue->AddFileLinkToDownload(pFileLink);
					break;
				}
				case CED2KLink::kServerList:
				{
					CED2KServerListLink	*pListLink = pLink->GetServerListLink();
					CString	strAddress = pListLink->GetAddress();

					if (!strAddress.IsEmpty())
						g_App.m_pMDlg->m_wndServer.UpdateServerMetFromURL(strAddress);
					break;
				}
				case CED2KLink::kServer:
				{
					CString	strDefName;
					CED2KServerLink	*pSrvLink = pLink->GetServerLink();
					CServer	*pSrv = new CServer(pSrvLink->GetPort(), pSrvLink->GetAddress());

					pSrvLink->GetDefaultName(strDefName);
					pSrv->SetListName(strDefName);
					if (g_App.m_pPrefs->GetManuallyAddedServerHighPrio())
						pSrv->SetPreference(PR_HIGH);

					if (!g_App.m_pMDlg->m_wndServer.m_ctlServerList.AddServer(pSrv, true))
						delete pSrv;
					else
						AddLogLine(LOG_FL_SBAR, IDS_SERVERADDED, pSrv->GetListName());
					break;
				}
				case CED2KLink::kSearch:
				{
					CED2KSearchLink* pListLink = pLink->GetSearchLink();

					SetActiveDialog(&m_dlgSearch);
					m_dlgSearch.ProcessEd2kSearchLinkRequest(pListLink->GetSearchTerm());
					break;
				}
				default:
					break;
			}
			delete pLink;
		}
		catch(...)
		{
			OUTPUT_DEBUG_TRACE();
			AddLogLine(LOG_FL_SBAR, IDS_LINKNOTADDED);
		}
		return true;
	}
	else if (pCLData->dwData == OP_CLCOMMAND)
	{
	//	Command line command received
		CString	strCL(reinterpret_cast<LPCTSTR>(pCLData->lpData), pCLData->cbData / sizeof(TCHAR));

		strCL.MakeLower();
		AddLogLine(LOG_FL_SBAR, _T("CLI: %s"), strCL);

		if (strCL == _T("connect"))
		{
			StartConnection();
			return true;
		}
#ifdef OLD_SOCKETS_ENABLED
		else if (strCL == _T("disconnect"))
		{
			if (g_App.m_pServerConnect->IsConnecting())
				g_App.m_pServerConnect->StopConnectionTry();
			else
				g_App.m_pServerConnect->Disconnect();

			ShowConnectionState(g_App.m_pServerConnect->IsConnected(), _T(""), true);
			return true;
		}
#endif //OLD_SOCKETS_ENABLED
		else if (strCL == _T("resume"))
		{
			g_App.m_pDownloadQueue->StartNextFile(CCat::GetAllCatType());
			return true;
		}
		else if (strCL == _T("exit"))
		{
			m_bCliExit = true;
			OnClose();
			return true;
		}
		else if (strCL == _T("reload"))
		{
			g_App.m_pSharedFilesList->Reload();
			return true;
		}
		else if (strCL == _T("restore"))
		{
			RestoreWindow();
			return true;
		}
		else if (strCL == _T("preferences"))
		{
			g_App.m_pPrefs->Save();
			return true;
		}
		else if ((strCL.GetLength() > 8) && (strCL.Left(7) == _T("limits=")))
		{
			int	iPos = strCL.Find(_T(':'), 7);

			if (iPos >= 7)
			{
				if ((iPos + 1) < strCL.GetLength())	//	':' isn't last char (download substring isn't empty)
					g_App.m_pPrefs->SetMaxDownloadWithCheck(String2FranctionalRate(strCL.GetString() + iPos + 1));
			}
			if (iPos != 7)	//	upload substring isn't empty
				g_App.m_pPrefs->SetMaxUploadWithCheck(String2FranctionalRate(strCL.GetString() + 7));
			return true;
		}
		else if (strCL == _T("status"))
		{
			CString	strBuffer(g_App.m_pPrefs->GetAppDir());

			strBuffer += _T("status.log");

			FILE	*pOutput = _tfsopen(strBuffer, _T("wb"), _SH_DENYWR);

			if (pOutput != NULL)
			{
#ifdef _UNICODE
			//	Write Unicode byte-order mark 0xFEFF
				fputwc(0xFEFF, pOutput);
#endif
#ifdef OLD_SOCKETS_ENABLED
				if (g_App.m_pServerConnect->IsConnected())
					GetResString(&strBuffer, IDS_CONNECTED);
				else if (g_App.m_pServerConnect->IsConnecting())
					GetResString(&strBuffer, IDS_CONNECTING);
				else
					GetResString(&strBuffer, IDS_DISCONNECTED);
#else
				strBuffer = _T("");
#endif //OLD_SOCKETS_ENABLED

				_fputts(strBuffer, pOutput);
				_fputts(_T("\r\n"), pOutput);
				_ftprintf(pOutput, GetResString(IDS_UPDOWN), static_cast<double>(g_App.m_pUploadQueue->GetDataRate()) / 1024.0, static_cast<double>(g_App.m_pDownloadQueue->GetDataRate()) / 1024.0);
				_fputts(_T("\r\n"), pOutput);
				_fputts(g_App.m_pDownloadList->GetPartFilesStatusString(), pOutput);

				fclose(pOutput);
			}
			return true;
		}
	}
	EMULE_CATCH2

	return false;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnFileHashed(WPARAM wParam, LPARAM lParam)
{
	EMULE_TRY

	CKnownFile	*pNewKnownFile = reinterpret_cast<CKnownFile*>(lParam);

	if (wParam != 0)
	{
		CPartFile	*pPartFile = reinterpret_cast<CPartFile*>(wParam);

		pPartFile->PartFileHashFinished(pNewKnownFile);
	}
	else
	{
		g_App.m_pSharedFilesList->FileHashingFinished(pNewKnownFile);
	}
	return true;

	EMULE_CATCH2

	return false;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnHashFailed(WPARAM wParam, LPARAM lParam)
{
	NOPRM(wParam);

	g_App.m_pSharedFilesList->FileHashingFailed(reinterpret_cast<UnknownFile_Struct*>(lParam));
	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnFileHashingStarted(WPARAM wParam, LPARAM lParam)
{
	NOPRM(lParam);

	CPartFile	*pPartFile = reinterpret_cast<CPartFile*>(wParam);

	if (pPartFile != NULL)
		pPartFile->FileRehashingStarted();
	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OnClose()
{
	EMULE_TRY

//	No GUI confirmation for the exit through CLI to achieve proper automation
	if ( (g_App.m_app_state == g_App.APP_STATE_RUNNING) &&
		!m_bCliExit && g_App.m_pPrefs->IsConfirmExitEnabled() &&
		( IDNO == MessageBox( GetResString(IDS_MAIN_EXIT), GetResString(IDS_MAIN_EXITTITLE),
		MB_YESNO | MB_DEFBUTTON2 ) ) )
	{
		return;
	}
// 	We should call this before changing the state to APP_STATE_SHUTTINGDOWN because
// 	otherwise any log message inside this function (and there are few) will produce
// 	message box
#ifdef OLD_SOCKETS_ENABLED
	if (g_App.m_pServerConnect->IsConnected())
		g_App.m_pServerConnect->Disconnect();
#endif //OLD_SOCKETS_ENABLED

	g_App.m_app_state = g_App.APP_STATE_SHUTTINGDOWN;

	g_App.OnlineSig();
	g_App.m_pDownloadQueue->SaveAllSLSFiles();

	WINDOWPLACEMENT wp;wp.length=sizeof(wp);GetWindowPlacement(&wp);
	g_App.m_pPrefs->SetWindowLayout(wp);

//	Disable redraws while shutting down, should take care of some crashes on exit
	m_wndTransfer.m_ctlDownloadList.SetRedraw(false);
	m_wndTransfer.m_ctlUploadList.SetRedraw(false);
	m_wndTransfer.m_ctlQueueList.SetRedraw(false);
	m_wndTransfer.m_ctlClientList.SetRedraw(false);
	m_dlgSearch.m_ctlSearchList.SetRedraw(false);
	m_wndSharedFiles.m_ctlSharedFilesList.SetRedraw(false);
	m_wndIRC.serverChannelList.SetRedraw(false);
	m_wndTransfer.m_ctlInfoList.SetRedraw(false);
	m_wndChat.m_FriendListCtrl.SetRedraw(false);
	m_wndChat.m_ctlChatSelector.SetRedraw(false);
	m_dlgStatistics.SetRedraw(false);
	m_wndTransfer.SetRedraw(false);
	m_dlgSearch.SetRedraw(false);
	m_wndSharedFiles.SetRedraw(false);
	m_wndIRC.SetRedraw(false);
	m_wndChat.SetRedraw(false);

	m_wndTransfer.m_ctlDownloadList.SaveSettings(CPreferences::TABLE_DOWNLOAD);
	m_wndTransfer.m_ctlUploadList.SaveSettings(CPreferences::TABLE_UPLOAD);
	m_wndTransfer.m_ctlQueueList.SaveSettings(CPreferences::TABLE_QUEUE);
	m_wndTransfer.m_ctlClientList.SaveSettings(CPreferences::TABLE_CLIENTLIST);
	m_dlgSearch.m_ctlSearchList.SaveSettings(CPreferences::TABLE_SEARCH);
	m_wndSharedFiles.m_ctlSharedFilesList.SaveSettings(CPreferences::TABLE_SHARED);
	m_wndServer.m_ctlServerList.SaveSettings(CPreferences::TABLE_SERVER);
	m_wndIRC.serverChannelList.SaveSettings(CPreferences::TABLE_IRC);
	m_wndIRC.m_ctlNickList.SaveSettings(CPreferences::TABLE_IRCNICK);
	m_wndChat.m_FriendListCtrl.SaveSettings(CPreferences::TABLE_FRIENDLIST);
	m_wndTransfer.SaveRollupItemHeights();

//	Close preferences window if it is open, otherwise it can result in a crash
//	Such closure can be initiated for example by MobileMule shutdown request
	if (m_dlgPreferences.m_hWnd != NULL)
		m_dlgPreferences.PressButton(PSBTN_CANCEL);

	g_App.m_pPrefs->Add2TotalDownloaded(g_App.stat_sessionReceivedBytes);
	g_App.m_pPrefs->Add2TotalUploaded(g_App.stat_sessionSentBytes);
	g_App.m_pPrefs->Save();

	g_App.m_pMDlg->m_dlgSearch.SaveSearchStrings();

//	Restore old registry if required
	if (g_App.m_pPrefs->AutoTakeED2KLinks())
		RevertReg();

//	Remove all list items
	m_wndSharedFiles.m_ctlSharedFilesList.DeleteAllItems();
	m_wndTransfer.m_ctlClientList.DeleteAllItems();
	m_wndTransfer.m_ctlUploadList.DeleteAllItems();
	m_wndTransfer.m_ctlQueueList.DeleteAllItems();
	m_wndTransfer.m_ctlDownloadList.DeleteAllItems();
	m_wndChat.m_ctlChatSelector.DeleteAllItems();
	m_dlgSearch.m_ctlSearchList.DeleteAllItems();

	ShowWindow(SW_HIDE);

//	All dialog windows created should be destroyed
	m_wndServer.DestroyWindow();
	m_wndTransfer.DestroyWindow();
	m_dlgSearch.DestroyWindow();
	m_wndSharedFiles.DestroyWindow();
	m_wndIRC.DestroyWindow();
	m_wndChat.DestroyWindow();
	m_dlgStatistics.DestroyWindow();

	g_App.m_pClientList->DeleteAll();

//	Moved here, should avoid crashes when closing & downloading.
	g_App.m_pKnownFilesList->Save();

	CTrayDialog::OnCancel();

//	Backup on exit
	if (g_App.m_pPrefs->IsAutoBackup())
	{
		g_App.m_pMDlg->RunBackupNow(true);
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OnTrayRButtonUp(CPoint pt)
{
	EMULE_TRY

	if(m_pSystrayDlg)
	{
		m_pSystrayDlg->BringWindowToTop();
		return;
	}

	m_pSystrayDlg = new CMuleSystrayDlg(this, pt);
	if(m_pSystrayDlg)
	{
		UINT nResult = m_pSystrayDlg->DoModal();
		delete m_pSystrayDlg;
		m_pSystrayDlg = NULL;
		switch(nResult)
		{
			case IDC_TOMAX:
				QuickSpeedOther(MP_QS_UA);
				break;
			case IDC_TOMIN:
				QuickSpeedOther(MP_QS_PA);
				break;
			case IDC_RESTORE:
				RestoreWindow();
				break;
			case IDC_CONNECT:
				StartConnection();
				break;
			case IDC_DISCONNECT:
				CloseConnection();
				break;
			case IDC_EXIT:
				OnClose();
				break;
			case IDC_PREFERENCES:
			{
				static int iOpen = 0;
				if(!iOpen)
				{
					iOpen = 1;
					m_dlgPreferences.DoModal();
					iOpen = 0;
				}
				break;
			}
			default:
				break;
		}
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	StartConnection() initiates a connection attempt to a server.
void CEmuleDlg::StartConnection()
{
	EMULE_TRY

	AddLogLine(LOG_FL_SBAR, IDS_CONNECTING);
//	If there's more than one server selected in the server list...
	if (m_wndServer.m_ctlServerList.GetSelectedCount() > 1)
		m_wndServer.m_ctlServerList.PostMessage(WM_COMMAND, MP_CONNECTTO, 0L);
#ifdef OLD_SOCKETS_ENABLED
	else
		g_App.m_pServerConnect->ConnectToAnyServer();
#endif //OLD_SOCKETS_ENABLED
	ShowConnectionState(false);

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::CloseConnection()
{
	EMULE_TRY
	if (g_App.m_pServerConnect->IsConnected())
	{
		if( !g_App.m_pPrefs->IsConfirmDisconnectEnabled() ||
			( MessageBox(GetResString(IDS_BACKUP_SURE), GetResString(IDS_IRC_DISCONNECT),
			MB_ICONQUESTION | MB_YESNO | MB_DEFBUTTON2) == IDYES ) )
		{
#ifdef OLD_SOCKETS_ENABLED
			g_App.m_pServerConnect->Disconnect();
#endif //OLD_SOCKETS_ENABLED
		}
	}
	else if (g_App.m_pServerConnect->IsConnecting())
	{
#ifdef OLD_SOCKETS_ENABLED
		g_App.m_pServerConnect->StopConnectionTry();
#endif //OLD_SOCKETS_ENABLED
	}
	g_App.OnlineSig();

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::RestoreWindow()
{
	EMULE_TRY

	if (IsIconic())
		ShowWindow(SW_RESTORE);
	else
	{
		if (TrayIsVisible())
			TrayHide();
		ShowWindow(SW_SHOW);
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::UpdateTrayIcon(int procent)
{
	EMULE_TRY

//	Set the limits of where the bar color changes (low-high)
	int pLimits16[1] = {100};

// 	Set the corresponding color for each level
	COLORREF pColors16[1] = { RGB(1,255,1) };

//	Start it up
#ifdef OLD_SOCKETS_ENABLED
	if(g_App.m_pServerConnect->IsConnected() && !g_App.m_pServerConnect->IsLowID())
		m_trayMeterIcon.Init(m_hiconSourceTray,100,1,1,16,16, RGB(37,97,37));
	else if(g_App.m_pServerConnect->IsConnected() && g_App.m_pServerConnect->IsLowID())
		m_trayMeterIcon.Init(m_hiconSourceTrayLowID,100,1,1,16,16, RGB(37,97,37));
	else
#endif //OLD_SOCKETS_ENABLED
		m_trayMeterIcon.Init(m_hiconSourceTrayGrey,100,1,1,16,16, RGB(37,97,37));

//	Load our limit and color info
	m_trayMeterIcon.SetColorLevels(pLimits16,pColors16,1);

// 	Generate the icon (destroy these icons using DestroyIcon())
	int pVals16[1] = {procent};

	m_hiconMyTray = m_trayMeterIcon.Create(pVals16);
	ASSERT (m_hiconMyTray != NULL);
	if (m_hiconMyTray != NULL)
		TraySetIcon(m_hiconMyTray, true);
	TrayUpdate();

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int CEmuleDlg::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	EMULE_TRY

	return CTrayDialog::OnCreate(lpCreateStruct);

	EMULE_CATCH2

	return -1;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TaskbarNotifier
void CEmuleDlg::ShowNotifier(const CString &strText, int iMsgType, bool bForceSoundOFF, bool bMsgEnabled)
{
	EMULE_TRY

	if (bMsgEnabled && m_wndTaskbarNotifier.m_bStarted)
	{
		CString strTempMessage, strFinalMessage;
		int iPos = 0;

		for (;;)
		{
			strTempMessage = strText.Tokenize(_T(" "), iPos);
			if (strTempMessage.IsEmpty())
				break;
			int iStrLength = strTempMessage.GetLength();
			int iStrLineBreak = 30;

			while (iStrLength > 30)
			{
				strTempMessage.Insert(iStrLineBreak, _T('\n'));
				iStrLineBreak += 30;
				iStrLength -= 30;
			}

			strFinalMessage += strTempMessage;
			strFinalMessage += _T(' ');
		}

		strFinalMessage.TrimRight();

		m_wndTaskbarNotifier.Show(strFinalMessage, iMsgType, 500, g_App.m_pPrefs->NotificationDisplayTime());

		if (g_App.m_pPrefs->GetUseSoundInNotifier() && !bForceSoundOFF)
			PlaySound(g_App.m_pPrefs->GetNotifierWavSoundPath(), NULL, SND_FILENAME | SND_NOSTOP | SND_NOWAIT | SND_ASYNC);
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnTaskbarNotifierClicked(WPARAM wParam, LPARAM lParam)
{
	NOPRM(wParam); NOPRM(lParam);

	EMULE_TRY

	int msgType = m_wndTaskbarNotifier.GetMessageType();

	switch(msgType)
	{
		case TBN_CHAT:
			RestoreWindow();
			SetActiveDialog(&m_wndChat);
			SetFocus();
			break;

		case TBN_DLOAD:
		case TBN_DLOAD_ADD:
			RestoreWindow();
			SetActiveDialog(&m_wndTransfer);
			SetFocus();
			break;

		case TBN_IMPORTANTEVENT:
		case TBN_LOG:
			RestoreWindow();
			SetActiveDialog(&m_wndServer);
			SetFocus();
			break;
	}
	return 0;

	EMULE_CATCH2

	return -1;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::Localize()
{
	EMULE_TRY

	if(m_hWnd)
	{
		m_ctlToolBar.Localize();

		if (!m_ctlStatusBar)
			return;

#ifdef OLD_SOCKETS_ENABLED
		if(g_App.m_pServerConnect->IsConnected())
		{
			CServer	*pCurServer = g_App.m_pServerConnect->GetCurrentServer();

			ShowUserCount(pCurServer->GetNumUsers());
		}
		else
		{
			m_ctlStatusBar.SetText(_T("0"), SB_NUMUSERS, 0);
			if(g_App.m_pServerConnect->IsConnecting())
				m_ctlStatusBar.SetText(GetResString(IDS_CONNECTING),SB_SERVER,0);
			else
				m_ctlStatusBar.SetText(GetResString(IDS_NOTCONNECTED),SB_SERVER,0);
		}
#endif //OLD_SOCKETS_ENABLED
		ShowTransferRate(true);
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CEmuleDlg::PreTranslateMessage(MSG* pMsg)
{
	if (g_App.m_pPrefs->GetToolTipDelay() != 0)
		m_ttip.RelayEvent(pMsg);

	return CTrayDialog::PreTranslateMessage(pMsg);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::GetInfo4ToolTip(NM_PPTOOLTIP_DISPLAY *pNotify)
{
	int						iControlId = CWnd::FromHandle(pNotify->ti->hWnd)->GetDlgCtrlID();

	if (iControlId == IDC_STATUSBAR)
	{
		CString		strInfo;
		CPoint		pt;

		::GetCursorPos(&pt);
		m_ctlStatusBar.ScreenToClient(&pt);
		switch (m_ctlStatusBar.GetPaneAtPosition(pt))
		{
			case SB_MESSAGETEXT:
			{
				CString		strLogText = g_App.m_pMDlg->m_wndServer.m_pctlLogBox->GetToolTip();

				if (!strLogText.IsEmpty())
				{
					strInfo.Format(_T("<t=1><b>%s</b><br><hr=100%%><br>%s"), GetResString(IDS_SV_LOG), strLogText);
					pNotify->ti->hIcon = g_App.m_pMDlg->m_wndServer.m_imageList.ExtractIcon(0);
				}
				break;
			}
			case SB_SESSIONTIME:
			{
				uint32		dwRunTimeSecs = static_cast<uint32>((::GetTickCount() - g_App.stat_starttime) / 1000);

				CTimeSpan	runTime(static_cast<__time64_t>(dwRunTimeSecs));
				CString		strRuntime;
				unsigned	uiDays, uiHours, uiMinutes;

				uiHours = static_cast<unsigned>(runTime.GetHours());
				uiMinutes = static_cast<unsigned>(runTime.GetMinutes());
				uiDays = static_cast<unsigned>(runTime.GetDays());

				if (uiDays == 0)
				{
					strRuntime.Format(_T("%02u:%02u:%02u"), uiHours, uiMinutes, runTime.GetSeconds());
				}
				else
				{
					strRuntime.Format( _T("%u %s %02u:%02u"), uiDays,
						GetResString((uiDays == 1) ? IDS_LONGDAY : IDS_LONGDAYS),
						uiHours, uiMinutes );
				}

				strInfo.Format( _T("<t=1><b>%s</b><br><hr=100%%><br><b>%s:</b><t>%s"), GetResString(IDS_STATS_TIMESTATS),
					GetResString(IDS_STATS_RUNTIME), strRuntime );

				if (g_App.stat_serverConnectTime > 0)
				{
					uint32 dwServerDurationSecs = static_cast<uint32>((::GetTickCount() - g_App.stat_serverConnectTime) / 1000);
					CTimeSpan ServerDuration(static_cast<__time64_t>(dwServerDurationSecs));
					uiHours = static_cast<unsigned>(ServerDuration.GetHours());
					uiMinutes = static_cast<unsigned>(ServerDuration.GetMinutes());
					uiDays = static_cast<unsigned>(ServerDuration.GetDays());

					if (uiDays == 0)
					{
						strRuntime.Format(_T("%02u:%02u:%02u"), uiHours, uiMinutes, ServerDuration.GetSeconds());
					}
					else
					{
						strRuntime.Format( _T("%u %s %02u:%02u"), uiDays,
							GetResString((uiDays == 1) ? IDS_LONGDAY : IDS_LONGDAYS),
							uiHours, uiMinutes );
					}

					strInfo.AppendFormat(_T("<br><b>%s:</b><t>%s"),	GetResString(IDS_STATS_CURRSRVDUR), strRuntime);
				}

				pNotify->ti->hIcon = g_App.m_pMDlg->m_dlgStatistics.m_imagelistStatTree.ExtractIcon(12);
				break;
			}
			case SB_NUMUSERS:
			{
				CServer *pServer = g_App.m_pServerConnect != NULL ? g_App.m_pServerConnect->GetCurrentServer() : NULL;

				if (pServer != NULL)
					pServer = g_App.m_pServerList->GetServerByAddress(pServer->GetAddress(), pServer->GetPort());

				if (pServer == NULL)
					return;

				strInfo = pServer->GetUsersInfo4Tooltips();
 				pNotify->ti->hIcon = CopyIcon(m_hiconUsers);
				break;
			}
			case SB_UPLOADRATE:
			{
				double dblLastUprate_KB = static_cast<double>(g_App.m_pUploadQueue->GetDataRate())/1024.0;
				double dblLastUprateOverhead_KB = static_cast<double>(g_App.m_pUploadQueue->GetUpDataRateOverhead())/1024.0;

				strInfo.Format( _T("<t=1><b>%s</b><br><hr=100%%><br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%s (%s)"),
								GetResString(IDS_TW_UPLOADS), GetResString(IDS_DL_SPEED), dblLastUprate_KB,
								GetResString(IDS_STATS_OVRHD), dblLastUprateOverhead_KB, GetResString(IDS_STATS_UDATA),
								CastItoXBytes(g_App.stat_sessionSentBytes),
								CastItoXBytes(g_App.stat_sessionSentBytes + g_App.m_pPrefs->GetTotalUploaded()) );
				pNotify->ti->hIcon = CopyIcon(m_hiconTrans[(dblLastUprate_KB != 0) ? 1:0]);
				break;
			}
			case SB_DOWNLOADRATE:
			{
				double dblLastDownrate_KB = static_cast<double>(g_App.m_pDownloadQueue->GetDataRate())/1024.0;
				double dblLastDownrateOverhead_KB = static_cast<double>(g_App.m_pDownloadQueue->GetDownDataRateOverhead())/1024.0;

				strInfo.Format( _T("<t=1><b>%s</b><br><hr=100%%><br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%s (%s)"),
								GetResString(IDS_TW_DOWNLOADS), GetResString(IDS_DL_SPEED), dblLastDownrate_KB,
								GetResString(IDS_STATS_OVRHD), dblLastDownrateOverhead_KB, GetResString(IDS_STATS_DDATA),
								CastItoXBytes(g_App.stat_sessionReceivedBytes),
								CastItoXBytes( g_App.stat_sessionReceivedBytes+g_App.m_pPrefs->GetTotalDownloaded()) );
				pNotify->ti->hIcon = CopyIcon(m_hiconTrans[(dblLastDownrate_KB != 0) ? 3:2]);
				break;
			}
			case SB_SERVER:
			{
				CServer *pServer = g_App.m_pServerConnect != NULL ? g_App.m_pServerConnect->GetCurrentServer() : NULL;

				if (pServer != NULL)
					pServer = g_App.m_pServerList->GetServerByAddress(pServer->GetAddress(), pServer->GetPort());

				if (pServer == NULL)
					return;

				pNotify->ti->hIcon = pServer->GetServerInfo4Tooltips(strInfo);
				break;
			}
		}
		pNotify->ti->sTooltip = strInfo;
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CEmuleDlg::OnCommand(WPARAM wParam, LPARAM lParam)
{
	EMULE_TRY

	switch (wParam)
	{
		case IDC_TOOLBARBUTTON + MTB_CONNECT:
			OnBnClickedConnect();
			break;
		case IDC_TOOLBARBUTTON + MTB_SERVERS:
			SetActiveDialog(&m_wndServer);
			m_ctlToolBar.PressMuleButton(wParam);
			break;
		case IDC_TOOLBARBUTTON + MTB_TRANSFER:
			SetActiveDialog(&m_wndTransfer);
			m_ctlToolBar.PressMuleButton(wParam);
			break;
		case IDC_TOOLBARBUTTON + MTB_SEARCH:
			SetActiveDialog(&m_dlgSearch);
			m_ctlToolBar.PressMuleButton(wParam);
			break;
		case IDC_TOOLBARBUTTON + MTB_SHAREDFILES:
			SetActiveDialog(&m_wndSharedFiles);
			m_ctlToolBar.PressMuleButton(wParam);
			break;
		case IDC_TOOLBARBUTTON + MTB_MESSAGES:
			SetActiveDialog(&m_wndChat);
			m_ctlToolBar.PressMuleButton(wParam);
			break;
		case IDC_TOOLBARBUTTON + MTB_IRC:
			SetActiveDialog(&m_wndIRC);
			m_ctlToolBar.PressMuleButton(wParam);
			break;
		case IDC_TOOLBARBUTTON + MTB_STATISTICS:
			SetActiveDialog(&m_dlgStatistics);
			m_ctlToolBar.PressMuleButton(wParam);
			break;
		case IDC_TOOLBARBUTTON + MTB_PREFS:
			m_ctlToolBar.PressButton(wParam,TRUE);
			m_dlgPreferences.DoModal();
			m_ctlToolBar.PressButton(wParam,FALSE);
			break;
		default:
			break;
	}

	return CTrayDialog::OnCommand(wParam, lParam);

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::QuickSpeedOther(UINT nID)
{
	EMULE_TRY

	switch (nID)
	{
		case MP_QS_PA:
			g_App.m_pPrefs->SetMaxUpload(10);
			g_App.m_pPrefs->SetMaxDownload(10);
			break;
		case MP_QS_UA:
			g_App.m_pPrefs->SetMaxUpload(g_App.m_pPrefs->GetMaxGraphUploadRate());
			g_App.m_pPrefs->SetMaxDownload(g_App.m_pPrefs->GetMaxGraphDownloadRate());
			break;
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CEmuleDlg::OnQueryEndSession()
{
	EMULE_TRY

	if (!CTrayDialog::OnQueryEndSession())
		return FALSE;

	if (g_App.m_app_state == g_App.APP_STATE_DONE)
	{
		return TRUE;
	}
	else if (g_App.m_app_state == g_App.APP_STATE_RUNNING)
	{
		g_App.m_app_state = g_App.APP_STATE_SHUTTINGDOWN;
		CDialog::OnCancel();
		return TRUE;
	}

	EMULE_CATCH2

	return FALSE;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnWebServerConnect(WPARAM wParam, LPARAM lParam)
{
	NOPRM(lParam);

	EMULE_TRY

#ifdef OLD_SOCKETS_ENABLED
	g_App.m_pServerConnect->ConnectToServer((CServer*)wParam, false);
#endif

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnWebServerRemove(WPARAM wParam, LPARAM lParam)
{
	NOPRM(lParam);

	EMULE_TRY

	g_App.m_pMDlg->m_wndServer.m_ctlServerList.RemoveServer((CServer*)wParam);

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnWebServerAddToStatic(WPARAM wParam, LPARAM lParam)
{
	NOPRM(lParam);

	EMULE_TRY

	g_App.m_pMDlg->m_wndServer.m_ctlServerList.StaticServerFileAppend((CServer*)wParam);
	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnWebServerRemoveFromStatic(WPARAM wParam, LPARAM lParam)
{
	NOPRM(lParam);

	EMULE_TRY

	g_App.m_pMDlg->m_wndServer.m_ctlServerList.StaticServerFileRemove((CServer*)wParam);

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnWebServerClearCompleted(WPARAM wParam, LPARAM lParam)
{
	EMULE_TRY

	if (wParam == 0)
	{
		EnumCategories eCatID = static_cast<_EnumCategories>(lParam);
		g_App.m_pDownloadList->ClearCompleted(eCatID);
	}
	else
	{
		uchar* pFileHash = reinterpret_cast<uchar*>(lParam);
		g_App.m_pDownloadList->ClearCompleted(pFileHash);
		delete[] pFileHash;
	}

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnWebServerFileRename(WPARAM wParam, LPARAM lParam)
{
	EMULE_TRY

	CString sNewName = ((LPCTSTR)(lParam));

	((CPartFile*)wParam)->SetFileName(sNewName);
	((CPartFile*)wParam)->SavePartFile();
	((CPartFile*)wParam)->UpdateDisplayedInfo();
	g_App.m_pSharedFilesList->UpdateItem((CKnownFile*)((CPartFile*)wParam));
	g_App.m_pMDlg->m_wndTransfer.UpdateInfoHeader();

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnProcessTaskUI(WPARAM wParam, LPARAM lParam)
{
	NOPRM(wParam); NOPRM(lParam);

	EMULE_TRY

#ifdef NEW_SOCKETS
/*	CTask *pTask = (CTask*)wParam;
	if(pTask)
	{
		if(pTask->ProcessForUI(*g_App.m_pEngine))
			delete pTask;
	}*/
#endif //NEW_SOCKETS

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LRESULT CEmuleDlg::OnWebSharedFilesReload(WPARAM wParam, LPARAM lParam)
{
	NOPRM(wParam); NOPRM(lParam);

	EMULE_TRY

	g_App.m_pSharedFilesList->Reload();

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// To find out if app is running or shutting/shut down
bool CEmuleDlg::IsRunning()
{
	return (g_App.m_app_state == CEmuleApp::APP_STATE_RUNNING);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::OnNcDestroy()
{
	//see KB138681 [TwoBottle Mod]
	AfxGetApp()->m_pMainWnd = NULL;
	CTrayDialog::OnNcDestroy();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CEmuleDlg::TrayShow(void)
{
//	Set tray icon
	int DownRateProcent = (int)ceil(lastdownrate / 1.024 / g_App.m_pPrefs->GetMaxGraphDownloadRate());
	if (DownRateProcent>100)
		DownRateProcent=100;

	UpdateTrayIcon(DownRateProcent);

	return CTrayDialog::TrayShow();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::RunBackupNow(bool bAutomated)
{
	int	iMode = (bAutomated) ? EP_BAKMODE_AUTOMATED : 0;

	if (g_App.m_pPrefs->GetBackupDatFiles())
		BackupFromAppDir(_T("*.dat"), iMode);
	if (g_App.m_pPrefs->GetBackupMetFiles())
		BackupFromAppDir(_T("*.met"), iMode);
	if (g_App.m_pPrefs->GetBackupIniFiles())
		BackupFromAppDir(_T("*.ini"), iMode);
	if (g_App.m_pPrefs->GetBackupPartMetFiles())
		BackupFromTempDir(_T("*.part.met"), iMode | EP_BAKMODE_SKIPZERO);
	if (g_App.m_pPrefs->GetBackupPartTxtsrcFiles())
		BackupFromTempDir(_T("*.part.txtsrc"), iMode | EP_BAKMODE_SKIPZERO);
	if (g_App.m_pPrefs->GetBackupPartFiles())
	{
		if ( bAutomated ||
			::MessageBox(m_dlgPreferences.m_hWnd, GetResString(IDS_BACKUP_LONGTIME), GetResString(IDS_BACKUP_SURE), MB_ICONQUESTION|MB_YESNO) == IDYES )
		{
			BackupFromTempDir(_T("*.part"), iMode);
		}
	}
	if (!bAutomated)
		::MessageBox(m_dlgPreferences.m_hWnd, GetResString(IDS_BACKUP_SUCCESS), GetResString(IDS_BACKUP_COMPLETE), MB_OK);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::BackupFromAppDir(LPCTSTR pcExtensionToBack, int iMode)
{
	CString	strBuffer = g_App.m_pPrefs->GetBackupDir();

	strBuffer += _T('\\');

//	Create all required directories
	CreateAllDirectories(&strBuffer);
//	Copying files
	BackupFiles(pcExtensionToBack, iMode, g_App.m_pPrefs->GetConfigDir(), strBuffer);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::BackupFromTempDir(LPCTSTR pcExtensionToBack, int iMode)
{
	CString	strBuffer = g_App.m_pPrefs->GetBackupDir();

	strBuffer += _T("\\Temp\\");

//	Create all required directories
	CreateAllDirectories(&strBuffer);

	BackupFiles(pcExtensionToBack, iMode, g_App.m_pPrefs->GetTempDir(), strBuffer);

//	Additional Temp dirs backup
	CStringList	tmpTempDirList;	// List elements will be deleted in list destructor

//	Make local copy to prevent long locking of list resource
	g_App.m_pPrefs->TempDirListCopy(&tmpTempDirList);

	CString strSearchPath;
	uint32	dwTempDir = 1;

	for (POSITION pos = tmpTempDirList.GetHeadPosition(); pos != NULL;)
	{
		strSearchPath = tmpTempDirList.GetNext(pos);

		strBuffer.Format(_T("%s\\Temp[%u]\\"), g_App.m_pPrefs->GetBackupDir(), dwTempDir);

	//	Create last directory. No need to use CreateAllDirectories() as the previous path already exists
		::CreateDirectory(strBuffer, NULL);

		BackupFiles(pcExtensionToBack, iMode, strSearchPath, strBuffer);

		strBuffer += _T("backup.log");

		FILE	*pLogFile = _tfsopen(strBuffer, _T("wb"), _SH_DENYWR);

		if (pLogFile != NULL)
		{
#ifdef _UNICODE
			fputwc(0xFEFF, pLogFile);
#endif
			_fputts(_T("Backed-up directory: "), pLogFile);
			_fputts(strSearchPath, pLogFile);
			fclose(pLogFile);
		}

		dwTempDir++;
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::BackupFiles(LPCTSTR pcExtensionToBack, int iMode, const CString &strPath, const CString &strBackupPath)
{
	WIN32_FIND_DATA	fileData;
	HANDLE	hSearch;
	bool	bError = false, bOverWrite = true;
	CString	strDstPath = strPath;

//	Start searching for files in the directory.
	if (strDstPath.Right(1) != _T('\\'))
		strDstPath += _T('\\');

	CString	strTmp = strDstPath;

	strTmp += pcExtensionToBack;
	if ((hSearch = FindFirstFile(strTmp, &fileData)) != INVALID_HANDLE_VALUE)
	{
		CString	strNewPath;

	//	Copy each file to the backup directory
		for (;;)
		{
		//	Skip zero size files if required to avoid backing corrupted temp. files up
			if ( ((iMode & EP_BAKMODE_SKIPZERO) == 0) ||
				((fileData.nFileSizeHigh | fileData.nFileSizeLow) != 0) )
			{
				strNewPath = strBackupPath;
				strNewPath += fileData.cFileName;

				if (((iMode & EP_BAKMODE_AUTOMATED) == 0) && PathFileExists(strNewPath))
				{
					if (!g_App.m_pPrefs->GetBackupOverwrite())
					{
						strTmp.Format(GetResString(IDS_BACKUP_EXIST), fileData.cFileName);
						bOverWrite = (MessageBox(strTmp, GetResString(IDS_BACKUP_OVER), MB_ICONQUESTION|MB_YESNO) == IDYES);
					}
				}
				if (bOverWrite)
				{
					strTmp = strDstPath;
					strTmp += fileData.cFileName;
					CopyFile(strTmp, strNewPath, FALSE);
				}
				if ((iMode & EP_BAKMODE_AUTOMATED) == 0)
					AddLogLine(LOG_FL_DBG, _T("Backup %s done"), strNewPath);
			}

			if (!FindNextFile(hSearch, &fileData))
			{
				if (GetLastError() != ERROR_NO_MORE_FILES)
					bError = true;
				else
					break;
			}
		}
		FindClose(hSearch);	//	Close the search handle
	}

	if (bError)
	{
		AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("Error encountered during backup!"));
		if ((iMode & EP_BAKMODE_AUTOMATED) == 0)
			MessageBox(GetResString(IDS_BACKUP_ERROR), GetResString(IDS_ERROR), MB_OK);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::DisableAutoBackup()
{
	if (g_App.m_pPrefs->IsAutoBackup() || g_App.m_pPrefs->IsScheduledBackup())
	{
		g_App.m_pPrefs->SetScheduledBackup(false);
		g_App.m_pPrefs->SetAutoBackup(false);

		AddLogLine(LOG_RGB_WARNING, IDS_AUTOBACKUP_DISABLED);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	PostUniqueMessage() check the existence of message in the list control's message queue & puts it into the queue if message does not exist
void CEmuleDlg::PostUniqueMessage(UINT uiMsg)
{
	if (::IsWindow(GetSafeHwnd()) && g_App.m_app_state != CEmuleApp::APP_STATE_SHUTTINGDOWN)
	{
		MSG		msg;

	//	If there's no refresh message already in the message queue... (don't want to flood it)
		if (!::PeekMessage(&msg, m_hWnd, uiMsg, uiMsg, PM_NOREMOVE))
			PostMessage(uiMsg, 0, 0);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString* CEmuleDlg::GetNewLogTextLines()
{
	CString		*pstrNewLines = NULL;

	if (!m_pstrNewLogTextLines->IsEmpty())
	{
		pstrNewLines = m_pstrNewLogTextLines;
		m_pstrNewLogTextLines = new CString;
	}

	return pstrNewLines;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString* CEmuleDlg::GetNewDebugLogTextLines()
{
	CString		*pstrNewLines = NULL;

	if (!m_pstrNewDebugLogTextLines->IsEmpty())
	{
		pstrNewLines = m_pstrNewDebugLogTextLines;
		m_pstrNewDebugLogTextLines = new CString;
	}

	return pstrNewLines;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CEmuleDlg::OnWndMsg(UINT iMessage, WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	BOOL		bHandled = TRUE;

	EMULE_TRY

	if (IsRunning())
	{
		switch (iMessage)
		{
			case WM_LOG_REFRESH:
			{
				const CString	*pstrNewLines = GetNewLogTextLines();

				if (pstrNewLines != NULL)
				{
					OutputLogText(*pstrNewLines, m_wndServer.m_pctlLogBox);
					if (m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 0)
						m_wndServer.m_ctrlBoxSwitcher.SetItemState(0, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);

					delete pstrNewLines;
				}
				break;
			}
			case WM_DLOG_REFRESH:
			{
				const CString	*pstrNewLines = GetNewDebugLogTextLines();

				if (pstrNewLines != NULL)
				{
					OutputLogText(*pstrNewLines, m_wndServer.m_pctlDebugBox);
					if (m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 2)
						m_wndServer.m_ctrlBoxSwitcher.SetItemState(2, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);

					delete pstrNewLines;
				}
				break;
			}
			case WM_ACTIVATEAPP:
			{
				BOOL bIsActivated = (BOOL)wParam;

				if (!bIsActivated && m_pdlgActive != NULL)
				{
					NMHDR	hdr;

					m_ttip.Pop();	// Cancel the tooltip in eMuleDlg class

					hdr.hwndFrom = GetSafeHwnd();
					hdr.idFrom = GetDlgCtrlID();
					hdr.code = UDM_TOOLTIP_POP;
					::SendMessage(m_pdlgActive->GetSafeHwnd(), WM_NOTIFY, 0, (LPARAM)&hdr);
				}
				break;
			}
			default:
				bHandled = FALSE;
				break;
		}
	}
	else
		bHandled = FALSE;

	EMULE_CATCH

	if (!bHandled)
		bHandled = CDialog::OnWndMsg(iMessage, wParam, lParam, pResult);

	return bHandled;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CEmuleDlg::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult)
{
	NMHDR* pNMHDR = (NMHDR*)lParam;

	switch(pNMHDR->code)
	{
		case UDM_TOOLTIP_DISPLAY:
		{
			NM_PPTOOLTIP_DISPLAY *pNotify = (NM_PPTOOLTIP_DISPLAY*)lParam;

			GetInfo4ToolTip(pNotify);
			return TRUE;
		}
		case UDM_TOOLTIP_POP:
		{
			m_ttip.Pop();
			return TRUE;
		}
	}

	return CTrayDialog::OnNotify(wParam, lParam, pResult);
}
@


1.380
log
@Check for new version every 2 weeks instead of every week.
@
text
@d652 1
a652 1
			//	Check for a new version every 2 weeks
d654 1
a654 1
					(time(NULL) - g_App.m_pPrefs->GetAutoCheckLastTime()) > 14 * 24 * 60 * 60 )
@


1.379
log
@Added search ed2k link support (from original) {eeeeh}.
@
text
@d652 1
a652 3
			//	Get current version from internet, if one week elapsed
			//  Don't put lower elapse value, we don't need DDoS attacks! ;)
			//	(later move this to new engine)
d654 1
a654 1
					(time(NULL) - g_App.m_pPrefs->GetAutoCheckLastTime()) > 7 * 24 * 60 * 60 )
@


1.378
log
@Renaming to sync up with original.
@
text
@d1359 8
@


1.377
log
@Renamed server link interface services -- IP replaced with address as it's not only IP for DynIP servers (similar to original).
@
text
@d756 2
a757 1
void CEmuleDlg::OnBnClickedButton2()
d764 1
a764 1
	// Connect if not currently connected
d783 2
a784 1
	// Disconnect if currently connected
a785 1
#endif //OLD_SOCKETS_ENABLED
a1896 36
//	DisConnect() toggles the server connection on and off.
void CEmuleDlg::DisConnect()
{
	EMULE_TRY

#ifdef OLD_SOCKETS_ENABLED
	if (!g_App.m_pServerConnect->IsConnected())
	{
	//	Connect if not currently connected
		if (!g_App.m_pServerConnect->IsConnecting())
		{
			if (g_App.m_pServerConnect->IsICCActive())
			{
			//	Internet Connection Check is active, cancel it
				g_App.m_pServerConnect->Disconnect();
				ShowConnectionState(false);
			}
			else
				StartConnection();
		}
		else
		{
			g_App.m_pServerConnect->StopConnectionTry();
			ShowConnectionState(false);
		}
	}
	else
#endif //OLD_SOCKETS_ENABLED
	{
	//	Disconnect if currently connected
		CloseConnection();
	}

	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
d2045 1
a2045 1
			DisConnect();
@


1.376
log
@Reduced H-file dependency.
@
text
@d1345 1
a1345 1
					CServer	*pSrv = new CServer(pSrvLink->GetPort(), pSrvLink->GetIP());
@


1.375
log
@Reduced H-file dependency.
@
text
@d38 1
@


1.374
log
@Reduced H-file dependency.
@
text
@d38 1
@


1.373
log
@Improved H-file includes.
@
text
@d23 1
@


1.372
log
@Don't apply GUI "Prompt on exit" for "exit" CLI command {Vladimir (SV)}.
@
text
@a31 1
#include "math.h"
d37 1
@


1.371
log
@Optimized link identification and output to RichEdit controls (logs, chats, IRC).
@
text
@d123 1
d1399 1
d1518 1
d1520 1
a1520 1
		g_App.m_pPrefs->IsConfirmExitEnabled() &&
@


1.370
log
@Don't autoconnect using a timer;
Load IPFilter before autoupdating the server list;
This should completly fix the possibility of adding filtered servers.
@
text
@d972 1
a972 1
		CString			strTime = currentTime.Format(_T("%c"));
d974 1
a974 2
		strTime += _T(": ");
		m_wndServer.m_pctlServerMsgBox->AppendText(strTime, RGB(0, 0, 128));
@


1.369
log
@Fixed logging vulnerability which could cause endless loop with 100% CPU utilization;
Simplified logging system implementation.
@
text
@a647 4
			//	Connect to server
				if (g_App.m_pPrefs->DoAutoConnect() && !g_App.m_pPrefs->AutoServerlist())
					OnBnClickedButton2();

@


1.368
log
@Removed a no operation.
@
text
@d298 1
a298 1
						g_App.m_pMDlg->AddLogLine(true, RGB_LOG_NOTICE_TXT _T("%s"), strTmp);
d533 1
a533 1
			g_App.AddDebugLogLine(MessageText);
d547 1
a547 1
				g_App.AddDebugLogLine(_T("SCHEDULER: day excepted!"));
d564 1
a564 1
				g_App.AddDebugLogLine(MessageText);
d602 1
a602 1
					AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_MAIN_SOCKETERROR), g_App.m_pPrefs->GetPort());
d604 1
a604 1
					AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_MAIN_SOCKETERROR), g_App.m_pPrefs->GetUDPPort());
d608 1
a608 1
				AddLogLine(false, _T("%s: %s"), GetResString(IDS_INFLST_USER_USERHASH), HashToString(g_App.m_pPrefs->GetUserHash()));
d611 1
a611 1
				AddLogLine(true, IDS_MAIN_READY, CURRENT_VERSION_LONG);
d633 1
a633 1
				AddLogLine(false, dwResStrId);
d672 1
a672 1
				AddDebugLogLine(_T("Timer called with no reason"));
d797 1
a797 1
	int			iTagStart, iTagEnd, iIndex, iRed, iGreen, iBlue;
d799 2
d805 1
a805 1
		iTagStart = strLine.Find(_T("<COLOR="));
d807 1
a807 1
			iTagEnd = strLine.Find(_T('>'), iTagStart + 7);
d811 1
a811 1
			strPart = strLine.Mid(iTagStart + 7, iTagEnd - iTagStart - 7);
d816 1
a816 1
				else
d818 2
a819 2
					iIndex = strPart.Find(_T(','));
					if (iIndex >= 0)
d821 3
a823 10
						iRed = _tstoi(strPart.Left(iIndex));
						strPart.Delete(0, iIndex + 1);
						iIndex = strPart.Find(_T(','));
						if (iIndex >= 0)
						{
							iGreen = _tstoi(strPart.Left(iIndex));
							strPart.Delete(0, iIndex + 1);
							iBlue = _tstoi(strPart);
							crNewColor = RGB(iRed, iGreen, iBlue);
						}
d825 2
d829 1
a829 1
			if (crNewColor != -1)
d831 8
a838 5
				if (iTagStart > 0)
					pRichEditCtrl->AppendText(strLine.Left(iTagStart), crColor);
				crColor = crNewColor;
				strLine.Delete(0, iTagEnd + 1);
			}
d850 1
a850 1
void CEmuleDlg::AddLogText(bool addtostatusbar,const CString &strTxt, bool bDebug)
d864 4
a867 2
	CString			strCleanLine = strLogLine;
	int				iTagStart = 0, iTagEnd;
d869 1
a869 1
	while (iTagStart != -1)
d871 4
a874 2
		iTagStart = strCleanLine.Find(_T("<COLOR="), iTagStart);
		if (iTagStart != -1)
d876 5
a880 2
			iTagEnd = strCleanLine.Find(_T('>'), iTagStart + 7);
			if (iTagEnd != -1)
d885 22
d909 1
a909 1
	if (addtostatusbar)
d912 1
a912 1
			m_ctlStatusBar.SetText(strCleanLine, SB_MESSAGETEXT, 0);
d916 1
a916 1
	CString			strLogLine2, strTime = currentTime.Format(_T("%c"));
d918 1
a918 2
	strTime += _T(": ");
	strLogLine2.Format(RGB_DARK_BLUE_TXT _T("%s") RGB_DEFAULT_TXT _T("%s\n"), strTime, strLogLine);
d923 1
a923 1
		FILE	*pLogFile = _tfsopen((bDebug) ? m_strDebugLogFilePath : m_strLogFilePath, _T("ab"), _SH_DENYWR);
d927 1
a927 1
			strTime += strCleanLine;
d939 1
a939 1
	if (bDebug)
d957 1
a957 1
		ShowNotifier(strCleanLine, TBN_LOG, false, g_App.m_pPrefs->GetUseLogNotifier());
d995 1
a995 3
		CString	strOut;

		strOut.Format( RGB_LOG_ERROR_TXT _T("%s: EXCEPTION! (%s) Report to ") CLIENT_NAME _T(" developers. Line %u in file %s"),
a996 1
		AddDebugLogLine(strOut);
d1064 1
a1064 1
				AddLogLine(false, IDS_DISCONNECTED);
d1356 1
a1356 1
						AddLogLine(true, IDS_SERVERADDED, pSrv->GetListName());
d1367 1
a1367 1
			AddLogLine(true, IDS_LINKNOTADDED);
d1377 1
a1377 1
		AddLogLine(true, _T("CLI: %s"), strCL);
d1685 1
a1685 1
	AddLogLine(true, IDS_CONNECTING);
d2446 1
a2446 1
					AddDebugLogLine(_T("Backup %s done"), strNewPath);
d2462 1
a2462 1
		AddDebugLogLine(RGB_LOG_ERROR_TXT _T("Error encountered during backup!"));
d2475 1
a2475 1
		AddLogLine(false, RGB_LOG_WARNING + GetResString(IDS_AUTOBACKUP_DISABLED));
@


1.367
log
@FakeCheck class destroying moved to the class which creates it; Removed unused checks around delete operations;
Changed new version check link to have better flexibility and ability to keep different services on different sites [Aw3/DonGato].
@
text
@d1468 1
a1468 1
	EMULE_CATCH2;
@


1.366
log
@Fixed restore CLI which couldn't restore minimized window (from the system taskbar);
Added message box with CLI help [DoubleT/Aw3];
Faster CLI parsing.
@
text
@d242 2
a243 4
	if (m_pstrNewLogTextLines)
		delete m_pstrNewLogTextLines;
	if (m_pstrNewDebugLogTextLines)
		delete m_pstrNewDebugLogTextLines;
d271 1
a271 1
	strTmp.Format( _T("http://emuleplus.info/get_version.php?version=%u&language=%u"),
a1588 2
	delete g_App.m_pFakeCheck;

@


1.365
log
@IRC: save state of the user list.
@
text
@d19 1
a19 1
#include "afxinet.h"
d642 1
a642 1
				if (g_App.m_pstrPendingLink)
d644 2
a645 1
					OnWMData(NULL,(LPARAM) &g_App.m_sendStruct);
d647 1
a1307 1

a1316 1

a1333 1

d1346 1
d1362 1
a1362 1
		if (strCL == _T("disconnect"))
d1373 1
a1373 1
		if (strCL == _T("resume"))
d1378 1
a1378 1
		if (strCL == _T("exit"))
d1383 1
a1383 1
		if (strCL == _T("reload"))
d1388 1
a1388 1
		if (strCL == _T("restore"))
d1393 1
a1393 1
		if (strCL == _T("preferences"))
d1398 1
a1398 1
		if ((strCL.Left(7) == _T("limits=")) && (strCL.GetLength() > 8))
a1408 6

			return true;
		}
		if ((strCL == _T("help")) || (strCL == _T("/?")))
		{
		//	Show usage
d1411 1
a1411 1
		if (strCL == _T("status"))
d1413 1
a1413 1
			CString	strBuffer = g_App.m_pPrefs->GetAppDir();
a1445 1
	//	TO DO: show "unknown command"
a1446 2
	return true;

d1706 8
a1713 3
	if (TrayIsVisible())
		TrayHide();
	ShowWindow(SW_SHOW);
@


1.364
log
@Fixed occasional wrong line break for long words in the notification window {muleteer};
Slightly more space for the text in the notification window.
@
text
@d1556 1
@


1.363
log
@Reduced H-file dependency.
@
text
@d64 1
a64 1
	ON_COMMAND(MP_EXIT, OnClose )
d384 1
a384 1
	m_wndTaskbarNotifier.SetTextRect(CRect(14,40,m_wndTaskbarNotifier.m_nBitmapWidth-14,m_wndTaskbarNotifier.m_nBitmapHeight-14));
d1787 1
a1787 1
				strTempMessage.Insert(iStrLineBreak, _T(' '));
d1796 1
a1796 1
		strFinalMessage.Trim();
@


1.362
log
@Fixed ANSI logs backup on first Unicode startup.
@
text
@d39 1
@


1.361
log
@removed statistic update function
@
text
@d153 1
a153 1
		m_strDebugLogFilePath += _T(".ansi");
d165 1
a165 1
		m_strLogFilePath += _T(".ansi");
@


1.360
log
@Formatting.
@
text
@d1227 1
a1227 1
		m_dlgStatistics.ShowStatistics();
a1719 5
void CEmuleDlg::ShowStatistics()
{
	m_dlgStatistics.ShowStatistics();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@


1.359
log
@changed the intialization of thread locale
@
text
@d1212 1
a1212 1
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+2);
d1215 1
a1215 1
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+1);
d1217 1
a1217 1
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+3);
d1219 1
a1219 1
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+4);
d1221 1
a1221 1
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+5);
d1223 1
a1223 1
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+6);
d1226 1
a1226 1
		m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+7);
@


1.358
log
@Proper share mode for open files (before other applications could write to a file while we were reading);
Moved saving of InfoView column splitter to transfer window.
@
text
@d268 1
a268 1
	::SetThreadLocale(g_App.m_pPrefs->GetLanguageID());
@


1.357
log
@Preparations to migrate from gui.dat configuration file to preferences.ini.
@
text
@d39 1
d894 1
a894 1
		FILE	*pLogFile = _tfopen((bDebug) ? m_strDebugLogFilePath : m_strLogFilePath, _T("ab"));
d1422 1
a1422 1
			FILE	*pOutput = _tfopen(strBuffer, _T("wb"));
a1564 1
	g_App.m_pPrefs->SetDetailColumnWidth(m_wndTransfer.GetDetailColumnWidth());
d2373 1
a2373 1
		FILE	*pLogFile = _tfopen(strBuffer, _T("wb"));
@


1.356
log
@correction after review
@
text
@d1555 1
d2137 1
a2137 1
	if ( g_App.m_app_state == g_App.APP_STATE_DONE )
d2141 2
a2142 2
	else if ( g_App.m_app_state   ==   g_App.APP_STATE_RUNNING)
   	{
d2146 1
a2146 1
   	}
d2150 1
a2150 1
   	return FALSE;
@


1.355
log
@Fix a little (catched) crash that could happen on application shutdown.
@
text
@d147 1
d150 3
a152 1
		CString strBackupFile = m_strDebugLogFilePath + _T(".ansi");
d157 1
d159 1
d162 3
a164 1
		CString strBackupFile = m_strLogFilePath + _T(".ansi");
d169 1
d900 1
a900 1
		//	Write the Unicode BOM at the begining if file was created
@


1.354
log
@added unicode support for log files (emule, debug, upload, download, status, backup)
@
text
@d2501 1
a2501 1
	switch (iMessage)
d2503 1
a2503 1
		case WM_LOG_REFRESH:
d2505 1
a2505 3
			const CString	*pstrNewLines = GetNewLogTextLines();

			if (pstrNewLines != NULL)
d2507 1
a2507 3
				OutputLogText(*pstrNewLines, m_wndServer.m_pctlLogBox);
				if (m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 0)
					m_wndServer.m_ctrlBoxSwitcher.SetItemState(0, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
d2509 9
a2517 1
				delete pstrNewLines;
d2519 1
a2519 8
			break;
		}

		case WM_DLOG_REFRESH:
		{
			const CString	*pstrNewLines = GetNewDebugLogTextLines();

			if (pstrNewLines != NULL)
d2521 1
a2521 3
				OutputLogText(*pstrNewLines, m_wndServer.m_pctlDebugBox);
				if (m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 2)
					m_wndServer.m_ctrlBoxSwitcher.SetItemState(2, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
d2523 9
a2531 1
				delete pstrNewLines;
d2533 1
a2533 7
			break;
		}
		case WM_ACTIVATEAPP:
		{
			BOOL bIsActivated = (BOOL)wParam;

			if (!bIsActivated && m_pdlgActive != NULL)
d2535 1
a2535 3
				NMHDR	hdr;

				m_ttip.Pop();	// Cancel the tooltip in eMuleDlg class
d2537 12
a2548 4
				hdr.hwndFrom = GetSafeHwnd();
				hdr.idFrom = GetDlgCtrlID();
				hdr.code = UDM_TOOLTIP_POP;
				::SendMessage(m_pdlgActive->GetSafeHwnd(), WM_NOTIFY, 0, (LPARAM)&hdr);
d2550 3
a2552 1
			break;
a2553 3
		default:
			bHandled = FALSE;
			break;
d2555 2
@


1.353
log
@unicode prepararions:
1) added the code for conversion
2) unicode support for ini files
3) unicode support for URL en(de)coding
4) statistic output in UTF8 format
@
text
@d39 1
d147 7
d155 7
d885 1
a885 1
		FILE	*LogFile = _tfopen((bDebug) ? m_strDebugLogFilePath : m_strLogFilePath, _T("a"));
d887 1
a887 1
		if (LogFile != NULL)
d890 8
a897 3
			strTime += _T('\n');
			_fputts(strTime, LogFile);
			fclose(LogFile);
d1413 1
a1413 1
			FILE	*pOutput = _tfopen(strBuffer, _T("w"));
d1417 4
d1433 1
a1433 1
				_fputts(_T("\n"), pOutput);
d1435 1
a1435 1
				_fputts(_T("\n"), pOutput);
d2364 1
a2364 1
		FILE	*pLogFile = _tfopen(strBuffer, _T("w+"));
d2368 6
a2373 3
 			_fputts(_T("Backed-up directory: "), pLogFile);
 			_fputts(strSearchPath, pLogFile);
 			fclose(pLogFile);
@


1.352
log
@Use AfxBeginThread function for thread creation to become CRT friendly.
Get rid off an unused parameter.
Suppressed level 4 warnings
@
text
@d1266 1
a1266 1
			CED2KLink	*pLink = CED2KLink::CreateLinkFromUrl(URLDecode(CString(reinterpret_cast<LPCTSTR>(pCLData->lpData), pCLData->cbData / sizeof(TCHAR))));
@


1.351
log
@Restore window to exact previous position by 'Bring to front on link click' (restore from iconic view was bringing window to the wrong state; BTW, this setting takes effect only when a link is passed in command-line) [Aw3];
Generate less code for some logging; Clean-up [Aw3].
@
text
@d240 1
a240 1
DWORD WINAPI CheckCurrentVersionAtInet(void *)
d344 1
a344 1
	m_ctlReBar.InsertBand(-1, &rbbi);
d595 1
d630 2
a631 2
				if(g_App.m_pPrefs->IsAutoCheckForNewVersion() &&
					(time(NULL) - g_App.m_pPrefs->GetAutoCheckLastTime()) > 7*24*60*60)
d633 1
a633 4
					DWORD dwThread = 0;
					HANDLE hThread = CreateThread(NULL, 0, CheckCurrentVersionAtInet, (void *)NULL, 0, &dwThread);
					if (hThread)
						VERIFY(CloseHandle(hThread));
d783 1
a783 1
			crNewColor = -1;
d1017 1
a1017 1
		ShowUserCount(0, 0);
d1050 1
a1050 1
void CEmuleDlg::ShowUserCount(uint32 users_toshow, uint32 files_toshow)
d1054 1
a1054 1
	if(g_App.m_app_state == g_App.APP_STATE_SHUTTINGDOWN)
d1057 4
a1060 3
	CString sBuffer;
	sBuffer.Format(_T("%u"),users_toshow);
	m_ctlStatusBar.SetText(sBuffer,SB_NUMUSERS,0);
d1246 2
d1452 2
d1460 2
d1780 2
d1831 1
a1831 1
			ShowUserCount(pCurServer->GetNumUsers(), pCurServer->GetFiles());
d2122 2
d2137 2
d2150 2
d2162 2
d2177 1
a2177 1
	if(!wParam)
d2213 2
d2233 2
@


1.350
log
@Fixed messed waiting for hash and hashing file statuses in GUI and WebServer {Fuxie - DK} [Aw3].
@
text
@d152 1
a152 1
	m_clientImgLists[CLIENT_IMGLST_PLAIN].Create(16, 16, g_App.m_iDfltImageListColorFlags | ILC_MASK, ELEMENT_COUNT(s_auClientIconResID), 0);
d154 1
a154 1
	FillImgLstWith16x16Icons(&m_clientImgLists[CLIENT_IMGLST_PLAIN], s_auClientIconResID, ELEMENT_COUNT(s_auClientIconResID));
d159 1
a159 1
	for (unsigned uiListIdx = 1; uiListIdx <= ELEMENT_COUNT(s_auPropIconResID); uiListIdx++)
d166 1
a166 1
		m_clientImgLists[uiListIdx].Create(16, 16, g_App.m_iDfltImageListColorFlags | ILC_MASK, ELEMENT_COUNT(s_auClientIconResID), 0);
d168 1
a168 1
		for (unsigned uiIdx = 0; uiIdx < ELEMENT_COUNT(s_auClientIconResID); uiIdx++)
d609 1
a609 1
				AddLogLine(false, GetResString(dwResStrId));
d1245 1
a1245 1
LRESULT CEmuleDlg::OnWMData(WPARAM wParam,LPARAM lParam)
d1257 1
a1257 1
				ShowWindow(SW_SHOWNORMAL);
d1302 1
a1302 1
						AddLogLine(true, GetResString(IDS_SERVERADDED), pSrv->GetListName());
@


1.349
log
@Don't backup corrupted (zero size) .part.met files;
Corrected backup overwrite message box confirmation -- introduced in revision 1.331 (v1.2).
@
text
@d67 1
d1455 9
@


1.348
log
@fix time disappearing at midnight
@
text
@d46 3
d2242 2
d2245 1
a2245 1
		BackupFromAppDir(_T("*.dat"), bAutomated);
d2247 1
a2247 1
		BackupFromAppDir(_T("*.met"), bAutomated);
d2249 1
a2249 1
		BackupFromAppDir(_T("*.ini"), bAutomated);
d2251 1
a2251 1
		BackupFromTempDir(_T("*.part.met"), bAutomated);
d2253 1
a2253 1
		BackupFromTempDir(_T("*.part.txtsrc"), bAutomated);
d2259 1
a2259 1
			BackupFromTempDir(_T("*.part"), bAutomated);
d2266 1
a2266 1
void CEmuleDlg::BackupFromAppDir(LPCTSTR pcExtensionToBack, bool bAutomated)
d2275 1
a2275 1
	BackupFiles(pcExtensionToBack, bAutomated, g_App.m_pPrefs->GetConfigDir(), strBuffer);
d2278 1
a2278 1
void CEmuleDlg::BackupFromTempDir(LPCTSTR pcExtensionToBack, bool bAutomated)
d2287 1
a2287 1
	BackupFiles(pcExtensionToBack, bAutomated, g_App.m_pPrefs->GetTempDir(), strBuffer);
d2307 1
a2307 1
		BackupFiles(pcExtensionToBack, bAutomated, strSearchPath, strBuffer);
d2324 1
a2324 1
void CEmuleDlg::BackupFiles(LPCTSTR pcExtensionToBack, bool bAutomated, const CString &strPath, const CString &strBackupPath)
d2328 1
a2328 2
	BOOL	bError = FALSE;
	BOOL	bOverWrite = TRUE;
d2345 6
a2350 2
			strNewPath = strBackupPath;
			strNewPath += fileData.cFileName;
d2352 1
a2352 3
			if (PathFileExists(strNewPath))
			{
				if (!bAutomated)
d2356 1
a2356 2
						GetResString(&strTmp, IDS_BACKUP_EXIST);
						strTmp += fileData.cFileName;
d2360 8
a2367 8
				else
					bOverWrite = TRUE;
			}
			if (bOverWrite)
			{
				strTmp = strDstPath;
				strTmp += fileData.cFileName;
				CopyFile(strTmp, strNewPath, FALSE);
a2368 2
			if (!bAutomated)
				AddDebugLogLine(_T("Backup %s done"), strNewPath);
d2373 1
a2373 1
					bError = TRUE;
d2378 1
a2378 2
	//	Close the search handle.
		FindClose(hSearch);
d2384 1
a2384 1
		if (!bAutomated)
d2439 1
a2439 1
BOOL CEmuleDlg::OnWndMsg(UINT iMessage,WPARAM wParam, LPARAM lParam, LRESULT *pResult)
@


1.347
log
@Reduced #include depedency.
@
text
@d860 1
a860 1
	CString			strLogLine2, strTime = currentTime.Format();
d916 1
a916 1
		CString			strTime = currentTime.Format();
@


1.346
log
@String tag IDS_BACKUP_ERROR2 renamed into IDS_ERROR.
@
text
@d28 1
a38 1
#include <comdef.h>
@


1.345
log
@Encryption preparations; Code clean-up and simplification.
@
text
@d2383 1
a2383 1
			MessageBox(GetResString(IDS_BACKUP_ERROR), GetResString(IDS_BACKUP_ERROR2), MB_OK);
@


1.344
log
@Corrected usage of "Set manually added servers to High Priority" when added through a link {gnwd}.
@
text
@d2105 2
a2106 2
	g_App.m_pServerConnect->ConnectToServer(*(CServer*)wParam);
#endif //OLD_SOCKETS_ENABLED
@


1.343
log
@Formatting.
@
text
@d1292 2
a1293 1
					pSrv->SetPreference(PR_HIGH);
@


1.342
log
@enlarge a little bit buffers for inet version check {Aw3}
@
text
@d255 1
a255 1
			char	pcBuf[0xC0];
d264 1
a264 1
					WCHAR	pwcBuf[0xC0];
d1759 1
a1759 1
LRESULT CEmuleDlg::OnTaskbarNotifierClicked(WPARAM wParam,LPARAM lParam)
d1763 2
a1764 2
	int msgType = TBN_NULL;
	msgType = m_wndTaskbarNotifier.GetMessageType();
d1772 1
a1773 4
			RestoreWindow();
			SetActiveDialog(&m_wndTransfer);
			SetFocus();
			break;
d1779 1
a1780 4
			RestoreWindow();
			SetActiveDialog(&m_wndServer);
			SetFocus();
			break;
@


1.341
log
@fix incomplete inet version check message
@
text
@d255 1
a255 1
			char	pcBuf[0x80];
d264 1
a264 1
					WCHAR	pwcBuf[0x80];
@


1.340
log
@avoid outputting log on shutdown
@
text
@d255 1
a255 1
			char	pcBuf[100];
d264 1
a264 1
					WCHAR	pwcBuf[100];
@


1.339
log
@Use general user agent for HTTP requests (to hide identity to avoid any kind of blocking or filtering);
Renamed APP_STATE_SHUTINGDOWN -> APP_STATE_SHUTTINGDOWN;
Changed macro declaration.
@
text
@d766 3
@


1.338
log
@UNICODE preparations
@
text
@d46 1
a46 1
const static UINT		UWM_ARE_YOU_EMULE = RegisterWindowMessage(_T(EMULE_GUID));
d247 1
a247 1
	HINTERNET	hOpen = ::InternetOpen(_T("eMule"), INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
d852 1
a852 1
		if (m_ctlStatusBar.m_hWnd && g_App.m_app_state != CEmuleApp::APP_STATE_SHUTINGDOWN)
d955 1
a955 1
	if(g_App.m_app_state == g_App.APP_STATE_SHUTINGDOWN)
d1049 1
a1049 1
	if(g_App.m_app_state == g_App.APP_STATE_SHUTINGDOWN)
d1458 1
a1458 1
// 	We should call this before changing the state to APP_STATE_SHUTINGDOWN because
d1466 1
a1466 1
	g_App.m_app_state = g_App.APP_STATE_SHUTINGDOWN;
d2092 1
a2092 1
		g_App.m_app_state = g_App.APP_STATE_SHUTINGDOWN;
d2403 1
a2403 1
	if (::IsWindow(GetSafeHwnd()) && g_App.m_app_state != CEmuleApp::APP_STATE_SHUTINGDOWN)
@


1.337
log
@fix UDM_TOOLTIP_POP notification to avoid assertions in IRC window (at least)
@
text
@d1242 1
a1242 1
	tagCOPYDATASTRUCT	*data = (tagCOPYDATASTRUCT*)lParam;
d1244 1
a1244 1
	if (data->dwData == OP_ED2KLINK)
d1258 3
a1260 2
			CED2KLink* pLink = CED2KLink::CreateLinkFromUrl(URLDecode(CString((char*)data->lpData, data->cbData)));
			_ASSERT( pLink != NULL );
d1265 2
a1266 1
					CED2KFileLink* pFileLink = pLink->GetFileLink();
d1273 2
a1274 2
					CED2KServerListLink* pListLink = pLink->GetServerListLink();
					CString strAddress = pListLink->GetAddress();
d1276 1
a1276 1
					if(strAddress.GetLength() != 0)
d1283 6
a1288 5
					CString defName;
					CED2KServerLink* pSrvLink = pLink->GetServerLink();
					CServer* pSrv = new CServer(pSrvLink->GetPort(),pSrvLink->GetIP());
					pSrvLink->GetDefaultName(defName);
					pSrv->SetListName(defName.GetBuffer());
d1291 1
a1291 1
					if (!g_App.m_pMDlg->m_wndServer.m_ctlServerList.AddServer(pSrv,true))
d1309 1
a1309 1
	else if (data->dwData==OP_CLCOMMAND)
d1312 1
a1312 1
		CString clcommand(reinterpret_cast<LPCTSTR>(data->lpData));
d1314 2
a1315 2
		clcommand.MakeLower();
		AddLogLine(true, _T("CLI: %s"), clcommand);
d1317 1
a1317 1
		if (clcommand == _T("connect"))
d1323 1
a1323 1
		if (clcommand == _T("disconnect"))
d1334 1
a1334 1
		if (clcommand == _T("resume"))
d1339 1
a1339 1
		if (clcommand == _T("exit"))
d1344 1
a1344 1
		if (clcommand == _T("reload"))
d1349 1
a1349 1
		if (clcommand == _T("restore"))
d1354 1
a1354 1
		if (clcommand == _T("preferences"))
d1359 1
a1359 1
		if ((clcommand.Left(7) == _T("limits=")) && (clcommand.GetLength() > 8))
d1361 1
a1361 1
			int		iPos = clcommand.Find(_T(':'), 7);
d1365 2
a1366 2
				if ((iPos + 1) < clcommand.GetLength())	//	':' isn't last char (download substring isn't empty)
					g_App.m_pPrefs->SetMaxDownloadWithCheck(String2FranctionalRate(clcommand.GetString() + iPos + 1));
d1369 1
a1369 1
				g_App.m_pPrefs->SetMaxUploadWithCheck(String2FranctionalRate(clcommand.GetString() + 7));
d1373 1
a1373 1
		if ((clcommand == _T("help")) || (clcommand == _T("/?")))
d1378 1
a1378 1
		if (clcommand == _T("status"))
d1916 3
a1918 4
					strRuntime.Format(_T("%u %s %02u:%02u"), uiDays,
														   GetResString((uiDays == 1) ? IDS_LONGDAY : IDS_LONGDAYS),
														   uiHours,
														   uiMinutes );
d1922 1
a1922 2
																					   GetResString(IDS_STATS_RUNTIME),
																					   strRuntime );
d1938 3
a1940 4
						strRuntime.Format(_T("%u %s %02u:%02u"), uiDays,
															   GetResString((uiDays == 1) ? IDS_LONGDAY : IDS_LONGDAYS),
															   uiHours,
															   uiMinutes );
@


1.336
log
@Fixed an issue with Scheduller code
@
text
@d329 2
a330 4
					 | /*RBS_AUTOSIZE |*/ RBS_VARHEIGHT | CCS_NODIVIDER | CCS_TOP,
					   CRect(0, 0, 0, 0),
					   this,
					   AFX_IDW_REBAR);
d577 1
a577 1
			   		AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_MAIN_SOCKETERROR), g_App.m_pPrefs->GetUDPPort());
d1419 1
a1419 1
	CKnownFile	   *pNewKnownFile = reinterpret_cast<CKnownFile*>(lParam);
d1423 1
a1423 1
		CPartFile	   *pPartFile = reinterpret_cast<CPartFile*>(wParam);
d1616 2
a1617 3
	{
		m_wndServer.m_ctlServerList.PostMessage(WM_COMMAND,MP_CONNECTTO,0L);
	}
a1618 2
	{
#ifdef OLD_SOCKETS_ENABLED
a1620 1
	}
d2311 1
a2311 1
	 	{
d2315 1
a2315 1
	 	}
d2449 1
a2449 1
			const CString	   *pstrNewLines = GetNewLogTextLines();
d2464 1
a2464 1
			const CString	   *pstrNewLines = GetNewDebugLogTextLines();
d2482 1
a2482 2
				HWND hActiveWnd = m_pdlgActive->GetSafeHwnd();
				NMHDR hdr;
d2484 1
a2484 1
				m_ttip.Pop();		// cancel the tooltip in eMuleDlg class
d2486 2
d2489 1
a2489 1
				::SendMessage(hActiveWnd, WM_NOTIFY, 0, (LPARAM)&hdr);
@


1.335
log
@Fixed localization for new eMule Plus version auto-check {purgossu}.
@
text
@d478 1
a478 1
			if (secs > g_App.m_pPrefs->GetSCHShift1())
d487 1
a487 1
			if (secs > g_App.m_pPrefs->GetSCHShift1() && secs < g_App.m_pPrefs->GetSCHShift2())
@


1.334
log
@Don't send any cookie while checking for a new version.
@
text
@d240 2
a1378 1
		//	TO DO: output to console
@


1.333
log
@Fixed version check; UNICODE preparation
@
text
@d245 1
a245 1
	HINTERNET	hOpen = ::InternetOpen(_T("eMule"), INTERNET_OPEN_TYPE_PRECONFIG , NULL, NULL, 0);
d249 1
a249 1
		HINTERNET	hURL = ::InternetOpenUrl(hOpen, strTmp, _T(""), 0, INTERNET_FLAG_NO_CACHE_WRITE, NULL);
d270 1
a270 1
						if (strTmp.Find(_T("http://emuleplus.info")) != -1)
@


1.332
log
@One more attempt to increase space for server users in the statusbar {Vladimir (SV)}.
@
text
@d240 1
a240 2
	CString strUrl;
	BOOL bNTBased = FALSE;
d242 2
a243 2
	strUrl.Format( _T("http://plus.go.dyndns.org/get_version.php?version=%i&language=%i"),
				   CURRENT_PLUS_VERSION, g_App.m_pPrefs->GetLanguageID() );
d245 16
a260 14
	bool bDone = false;
	HINTERNET hOpen = InternetOpen(_T("eMule"), INTERNET_OPEN_TYPE_PRECONFIG , NULL, NULL, 0);
	if(hOpen)
	{
		HINTERNET hURL = InternetOpenUrl(hOpen, strUrl, _T(""), NULL, INTERNET_FLAG_NO_CACHE_WRITE, NULL);
		if (hURL)
		{
			TCHAR pBuf[2000];
			DWORD dwSize;
			if(InternetReadFile(hURL, pBuf, 1000, &dwSize))
			{
				pBuf[dwSize] = 0;
			//	UTF8? Convert!
				if(pBuf[0] == (TCHAR)0xEF && pBuf[1] == (TCHAR)0xBB && pBuf[2] == (TCHAR)0xBF)
d262 3
a264 3
					WCHAR pNewBuf[2000];
					int iBytes;
					if(iBytes = MultiByteToWideChar(CP_UTF8, 0, pBuf, dwSize, pNewBuf, 1000))
d266 7
a272 12
						pNewBuf[iBytes] = 0; dwSize = iBytes;
						_tcscpy(pBuf, (TCHAR*)(_bstr_t(pNewBuf+1)));
					}
				}
			// 	Everything alright
				if(pBuf[0] == 'O' && pBuf[1] == 'K')
				{
					CString strOut(pBuf + 2);
					g_App.m_pMDlg->AddLogLine(true, RGB_LOG_NOTICE + strOut);
					if (strOut.Find(_T("http://emuleplus.info")) != -1)
					{
						g_App.m_pMDlg->ShowNotifier(strOut, TBN_LOG, false, true);
a273 2
					g_App.m_pPrefs->SetAutoCheckLastTime(time(NULL));
					bDone = true;
d276 1
d278 1
@


1.331
log
@UNICODE preparation (first shot)
@
text
@d1219 1
a1219 1
		0, 105, 22, 74, 70, 70, 258
d1228 1
a1228 1
		iWidths[SB_SERVER] = 190;
@


1.330
log
@Unicode corrections.
@
text
@d449 2
a450 2
	m_ttip.Create(this); 
	m_ttip.SetDelayTime(TTDT_AUTOPOP, 15000); 
d452 2
a453 2
	m_ttip.SendMessage(TTM_SETMAXTIPWIDTH, 0, SHRT_MAX); 
	m_ttip.SetBehaviour(PPTOOLTIP_MULTIPLE_SHOW); 
d455 1
a455 1
	m_ttip.AddTool(&m_ctlStatusBar, _T("")); 
d514 1
a514 1
            int dayOfWeek = curr_t.GetDayOfWeek();
d523 2
a524 2
           	{
               	g_App.AddDebugLogLine(_T("SCHEDULER: day excepted!"));
d656 1
a656 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
d859 1
a859 1
	
d897 1
a897 1
		
d968 1
a968 1
	
d1246 2
a1247 1
	tagCOPYDATASTRUCT* data = (tagCOPYDATASTRUCT*)lParam;
d1251 1
a1251 1
		if(g_App.m_pPrefs->IsBringToFront())
a1253 1
			{
a1254 1
			}
a1255 1
			{
a1256 1
			}
a1257 1
			{
a1258 1
			}
d1381 4
a1384 1
			CString	pString;
d1386 1
a1386 3
		//	TO DO: output to console
			pString.Format(_T("%sstatus.log"),g_App.m_pPrefs->GetAppDir());
			FILE* file = _tfopen(pString , _T("w"));
d1388 2
d1391 6
a1396 6
			if (g_App.m_pServerConnect->IsConnected())
				pString = GetResString(IDS_CONNECTED);
			else if (g_App.m_pServerConnect->IsConnecting())
				pString = GetResString(IDS_CONNECTING);
			else
				pString = GetResString(IDS_DISCONNECTED);
d1398 1
a1398 1
			pString.Empty();
d1401 5
a1405 2
			pString += _T('\n');
			pString.AppendFormat(GetResString(IDS_UPDOWN), static_cast<double>(g_App.m_pUploadQueue->GetDataRate())/1024.0, static_cast<double>(g_App.m_pDownloadQueue->GetDataRate())/1024.0);
d1407 2
a1408 3
			_ftprintf(file, _T("%s\n%s"), pString, g_App.m_pDownloadList->GetPartFilesStatusString());

			fclose(file);
d1872 2
a1873 2
BOOL CEmuleDlg::PreTranslateMessage(MSG* pMsg) 
{ 
d1878 2
a1879 2
} 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
d1881 1
a1881 1
{ 
d1896 1
a1896 1
				
d1922 1
a1922 1
					strRuntime.Format(_T("%u %s %02u:%02u"), uiDays, 
d2014 2
a2015 2
} 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
d2248 1
a2248 1
void CEmuleDlg::RunBackupNow(bool automated)
d2251 1
a2251 1
		BackupFromAppDir(_T("*.dat"), automated);
d2253 1
a2253 1
		BackupFromAppDir(_T("*.met"), automated);
d2255 1
a2255 1
		BackupFromAppDir(_T("*.ini"), automated);
d2257 1
a2257 1
		BackupFromTempDir(_T("*.part.met"), automated);
d2259 1
a2259 1
		BackupFromTempDir(_T("*.part.txtsrc"), automated);
d2262 2
a2263 2
		if (automated ||
			::MessageBox(m_dlgPreferences.m_hWnd, GetResString(IDS_BACKUP_LONGTIME), GetResString(IDS_BACKUP_SURE), MB_ICONQUESTION|MB_YESNO) == IDYES)
d2265 1
a2265 1
			BackupFromTempDir("*.part", automated);
d2268 1
a2268 1
	if (!automated)
d2272 1
a2272 1
void CEmuleDlg::BackupFromAppDir(LPCSTR extensionToBack,bool automated)
d2281 1
a2281 1
	BackupFiles(extensionToBack, automated, g_App.m_pPrefs->GetConfigDir(), strBuffer);
d2284 1
a2284 1
void CEmuleDlg::BackupFromTempDir(LPCSTR extensionToBack, bool automated)
d2286 1
a2286 1
	CString	strBuffer;
d2288 1
a2288 1
	strBuffer.Format(_T("%s\\Temp\\"), g_App.m_pPrefs->GetBackupDir());
d2293 1
a2293 1
	BackupFiles(extensionToBack, automated, g_App.m_pPrefs->GetTempDir(), strBuffer);
d2296 1
a2296 3
	int iTempDir = 1;

	CStringList	tmpTempDirList;	//	list elements will be deleted in list destructor
d2301 4
a2304 1
	for (POSITION pos = tmpTempDirList.GetHeadPosition(); pos != NULL; )
d2306 1
a2306 1
		CString strSearchPath(tmpTempDirList.GetNext(pos));
d2308 1
a2308 1
		strBuffer.Format(_T("%s\\Temp[%i]\\"),g_App.m_pPrefs->GetBackupDir(),iTempDir);
d2313 1
a2313 1
		BackupFiles(extensionToBack, automated, strSearchPath, strBuffer);
d2315 3
a2317 1
		char tempLog[1060];
d2319 1
a2319 4
		strBuffer += _T("backup.log");
		sprintf(tempLog, "Backed-up directory: %s",strSearchPath);
		FILE* LogFile = _tfopen(strBuffer, _T("w+"));
		if (LogFile != NULL)
d2321 3
a2323 2
 			fwrite(tempLog, sizeof(char), strlen(tempLog), LogFile);
 			fclose(LogFile);
d2326 1
a2326 1
		iTempDir++;
d2330 1
a2330 1
void CEmuleDlg::BackupFiles(LPCSTR extensionToBack, bool automated, const CString &strPath, const CString &strBackupPath)
d2332 4
a2335 8
	WIN32_FIND_DATA fileData;
	HANDLE hSearch;
	BOOL fFinished = FALSE;
	BOOL finderror = FALSE;
	BOOL error = FALSE;
	BOOL overWrite = TRUE;
	char buffer[200];
	char szNewPath[MAX_PATH];
d2344 2
a2345 4
	strTmp += extensionToBack;
	hSearch = FindFirstFile(strTmp, &fileData);

	if (hSearch == INVALID_HANDLE_VALUE)
d2347 1
a2347 2
		finderror = TRUE;
	}
d2349 5
a2353 5
//	Copy each file to the backup directory
	while (!fFinished && !finderror)
	{
		lstrcpy(szNewPath, strBackupPath);
		lstrcat(szNewPath,fileData.cFileName);
d2355 1
a2355 3
		if (PathFileExists(szNewPath))
		{
			if (!automated)
d2357 1
a2357 1
				if (!g_App.m_pPrefs->GetBackupOverwrite())
d2359 6
a2364 5
					sprintf(buffer,GetResString(IDS_BACKUP_EXIST),fileData.cFileName);
					if (MessageBox(buffer,GetResString(IDS_BACKUP_OVER),MB_ICONQUESTION|MB_YESNO)== IDYES)
						overWrite = TRUE;
					else
						overWrite = FALSE;
d2366 2
d2369 1
a2369 1
			else
d2371 3
a2373 1
				overWrite = TRUE;
d2375 2
a2376 9
		}
		if (overWrite)
		{
			strTmp = strDstPath;
			strTmp += fileData.cFileName;
			CopyFile(strTmp, szNewPath, FALSE);
		}
		if (!automated)
			AddDebugLogLine(_T("Backup %s done"), szNewPath);
d2378 1
a2378 3
		if (!FindNextFile(hSearch, &fileData))
		{
			if (GetLastError() == ERROR_NO_MORE_FILES)
d2380 4
a2383 5
				fFinished = TRUE;
			}
			else
			{
				error = TRUE;
d2386 2
a2387 1

a2388 2
//	Close the search handle.
	FindClose(hSearch);
d2390 1
a2390 1
	if (error)
d2393 1
a2393 1
		if(!automated)
a2396 1

a2417 1
		{
a2418 1
		}
d2488 1
a2488 1
			
d2496 1
a2496 1
				hdr.code     = UDM_TOOLTIP_POP; 
@


1.329
log
@Slightly increased space for server users in the statusbar {Vladimir (SV)}.
@
text
@d1318 2
a1319 2
		CString clcommand;
		clcommand= (char*)data->lpData;
d1321 1
a1321 1
		AddLogLine(true, _T("CLI: %s"),clcommand);
d1323 1
a1323 1
		if (clcommand=="connect")
d1329 1
a1329 1
		if (clcommand=="disconnect")
d1340 1
a1340 1
		if (clcommand=="resume")
d1345 1
a1345 1
		if (clcommand=="exit")
d1350 1
a1350 1
		if (clcommand=="reload")
d1355 1
a1355 1
		if (clcommand=="restore")
d1360 1
a1360 1
		if (clcommand=="preferences")
d1365 1
a1365 1
		if ((clcommand.Left(7) == "limits=") && (clcommand.GetLength() > 8))
d1367 1
a1367 1
			int		iPos = clcommand.Find(':', 7);
d1379 1
a1379 2

		if (clcommand == "help" || clcommand == "/?")
d1384 1
a1384 2

		if (clcommand == "status")
@


1.328
log
@Rolled back last changes in ShowSessionTime() as non-effective.
@
text
@d1219 1
a1219 1
		0, 105, 22, 72, 70, 70, 260
@


1.327
log
@UNICODE preparation (first shot)
@
text
@d1032 1
a1032 1
	CTimeSpan	timeUpTime(static_cast<__time64_t>(dwRunTimeSecs));
d1034 5
a1038 1
	unsigned	uiDays = timeUpTime.GetDays();
d1041 1
a1041 1
		strBuffer = timeUpTime.Format(_T("%H:%M:%S"));
d1043 2
a1044 3
		strBuffer = timeUpTime.Format( _T("%D ")
						+ GetResString((uiDays == 1) ? IDS_LONGDAY : IDS_LONGDAYS)
						+ _T(" %H:%M") );
@


1.326
log
@A little bit faster processing of log output.
@
text
@d934 1
a934 1
	if(g_App.m_pPrefs->GetBugReport())
d936 1
a936 1
		CString sOut;
d938 3
a940 3
		sOut.Format(RGB_LOG_ERROR_TXT _T("%s: EXCEPTION! (%s) Report to " CLIENT_NAME " developers. Line %u in file %s"),
			strFunctionName, pcMsg, dwLine, sFile);
		AddDebugLogLine(sOut);
d981 1
a981 1
		tbi.pszText = (LPSTR)strBuff.GetString();
d1013 1
a1013 1
		tbi.pszText = (LPSTR)strBuff.GetString();
d1032 1
a1032 1
	CTimeSpan	runTime(static_cast<__time64_t>(dwRunTimeSecs));
d1034 1
a1034 5
	unsigned	uiDays, uiHours, uiMinutes;

	uiHours = static_cast<unsigned>(runTime.GetHours());
	uiMinutes = static_cast<unsigned>(runTime.GetMinutes());
	uiDays = static_cast<unsigned>(runTime.GetDays());
d1037 1
a1037 3
	{
		strBuffer.Format("%02u:%02u:%02u", uiHours, uiMinutes, runTime.GetSeconds());
	}
d1039 3
a1041 4
	{
		strBuffer.Format( "%2u %s %02u:%02u", uiDays,
			GetResString((uiDays == 1) ? IDS_LONGDAY : IDS_LONGDAYS), uiHours, uiMinutes );
	}
d1741 1
a1741 1
				strTempMessage.Insert(iStrLineBreak, " ");
@


1.325
log
@Renaming in comments.
@
text
@d778 1
a778 1
		if (iTagStart > -1)
d780 1
a780 1
		if (iTagEnd > -1)
d791 1
a791 1
					if (iIndex > -1)
d796 1
a796 1
						if (iIndex > -1)
@


1.324
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d178 1
a178 1
//	m_pEngineData = new CEngineData(*g_eMuleApp.m_pEngine);
a235 70
/*
DWORD WINAPI CheckCurrentVersionAtInet(void *)
{
	EMULE_TRY

	CString strUrl;
	BOOL bNTBased = FALSE;
	WORD wWinVer = DetectWinVersion(bNTBased);
	strUrl.Format(
		_T("http://emuleplus.servehttp.com/get_version.php?version=%i&language=%i&os=%i&nt=%i&webserver=%i&lancast=%i&mobilemule=%i&cpu=%i"),
		CURRENT_PLUS_VERSION,
		g_eMuleApp.m_pGlobPrefs->GetLanguageID(),
		wWinVer, bNTBased,
		g_eMuleApp.m_pGlobPrefs->GetWSIsEnabled(),
		g_eMuleApp.m_pGlobPrefs->GetLancastEnabled(),
		g_eMuleApp.m_pGlobPrefs->IsMMServerEnabled(),
		(int)get_cpu_type());

	bool bDone = false;
	HINTERNET hOpen = InternetOpen(_T("eMule"), INTERNET_OPEN_TYPE_PRECONFIG , NULL, NULL, 0);
	if(hOpen)
	{
		HINTERNET hURL = InternetOpenUrl(hOpen, strUrl, _T(""), NULL, INTERNET_FLAG_NO_CACHE_WRITE, NULL);
		if (hURL)
		{
			TCHAR pBuf[2000];
			DWORD dwSize;
			if(InternetReadFile(hURL, pBuf, 1000, &dwSize))
			{
				pBuf[dwSize] = 0;
				// utf8? convert!
				if(pBuf[0] == (TCHAR)0xEF && pBuf[1] == (TCHAR)0xBB && pBuf[2] == (TCHAR)0xBF)
				{
					WCHAR pNewBuf[2000];
					int iBytes;
					if(iBytes = MultiByteToWideChar(CP_UTF8, 0, pBuf, dwSize, pNewBuf, 1000))
					{
						pNewBuf[iBytes] = 0; dwSize = iBytes;
						_tcscpy(pBuf, (TCHAR*)(_bstr_t(pNewBuf+1)));
					}
				}
				if(pBuf[0] == 'O' && pBuf[1] == 'K') // everything allright
				{
					CString strOut(pBuf + 2);
					g_eMuleApp.m_pdlgEmule->AddLogLine(true, RGB_LOG_NOTICE + strOut);
					g_eMuleApp.m_pdlgEmule->AddDebugLogLine(
						RGB_LOG_NOTICE + _T("Anonymous statistical data sent to eMule Plus home site: Version=%i Language=%i OS=%i NT=%i Webserver=%i Lancast=%i MobileMule=%i CPU=%i"),
						CURRENT_PLUS_VERSION,
						g_eMuleApp.m_pGlobPrefs->GetLanguageID(),
						wWinVer, bNTBased,
						g_eMuleApp.m_pGlobPrefs->GetWSIsEnabled(),
						g_eMuleApp.m_pGlobPrefs->GetLancastEnabled(),
						g_eMuleApp.m_pGlobPrefs->IsMMServerEnabled(),
						(int)get_cpu_type());
					g_eMuleApp.m_pGlobPrefs->SetAutoCheckLastTime(time(NULL));
					bDone = true;
				}
			}
		}
	}
//	if(!bDone)
//		maybe add log line "couldn't check latest version"?


	EMULE_CATCH2

	return 0;
}
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
d2208 1
a2208 1
		if(pTask->ProcessForUI(*g_eMuleApp.m_pEngine))
@


1.323
log
@renamed 3 variables
@
text
@d141 2
a142 2
	m_strDebugLogFilePath.Format(_T("%sdebug.log"), g_App.g_pPrefs->GetAppDir());
	m_strLogFilePath.Format(_T("%seMule.log"), g_App.g_pPrefs->GetAppDir());
d314 1
a314 1
				   CURRENT_PLUS_VERSION, g_App.g_pPrefs->GetLanguageID() );
d348 1
a348 1
					g_App.g_pPrefs->SetAutoCheckLastTime(time(NULL));
d381 1
a381 1
	m_fontDefault.CreatePointFont(g_App.g_pPrefs->GetFontSize(),g_App.g_pPrefs->GetUsedFont());
d386 1
a386 1
	m_ctlToolBar.ShowSpeedMeter(g_App.g_pPrefs->GetShowToolbarSpeedMeter());
d388 1
a388 1
	uint32	dwMaxRange = g_App.g_pPrefs->GetMaxGraphDownloadRate();
d390 2
a391 2
	if (g_App.g_pPrefs->GetMaxGraphUploadRate() > dwMaxRange)
		dwMaxRange = g_App.g_pPrefs->GetMaxGraphUploadRate();
d427 1
a427 1
	m_wndTaskbarNotifier.SetTextFont(_T("Arial"),g_App.g_pPrefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE);
d438 1
a438 1
	m_dlgPreferences.SetPrefs(g_App.g_pPrefs);
d501 1
a501 1
	TraySetMinimizeToTray(g_App.g_pPrefs->GetMinTrayPTR());
d510 1
a510 1
	g_App.g_pPrefs->SetSmartIdState(1);
d514 1
a514 1
	wp=g_App.g_pPrefs->GetEmuleWindowPlacement();
d521 1
a521 1
	m_ttip.SetDelayTime(TTDT_INITIAL, g_App.g_pPrefs->GetToolTipDelay()*1000);
d532 1
a532 1
	if (g_App.g_pPrefs->UseSplashScreen() && !g_App.g_pPrefs->GetStartMinimized())
d542 1
a542 1
	if (g_App.g_pPrefs->IsSCHEnabled())
d548 1
a548 1
		if (g_App.g_pPrefs->GetSCHShift1() > g_App.g_pPrefs->GetSCHShift2())
d550 1
a550 1
			if (secs > g_App.g_pPrefs->GetSCHShift1())
d552 1
a552 1
			else if (secs < g_App.g_pPrefs->GetSCHShift2())
d559 1
a559 1
			if (secs > g_App.g_pPrefs->GetSCHShift1() && secs < g_App.g_pPrefs->GetSCHShift2())
d569 4
a572 4
			g_App.g_pPrefs->SetMaxUpload(g_App.g_pPrefs->GetSCHShift1Upload());
			g_App.g_pPrefs->SetMaxDownload(g_App.g_pPrefs->GetSCHShift1Download());
			g_App.g_pPrefs->SetMaxConnections(g_App.g_pPrefs->GetSCHShift1conn());
			g_App.g_pPrefs->SetMaxDownloadConperFive(g_App.g_pPrefs->GetSCHShift15sec());
d576 4
a579 4
								static_cast<double>(g_App.g_pPrefs->GetSCHShift1Upload()) / 10.0,
								static_cast<double>(g_App.g_pPrefs->GetSCHShift1Download()) / 10.0,
								g_App.g_pPrefs->GetSCHShift1conn(),
								g_App.g_pPrefs->GetSCHShift15sec() );
d586 7
a592 7
			if ((dayOfWeek==2 && g_App.g_pPrefs->IsSCHExceptMon())
				|| (dayOfWeek==3 && g_App.g_pPrefs->IsSCHExceptTue())
				|| (dayOfWeek==4 && g_App.g_pPrefs->IsSCHExceptWed())
				|| (dayOfWeek==5 && g_App.g_pPrefs->IsSCHExceptThu())
				|| (dayOfWeek==6 && g_App.g_pPrefs->IsSCHExceptFri())
				|| (dayOfWeek==7 && g_App.g_pPrefs->IsSCHExceptSat())
				|| (dayOfWeek==1 && g_App.g_pPrefs->IsSCHExceptSun()))
d600 4
a603 4
				g_App.g_pPrefs->SetMaxUpload(g_App.g_pPrefs->GetSCHShift2Upload());
				g_App.g_pPrefs->SetMaxDownload(g_App.g_pPrefs->GetSCHShift2Download());
				g_App.g_pPrefs->SetMaxConnections(g_App.g_pPrefs->GetSCHShift2conn());
				g_App.g_pPrefs->SetMaxDownloadConperFive(g_App.g_pPrefs->GetSCHShift25sec());
d607 4
a610 4
									static_cast<double>(g_App.g_pPrefs->GetSCHShift2Upload()) / 10.0,
									static_cast<double>(g_App.g_pPrefs->GetSCHShift2Download()) / 10.0,
									g_App.g_pPrefs->GetSCHShift2conn(),
									g_App.g_pPrefs->GetSCHShift25sec() );
d649 1
a649 1
					AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_MAIN_SOCKETERROR), g_App.g_pPrefs->GetPort());
d651 1
a651 1
			   		AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_MAIN_SOCKETERROR), g_App.g_pPrefs->GetUDPPort());
d655 1
a655 1
				AddLogLine(false, _T("%s: %s"), GetResString(IDS_INFLST_USER_USERHASH), HashToString(g_App.g_pPrefs->GetUserHash()));
d693 1
a693 1
				if (g_App.g_pPrefs->DoAutoConnect() && !g_App.g_pPrefs->AutoServerlist())
d699 2
a700 2
				if(g_App.g_pPrefs->IsAutoCheckForNewVersion() &&
					(time(NULL) - g_App.g_pPrefs->GetAutoCheckLastTime()) > 7*24*60*60)
d741 1
a741 1
			if(g_App.g_pPrefs->GetCloseToTray())
d771 1
a771 1
		if (g_App.g_pPrefs->GetStartMinimized())
d937 1
a937 1
	if (g_App.g_pPrefs->LogToFile())
d968 1
a968 1
		ShowNotifier(strCleanLine, TBN_LOG, false, g_App.g_pPrefs->GetUseLogNotifier());
d1004 1
a1004 1
	if(g_App.g_pPrefs->GetBugReport())
d1161 1
a1161 1
	if (g_App.g_pPrefs->ShowOverhead())
d1175 1
a1175 1
	if(g_App.g_pPrefs->GetShowToolbarSpeedMeter())
d1194 1
a1194 1
		int DownRateProcent = (int)ceil(lastdownrate_kB * 1000 / g_App.g_pPrefs->GetMaxGraphDownloadRate());
d1202 1
a1202 1
	if (!TrayIsVisible() && g_App.g_pPrefs->ShowRatesOnTitle())
d1217 1
a1217 1
	if (*g_App.g_pPrefs->GetMinTrayPTR())
d1298 1
a1298 1
	if (g_App.g_pPrefs->ShowOverhead())
d1324 1
a1324 1
		if(g_App.g_pPrefs->IsBringToFront())
d1436 1
a1436 1
			g_App.g_pPrefs->Save();
d1446 1
a1446 1
					g_App.g_pPrefs->SetMaxDownloadWithCheck(String2FranctionalRate(clcommand.GetString() + iPos + 1));
d1449 1
a1449 1
				g_App.g_pPrefs->SetMaxUploadWithCheck(String2FranctionalRate(clcommand.GetString() + 7));
d1465 1
a1465 1
			pString.Format(_T("%sstatus.log"),g_App.g_pPrefs->GetAppDir());
d1530 1
a1530 1
		g_App.g_pPrefs->IsConfirmExitEnabled() &&
d1550 1
a1550 1
	g_App.g_pPrefs->SetWindowLayout(wp);
d1585 4
a1588 4
	g_App.g_pPrefs->Add2TotalDownloaded(g_App.stat_sessionReceivedBytes);
	g_App.g_pPrefs->Add2TotalUploaded(g_App.stat_sessionSentBytes);
	g_App.g_pPrefs->SetDetailColumnWidth(m_wndTransfer.GetDetailColumnWidth());
	g_App.g_pPrefs->Save();
d1593 1
a1593 1
	if (g_App.g_pPrefs->AutoTakeED2KLinks())
d1626 1
a1626 1
	if (g_App.g_pPrefs->IsAutoBackup())
d1716 1
a1716 1
		if( !g_App.g_pPrefs->IsConfirmDisconnectEnabled() ||
d1829 1
a1829 1
		m_wndTaskbarNotifier.Show(strFinalMessage, iMsgType, 500, g_App.g_pPrefs->NotificationDisplayTime());
d1831 2
a1832 2
		if (g_App.g_pPrefs->GetUseSoundInNotifier() && !bForceSoundOFF)
			PlaySound(g_App.g_pPrefs->GetNotifierWavSoundPath(), NULL, SND_FILENAME | SND_NOSTOP | SND_NOWAIT | SND_ASYNC);
d1950 1
a1950 1
	if (g_App.g_pPrefs->GetToolTipDelay() != 0)
d2057 1
a2057 1
								CastItoXBytes(g_App.stat_sessionSentBytes + g_App.g_pPrefs->GetTotalUploaded()) );
d2070 1
a2070 1
								CastItoXBytes( g_App.stat_sessionReceivedBytes+g_App.g_pPrefs->GetTotalDownloaded()) );
d2152 2
a2153 2
			g_App.g_pPrefs->SetMaxUpload(10);
			g_App.g_pPrefs->SetMaxDownload(10);
d2156 2
a2157 2
			g_App.g_pPrefs->SetMaxUpload(g_App.g_pPrefs->GetMaxGraphUploadRate());
			g_App.g_pPrefs->SetMaxDownload(g_App.g_pPrefs->GetMaxGraphDownloadRate());
d2315 1
a2315 1
	int DownRateProcent = (int)ceil(lastdownrate / 1.024 / g_App.g_pPrefs->GetMaxGraphDownloadRate());
d2326 1
a2326 1
	if (g_App.g_pPrefs->GetBackupDatFiles())
d2328 1
a2328 1
	if (g_App.g_pPrefs->GetBackupMetFiles())
d2330 1
a2330 1
	if (g_App.g_pPrefs->GetBackupIniFiles())
d2332 1
a2332 1
	if (g_App.g_pPrefs->GetBackupPartMetFiles())
d2334 1
a2334 1
	if (g_App.g_pPrefs->GetBackupPartTxtsrcFiles())
d2336 1
a2336 1
	if (g_App.g_pPrefs->GetBackupPartFiles())
d2350 1
a2350 1
	CString	strBuffer = g_App.g_pPrefs->GetBackupDir();
d2357 1
a2357 1
	BackupFiles(extensionToBack, automated, g_App.g_pPrefs->GetConfigDir(), strBuffer);
d2364 1
a2364 1
	strBuffer.Format(_T("%s\\Temp\\"), g_App.g_pPrefs->GetBackupDir());
d2369 1
a2369 1
	BackupFiles(extensionToBack, automated, g_App.g_pPrefs->GetTempDir(), strBuffer);
d2377 1
a2377 1
	g_App.g_pPrefs->TempDirListCopy(&tmpTempDirList);
d2383 1
a2383 1
		strBuffer.Format(_T("%s\\Temp[%i]\\"),g_App.g_pPrefs->GetBackupDir(),iTempDir);
d2441 1
a2441 1
				if (!g_App.g_pPrefs->GetBackupOverwrite())
d2491 1
a2491 1
	if (g_App.g_pPrefs->IsAutoBackup() || g_App.g_pPrefs->IsScheduledBackup())
d2493 2
a2494 2
		g_App.g_pPrefs->SetScheduledBackup(false);
		g_App.g_pPrefs->SetAutoBackup(false);
@


1.322
log
@Improved string processing.
@
text
@d122 1
a122 1
	g_eMuleApp.m_app_state = g_eMuleApp.APP_STATE_RUNNING;
d141 2
a142 2
	m_strDebugLogFilePath.Format(_T("%sdebug.log"), g_eMuleApp.m_pGlobPrefs->GetAppDir());
	m_strLogFilePath.Format(_T("%seMule.log"), g_eMuleApp.m_pGlobPrefs->GetAppDir());
d148 1
a148 1
	m_clientImgLists[CLIENT_IMGLST_PLAIN].Create(16, 16, g_eMuleApp.m_iDfltImageListColorFlags | ILC_MASK, ELEMENT_COUNT(s_auClientIconResID), 0);
d153 1
a153 1
	m_tmpImageList.Create(16, 16, g_eMuleApp.m_iDfltImageListColorFlags | ILC_MASK, 1, 0);
d162 1
a162 1
		m_clientImgLists[uiListIdx].Create(16, 16, g_eMuleApp.m_iDfltImageListColorFlags | ILC_MASK, ELEMENT_COUNT(s_auClientIconResID), 0);
d314 1
a314 1
				   CURRENT_PLUS_VERSION, g_eMuleApp.m_pGlobPrefs->GetLanguageID() );
d343 1
a343 1
					g_eMuleApp.m_pdlgEmule->AddLogLine(true, RGB_LOG_NOTICE + strOut);
d346 1
a346 1
						g_eMuleApp.m_pdlgEmule->ShowNotifier(strOut, TBN_LOG, false, true);
d348 1
a348 1
					g_eMuleApp.m_pGlobPrefs->SetAutoCheckLastTime(time(NULL));
d381 1
a381 1
	m_fontDefault.CreatePointFont(g_eMuleApp.m_pGlobPrefs->GetFontSize(),g_eMuleApp.m_pGlobPrefs->GetUsedFont());
d386 1
a386 1
	m_ctlToolBar.ShowSpeedMeter(g_eMuleApp.m_pGlobPrefs->GetShowToolbarSpeedMeter());
d388 1
a388 1
	uint32	dwMaxRange = g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate();
d390 2
a391 2
	if (g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate() > dwMaxRange)
		dwMaxRange = g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate();
d427 1
a427 1
	m_wndTaskbarNotifier.SetTextFont(_T("Arial"),g_eMuleApp.m_pGlobPrefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE);
d438 1
a438 1
	m_dlgPreferences.SetPrefs(g_eMuleApp.m_pGlobPrefs);
d501 1
a501 1
	TraySetMinimizeToTray(g_eMuleApp.m_pGlobPrefs->GetMinTrayPTR());
d510 1
a510 1
	g_eMuleApp.m_pGlobPrefs->SetSmartIdState(1);
d514 1
a514 1
	wp=g_eMuleApp.m_pGlobPrefs->GetEmuleWindowPlacement();
d521 1
a521 1
	m_ttip.SetDelayTime(TTDT_INITIAL, g_eMuleApp.m_pGlobPrefs->GetToolTipDelay()*1000);
d528 1
a528 1
	g_eMuleApp.m_pMMServer->Init();
d532 1
a532 1
	if (g_eMuleApp.m_pGlobPrefs->UseSplashScreen() && !g_eMuleApp.m_pGlobPrefs->GetStartMinimized())
d542 1
a542 1
	if (g_eMuleApp.m_pGlobPrefs->IsSCHEnabled())
d548 1
a548 1
		if (g_eMuleApp.m_pGlobPrefs->GetSCHShift1() > g_eMuleApp.m_pGlobPrefs->GetSCHShift2())
d550 1
a550 1
			if (secs > g_eMuleApp.m_pGlobPrefs->GetSCHShift1())
d552 1
a552 1
			else if (secs < g_eMuleApp.m_pGlobPrefs->GetSCHShift2())
d559 1
a559 1
			if (secs > g_eMuleApp.m_pGlobPrefs->GetSCHShift1() && secs < g_eMuleApp.m_pGlobPrefs->GetSCHShift2())
d568 5
a572 5
			g_eMuleApp.m_pUploadQueue->SCHShift1UploadCheck();
			g_eMuleApp.m_pGlobPrefs->SetMaxUpload(g_eMuleApp.m_pGlobPrefs->GetSCHShift1Upload());
			g_eMuleApp.m_pGlobPrefs->SetMaxDownload(g_eMuleApp.m_pGlobPrefs->GetSCHShift1Download());
			g_eMuleApp.m_pGlobPrefs->SetMaxConnections(g_eMuleApp.m_pGlobPrefs->GetSCHShift1conn());
			g_eMuleApp.m_pGlobPrefs->SetMaxDownloadConperFive(g_eMuleApp.m_pGlobPrefs->GetSCHShift15sec());
d576 5
a580 5
								static_cast<double>(g_eMuleApp.m_pGlobPrefs->GetSCHShift1Upload()) / 10.0,
								static_cast<double>(g_eMuleApp.m_pGlobPrefs->GetSCHShift1Download()) / 10.0,
								g_eMuleApp.m_pGlobPrefs->GetSCHShift1conn(),
								g_eMuleApp.m_pGlobPrefs->GetSCHShift15sec() );
			g_eMuleApp.AddDebugLogLine(MessageText);
d586 7
a592 7
			if ((dayOfWeek==2 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptMon())
				|| (dayOfWeek==3 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptTue())
				|| (dayOfWeek==4 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptWed())
				|| (dayOfWeek==5 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptThu())
				|| (dayOfWeek==6 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptFri())
				|| (dayOfWeek==7 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptSat())
				|| (dayOfWeek==1 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptSun()))
d594 1
a594 1
               	g_eMuleApp.AddDebugLogLine(_T("SCHEDULER: day excepted!"));
d599 5
a603 5
				g_eMuleApp.m_pUploadQueue->SCHShift2UploadCheck();
				g_eMuleApp.m_pGlobPrefs->SetMaxUpload(g_eMuleApp.m_pGlobPrefs->GetSCHShift2Upload());
				g_eMuleApp.m_pGlobPrefs->SetMaxDownload(g_eMuleApp.m_pGlobPrefs->GetSCHShift2Download());
				g_eMuleApp.m_pGlobPrefs->SetMaxConnections(g_eMuleApp.m_pGlobPrefs->GetSCHShift2conn());
				g_eMuleApp.m_pGlobPrefs->SetMaxDownloadConperFive(g_eMuleApp.m_pGlobPrefs->GetSCHShift25sec());
d607 5
a611 5
									static_cast<double>(g_eMuleApp.m_pGlobPrefs->GetSCHShift2Upload()) / 10.0,
									static_cast<double>(g_eMuleApp.m_pGlobPrefs->GetSCHShift2Download()) / 10.0,
									g_eMuleApp.m_pGlobPrefs->GetSCHShift2conn(),
									g_eMuleApp.m_pGlobPrefs->GetSCHShift25sec() );
				g_eMuleApp.AddDebugLogLine(MessageText);
d633 1
a633 1
				g_eMuleApp.m_pSharedFilesList->SetOutputCtrl(&m_wndSharedFiles.m_ctlSharedFilesList);
d638 1
a638 1
				g_eMuleApp.m_pServerList->Init();
d645 2
a646 2
				g_eMuleApp.m_pDownloadQueue->Init();
				g_eMuleApp.m_pFakeCheck->Init();
d648 4
a651 4
				if (!g_eMuleApp.m_pListenSocket->StartListening())
					AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_MAIN_SOCKETERROR), g_eMuleApp.m_pGlobPrefs->GetPort());
				if (!g_eMuleApp.m_pClientUDPSocket->Create())
			   		AddLogLine(false, RGB_LOG_ERROR + GetResString(IDS_MAIN_SOCKETERROR), g_eMuleApp.m_pGlobPrefs->GetUDPPort());
d655 1
a655 1
				AddLogLine(false, _T("%s: %s"), GetResString(IDS_INFLST_USER_USERHASH), HashToString(g_eMuleApp.m_pGlobPrefs->GetUserHash()));
d683 1
a683 1
				g_eMuleApp.m_pWebServer->StartServer();
d686 1
a686 1
				if (g_eMuleApp.m_pstrPendingLink)
d688 2
a689 2
					OnWMData(NULL,(LPARAM) &g_eMuleApp.m_sendStruct);
					delete g_eMuleApp.m_pstrPendingLink;
d693 1
a693 1
				if (g_eMuleApp.m_pGlobPrefs->DoAutoConnect() && !g_eMuleApp.m_pGlobPrefs->AutoServerlist())
d699 2
a700 2
				if(g_eMuleApp.m_pGlobPrefs->IsAutoCheckForNewVersion() &&
					(time(NULL) - g_eMuleApp.m_pGlobPrefs->GetAutoCheckLastTime()) > 7*24*60*60)
d741 1
a741 1
			if(g_eMuleApp.m_pGlobPrefs->GetCloseToTray())
d771 1
a771 1
		if (g_eMuleApp.m_pGlobPrefs->GetStartMinimized())
d808 1
a808 1
	if (!g_eMuleApp.m_pServerConnect->IsConnected())
d811 1
a811 1
		if (!g_eMuleApp.m_pServerConnect->IsConnecting())
d813 1
a813 1
			if (g_eMuleApp.m_pServerConnect->IsICCActive())
d816 1
a816 1
				g_eMuleApp.m_pServerConnect->Disconnect();
d824 1
a824 1
			g_eMuleApp.m_pServerConnect->StopConnectionTry();
d926 1
a926 1
		if (m_ctlStatusBar.m_hWnd && g_eMuleApp.m_app_state != CEmuleApp::APP_STATE_SHUTINGDOWN)
d937 1
a937 1
	if (g_eMuleApp.m_pGlobPrefs->LogToFile())
d968 1
a968 1
		ShowNotifier(strCleanLine, TBN_LOG, false, g_eMuleApp.m_pGlobPrefs->GetUseLogNotifier());
d1004 1
a1004 1
	if(g_eMuleApp.m_pGlobPrefs->GetBugReport())
d1019 1
a1019 1
	ShowConnectionState(g_eMuleApp.m_pServerConnect->IsConnected(), _T(""));
d1029 1
a1029 1
	if(g_eMuleApp.m_app_state == g_eMuleApp.APP_STATE_SHUTINGDOWN)
d1056 1
a1056 1
		iIconID = (g_eMuleApp.m_pServerConnect->IsLowID()) ? 1 : 2;
d1062 1
a1062 1
		if (g_eMuleApp.m_pServerConnect->IsConnecting())
d1101 1
a1101 1
	uint32		dwRunTimeSecs = static_cast<uint32>((::GetTickCount() - g_eMuleApp.stat_starttime) / 1000);
d1127 1
a1127 1
	if(g_eMuleApp.m_app_state == g_eMuleApp.APP_STATE_SHUTINGDOWN)
d1154 2
a1155 2
	double lastuprate_kB = static_cast<double>(g_eMuleApp.m_pUploadQueue->GetDataRate())/1024.0;
	double lastdownrate_kB = static_cast<double>(g_eMuleApp.m_pDownloadQueue->GetDataRate())/1024.0;
d1157 2
a1158 2
	double lastuprateoverhead_kB = static_cast<double>(g_eMuleApp.m_pUploadQueue->GetUpDataRateOverhead())/1024.0;
	double lastdownrateoverhead_kB = static_cast<double>(g_eMuleApp.m_pDownloadQueue->GetDownDataRateOverhead())/1024.0;
d1161 1
a1161 1
	if (g_eMuleApp.m_pGlobPrefs->ShowOverhead())
d1175 1
a1175 1
	if(g_eMuleApp.m_pGlobPrefs->GetShowToolbarSpeedMeter())
d1194 1
a1194 1
		int DownRateProcent = (int)ceil(lastdownrate_kB * 1000 / g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate());
d1202 1
a1202 1
	if (!TrayIsVisible() && g_eMuleApp.m_pGlobPrefs->ShowRatesOnTitle())
d1217 1
a1217 1
	if (*g_eMuleApp.m_pGlobPrefs->GetMinTrayPTR())
d1237 1
a1237 1
		g_eMuleApp.m_pdlgEmule->m_wndChat.m_ctlChatSelector.ShowChat();
d1298 1
a1298 1
	if (g_eMuleApp.m_pGlobPrefs->ShowOverhead())
d1324 1
a1324 1
		if(g_eMuleApp.m_pGlobPrefs->IsBringToFront())
d1348 1
a1348 1
					g_eMuleApp.m_pDownloadQueue->AddFileLinkToDownload(pFileLink);
d1358 1
a1358 1
						g_eMuleApp.m_pdlgEmule->m_wndServer.UpdateServerMetFromURL(strAddress);
d1371 1
a1371 1
					if (!g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.AddServer(pSrv,true))
d1405 2
a1406 2
			if (g_eMuleApp.m_pServerConnect->IsConnecting())
				g_eMuleApp.m_pServerConnect->StopConnectionTry();
d1408 1
a1408 1
				g_eMuleApp.m_pServerConnect->Disconnect();
d1410 1
a1410 1
			ShowConnectionState(g_eMuleApp.m_pServerConnect->IsConnected(), _T(""), true);
d1416 1
a1416 1
			g_eMuleApp.m_pDownloadQueue->StartNextFile(CCat::GetAllCatType());
d1426 1
a1426 1
			g_eMuleApp.m_pSharedFilesList->Reload();
d1436 1
a1436 1
			g_eMuleApp.m_pGlobPrefs->Save();
d1446 1
a1446 1
					g_eMuleApp.m_pGlobPrefs->SetMaxDownloadWithCheck(String2FranctionalRate(clcommand.GetString() + iPos + 1));
d1449 1
a1449 1
				g_eMuleApp.m_pGlobPrefs->SetMaxUploadWithCheck(String2FranctionalRate(clcommand.GetString() + 7));
d1465 1
a1465 1
			pString.Format(_T("%sstatus.log"),g_eMuleApp.m_pGlobPrefs->GetAppDir());
d1469 1
a1469 1
			if (g_eMuleApp.m_pServerConnect->IsConnected())
d1471 1
a1471 1
			else if (g_eMuleApp.m_pServerConnect->IsConnecting())
d1480 1
a1480 1
			pString.AppendFormat(GetResString(IDS_UPDOWN), static_cast<double>(g_eMuleApp.m_pUploadQueue->GetDataRate())/1024.0, static_cast<double>(g_eMuleApp.m_pDownloadQueue->GetDataRate())/1024.0);
d1482 1
a1482 1
			_ftprintf(file, _T("%s\n%s"), pString, g_eMuleApp.m_pDownloadList->GetPartFilesStatusString());
d1510 1
a1510 1
		g_eMuleApp.m_pSharedFilesList->FileHashingFinished(pNewKnownFile);
d1521 1
a1521 1
	g_eMuleApp.m_pSharedFilesList->FileHashingFailed(reinterpret_cast<UnknownFile_Struct*>(lParam));
d1529 2
a1530 2
	if ( (g_eMuleApp.m_app_state == g_eMuleApp.APP_STATE_RUNNING) &&
		g_eMuleApp.m_pGlobPrefs->IsConfirmExitEnabled() &&
d1540 2
a1541 2
	if (g_eMuleApp.m_pServerConnect->IsConnected())
		g_eMuleApp.m_pServerConnect->Disconnect();
d1544 1
a1544 1
	g_eMuleApp.m_app_state = g_eMuleApp.APP_STATE_SHUTINGDOWN;
d1546 2
a1547 2
	g_eMuleApp.OnlineSig();
	g_eMuleApp.m_pDownloadQueue->SaveAllSLSFiles();
d1550 1
a1550 1
	g_eMuleApp.m_pGlobPrefs->SetWindowLayout(wp);
d1585 4
a1588 4
	g_eMuleApp.m_pGlobPrefs->Add2TotalDownloaded(g_eMuleApp.stat_sessionReceivedBytes);
	g_eMuleApp.m_pGlobPrefs->Add2TotalUploaded(g_eMuleApp.stat_sessionSentBytes);
	g_eMuleApp.m_pGlobPrefs->SetDetailColumnWidth(m_wndTransfer.GetDetailColumnWidth());
	g_eMuleApp.m_pGlobPrefs->Save();
d1590 1
a1590 1
	g_eMuleApp.m_pdlgEmule->m_dlgSearch.SaveSearchStrings();
d1593 1
a1593 1
	if (g_eMuleApp.m_pGlobPrefs->AutoTakeED2KLinks())
d1616 1
a1616 1
	g_eMuleApp.m_pClientList->DeleteAll();
d1619 1
a1619 1
	g_eMuleApp.m_pKnownFilesList->Save();
d1621 1
a1621 1
	delete g_eMuleApp.m_pFakeCheck;
d1626 1
a1626 1
	if (g_eMuleApp.m_pGlobPrefs->IsAutoBackup())
d1628 1
a1628 1
		g_eMuleApp.m_pdlgEmule->RunBackupNow(true);
d1703 1
a1703 1
		g_eMuleApp.m_pServerConnect->ConnectToAnyServer();
d1714 1
a1714 1
	if (g_eMuleApp.m_pServerConnect->IsConnected())
d1716 1
a1716 1
		if( !g_eMuleApp.m_pGlobPrefs->IsConfirmDisconnectEnabled() ||
d1721 1
a1721 1
			g_eMuleApp.m_pServerConnect->Disconnect();
d1725 1
a1725 1
	else if (g_eMuleApp.m_pServerConnect->IsConnecting())
d1728 1
a1728 1
		g_eMuleApp.m_pServerConnect->StopConnectionTry();
d1731 1
a1731 1
	g_eMuleApp.OnlineSig();
d1764 1
a1764 1
	if(g_eMuleApp.m_pServerConnect->IsConnected() && !g_eMuleApp.m_pServerConnect->IsLowID())
d1766 1
a1766 1
	else if(g_eMuleApp.m_pServerConnect->IsConnected() && g_eMuleApp.m_pServerConnect->IsLowID())
d1829 1
a1829 1
		m_wndTaskbarNotifier.Show(strFinalMessage, iMsgType, 500, g_eMuleApp.m_pGlobPrefs->NotificationDisplayTime());
d1831 2
a1832 2
		if (g_eMuleApp.m_pGlobPrefs->GetUseSoundInNotifier() && !bForceSoundOFF)
			PlaySound(g_eMuleApp.m_pGlobPrefs->GetNotifierWavSoundPath(), NULL, SND_FILENAME | SND_NOSTOP | SND_NOWAIT | SND_ASYNC);
d1891 1
a1891 1
		if(g_eMuleApp.m_pServerConnect->IsConnected())
d1893 1
a1893 1
			CServer	*pCurServer = g_eMuleApp.m_pServerConnect->GetCurrentServer();
d1900 1
a1900 1
			if(g_eMuleApp.m_pServerConnect->IsConnecting())
d1918 1
a1918 1
	if (!g_eMuleApp.m_pServerConnect->IsConnected())
d1921 1
a1921 1
		if (!g_eMuleApp.m_pServerConnect->IsConnecting())
d1923 1
a1923 1
			if (g_eMuleApp.m_pServerConnect->IsICCActive())
d1926 1
a1926 1
				g_eMuleApp.m_pServerConnect->Disconnect();
d1934 1
a1934 1
			g_eMuleApp.m_pServerConnect->StopConnectionTry();
d1950 1
a1950 1
	if (g_eMuleApp.m_pGlobPrefs->GetToolTipDelay() != 0)
d1971 1
a1971 1
				CString		strLogText = g_eMuleApp.m_pdlgEmule->m_wndServer.m_pctlLogBox->GetToolTip();
d1976 1
a1976 1
					pNotify->ti->hIcon = g_eMuleApp.m_pdlgEmule->m_wndServer.m_imageList.ExtractIcon(0);
d1982 1
a1982 1
				uint32		dwRunTimeSecs = static_cast<uint32>((::GetTickCount() - g_eMuleApp.stat_starttime) / 1000);
d2008 1
a2008 1
				if (g_eMuleApp.stat_serverConnectTime > 0)
d2010 1
a2010 1
					uint32 dwServerDurationSecs = static_cast<uint32>((::GetTickCount() - g_eMuleApp.stat_serverConnectTime) / 1000);
d2031 1
a2031 1
				pNotify->ti->hIcon = g_eMuleApp.m_pdlgEmule->m_dlgStatistics.m_imagelistStatTree.ExtractIcon(12);
d2036 1
a2036 1
				CServer *pServer = g_eMuleApp.m_pServerConnect != NULL ? g_eMuleApp.m_pServerConnect->GetCurrentServer() : NULL;
d2039 1
a2039 1
					pServer = g_eMuleApp.m_pServerList->GetServerByAddress(pServer->GetAddress(), pServer->GetPort());
d2050 2
a2051 2
				double dblLastUprate_KB = static_cast<double>(g_eMuleApp.m_pUploadQueue->GetDataRate())/1024.0;
				double dblLastUprateOverhead_KB = static_cast<double>(g_eMuleApp.m_pUploadQueue->GetUpDataRateOverhead())/1024.0;
d2056 2
a2057 2
								CastItoXBytes(g_eMuleApp.stat_sessionSentBytes),
								CastItoXBytes(g_eMuleApp.stat_sessionSentBytes + g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()) );
d2063 2
a2064 2
				double dblLastDownrate_KB = static_cast<double>(g_eMuleApp.m_pDownloadQueue->GetDataRate())/1024.0;
				double dblLastDownrateOverhead_KB = static_cast<double>(g_eMuleApp.m_pDownloadQueue->GetDownDataRateOverhead())/1024.0;
d2069 2
a2070 2
								CastItoXBytes(g_eMuleApp.stat_sessionReceivedBytes),
								CastItoXBytes( g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()) );
d2076 1
a2076 1
				CServer *pServer = g_eMuleApp.m_pServerConnect != NULL ? g_eMuleApp.m_pServerConnect->GetCurrentServer() : NULL;
d2079 1
a2079 1
					pServer = g_eMuleApp.m_pServerList->GetServerByAddress(pServer->GetAddress(), pServer->GetPort());
d2152 2
a2153 2
			g_eMuleApp.m_pGlobPrefs->SetMaxUpload(10);
			g_eMuleApp.m_pGlobPrefs->SetMaxDownload(10);
d2156 2
a2157 2
			g_eMuleApp.m_pGlobPrefs->SetMaxUpload(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate());
			g_eMuleApp.m_pGlobPrefs->SetMaxDownload(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate());
d2171 1
a2171 1
	if ( g_eMuleApp.m_app_state == g_eMuleApp.APP_STATE_DONE )
d2175 1
a2175 1
	else if ( g_eMuleApp.m_app_state   ==   g_eMuleApp.APP_STATE_RUNNING)
d2177 1
a2177 1
		g_eMuleApp.m_app_state = g_eMuleApp.APP_STATE_SHUTINGDOWN;
d2192 1
a2192 1
	g_eMuleApp.m_pServerConnect->ConnectToServer(*(CServer*)wParam);
d2204 1
a2204 1
	g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.RemoveServer((CServer*)wParam);
d2215 1
a2215 1
	g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.StaticServerFileAppend((CServer*)wParam);
d2225 1
a2225 1
	g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.StaticServerFileRemove((CServer*)wParam);
d2239 1
a2239 1
		g_eMuleApp.m_pDownloadList->ClearCompleted(eCatID);
d2244 1
a2244 1
		g_eMuleApp.m_pDownloadList->ClearCompleted(pFileHash);
d2262 2
a2263 2
	g_eMuleApp.m_pSharedFilesList->UpdateItem((CKnownFile*)((CPartFile*)wParam));
	g_eMuleApp.m_pdlgEmule->m_wndTransfer.UpdateInfoHeader();
d2292 1
a2292 1
	g_eMuleApp.m_pSharedFilesList->Reload();
d2302 1
a2302 1
	return (g_eMuleApp.m_app_state == CEmuleApp::APP_STATE_RUNNING);
d2315 1
a2315 1
	int DownRateProcent = (int)ceil(lastdownrate / 1.024 / g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate());
d2326 1
a2326 1
	if (g_eMuleApp.m_pGlobPrefs->GetBackupDatFiles())
d2328 1
a2328 1
	if (g_eMuleApp.m_pGlobPrefs->GetBackupMetFiles())
d2330 1
a2330 1
	if (g_eMuleApp.m_pGlobPrefs->GetBackupIniFiles())
d2332 1
a2332 1
	if (g_eMuleApp.m_pGlobPrefs->GetBackupPartMetFiles())
d2334 1
a2334 1
	if (g_eMuleApp.m_pGlobPrefs->GetBackupPartTxtsrcFiles())
d2336 1
a2336 1
	if (g_eMuleApp.m_pGlobPrefs->GetBackupPartFiles())
d2350 1
a2350 1
	CString	strBuffer = g_eMuleApp.m_pGlobPrefs->GetBackupDir();
d2357 1
a2357 1
	BackupFiles(extensionToBack, automated, g_eMuleApp.m_pGlobPrefs->GetConfigDir(), strBuffer);
d2364 1
a2364 1
	strBuffer.Format(_T("%s\\Temp\\"), g_eMuleApp.m_pGlobPrefs->GetBackupDir());
d2369 1
a2369 1
	BackupFiles(extensionToBack, automated, g_eMuleApp.m_pGlobPrefs->GetTempDir(), strBuffer);
d2377 1
a2377 1
	g_eMuleApp.m_pGlobPrefs->TempDirListCopy(&tmpTempDirList);
d2383 1
a2383 1
		strBuffer.Format(_T("%s\\Temp[%i]\\"),g_eMuleApp.m_pGlobPrefs->GetBackupDir(),iTempDir);
d2441 1
a2441 1
				if (!g_eMuleApp.m_pGlobPrefs->GetBackupOverwrite())
d2491 1
a2491 1
	if (g_eMuleApp.m_pGlobPrefs->IsAutoBackup() || g_eMuleApp.m_pGlobPrefs->IsScheduledBackup())
d2493 2
a2494 2
		g_eMuleApp.m_pGlobPrefs->SetScheduledBackup(false);
		g_eMuleApp.m_pGlobPrefs->SetAutoBackup(false);
d2503 1
a2503 1
	if (::IsWindow(GetSafeHwnd()) && g_eMuleApp.m_app_state != CEmuleApp::APP_STATE_SHUTINGDOWN)
@


1.321
log
@Don't show log messages in message box when status bar isn't ready yet {FGFEmperor}
(this is required, because message box doesn't allow automatic start).
@
text
@d1000 1
a1000 1
void CEmuleDlg::AddBugReport(LPCTSTR strFunctionName, LPCTSTR sFile, long nLine, CString msg)
d1008 2
a1009 2
		sOut.Format(RGB_LOG_ERROR_TXT _T("%s: EXCEPTION! (%s) Report to " CLIENT_NAME " developers. Line %ld in file %s"),
			strFunctionName, msg, nLine, sFile);
@


1.320
log
@correction for string processing by tooltip notify. thanks Aw3
@
text
@a927 2
		else
			AfxMessageBox(strCleanLine);
@


1.319
log
@Rolled back 'more space for taskbar message field', as it was incorrect when days are shown.
@
text
@d1958 1
a1958 1
CString CEmuleDlg::GetInfo4ToolTip(NM_PPTOOLTIP_DISPLAY *pNotify)
a1960 1
	CString					strInfo(_T(""));
d1964 1
d2044 1
a2044 1
					return FALSE;
d2084 1
a2084 1
					return FALSE;
d2090 1
a2091 2

	return strInfo;
d2619 1
a2619 1
			pNotify->ti->sTooltip = GetInfo4ToolTip(pNotify);
@


1.318
log
@fixed hanging tooltip by focus switch; the "OnToolTipNotify" replaced over OnNotify because it works faster as using ON_NOTIFY_EX_RANGE(...)
@
text
@d1295 1
a1295 1
		0, 75, 22, 74, 70, 70, 260
@


1.317
log
@More space for taskbar message field {Fuxie - DK}.
@
text
@a54 2
	ON_NOTIFY_EX_RANGE(UDM_TOOLTIP_DISPLAY,0,0xFFFF,OnToolTipNotify)

d175 2
d1958 1
a1958 1
BOOL CEmuleDlg::OnToolTipNotify(UINT id, NMHDR *pNMH, LRESULT *pResult) 
a1959 1
	NM_PPTOOLTIP_DISPLAY	*pNotify = (NM_PPTOOLTIP_DISPLAY*)pNMH;
d1961 1
a1961 1
	CString					strInfo;
a2090 1
	pNotify->ti->sTooltip = strInfo;
d2092 1
a2092 1
	return TRUE;
d2581 16
d2609 23
@


1.316
log
@Slightly cleaned a mess of including one H-file into another.
@
text
@d1295 1
a1295 1
		0,105,22,70,70,70,260,
@


1.315
log
@Save state of Friends list.
@
text
@d37 1
@


1.314
log
@Optimized GetCurrentServer() calls (cache value for consecutive usage).
@
text
@d1562 1
d1579 1
@


1.313
log
@Member renaming.
@
text
@d1892 3
a1894 2
			ShowUserCount( g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetNumUsers(),
						   g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetFiles() );
d1898 1
a1898 1
			m_ctlStatusBar.SetText(_T("0"),SB_NUMUSERS,0);
@


1.312
log
@Changed format of command line switch from "limits=UpLim[,DownLim]" to "limits=[UpLim][:DownLim]"
(changed as comma is a decimal symbol for some locales, thus entering of fractional speeds wasn't possible).
@
text
@d2030 1
a2030 1
				pNotify->ti->hIcon = g_eMuleApp.m_pdlgEmule->m_dlgStatistics.imagelistStatTree.ExtractIcon(12);
@


1.311
log
@Fixed shared files hashing issues when hashing stopped {Juokelis/GMGMGM/taltamir};
Removed unused code.
@
text
@d1440 1
a1440 1
		if (clcommand.Left(7).MakeLower()=="limits=" && clcommand.GetLength()>8)
d1442 1
a1442 1
			CString	down,up = clcommand.Mid(7);
d1444 1
a1444 2
			int pos=up.Find(',');
			if (pos>0)
d1446 2
a1447 2
				down=up.Mid(pos+1);
				up=up.Left(pos);
d1449 2
a1450 4
			if (!down.IsEmpty())
				g_eMuleApp.m_pGlobPrefs->SetMaxDownloadWithCheck(String2FranctionalRate(down));
			if (!up.IsEmpty())
				g_eMuleApp.m_pGlobPrefs->SetMaxUploadWithCheck(String2FranctionalRate(up));
@


1.310
log
@Show message taskbar indicator also when Message pane is active but eMule Plus isn't topmost;
Fixed disable of blinking new message taskbar indicator (when Message is current pane,
new message notifier popped up and user activated eMule Plus from systray by tray icon clicking).
@
text
@d63 2
a64 1
	ON_MESSAGE(TM_FINISHEDHASHING,OnFileHashed)
a115 1
	m_bReady = false;
a116 1
	m_iFilesToBeHashed = 0;
d632 1
a632 2
				g_eMuleApp.m_pSharedFilesList->FindSharedFiles();
				m_bReady = true;
a636 1
				g_eMuleApp.m_pSharedFilesList->SetOutputCtrl(&m_wndSharedFiles.m_ctlSharedFilesList);
d1500 1
a1500 1
LRESULT CEmuleDlg::OnFileHashed(WPARAM wParam,LPARAM lParam)
d1514 1
a1514 6
		if (m_iFilesToBeHashed > 0)
			m_iFilesToBeHashed--;

		g_eMuleApp.m_pSharedFilesList->m_pKnownFileList->SafeAddKnownFile(pNewKnownFile);
		g_eMuleApp.m_pSharedFilesList->SafeAddKnownFile(pNewKnownFile);
		AddLogLine(false, RGB_LOG_DIMMED + GetResString(IDS_HASBEENHASHED), pNewKnownFile->GetFileName(), m_iFilesToBeHashed);
d1523 6
d2296 1
a2296 1
	g_eMuleApp.m_pSharedFilesList->Reload(true);
@


1.309
log
@Fixed missed status bar connection icon after start (appeared in 1.303 -- another one January issue);
Possible fix for rare case when colors of status bar connection icon are wrong {Fuxie - DK}.
@
text
@d76 1
d1235 9
a1267 1
	{
a1268 2
		g_eMuleApp.m_pdlgEmule->m_wndChat.m_ctlChatSelector.ShowChat();
	}
d1876 1
a1876 1
    return 0;
@


1.308
log
@Removed unused get-time calls.
@
text
@d479 3
d1092 2
a1093 2
	if (m_hiconConn != NULL)
		::DestroyIcon(m_hiconConn);
d1096 2
@


1.307
log
@Unified processing of server priorities.
@
text
@d2504 1
a2504 2
		//	... then post one with the current time so we know how long the request has been pending when we get it.
			PostMessage(uiMsg,0,static_cast<LPARAM>(::GetCurrentTime()));
@


1.306
log
@Don't use 32 bit color resources if OS/comctl32.dll doesn't support it and some other minor changes/optimizations.
@
text
@d1361 1
a1361 1
					pSrv->SetPreference(CServer::SERVERPRIORITY_HIGH);
@


1.305
log
@Moved new function to proper place
@
text
@d149 1
a149 1
	m_clientImgLists[CLIENT_IMGLST_PLAIN].Create(16, 16, ILC_COLOR32 | ILC_MASK, ELEMENT_COUNT(s_auClientIconResID), 0);
d154 1
a154 1
	m_tmpImageList.Create(16, 16, ILC_COLOR32 | ILC_MASK, 1, 0);
d163 1
a163 1
		m_clientImgLists[uiListIdx].Create(16, 16, ILC_COLOR32 | ILC_MASK, ELEMENT_COUNT(s_auClientIconResID), 0);
@


1.304
log
@Forces saving sources during client close
@
text
@d1541 1
a1541 1
	g_eMuleApp.m_pDownloadList->SaveAllSLSFiles();
@


1.303
log
@Add sources possibly received from global search (official).
Added missing translations in case countryflag.dll / ip-to-country.cvs is not found.
Notifier informs if a new version is available (not annoying, but still more likely
 to be noticed than just a log line).
Added 'Folder' column to Shared files window.
Prevent adding install/working dirs (\Webserver, \Db...) to Shared files.
+ some other minor changes/fixes.
@
text
@d1541 1
@


1.302
log
@Removed unused code.
@
text
@d338 1
a338 1
			// 	Everything allright
d343 4
a478 3
// 	Set updateintervall of graphic rate display (in seconds)
	ShowConnectionState(false);

@


1.301
log
@Faster link processing.
@
text
@d2253 1
a2253 1
	((CPartFile*)wParam)->UpdateDisplayedInfo(true);
@


1.300
log
@Fixed cancelling of Internet Connection Check {DoubleT}
(before after failed Internet connection check pressing Cancel button initiated
a new server connection instead of cancelling any activity).
@
text
@d1332 1
a1332 5
			CString link2;
			link2 = CString((char*)data->lpData,data->cbData);
			link2.Replace(_T("%7c"),_T("|"));
			CString link(URLDecode(link2));
			CED2KLink* pLink = CED2KLink::CreateLinkFromUrl(link);
@


1.299
log
@fixed exception on shutdown
@
text
@d809 10
a818 1
			StartConnection();
d1916 8
a1923 1
			StartConnection();
@


1.298
log
@Safer service prototype; Improved string processing.
@
text
@d946 1
a946 1
		if(::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
d955 1
a955 1
		if(::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
@


1.297
log
@Probable solution for crashes reported by users crash dumps.
@
text
@d1784 1
a1784 1
void CEmuleDlg::ShowNotifier(CString &strText, int iMsgType, bool bForceSoundOFF, bool bMsgEnabled)
d1793 1
a1793 3
		strTempMessage.SetString(strText.Tokenize(_T(" "), iPos));

		while (!strTempMessage.IsEmpty())
d1795 3
d1808 2
a1809 2
			strFinalMessage.AppendFormat(_T("%s "), strTempMessage);
			strTempMessage.SetString(strText.Tokenize(_T(" "), iPos));
d1814 1
a1814 1
		m_wndTaskbarNotifier.Show(strFinalMessage, iMsgType, 500,g_eMuleApp.m_pGlobPrefs->NotificationDisplayTime());
@


1.296
log
@Corrected parameter definition.
@
text
@d2523 1
a2523 1
	BOOL		bHandled = FALSE;
a2540 1
			bHandled = true;
a2555 1
			bHandled = true;
d2558 3
d2566 1
a2566 3
	{
		bHandled = CDialog::OnWndMsg(iMessage,wParam,lParam,pResult);
	}
@


1.295
log
@Fixed temporary directory list processing (double list entries which could be caused
by case sensitive compares; remove incorrect entries from the list; don't allow
main temp dir to be added to the list);
Fixed backup from non-existent directory (files from incorrect directory could be backed up);
Minor improvements.
@
text
@d2487 1
a2487 1
		if (!::PeekMessage(&msg,m_hWnd,uiMsg,uiMsg,false))
@


1.294
log
@Fractional upload/download limits (min 1 KB/s, granularity 0.1 KB/s);
Corrected speed configuration (possible speed limits weren't check in many places).
@
text
@d2306 1
a2306 1
		BackupFromAppDir("*.dat", automated);
d2308 1
a2308 1
		BackupFromAppDir("*.met", automated);
d2310 1
a2310 1
		BackupFromAppDir("*.ini", automated);
d2312 1
a2312 1
		BackupFromTempDir("*.part.met", automated);
d2314 1
a2314 1
		BackupFromTempDir("*.part.txtsrc", automated);
d2353 6
a2358 1
	for (POSITION pos = g_eMuleApp.m_pGlobPrefs->m_tempDirList.GetHeadPosition(); pos != NULL; )
d2360 1
a2360 1
		CString strSearchPath(g_eMuleApp.m_pGlobPrefs->m_tempDirList.GetNext(pos).GetBuffer());
d2384 1
a2384 1
void CEmuleDlg::BackupFiles(LPCSTR extensionToBack, bool automated, CString strPath, const CString &strBackupPath)
d2394 1
d2397 4
a2400 1
	SetCurrentDirectory(strPath);
d2402 2
a2403 1
	hSearch = FindFirstFile(extensionToBack, &fileData);
d2435 5
a2439 1
			CopyFile(fileData.cFileName, szNewPath, FALSE);
d2457 2
a2458 4
	if (!FindClose(hSearch))
	{
		finderror = TRUE;
	}
@


1.293
log
@Removed old unused code.
@
text
@d383 1
a383 1
	int		iMaxRange = g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate();
d385 3
a387 3
	if (g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate() > iMaxRange)
		iMaxRange = g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate();
	m_ctlToolBar.SetSpeedMeterRange(iMaxRange, 0);
d570 3
a572 3
			MessageText.Format( _T("SCHEDULER: switching to Shift 1 (Max Upload:%i Max Download:%i Max Connections:%i Max In 5 secs:%i)"),
								g_eMuleApp.m_pGlobPrefs->GetSCHShift1Upload(),
								g_eMuleApp.m_pGlobPrefs->GetSCHShift1Download(),
d601 3
a603 3
				MessageText.Format( _T("SCHEDULER: switching to Shift 2 (Max Upload:%i Max Download:%i Max Connections:%i Max In 5 secs:%i)"),
									g_eMuleApp.m_pGlobPrefs->GetSCHShift2Upload(),
									g_eMuleApp.m_pGlobPrefs->GetSCHShift2Download(),
d1182 1
a1182 1
		int DownRateProcent = (int)ceil((lastdownrate_kB*100)/g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate());
d1435 4
a1438 4
			if (down.GetLength() > 0)
				g_eMuleApp.m_pGlobPrefs->SetMaxDownload(_tstoi(down));
			if (up.GetLength() > 0)
				g_eMuleApp.m_pGlobPrefs->SetMaxUpload(_tstoi(up));
d1629 1
a1629 5
	m_pSystrayDlg = new CMuleSystrayDlg(this,pt,
									g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate(),
									g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate(),
									g_eMuleApp.m_pGlobPrefs->GetMaxUpload(),
									g_eMuleApp.m_pGlobPrefs->GetMaxDownload());
d2131 2
a2132 2
			g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(1));
			g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(1));
d2135 2
a2136 2
			g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()));
			g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()));
d2294 1
a2294 1
	int DownRateProcent = (int)ceil((lastdownrate/10.24)/g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate());
@


1.292
log
@Slightly reduced GUI resources usage; Improved string processing; General optimization.
@
text
@a1181 4
		int iMaxValue = g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate();
		if (iMaxValue < g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate())
			iMaxValue = g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate();

a2146 17
int CEmuleDlg::GetRecMaxUpload()
{
	EMULE_TRY

	if (g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()<7)
		return 0;

	if (g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()<15)
		return g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()-3;

	return (g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()-4);

	EMULE_CATCH2

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@


1.291
log
@an asynchronous data output to log boxes
@
text
@d128 1
a128 3
	m_hiconConn[0] = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_NOTCONNECTED),IMAGE_ICON,16,16,0);
	m_hiconConn[1] = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_CONNECTED),IMAGE_ICON,16,16,0);
	m_hiconConn[2] = (HICON)::LoadImage(hInst, MAKEINTRESOURCE(IDI_CONNECTEDHIGH),IMAGE_ICON,16,16,0);
d191 2
a192 3
	::DestroyIcon(m_hiconConn[0]);
	::DestroyIcon(m_hiconConn[1]);
	::DestroyIcon(m_hiconConn[2]);
d1009 1
a1009 1
	ShowConnectionState( g_eMuleApp.m_pServerConnect->IsConnected() ,_T(""));
d1013 1
a1013 6
void CEmuleDlg::ShowConnectionState(bool bConnected)
{
	ShowConnectionState(bConnected,_T(""));
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::ShowConnectionState(bool bConnected, CString server,bool iconOnly)
d1015 2
d1022 7
d1031 9
a1039 9
		TCHAR szBuf[200];
		_stprintf(szBuf, _T("%s"), GetResString(IDS_MAIN_BTN_DISCONNECT));
		LPTSTR pszBuf;
		TBBUTTONINFO tbi;
		LPTBBUTTONINFO lptbbi;
		pszBuf = szBuf;
		lptbbi = &tbi;
		tbi.dwMask = TBIF_IMAGE | TBIF_TEXT;
		tbi.cbSize = sizeof (TBBUTTONINFO);
d1041 2
a1042 3
		tbi.pszText = pszBuf;
		tbi.cchText = sizeof (szBuf);
		m_ctlToolBar.SetButtonInfo(IDC_TOOLBARBUTTON+0, lptbbi);
d1046 1
a1046 4
		if (g_eMuleApp.m_pServerConnect->IsLowID())
			m_ctlStatusBar.SetIcon(SB_SERVER,m_hiconConn[1]);
		 else
			m_ctlStatusBar.SetIcon(SB_SERVER,m_hiconConn[2]);
a1047 6

		if (!iconOnly)
		{
			m_ctlStatusBar.SetText(GetResString(IDS_MAIN_CONNECTEDTO) + _T(' ') + CString(server),SB_MESSAGETEXT,0);
			m_ctlStatusBar.SetText(server,SB_SERVER,0);
		}
d1054 6
a1059 9
			TCHAR szBuf[200];
			_stprintf(szBuf, _T("%s"), GetResString(IDS_MAIN_BTN_CANCEL));
			LPTSTR pszBuf;
			TBBUTTONINFO tbi;
			LPTBBUTTONINFO lptbbi;
			pszBuf = szBuf;
			lptbbi = &tbi;
			tbi.dwMask = TBIF_IMAGE | TBIF_TEXT;
			tbi.cbSize = sizeof (TBBUTTONINFO);
a1060 9
			tbi.pszText = pszBuf;
			tbi.cchText = sizeof (szBuf);
			m_ctlToolBar.SetButtonInfo(IDC_TOOLBARBUTTON+0, lptbbi);

			m_ctlStatusBar.SetIcon(SB_SERVER,m_hiconConn[0]);
			if (!iconOnly)
				m_ctlStatusBar.SetText(GetResString(IDS_CONNECTING),SB_SERVER,0);
			ShowUserCount(0,0);

d1064 1
a1064 16
			TCHAR szBuf[200];
			_stprintf(szBuf, _T("%s"), GetResString(IDS_MAIN_BTN_CONNECT));
			LPTSTR pszBuf;
			TBBUTTONINFO tbi;
			LPTBBUTTONINFO lptbbi;
			pszBuf = szBuf;
			lptbbi = &tbi;
			tbi.dwMask = TBIF_IMAGE | TBIF_TEXT;
			tbi.cbSize = sizeof (TBBUTTONINFO);
			tbi.iImage = 0;
			tbi.pszText = pszBuf;
			tbi.cchText = sizeof (szBuf);
			m_ctlToolBar.SetButtonInfo(IDC_TOOLBARBUTTON+0, lptbbi);

			m_ctlStatusBar.SetIcon(SB_SERVER,m_hiconConn[0]);
			if (!iconOnly)
d1066 2
a1067 1
				m_ctlStatusBar.SetText(GetResString(IDS_NOTCONNECTED),SB_SERVER,0);
d1070 2
a1071 1
			ShowUserCount(0,0);
d1073 4
a1077 1

d1079 4
d1398 1
a1398 1
                g_eMuleApp.m_pServerConnect->Disconnect();
d1400 1
a1400 1
			ShowConnectionState(g_eMuleApp.m_pServerConnect->IsConnected() ,_T(""), true);
@


1.290
log
@Own client type for eMule Plus clients.
@
text
@d118 3
a142 2
	m_astrMissedLogLines.RemoveAll();
	m_astrMissedDebugLogLines.RemoveAll();
d215 5
d945 4
d950 1
a950 13
		{
			if (m_astrMissedDebugLogLines.GetSize() > 0)
			{
				for (int i = 0; i < m_astrMissedDebugLogLines.GetSize(); i++)
					OutputLogText(m_astrMissedDebugLogLines[i], m_wndServer.m_pctlDebugBox);
				m_astrMissedDebugLogLines.RemoveAll();
			}
			OutputLogText(strLogLine2, m_wndServer.m_pctlDebugBox);
			if (m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 2)
				m_wndServer.m_ctrlBoxSwitcher.SetItemState(2, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
		}
		else
			m_astrMissedDebugLogLines.Add(strLogLine2);
d954 4
d959 2
a960 13
		{
			if (m_astrMissedLogLines.GetSize() > 0)
			{
				for (int i = 0; i < m_astrMissedLogLines.GetSize(); i++)
					OutputLogText(m_astrMissedLogLines[i], m_wndServer.m_pctlLogBox);
				m_astrMissedLogLines.RemoveAll();
			}
			OutputLogText(strLogLine2, m_wndServer.m_pctlLogBox);
			if (m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 0)
				m_wndServer.m_ctrlBoxSwitcher.SetItemState(0, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
		}
		else
			m_astrMissedLogLines.Add(strLogLine2);
d2519 92
@


1.289
log
@LMULE -> XMULE.
@
text
@d90 1
@


1.288
log
@Faster client icons processing.
@
text
@d97 1
a97 1
		IDI_LMULE,			//SO_LMULE
@


1.287
log
@Finally own icon for lphant.
@
text
@d90 10
a99 10
		IDI_UNKNOWN,		//CLIENT_ICON_UNKNOWN
		IDI_NORMAL,			//CLIENT_ICON_NORMAL
		IDI_COMPROT,		//CLIENT_ICON_COMPROT
		IDI_MLDONKEY,		//CLIENT_ICON_MLDONKEY
		IDI_EDONKEYHYBRID,	//CLIENT_ICON_EDONKEYHYBRID
		IDI_AMULE,			//CLIENT_ICON_AMULE
		IDI_LMULE,			//CLIENT_ICON_LMULE
		IDI_SHAREAZA,		//CLIENT_ICON_SHAREAZA
		IDI_SECUREHASH,		//CLIENT_ICON_SECUREHASH
		IDI_LPHANT			//CLIENT_ICON_LPHANT
@


1.286
log
@Fixed directory creating [reported by Cheesy]; Improved string processing.
@
text
@d98 2
a99 1
		IDI_SECUREHASH		//CLIENT_ICON_SECUREHASH
@


1.285
log
@optimized datarate calcualtion for UL queue, removed unneeded code
@
text
@d2388 1
a2388 9
	CString szConfigDirPath = CString(g_eMuleApp.m_pGlobPrefs->GetConfigDir());
	CString buffer;
	buffer.Format(_T("%s\\"),g_eMuleApp.m_pGlobPrefs->GetBackupDir());
	char szBackupPath[MAX_PATH];
	lstrcpy(szBackupPath,buffer);

//	Create a new directory if one does not exist
	if(!PathFileExists(szBackupPath))
		CreateDirectory(szBackupPath, NULL);
d2390 4
d2395 1
a2395 1
	BackupFiles(extensionToBack,automated,szConfigDirPath,szBackupPath);
d2400 3
a2402 9
	CString szTempPath = CString(g_eMuleApp.m_pGlobPrefs->GetTempDir());
	CString buffer;
	buffer.Format(_T("%s\\Temp\\"),g_eMuleApp.m_pGlobPrefs->GetBackupDir());
	char szBackupTempSubPath[MAX_PATH];
	lstrcpy(szBackupTempSubPath,buffer);

//	Create a new directory if one does not exist
	if(!PathFileExists(szBackupTempSubPath))
		CreateDirectory(szBackupTempSubPath, NULL);
d2404 4
a2407 1
	BackupFiles(extensionToBack,automated,szTempPath,szBackupTempSubPath);
d2416 1
a2416 2
		buffer.Format(_T("%s\\Temp[%i]\\"),g_eMuleApp.m_pGlobPrefs->GetBackupDir(),iTempDir);
		lstrcpy(szBackupTempSubPath,buffer);
d2418 2
a2419 2
		if(!PathFileExists(szBackupTempSubPath))
			CreateDirectory(szBackupTempSubPath, NULL);
d2421 1
a2421 1
		BackupFiles(extensionToBack,automated,strSearchPath,szBackupTempSubPath);
a2422 1
		char tempDir[1060];
d2424 5
a2428 4
		sprintf(tempDir,"%sbackup.log", szBackupTempSubPath);
		sprintf(tempLog,"Backed-up directory: %s",strSearchPath);
		FILE* LogFile = _tfopen(tempDir, _T("w+"));
		if ( LogFile != NULL )
d2438 1
a2438 1
void CEmuleDlg::BackupFiles(LPCSTR extensionToBack,bool automated, CString szPath, CString szBackupPath)
d2450 1
a2450 1
	SetCurrentDirectory(szPath);
d2462 1
a2462 1
		lstrcpy(szNewPath,szBackupPath);
@


1.284
log
@MobileMule: fixed crash on shutdown request if preferences opened [thanks Fuxie - DK for support].
@
text
@d1176 1
a1176 1
	double lastuprate_kB = static_cast<double>(g_eMuleApp.m_pUploadQueue->GetDataRateShown())/1024.0;
d2069 1
a2069 1
				double dblLastUprate_KB = static_cast<double>(g_eMuleApp.m_pUploadQueue->GetDataRateShown())/1024.0;
@


1.283
log
@Removed unneeded code.
@
text
@d1603 5
d2530 1
a2530 1
		AddLogLine(false, RGB_LOG_WARNING+ GetResString(IDS_AUTOBACKUP_DISABLED));
@


1.282
log
@Possibility to backup .part.txtsrc files.
@
text
@d306 1
a306 1
	WORD wWinVer = DetectWinVersion(bNTBased);
@


1.281
log
@Added an option in IRC to send Bold, Underline & Colored messages.
Small optimization in IRC and some minor changes/fixes.
@
text
@d2360 1
a2360 1
		BackupFromAppDir("*.dat",automated);
d2362 1
a2362 1
		BackupFromAppDir("*.met",automated);
d2364 1
a2364 1
		BackupFromAppDir("*.ini",automated);
d2366 3
a2368 1
		BackupFromTempDir("*.part.met",automated);
@


1.280
log
@Small optimization in OutputLogText.
@
text
@d825 1
a825 1
	COLORREF	crColor = 0x1000000, crNewColor;
d840 1
a840 1
					crNewColor = 0x1000000;
@


1.279
log
@Faster client icon drawing in the lists;
Unified processing of client icon images; Faster icon loading.
@
text
@d819 1
a819 1
void CEmuleDlg::OutputLogText(const CString& strLogText, bool bDebug)
a825 1
	bool		bFound;
d831 1
a831 1
		if (iTagStart != -1)
d833 1
a833 1
		if (iTagEnd != -1)
d835 1
a835 2
			bFound = false;
			crNewColor = crColor;
a839 1
				{
a840 2
					bFound = true;
				}
d844 1
a844 1
					if (iIndex != -1)
d849 1
a849 1
						if (iIndex != -1)
a854 1
							bFound = true;
d859 1
a859 1
			if (bFound)
d862 1
a862 7
				{
					strPart = strLine.Left(iTagStart);
					if (bDebug)
						m_wndServer.m_pctlDebugBox->AppendText(strPart, crColor);
					else
						m_wndServer.m_pctlLogBox->AppendText(strPart, crColor);
				}
d869 1
a869 4
			if (bDebug)
				m_wndServer.m_pctlDebugBox->AppendText(strLine, crColor);
			else
				m_wndServer.m_pctlLogBox->AppendText(strLine, crColor);
d942 1
a942 1
					OutputLogText(m_astrMissedDebugLogLines[i], bDebug);
d945 1
a945 1
			OutputLogText(strLogLine2, bDebug);
d959 1
a959 1
					OutputLogText(m_astrMissedLogLines[i], bDebug);
d962 1
a962 1
			OutputLogText(strLogLine2, bDebug);
@


1.278
log
@opimized some more + minor fix
@
text
@d25 2
a26 2
#include "knownfilelist.h"
#include "knownfile.h"
d32 1
a32 1
#include "Splashscreen.h"
d35 1
a35 1
#include "enbitmap.h"
d88 20
d120 10
a129 7
	m_hiconConn[0] = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_NOTCONNECTED),IMAGE_ICON,16,16,0);
	m_hiconConn[1] = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_CONNECTED),IMAGE_ICON,16,16,0);
	m_hiconConn[2] = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_CONNECTEDHIGH),IMAGE_ICON,16,16,0);
	m_hiconTrans[0] = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_UP0),IMAGE_ICON,16,16,0);
	m_hiconTrans[1] = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_UP1),IMAGE_ICON,16,16,0);
	m_hiconTrans[2] = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_DOWN0),IMAGE_ICON,16,16,0);
	m_hiconTrans[3] = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_DOWN1),IMAGE_ICON,16,16,0);
d131 6
a136 6
	m_hiconIM[1] = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_MESSAGE),IMAGE_ICON,16,16,0);
	m_hiconIM[2] = (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_MPENDING),IMAGE_ICON,16,16,0);
	m_hiconSourceTray = (HICON)LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_TRAYICON),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	m_hiconSourceTrayLowID = (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON_LOWID),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	m_hiconSourceTrayGrey = (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON_GREY),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	m_hiconUsers = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_USERS),IMAGE_ICON,16,16,0);
d144 31
@


1.277
log
@Fixed a GUI glitch in Messages window when multiple tabs are open and windows is themed;
Name changes, formatting etc.
@
text
@d831 1
a831 1
			strLine.Empty();
@


1.276
log
@Proper break of long lines in taskbar notifier
@
text
@d1244 1
a1244 1
		g_eMuleApp.m_pdlgEmule->m_wndChat.chatselector.ShowChat();
d1547 1
a1547 1
	m_wndChat.chatselector.SetRedraw(false);
d1581 1
a1581 1
	m_wndChat.chatselector.DeleteAllItems();
@


1.275
log
@Removed AddDebugLogLine statusbar message option, added client transfer debug log option
@
text
@d1788 24
a1811 1
		m_wndTaskbarNotifier.Show(strText, iMsgType, 500,g_eMuleApp.m_pGlobPrefs->NotificationDisplayTime());
@


1.274
log
@Fix for taskbar notifier
@
text
@d221 1
a221 1
					g_eMuleApp.m_pdlgEmule->AddDebugLogLine(false,
d516 1
a516 1
			g_eMuleApp.AddDebugLogLine(false, MessageText);
d530 1
a530 1
               	g_eMuleApp.AddDebugLogLine(false, CString("SCHEDULER: day excepted!"));
d547 1
a547 1
				g_eMuleApp.AddDebugLogLine(false, MessageText);
d657 1
a657 1
				AddDebugLogLine(false,_T("Timer called with no reason"));
d971 1
a971 1
		AddDebugLogLine(false, sOut);
d2425 1
a2425 1
			AddDebugLogLine(false, _T("Backup %s done"), szNewPath);
d2447 1
a2447 1
		AddDebugLogLine(false, RGB_LOG_ERROR_TXT _T("Error encountered during backup!"));
@


1.273
log
@minor change
@
text
@d356 1
d366 1
d435 1
d1786 1
a1786 1
	if (bMsgEnabled)
@


1.272
log
@minor changes
@
text
@d773 1
d777 1
a777 1
		if ((iTagStart != -1) && (iTagEnd != -1))
@


1.271
log
@minor change
@
text
@d768 1
a768 1
	COLORREF	crColor = GetSysColor(COLOR_WINDOWTEXT), crNewColor;
d774 3
a776 2
		iTagEnd = strLine.Find(_T('>'));
		if ((iTagStart < iTagEnd) && (iTagStart != -1) && (iTagEnd != -1))
d785 1
a785 1
					crNewColor = GetSysColor(COLOR_WINDOWTEXT);
@


1.270
log
@minor change
@
text
@d775 1
a775 1
		if ((iTagStart != -1) && (iTagEnd != -1))
@


1.269
log
@Minor string optimization.
@
text
@a1923 1
					m_ctlStatusBar.SetFocus();
a1978 1
				m_ctlStatusBar.SetFocus();
a1992 1
				m_ctlStatusBar.SetFocus();
a2005 1
				m_ctlStatusBar.SetFocus();
a2018 1
				m_ctlStatusBar.SetFocus();
a2031 1
				m_ctlStatusBar.SetFocus();
@


1.268
log
@Sligthly faster log string processing.
@
text
@d2448 1
a2448 1
		AddDebugLogLine(false, RGB_LOG_ERROR + _T("Error encountered during backup!"));
@


1.267
log
@IRC channel messages now supports background color coded messages (Thanks SyruS!);
Added a Word Wrap context menu option to logs, IRC & messages;
Fixed category tabs padding (Mantis bug #0000415);
Improved logs, IRC & messages code + formatting & name changes
@
text
@d833 1
a833 1
void CEmuleDlg::AddLogText(bool addtostatusbar,const CString& txt, bool bDebug)
d837 1
a837 1
	CString			strLogLine = txt;
d875 1
a875 1
	strLogLine2.Format(_T("%s%s%s%s\n"), RGB_DARK_BLUE, strTime, RGB_DEFAULT, strLogLine);
d877 1
a877 1
	//	Save to file
@


1.266
log
@minor change
@
text
@d766 4
a769 4
	CString strLine = strLogText;
	CString strPart;
	long iTagStart, iTagEnd, iIndex, iRed, iGreen, iBlue;
	COLORREF crColor = GetSysColor(COLOR_WINDOWTEXT);
d775 1
a775 1
		if (( iTagStart != -1 ) && ( iTagEnd != -1 ))
d777 2
a778 2
			bool bColorFound = false;
			COLORREF crNewColor = crColor;
d785 1
a785 1
					bColorFound = true;
d801 1
a801 1
							bColorFound = true;
d806 1
a806 1
			if (bColorFound)
d812 1
a812 1
						m_wndServer.debugbox->AppendText(strPart, crColor);
d814 1
a814 1
						m_wndServer.logbox->AppendText(strPart, crColor);
d823 1
a823 1
				m_wndServer.debugbox->AppendText(strLine, crColor);
d825 1
a825 1
				m_wndServer.logbox->AppendText(strLine, crColor);
d837 14
a850 3
	CString strCleanLine = txt;
	int iTagStart = 0;
	while( iTagStart != -1 )
d853 1
a853 1
		if ( iTagStart != -1 )
d855 2
a856 2
			int iTagEnd = strCleanLine.Find(_T('>'), iTagStart + 7);
			if ( iTagEnd != -1 )
d858 2
d866 1
a866 1
			m_ctlStatusBar.SetText(strCleanLine,SB_MESSAGETEXT,0);
d870 3
d874 2
a875 1
	CString strLogLine = txt;
d877 2
a878 5
	strLogLine.Remove(_T('\b'));
	strLogLine.Remove(_T('\r'));
	strLogLine.Remove(_T('\t'));
	strLogLine.Trim();
	if (strLogLine.GetLength() > 0)
d880 1
a880 2
		COleDateTime		currentTime(COleDateTime::GetCurrentTime());
		CString			strLogLine2, strTime = currentTime.Format();
d882 1
a882 5
		strTime += _T(": ");
		strLogLine2.Format(_T("%s%s%s%s\n"), RGB_DARK_BLUE, strTime, RGB_DEFAULT, strLogLine);
		
	//	Save to file
		if (g_eMuleApp.m_pGlobPrefs->LogToFile())
d884 4
a887 9
			FILE *LogFile = _tfopen((bDebug) ? m_strDebugLogFilePath : m_strLogFilePath, "a");
			
			if (LogFile != NULL)
			{
				strTime += strCleanLine;
				strTime += _T('\n');
				_fputts(strTime, LogFile);
				fclose(LogFile);
			}
d889 1
d891 3
a893 1
		if (bDebug)
d895 1
a895 1
			if(::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
d897 3
a899 9
				if (m_astrMissedDebugLogLines.GetSize() > 0)
				{
					for (int i = 0; i < m_astrMissedDebugLogLines.GetSize(); i++)
						OutputLogText(m_astrMissedDebugLogLines[i], bDebug);
					m_astrMissedDebugLogLines.RemoveAll();
				}
				OutputLogText(strLogLine2, bDebug);
				if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 2)
					m_wndServer.m_ctrlBoxSwitcher.SetItemState(2, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
d901 3
a903 2
			else
				m_astrMissedDebugLogLines.Add(strLogLine2);
d906 5
d912 1
a912 1
			if(::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
d914 3
a916 9
				if (m_astrMissedLogLines.GetSize() > 0)
				{
					for (int i = 0; i < m_astrMissedLogLines.GetSize(); i++)
						OutputLogText(m_astrMissedLogLines[i], bDebug);
					m_astrMissedLogLines.RemoveAll();
				}
				OutputLogText(strLogLine2, bDebug);
				if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 0)
					m_wndServer.m_ctrlBoxSwitcher.SetItemState(0, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
d918 3
a920 3
			else
				m_astrMissedLogLines.Add(strLogLine2);
			ShowNotifier(strCleanLine, TBN_LOG, false, g_eMuleApp.m_pGlobPrefs->GetUseLogNotifier());
d922 3
d940 1
a940 1
	if ((strLine.GetLength() > 0) && (::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd)))
d946 1
a946 1
		m_wndServer.m_pctlServerMsgBox->AppendText(strTime, RGB(0,0,128));
d949 1
a949 1
		if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 1)
d1918 1
a1918 1
				CString		strLogText = g_eMuleApp.m_pdlgEmule->m_wndServer.logbox->GetToolTip();
@


1.265
log
@minor fix
@
text
@d1942 1
a1942 1
					strRuntime.Format(_T("%2u %s %02u:%02u"), uiDays, 
a1946 1
				strRuntime.Trim();
d1966 1
a1966 1
						strRuntime.Format(_T("%2u %s %02u:%02u"), uiDays,
a1970 1
					strRuntime.Trim();
@


1.264
log
@DebugLog lines shouldn't update taskbar
@
text
@d1947 1
d1972 1
@


1.263
log
@Updated tray dialog code from official v0.42g
@
text
@d654 1
a654 1
				AddDebugLogLine(true,_T("Timer called with no reason"));
@


1.262
log
@Ops...
@
text
@d132 1
a132 1
	if (m_hiconMyTray)
a149 4
	if (m_hiconMyTray)
	{
		DestroyIcon(m_hiconMyTray);
	}
d434 1
a434 1
	TraySetMinimizeToTray(g_eMuleApp.m_pGlobPrefs->DoMinToTray());
d1195 1
a1195 1
	if (g_eMuleApp.m_pGlobPrefs->DoMinToTray())
d1754 2
a1755 2
	if (m_hiconMyTray)
		TraySetIcon(m_hiconMyTray);
d1765 1
a1765 3
	CTrayDialog::OnCreate(lpCreateStruct);

	return 0;
@


1.261
log
@Moved FinSharedFiles to a timer to fix issues with hashing hung on start
Fixed Search buttons activation issues and More not working
@
text
@d570 1
a571 1
				g_eMuleApp.m_pSharedFilesList->SetOutputCtrl(&m_wndSharedFiles.m_ctlSharedFilesList);
d576 1
a576 1
				g_eMuleApp.m_pSharedFilesList->FindSharedFiles();
@


1.260
log
@Unified definitions for client name.
@
text
@d576 1
@


1.259
log
@What a mess... this is final (kuchin and I hope so :P)
@
text
@d358 1
a358 1
	SetWindowText(_T("eMule Plus v") CURRENT_VERSION_LONG);
d963 2
a964 2
		sOut.Format(_T("%s%s: EXCEPTION! (%s) Report to eMule Plus developers. Line %ld in file %s"),
			RGB_LOG_ERROR, strFunctionName, msg, nLine, sFile);
d1187 1
a1187 1
		strTitle.Format(_T("(U:%.1f D:%.1f) eMule Plus v") CURRENT_VERSION_LONG, lastuprate_kB, lastdownrate_kB);
@


1.258
log
@a better way to disable tooltips
@
text
@d1384 6
a1389 1
			g_eMuleApp.m_pServerConnect->Disconnect();
@


1.257
log
@small correction
@
text
@d461 1
a461 1
	m_ttip.SetNotify(m_hWnd); 
d1892 3
a1894 1
	m_ttip.RelayEvent(pMsg);
a1899 3
	if (g_eMuleApp.m_pGlobPrefs->GetToolTipDelay() == 0)
		return FALSE;
	
@


1.256
log
@Tooltip delay of zero is now used to disable tooltips
@
text
@d458 1
a458 1
	m_ttip.SetDelayTime(TTDT_INITIAL, g_eMuleApp.m_pGlobPrefs->GetToolTipDelay()*1000+25);
@


1.255
log
@Advanced Log tooltip on status bar;
Tooltip width should be now correct
@
text
@d1898 3
@


1.254
log
@DebugLog formating and changes
@
text
@d371 1
a371 2
	m_ctlStatusBar.Create(WS_CHILD|WS_VISIBLE|CCS_BOTTOM|SBARS_SIZEGRIP|SBT_TOOLTIPS,CRect(0,0,0,0), this, IDC_STATUSBAR);
	m_ctlStatusBar.EnableToolTips(true);
a855 1
		{
a856 2
			m_ctlStatusBar.SetTipText(SB_MESSAGETEXT,strCleanLine);
		}
a1016 1
			m_ctlStatusBar.SetTipText(SB_MESSAGETEXT,m_ctlStatusBar.GetText(0));
d1910 12
d1936 1
a1936 1
					strRuntime.Format("%02u:%02u:%02u", uiHours, uiMinutes, runTime.GetSeconds());
d1940 1
a1940 1
					strRuntime.Format( "%2u %s %02u:%02u", uiDays, 
d1960 1
a1960 1
						strRuntime.Format("%02u:%02u:%02u", uiHours, uiMinutes, ServerDuration.GetSeconds());
d1964 1
a1964 1
						strRuntime.Format( "%2u %s %02u:%02u", uiDays,
d1974 1
a1974 1
				SetFocus();
d1989 1
a1989 1
				SetFocus();
d2003 1
a2003 1
				SetFocus();
d2017 1
a2017 1
				SetFocus();
d2031 1
a2031 1
				SetFocus();
@


1.253
log
@minor changes, fixes and improvements
@
text
@d2435 1
a2435 1
		AddDebugLogLine(false, RGB_LOG_ERROR + _T("%s : %s "), GetResString(IDS_BACKUP_ERROR2), GetResString(IDS_BACKUP_ERROR));
@


1.252
log
@Improved category tabs tooltips; Reduced tooltips visiblity time; some tooltips related fixes
@
text
@d620 1
a620 1
			//	Start server anyway, but you'll get response
d1691 12
a1702 4

	if( !g_eMuleApp.m_pGlobPrefs->IsConfirmDisconnectEnabled() ||
		( MessageBox(GetResString(IDS_BACKUP_SURE), GetResString(IDS_IRC_DISCONNECT),
		MB_ICONQUESTION | MB_YESNO | MB_DEFBUTTON2) == IDYES ) )
d1705 1
a1705 1
		g_eMuleApp.m_pServerConnect->Disconnect();
a1706 1
		g_eMuleApp.OnlineSig();
d1708 1
@


1.251
log
@Minor formating changes and corrections
Added ed2k server link processing at search window
@
text
@d458 1
a458 1
	m_ttip.SetDelayTime(TTDT_AUTOPOP, 20000); 
@


1.250
log
@double clicking the status bar's session time switches to statistics dialog;
added session time tooltip;
added uploaded/downloaded data to clients tooltips
@
text
@a70 1
//	ON_MESSAGE(WM_TASK_UI, OnProcessTaskUI)
d272 1
a272 1
				// utf8? convert!
d283 2
a284 1
				if(pBuf[0] == 'O' && pBuf[1] == 'K') // everything allright
a293 3
//	if(!bDone)
//		maybe add log line "couldn't check latest version"?

d335 1
a335 1
//	set rebar
a354 17

//	Insert address bar
	/*
	CComboBoxEx *combo = new CComboBoxEx();
	CRect rcAddress;
	combo->Create(WS_CHILD | WS_CLIPCHILDREN | WS_TABSTOP | CCS_NODIVIDER | CBS_DROPDOWN, CRect(0, 0, 0, 200), this, AFX_IDW_TOOLBAR + 1);
	combo->GetWindowRect(&rcAddress);
	rbbi.cbSize       = sizeof(REBARBANDINFO);
	rbbi.fMask        = RBBIM_SIZE | RBBIM_CHILD | RBBIM_CHILDSIZE | RBBIM_STYLE | RBBIM_TEXT;
	rbbi.cxMinChild   = 0;
	rbbi.cyMinChild   = rcAddress.Height();
	rbbi.cx           = 0;
	rbbi.fStyle       = RBBS_NOGRIPPER | RBBS_BREAK;
	rbbi.hwndChild    = combo->GetSafeHwnd();
	rbbi.lpText       = _T("Address");
	m_ctlReBar.InsertBand(-1, &rbbi);
	 */
d370 1
a370 1
	// set m_ctlStatusBar
d376 1
a376 1
	// create dialog pages
d419 1
a419 1
	// set updateintervall of graphic rate display (in seconds)
d422 1
a422 1
	// anchors
d593 1
a593 1
			//	display own userhash
d596 1
a596 1
			//	display eMule Plus version
d621 1
a621 1
			//		only if it's enabled in preferences.
a687 1
		//v- eklmn: bugfix(12): improved output in m_ctlStatusBar (update only tray or window)
a694 1
		//^- eklmn: bugfix(12): improved output in m_ctlStatusBar (update only tray or window)
d879 1
a879 1
		//save to file
d892 1
a892 1
		// only when data save to file output them into GUI
a1008 1
		//TOOLTIP: GetResString(IDS_MAIN_BTN_DISCONNECT_TOOLTIP)
a1042 1
			//TOOLTIP: GetResString(IDS_MAIN_BTN_CONNECT_TOOLTIP)
a1064 2
			//TOOLTIP: GetResString(IDS_CONNECTTOANYSERVER)
			//m_ctlToolBar.AutoSize();
d1135 1
a1135 2
	//Cax2 - more detailed upload speed: 5 sec average instead of 40 sec average....
	// eklmn: calculate only once
d1142 1
a1142 1
	//string preparation doesn't depend on output
d1156 1
a1156 1
	// set SpeedMeterValues if option is activated
d1160 1
a1160 1
	// update window only
d1172 1
a1172 1
	// update tray only
d1175 1
a1175 1
		// set trayicon-icon
d1185 1
a1185 1
		//eklmn: it's better to do TrayUpdate here, cause of TrayToolTip
a1197 1
// ^-eklmn: bugfix(11): crazy output in statusbar (update only tray or window)
d1212 1
a1213 1
	ShowTransferRate(); //eklmn: bugfix(11): crazy output in statusbar (update only tray or window)
d1223 1
d1228 1
d1284 1
a1284 1
//
a1331 1
					_ASSERT(pFileLink != NULL);
d1333 1
a1338 1
					_ASSERT( pListLink != NULL );
d1340 1
d1343 1
d1350 1
a1350 3
					_ASSERT( pSrvLink != NULL );
					CServer* pSrv = new CServer(pSrvLink->GetPort(),pSrvLink->GetIP());		// netwolf 07.05.03 support non-ip ed2k server link
					_ASSERT( pSrv != NULL );
a1352 2

					// Barry - Default all new servers to high priority
d1359 1
d1375 1
a1375 1
		// command line command received
d1438 1
a1438 1
			// show usage
d1446 1
a1446 2
			// todo: output to console

d1469 1
a1469 1
		// show "unknown command";
d1517 3
a1519 3
	// we should call this before changing the state to APP_STATE_SHUTINGDOWN because
	// otherwise any log message inside this function (and there are few) will produce
	// message box
d1521 1
a1521 1
	if ( g_eMuleApp.m_pServerConnect->IsConnected() )
d1532 1
a1532 2
    // obaldin: disable redraws while shutting down
    // should take care of some crashes on exit
a1547 1
	//SetRedraw(false);  // is it enough to do only this, or do we need everything before too??
d1565 1
a1565 1
	// Barry - Restore old registry if required
d1569 1
a1569 1
    // obaldin: do we still need te following? Now that we disable the redraws?
d1580 1
a1580 1
	// All dialog windows created should be destroyed
a1589 1
	g_eMuleApp.m_pKnownFilesList->Save();	//Cax2 - moved here, should avoid crashes when closing & downloading.
d1591 4
a1594 1
	delete g_eMuleApp.m_pFakeCheck; //FakeCheck
d1725 1
a1725 3
	//HICON m_hiconMyTray;
	//if (m_hiconMyTray!=NULL) DestroyIcon(m_hiconMyTray);
	// set the limits of where the bar color changes (low-high)
d1728 1
a1728 1
	// set the corresponding color for each level
d1731 1
a1731 1
	// start it up
d1741 1
a1741 1
	// load our limit and color info
d1744 1
a1744 1
	// generate the icon (destroy these icon using DestroyIcon())
d1761 1
a1761 4
	/*if (g_eMuleApp.m_pGlobPrefs->UseSplashScreen()){
		ModifyStyleEx(0,WS_EX_LAYERED);
		SetLayeredWindowAttributes(0, 0, LWA_ALPHA);
	}*/
d1769 1
a1769 1
//START - enkeyDEV(kei-kun) -TaskbarNotifier-
a1824 1
//END - enkeyDEV(kei-kun) -TaskbarNotifier-
d1833 1
a1833 1
		// start added by InterCeptor (localization) 30.10.02
d1839 4
a1842 1
			ShowUserCount(g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetNumUsers(),g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetFiles());
a1843 1
#endif //OLD_SOCKETS_ENABLED
a1845 1
#ifdef OLD_SOCKETS_ENABLED
a1848 1
#endif //OLD_SOCKETS_ENABLED
d1851 2
a1852 2
		ShowTransferRate(true);	//eklmn: bugfix(11): crazy output in statusbar (update only tray or window)
		// end added by InterCeptor (localization) 30.10.02
d1920 1
d1922 1
d1924 6
a1929 1
					strRuntime.Format( "%2u %s %02u:%02u", uiDays, GetResString((uiDays == 1) ? IDS_LONGDAY : IDS_LONGDAYS), uiHours, uiMinutes );
d1931 3
a1933 1
				strInfo.Format(_T("<t=1><b>%s</b><br><hr=100%%><br><b>%s:</b><t>%s"), GetResString(IDS_STATS_TIMESTATS), GetResString(IDS_STATS_RUNTIME), strRuntime);
d1937 2
a1938 3
					uint32		dwServerDurationSecs = static_cast<uint32>((::GetTickCount() - g_eMuleApp.stat_serverConnectTime) / 1000);
					CTimeSpan	ServerDuration(static_cast<__time64_t>(dwServerDurationSecs));

d1944 1
d1946 1
d1948 7
a1954 1
						strRuntime.Format( "%2u %s %02u:%02u", uiDays, GetResString((uiDays == 1) ? IDS_LONGDAY : IDS_LONGDAYS), uiHours, uiMinutes );
d1982 5
a1986 4
				strInfo.Format(_T("<t=1><b>%s</b><br><hr=100%%><br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%s (%s)"),
					GetResString(IDS_TW_UPLOADS), GetResString(IDS_DL_SPEED), dblLastUprate_KB,
					GetResString(IDS_STATS_OVRHD), dblLastUprateOverhead_KB,
					GetResString(IDS_STATS_UDATA), CastItoXBytes(g_eMuleApp.stat_sessionSentBytes), CastItoXBytes(g_eMuleApp.stat_sessionSentBytes + g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()));
d1996 5
a2000 4
				strInfo.Format(_T("<t=1><b>%s</b><br><hr=100%%><br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%s (%s)"),
					GetResString(IDS_TW_DOWNLOADS), GetResString(IDS_DL_SPEED), dblLastDownrate_KB,
					GetResString(IDS_STATS_OVRHD), dblLastDownrateOverhead_KB,
					GetResString(IDS_STATS_DDATA), CastItoXBytes(g_eMuleApp.stat_sessionReceivedBytes), CastItoXBytes( g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()));
d2083 10
a2092 4
	switch (nID) {
		case MP_QS_PA: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(1)); g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(1)); break ;
		case MP_QS_UA: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate())); g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate())); break ;

d2102 6
a2107 2
	if (g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()<7) return 0;
	if (g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()<15) return g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()-3;
d2129 2
a2130 6
   		//Cax2 don't ask for confirmation when receiving a shutdown message...
		// [Lord KiRon]
		//EndDialog(0);
		CDialog::OnCancel(); // for some reason EndDialog() causes sometimes assertion in Window main loop
		// [/Lord KiRon]
		return TRUE;	//MooseTea fix
d2155 1
a2155 1
	g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.RemoveServer((CServer*)wParam); // sivka's bugfix
d2250 1
a2250 1
// Barry - To find out if app is running or shutting/shut down
d2265 1
a2265 1
//	Set trayicon-icon
d2305 1
a2305 1
	// Create a new directory if one does not exist
d2309 1
a2309 1
	//Copying files
d2321 1
a2321 1
	// Create a new directory if one does not exist
d2327 1
a2327 1
	//Additional Temp dirs backup
d2368 1
a2368 1
	// Start searching for files in the directory.
d2378 1
a2378 1
	// Copy each file to the backup directory
d2420 1
a2420 1
	// Close the search handle.
@


1.249
log
@Hide window later on close to show user that we are still working.
@
text
@d1942 39
@


1.248
log
@Double clicking on the messages/server pane in the status bar now switches to the according dialog; Formatting and name changes
@
text
@d1556 1
a1556 1
	g_eMuleApp.OnlineSig(); // Added By Bouc7
a1560 3
//sometimes application closing is long process....
	ShowWindow(SW_HIDE);

d1609 2
@


1.247
log
@Formatting and some improvements in tooltips code
@
text
@d391 1
a391 1
	m_ctlStatusBar.Create(WS_CHILD|WS_VISIBLE|CCS_BOTTOM|SBARS_SIZEGRIP|SBT_TOOLTIPS,CRect(0,0,0,0), this, IDC_STATUSBAR) ;	//Cax2 status bar tooltip
d685 1
a685 1
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
d1260 18
a1277 6
	else if (dlg==&m_wndServer) m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+1);
	else if (dlg==&m_dlgSearch) m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+3);
	else if (dlg==&m_wndSharedFiles) m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+4);
	else if (dlg==&m_wndChat) {m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+5); g_eMuleApp.m_pdlgEmule->m_wndChat.chatselector.ShowChat();}
	else if (dlg==&m_wndIRC) m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+6);
	else if (dlg==&m_dlgStatistics) {m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+7);m_dlgStatistics.ShowStatistics();}
a1928 14
int CEmuleDlg::GetPaneAtPosition(CPoint& point)
{
	CRect	rect;
	int		nParts = m_ctlStatusBar.GetParts(0, NULL);

	for (int i = 0; i<nParts; i++)
	{
		m_ctlStatusBar.GetRect(i, rect);
		if (rect.PtInRect(point))
			return i;
	}
	return -1;
} 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
d1941 1
a1941 1
		switch (GetPaneAtPosition(pt))
@


1.246
log
@improved status bar tooltips for upload/download
@
text
@d1934 2
a1935 2
	int						control_id = CWnd::FromHandle(pNotify->ti->hWnd)->GetDlgCtrlID();
	CString					info;
d1937 1
a1937 1
	if (control_id == IDC_STATUSBAR)
d1947 1
a1947 1
				CServer* server = g_eMuleApp.m_pServerConnect ? g_eMuleApp.m_pServerConnect->GetCurrentServer() : NULL;
d1949 4
a1952 1
				if (!server || !(server = g_eMuleApp.m_pServerList->GetServerByAddress(server->GetAddress(), server->GetPort())))
d1955 2
a1956 3
				info = server->GetUsersInfo4Tooltips();
 
				pNotify->ti->hIcon = CopyIcon(m_hiconUsers);
d1962 2
a1963 7
				double lastuprate_kB = static_cast<double>(g_eMuleApp.m_pUploadQueue->GetDataRateShown())/1024.0;
				double lastuprateoverhead_kB = static_cast<double>(g_eMuleApp.m_pUploadQueue->GetUpDataRateOverhead())/1024.0;

				info.Format(_T("<t=1><b>%s</b><br><hr=100%%><br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%s (%s)"),
					GetResString(IDS_TW_UPLOADS), GetResString(IDS_DL_SPEED), lastuprate_kB,
					GetResString(IDS_STATS_OVRHD), lastuprateoverhead_kB,
					GetResString(IDS_STATS_UDATA), CastItoXBytes(g_eMuleApp.stat_sessionSentBytes), CastItoXBytes( g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()));
d1965 5
a1969 1
				pNotify->ti->hIcon = CopyIcon(m_hiconTrans[(lastuprate_kB)?1:0]);
d1975 2
a1976 2
				double lastdownrate_kB = static_cast<double>(g_eMuleApp.m_pDownloadQueue->GetDataRate())/1024.0;
				double lastdownrateoverhead_kB = static_cast<double>(g_eMuleApp.m_pDownloadQueue->GetDownDataRateOverhead())/1024.0;
d1978 3
a1980 3
				info.Format(_T("<t=1><b>%s</b><br><hr=100%%><br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%.2f<br><b>%s:</b><t>%s (%s)"),
					GetResString(IDS_TW_DOWNLOADS), GetResString(IDS_DL_SPEED), lastdownrate_kB,
					GetResString(IDS_STATS_OVRHD), lastdownrateoverhead_kB,
d1982 1
a1982 2

				pNotify->ti->hIcon = CopyIcon(m_hiconTrans[(lastdownrate_kB)?3:2]);
d1988 1
a1988 1
				CServer* server = g_eMuleApp.m_pServerConnect ? g_eMuleApp.m_pServerConnect->GetCurrentServer() : NULL;
d1990 4
a1993 1
				if (!server || !(server = g_eMuleApp.m_pServerList->GetServerByAddress(server->GetAddress(), server->GetPort())))
d1996 1
a1996 8
				info = server->GetServerInfo4Tooltips();
				int			iImageIndex = 2;

				if (server->GetFailedCount() > 0)
					iImageIndex = 4;
				if (server->IsStaticMember())
					iImageIndex++;
				pNotify->ti->hIcon = g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.m_imageList.ExtractIcon(iImageIndex);
d2002 1
a2002 1
	pNotify->ti->sTooltip = info;
@


1.245
log
@Tooltips alignment is now automatic;  Improved status bar tooltips
@
text
@d1170 2
a1171 1
	if (g_eMuleApp.m_pGlobPrefs->ShowOverhead()) {
d1176 2
a1177 1
	else {
d1188 2
a1189 1
	if( IsWindowVisible() || bUpdateAll) {
d1200 2
a1201 1
	if(TrayIsVisible() || bUpdateAll) {
d1945 41
a2003 12
			case SB_NUMUSERS:
			{
				CServer* server = g_eMuleApp.m_pServerConnect ? g_eMuleApp.m_pServerConnect->GetCurrentServer() : NULL;

				if (!server || !(server = g_eMuleApp.m_pServerList->GetServerByAddress(server->GetAddress(), server->GetPort())))
					return FALSE;

				info = server->GetUsersInfo4Tooltips();
 
				pNotify->ti->hIcon = CopyIcon(m_hiconUsers);
				break;
			}
@


1.244
log
@Fixed potential crash which can be caused by control characters in server name and server description.
@
text
@d54 2
d477 8
d1041 2
a1042 1
		if (!iconOnly) {
a1044 1
			m_ctlStatusBar.SetTipText(SB_SERVER,server);
d1069 1
a1069 1
			if (!iconOnly) {
a1070 2
				m_ctlStatusBar.SetTipText(SB_SERVER,_T(""));
			}
d1093 2
a1094 1
			if (!iconOnly) {
a1096 1
				m_ctlStatusBar.SetTipText(SB_SERVER,_T(""));
d1138 2
a1139 6
	uint32 totaluser, totalfile;
	totaluser = totalfile = 0;
	if( users_toshow || files_toshow )
	 	g_eMuleApp.m_pServerList->GetUserFileStatus( totaluser, totalfile );
	CString sBuffer; // kuchin
	sBuffer.Format(_T("%u                                "),users_toshow);		//Cax2 spaces needed to activate tooltip
a1140 9
#ifdef OLD_SOCKETS_ENABLED
	if(g_eMuleApp.m_pServerConnect->IsConnected())
	{
		sBuffer.Format(_T("%s: %u (%s) | %s: %u (%s)"), GetResString(IDS_UUSERS), users_toshow, CastItoIShort(totaluser), GetResString(IDS_FILES), files_toshow, CastItoIShort(totalfile));
		m_ctlStatusBar.SetTipText(SB_NUMUSERS,sBuffer);
	} else {
		m_ctlStatusBar.SetTipText(SB_NUMUSERS,GetResString(IDS_STATS_WAITCONN));
	}
#endif //OLD_SOCKETS_ENABLED
d1200 1
a1200 1
		if(iMaxValue < g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate())
a1205 21
/*		// DbT:ShowServer (&SyruS)
		CString sServer;
#ifdef OLD_SOCKETS_ENABLED
		if (g_eMuleApp.m_pServerConnect->IsConnecting())
			sServer = GetResString(IDS_CONNECTING);
		else if (g_eMuleApp.m_pServerConnect->IsConnected())
			sServer.Format(_T("%s: %s"),GetResString(IDS_SERVER),g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetListName());
		else
			sServer = GetResString(IDS_NOTCONNECTED);
#endif //OLD_SOCKETS_ENABLED

		if(sServer.GetLength() >= 38) sServer= sServer.Left(35) + _T("...");
		// Workaround problem with tooltip on Win9x
		if(!(LOBYTE(g_eMuleApp.m_pGlobPrefs->GetWindowsVersion()) == 0x04))
			sServer.Append(_T("\n")+sBuffer);
		else
			sServer.Append(_T(" | ")+sBuffer);
		// DbT:End

		TraySetToolTip(sServer);
*/
d1863 1
a1863 5
			CString buffer;
			buffer.Format(_T("0                                ")); //Cax2 spaces needed to activate tooltip
			m_ctlStatusBar.SetTipText(SB_NUMUSERS,GetResString(IDS_STATS_WAITCONN));
			m_ctlStatusBar.SetText(buffer,SB_NUMUSERS,0);
			m_ctlStatusBar.SetTipText(SB_SERVER,_T(""));
d1907 71
@


1.243
log
@new FakeCheck autoupdate system
@
text
@d881 1
d953 1
@


1.242
log
@Disable scheduled backup and backup on exit if a file corruption is detected on start + minor changes
@
text
@d595 1
@


1.241
log
@better string processing
@
text
@d1635 2
a1636 2
	//N@@boleo (Backup feature)
	if (g_eMuleApp.m_pGlobPrefs->GetAutoBackup())
d2336 11
@


1.240
log
@Fixed synchronization of manual backup message boxes with Preferences dialog
(these message boxes weren't modal with respect to the Preferences window).
@
text
@d786 1
a786 1
	while( strLine != _T("") )
d795 1
a795 1
			if (strPart != _T(""))
d841 1
a841 1
			strLine = _T("");
d1455 1
a1455 2
			CString	down=_T("");
			CString	up=clcommand.Mid(7);
d1494 1
a1494 1
			pString = _T("");
@


1.239
log
@More correct way to display '&' in Notifier window; Improved string processing.
@
text
@d2190 2
a2191 6
		if (!automated)
		{
			if (MessageBox(GetResString(IDS_BACKUP_LONGTIME),GetResString(IDS_BACKUP_SURE),MB_ICONQUESTION|MB_YESNO)== IDYES)
				BackupFromTempDir("*.part",automated);
		}
		else
d2193 1
a2193 1
			BackupFromTempDir("*.part",automated);
d2197 1
a2197 1
		MessageBox(GetResString(IDS_BACKUP_SUCCESS),GetResString(IDS_BACKUP_COMPLETE),MB_OK);
@


1.238
log
@reverted last changes
@
text
@d1813 1
a1813 1
void CEmuleDlg::ShowNotifier(CString Text, int MsgType, bool ForceSoundOFF, bool bMsgEnabled)
d1817 3
a1819 3
	bool ShowIt = false;

	Text.Replace("&", "&&");
d1821 2
a1822 4
    if (bMsgEnabled)
	{
		m_wndTaskbarNotifier.Show(Text, MsgType, 500,g_eMuleApp.m_pGlobPrefs->NotificationDisplayTime());
		ShowIt = true;
a1824 3
    if (g_eMuleApp.m_pGlobPrefs->GetUseSoundInNotifier() && !ForceSoundOFF && ShowIt == true)
        PlaySound(g_eMuleApp.m_pGlobPrefs->GetNotifierWavSoundPath(), NULL, SND_FILENAME | SND_NOSTOP | SND_NOWAIT | SND_ASYNC);

d1834 1
a1834 1
    switch(msgType)
@


1.237
log
@minor string processing changes
@
text
@d884 1
a884 1
		CString				strLogLine2, strTime = currentTime.Format() + _T(": ");
d886 1
d896 3
a898 1
				_fputts(strTime + strCleanLine + _T('\n'), LogFile);
d955 1
d957 4
a960 2
		m_wndServer.m_pctlServerMsgBox->AppendText(currentTime.Format() + _T(": "), RGB(0,0,128));
		m_wndServer.m_pctlServerMsgBox->AppendText(strLine + _T('\n'));
@


1.236
log
@Double call removal (one is more than enough).
@
text
@d878 1
d884 1
a884 1
		CString			strLogLine2, strTime = currentTime.Format();
a885 1
		strTime += _T(": ");
d895 1
a895 3
				strTime += strCleanLine;
				strTime += _T('\n');
				_fputts(strTime, LogFile);
d946 1
a951 1
		CString			strTime = currentTime.Format();
d953 2
a954 4
		strTime += _T(": ");
		m_wndServer.m_pctlServerMsgBox->AppendText(strTime, RGB(0,0,128));
		strLine += _T('\n');
		m_wndServer.m_pctlServerMsgBox->AppendText(strLine);
@


1.235
log
@Some string processing improvements (thx Aw3)
@
text
@d1610 2
a1611 2
    m_wndSharedFiles.m_ctlSharedFilesList.DeleteAllItems();
    m_wndTransfer.m_ctlClientList.DeleteAllItems();
d1614 1
a1614 1
    m_wndTransfer.m_ctlDownloadList.DeleteAllItems();
a1616 1
	m_wndSharedFiles.m_ctlSharedFilesList.DeleteAllItems();
@


1.234
log
@Redone some changes on server connect and moved ed2k link processing
@
text
@d879 1
a879 3
	strLogLine.TrimRight(_T('\n'));
	strLogLine.TrimRight(_T(' '));
	strLogLine.TrimLeft(_T('\n'));
d949 1
a949 3
	strLine.TrimRight(_T('\n'));
	strLine.TrimRight(_T(' '));
	strLine.TrimLeft(_T('\n'));
@


1.233
log
@Changed the fix for auto server connect and serverlist update on start as it brought problems to some users. Now it should be ok.
@
text
@d456 1
a456 1
	// tray icon
d458 1
a458 1
	TrayMinimizeToTrayChanged(); // #zegzav (add)
d460 1
a460 1
	// Update Categories
d466 1
a466 6
	if (g_eMuleApp.m_pstrPendingLink){
		OnWMData(NULL,(LPARAM) &g_eMuleApp.m_sendStruct); // changed by Cax2 28/10/02
		delete g_eMuleApp.m_pstrPendingLink;
	}

	g_eMuleApp.m_pGlobPrefs->SetSmartIdState(1);		//Cax2 - smartId bugfix
a585 1
				KillTimer(nIDEvent);
a587 2
				if (SetTimer(INIT_TIMER_ID, 300, NULL) == 0)
					AfxMessageBox(GetResString(IDS_ERR_FAILEDTIMER));
d589 1
d633 7
d641 1
a641 1
				if (g_eMuleApp.m_pGlobPrefs->DoAutoConnect())
d660 1
@


1.232
log
@Removed status messages that shouldn't be there
@
text
@d591 1
d594 2
a635 3
//				if (g_eMuleApp.m_pGlobPrefs->DoAutoConnect())
//					OnBnClickedButton2();

d640 4
d660 1
a660 1
			case 3:	// State 3 - 300ms after connect
@


1.231
log
@I'm a sinner! WebServer rename feature added
@
text
@d533 1
a533 1
			g_eMuleApp.AddDebugLogLine(true, MessageText);
d547 1
a547 1
               	g_eMuleApp.AddDebugLogLine(true, CString("SCHEDULER: day excepted!"));
d564 1
a564 1
				g_eMuleApp.AddDebugLogLine(true, MessageText);
@


1.230
log
@Changed last fix (no need to be as complex as before).
@
text
@d67 1
d2110 17
@


1.229
log
@Fix for auto server connection when update server list on start is used
@
text
@d632 2
a633 2
				if (!g_eMuleApp.m_pGlobPrefs->AutoServerlist() && g_eMuleApp.m_pGlobPrefs->DoAutoConnect())
					OnBnClickedButton2();
@


1.228
log
@New URL for version check
@
text
@d632 1
a632 1
				if (g_eMuleApp.m_pGlobPrefs->DoAutoConnect())
@


1.227
log
@Improved string processing.
@
text
@d255 1
a255 1
	strUrl.Format( _T("http://emuleplus.servehttp.com/get_version.php?version=%i&language=%i"),
d639 2
a640 1
			//	Get current version from internet, if 12 hours elapsed
d643 1
a643 1
					(time(NULL) - g_eMuleApp.m_pGlobPrefs->GetAutoCheckLastTime()) > 12*3600)
@


1.226
log
@Removed statistics retrieval
@
text
@d1493 2
a1494 1
			pString.AppendFormat(_T("\n") + GetResString(IDS_UPDOWN),static_cast<double>(g_eMuleApp.m_pUploadQueue->GetDataRate())/1024.0, static_cast<double>(g_eMuleApp.m_pDownloadQueue->GetDataRate())/1024.0);
d1496 1
a1496 3
			pString += _T("\n") + g_eMuleApp.m_pDownloadList->GetPartFilesStatusString();

			_ftprintf(file, _T("%s"), pString);
@


1.225
log
@minor improvements
@
text
@d178 1
d200 1
a200 1
		HINTERNET hURL = InternetOpenUrl(hOpen, strUrl, _T(""), NULL, /*INTERNET_FLAG_NO_AUTH | */INTERNET_FLAG_NO_CACHE_WRITE, NULL);
d246 53
@


1.224
log
@some code refactoring :)
@
text
@d832 1
a832 1
			FILE* LogFile = NULL;
d834 1
a834 6
			if (bDebug)
				LogFile = _tfopen(m_strDebugLogFilePath, "a");
			else
				LogFile = _tfopen(m_strLogFilePath , "a");
			
			if (LogFile)
@


1.223
log
@Improved string processing
@
text
@d828 20
a863 11
			if (g_eMuleApp.m_pGlobPrefs->LogToFile())
			{
				FILE* LogFile = _tfopen(m_strDebugLogFilePath, "a");
				if (LogFile)
				{
					strTime += strCleanLine;
					strTime += _T('\n');
					_fputts(strTime, LogFile);
					fclose(LogFile);
				}
			}
a881 11
			if (g_eMuleApp.m_pGlobPrefs->LogToFile())
			{
				FILE* LogFile = _tfopen(m_strLogFilePath , "a");
				if (LogFile)
				{
					strTime += strCleanLine;
					strTime += _T('\n');
					_fputts(strTime, LogFile);
					fclose(LogFile);
				}
			}
@


1.222
log
@syntax correctur for my optimization
@
text
@d117 1
a117 1
	m_strLogFilePath.Format( _T("%seMule.log"), g_eMuleApp.m_pGlobPrefs->GetAppDir());
d321 1
a321 4
	CString			strBuffer;

	strBuffer.Format(_T("eMule Plus v%s"),CURRENT_VERSION_LONG);
	SetWindowText(strBuffer);
d824 1
a824 1
		CString			strTime = currentTime.Format();
d827 1
a827 1
		strLogLine = RGB_DARK_BLUE + strTime + RGB_DEFAULT + strLogLine + _T("\n");
d838 1
a838 1
				OutputLogText(strLogLine, bDebug);
d843 1
a843 1
				m_astrMissedDebugLogLines.Add(strLogLine);
d866 1
a866 1
				OutputLogText(strLogLine, bDebug);
d871 1
a871 1
				m_astrMissedLogLines.Add(strLogLine);
d1182 6
a1187 4
	if (!TrayIsVisible() && g_eMuleApp.m_pGlobPrefs->ShowRatesOnTitle()) {
		CString buffer;
		buffer.Format(_T("(U:%.1f D:%.1f) eMule Plus v%s"),lastuprate_kB, lastdownrate_kB, CURRENT_VERSION_LONG);
		SetWindowText(buffer);
@


1.221
log
@small correction for previous change
@
text
@d116 2
a117 2
	m_strDebugLogFilePath.Format(_T("%s%s"), g_eMuleApp.m_pGlobPrefs->GetAppDir(), _T("debug.log"));
	m_strLogFilePath.Format(_T("%s%s"), g_eMuleApp.m_pGlobPrefs->GetAppDir(), _T("eMule.log"));
@


1.220
log
@speed optimization (removed recreation of log-filenames)
@
text
@d116 1
a116 1
	m_strDebugLogFilePath.Format(_T("%s%s"), g_eMuleApp.m_pGlobPrefs->GetAppDir, _T("debug.log"));
@


1.219
log
@Improved string processing
@
text
@d116 3
d826 1
a826 1
		COleDateTime	currentTime(COleDateTime::GetCurrentTime());
d849 1
a849 5
				CString LogFilePath = g_eMuleApp.m_pGlobPrefs->GetAppDir();

				LogFilePath += _T("debug.log");

				FILE* LogFile = fopen(LogFilePath, "a");
d854 1
a854 1
					fputs(strTime, LogFile);
d878 1
a878 5
				CString LogFilePath = g_eMuleApp.m_pGlobPrefs->GetAppDir();

				LogFilePath += _T("eMule.log");

				FILE* LogFile = fopen(LogFilePath , "a");
d883 1
a883 1
					fputs(strTime, LogFile);
@


1.218
log
@Improved processing of the "startup"/"session time" timer;
Improved string processing.
@
text
@d728 1
a728 1
		iTagEnd = strLine.Find(_T(">"));
d798 1
a798 1
			int iTagEnd = strCleanLine.Find(_T(">"), iTagStart + 7);
d985 1
a985 1
			m_ctlStatusBar.SetText(GetResString(IDS_MAIN_CONNECTEDTO) + _T(" ") + CString(server),SB_MESSAGETEXT,0);
@


1.217
log
@Improved string processing;
Optimized time to string conversion; formatting.
@
text
@a526 1
		KillTimer(nIDEvent);
d540 1
d596 3
a610 14
	if (nIDEvent == INIT_TIMER_ID)
	{
	    if (m_iStatus < 3)
		{
	        if (!SetTimer(INIT_TIMER_ID,300,NULL))
	            AfxMessageBox(GetResString(IDS_ERR_FAILEDTIMER));
		}
		else if (m_iStatus == 3)
		{
	        if (!SetTimer(INIT_TIMER_ID,1000,NULL))
	            AfxMessageBox(GetResString(IDS_ERR_FAILEDTIMER));
		}
	}

d823 4
a826 3
		CString strTime;
		COleDateTime currentTime(COleDateTime::GetCurrentTime());
		strTime.Format(_T("%s: "), currentTime.Format());
d910 4
a913 3
		CString strTime;
		COleDateTime currentTime(COleDateTime::GetCurrentTime());
		strTime.Format("%s: ", currentTime.Format());
d931 3
a933 2
		sOut.Format(RGB_LOG_ERROR + _T("%s: EXCEPTION! (%s) Report to eMule Plus developers. Line %ld in file "), strFunctionName, msg, nLine);
		sOut += CString(sFile);
@


1.216
log
@Added optional confirmations for disconnect and friend deletion
@
text
@d827 5
a831 4
	strLogLine.Replace(_T("\r"),_T(""));
	strLogLine.TrimLeft('\n');
	strLogLine.TrimRight('\n');
	strLogLine.TrimRight(' ');
d856 4
a859 1
				CString LogFilePath = g_eMuleApp.m_pGlobPrefs->GetAppDir() + CString("debug.log");
d863 3
a865 1
					fputs(strTime + strCleanLine + _T("\n"), LogFile);
d896 3
a898 1
					fputs(strTime + strCleanLine + _T("\n"), LogFile);
d913 5
a917 4
	strLine.Replace(_T("\r"),_T(""));
	strLine.TrimLeft('\n');
	strLine.TrimRight('\n');
	strLine.TrimRight(' ');
d924 2
a925 1
		m_wndServer.m_pctlServerMsgBox->AppendText(strLine + _T("\n"));
d1062 8
a1069 3
	uint64		iRunTimeSecs = (uint64)((::GetTickCount()-g_eMuleApp.stat_starttime)/1000);
	CTimeSpan	runTime(static_cast<__time64_t>(iRunTimeSecs));
	CString		strBuffer, strDay;
d1071 1
a1071 1
	if (runTime.GetDays() == 0)
d1073 1
a1073 1
		strBuffer.Format("%02d:%02d:%02d",runTime.GetHours(),runTime.GetMinutes(),runTime.GetSeconds());
d1077 2
a1078 11
		if (runTime.GetDays() == 1)
		{
			strDay = GetResString(IDS_LONGDAY);
		}
		else
		{
			strDay = GetResString(IDS_LONGDAYS);
		}

		strBuffer.Format( "%2d %s %02d:%02d",static_cast<int>(runTime.GetDays()),strDay,runTime.GetHours(),
						  runTime.GetMinutes() );
d1081 1
a1081 1
	m_ctlStatusBar.SetText(strBuffer,SB_SESSIONTIME,0);
d1510 7
a1516 4
	if (g_eMuleApp.m_app_state == g_eMuleApp.APP_STATE_RUNNING )
	if (g_eMuleApp.m_pGlobPrefs->IsConfirmExitEnabled())
			if (IDNO==MessageBox(GetResString(IDS_MAIN_EXIT),GetResString(IDS_MAIN_EXITTITLE),MB_YESNO | MB_DEFBUTTON2)) return;

d1525 1
a1525 1
   	g_eMuleApp.m_app_state = g_eMuleApp.APP_STATE_SHUTINGDOWN;
@


1.215
log
@Fixed localization issues, removed old non-used code
@
text
@d557 3
a559 1
			//	display used optimization
d563 1
a563 1
						AddLogLine(false, GetResString(IDS_OPTIMIZATION_NO));
d566 1
a566 1
						AddLogLine(false, GetResString(IDS_OPTIMIZATION_MMX));
d569 1
a569 1
						AddLogLine(false, GetResString(IDS_OPTIMIZATION_AMD));
d573 1
a573 1
						AddLogLine(false, GetResString(IDS_OPTIMIZATION_SSE));
d576 1
a628 1
	CAboutDlg dlgAbout;
d632 3
d637 1
d639 1
a639 1
		        if(g_eMuleApp.m_pGlobPrefs->GetCloseToTray())
d883 4
a886 1
				CString LogFilePath = g_eMuleApp.m_pGlobPrefs->GetAppDir() + CString("eMule.log");
d1685 4
d1690 1
a1690 1
	g_eMuleApp.m_pServerConnect->Disconnect();
d1692 2
a1693 1
	g_eMuleApp.OnlineSig();
@


1.214
log
@Updated handling of multiple instances so you can send commands to the one you want to
@
text
@d561 1
a561 1
						AddLogLine(false, _T("no processor optimizations used"));
d564 1
a564 1
						AddLogLine(false, _T("MMX optimizations active"));
d567 1
a567 1
						AddLogLine(false, _T("AMD optimizations active"));
d571 1
a571 1
						AddLogLine(false, _T("SSE optimizations active"));
@


1.213
log
@list processing optimization
@
text
@a17 4

// emuleDlg.cpp : Implementierungsdatei
//

d56 1
a61 11
	ON_COMMAND(MP_RESTORE, RestoreWindow)
/*
	// quick-speed changer --
	ON_COMMAND_RANGE(MP_QS_U10, MP_QS_UP10, QuickSpeedUpload)
	ON_COMMAND_RANGE(MP_QS_D10, MP_QS_DC, QuickSpeedDownload)
	//--- quickspeed - paralize all ---
	ON_COMMAND_RANGE(MP_QS_PA, MP_QS_UA, QuickSpeedOther)
	// quick-speed changer -- based on xrmb
*/
	ON_REGISTERED_MESSAGE(UWM_ARE_YOU_EMULE, OnAreYouEmule)

a66 1

a67 1

d69 1
d172 1
a172 1
  return UWM_ARE_YOU_EMULE;
d2164 1
a2164 1
	int	iTempDir = 1;
@


1.212
log
@Minor change
@
text
@d1321 1
a1321 1
			_ASSERT( pLink !=0 );
d1327 1
a1327 1
					_ASSERT(pFileLink !=0);
d1334 1
a1334 1
					_ASSERT( pListLink !=0 );
d1344 1
a1344 1
					_ASSERT( pSrvLink !=0 );
d1346 1
a1346 1
					_ASSERT( pSrv !=0 );
d2179 3
a2181 3
	int iTempDir = 1;
	for (POSITION pos = g_eMuleApp.m_pGlobPrefs->m_tempDirList.GetHeadPosition(); pos != 0;
		 g_eMuleApp.m_pGlobPrefs->m_tempDirList.GetNext(pos))
d2183 1
a2183 1
		CString strSearchPath(g_eMuleApp.m_pGlobPrefs->m_tempDirList.GetAt(pos).GetBuffer());
@


1.211
log
@formatting;
optimzations in UploadQueue.cpp;
removing doubled ';'
@
text
@d676 2
a677 1
	if (!m_bStartUpMinimized) {
d679 1
d684 2
a685 1
	if (IsIconic()){
d699 2
a700 1
	else{
d717 14
a730 9
    if (!g_eMuleApp.m_pServerConnect->IsConnected())
      //connect if not currently connected
	  if (!g_eMuleApp.m_pServerConnect->IsConnecting()  ) StartConnection(); else {
		  g_eMuleApp.m_pServerConnect->StopConnectionTry();
		  ShowConnectionState(false);
	  }
    else
      //disconnect if currently connected
      CloseConnection();
@


1.210
log
@Added command line to force the save of preferences (statistics update)
@
text
@d476 1
a476 1
		}		
d489 1
a489 1
								g_eMuleApp.m_pGlobPrefs->GetSCHShift1Upload(), 
d494 1
a494 1
		} 
d499 6
a504 6
			if ((dayOfWeek==2 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptMon()) 
				|| (dayOfWeek==3 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptTue()) 
				|| (dayOfWeek==4 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptWed()) 
				|| (dayOfWeek==5 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptThu()) 
				|| (dayOfWeek==6 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptFri()) 
				|| (dayOfWeek==7 && g_eMuleApp.m_pGlobPrefs->IsSCHExceptSat()) 
d508 2
a509 2
			} 
			else 
d1067 1
a1067 1
	
d1716 1
a1716 1
	COLORREF pColors16[1] = { RGB(1,255,1) };;
@


1.209
log
@formatting;
minor change in LanCast preferences loading;
changed the SearchDlg code to not duplicate the code
@
text
@d1401 5
@


1.208
log
@Improved hash to string conversion
@
text
@d1287 2
a1288 1
	if (data->dwData == OP_ED2KLINK){
d1290 1
a1290 1
		if( g_eMuleApp.m_pGlobPrefs->IsBringToFront() )
d1305 2
a1306 1
		try {
d1313 3
a1315 2
			switch (pLink->GetKind()) {
			case CED2KLink::kFile:
d1320 1
d1322 1
a1322 2
				break;
			case CED2KLink::kServerList:
d1329 1
d1331 1
a1331 2
				break;
			case CED2KLink::kServer:
d1348 1
d1350 2
a1351 3
				break;
			default:
				break;
d1354 3
a1356 1
		} catch(...) {
d1360 3
a1362 1
	} else if (data->dwData==OP_CLCOMMAND){
d1403 3
a1405 2
			CString down=_T("");
			CString up=clcommand.Mid(7);
d1412 4
a1415 2
			if (down.GetLength()>0) g_eMuleApp.m_pGlobPrefs->SetMaxDownload(_tstoi(down));
			if (up.GetLength()>0) g_eMuleApp.m_pGlobPrefs->SetMaxUpload(_tstoi(up));
d1420 1
a1420 1
		if (clcommand=="help" || clcommand=="/?")
d1426 1
a1426 1
		if (clcommand=="status")
d1428 1
a1428 1
			CString pString;
@


1.207
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d567 1
a567 1
				AddLogLine(false, _T("%s: %s"), GetResString(IDS_INFLST_USER_USERHASH), FileHashToString(g_eMuleApp.m_pGlobPrefs->GetUserHash()));
@


1.206
log
@removed MOBILE_MULE and JUMPSTART defines + minor improvements (thx aw3)
@
text
@d1102 1
a1102 1
void CEmuleDlg::ShowMessageState(uint8 iconnr)
@


1.205
log
@Formatting, comments, and name changes.
Removed old #defines
@
text
@a440 1
#ifdef MOBILE_MULE
a441 1
#endif //MOBILE_MULE
@


1.204
log
@get rid of "1 days..."   // what is ifdef OLD used for ? is it still needed ??
@
text
@a1069 4
#ifdef OLD
		strBuffer.Format( "%2d %s %02d:%02d:%02d",static_cast<int>(runTime.GetDays()),strDay,runTime.GetHours(),
						  runTime.GetMinutes(),runTime.GetSeconds() );
#else
a1071 1
#endif OLD
@


1.203
log
@Formatting, name changes and deleting spaces and tabs at end of lines
@
text
@d1053 1
a1053 1
	CString		strBuffer;
d1061 9
d1071 1
a1071 1
		strBuffer.Format( "%2d %s %02d:%02d:%02d",static_cast<int>(runTime.GetDays()),GetResString(IDS_DAYS),runTime.GetHours(),
d1074 1
a1074 1
		strBuffer.Format( "%2d %s %02d:%02d",static_cast<int>(runTime.GetDays()),GetResString(IDS_DAYS),runTime.GetHours(),
a1561 3

	//--- xrmb:parttraffic ---
	//--- we need this, because if it is not here emule will crash during repaint of not existing list-items ---
a1562 1
	//--- :xrmb ---
@


1.202
log
@Version check moved from Serverinfo to Log with RGB_LOG_NOTICE and show at status line.
@
text
@d91 3
a93 3
//Lucas - 08-Jan Define settig the Timer ID to be used. 
//Could be interesting to standarize the TIMER_IDs (there are many already) 
#define INIT_TIMER_ID 1234 // This is a magic number...  
d188 1
a188 1
} 
d198 2
a199 2
		_T("http://emuleplus.servehttp.com/get_version.php?version=%i&language=%i&os=%i&nt=%i&webserver=%i&lancast=%i&mobilemule=%i&cpu=%i"), 
		CURRENT_PLUS_VERSION, 
d236 1
a236 1
						CURRENT_PLUS_VERSION, 
d259 1
a259 1
{	
d263 1
a263 1
	
d275 1
a275 1
	SetIcon(m_hIcon, TRUE);			
d347 1
a347 1
	
d382 1
a382 1
	m_wndServer.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d384 1
a384 1
	m_wndTransfer.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d386 1
a386 1
	m_wndSharedFiles.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d388 1
a388 1
	m_dlgSearch.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d390 1
a390 1
	m_wndChat.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d394 1
a394 1
	m_dlgStatistics.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d541 1
a541 1
	
d552 1
a552 1
				
d594 1
a594 1
			
d621 4
a624 4
	
	if (nIDEvent == INIT_TIMER_ID) 
	{ 
	    if (m_iStatus < 3) 
d626 2
a627 2
	        if (!SetTimer(INIT_TIMER_ID,300,NULL)) 
	            AfxMessageBox(GetResString(IDS_ERR_FAILEDTIMER)); 
d631 2
a632 2
	        if (!SetTimer(INIT_TIMER_ID,1000,NULL)) 
	            AfxMessageBox(GetResString(IDS_ERR_FAILEDTIMER)); 
d635 1
a635 1
	
d644 1
a644 1
	switch(nID & 0xFFF0) 
d647 1
a647 1
			dlgAbout.DoModal();		
d650 1
a650 1
		        if(g_eMuleApp.m_pGlobPrefs->GetCloseToTray()) 
d674 1
a674 1
void CEmuleDlg::OnPaint() 
d715 1
a715 1
    if (!g_eMuleApp.m_pServerConnect->IsConnected()) 
d736 1
a736 1
	COLORREF crColor = GetSysColor(COLOR_WINDOWTEXT);			
d783 1
a783 1
				crColor = crNewColor;	
d973 1
a973 1
				
d975 1
a975 1
		if (g_eMuleApp.m_pServerConnect->IsLowID()) 
d977 1
a977 1
		 else 
d980 1
a980 1
		
d991 1
a991 1
		if (g_eMuleApp.m_pServerConnect->IsConnecting()) 
d1007 1
a1007 1
			
d1015 2
a1016 2
		} 
		else 
d1090 1
a1090 1
		sBuffer.Format(_T("%s: %u (%s) | %s: %u (%s)"), GetResString(IDS_UUSERS), users_toshow, CastItoIShort(totaluser), GetResString(IDS_FILES), files_toshow, CastItoIShort(totalfile)); 
d1201 1
a1201 1
	if (g_eMuleApp.m_pGlobPrefs->DoMinToTray()) 
d1205 2
a1206 2
	} 
	else 
d1226 1
a1226 1
 	{ 
d1287 2
a1288 1
		if( g_eMuleApp.m_pGlobPrefs->IsBringToFront() ){
d1290 1
d1292 3
a1294 1
			else if (TrayHide()){
d1297 4
a1300 2
		else
			SetForegroundWindow();
d1303 1
a1303 1
			CString link2;			
d1319 3
a1321 3
					CED2KServerListLink* pListLink = pLink->GetServerListLink(); 
					_ASSERT( pListLink !=0 ); 
					CString strAddress = pListLink->GetAddress(); 
d1339 2
a1340 2
					if (!g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.AddServer(pSrv,true)) 
						delete pSrv; 
d1419 1
a1419 1
			
d1439 1
a1439 1
			
d1485 1
a1485 1
	if (g_eMuleApp.m_pGlobPrefs->IsConfirmExitEnabled()) 
d1489 2
a1490 2
	// otherwise any log message inside this function (and there are few) will produce 
	// message box 
d1544 1
a1544 1
 
d1593 3
a1595 3
	
	m_pSystrayDlg = new CMuleSystrayDlg(this,pt, 
									g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate(), 
d1625 1
a1625 1
			{	
d1682 1
a1682 1
		TrayHide();	
d1688 1
a1688 1
void CEmuleDlg::ShowStatistics() 
d1690 1
a1690 1
	m_dlgStatistics.ShowStatistics();	
d1711 1
a1711 1
	else 
d1714 1
a1714 1
		
d1747 1
a1747 1
void CEmuleDlg::ShowNotifier(CString Text, int MsgType, bool ForceSoundOFF, bool bMsgEnabled) 
d1772 1
a1772 1
	msgType = m_wndTaskbarNotifier.GetMessageType();	
d1792 1
a1792 1
			SetActiveDialog(&m_wndServer);	
d1797 1
a1797 1
			SetActiveDialog(&m_wndServer);	
d1851 1
a1851 1
	if (!g_eMuleApp.m_pServerConnect->IsConnected()) 
d1856 1
a1856 1
			StartConnection(); 
d1858 1
a1858 1
		else 
d1879 1
a1879 1
	{	
d1918 1
a1918 1
	}	
d1940 1
a1940 1
int CEmuleDlg::GetRecMaxUpload() 
d1943 1
a1943 1
	
d1953 1
a1953 1
BOOL CEmuleDlg::OnQueryEndSession() 
d1958 1
a1958 1
		return FALSE; 
d1962 1
a1962 1
		return TRUE; 
d1965 2
a1966 2
   	{ 
		g_eMuleApp.m_app_state = g_eMuleApp.APP_STATE_SHUTINGDOWN; 
d1969 2
a1970 2
		//EndDialog(0); 
		CDialog::OnCancel(); // for some reason EndDialog() causes sometimes assertion in Window main loop 
d1973 1
a1973 1
   	} 
d1977 1
a1977 1
   	return FALSE; 
d2085 1
a2085 1
	CTrayDialog::OnNcDestroy();	
d2092 1
a2092 1
	if (DownRateProcent>100) 
d2126 1
a2126 1
void CEmuleDlg::BackupFromAppDir(LPCSTR extensionToBack,bool automated)  
d2137 1
a2137 1
	
d2143 2
a2144 2
{  
	CString szTempPath = CString(g_eMuleApp.m_pGlobPrefs->GetTempDir()); 
d2175 1
a2175 1
		FILE* LogFile = _tfopen(tempDir, _T("w+")); 
d2188 1
a2188 1
	WIN32_FIND_DATA fileData;   
d2190 3
a2192 3
	BOOL fFinished = FALSE;     
	BOOL finderror = FALSE;  
	BOOL error = FALSE;  
d2197 4
a2200 2
	// Start searching for files in the directory.   
	SetCurrentDirectory(szPath);  
d2202 4
a2205 1
	hSearch = FindFirstFile(extensionToBack, &fileData);   
d2207 3
a2209 8
	if (hSearch == INVALID_HANDLE_VALUE)   
	{   
		finderror = TRUE;  
	}   

	// Copy each file to the backup directory 
	while (!fFinished && !finderror)   
	{   
d2211 1
a2211 1
		lstrcat(szNewPath,fileData.cFileName);   
d2213 2
a2214 2
		if (PathFileExists(szNewPath))  
		{  
d2222 1
a2222 1
					else 
d2230 2
a2231 2
		}  
		if (overWrite)  
d2236 18
a2253 18
		if (!FindNextFile(hSearch, &fileData))   
		{  
			if (GetLastError() == ERROR_NO_MORE_FILES)   
			{   
				fFinished = TRUE;   
			}   
			else   
			{   
				error = TRUE;  
			}   
		}  

	}   
	// Close the search handle.   
	if (!FindClose(hSearch))   
	{   
		finderror = TRUE;  
	}   
@


1.201
log
@Optimized scheduler code on startup
@
text
@d233 1
a233 1
					g_eMuleApp.m_pdlgEmule->AddServerMessageLine(strOut);
@


1.200
log
@fix for Scheduler shift on restart / fix for Preallocate handling of exceptions / eklmn fix for ICR
@
text
@d461 1
d463 18
a480 1
		if(secs > g_eMuleApp.m_pGlobPrefs->GetSCHShift1() || secs < g_eMuleApp.m_pGlobPrefs->GetSCHShift2())
d490 1
a490 1
			MessageText.Format( _T("Switching to Shift 1 (MaxU:%i MaxD:%i MaxC:%i Max5:%i)"),
d497 1
a497 1
		else if (secs > g_eMuleApp.m_pGlobPrefs->GetSCHShift2() || secs < g_eMuleApp.m_pGlobPrefs->GetSCHShift1()) 
d509 1
a509 1
               	g_eMuleApp.AddDebugLogLine(true, CString("Day excepted!"));
d521 1
a521 1
				MessageText.Format( _T("Switching to Shift 2 (MaxU:%i MaxD:%i MaxC:%i Max5:%i)"),
@


1.199
log
@Replaced punpcklqdq SSE2 CPU instruction with SSE punpckldq + Removed old MMX/AMD/SSE configurations defines
@
text
@d432 2
a433 11
	
/*	// kuchin - if somebody knows the meaning of this code here,
	// tell me please. cause i don't.
	//Cax2 - the test is meant for win9x (it also returns true for win NT and was to stop emule from autoconnecting too soon
	if(!(LOBYTE(g_eMuleApp.m_pGlobPrefs->GetWindowsVersion()) == 0x04))
	{
		if (g_eMuleApp.m_pGlobPrefs->DoAutoConnect())
			DisConnect();
	}
*/
	// Restore saved window placement
a438 1
	// the ShowTransferRate(true); is called in localite
d446 1
a446 1
	// splashscreen
d456 56
a511 3
#ifdef NEW_SOCKETS
//	g_eMuleApp.m_pEngine->Init(m_hWnd);
#endif //NEW_SOCKETS
@


1.198
log
@Minor changes on PartFile
Fix for eMuleLight template ed2k box
Fix for CDownloadQueue::GetFileByID (wrong optmized code)
@
text
@d514 16
a529 28
				#if !defined(MMX) && !defined(AMD) && !defined(SSE)
					switch (get_cpu_type())
					{
						case 1:
							AddLogLine(false, _T("no processor optimizations used"));
							break;
						case 2:
							AddLogLine(false, _T("MMX optimizations active"));
							break;
						case 3:
							AddLogLine(false, _T("AMD optimizations active"));
							break;
						case 4:
						case 5:
							AddLogLine(false, _T("SSE optimizations active"));
							break;
					}
				#else
					#ifdef MMX
						AddLogLine(false, _T("MMX optimizations active"));	
					#endif MMX
					#ifdef AMD
						AddLogLine(false, _T("AMD optimizations active"));	
					#endif AMD
					#ifdef SSE
						AddLogLine(false, _T("SSE optimizations active"));	
					#endif SSE
				#endif
@


1.197
log
@final fixes for ed2k source links
@
text
@d1697 5
a1701 1
    if (bMsgEnabled) {
@


1.196
log
@fixed string format buffer overflow with status command line argument + update of changelog
@
text
@d933 1
a933 1
			m_ctlStatusBar.SetText(GetResString(IDS_MAIN_CONNECTEDTO) + CString(server),SB_MESSAGETEXT,0);
@


1.195
log
@fixed log notifier text
@
text
@d1369 8
a1376 3
			if (g_eMuleApp.m_pServerConnect->IsConnected()) pString=GetResString(IDS_CONNECTED); else
				if (g_eMuleApp.m_pServerConnect->IsConnecting()) pString=GetResString(IDS_CONNECTING); else pString=GetResString(IDS_DISCONNECTED);
			_ftprintf(file, pString);
d1379 3
a1381 2
			pString.Format(_T("\n")+GetResString(IDS_UPDOWN),static_cast<double>(g_eMuleApp.m_pUploadQueue->GetDataRate())/1024.0, static_cast<double>(g_eMuleApp.m_pDownloadQueue->GetDataRate())/1024.0);
			_ftprintf(file, pString);
d1383 1
a1383 2
			pString=_T("\n")+g_eMuleApp.m_pDownloadList->GetPartFilesStatusString();
			_ftprintf(file, pString);
@


1.194
log
@more changes
@
text
@d833 1
a833 1
			ShowNotifier(txt, TBN_LOG, false, g_eMuleApp.m_pGlobPrefs->GetUseLogNotifier());
a860 3
		if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 1)
			m_wndServer.m_ctrlBoxSwitcher.SetItemState(1, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);

d866 2
@


1.193
log
@Ch-ch-ch-ch-Changes...
@
text
@d789 1
a789 1
		strLogLine.Insert(0, RGB_DARK_BLUE + strTime + RGB_DEFAULT);
a799 2
				if (m_wndServer.debugbox->GetTextLength() > 0)
					strLogLine.Insert(0, _T("\n"));
a804 3
			{
				if (m_astrMissedDebugLogLines.GetSize() > 0)
					strLogLine.Insert(0, _T("\n"));
a805 1
			}
a826 2
				if (m_wndServer.logbox->GetTextLength() > 0)
					strLogLine.Insert(0, _T("\n"));
a831 3
			{
				if (m_astrMissedLogLines.GetSize() > 0)
					strLogLine.Insert(0, _T("\n"));
a832 1
			}
a866 2
		if (m_wndServer.m_pctlServerMsgBox->GetTextLength() > 0)
			strTime = _T("\n") + strTime;
d868 1
a868 1
		m_wndServer.m_pctlServerMsgBox->AppendText(strLine);
@


1.192
log
@some more changes
@
text
@d128 2
a129 2
	m_strMissedLogLines = _T("");
	m_strMissedDebugLogLines = _T("");
d684 10
a693 15
	CString strText = strLogText;
	CString strLine, strPart;
	int iLineLength, iTagStart, iTagEnd, iIndex, iRed, iGreen, iBlue;
	COLORREF crColor;

	while( strText != _T("") )
	{
		iLineLength = strText.Find(_T("\n")) + 1;
		if (iLineLength == 0)
			iLineLength = strText.GetLength();
		strLine = strText.Left(iLineLength);
		strText.Delete(0, iLineLength);
		crColor = GetSysColor(COLOR_WINDOWTEXT);			

		while( strLine != _T("") )
d695 4
a698 3
			iTagStart = strLine.Find(_T("<COLOR="));
			iTagEnd = strLine.Find(_T(">"));
			if (( iTagStart != -1 ) && ( iTagEnd != -1 ))
d700 6
a705 4
				bool bColorFound = false;
				COLORREF crNewColor = crColor;
				strPart = strLine.Mid(iTagStart + 7, iTagEnd - iTagStart - 7);
				if (strPart != _T(""))
d707 2
a708 6
					if (strPart == _T("Default"))
					{
						crNewColor = GetSysColor(COLOR_WINDOWTEXT);
						bColorFound = true;
					}
					else if ((iIndex = strPart.Find(_T(','))) != -1)
d712 2
a713 1
						if ((iIndex = strPart.Find(_T(','))) != -1)
d723 4
a726 1
				if (bColorFound)
d728 5
a732 10
					if (iTagStart > 0)
					{
						strPart = strLine.Left(iTagStart);
						if (bDebug)
							m_wndServer.debugbox->AppendText(strPart, crColor);
						else
							m_wndServer.logbox->AppendText(strPart, crColor);
					}
					crColor = crNewColor;	
					strLine.Delete(0, iTagEnd + 1);
d734 2
d737 5
d743 2
a744 7
			{
				if (bDebug)
					m_wndServer.debugbox->AppendText(strLine, crColor);
				else
					m_wndServer.logbox->AppendText(strLine, crColor);
				strLine = _T("");
			}
d794 1
a794 1
				if (m_strMissedDebugLogLines.GetLength() > 0)
d796 3
a798 11
					OutputLogText(m_strMissedDebugLogLines + _T("\n") + strLogLine, bDebug);
					m_strMissedDebugLogLines = _T("");
				}
				else
				{
					if (m_wndServer.debugbox->GetTextLength() > 0)
						OutputLogText(_T("\n") + strLogLine, bDebug);
					else
						OutputLogText(strLogLine, bDebug);
					if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 2)
						m_wndServer.m_ctrlBoxSwitcher.SetItemState(2, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
d800 5
d808 3
a810 4
				if (m_strMissedDebugLogLines.GetLength() > 0)
					m_strMissedDebugLogLines += _T("\n") + strLogLine;
				else
					m_strMissedDebugLogLines = strLogLine;
a811 1

d827 1
a827 1
				if (m_strMissedLogLines.GetLength() > 0)
d829 3
a831 11
					OutputLogText(m_strMissedLogLines + _T("\n") + strLogLine, bDebug);
					m_strMissedLogLines = _T("");
				}
				else
				{
					if (m_wndServer.logbox->GetTextLength() > 0)
						OutputLogText(_T("\n") + strLogLine, bDebug);
					else
						OutputLogText(strLogLine, bDebug);
					if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() > 0)
						m_wndServer.m_ctrlBoxSwitcher.SetItemState(0, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
d833 5
d841 3
a843 4
				if (m_strMissedLogLines.GetLength() > 0)
					m_strMissedLogLines += _T("\n") + strLogLine;
				else
					m_strMissedLogLines = strLogLine;
a844 1

@


1.191
log
@removed FPU optimization indication from splash & about + added try/catch to OutputLogText
@
text
@d785 4
a788 4
	while ( (strLogLine.GetAt(0) == _T('\n')) || (strLogLine.GetAt(0) == _T('\r')))
		strLogLine.Delete(0, 1);
	while ((strLogLine.GetAt(strLogLine.GetLength() - 1) == _T('\n')) || (strLogLine.GetAt(strLogLine.GetLength() - 1) == _T('\r')) || (strLogLine.GetAt(strLogLine.GetLength() - 1) == _T(' ')))
		strLogLine.Delete(strLogLine.GetLength() - 1, 1);
d801 1
a801 1
					OutputLogText(m_strMissedDebugLogLines + _T("\r\n") + strLogLine, bDebug);
d807 1
a807 1
						OutputLogText(_T("\r\n") + strLogLine, bDebug);
a813 2
			else if (m_strMissedDebugLogLines.GetLength() > 0)
				m_strMissedDebugLogLines += _T("\r\n") + strLogLine;
d815 6
a820 1
				m_strMissedDebugLogLines = strLogLine;
d839 1
a839 1
					OutputLogText(m_strMissedLogLines + _T("\r\n") + strLogLine, bDebug);
d845 1
a845 1
						OutputLogText(_T("\r\n") + strLogLine, bDebug);
a851 2
			else if (m_strMissedLogLines.GetLength() > 0)
				m_strMissedLogLines += _T("\r\n") + strLogLine;
d853 6
a858 1
				m_strMissedLogLines = strLogLine;
d882 4
a885 4
	while ((strLine.GetAt(0) == _T('\n')) || (strLine.GetAt(0) == _T('\r')))
		strLine.Delete(0, 1);
	while ((strLine.GetAt(strLine.GetLength() - 1) == _T('\n')) || (strLine.GetAt(strLine.GetLength() - 1) == _T('\r')) || (strLine.GetAt(strLine.GetLength() - 1) == _T(' ')))
		strLine.Delete(strLine.GetLength() - 1, 1);
a891 1

d894 1
a894 1
		if (m_wndServer.m_pctlServerMsgBox->GetTextLength() != 0)
@


1.190
log
@Reverted FPU optimizations because they were causing 100% corruption. Now used again non optimized code.
@
text
@d682 2
d752 2
@


1.189
log
@reverted some changes
@
text
@d518 1
a518 1
							AddLogLine(false, _T("FPU optimizations active"));
@


1.188
log
@Some changes (unknown sources and wrong edonkey tags)
@
text
@d682 6
a687 6
	LPCTSTR psz = strLogText;
	LPCTSTR pszStart = psz;
	COLORREF crColor = -1;
	CString strPart;
	int iIndex, iRed, iGreen, iBlue;
	while (*psz != _T('\0'))
d689 8
a696 1
		if (CString(psz, 7) == _T("<COLOR="))
d698 3
a700 1
			if (psz - pszStart > 0)
d702 3
a704 9
				if (bDebug)
					m_wndServer.debugbox->AppendText(CString(pszStart, psz - pszStart), crColor);
				else
					m_wndServer.logbox->AppendText(CString(pszStart, psz - pszStart), crColor);
			}
			long iLen = _tcscspn(psz + 7, _T(">"));
			if (iLen > 0)
			{
				strPart = CString(psz + 7, iLen);
d708 4
a711 1
						crColor = GetSysColor(COLOR_WINDOWTEXT);
d721 2
a722 1
							crColor = RGB(iRed, iGreen, iBlue);
d726 21
a746 2
				psz += iLen + 7;
				pszStart = psz + 1;
a748 8
		psz = _tcsinc(psz);
	}
	if (pszStart != psz)
	{
		if (bDebug)
			m_wndServer.debugbox->AppendText(pszStart, crColor);
		else
			m_wndServer.logbox->AppendText(pszStart, crColor);
@


1.187
log
@display own userhash in log at startup
@
text
@d502 1
a502 1
					AddLogLine(false, RGB_LOG_WARNING + GetResString(IDS_MAIN_SOCKETERROR), g_eMuleApp.m_pGlobPrefs->GetPort());
d504 1
a504 1
			   		AddLogLine(false, RGB_LOG_WARNING + GetResString(IDS_MAIN_SOCKETERROR), g_eMuleApp.m_pGlobPrefs->GetUDPPort());
d506 5
d513 1
a541 3

			//	display own userhash
				AddLogLine(false, _T("%s: %s"), GetResString(IDS_INFLST_USER_USERHASH), FileHashToString(g_eMuleApp.m_pGlobPrefs->GetUserHash()));
@


1.186
log
@some changes
@
text
@d537 3
@


1.185
log
@Another change in trying to prevent gaps in logs
@
text
@a682 1
		bool bFoundColor = false;
d693 1
a693 9
			if (iLen == 0)
			{
				if (bDebug)
					m_wndServer.debugbox->AppendText(psz, crColor);
				else
					m_wndServer.logbox->AppendText(psz, crColor);
				psz += _tcslen(psz);
			}
			else
d713 2
a714 1
				psz += iLen + 7 + 1;
a715 2
			pszStart = psz;
			bFoundColor = true;
d717 1
a717 2
		if (!bFoundColor)
			psz = _tcsinc(psz);
d719 1
a719 1
	if (*pszStart != _T('\0'))
d759 1
a759 1
	while ((strLogLine.GetAt(strLogLine.GetLength() - 1) == _T('\n')) || (strLogLine.GetAt(strLogLine.GetLength() - 1) == _T('\r')))
d771 1
a771 1
				if (m_strMissedDebugLogLines.GetLength() != 0)
d778 1
a778 1
					if (m_wndServer.debugbox->GetTextLength() != 0)
d786 1
a786 1
			else if (m_strMissedDebugLogLines.GetLength() != 0)
d806 1
a806 1
				if (m_strMissedLogLines.GetLength() != 0)
d813 1
a813 1
					if (m_wndServer.logbox->GetTextLength() != 0)
d817 1
a817 1
					if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 0)
d821 1
a821 1
			else if (m_strMissedLogLines.GetLength() != 0)
d850 1
a850 1
	while ((strLine.GetAt(strLine.GetLength() - 1) == _T('\n')) || (strLine.GetAt(strLine.GetLength() - 1) == _T('\r')))
@


1.184
log
@Fixed log clear from WebServer + Some measurements in try to prevent log lines gaps
@
text
@d676 6
a681 6
	CString strText = strLogText;
	CString strLine, strPart;
	int iLineLength, iTagStart, iTagEnd, iIndex, iRed, iGreen, iBlue;
	COLORREF crColor;

	while( strText != _T("") )
d683 2
a684 8
		iLineLength = strText.Find(_T("\n")) + 1;
		if (iLineLength == 0)
			iLineLength = strText.GetLength();
		strLine = strText.Left(iLineLength);
		strText.Delete(0, iLineLength);
		crColor = GetSysColor(COLOR_WINDOWTEXT);			

		while( strLine != _T("") )
d686 1
a686 3
			iTagStart = strLine.Find(_T("<COLOR="));
			iTagEnd = strLine.Find(_T(">"));
			if (( iTagStart != -1 ) && ( iTagEnd != -1 ))
d688 17
a704 3
				bool bColorFound = false;
				COLORREF crNewColor = crColor;
				strPart = strLine.Mid(iTagStart + 7, iTagEnd - iTagStart - 7);
d708 1
a708 4
					{
						crNewColor = GetSysColor(COLOR_WINDOWTEXT);
						bColorFound = true;
					}
d718 1
a718 2
							crNewColor = RGB(iRed, iGreen, iBlue);
							bColorFound = true;
d722 1
a722 21
				if (bColorFound)
				{
					if (iTagStart > 0)
					{
						strPart = strLine.Left(iTagStart);
						if (bDebug)
							m_wndServer.debugbox->AppendText(strPart, crColor);
						else
							m_wndServer.logbox->AppendText(strPart, crColor);
					}
					crColor = crNewColor;	
					strLine.Delete(0, iTagEnd + 1);
				}
			}
			else
			{
				if (bDebug)
					m_wndServer.debugbox->AppendText(strLine, crColor);
				else
					m_wndServer.logbox->AppendText(strLine, crColor);
				strLine = _T("");
d724 2
d727 9
@


1.183
log
@color debug log lines with EXCEPTION red
@
text
@d759 1
a759 1
			strCleanLine.Delete(iTagStart, iTagEnd - iTagStart + 1);
d762 1
a762 1
		
d774 6
a779 9
	CString strTime;
	CString strTime4LogFile;
	COleDateTime currentTime(COleDateTime::GetCurrentTime());
	strTime.Format(RGB_DARK_BLUE + _T("%s: ") + RGB_DEFAULT, currentTime.Format());
	strTime4LogFile.Format(_T("%s: "), currentTime.Format());
	CString strLine = strTime + txt;
	CString strLine4LogFile = strTime4LogFile + strCleanLine;

	if (bDebug)
d781 5
a785 1
		if(::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
d787 1
a787 1
			if (m_strMissedDebugLogLines.GetLength() != 0)
d789 14
a802 2
				OutputLogText(m_strMissedDebugLogLines + _T("\r\n") + strLine, bDebug);
				m_strMissedDebugLogLines = _T("");
d804 2
d807 3
d811 7
a817 6
				if (m_wndServer.debugbox->GetTextLength() != 0)
					OutputLogText(_T("\r\n") + strLine, bDebug);
				else
					OutputLogText(strLine, bDebug);
				if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 2)
					m_wndServer.m_ctrlBoxSwitcher.SetItemState(2, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
a819 2
		else if (m_strMissedDebugLogLines.GetLength() != 0)
			m_strMissedDebugLogLines += _T("\r\n") + strLine;
a820 3
			m_strMissedDebugLogLines = strLine;

		if (g_eMuleApp.m_pGlobPrefs->LogToFile())
d822 1
a822 3
			CString LogFilePath = g_eMuleApp.m_pGlobPrefs->GetAppDir() + CString("debug.log");
			FILE* LogFile = fopen(LogFilePath, "a");
			if (LogFile)
d824 14
a837 13
				fputs(strLine4LogFile + _T("\n"), LogFile);
				fclose(LogFile);
			}
		}
	}
	else
	{
		if(::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
		{
			if (m_strMissedLogLines.GetLength() != 0)
			{
				OutputLogText(m_strMissedLogLines + _T("\r\n") + strLine, bDebug);
				m_strMissedLogLines = _T("");
d839 2
d842 1
a842 13
			{
				if (m_wndServer.logbox->GetTextLength() != 0)
					OutputLogText(_T("\r\n") + strLine, bDebug);
				else
					OutputLogText(strLine, bDebug);
				if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 0)
					m_wndServer.m_ctrlBoxSwitcher.SetItemState(0, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
			}
		}
		else if (m_strMissedLogLines.GetLength() != 0)
			m_strMissedLogLines += _T("\r\n") + strLine;
		else
			m_strMissedLogLines = strLine;
d844 2
a845 6
		ShowNotifier(txt, TBN_LOG, false, g_eMuleApp.m_pGlobPrefs->GetUseLogNotifier());
		if (g_eMuleApp.m_pGlobPrefs->LogToFile())
		{
			CString LogFilePath = g_eMuleApp.m_pGlobPrefs->GetAppDir() + CString("eMule.log");
			FILE* LogFile = fopen(LogFilePath , "a");
			if (LogFile)
d847 7
a853 2
				fputs(strLine4LogFile + _T("\n"), LogFile);
				fclose(LogFile);
d865 6
a870 1
	if(::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
d874 1
a874 1
	
d882 1
a882 1
		m_wndServer.m_pctlServerMsgBox->AppendText(line);
@


1.182
log
@*** empty log message ***
@
text
@d886 1
a886 1
		sOut.Format(_T("%s: EXCEPTION! (%s) Report to eMule Plus developers. Line %ld in file "), strFunctionName, msg, nLine);
@


1.181
log
@Better URL detection + minor changes
@
text
@d808 1
a808 1
			CString LogFilePath = g_eMuleApp.m_pGlobPrefs->GetAppDir() + CString("Debug.log");
@


1.180
log
@Fixes (Log2File, ServerList static names, Stop/Pause files)
@
text
@d777 1
a777 1
	strTime.Format(RGB_DARK_TEAL + _T("%s: ") + RGB_DEFAULT, currentTime.Format());
d872 1
a872 1
		m_wndServer.m_pctlServerMsgBox->AppendText(strTime, RGB(0,51,102));
@


1.179
log
@yet another fix...
@
text
@d775 1
d778 1
d780 1
d812 1
a812 1
				fputs(strCleanLine + _T("\n"), LogFile);
d848 1
a848 1
				fputs(strCleanLine + _T("\n"), LogFile);
@


1.178
log
@Added RGB_LOG_ERROR, RGB_LOG_WARNING, RGB_LOG_NOTICE, RGB_LOG_DIMMED & RGB_LOG_SUCCESS for easier changing of log colors
@
text
@d750 13
a764 13
		CString Line = txt;
		int iTagStart = 0;
		while( iTagStart != -1 )
		{
			iTagStart = Line.Find(_T("<COLOR="), iTagStart);
			if ( iTagStart != -1 )
			{
                int iTagEnd = Line.Find(_T(">"), iTagStart + 7);
				if ( iTagEnd != -1 )
					Line.Delete(iTagStart, iTagEnd - iTagStart + 1);
			}
		}

d767 2
a768 2
			m_ctlStatusBar.SetText(Line,SB_MESSAGETEXT,0);
			m_ctlStatusBar.SetTipText(SB_MESSAGETEXT,Line);
d771 1
a771 1
			AfxMessageBox(Line);
d777 1
a777 1
	CString Line = strTime + txt;
d785 1
a785 1
				OutputLogText(m_strMissedDebugLogLines + _T("\r\n") + Line, bDebug);
d791 1
a791 1
					OutputLogText(_T("\r\n") + Line, bDebug);
d793 1
a793 1
					OutputLogText(Line, bDebug);
d799 1
a799 1
			m_strMissedDebugLogLines += _T("\r\n") + Line;
d801 1
a801 1
			m_strMissedDebugLogLines = Line;
d809 1
a809 1
				fputs(Line + _T("\n"), LogFile);
d820 1
a820 1
				OutputLogText(m_strMissedLogLines + _T("\r\n") + Line, bDebug);
d826 1
a826 1
					OutputLogText(_T("\r\n") + Line, bDebug);
d828 1
a828 1
					OutputLogText(Line, bDebug);
d834 1
a834 1
			m_strMissedLogLines += _T("\r\n") + Line;
d836 1
a836 1
			m_strMissedLogLines = Line;
d845 1
a845 1
				fputs(Line + _T("\n"), LogFile);
@


1.177
log
@some more fixes
@
text
@d235 1
a235 1
						RGB_PLUM + _T("Anonymous statistical data sent to eMule Plus home site: Version=%i Language=%i OS=%i NT=%i Webserver=%i Lancast=%i MobileMule=%i CPU=%i"),
d502 1
a502 1
					AddLogLine(false, RGB_LIGHT_ORANGE + GetResString(IDS_MAIN_SOCKETERROR), g_eMuleApp.m_pGlobPrefs->GetPort());
d504 1
a504 1
			   		AddLogLine(false, RGB_LIGHT_ORANGE + GetResString(IDS_MAIN_SOCKETERROR), g_eMuleApp.m_pGlobPrefs->GetUDPPort());
d1414 1
a1414 1
		AddLogLine(false, RGB_BLUE_GRAY + GetResString(IDS_HASBEENHASHED), pNewKnownFile->GetFileName(), m_iFilesToBeHashed);
d2195 1
a2195 1
		AddDebugLogLine(false, RGB_RED + _T("%s : %s "), GetResString(IDS_BACKUP_ERROR2), GetResString(IDS_BACKUP_ERROR));
@


1.176
log
@Changed to predefined colors  - thx DoubleT ;-)
@
text
@d749 1
d752 13
d767 2
a768 2
			m_ctlStatusBar.SetText(txt,SB_MESSAGETEXT,0);
			m_ctlStatusBar.SetTipText(SB_MESSAGETEXT,txt);
d771 1
a771 1
			AfxMessageBox(txt);
a774 1

d850 1
@


1.175
log
@Added some colors to the logs...
@
text
@d235 1
a235 1
						_T("<COLOR=153,51,102>Anonymous statistical data sent to eMule Plus home site: Version=%i Language=%i OS=%i NT=%i Webserver=%i Lancast=%i MobileMule=%i CPU=%i"),
d502 1
a502 1
					AddLogLine(false,_T("<COLOR=255,102,0>") + GetResString(IDS_MAIN_SOCKETERROR),g_eMuleApp.m_pGlobPrefs->GetPort());
d504 1
a504 1
			   		AddLogLine(false,_T("<COLOR=255,102,0>") + GetResString(IDS_MAIN_SOCKETERROR),g_eMuleApp.m_pGlobPrefs->GetUDPPort());
d506 1
a506 1
				AddLogLine(true,IDS_MAIN_READY,CURRENT_VERSION_LONG);
d512 1
a512 1
							AddLogLine(false,_T("FPU optimizations active"));
d515 1
a515 1
							AddLogLine(false,_T("MMX optimizations active"));
d518 1
a518 1
							AddLogLine(false,_T("AMD optimizations active"));
d522 1
a522 1
							AddLogLine(false,_T("SSE optimizations active"));
d527 1
a527 1
						AddLogLine(false,_T("MMX optimizations active"));	
d530 1
a530 1
						AddLogLine(false,_T("AMD optimizations active"));	
d533 1
a533 1
						AddLogLine(false,_T("SSE optimizations active"));	
d763 1
a763 1
	strTime.Format("<COLOR=0,51,102>%s: <COLOR=Default>", currentTime.Format());
d977 1
a977 1
				AddLogLine(false,IDS_DISCONNECTED);
d1276 1
a1276 1
						AddLogLine(true,GetResString(IDS_SERVERADDED), pSrv->GetListName());
d1292 1
a1292 1
		AddLogLine(true,_T("CLI: %s"),clcommand);
d1400 1
a1400 1
		AddLogLine(false,_T("<COLOR=102,102,153>") + GetResString(IDS_HASBEENHASHED), pNewKnownFile->GetFileName(), m_iFilesToBeHashed);
d2159 1
a2159 1
			AddDebugLogLine(false,_T("Backup %s done"),szNewPath);
d2181 1
a2181 1
		AddDebugLogLine(false,_T("<COLOR=255,0,0>%s : %s "),GetResString(IDS_BACKUP_ERROR2),GetResString(IDS_BACKUP_ERROR));
d2183 1
a2183 1
			MessageBox(GetResString(IDS_BACKUP_ERROR),GetResString(IDS_BACKUP_ERROR2),MB_OK);
@


1.174
log
@removed prepared RTF predefined colors (uses RGB(#, #, #) now) + some fixes
@
text
@d235 1
a235 1
						_T("Anonymous statistical data sent to eMule Plus home site: Version=%i Language=%i OS=%i NT=%i Webserver=%i Lancast=%i MobileMule=%i CPU=%i"),
d502 1
a502 1
					AddLogLine(false,IDS_MAIN_SOCKETERROR,g_eMuleApp.m_pGlobPrefs->GetPort());
d504 1
a504 1
			   		AddLogLine(false,IDS_MAIN_SOCKETERROR,g_eMuleApp.m_pGlobPrefs->GetUDPPort());
d1400 1
a1400 1
		AddLogLine(false,GetResString(IDS_HASBEENHASHED), pNewKnownFile->GetFileName(), m_iFilesToBeHashed);
d2181 1
a2181 1
		AddDebugLogLine(false,_T("%s : %s "),GetResString(IDS_BACKUP_ERROR2),GetResString(IDS_BACKUP_ERROR));
@


1.173
log
@Minor fix for logs.
@
text
@d726 1
a726 1
							m_wndServer.debugbox->AppendKeyWord(strPart, crColor);
d728 1
a728 1
							m_wndServer.logbox->AppendKeyWord(strPart, crColor);
d737 1
a737 1
					m_wndServer.debugbox->AppendKeyWord(strLine, crColor);
d739 1
a739 1
					m_wndServer.logbox->AppendKeyWord(strLine, crColor);
d855 1
a855 1
		m_wndServer.m_pctlServerMsgBox->AppendKeyWord(strTime, RGB(0,51,102));
@


1.172
log
@more fixes/changes
@
text
@d796 1
a796 1
				fputs(Line + _T("\r\n"), LogFile);
d832 1
a832 1
				fputs(Line + _T("\r\n"), LogFile);
@


1.171
log
@some more fixing + added more predefined colors to prepared rtf
@
text
@d792 1
a792 1
			CString LogFilePath = g_eMuleApp.m_pGlobPrefs->GetAppDir() + CString("debug.log");
d796 1
a796 1
				fputs(Line, LogFile);
d832 1
a832 1
				fputs(Line, LogFile);
@


1.170
log
@BUGFIX #497 buffer overrun / crash on start
@
text
@d763 1
a763 1
	strTime.Format("<COLOR=1,20,130>%s: <COLOR=Default>", currentTime.Format());
d854 2
a855 3
			m_wndServer.m_pctlServerMsgBox->AppendKeyWord(_T("\n") + strTime, RGB(1, 20, 130));
		else
			m_wndServer.m_pctlServerMsgBox->AppendKeyWord(strTime, RGB(1, 20, 130));
@


1.169
log
@small correction
@
text
@d214 1
a214 1
			TCHAR pBuf[1000];
d222 1
a222 1
					WCHAR pNewBuf[1000];
@


1.168
log
@some changes & fixes
@
text
@d816 2
a817 2
				if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 2)
					m_wndServer.m_ctrlBoxSwitcher.SetItemState(2, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
@


1.167
log
@Rich Edit logs with colors. To change color in a Log/Debug log  line use: <COLOR=#,#,#> ; To go back to default use: <COLOR=Default>
@
text
@d764 1
a764 1
	CString Line = strTime + txt + _T("\r\n");
d770 1
a770 1
			if (m_strMissedDebugLogLines)
d772 1
a772 1
				OutputLogText(m_strMissedDebugLogLines + Line, bDebug);
d777 4
a780 1
				OutputLogText(Line, bDebug);
d785 2
d788 1
a788 1
			m_strMissedDebugLogLines += Line;
d805 1
a805 1
			if (m_strMissedLogLines)
d807 1
a807 1
				OutputLogText(m_strMissedLogLines + Line, bDebug);
d812 4
a815 1
				OutputLogText(Line, bDebug);
d820 2
d823 1
a823 1
			m_strMissedLogLines += Line;
d853 5
a857 2
		m_wndServer.m_pctlServerMsgBox->AppendKeyWord(strTime, RGB(1, 20, 130));
		m_wndServer.m_pctlServerMsgBox->AppendText(line + CString(_T('\n')));
@


1.166
log
@Log & Debug log scrollbars auto show + fixed IRC links click
@
text
@d512 1
a512 1
							AddLogLine(false,"FPU optimizations active");
d515 1
a515 1
							AddLogLine(false,"MMX optimizations active");
d518 1
a518 1
							AddLogLine(false,"AMD optimizations active");
d522 1
a522 1
							AddLogLine(false,"SSE optimizations active");
d527 1
a527 1
						AddLogLine(false,"MMX optimizations active");	
d530 1
a530 1
						AddLogLine(false,"AMD optimizations active");	
d533 1
a533 1
						AddLogLine(false,"SSE optimizations active");	
d674 1
a674 1
void CEmuleDlg::AddLogText(bool addtostatusbar,const CString& txt, bool bDebug)
d676 19
a694 3
	EMULE_TRY
		if (addtostatusbar)
			if (m_ctlStatusBar.m_hWnd && g_eMuleApp.m_app_state != CEmuleApp::APP_STATE_SHUTINGDOWN)
d696 37
a732 2
				m_ctlStatusBar.SetText(txt,SB_MESSAGETEXT,0);
				m_ctlStatusBar.SetTipText(SB_MESSAGETEXT,txt);
d735 24
a758 1
				AfxMessageBox(txt);
d763 1
a763 1
	strTime.Format("%s: ", currentTime.Format());
d772 1
a772 1
				m_wndServer.debugbox->AppendText(m_strMissedDebugLogLines + Line);
d777 1
a777 1
				m_wndServer.debugbox->AppendText(Line);
d802 1
a802 1
				m_wndServer.logbox->AppendText(m_strMissedLogLines + Line);
d807 1
a807 1
				m_wndServer.debugbox->AppendText(Line);
a833 5
	CString strTime;

	COleDateTime currentTime(COleDateTime::GetCurrentTime());
	strTime.Format("%s: ", currentTime.Format());

d835 1
d838 8
a845 1
	m_wndServer.m_pctlServerMsgBox->AppendText(strTime + line + CString(_T('\n')));
@


1.165
log
@Got rid of LogEditCtrl + Some minor changes
@
text
@d128 2
d674 1
a674 1
void CEmuleDlg::ResetLog()
d677 8
d686 1
a686 1
	m_wndServer.logbox.Reset();
d688 3
a690 6
	EMULE_CATCH2
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::ResetDebugLog()
{
	EMULE_TRY
d692 3
a694 10
	m_wndServer.debugbox.Reset();

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CEmuleDlg::AddLogText(bool addtostatusbar,const CString& txt, bool bDebug)
{
	EMULE_TRY
	if (addtostatusbar)
        if (m_ctlStatusBar.m_hWnd && g_eMuleApp.m_app_state != CEmuleApp::APP_STATE_SHUTINGDOWN)
d696 11
a706 2
			m_ctlStatusBar.SetText(txt,SB_MESSAGETEXT,0);
			m_ctlStatusBar.SetTipText(SB_MESSAGETEXT,txt);
d709 1
a709 5
			AfxMessageBox(txt);

	char temp[1060];
	COleDateTime timelog(COleDateTime::GetCurrentTime());
	sprintf(temp,"%s: %s",timelog.Format(),txt);
a710 6
	if (bDebug)
	{
		if(::IsWindow(m_wndServer.m_ctrlBoxSwitcher.m_hWnd))
			if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 2)
				m_wndServer.m_ctrlBoxSwitcher.SetItemState(2, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
		m_wndServer.debugbox.AddEntry(temp);
d717 1
a717 2
				fputs(temp, LogFile);
				fputc('\n', LogFile);
d725 16
a740 3
			if(m_wndServer.m_ctrlBoxSwitcher.GetCurSel() != 0)
				m_wndServer.m_ctrlBoxSwitcher.SetItemState(0, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
		m_wndServer.logbox.AddEntry(temp);
d748 1
a748 2
				fputs(temp, LogFile);
				fputc('\n', LogFile);
d751 1
a751 1
	 	}
a753 19
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString CEmuleDlg::GetLastLogEntry(){
	return m_wndServer.logbox.GetLastLogEntry();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString CEmuleDlg::GetAllLogEntries(){
	return m_wndServer.logbox.GetAllLogEntries();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString CEmuleDlg::GetLastDebugLogEntry(){
	return m_wndServer.debugbox.GetLastLogEntry();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString CEmuleDlg::GetAllDebugLogEntries(){
	return m_wndServer.debugbox.GetAllLogEntries();
@


1.164
log
@Fix for runtime value localization
@
text
@a777 1
	m_wndServer.m_pctlServerMsgBox->UpdateSize(true);
@


1.163
log
@Converted IRC/Messages to Rich Edit  (added copy text to clipboard & save logs with colors as RTF)
@
text
@d923 1
a923 1
		strBuffer.Format( "%2d days %02d:%02d:%02d",static_cast<int>(runTime.GetDays()),runTime.GetHours(),
d926 1
a926 1
		strBuffer.Format( "%2d days %02d:%02d",static_cast<int>(runTime.GetDays()),runTime.GetHours(),
@


1.162
log
@Separating engine and GUI
@
text
@d703 2
a704 2
	COleDateTime timelog(COleDateTime::GetCurrentTime()); // DonGato date-time localization
	sprintf(temp,"%s: %s",timelog.Format(),txt); // DonGato date-time localization
d778 1
@


1.161
log
@Separating engine and GUI
@
text
@d130 1
a130 1
	m_pEngineData = new CEngineData(*g_eMuleApp.m_pEngine);
d171 2
a172 2
	if (m_pEngineData)
		delete m_pEngineData;
d465 1
a465 1
	g_eMuleApp.m_pEngine->Init(m_hWnd);
a835 4
#endif //OLD_SOCKETS_ENABLED
#ifdef NEW_SOCKETS
		if(m_pEngineData->IsLowID())
#endif //NEW_SOCKETS
d839 1
a851 4
#endif //OLD_SOCKETS_ENABLED
#ifdef NEW_SOCKETS
		if(m_pEngineData->IsConnecting())
#endif //NEW_SOCKETS
d902 1
a1506 2
#else
		g_eMuleApp.m_pEngine->ConnectToAnyServer();
a1519 2
#else
		g_eMuleApp.m_pEngine->DisconnectFromServer();
d1896 1
a1896 1
	CTask *pTask = (CTask*)wParam;
d1901 1
a1901 1
	}
@


1.160
log
@proper InfoList handling
@
text
@a42 3
#include "EngineData.h"
#include "Sockets/EmEngine.h"

d84 1
a84 1
	ON_MESSAGE(WM_TASK_UI, OnProcessTaskUI)
@


1.159
log
@Old Pentium machines (without MMX) are now FPU optimized
@
text
@d1373 9
a1381 9
    m_wndTransfer.m_ctlInfoList.SetRedraw(false);
    m_wndChat.chatselector.SetRedraw(false);
    m_dlgStatistics.SetRedraw(false);
    m_wndTransfer.SetRedraw(false);
    m_dlgSearch.SetRedraw(false);
    m_wndSharedFiles.SetRedraw(false);
    m_wndIRC.SetRedraw(false);
    m_wndChat.SetRedraw(false);
    //SetRedraw(false);  // is it enough to do only this, or do we need everything before too??
@


1.158
log
@Minor fix for 655536 files remaining problem (hashing)
@
text
@d512 3
@


1.157
log
@New sockets
@
text
@d1321 3
a1323 1
		m_iFilesToBeHashed--;
@


1.156
log
@minor change on bugfix for #0000202
@
text
@d1907 2
a1908 2
		pTask->ProcessForUI(*g_eMuleApp.m_pEngine);
		delete pTask;
@


1.155
log
@Fixed Mantis bug #0000202 - ALT + <KEY> (and more) cause 100% CPU & eMule Freeze
@
text
@d1096 1
a1096 1
	if (dlg==&m_wndServer) m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+1);
@


1.154
log
@Fix for webserver, crash on clear completed files
@
text
@d1089 1
d1091 5
a1096 1
	else if (dlg==&m_wndTransfer) m_ctlToolBar.PressMuleButton(IDC_TOOLBARBUTTON+2);
@


1.153
log
@Added SSE2 (Pentium 4) detection
@
text
@d83 1
d1867 21
@


1.152
log
@BUGFIX: inability to remove shared file comment (#278)
@
text
@d518 1
@


1.151
log
@New line in debug log about statistics being sent, using dynamic DNS for auto-check and statistics (emuleplus.servehttp.com)
@
text
@d811 3
d940 3
@


1.150
log
@added auto-complete for search text (search history) from official v0.30c
@
text
@d197 2
a198 1
	strUrl.Format(_T("http://emuleplus.sourceforge.net/get_version.php?version=%i&language=%i&os=%i&nt=%i&webserver=%i&lancast=%i&mobilemule=%i&cpu=%i"), 
d234 9
@


1.149
log
@Auto-check every 12 hours + added CPU type to stats
@
text
@d1369 2
@


1.148
log
@Ability to turn off auto-check for new version
@
text
@d197 1
a197 1
	strUrl.Format(_T("http://emuleplus.sourceforge.net/get_version.php?version=%i&language=%i&os=%i&nt=%i&webserver=%i&lancast=%i&mobilemule=%i"), 
d203 2
a204 1
		g_eMuleApp.m_pGlobPrefs->IsMMServerEnabled());
d233 1
d530 1
a530 1
			//	Get current version from internet
d532 2
a533 1
				if(g_eMuleApp.m_pGlobPrefs->IsAutoCheckForNewVersion())
@


1.147
log
@Naming conventions fix
@
text
@d206 1
a206 1
	HINTERNET hOpen = InternetOpen(_T(""), INTERNET_OPEN_TYPE_PRECONFIG , NULL, NULL, 0);
d530 1
d532 4
a535 4
				DWORD dwThread = 0;
				HANDLE hThread = CreateThread(NULL, 0, CheckCurrentVersionAtInet, (void *)NULL, 0, &dwThread);
				if (hThread)
					VERIFY(CloseHandle(hThread));
@


1.146
log
@Auto-check for new version
@
text
@d194 1
a194 1
	CString sUrl;
d197 1
a197 1
	sUrl.Format(_T("http://emuleplus.sourceforge.net/get_version.php?version=%i&language=%i&os=%i&nt=%i&webserver=%i&lancast=%i&mobilemule=%i"), 
d209 1
a209 1
		HINTERNET hURL = InternetOpenUrl(hOpen, sUrl, _T(""), NULL, /*INTERNET_FLAG_NO_AUTH | */INTERNET_FLAG_NO_CACHE_WRITE, NULL);
d212 1
a212 1
			TCHAR sBuf[1000];
d214 1
a214 1
			if(InternetReadFile(hURL, sBuf, 1000, &dwSize))
d216 1
a216 1
				sBuf[dwSize] = 0;
d218 1
a218 1
				if(sBuf[0] == (TCHAR)0xEF && sBuf[1] == (TCHAR)0xBB && sBuf[2] == (TCHAR)0xBF)
d220 3
a222 3
					WCHAR sNewBuf[1000];
					int nBytes;
					if(nBytes = MultiByteToWideChar(CP_UTF8, 0, sBuf, dwSize, sNewBuf, 1000))
d224 2
a225 2
						sNewBuf[nBytes] = 0; dwSize = nBytes;
						_tcscpy(sBuf, (TCHAR*)(_bstr_t(sNewBuf+1)));
d228 1
a228 1
				if(sBuf[0] == 'O' && sBuf[1] == 'K') // everything allright
d230 2
a231 2
					CString sOut(sBuf + 2);
					g_eMuleApp.m_pdlgEmule->AddServerMessageLine(sOut);
@


1.145
log
@Inactive log window receiving new text becomes hilighted until you select it
@
text
@d41 1
d190 56
d527 10
d2064 1
@


1.144
log
@Fixed bug 0000443  - After clearing log via WebServer all messages from all Logs will appear in active Log tab
@
text
@d625 3
d643 3
d691 3
@


1.143
log
@Widened the session timer box to make room for 1 day+ running time.
@
text
@d657 19
@


1.142
log
@bugfix for 434, popup preventing closing emule vi ws
@
text
@d1001 1
a1001 1
		0,70,22,70,70,70,260,
@


1.141
log
@Added Date and Time to serverlog messages
@
text
@d790 1
a790 1
				AddLogLine(true,IDS_DISCONNECTED);
@


1.140
log
@Formatting, comments, and name changes.
@
text
@d660 8
a667 1
	m_wndServer.m_pctlServerMsgBox->AppendText(line+CString(_T('\n'))); //merge from offic. 0.30a - bond006
@


1.139
log
@Fixed Autoscroll on Log & Debug Log
@
text
@d660 1
a660 1
	m_wndServer.m_ctlServerMsgBox->AppendText(line+CString(_T('\n'))); //merge from offic. 0.30a - bond006
@


1.138
log
@Rich Edit control for all logs (from official v0.30c) ;
Fixed bug #0000023 - Mouse wheel in Serverinfo window does not work
@
text
@a609 1

d623 1
a623 8
	CSingleLock singleLock(&m_mutexLog);
	CLogEditCtrl *logbox=(bDebug)?&m_wndServer.debugbox:&m_wndServer.logbox;

	singleLock.Lock();   //critical section!

	CString boxtext=(bDebug)?m_strDebugLog:m_strLogText;
    //ASSERT(singleLock.IsLocked()); 
	if (logbox->GetSafeHwnd() && logbox->GetLineCount() >= MAX_LINES_IN_LOGVIEW)	//Cax2 - putting it here should avoid repeated lines
d625 12
a636 3
		int pos = boxtext.Find('\r'); 
		if (pos >= 0)  
			boxtext=boxtext.Mid(pos + 2);	// skip '\n'
a637 4
	boxtext+= (CString)temp + _T("\r\n");

	if (bDebug)
		m_strDebugLog=boxtext;
a638 5
		m_strLogText=boxtext;

	singleLock.Unlock();

	if (logbox->GetSafeHwnd())
d640 1
a640 2
		logbox->SetWindowText(boxtext); // this call cannot be placed inside the critical section! (message pump) 
		logbox->LineScroll(logbox->GetLineCount());
d642 10
a651 15
	}

	if (g_eMuleApp.m_pGlobPrefs->LogToFile())
	{
		CString LogFilePath = g_eMuleApp.m_pGlobPrefs->GetAppDir();
		if(bDebug)
			LogFilePath += CString(_T("debug.log"));
		else
			LogFilePath += CString(_T("emule.log"));			
		FILE* LogFile = _tfopen(LogFilePath, _T("a+")); 
		if ( LogFile != NULL )
	 	{
			strcat(temp, "\n");
 			fwrite(temp, sizeof(char), strlen(temp), LogFile);
 			fclose(LogFile);
a653 1

@


1.137
log
@Formatting, comments, and name changes.
Fixed a couple of sorting related bugs in SearchListCtrl.
@
text
@d40 1
d593 1
a593 5
	CSingleLock singleLock(&m_mutexLog);	//Cax2 - this needs the mutex too
	singleLock.Lock();
	m_strLogText="";
	m_wndServer.logbox.SetWindowText(m_strLogText);
	singleLock.Unlock();
d602 1
a602 5
	CSingleLock singleLock(&m_mutexLog);	//Cax2 - this needs the mutex too
	singleLock.Lock();
	m_strDebugLog="";
	m_wndServer.debugbox.SetWindowText(m_strDebugLog);
	singleLock.Unlock();
d625 1
a625 1
	CEdit2 *logbox=(bDebug)?&m_wndServer.debugbox:&m_wndServer.logbox;
d675 1
a675 1
	m_wndServer.m_ctlServerMsgBox.AppendText(line+CString(_T('\n'))); //merge from offic. 0.30a - bond006
@


1.136
log
@Formatting, comments, and name changes.
float => double conversion
@
text
@d1258 1
a1258 1
	m_dlgSearch.searchlistctrl.SetRedraw(false);
d1275 1
a1275 1
	m_dlgSearch.searchlistctrl.SaveSettings(CPreferences::TABLE_SEARCH);
d1296 1
a1296 1
	m_dlgSearch.searchlistctrl.DeleteAllItems();
@


1.135
log
@Formatting, comments, and name changes.
@
text
@d882 2
a883 2
	float lastuprate_kB = (float)g_eMuleApp.m_pUploadQueue->GetDataRateShown()/1024;
	float lastdownrate_kB = (float)g_eMuleApp.m_pDownloadQueue->GetDataRate()/1024;
d885 2
a886 2
	float lastuprateoverhead_kB = (float)g_eMuleApp.m_pUploadQueue->GetUpDataRateOverhead()/1024;
	float lastdownrateoverhead_kB = (float)g_eMuleApp.m_pDownloadQueue->GetDownDataRateOverhead()/1024;
d1182 1
a1182 1
			pString.Format(_T("\n")+GetResString(IDS_UPDOWN),(float)g_eMuleApp.m_pUploadQueue->GetDataRate()/1024, (float)g_eMuleApp.m_pDownloadQueue->GetDataRate()/1024);
@


1.134
log
@New sockets - more server code
@
text
@d1204 1
a1204 1
	CKnownFile* result = (CKnownFile*)lParam;
d1206 1
a1206 1
	if (wParam)
d1208 1
a1208 1
		CPartFile* requester = (CPartFile*)wParam;
d1210 1
a1210 1
		requester->PartFileHashFinished(result);
d1215 3
a1217 3
		g_eMuleApp.m_pSharedFilesList->m_pKnownFileList->SafeAddKFile(result);
		g_eMuleApp.m_pSharedFilesList->SafeAddKFile(result);
		AddLogLine(false,GetResString(IDS_HASBEENHASHED), result->GetFileName(), m_iFilesToBeHashed);
a1245 1
	// TODO: Add your message handler code here and/or call default
@


1.133
log
@updated get_cpu_type(),
removed uchar[64*2] workaround
@
text
@d1418 2
@


1.132
log
@DownloadListCtrl rewrite.
Changed Category ID types to an enumeration.
More async update work.
The usual formatting, comments, and name changes.
@
text
@a438 2
					uchar Dummy[64*2];
					memset2(Dummy,0,64*2); //Just to make sure we detect the CPU
@


1.131
log
@Added MMX/AMD/SSE optimized memset [katsyonak]
@
text
@d1187 1
a1187 1
			pString=_T("\n")+m_wndTransfer.m_wndDownloadList.GetPartFilesStatusString();
d1257 4
a1260 4
	m_wndTransfer.m_wndDownloadList.SetRedraw(false);
	m_wndTransfer.m_wndUploadList.SetRedraw(false);
	m_wndTransfer.m_wndQueueList.SetRedraw(false);
	m_wndTransfer.m_wndClientList.SetRedraw(false);
d1274 4
a1277 4
	m_wndTransfer.m_wndDownloadList.SaveSettings(CPreferences::TABLE_DOWNLOAD);
	m_wndTransfer.m_wndUploadList.SaveSettings(CPreferences::TABLE_UPLOAD);
	m_wndTransfer.m_wndQueueList.SaveSettings(CPreferences::TABLE_QUEUE);
	m_wndTransfer.m_wndClientList.SaveSettings(CPreferences::TABLE_CLIENTLIST);
d1294 4
a1297 4
    m_wndTransfer.m_wndClientList.DeleteAllItems();
	m_wndTransfer.m_wndUploadList.DeleteAllItems();
	m_wndTransfer.m_wndQueueList.DeleteAllItems();
    m_wndTransfer.m_wndDownloadList.DeleteAllItems();
@


1.130
log
@Formatting, comments, and name changes.
@
text
@d437 28
@


1.129
log
@Formatting, comments, and name changes. Factored various UI update methods out and modified to use async. messaging instead of sync. call.
@
text
@d660 1
a660 1
void CEmuleDlg::AddBugReport(LPCTSTR sFile, long nLine, CString msg)
d667 1
a667 1
		sOut.Format(_T("EXCEPTION! (%s) Report to eMule Plus developers. Line %ld in file "), msg, nLine);
d1159 1
a1159 1
			pString=_T("\n")+m_wndTransfer.m_wndDownloadList.getTextList();
@


1.128
log
@Formatting, comments, and name changes.
Removed #includes for "memcpy_amd.h".
@
text
@d419 1
a419 1
				g_eMuleApp.m_pSharedFilesList->SetOutputCtrl(&m_wndSharedFiles.sharedfilesctrl);
d1234 1
a1234 1
	m_wndSharedFiles.sharedfilesctrl.SetRedraw(false);
d1251 1
a1251 1
	m_wndSharedFiles.sharedfilesctrl.SaveSettings(CPreferences::TABLE_SHARED);
d1265 1
a1265 1
    m_wndSharedFiles.sharedfilesctrl.DeleteAllItems();
d1275 1
a1275 1
	m_wndSharedFiles.sharedfilesctrl.DeleteAllItems();
@


1.127
log
@Partial fix for session time display > 1 day.
@
text
@d802 1
d805 4
@


1.126
log
@Formatting, comments, and name changes.
Created distinct tag classes and typed enumerations for tags, opcodes, and protocols.
@
text
@d802 1
a802 1
		strBuffer.Format( "%2d days %02d:%02d:%02d",runTime.GetDays(),runTime.GetHours(),
@


1.125
log
@Updates
@
text
@d1534 1
a1534 1
			ShowUserCount(g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetUsers(),g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetFiles());
@


1.124
log
@FakeCheck for Search Result and Download List (Check and Report ... made by milobac ... merged by DropF ... tested by n@@boleo and me)
@
text
@d1866 1
a1866 1
		FILE* LogFile = _tfopen(tempDir, _T("a+")); 
@


1.123
log
@Removed unneeded error messages on backup
@
text
@d1285 2
@


1.122
log
@Changed fix of Setfocus on notifier click
@
text
@d1880 1
d1893 1
a1893 1
		error = TRUE;  
d1897 1
a1897 1
	while (!fFinished && !error)   
d1941 1
a1941 1
		error = TRUE;  
@


1.121
log
@Formatting, comments, and name changes.
@
text
@a1397 1
	SetFocus();
d1483 1
a1483 1
    	switch(msgType)
d1485 25
a1509 20
	case TBN_CHAT:
		RestoreWindow();
		SetActiveDialog(&m_wndChat);
		break;
	case TBN_DLOAD:
		RestoreWindow();
		SetActiveDialog(&m_wndTransfer);
		break;
	case TBN_DLOAD_ADD:
		RestoreWindow();
		SetActiveDialog(&m_wndTransfer);
		break;
	case TBN_IMPORTANTEVENT:
		RestoreWindow();
		SetActiveDialog(&m_wndServer);	
		break;
	case TBN_LOG:
		RestoreWindow();
		SetActiveDialog(&m_wndServer);	
		break;
@


1.120
log
@Localization and some fixes for new detail dialogs by FoRcHa
@
text
@d656 1
a656 1
	m_wndServer.servermsgbox.AppendText(line+CString(_T('\n'))); //merge from offic. 0.30a - bond006
d1059 1
a1059 1
					pSrv->SetPreference(CServer::ePR_HIGH);
d1061 1
a1061 1
					if (!g_eMuleApp.m_pdlgEmule->m_wndServer.serverlistctrl.AddServer(pSrv,true)) 
d1247 1
a1247 1
	m_wndServer.serverlistctrl.SaveSettings(CPreferences::TABLE_SERVER);
d1355 1
d1361 2
a1362 1
	if ( m_wndServer.serverlistctrl.GetSelectedCount()>1 )
d1364 1
a1364 1
		m_wndServer.serverlistctrl.PostMessage(WM_COMMAND,MP_CONNECTTO,0L);
d1551 1
d1557 1
a1557 1
	if(!g_eMuleApp.m_pServerConnect->IsConnected()) 
d1559 3
a1561 2
		//connect if not currently connected
		if(!g_eMuleApp.m_pServerConnect->IsConnecting()) 
d1563 1
d1572 2
a1573 1
		//disconnect if currently connected
d1575 1
d1703 1
a1703 1
	g_eMuleApp.m_pdlgEmule->m_wndServer.serverlistctrl.RemoveServer((CServer*)wParam); // sivka's bugfix
d1714 1
a1714 1
	g_eMuleApp.m_pdlgEmule->m_wndServer.serverlistctrl.StaticServerFileAppend((CServer*)wParam);
d1724 1
a1724 1
	g_eMuleApp.m_pdlgEmule->m_wndServer.serverlistctrl.StaticServerFileRemove((CServer*)wParam);
@


1.119
log
@Formatting, comments, and name changes.
@
text
@d601 1
a601 1
	char temp[1060]; //<<--9/21/02
a1828 2
	if(!PathFileExists(g_eMuleApp.m_pGlobPrefs->GetBackupDir()))
		CreateDirectory(g_eMuleApp.m_pGlobPrefs->GetBackupDir(), NULL);
a1831 1
	//Copying files
d1833 29
@


1.118
log
@Formatting, comments, and name changes.
@
text
@d50 35
a84 9
enum EnumStatusBarBoxes
{
	SB_MESSAGETEXT = 0,
	SB_SESSIONTIME,
	SB_MESSAGESTATUS,
	SB_NUMUSERS,
	SB_UPLOADRATE,
	SB_DOWNLOADRATE,
	SB_SERVER,
d86 4
a89 2
	SB_NUMSBPARTS,
};
a94 1
const static UINT UWM_ARE_YOU_EMULE=RegisterWindowMessage(_T(EMULE_GUID));
d97 1
d104 1
a104 1
	m_hiconMyTray	=	NULL;
d106 1
a106 1
	m_bStartUpMinimized=false;
d113 7
a119 7
	m_hiconConn[0] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_NOTCONNECTED),IMAGE_ICON,16,16,0);
	m_hiconConn[1] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_CONNECTED),IMAGE_ICON,16,16,0);
	m_hiconConn[2] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_CONNECTEDHIGH),IMAGE_ICON,16,16,0);
	m_hiconTrans[0] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_UP0),IMAGE_ICON,16,16,0);
	m_hiconTrans[1] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_UP1),IMAGE_ICON,16,16,0);
	m_hiconTrans[2] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_DOWN0),IMAGE_ICON,16,16,0);
	m_hiconTrans[3] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_DOWN1),IMAGE_ICON,16,16,0);
d121 3
a123 3
	m_hiconIM[1] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_MESSAGE),IMAGE_ICON,16,16,0);
	m_hiconIM[2] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_MPENDING),IMAGE_ICON,16,16,0);
	m_hiconSourceTray = (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
d135 1
a135 1

d139 4
a142 1
	if (m_hiconMyTray) DestroyIcon(m_hiconMyTray);
d157 2
a158 1
	if ( m_hiconMyTray )
d171 1
a171 1
	if(m_pEngineData)
d177 3
a179 2

void CEmuleDlg::DoDataExchange(CDataExchange* pDX){
d182 1
a182 44

BEGIN_MESSAGE_MAP(CEmuleDlg, CTrayDialog)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_WM_SIZE()
	ON_WM_CLOSE()

	ON_COMMAND(MP_CONNECT, StartConnection)
	ON_COMMAND(MP_DISCONNECT, CloseConnection)
	ON_COMMAND(MP_EXIT, OnClose )

	ON_MESSAGE(WM_TASKBARNOTIFIERCLICKED, OnTaskbarNotifierClicked)
	ON_MESSAGE(WM_COPYDATA, OnWMData)
	ON_MESSAGE(TM_FINISHEDHASHING,OnFileHashed)
	ON_COMMAND(MP_RESTORE, RestoreWindow)
/*
	// quick-speed changer --
	ON_COMMAND_RANGE(MP_QS_U10, MP_QS_UP10, QuickSpeedUpload)
	ON_COMMAND_RANGE(MP_QS_D10, MP_QS_DC, QuickSpeedDownload)
	//--- quickspeed - paralize all ---
	ON_COMMAND_RANGE(MP_QS_PA, MP_QS_UA, QuickSpeedOther)
	// quick-speed changer -- based on xrmb
*/
	ON_REGISTERED_MESSAGE(UWM_ARE_YOU_EMULE, OnAreYouEmule)

	//kuchin
	ON_MESSAGE(WEB_CONNECT_TO_SERVER, OnWebServerConnect)
	ON_MESSAGE(WEB_REMOVE_SERVER, OnWebServerRemove)
    //purity
	ON_MESSAGE(WEB_ADD_TO_STATIC, OnWebServerAddToStatic)
	ON_MESSAGE(WEB_REMOVE_FROM_STATIC, OnWebServerRemoveFromStatic)

	ON_MESSAGE(WEB_SHARED_FILES_RELOAD, OnWebSharedFilesReload)

	ON_MESSAGE(WM_TASK_UI, OnProcessTaskUI)

	ON_WM_QUERYENDSESSION()
	ON_WM_TIMER() // Lucas
	ON_WM_NCDESTROY()
END_MESSAGE_MAP()

// CEmuleDlg eventhandler

d187 1
a187 1

d196 7
a202 4
	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL){
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, GetResString(IDS_ABOUTBOX));
d208 2
a209 2
	//set font - Cax2
	m_fontDefault.CreatePointFont(g_eMuleApp.m_pGlobPrefs->GetFontSize(),g_eMuleApp.m_pGlobPrefs->GetUsedFont()); // DonGato
d211 1
a211 1
	//set m_ctlToolBar
d215 4
a218 2
	int iMaxRange = g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate();
	if(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate() > iMaxRange)
d223 4
a226 3
	//set m_ctlReBar
	REBARBANDINFO rbbi;
	CSize sizeBar;
d228 5
a232 4
	m_ctlReBar.Create(WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_BORDER | RBS_BANDBORDERS | /*RBS_AUTOSIZE |*/ RBS_VARHEIGHT | CCS_NODIVIDER | CCS_TOP,
                CRect(0, 0, 0, 0),
				this,
				AFX_IDW_REBAR);
d234 1
a234 1
	// insert tool bar
d244 1
a244 1
	// insert address bar
d262 5
a266 4
	//set title
	CString buffer;
	buffer.Format(_T("eMule Plus v%s"),CURRENT_VERSION_LONG);
	SetWindowText(buffer);
a267 1
	//START - enkeyDEV(kei-kun) -TaskbarNotifier-
d269 3
a271 1
	CEnBitmap m_imgTaskbar;
d406 1
a406 1

d411 1
a411 1
	if (nIDEvent == INIT_TIMER_ID) // #zegzav (added)
d416 1
a416 1
			case 0:
d422 1
a422 1
			case 1:
d426 1
a426 1
			case 2:
d440 2
a441 3
				// kuchin
				// Start server anyway, but you'll get response
				// only if it's enabled in preferences
d444 2
a445 1
			case 3:
d471 1
a471 2


d506 1
a506 1

d537 3
a539 3


HCURSOR CEmuleDlg::OnQueryDragIcon(){
d542 1
a542 1

d561 1
a561 1

d574 1
a574 1

d587 3
a589 2

void CEmuleDlg::AddLogText(bool addtostatusbar,const CString& txt, bool bDebug) {
d652 1
a652 1

d659 1
a659 1

d674 1
a674 1

d681 1
a681 1

d686 1
a686 1

d832 1
a832 1

d841 1
a841 2


d929 1
a929 1

d947 1
a947 1

d967 1
a967 1

d977 2
a978 2

void CEmuleDlg::ResizeStatusBar()		//Cax2
d1007 1
a1007 1

d1295 1
a1295 1

d1354 1
a1354 2


d1376 1
a1376 1

d1384 1
a1384 1
	g_eMuleApp.OnlineSig(); // Added By Bouc7 
d1388 1
a1388 1

d1400 1
a1400 1

d1405 1
a1405 1

d1442 1
a1442 1

d1458 1
a1458 1

d1475 1
a1475 1

d1512 1
a1512 1

d1548 1
a1548 1

d1572 1
a1572 1

d1577 1
a1577 1
	switch(wParam)
d1579 1
a1579 1
		case IDC_TOOLBARBUTTON + 0:
d1582 1
a1582 1
		case IDC_TOOLBARBUTTON + 1:
d1586 1
a1586 1
		case IDC_TOOLBARBUTTON + 2:
d1590 1
a1590 1
		case IDC_TOOLBARBUTTON + 3:
d1594 1
a1594 1
		case IDC_TOOLBARBUTTON + 4:
d1598 1
a1598 1
		case IDC_TOOLBARBUTTON + 5:
d1602 1
a1602 1
		case IDC_TOOLBARBUTTON + 6:
d1606 1
a1606 1
		case IDC_TOOLBARBUTTON + 7:
d1610 1
a1610 1
		case IDC_TOOLBARBUTTON + 8:
d1615 2
a1616 1
		default: break;
d1625 1
a1625 1

d1638 1
a1638 2


d1651 1
a1651 1

d1678 1
a1678 1

d1691 1
a1691 1

d1702 1
a1702 1
//purity
d1712 1
a1712 1
//purity
d1723 1
a1723 1

d1741 1
a1741 1

d1752 1
d1758 1
a1758 1

d1765 1
a1765 1

d1768 1
a1768 1
		// set trayicon-icon
d1777 1
a1777 1

d1803 1
a1803 1

d1819 1
a1819 1

d1837 1
a1837 2


d1912 1
@


1.117
log
@Customization for Scan Filter.
Fix for preferences toolbar button (take care when you do code renaming to keep the correct values)
@
text
@d1098 1
a1098 1
			g_eMuleApp.m_pDownloadQueue->StartPausedDownload(CCat::GetAllCatType());
@


1.116
log
@Formatting, comments, and name changes.
@
text
@d1614 1
a1614 1
			m_ctlToolBar.PressButton(IDC_TOOLBARBUTTON+8,TRUE);
d1616 1
a1616 1
			m_ctlToolBar.PressButton(IDC_TOOLBARBUTTON+8,FALSE);
a1627 44
/* // Added by Jmpep above
void CEmuleDlg::QuickSpeedUpload(UINT nID)
{
	EMULE_TRY

	switch (nID) {
		case MP_QS_U10: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()*0.1)); break ;
		case MP_QS_U20: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()*0.2)); break ;
		case MP_QS_U30: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()*0.3)); break ;
		case MP_QS_U40: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()*0.4)); break ;
		case MP_QS_U50: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()*0.5)); break ;
		case MP_QS_U60: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()*0.6)); break ;
		case MP_QS_U70: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()*0.7)); break ;
		case MP_QS_U80: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()*0.8)); break ;
		case MP_QS_U90: g_eMuleApp.m_pGlobPrefs->SetMaxUpload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()*0.9)); break ;
		case MP_QS_U100: g_eMuleApp.m_pGlobPrefs->SetMaxUpload(g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()); break ;
		case MP_QS_UPC: g_eMuleApp.m_pGlobPrefs->SetMaxUpload(UNLIMITED); break ;
		case MP_QS_UP10: g_eMuleApp.m_pGlobPrefs->SetMaxUpload(GetRecMaxUpload()); break ;
	}

	EMULE_CATCH2
}

void CEmuleDlg::QuickSpeedDownload(UINT nID)
{
	EMULE_TRY

	switch (nID) {
		case MP_QS_D10: g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()*0.1)); break ;
		case MP_QS_D20: g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()*0.2)); break ;
		case MP_QS_D30: g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()*0.3)); break ;
		case MP_QS_D40: g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()*0.4)); break ;
		case MP_QS_D50: g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()*0.5)); break ;
		case MP_QS_D60: g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()*0.6)); break ;
		case MP_QS_D70: g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()*0.7)); break ;
		case MP_QS_D80: g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()*0.8)); break ;
		case MP_QS_D90: g_eMuleApp.m_pGlobPrefs->SetMaxDownload((uint16)(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()*0.9)); break ;
		case MP_QS_D100: g_eMuleApp.m_pGlobPrefs->SetMaxDownload(g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()); break ;
		case MP_QS_DC: g_eMuleApp.m_pGlobPrefs->SetMaxDownload(UNLIMITED); break ;
	}

	EMULE_CATCH2
}
*/
@


1.115
log
@Changed log of files been hashed (better way of knowing remaining ones)
@
text
@d33 1
a33 1
#include "sharedfilelist.h"
d429 1
d1186 1
a1186 1
		g_eMuleApp.m_pSharedFilesList->filelist->SafeAddKFile(result);
@


1.114
log
@Log for files that has been hashed
@
text
@d79 2
d1184 1
d1187 1
a1187 1
		AddLogLine(false,GetResString(IDS_HASBEENHASHED), result->GetFileName(), g_eMuleApp.m_pSharedFilesList->GetRemainingToBeHashed());
@


1.113
log
@Log for files that has been hashed
@
text
@d1184 1
a1184 1
		AddLogLine(false,GetResString(IDS_HASBEENHASHED), result->GetFileName());
@


1.112
log
@Fixed focus not set on RestoreWindow
@
text
@d1183 2
a1184 1
		g_eMuleApp.m_pSharedFilesList->SafeAddKFile(result);	
@


1.111
log
@Added Known List to transfer window. Hope no major bug was introduced. Should be tested!
@
text
@d1394 1
@


1.110
log
@Rewrote the status bar code for extensibility and added session time display.
@
text
@d1224 1
d1241 1
a1251 1

d1258 1
@


1.109
log
@Category rewrite with predefined status/media type categories.
@
text
@d50 12
d281 1
a281 1
	m_ctlStatusBar.SetIcon(2, m_hiconUsers);
d443 4
d456 1
d459 6
d593 2
a594 2
			m_ctlStatusBar.SetText(txt,0,0);
			m_ctlStatusBar.SetTipText(0,txt);
d713 1
a713 1
			m_ctlStatusBar.SetIcon(5,m_hiconConn[1]);
d715 1
a715 1
			m_ctlStatusBar.SetIcon(5,m_hiconConn[2]);
d718 4
a721 4
			m_ctlStatusBar.SetText(GetResString(IDS_MAIN_CONNECTEDTO) + CString(server),0,0);
			m_ctlStatusBar.SetTipText(0,m_ctlStatusBar.GetText(0));
			m_ctlStatusBar.SetTipText(5,server);
			m_ctlStatusBar.SetText(server,5,0);
d748 1
a748 1
			m_ctlStatusBar.SetIcon(5,m_hiconConn[0]);
d750 2
a751 2
				m_ctlStatusBar.SetText(GetResString(IDS_CONNECTING),5,0);
				m_ctlStatusBar.SetTipText(5,_T(""));
d774 1
a774 1
			m_ctlStatusBar.SetIcon(5,m_hiconConn[0]);
d776 1
a776 1
				m_ctlStatusBar.SetText(GetResString(IDS_NOTCONNECTED),5,0);
d778 1
a778 1
				m_ctlStatusBar.SetTipText(5,_T(""));
d787 16
d804 3
d817 1
a817 1
	m_ctlStatusBar.SetText(sBuffer,2,0);
d822 1
a822 1
		m_ctlStatusBar.SetTipText(2,sBuffer);
d824 1
a824 1
		m_ctlStatusBar.SetTipText(2,GetResString(IDS_STATS_WAITCONN));
d835 1
a835 1
	m_ctlStatusBar.SetIcon(1,m_hiconIM[iconnr]);
d874 4
a877 4
		m_ctlStatusBar.SetText(sUpload,3,0);
		m_ctlStatusBar.SetText(sDownload,4,0);
		m_ctlStatusBar.SetIcon(3,m_hiconTrans[(lastuprate_kB)?1:0]);
		m_ctlStatusBar.SetIcon(4,m_hiconTrans[(lastdownrate_kB)?3:2]);
d981 8
a988 1
	int widths[6] = { rect.right-492, rect.right-470, rect.right-400, rect.right-330, rect.right-260,-1 };
d991 11
a1001 1
		widths[3]=rect.right-295; widths[4]=rect.right-190;
d1003 2
a1004 1
	m_ctlStatusBar.SetParts(6, widths);
d1527 3
a1529 3
			m_ctlStatusBar.SetTipText(2,GetResString(IDS_STATS_WAITCONN));
			m_ctlStatusBar.SetText(buffer,2,0);
			m_ctlStatusBar.SetTipText(5,_T(""));
d1532 1
a1532 1
				m_ctlStatusBar.SetText(GetResString(IDS_CONNECTING),5,0);
d1535 1
a1535 1
				m_ctlStatusBar.SetText(GetResString(IDS_NOTCONNECTED),5,0);
@


1.108
log
@Formatting, comments, and name changes.
@
text
@d799 1
a799 1
//v- eklmn: bugfix(11): crazy output in m_ctlStatusBar (update only tray or window)
d885 1
a885 1
// ^-eklmn: bugfix(11): crazy output in m_ctlStatusBar (update only tray or window)
d901 1
a901 1
	ShowTransferRate(); //eklmn: bugfix(11): crazy output in m_ctlStatusBar (update only tray or window)
d1035 1
a1035 1
			g_eMuleApp.m_pDownloadQueue->StartPausedDownload(g_eMuleApp.m_pGlobPrefs->GetAllcatType());
d1477 1
a1477 1
		ShowTransferRate(true);	//eklmn: bugfix(11): crazy output in m_ctlStatusBar (update only tray or window)
@


1.107
log
@A little more method factoring, a few name changes, no (intended) logic changes.
@
text
@d657 1
a657 1
void CEmuleDlg::ShowConnectionState(bool connected)
d659 1
a659 1
	ShowConnectionState(connected,_T(""));
d662 1
a662 1
void CEmuleDlg::ShowConnectionState(bool connected, CString server,bool iconOnly)
d666 1
a666 1
	if (connected)
@


1.106
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d1177 7
a1183 7
	m_wndTransfer.m_wndDownloadList.SaveSettings(CPreferences::tableDownload);
	m_wndTransfer.m_wndUploadList.SaveSettings(CPreferences::tableUpload);
	m_wndTransfer.m_wndQueueList.SaveSettings(CPreferences::tableQueue);
	m_dlgSearch.searchlistctrl.SaveSettings(CPreferences::tableSearch);
	m_wndSharedFiles.sharedfilesctrl.SaveSettings(CPreferences::tableShared);
	m_wndServer.serverlistctrl.SaveSettings(CPreferences::tableServer);
	m_wndIRC.serverChannelList.SaveSettings(CPreferences::tableIrc);
@


1.105
log
@hide window during shutdown
@
text
@d31 1
a31 1
#include "serverlist.h"
d56 1
a56 1
// CemuleDlg Dialog
d58 2
a59 2
CemuleDlg::CemuleDlg(CWnd* pParent /*=NULL*/)
	: CTrayDialog(CemuleDlg::IDD, pParent)
d64 3
a66 3
	mytrayIcon	=	NULL;
	ready = false;
	startUpMinimized=false;
d69 16
a84 16
	theApp.m_app_state = theApp.APP_STATE_RUNNING;
	status = 0;
	connicons[0] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_NOTCONNECTED),IMAGE_ICON,16,16,0);
	connicons[1] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_CONNECTED),IMAGE_ICON,16,16,0);
	connicons[2] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_CONNECTEDHIGH),IMAGE_ICON,16,16,0);
	transicons[0] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_UP0),IMAGE_ICON,16,16,0);
	transicons[1] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_UP1),IMAGE_ICON,16,16,0);
	transicons[2] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_DOWN0),IMAGE_ICON,16,16,0);
	transicons[3] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_DOWN1),IMAGE_ICON,16,16,0);
	imicons[0] = 0;
	imicons[1] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_MESSAGE),IMAGE_ICON,16,16,0);
	imicons[2] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_MPENDING),IMAGE_ICON,16,16,0);
	sourceTrayIcon = (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	sourceTrayIconLowID = (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON_LOWID),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	sourceTrayIconGrey = (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON_GREY),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	usersicon = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_USERS),IMAGE_ICON,16,16,0);
d88 1
a88 1
	m_pEngineData = new CEngineData(*theApp.pEngine);
d94 1
a94 1
CemuleDlg::~CemuleDlg()
d97 1
a97 1
	if (mytrayIcon) DestroyIcon(mytrayIcon);
d99 24
a122 24
	::DestroyIcon(connicons[0]);
	::DestroyIcon(connicons[1]);
	::DestroyIcon(connicons[2]);
	::DestroyIcon(transicons[0]);
	::DestroyIcon(transicons[1]);
	::DestroyIcon(transicons[2]);
	::DestroyIcon(transicons[3]);
	::DestroyIcon(imicons[1]);
	::DestroyIcon(imicons[2]);
	::DestroyIcon(sourceTrayIcon);
	::DestroyIcon(sourceTrayIconLowID);
	::DestroyIcon(sourceTrayIconGrey);
	::DestroyIcon(usersicon);
	if ( mytrayIcon )
	{
		DestroyIcon(mytrayIcon);
	}
	serverwnd.DestroyWindow();
	sharedfileswnd.DestroyWindow();
	searchwnd.DestroyWindow();
	chatwnd.DestroyWindow();
	transferwnd.DestroyWindow();
	statisticswnd.DestroyWindow();
	ircwnd.DestroyWindow();
d132 1
a132 1
void CemuleDlg::DoDataExchange(CDataExchange* pDX){
d136 1
a136 1
BEGIN_MESSAGE_MAP(CemuleDlg, CTrayDialog)
d177 1
a177 1
// CemuleDlg eventhandler
d179 1
a179 1
LRESULT CemuleDlg::OnAreYouEmule(WPARAM, LPARAM)
d184 1
a184 1
BOOL CemuleDlg::OnInitDialog()
d202 1
a202 1
	m_DefaultFont.CreatePointFont(theApp.glob_prefs->GetFontSize(),theApp.glob_prefs->GetUsedFont()); // DonGato
d204 8
a211 8
	//set toolbar
	toolbar.Create(WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN, CRect(0,0,0,0), this, IDC_TOOLBAR);
	toolbar.Init();
	toolbar.ShowSpeedMeter(theApp.glob_prefs->GetShowToolbarSpeedMeter());
	int iMaxRange = theApp.glob_prefs->GetMaxGraphDownloadRate();
	if(theApp.glob_prefs->GetMaxGraphUploadRate() > iMaxRange)
		iMaxRange = theApp.glob_prefs->GetMaxGraphUploadRate();
	toolbar.SetSpeedMeterRange(iMaxRange, 0);
d214 1
a214 1
	//set rebar
d217 2
a218 2
	toolbar.GetMaxSize(&sizeBar);
	rebar.Create(WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_BORDER | RBS_BANDBORDERS | /*RBS_AUTOSIZE |*/ RBS_VARHEIGHT | CCS_NODIVIDER | CCS_TOP,
d230 2
a231 2
	rbbi.hwndChild    = (HWND) toolbar;
	rebar.InsertBand(-1, &rbbi);
d247 1
a247 1
	rebar.InsertBand(-1, &rbbi);
d261 1
a261 1
	m_wndTaskbarNotifier.SetTextFont(_T("Arial"),theApp.glob_prefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE);
d265 3
a267 3
	// set statusbar
	statusbar.Create(WS_CHILD|WS_VISIBLE|CCS_BOTTOM|SBARS_SIZEGRIP|SBT_TOOLTIPS,CRect(0,0,0,0), this, IDC_STATUSBAR) ;	//Cax2 status bar tooltip
	statusbar.EnableToolTips(true);
d269 1
a269 1
	statusbar.SetIcon(2, usersicon);
d272 9
a280 9
	preferenceswnd.SetPrefs(theApp.glob_prefs);
	serverwnd.Create(IDD_SERVER);
	sharedfileswnd.Create(IDD_FILES);
	searchwnd.Create(IDD_SEARCH);
	chatwnd.Create(IDD_CHAT);
	transferwnd.Create(IDD_TRANSFER);
	statisticswnd.Create(IDD_STATISTICS);
	ircwnd.Create(IDD_IRC);
	activewnd = &transferwnd;
d286 1
a286 1
	rebar.GetWindowRect(&rReBarRect);
d288 1
a288 1
	statusbar.GetWindowRect(&rStatusbarRect);
d293 1
a293 1
	toolbar.GetWindowRect(&rToolbarRect);
d295 1
a295 1
	statusbar.GetWindowRect(&rStatusbarRect);
d299 1
a299 1
	serverwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d301 1
a301 1
	transferwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d303 1
a303 1
	sharedfileswnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d305 1
a305 1
	searchwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d307 1
a307 1
	chatwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d309 1
a309 1
	ircwnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top,
d311 1
a311 1
	statisticswnd.SetWindowPos(NULL, rClientRect.left, rClientRect.top, 
d318 8
a325 8
	AddAnchor(serverwnd,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(transferwnd,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(sharedfileswnd,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(searchwnd,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(chatwnd,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(ircwnd,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(statusbar,BOTTOM_LEFT,BOTTOM_RIGHT);
	AddAnchor(statisticswnd,TOP_LEFT,BOTTOM_RIGHT);
d327 1
a327 1
	AddAnchor(rebar,TOP_LEFT, TOP_RIGHT);
d329 1
a329 1
	AddAnchor(toolbar,TOP_LEFT, TOP_RIGHT);
d332 1
a332 1
	statisticswnd.ShowInterval();
d334 1
a334 1
	TraySetMinimizeToTray(theApp.glob_prefs->DoMinToTray());
d338 1
a338 1
	searchwnd.UpdateCatTabs();
d340 2
a341 2
	serverwnd.ShowWindow(SW_SHOW);
	activewnd = &serverwnd;
d343 3
a345 3
	if (theApp.pendinglink){
		OnWMData(NULL,(LPARAM) &theApp.sendstruct); // changed by Cax2 28/10/02
		delete theApp.pendinglink;
d348 1
a348 1
	theApp.glob_prefs->SetSmartIdState(1);		//Cax2 - smartId bugfix
d353 1
a353 1
	if(!(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04))
d355 1
a355 1
		if (theApp.glob_prefs->DoAutoConnect())
d361 1
a361 1
	wp=theApp.glob_prefs->GetEmuleWindowPlacement();
d369 1
a369 1
	theApp.mmserver->Init();
d374 1
a374 1
	if (theApp.glob_prefs->UseSplashScreen() && !theApp.glob_prefs->GetStartMinimized())
d384 1
a384 1
	theApp.pEngine->Init(m_hWnd);
d394 1
a394 1
void CemuleDlg::OnTimer(UINT_PTR nIDEvent)
d401 1
a401 1
		switch (status)
d404 3
a406 3
				status++;
				ready = true;
				theApp.sharedfiles->SetOutputCtrl(&sharedfileswnd.sharedfilesctrl);
d410 2
a411 2
				status++;
				theApp.serverlist->Init();
d414 2
a415 2
				status++;
				theApp.downloadqueue->Init();
d417 4
a420 4
				if (!theApp.listensocket->StartListening())
					AddLogLine(false,IDS_MAIN_SOCKETERROR,theApp.glob_prefs->GetPort());
				if (!theApp.clientudp->Create())
			   		AddLogLine(false,IDS_MAIN_SOCKETERROR,theApp.glob_prefs->GetUDPPort());
d423 1
a423 1
				if (theApp.glob_prefs->DoAutoConnect())
d429 1
a429 1
				theApp.webserver->StartServer();
d439 1
a439 1
	    if (status < 3) 
d448 1
a448 1
void CemuleDlg::OnSysCommand(UINT nID, LPARAM lParam)
d459 1
a459 1
		        if(theApp.glob_prefs->GetCloseToTray()) 
d467 1
a467 1
		//v- eklmn: bugfix(12): improved output in statusbar (update only tray or window)
d475 1
a475 1
		//^- eklmn: bugfix(12): improved output in statusbar (update only tray or window)
d483 1
a483 1
void CemuleDlg::OnPaint() 
d487 3
a489 3
	if (!startUpMinimized) {
		startUpMinimized=true;
		if (theApp.glob_prefs->GetStartMinimized())
d515 1
a515 1
HCURSOR CemuleDlg::OnQueryDragIcon(){
d519 1
a519 1
void CemuleDlg::OnBnClickedButton2()
d524 1
a524 1
    if (!theApp.serverconnect->IsConnected()) 
d526 2
a527 2
	  if (!theApp.serverconnect->IsConnecting()  ) StartConnection(); else {
		  theApp.serverconnect->StopConnectionTry();
d538 1
a538 1
void CemuleDlg::ResetLog()
d542 1
a542 1
	CSingleLock singleLock(&critical_log_section);	//Cax2 - this needs the mutex too
d544 2
a545 2
	logtext="";
	serverwnd.logbox.SetWindowText(logtext);
d551 1
a551 1
void CemuleDlg::ResetDebugLog()
d555 1
a555 1
	CSingleLock singleLock(&critical_log_section);	//Cax2 - this needs the mutex too
d557 2
a558 2
	debuglog="";
	serverwnd.debugbox.SetWindowText(debuglog);
d564 1
a564 1
void CemuleDlg::AddLogText(bool addtostatusbar,const CString& txt, bool bDebug) {
d568 1
a568 1
        if (statusbar.m_hWnd && theApp.m_app_state != CemuleApp::APP_STATE_SHUTINGDOWN)
d570 2
a571 2
			statusbar.SetText(txt,0,0);
			statusbar.SetTipText(0,txt);
d580 2
a581 2
	CSingleLock singleLock(&critical_log_section);
	CEdit2 *logbox=(bDebug)?&serverwnd.debugbox:&serverwnd.logbox;
d585 1
a585 1
	CString boxtext=(bDebug)?debuglog:logtext;
d596 1
a596 1
		debuglog=boxtext;
d598 1
a598 1
		logtext=boxtext;
d606 1
a606 1
		ShowNotifier(txt, TBN_LOG, false, theApp.glob_prefs->GetUseLogNotifier());
d609 1
a609 1
	if (theApp.glob_prefs->LogToFile())
d611 1
a611 1
		CString LogFilePath = theApp.glob_prefs->GetAppDir();
d628 1
a628 1
void CemuleDlg::AddServerMessageLine(LPCTSTR line)
d631 1
a631 1
	serverwnd.servermsgbox.AppendText(line+CString(_T('\n'))); //merge from offic. 0.30a - bond006
d635 1
a635 1
void CemuleDlg::AddBugReport(LPCTSTR sFile, long nLine, CString msg)
d639 1
a639 1
	if(theApp.glob_prefs->GetBugReport())
d650 1
a650 1
void CemuleDlg::ShowConnectionState()
d653 1
a653 1
	ShowConnectionState( theApp.serverconnect->IsConnected() ,_T(""));
d657 1
a657 1
void CemuleDlg::ShowConnectionState(bool connected)
d662 1
a662 1
void CemuleDlg::ShowConnectionState(bool connected, CString server,bool iconOnly)
d680 1
a680 1
		toolbar.SetButtonInfo(IDC_TOOLBARBUTTON+0, lptbbi);
d682 1
a682 1
		toolbar.AutoSize();
d685 1
a685 1
		if (theApp.serverconnect->IsLowID()) 
d690 1
a690 1
			statusbar.SetIcon(5,connicons[1]);
d692 1
a692 1
			statusbar.SetIcon(5,connicons[2]);
d695 4
a698 4
			statusbar.SetText(GetResString(IDS_MAIN_CONNECTEDTO) + CString(server),0,0);
			statusbar.SetTipText(0,statusbar.GetText(0));
			statusbar.SetTipText(5,server);
			statusbar.SetText(server,5,0);
d704 1
a704 1
		if (theApp.serverconnect->IsConnecting()) 
d722 1
a722 1
			toolbar.SetButtonInfo(IDC_TOOLBARBUTTON+0, lptbbi);
d725 1
a725 1
			statusbar.SetIcon(5,connicons[0]);
d727 2
a728 2
				statusbar.SetText(GetResString(IDS_CONNECTING),5,0);
				statusbar.SetTipText(5,_T(""));
d747 1
a747 1
			toolbar.SetButtonInfo(IDC_TOOLBARBUTTON+0, lptbbi);
d749 1
a749 1
			//toolbar.AutoSize();
d751 1
a751 1
			statusbar.SetIcon(5,connicons[0]);
d753 1
a753 1
				statusbar.SetText(GetResString(IDS_NOTCONNECTED),5,0);
d755 1
a755 1
				statusbar.SetTipText(5,_T(""));
d765 1
a765 1
void CemuleDlg::ShowUserCount(uint32 users_toshow, uint32 files_toshow)
d772 1
a772 1
	 	theApp.serverlist->GetUserFileStatus( totaluser, totalfile );
d775 1
a775 1
	statusbar.SetText(sBuffer,2,0);
d777 1
a777 1
	if(theApp.serverconnect->IsConnected())
d780 1
a780 1
		statusbar.SetTipText(2,sBuffer);
d782 1
a782 1
		statusbar.SetTipText(2,GetResString(IDS_STATS_WAITCONN));
d789 1
a789 1
void CemuleDlg::ShowMessageState(uint8 iconnr)
d793 1
a793 1
	statusbar.SetIcon(1,imicons[iconnr]);
d799 2
a800 2
//v- eklmn: bugfix(11): crazy output in statusbar (update only tray or window)
void CemuleDlg::ShowTransferRate(bool bUpdateAll)
d808 2
a809 2
	float lastuprate_kB = (float)theApp.uploadqueue->GetDataRateShown()/1024;
	float lastdownrate_kB = (float)theApp.downloadqueue->GetDataRate()/1024;
d811 2
a812 2
	float lastuprateoverhead_kB = (float)theApp.uploadqueue->GetUpDataRateOverhead()/1024;
	float lastdownrateoverhead_kB = (float)theApp.downloadqueue->GetDownDataRateOverhead()/1024;
d815 1
a815 1
	if (theApp.glob_prefs->ShowOverhead()) {
d827 2
a828 2
	if(theApp.glob_prefs->GetShowToolbarSpeedMeter())
		toolbar.SetSpeedMeterValues((int)lastuprate_kB, (int)lastdownrate_kB);
d832 4
a835 4
		statusbar.SetText(sUpload,3,0);
		statusbar.SetText(sDownload,4,0);
		statusbar.SetIcon(3,transicons[(lastuprate_kB)?1:0]);
		statusbar.SetIcon(4,transicons[(lastdownrate_kB)?3:2]);
d837 2
a838 2
		transferwnd.UpdateDownloadHeader();
		transferwnd.UpdateUploadHeader();
d844 3
a846 3
		int iMaxValue = theApp.glob_prefs->GetMaxGraphDownloadRate();
		if(iMaxValue < theApp.glob_prefs->GetMaxGraphUploadRate())
			iMaxValue = theApp.glob_prefs->GetMaxGraphUploadRate();
d848 1
a848 1
		int DownRateProcent = (int)ceil((lastdownrate_kB*100)/theApp.glob_prefs->GetMaxGraphDownloadRate());
d854 1
a854 1
		if (theApp.serverconnect->IsConnecting())
d856 2
a857 2
		else if (theApp.serverconnect->IsConnected())
			sServer.Format(_T("%s: %s"),GetResString(IDS_SERVER),theApp.serverconnect->GetCurrentServer()->GetListName());
d864 1
a864 1
		if(!(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04))
d877 1
a877 1
	if (!TrayIsVisible() && theApp.glob_prefs->ShowRatesOnTitle()) {
d885 1
a885 1
// ^-eklmn: bugfix(11): crazy output in statusbar (update only tray or window)
d887 1
a887 1
void CemuleDlg::OnCancel()
d891 1
a891 1
	if (theApp.glob_prefs->DoMinToTray()) 
d901 1
a901 1
	ShowTransferRate(); //eklmn: bugfix(11): crazy output in statusbar (update only tray or window)
d905 1
a905 1
void CemuleDlg::SetActiveDialog(CDialog* dlg)
d909 1
a909 1
	if(dlg == activewnd)
d911 1
a911 1
	activewnd->ShowWindow(SW_HIDE);
d913 8
a920 8
	activewnd = dlg;
	if (dlg==&serverwnd) toolbar.PressMuleButton(IDC_TOOLBARBUTTON+1);
	else if (dlg==&transferwnd) toolbar.PressMuleButton(IDC_TOOLBARBUTTON+2);
	else if (dlg==&searchwnd) toolbar.PressMuleButton(IDC_TOOLBARBUTTON+3);
	else if (dlg==&sharedfileswnd) toolbar.PressMuleButton(IDC_TOOLBARBUTTON+4);
	else if (dlg==&chatwnd) {toolbar.PressMuleButton(IDC_TOOLBARBUTTON+5);;theApp.emuledlg->chatwnd.chatselector.ShowChat();}
	else if (dlg==&ircwnd) toolbar.PressMuleButton(IDC_TOOLBARBUTTON+6);
	else if (dlg==&statisticswnd) {toolbar.PressMuleButton(IDC_TOOLBARBUTTON+7);statisticswnd.ShowStatistics();}
d925 1
a925 1
void CemuleDlg::OnSize(UINT nType,int cx,int cy)
d935 1
a935 1
void CemuleDlg::ResizeStatusBar()		//Cax2
d938 1
a938 1
	statusbar.GetClientRect(&rect);
d940 1
a940 1
	if (theApp.glob_prefs->ShowOverhead())
d944 1
a944 1
	statusbar.SetParts(6, widths);
d947 1
a947 1
LRESULT CemuleDlg::OnWMData(WPARAM wParam,LPARAM lParam)
d954 1
a954 1
		if( theApp.glob_prefs->IsBringToFront() ){
d975 1
a975 1
					theApp.downloadqueue->AddFileLinkToDownload(pFileLink);
d984 1
a984 1
						theApp.emuledlg->serverwnd.UpdateServerMetFromURL(strAddress);
d1000 1
a1000 1
					if (!theApp.emuledlg->serverwnd.serverlistctrl.AddServer(pSrv,true)) 
d1029 1
a1029 1
			theApp.serverconnect->Disconnect();
d1035 1
a1035 1
			theApp.downloadqueue->StartPausedDownload(theApp.glob_prefs->GetAllcatType());
d1045 1
a1045 1
			theApp.sharedfiles->Reload();
d1063 2
a1064 2
			if (down.GetLength()>0) theApp.glob_prefs->SetMaxDownload(_tstoi(down));
			if (up.GetLength()>0) theApp.glob_prefs->SetMaxUpload(_tstoi(up));
d1081 1
a1081 1
			pString.Format(_T("%sstatus.log"),theApp.glob_prefs->GetAppDir());
d1085 2
a1086 2
			if (theApp.serverconnect->IsConnected()) pString=GetResString(IDS_CONNECTED); else
				if (theApp.serverconnect->IsConnecting()) pString=GetResString(IDS_CONNECTING); else pString=GetResString(IDS_DISCONNECTED);
d1090 1
a1090 1
			pString.Format(_T("\n")+GetResString(IDS_UPDOWN),(float)theApp.uploadqueue->GetDataRate()/1024, (float)theApp.downloadqueue->GetDataRate()/1024);
d1093 1
a1093 1
			pString=_T("\n")+transferwnd.m_wndDownloadList.getTextList();
d1108 1
a1108 1
LRESULT CemuleDlg::OnFileHashed(WPARAM wParam,LPARAM lParam)
d1122 2
a1123 2
		theApp.sharedfiles->filelist->SafeAddKFile(result);
		theApp.sharedfiles->SafeAddKFile(result);	
d1132 1
a1132 1
void CemuleDlg::OnClose()
d1136 3
a1138 4
	if (theApp.m_app_state == theApp.APP_STATE_RUNNING)
		if (theApp.glob_prefs->IsConfirmExitEnabled()) 
			if (IDNO == MessageBox(GetResString(IDS_MAIN_EXIT),GetResString(IDS_MAIN_EXITTITLE),MB_YESNO | MB_DEFBUTTON2))
				return;
d1144 2
a1145 2
	if ( theApp.serverconnect->IsConnected() )
		theApp.serverconnect->Disconnect();
d1148 1
a1148 1
   	theApp.m_app_state = theApp.APP_STATE_SHUTINGDOWN;
d1150 1
a1150 1
	theApp.OnlineSig(); // Added By Bouc7
d1154 1
a1154 1
	theApp.glob_prefs->SetWindowLayout(wp);
d1161 14
a1174 14
	transferwnd.m_wndDownloadList.SetRedraw(false);
	transferwnd.m_wndUploadList.SetRedraw(false);
	transferwnd.m_wndQueueList.SetRedraw(false);
	searchwnd.searchlistctrl.SetRedraw(false);
	sharedfileswnd.sharedfilesctrl.SetRedraw(false);
	ircwnd.serverChannelList.SetRedraw(false);
    transferwnd.m_wndInfoList.SetRedraw(false);
    chatwnd.chatselector.SetRedraw(false);
    statisticswnd.SetRedraw(false);
    transferwnd.SetRedraw(false);
    searchwnd.SetRedraw(false);
    sharedfileswnd.SetRedraw(false);
    ircwnd.SetRedraw(false);
    chatwnd.SetRedraw(false);
d1177 12
a1188 12
	transferwnd.m_wndDownloadList.SaveSettings(CPreferences::tableDownload);
	transferwnd.m_wndUploadList.SaveSettings(CPreferences::tableUpload);
	transferwnd.m_wndQueueList.SaveSettings(CPreferences::tableQueue);
	searchwnd.searchlistctrl.SaveSettings(CPreferences::tableSearch);
	sharedfileswnd.sharedfilesctrl.SaveSettings(CPreferences::tableShared);
	serverwnd.serverlistctrl.SaveSettings(CPreferences::tableServer);
	ircwnd.serverChannelList.SaveSettings(CPreferences::tableIrc);

	theApp.glob_prefs->Add2TotalDownloaded(theApp.stat_sessionReceivedBytes);
	theApp.glob_prefs->Add2TotalUploaded(theApp.stat_sessionSentBytes);
	theApp.glob_prefs->SetDetailColumnWidth(transferwnd.GetDetailColumnWidth());
	theApp.glob_prefs->Save();
d1192 1
a1192 1
	if (theApp.glob_prefs->AutoTakeED2KLinks())
d1196 6
a1201 6
    sharedfileswnd.sharedfilesctrl.DeleteAllItems();
	transferwnd.m_wndUploadList.DeleteAllItems();
	transferwnd.m_wndQueueList.DeleteAllItems();
    transferwnd.m_wndDownloadList.DeleteAllItems();
	chatwnd.chatselector.DeleteAllItems();
	searchwnd.searchlistctrl.DeleteAllItems();
d1205 1
a1205 1
	sharedfileswnd.sharedfilesctrl.DeleteAllItems();
d1209 7
a1215 7
	serverwnd.DestroyWindow();
	transferwnd.DestroyWindow();
	searchwnd.DestroyWindow();
	sharedfileswnd.DestroyWindow();
	ircwnd.DestroyWindow();
	chatwnd.DestroyWindow();
	statisticswnd.DestroyWindow();
d1217 2
a1218 2
	theApp.clientlist->DeleteAll();
	theApp.knownfiles->Save();	//Cax2 - moved here, should avoid crashes when closing & downloading.
d1223 1
a1223 1
	if (theApp.glob_prefs->GetAutoBackup())
d1225 1
a1225 1
		theApp.emuledlg->RunBackupNow(true);
d1231 1
a1231 1
void CemuleDlg::OnTrayRButtonUp(CPoint pt)
d1242 4
a1245 4
									theApp.glob_prefs->GetMaxGraphUploadRate(), 
									theApp.glob_prefs->GetMaxGraphDownloadRate(),
									theApp.glob_prefs->GetMaxUpload(),
									theApp.glob_prefs->GetMaxDownload());
d1277 1
a1277 1
					preferenceswnd.DoModal();
d1291 1
a1291 1
void CemuleDlg::StartConnection()
d1296 1
a1296 1
	if ( serverwnd.serverlistctrl.GetSelectedCount()>1 )
d1298 1
a1298 1
		serverwnd.serverlistctrl.PostMessage(WM_COMMAND,MP_CONNECTTO,0L);
d1303 1
a1303 1
		theApp.serverconnect->ConnectToAnyServer();
d1305 1
a1305 1
		theApp.pEngine->ConnectToAnyServer();
d1313 1
a1313 1
void CemuleDlg::CloseConnection()
d1318 1
a1318 1
	theApp.serverconnect->Disconnect();
d1320 1
a1320 1
	theApp.OnlineSig(); // Added By Bouc7 
d1325 1
a1325 1
void CemuleDlg::RestoreWindow()
d1336 1
a1336 1
void CemuleDlg::ShowStatistics() 
d1338 1
a1338 1
	statisticswnd.ShowStatistics();	
d1341 1
a1341 1
void CemuleDlg::UpdateTrayIcon(int procent)
d1345 2
a1346 2
	//HICON mytrayIcon;
	//if (mytrayIcon!=NULL) DestroyIcon(mytrayIcon);
d1355 4
a1358 4
	if(theApp.serverconnect->IsConnected() && !theApp.serverconnect->IsLowID())
		trayIcon.Init(sourceTrayIcon,100,1,1,16,16, RGB(37,97,37));
	else if(theApp.serverconnect->IsConnected() && theApp.serverconnect->IsLowID())
		trayIcon.Init(sourceTrayIconLowID,100,1,1,16,16, RGB(37,97,37));
d1361 1
a1361 1
		trayIcon.Init(sourceTrayIconGrey,100,1,1,16,16, RGB(37,97,37));
d1364 1
a1364 1
	trayIcon.SetColorLevels(pLimits16,pColors16,1);
d1369 4
a1372 4
	mytrayIcon = trayIcon.Create(pVals16);
	ASSERT (mytrayIcon != NULL);
	if (mytrayIcon)
		TraySetIcon(mytrayIcon);
d1378 1
a1378 1
int CemuleDlg::OnCreate(LPCREATESTRUCT lpCreateStruct)
d1383 1
a1383 1
	/*if (theApp.glob_prefs->UseSplashScreen()){
d1395 1
a1395 1
void CemuleDlg::ShowNotifier(CString Text, int MsgType, bool ForceSoundOFF, bool bMsgEnabled) 
d1401 1
a1401 1
		m_wndTaskbarNotifier.Show(Text, MsgType, 500,theApp.glob_prefs->NotificationDisplayTime());
d1405 2
a1406 2
    if (theApp.glob_prefs->GetUseSoundInNotifier() && !ForceSoundOFF && ShowIt == true)
        PlaySound(theApp.glob_prefs->GetNotifierWavSoundPath(), NULL, SND_FILENAME | SND_NOSTOP | SND_NOWAIT | SND_ASYNC);
d1411 1
a1411 1
LRESULT CemuleDlg::OnTaskbarNotifierClicked(WPARAM wParam,LPARAM lParam)
d1421 1
a1421 1
		SetActiveDialog(&chatwnd);
d1425 1
a1425 1
		SetActiveDialog(&transferwnd);
d1429 1
a1429 1
		SetActiveDialog(&transferwnd);
d1433 1
a1433 1
		SetActiveDialog(&serverwnd);	
d1437 1
a1437 1
		SetActiveDialog(&serverwnd);	
d1448 1
a1448 1
void CemuleDlg::Localize()
d1454 1
a1454 1
		toolbar.Localize();
d1456 1
a1456 1
		if (!statusbar)
d1460 2
a1461 2
		if(theApp.serverconnect->IsConnected())
			ShowUserCount(theApp.serverconnect->GetCurrentServer()->GetUsers(),theApp.serverconnect->GetCurrentServer()->GetFiles());
d1467 3
a1469 3
			statusbar.SetTipText(2,GetResString(IDS_STATS_WAITCONN));
			statusbar.SetText(buffer,2,0);
			statusbar.SetTipText(5,_T(""));
d1471 2
a1472 2
			if(theApp.serverconnect->IsConnecting())
				statusbar.SetText(GetResString(IDS_CONNECTING),5,0);
d1475 1
a1475 1
				statusbar.SetText(GetResString(IDS_NOTCONNECTED),5,0);
d1477 1
a1477 1
		ShowTransferRate(true);	//eklmn: bugfix(11): crazy output in statusbar (update only tray or window)
d1484 1
a1484 1
void CemuleDlg::DisConnect()
d1489 1
a1489 1
	if(!theApp.serverconnect->IsConnected()) 
d1492 1
a1492 1
		if(!theApp.serverconnect->IsConnecting()) 
d1496 1
a1496 1
			theApp.serverconnect->StopConnectionTry();
d1508 1
a1508 1
BOOL CemuleDlg::OnCommand(WPARAM wParam, LPARAM lParam)
d1518 2
a1519 2
			SetActiveDialog(&serverwnd);
			toolbar.PressMuleButton(wParam);
d1522 2
a1523 2
			SetActiveDialog(&transferwnd);
			toolbar.PressMuleButton(wParam);
d1526 2
a1527 2
			SetActiveDialog(&searchwnd);
			toolbar.PressMuleButton(wParam);
d1530 2
a1531 2
			SetActiveDialog(&sharedfileswnd);
			toolbar.PressMuleButton(wParam);
d1534 2
a1535 2
			SetActiveDialog(&chatwnd);
			toolbar.PressMuleButton(wParam);
d1538 2
a1539 2
			SetActiveDialog(&ircwnd);
			toolbar.PressMuleButton(wParam);
d1542 2
a1543 2
			SetActiveDialog(&statisticswnd);
			toolbar.PressMuleButton(wParam);
d1546 3
a1548 3
			toolbar.PressButton(IDC_TOOLBARBUTTON+8,TRUE);
			preferenceswnd.DoModal();
			toolbar.PressButton(IDC_TOOLBARBUTTON+8,FALSE);
d1561 1
a1561 1
void CemuleDlg::QuickSpeedUpload(UINT nID)
d1566 12
a1577 12
		case MP_QS_U10: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.1)); break ;
		case MP_QS_U20: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.2)); break ;
		case MP_QS_U30: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.3)); break ;
		case MP_QS_U40: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.4)); break ;
		case MP_QS_U50: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.5)); break ;
		case MP_QS_U60: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.6)); break ;
		case MP_QS_U70: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.7)); break ;
		case MP_QS_U80: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.8)); break ;
		case MP_QS_U90: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.9)); break ;
		case MP_QS_U100: theApp.glob_prefs->SetMaxUpload(theApp.glob_prefs->GetMaxGraphUploadRate()); break ;
		case MP_QS_UPC: theApp.glob_prefs->SetMaxUpload(UNLIMITED); break ;
		case MP_QS_UP10: theApp.glob_prefs->SetMaxUpload(GetRecMaxUpload()); break ;
d1583 1
a1583 1
void CemuleDlg::QuickSpeedDownload(UINT nID)
d1588 11
a1598 11
		case MP_QS_D10: theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.1)); break ;
		case MP_QS_D20: theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.2)); break ;
		case MP_QS_D30: theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.3)); break ;
		case MP_QS_D40: theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.4)); break ;
		case MP_QS_D50: theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.5)); break ;
		case MP_QS_D60: theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.6)); break ;
		case MP_QS_D70: theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.7)); break ;
		case MP_QS_D80: theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.8)); break ;
		case MP_QS_D90: theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.9)); break ;
		case MP_QS_D100: theApp.glob_prefs->SetMaxDownload(theApp.glob_prefs->GetMaxGraphDownloadRate()); break ;
		case MP_QS_DC: theApp.glob_prefs->SetMaxDownload(UNLIMITED); break ;
d1604 1
a1604 1
void CemuleDlg::QuickSpeedOther(UINT nID)
d1609 2
a1610 2
		case MP_QS_PA: theApp.glob_prefs->SetMaxUpload((uint16)(1)); theApp.glob_prefs->SetMaxDownload((uint16)(1)); break ;
		case MP_QS_UA: theApp.glob_prefs->SetMaxUpload((uint16)(theApp.glob_prefs->GetMaxGraphUploadRate())); theApp.glob_prefs->SetMaxDownload((uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate())); break ;
d1618 1
a1618 1
int CemuleDlg::GetRecMaxUpload() 
d1622 3
a1624 3
	if (theApp.glob_prefs->GetMaxGraphUploadRate()<7) return 0;
	if (theApp.glob_prefs->GetMaxGraphUploadRate()<15) return theApp.glob_prefs->GetMaxGraphUploadRate()-3;
	return (theApp.glob_prefs->GetMaxGraphUploadRate()-4);
d1631 1
a1631 1
BOOL CemuleDlg::OnQueryEndSession() 
d1638 1
a1638 1
	if ( theApp.m_app_state == theApp.APP_STATE_DONE )
d1642 1
a1642 1
	else if ( theApp.m_app_state   ==   theApp.APP_STATE_RUNNING)
d1644 1
a1644 1
		theApp.m_app_state = theApp.APP_STATE_SHUTINGDOWN; 
d1658 1
a1658 1
LRESULT CemuleDlg::OnWebServerConnect(WPARAM wParam, LPARAM lParam)
d1663 1
a1663 1
	theApp.serverconnect->ConnectToServer(*(CServer*)wParam);
d1671 1
a1671 1
LRESULT CemuleDlg::OnWebServerRemove(WPARAM wParam, LPARAM lParam)
d1675 1
a1675 1
	theApp.emuledlg->serverwnd.serverlistctrl.RemoveServer((CServer*)wParam); // sivka's bugfix
d1682 1
a1682 1
LRESULT CemuleDlg::OnWebServerAddToStatic(WPARAM wParam, LPARAM lParam)
d1686 1
a1686 1
	theApp.emuledlg->serverwnd.serverlistctrl.StaticServerFileAppend((CServer*)wParam);
d1692 1
a1692 1
LRESULT CemuleDlg::OnWebServerRemoveFromStatic(WPARAM wParam, LPARAM lParam)
d1696 1
a1696 1
	theApp.emuledlg->serverwnd.serverlistctrl.StaticServerFileRemove((CServer*)wParam);
d1703 1
a1703 1
LRESULT CemuleDlg::OnProcessTaskUI(WPARAM wParam, LPARAM lParam)
d1711 1
a1711 1
		pTask->ProcessForUI(*theApp.pEngine);
d1721 1
a1721 1
LRESULT CemuleDlg::OnWebSharedFilesReload(WPARAM wParam, LPARAM lParam)
d1725 1
a1725 1
	theApp.sharedfiles->Reload(true);
d1732 1
a1732 1
bool CemuleDlg::IsRunning()
d1734 1
a1734 1
	return (theApp.m_app_state == CemuleApp::APP_STATE_RUNNING);
d1737 1
a1737 1
void CemuleDlg::OnNcDestroy()
d1744 1
a1744 1
BOOL CemuleDlg::TrayShow(void)
d1747 1
a1747 1
	int DownRateProcent = (int)ceil((lastdownrate/10.24)/theApp.glob_prefs->GetMaxGraphDownloadRate());
d1756 1
a1756 1
void CemuleDlg::RunBackupNow(bool automated)
d1758 1
a1758 1
	if (theApp.glob_prefs->GetBackupDatFiles())
d1760 1
a1760 1
	if (theApp.glob_prefs->GetBackupMetFiles())
d1762 1
a1762 1
	if (theApp.glob_prefs->GetBackupIniFiles())
d1764 1
a1764 1
	if (theApp.glob_prefs->GetBackupPartMetFiles())
d1766 1
a1766 1
	if (theApp.glob_prefs->GetBackupPartFiles())
d1782 1
a1782 1
void CemuleDlg::BackupFromAppDir(LPCSTR extensionToBack,bool automated)  
d1784 1
a1784 1
	CString szConfigDirPath = CString(theApp.glob_prefs->GetConfigDir());
d1786 1
a1786 1
	buffer.Format(_T("%s\\"),theApp.glob_prefs->GetBackupDir());
d1798 1
a1798 1
void CemuleDlg::BackupFromTempDir(LPCSTR extensionToBack, bool automated)
d1800 1
a1800 1
	CString szTempPath = CString(theApp.glob_prefs->GetTempDir()); 
d1802 1
a1802 1
	buffer.Format(_T("%s\\Temp\\"),theApp.glob_prefs->GetBackupDir());
d1807 2
a1808 2
	if(!PathFileExists(theApp.glob_prefs->GetBackupDir()))
		CreateDirectory(theApp.glob_prefs->GetBackupDir(), NULL);
d1817 1
a1817 1
void CemuleDlg::BackupFiles(LPCSTR extensionToBack,bool automated, CString szPath, CString szBackupPath)
d1847 1
a1847 1
				if (!theApp.glob_prefs->GetBackupOverwrite())
@


1.104
log
@Second batch of name changes
@
text
@d1136 4
a1139 3
	if (theApp.m_app_state == theApp.APP_STATE_RUNNING )
	if (theApp.glob_prefs->IsConfirmExitEnabled()) 
			if (IDNO==MessageBox(GetResString(IDS_MAIN_EXIT),GetResString(IDS_MAIN_EXITTITLE),MB_YESNO | MB_DEFBUTTON2)) return;
d1156 3
@


1.103
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@d1107 1
a1107 1

d1113 3
a1115 1
	if (wParam){
d1117 1
d1120 2
a1121 1
	else{
d1131 1
a1131 1

@


1.102
log
@New sockets
@
text
@d808 2
a809 2
	float lastuprate_kB = (float)theApp.uploadqueue->GetDatarateShown()/1024;
	float lastdownrate_kB = (float)theApp.downloadqueue->GetDatarate()/1024;
d811 2
a812 2
	float lastuprateoverhead_kB = (float)theApp.uploadqueue->GetUpDatarateOverhead()/1024;
	float lastdownrateoverhead_kB = (float)theApp.downloadqueue->GetDownDatarateOverhead()/1024;
d1090 1
a1090 1
			pString.Format(_T("\n")+GetResString(IDS_UPDOWN),(float)theApp.uploadqueue->GetDatarate()/1024, (float)theApp.downloadqueue->GetDatarate()/1024);
@


1.101
log
@Fix for lists navigation [from official]
@
text
@d1297 2
@


1.100
log
@Fixed start paused files by category (when option set or by menu)
Removed Reset All Statistics (agreed with Eklmn that has no use and it brings problems)
Removed Mobile Mule profile
Localized 'All' tab when language changed
@
text
@d1189 4
a1192 1
	transferwnd.m_wndDownloadList.DeleteAllItems();
@


1.99
log
@Added Category missing feature in Search Window.
@
text
@d1021 5
a1025 1
		if (clcommand=="connect") {StartConnection(); return true;}
d1027 5
a1031 1
		if (clcommand=="disconnect") {theApp.serverconnect->Disconnect(); return true;}
d1033 22
a1054 5
		if (clcommand=="resume") {theApp.downloadqueue->StartPausedDownload(); return true;} //Cax2 restored the original function name
		if (clcommand=="exit") {OnClose(); return true;}
		if (clcommand=="reload") {theApp.sharedfiles->Reload(); return true;}
		if (clcommand=="restore") {RestoreWindow();return true;}
		if (clcommand.Left(7).MakeLower()=="limits=" && clcommand.GetLength()>8) {
d1058 2
a1059 1
			if (pos>0) {
d1069 2
a1070 1
		if (clcommand=="help" || clcommand=="/?") {
a1071 1

d1075 2
a1076 1
		if (clcommand=="status") {
@


1.98
log
@New sockets
@
text
@d337 3
@


1.97
log
@New sockets
@
text
@d42 1
d88 1
a88 1
	m_pEngineData = new CEngineData(theApp.stEngine);
d381 1
a381 1
	theApp.stEngine.Init(m_hWnd);
d1669 1
a1669 1
		pTask->ProcessForUI(theApp.stEngine);
@


1.96
log
@Compilation fix
@
text
@d41 2
d86 4
d123 5
d682 4
a688 1
#endif //OLD_SOCKETS_ENABLED
d691 1
a691 1
			statusbar.SetText(GetResString(IDS_MAIN_CONNECTEDTO) +CString(server),0,0);
d701 4
a729 1
#endif //OLD_SOCKETS_ENABLED
@


1.95
log
@New sockets
@
text
@d1647 1
d1654 1
@


1.94
log
@Implemented ConfigDir
@
text
@d158 2
d367 5
a371 1
	      
d1637 16
@


1.93
log
@built in compiler switch for mobileMule
@
text
@d1700 1
a1700 1
	CString szAppDirPath = CString(theApp.glob_prefs->GetAppDir());
d1711 1
a1711 1
	BackupFiles(extensionToBack,automated,szAppDirPath,szBackupPath);
@


1.92
log
@fixed security issues
@
text
@d351 1
d353 1
@


1.91
log
@*** empty log message ***
@
text
@d973 2
a974 1
					else AddLogLine(true,GetResString(IDS_SERVERADDED)+CString(pSrv->GetListName()));
@


1.90
log
@- updated CemuleDlg::AddServerMessageLine() to official 0.30a (better string handling)
@
text
@d1036 1
a1036 1
			pString=_T("\n")+transferwnd.downloadlistctrl.getTextList();
d1097 3
a1099 3
	transferwnd.downloadlistctrl.SetRedraw(false);
	transferwnd.uploadlistctrl.SetRedraw(false);
	transferwnd.queuelistctrl.SetRedraw(false);
d1103 1
a1103 1
    transferwnd.infolistctrl.SetRedraw(false);
d1113 3
a1115 3
	transferwnd.downloadlistctrl.SaveSettings(CPreferences::tableDownload);
	transferwnd.uploadlistctrl.SaveSettings(CPreferences::tableUpload);
	transferwnd.queuelistctrl.SaveSettings(CPreferences::tableQueue);
d1132 1
a1132 1
	transferwnd.downloadlistctrl.DeleteAllItems();
@


1.89
log
@Preparing for new sockets
@
text
@d605 1
a605 1
void CemuleDlg::AddServerMessageLine(char* line,...)
d608 1
a608 9

	CString content;
	va_list argptr;
	char bufferline[500];
	va_start(argptr, line);
	_vsnprintf(bufferline, 500, line, argptr);
	va_end(argptr);
	serverwnd.servermsgbox.AppendText(CString(bufferline)+CString("\n"));

@


1.88
log
@new statistic (khaos based)
@
text
@d350 1
d352 1
@


1.87
log
@Removed Server on tooltip until we fix the problems it brings
@
text
@a1128 3
	if(!(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04))	//Cax2 - win9x-NT crash on exit bugfix
		theApp.glob_prefs->SetStatsListExpanded(statisticswnd.GetStatsListExpanded());
	theApp.glob_prefs->SetStatsColumnWidth(statisticswnd.GetStatsColumnWidth());
@


1.86
log
@BUGFIX: open systray dialog sticks when you right-click another area on desktop
@
text
@d828 1
a828 1
		// DbT:ShowServer (&SyruS)
d848 2
@


1.85
log
@eMailNotifier and PopUp CleanUp
@
text
@d1171 1
a1171 1
void CemuleDlg::OnTrayRButtonDown(CPoint pt)
@


1.84
log
@Separated debug log
@
text
@d581 1
a581 1
		ShowNotifier(txt, TBN_LOG, false);
d1333 1
a1333 1
void CemuleDlg::ShowNotifier(CString Text, int MsgType, bool ForceSoundOFF) 
d1338 3
a1340 35
	switch(MsgType) {
		case TBN_CHAT:
            		if (theApp.glob_prefs->GetUseChatNotifier()) {
				m_wndTaskbarNotifier.Show(Text, MsgType, 500,theApp.glob_prefs->NotificationDisplayTime());
				ShowIt = true;
			}
			break;
		case TBN_DLOAD:
            		if (theApp.glob_prefs->GetUseDownloadNotifier()) {
				m_wndTaskbarNotifier.Show(Text, MsgType, 500,theApp.glob_prefs->NotificationDisplayTime());
				ShowIt = true;			
			}
			break;
		case TBN_DLOAD_ADD:
		        if (theApp.glob_prefs->GetUseDownloadAddNotifier()) {
				m_wndTaskbarNotifier.Show(Text, MsgType, 500,theApp.glob_prefs->NotificationDisplayTime());
				ShowIt = true;			
			}
			break;
		case TBN_LOG:
            		if (theApp.glob_prefs->GetUseLogNotifier()) {
				m_wndTaskbarNotifier.Show(Text, MsgType, 500,theApp.glob_prefs->NotificationDisplayTime());
				ShowIt = true;			
			}
			break;			
		case TBN_IMPORTANTEVENT:
			if (theApp.glob_prefs->GetNotifierPopOnImportantError()) {
				m_wndTaskbarNotifier.Show(Text, MsgType, 500,theApp.glob_prefs->NotificationDisplayTime());
				ShowIt = true;			
			}
			break;
		case TBN_NULL:
			m_wndTaskbarNotifier.Show(Text, MsgType, 500,theApp.glob_prefs->NotificationDisplayTime());
			ShowIt = true;			
			break;
d1342 1
a1342 1
	
@


1.83
log
@Purity's changes
@
text
@d586 5
a590 1
		CString LogFilePath = theApp.glob_prefs->GetAppDir() + CString(_T("emule.log"));
@


1.82
log
@small optimization in ShowTransferRate()
@
text
@d350 2
@


1.81
log
@BackUp feature [n@@boleo]
@
text
@a821 2
		UpdateTrayIcon(DownRateProcent);

d841 4
a844 1
			TraySetToolTip(sServer);
@


1.80
log
@removed code which:
1. throws assertion in debug
2. cause memory leak in release
@
text
@d1155 6
d1699 136
@


1.79
log
@Removed old Stored Sources from all code.
@
text
@d1297 1
a1297 1
		TraySetIcon(mytrayIcon,true);
@


1.78
log
@Added Jumpstart selection to WebServer [Purity]
Minor fix for Win9x users
@
text
@a1109 6
	// saving data & stuff
#ifdef OLD_SLS_ENABLED
	theApp.downloadqueue->SaveAllSourcesToFile();  //to save sources of a PartFile to disk mr fry
#endif //OLD_SLS_ENABLED


@


1.77
log
@Added reload of files to cli commands.
@
text
@d340 2
a341 7
	}*/

	// kuchin
	// Start server anyway, but you'll get response
	// only if it's enabled in preferences
	//theApp.webserver->StartServer();
	
d836 5
a840 1
		sServer.Append(_T("\n")+sBuffer);
d843 1
a843 1
		TraySetToolTip(sServer);
@


1.76
log
@little bugfix so we can minimize / maximize the emule again
@
text
@d995 1
@


1.75
log
@improved output in statusbar (update only tray or window) v2 (min & max issues)
@
text
@d450 1
@


1.74
log
@minor log fix (UDP socket creation failed)
@
text
@d445 8
@


1.73
log
@unicode cleanup
@
text
@d398 1
a398 1
			   		AddLogLine(false,IDS_MAIN_SOCKETERROR,theApp.glob_prefs->GetPort());
@


1.72
log
@improved output in statusbar (update only tray or window) v2
@
text
@d238 2
a239 2
	char buffer[50];
	sprintf(buffer,"eMule Plus v%s",CURRENT_VERSION_LONG);
d245 1
a245 1
	VERIFY(m_imgTaskbar.LoadImage(IDR_POPUP,"JPG"));
d247 1
a247 1
	m_wndTaskbarNotifier.SetTextFont("Arial",theApp.glob_prefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE);
d410 1
a410 1
				AddDebugLogLine(true,"Timer called with no reason");
d562 1
a562 1
	boxtext+= (CString)temp + "\r\n";
d580 2
a581 2
		CString LogFilePath = theApp.glob_prefs->GetAppDir() + CString("emule.log");
		FILE* LogFile = fopen((LPCTSTR)LogFilePath, "a+"); 
d615 1
a615 1
		sOut.Format("EXCEPTION! (%s) Report to eMule Plus developers. Line %ld in file ", msg, nLine);
d626 1
a626 1
	ShowConnectionState( theApp.serverconnect->IsConnected() ,"");
d632 1
a632 1
	ShowConnectionState(connected,"");
d641 3
a643 3
		char szBuf[200];
		sprintf(szBuf, "%s", GetResString(IDS_MAIN_BTN_DISCONNECT));
		LPSTR pszBuf;
d676 3
a678 3
			char szBuf[200];
			sprintf(szBuf, "%s", GetResString(IDS_MAIN_BTN_CANCEL));
			LPSTR pszBuf;
d694 1
a694 1
				statusbar.SetTipText(5,"");
d702 3
a704 3
			char szBuf[200];
			sprintf(szBuf, "%s", GetResString(IDS_MAIN_BTN_CONNECT));
			LPSTR pszBuf;
d722 1
a722 1
				statusbar.SetTipText(5,"");
d741 1
a741 1
	sBuffer.Format("%u                                ",users_toshow);		//Cax2 spaces needed to activate tooltip
d746 1
a746 1
		sBuffer.Format("%s: %u (%s) | %s: %u (%s)", GetResString(IDS_UUSERS), users_toshow, CastItoIShort(totaluser), GetResString(IDS_FILES), files_toshow, CastItoIShort(totalfile)); 
d784 2
a785 2
		sUpload.Format("%.2f (%.2f)",lastuprate_kB, lastuprateoverhead_kB);
		sDownload.Format("%.2f (%.2f)",lastdownrate_kB, lastdownrateoverhead_kB);
d789 2
a790 2
		sUpload.Format("%.2f",lastuprate_kB);
		sDownload.Format("%.2f",lastdownrate_kB);
d826 1
a826 1
			sServer.Format("%s: %s",GetResString(IDS_SERVER),theApp.serverconnect->GetCurrentServer()->GetListName());
d832 1
a832 1
		sServer.Append("\n"+sBuffer);
d838 2
a839 2
		char buffer[50];
		_snprintf(buffer,sizeof buffer, "(U:%.1f D:%.1f) eMule Plus v%s",lastuprate_kB, lastdownrate_kB, CURRENT_VERSION_LONG);
d926 1
a926 1
			link2.Replace("%7c","|");
d978 1
a978 1
		AddLogLine(true,"CLI: %s",clcommand);
d988 1
a988 1
			CString down="";
d995 2
a996 2
			if (down.GetLength()>0) theApp.glob_prefs->SetMaxDownload(atoi(down));
			if (up.GetLength()>0) theApp.glob_prefs->SetMaxUpload(atoi(up));
d1012 2
a1013 2
			pString.Format("%sstatus.log",theApp.glob_prefs->GetAppDir());
			FILE* file = fopen(pString , "w");
d1018 1
a1018 1
			fprintf(file, pString);
d1021 2
a1022 2
			pString.Format("\n"+GetResString(IDS_UPDOWN),(float)theApp.uploadqueue->GetDatarate()/1024, (float)theApp.downloadqueue->GetDatarate()/1024);
			fprintf(file, pString);
d1024 2
a1025 2
			pString="\n"+transferwnd.downloadlistctrl.getTextList();
			fprintf(file, pString);
d1420 1
a1420 1
			buffer.Format("0                                "); //Cax2 spaces needed to activate tooltip
d1423 1
a1423 1
			statusbar.SetTipText(5,"");
@


1.71
log
@improved output in statusbar
@
text
@d353 2
a354 2
	ShowTransferRate();
	
d766 1
a766 1
//v- eklmn: bugfix(11): crazy output in statusbar
d793 5
a797 1
	// window
a805 2

		toolbar.SetSpeedMeterValues((int)lastuprate_kB, (int)lastdownrate_kB);
d808 1
a808 1
	// tray
d845 1
a845 1
// ^-eklmn: bugfix(11): crazy output in statusbar
d861 1
a861 1
	ShowTransferRate();
d1431 1
a1431 1
		ShowTransferRate(true);	//Cax2
@


1.70
log
@Preparing for new sockets
@
text
@d765 2
d771 31
a801 1
	CString sBuffer,sBuffer2;
d803 1
a803 25
	lastuprate = theApp.uploadqueue->GetDatarateShown();	//Cax2 - more detailed upload speed: 5 sec average instead of 40 sec average....
	lastdownrate= theApp.downloadqueue->GetDatarate();
	int lastuprateoverhead = theApp.uploadqueue->GetUpDatarateOverhead();
	int lastdownrateoverhead = theApp.downloadqueue->GetDownDatarateOverhead();

	if(bUpdateAll)
	{
		//Cax2 New string! IDS_UPDOWNLONG
		sBuffer2.Format(GetResString(IDS_UPDOWNLONG),(float)lastuprate/1024, (float)lastuprateoverhead/1024, (float)lastdownrate/1024, (float)lastdownrateoverhead/1024);
		statusbar.SetTipText(3,sBuffer2);
		statusbar.SetTipText(4,sBuffer2);
		if (theApp.glob_prefs->ShowOverhead())
		{
			sBuffer.Format("%.2f (%.2f)                                   ",(float)lastuprate/1024, (float)lastuprateoverhead/1024);		//Cax2 spaces needed to activate tooltip
			statusbar.SetText(sBuffer,3,0);
			sBuffer.Format("%.2f (%.2f)                                   ",(float)lastdownrate/1024, (float)lastdownrateoverhead/1024);		//Cax2 spaces needed to activate tooltip
			statusbar.SetText(sBuffer,4,0);
		}
		else
		{
			sBuffer.Format("%.2f                                       ",(float)lastuprate/1024);		//Cax2 spaces needed to activate tooltip
			statusbar.SetText(sBuffer,3,0);
			sBuffer.Format("%.2f                                       ",(float)lastdownrate/1024);		//Cax2 spaces needed to activate tooltip
			statusbar.SetText(sBuffer,4,0);
		}
a804 9
	
	transferwnd.UpdateDownloadHeader();
	transferwnd.UpdateUploadHeader();

	int iMaxValue = theApp.glob_prefs->GetMaxGraphDownloadRate();
	if(iMaxValue < theApp.glob_prefs->GetMaxGraphUploadRate())
		iMaxValue = theApp.glob_prefs->GetMaxGraphUploadRate();
		
	toolbar.SetSpeedMeterValues(lastuprate/1024, lastdownrate/1024);
d806 2
a807 2
	if(bUpdateAll)
	{
d809 5
a813 1
		int DownRateProcent = (int)ceil((lastdownrate/10.24)/theApp.glob_prefs->GetMaxGraphDownloadRate());
d816 1
a816 5
		if (TrayIsVisible()) // Lord KiRon
			UpdateTrayIcon(DownRateProcent);

		if (!theApp.glob_prefs->ShowOverhead())
			sBuffer2.Format(GetResString(IDS_UPDOWN),(float)lastuprate/1024, (float)lastdownrate/1024);
d819 1
a819 1
		CString sBuffer3("");
d821 6
a826 7
		if (theApp.serverconnect->IsConnecting()) {
			sBuffer3 = GetResString(IDS_CONNECTING);
		} else if (theApp.serverconnect->IsConnected()) {
			sBuffer3 = GetResString(IDS_SERVER);
			sBuffer3.Append(": ");
			sBuffer3.Append(theApp.serverconnect->GetCurrentServer()->GetListName());
		} else
a827 1
			sBuffer3 = GetResString(IDS_NOTCONNECTED);
d829 2
a830 5
		if(sBuffer3.GetLength() >= 38)
			sBuffer3 = sBuffer3.Left(35) + _T("...");
		sBuffer3.Append("\n");
		sBuffer3.Append(sBuffer2);
		TraySetToolTip(sBuffer3);
d833 1
a833 2
		statusbar.SetIcon(3,transicons[(lastuprate)?1:0]);
		statusbar.SetIcon(4,transicons[(lastdownrate)?3:2]);
a834 1

d837 1
a837 1
		sprintf(buffer,"(U:%.1f D:%.1f) eMule Plus v%s",(float)lastuprate/1024, (float)lastdownrate/1024,CURRENT_VERSION_LONG);
d843 1
@


1.69
log
@FEATURE: show server/connectionstate in traytooltips [DoubleT]
@
text
@d492 1
d502 1
d625 1
d627 1
d657 1
d662 1
d673 1
d700 1
d743 1
d751 1
d821 1
d829 1
d986 1
d988 1
d1020 1
d1024 1
d1075 1
d1078 1
d1231 1
d1233 1
d1244 1
d1246 1
d1281 1
d1287 1
d1418 1
d1422 1
d1429 1
d1433 1
d1447 1
d1459 4
a1462 3
  else
    //disconnect if currently connected
    CloseConnection();
d1621 1
d1623 1
@


1.68
log
@Preparing for new sockets
@
text
@d809 17
a825 1
		TraySetToolTip(sBuffer2);
@


1.67
log
@Purity's webserver changes. Mostly.
@
text
@d26 1
d28 1
d394 1
d399 1
@


1.66
log
@converted to new logger methods
@
text
@d150 4
d1583 21
@


1.65
log
@code cleanup
@
text
@d389 1
a389 1
					AddLogLine(false,GetResString(IDS_MAIN_SOCKETERROR),theApp.glob_prefs->GetPort());
d391 2
a392 2
			   		AddLogLine(false,GetResString(IDS_MAIN_SOCKETERROR),theApp.glob_prefs->GetPort());
				AddLogLine(true,GetResString(IDS_MAIN_READY),CURRENT_VERSION_LONG);
d705 1
a705 1
				AddLogLine(true,GetResString(IDS_DISCONNECTED));
d940 1
a940 1
			AddLogLine(true, GetResString(IDS_LINKNOTADDED));
d1182 1
a1182 1
	AddLogLine(true, GetResString(IDS_CONNECTING));
@


1.64
log
@kill unused URLDecode method
@
text
@d1567 1
a1567 1
	theApp.serverconnect->ConnectToServer((CServer*)wParam);
@


1.63
log
@minor fixes and improvements
@
text
@a49 2
extern void URLDecode(CString& result, const char* buff);

a875 2
extern void URLDecode(CString& result, const char* buff);

d893 1
a893 2
			CString link2;
			CString link;
d896 1
a896 1
			URLDecode(link,(const char*)link2.GetBuffer());
@


1.62
log
@Some code housekeeping changes
@
text
@d90 1
a90 1

@


1.61
log
@*** empty log message ***
@
text
@d932 1
a932 1
					pSrv->SetPreference(PR_HIGH);
@


1.60
log
@Server disconnected on eMule close
@
text
@d926 1
a926 3
					in_addr host;
					host.S_un.S_addr = pSrvLink->GetIP();
					CServer* pSrv = new CServer(pSrvLink->GetPort(),inet_ntoa(host));
@


1.59
log
@UDP Search status moved to statistic and added to resource strings
@
text
@d1039 6
@


1.58
log
@UDP Search status is shown in up-down tooltip
@
text
@a763 1
		sBuffer2 += _T("   ") + theApp.downloadqueue->GetUDPSearchStatus();
@


1.57
log
@Webserver from official 0.27c
@
text
@d764 1
@


1.56
log
@Fine tuned rebar.
@
text
@a735 1
	theApp.webserver->SetUserCount(users_toshow); // kuchin
@


1.55
log
@small fix
@
text
@d187 1
a187 1
	toolbar.Create(WS_CHILD | WS_VISIBLE, CRect(0,0,0,0), this, IDC_TOOLBAR);
d200 1
a200 1
	rebar.Create(WS_VISIBLE | WS_BORDER | RBS_BANDBORDERS | /*RBS_AUTOSIZE |*/ RBS_VARHEIGHT | CCS_TOP,
d209 1
a209 1
	rbbi.cyMinChild   = sizeBar.cy + 2;
d219 1
a219 1
	combo->Create(WS_CHILD | CBS_DROPDOWN, CRect(0, 0, 0, 200), this, AFX_IDW_TOOLBAR + 1);
d224 1
a224 1
	rbbi.cyMinChild   = rcAddress.Height() + 2;
d271 1
a271 1
	rClientRect.top += rReBarRect.Height() + 2;
@


1.54
log
@Added rebar. You can disable rebar by undefining USE_REBAR.
@
text
@d1161 8
a1168 1
				preferenceswnd.DoModal();
d1170 1
@


1.53
log
@bugfix: less resource usage, fixed bug #131
@
text
@d187 1
a187 1
	toolbar.Create(WS_CHILD | WS_VISIBLE, CRect(0,2,0,0), this, IDC_TOOLBAR);
d195 38
d266 8
d280 1
a280 1
		
d308 3
d312 1
@


1.53.2.1
log
@27a partial merge
@
text
@a156 1
	ON_BN_CLICKED(IDC_HOTMENU, OnBnClickedHotmenu)
d202 6
a207 9
	if (_tcscmp(theApp.glob_prefs->GetNotifierConfiguration(),"") == 0) {
			CString defaultTBN;
			defaultTBN.Format("%sNotifier.ini", theApp.glob_prefs->GetAppDir());
			LoadNotifier(defaultTBN);
			theApp.glob_prefs->SetNotifierConfiguration(defaultTBN);
	}
	else
			LoadNotifier(theApp.glob_prefs->GetNotifierConfiguration());
	//END - enkeyDEV(kei-kun) -TaskbarNotifier-
d251 1
a251 1
	//ShowConnectionState(false);
d920 2
a921 2
			if (down.GetLength()>0) theApp.glob_prefs->SetMaxDownload(atoi(down) ? atoi(down) : 0xffff);
			if (up.GetLength()>0) theApp.glob_prefs->SetMaxUpload(atoi(up) ? atoi(up) : 0xffff);
d1221 1
a1221 1
	if (!notifierenabled) return;
d1226 1
a1226 1
				m_wndTaskbarNotifier.Show(Text, MsgType, TRUE,theApp.glob_prefs->NotificationDisplayTime());
d1232 1
a1232 1
				m_wndTaskbarNotifier.Show(Text, MsgType, TRUE,theApp.glob_prefs->NotificationDisplayTime());
d1238 1
a1238 1
				m_wndTaskbarNotifier.Show(Text, MsgType, TRUE,theApp.glob_prefs->NotificationDisplayTime());
d1244 1
a1244 1
				m_wndTaskbarNotifier.Show(Text, MsgType, TRUE,theApp.glob_prefs->NotificationDisplayTime());
d1250 1
a1250 1
				m_wndTaskbarNotifier.Show(Text, MsgType, TRUE,theApp.glob_prefs->NotificationDisplayTime());
d1255 1
a1255 1
			m_wndTaskbarNotifier.Show(Text, MsgType, TRUE,theApp.glob_prefs->NotificationDisplayTime());
a1265 4
void CemuleDlg::LoadNotifier(CString configuration) {
	notifierenabled = m_wndTaskbarNotifier.LoadConfiguration(configuration);
}

a1366 1
		case MP_HM_SRVR:
a1370 1
		case MP_HM_TRANSFER:
a1374 1
		case MP_HM_SEARCH:
a1378 1
		case MP_HM_FILES:
a1382 1
		case MP_HM_MSGS:
a1386 1
		case MP_HM_IRC:
a1390 1
		case MP_HM_STATS:
a1394 1
		case MP_HM_PREFS:
a1398 22
		case MP_HM_CON:
			OnBnClickedButton2();
			break;

		case MP_HM_OPENINC:
			ShellExecute(NULL, "open", theApp.glob_prefs->GetIncomingDir(),NULL, NULL, SW_SHOW); 
			break;
		case MP_HM_EXIT:
			OnClose();
			break;
		case MP_HM_LINK1: // MOD: dont remove!
			ShellExecute(NULL, NULL, "http://www.emule-project.net", NULL, theApp.glob_prefs->GetAppDir(), SW_SHOWDEFAULT);
			break;
		case MP_HM_LINK2:
			ShellExecute(NULL, NULL, "http://www.emule-project.net/faq/", NULL, theApp.glob_prefs->GetAppDir(), SW_SHOWDEFAULT);
			break;
		case MP_HM_LINK3: {
				CString theUrl;
				theUrl.Format("http://vcheck.emule-project.net/en/version_check.php?version=%i&language=%i",CURRENT_VERSION_CHECK,theApp.glob_prefs->GetLanguageID());
				ShellExecute(NULL, NULL, theUrl, NULL, theApp.glob_prefs->GetAppDir(), SW_SHOWDEFAULT);
		  }
			break;
a1561 50
}

void CemuleDlg::OnBnClickedHotmenu()
{
	int counter;
	POINT point;

	::GetCursorPos(&point);

	CTitleMenu menu;
	menu.CreatePopupMenu();
	menu.AddMenuTitle(GetResString(IDS_HOTMENU));

	CMenu m_Links;
	m_Links.CreateMenu();
	m_Links.AppendMenu(MF_STRING,MP_HM_LINK1, "eMule Homepage");
	m_Links.AppendMenu(MF_STRING,MP_HM_LINK2, "eMule FAQ");
	m_Links.AppendMenu(MF_STRING,MP_HM_LINK3, "eMule Versionscheck");

	CMenu m_Web;
	m_Web.CreateMenu();
	UpdateURLMenu(m_Web,counter);
	UINT flag2;
	flag2=(counter==0) ? MF_GRAYED:MF_STRING;

	if (theApp.serverconnect->IsConnected()) menu.AppendMenu(MF_STRING,MP_HM_CON,GetResString(IDS_MAIN_BTN_DISCONNECT));
	else 
		if (theApp.serverconnect->IsConnecting()) menu.AppendMenu(MF_STRING,MP_HM_CON,GetResString(IDS_MAIN_BTN_CANCEL));
		else menu.AppendMenu(MF_STRING,MP_HM_CON,GetResString(IDS_MAIN_BTN_CONNECT));

	menu.AppendMenu(MF_STRING,MP_HM_SRVR, GetResString(IDS_EM_SERVER) );
	menu.AppendMenu(MF_STRING,MP_HM_TRANSFER, GetResString(IDS_EM_TRANS));
	menu.AppendMenu(MF_STRING,MP_HM_SEARCH, GetResString(IDS_EM_SEARCH));
	menu.AppendMenu(MF_STRING,MP_HM_FILES, GetResString(IDS_EM_FILES));
	menu.AppendMenu(MF_STRING,MP_HM_MSGS, GetResString(IDS_EM_MESSAGES));
	menu.AppendMenu(MF_STRING,MP_HM_IRC, GetResString(IDS_IRC));
	menu.AppendMenu(MF_STRING,MP_HM_STATS, GetResString(IDS_EM_STATISTIC));
	menu.AppendMenu(MF_STRING,MP_HM_PREFS, GetResString(IDS_EM_PREFS));
	menu.AppendMenu(MF_SEPARATOR);
	menu.AppendMenu(MF_STRING,MP_HM_OPENINC, GetResString(IDS_OPENINC));
	menu.AppendMenu(MF_SEPARATOR);
	menu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_Links.m_hMenu, "Links" );
	menu.AppendMenu(flag2|MF_POPUP,(UINT_PTR)m_Web.m_hMenu, GetResString(IDS_WEBSERVICES) );
	menu.AppendMenu(MF_SEPARATOR);
	menu.AppendMenu(MF_STRING,MP_HM_EXIT, GetResString(IDS_EXIT));

	menu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON, point.x, point.y, this);
	m_Web.DestroyMenu();
	m_Links.DestroyMenu();
	menu.DestroyMenu();
@


1.53.2.2
log
@27c
@
text
@d276 5
a356 6
			case 3:
	            if (theApp.pendinglink){
		            OnWMData(NULL,(LPARAM) &theApp.sendstruct);//changed by Cax2 28/10/02
		            delete theApp.pendinglink;
	            }
				break;
d365 1
a365 1
	    if (status < 4) 
d1439 1
a1439 3
	if (wParam>=MP_WEBURL && wParam<=MP_WEBURL+99) {
		RunURL(NULL, theApp.webservices.GetAt(wParam-MP_WEBURL) );
	}
@


1.53.2.3
log
@*** empty log message ***
@
text
@a583 6
	TBBUTTONINFO tbi;
	tbi.dwMask = TBIF_IMAGE | TBIF_TEXT;
	tbi.cbSize = sizeof (TBBUTTONINFO);
	char szBuf[200];
	tbi.pszText = szBuf;

d586 1
d588 7
d596 3
d600 1
d614 1
a614 1
	else if (theApp.serverconnect->IsConnecting()) 
d616 23
a638 3
		sprintf(szBuf, "%s", GetResString(IDS_MAIN_BTN_CANCEL));
		tbi.iImage = 10;
		//TOOLTIP: GetResString(IDS_MAIN_BTN_CONNECT_TOOLTIP)
d640 26
a665 4
		statusbar.SetIcon(5,connicons[0]);
		if (!iconOnly) {
			statusbar.SetText(GetResString(IDS_CONNECTING),5,0);
			statusbar.SetTipText(5,"");
a666 7
		ShowUserCount(0,0);
	} 
	else 
	{
		sprintf(szBuf, "%s", GetResString(IDS_MAIN_BTN_CONNECT));
		tbi.iImage = 0;
		//TOOLTIP: GetResString(IDS_CONNECTTOANYSERVER)
a667 7
		statusbar.SetIcon(5,connicons[0]);
		if (!iconOnly) {
			statusbar.SetText(GetResString(IDS_NOTCONNECTED),5,0);
			AddLogLine(true,GetResString(IDS_DISCONNECTED));
			statusbar.SetTipText(5,"");
		}
		ShowUserCount(0,0);
a668 1
	toolbar.SetButtonInfo(IDC_TOOLBARBUTTON, &tbi);
d1378 1
a1378 1
			toolbar.PressMuleButton(IDC_TOOLBARBUTTON + 1);
d1383 1
a1383 1
			toolbar.PressMuleButton(IDC_TOOLBARBUTTON + 2);
d1388 1
a1388 1
			toolbar.PressMuleButton(IDC_TOOLBARBUTTON + 3);
d1393 1
a1393 1
			toolbar.PressMuleButton(IDC_TOOLBARBUTTON + 4);
d1398 1
a1398 1
			toolbar.PressMuleButton(IDC_TOOLBARBUTTON + 5);
d1403 1
a1403 1
			toolbar.PressMuleButton(IDC_TOOLBARBUTTON + 6);
d1408 1
a1408 1
			toolbar.PressMuleButton(IDC_TOOLBARBUTTON + 7);
@


1.52
log
@*** empty log message ***
@
text
@d706 1
a706 1
	lastuprate = theApp.uploadqueue->GetDatarate();
@


1.51
log
@webserver port can be changed without restarting, & bugfix for #143
@
text
@a304 3
		CString strBuffer;
		strBuffer.Format("eMule Plus\n%s", CURRENT_VERSION_LONG);
		splash.SetText(strBuffer);
@


1.50
log
@Tray icon change
@
text
@d281 1
d291 1
a291 1
	theApp.webserver->StartServer();
d995 1
a995 1
	theApp.OnlineSig(); // Added By Bouc7 
d1024 1
a1024 1
	theApp.knownfiles->Save();
d1041 1
a1048 1
	theApp.clientlist->DeleteAll();
d1064 3
@


1.49
log
@Changes to credits and ed2k links.
@
text
@d750 1
a750 1
		//if (TrayIsVisible()) // Lord KiRon
a1170 1

d1549 12
@


1.48
log
@further updated the addlog function + minor bugfix!
@
text
@d305 1
a305 1
		strBuffer.Format("eMule Plus %s", CURRENT_VERSION_LONG);
@


1.47
log
@*** empty log message ***
@
text
@d455 2
d459 1
d468 2
d472 1
d477 1
a477 2
void CemuleDlg::AddLogLine(bool addtostatusbar,CString line,...)
{
a478 11
	
	char bufferline[1000];
 	
	va_list argptr;
	va_start(argptr, line);
	_vsnprintf(bufferline, 1000, line, argptr);
	va_end(argptr);

	AddLogText(addtostatusbar, bufferline);
	EMULE_CATCH2
}
a479 4
void CemuleDlg::AddLogText(bool addtostatusbar,const CString& txt) {
	EMULE_TRY
	char temp[1060]; //<<--9/21/02
	COleDateTime timelog(COleDateTime::GetCurrentTime()); // DonGato date-time localization
a487 4
	
	CSingleLock singleLock(&critical_log_section);
	singleLock.Lock();  
    	ASSERT(singleLock.IsLocked()); 
d489 2
a491 2
	logtext += temp; //<<--9/21/02
	logtext += "\r\n";
d493 2
a494 1
	CString tmp = logtext; // i_a: MUST be copied here to local var (tmp) for use outside the critical section! 
d496 1
a496 1
	singleLock.Unlock();  
d498 3
a500 1
	if (ready)
d502 3
a504 28
		if (serverwnd.logbox.GetLineCount() > MAX_LINES_IN_LOGVIEW)
		{ 
			// strip off old lines... 
			singleLock.Lock();  
			int pos = logtext.Find('\r'); 
			if (pos >= 0) 
			{ 
				tmp = logtext = logtext.Mid(pos + 2 /* skip '\n' */); 
			} 
			singleLock.Unlock();  
		}
	
		serverwnd.logbox.SetWindowText(tmp); // i_a: DON'T use logtext here as this call cannot be placed inside the critical section either. (message pump) 
		serverwnd.logbox.LineScroll(serverwnd.logbox.GetLineCount());
		ShowNotifier(txt, TBN_LOG, false);
		// DonGato
		if (theApp.glob_prefs->LogToFile())
		{
			CString LogFilePath = theApp.glob_prefs->GetAppDir() + CString("emule.log");
			FILE* LogFile = fopen((LPCTSTR)LogFilePath, "a+"); 
			if ( LogFile != NULL )
	 		{
				strcat(temp, "\n");
 				fwrite(temp, sizeof(char), strlen(temp), LogFile);
 				fclose(LogFile);
	 		}

		}
d506 1
a506 21
	EMULE_CATCH2
}

void CemuleDlg::AddDebugLogLine(bool addtostatusbar,CString line,...)
{
	EMULE_TRY

	if( !theApp.glob_prefs->GetVerbose() )
		return;	
	char bufferline[1000];
 	
	va_list argptr;
	va_start(argptr, line);
	_vsnprintf(bufferline, 1000, line, argptr);
	va_end(argptr);
	//AfxMessageBox(bufferline);
	
	AddDebugLogText(addtostatusbar, bufferline);

	EMULE_CATCH2
}
d508 4
a511 1
void CemuleDlg::AddDebugLogText(bool addtostatusbar,const CString& txt) {
d513 1
a513 1
	EMULE_TRY
d515 1
a515 24
	COleDateTime timelog(COleDateTime::GetCurrentTime()); // DonGato date-time localization
	char temp[1060]; //<<--9/21/02
	if (addtostatusbar)
		if (statusbar.m_hWnd)
		{
			statusbar.SetText(txt,0,0);
			statusbar.SetTipText(0,txt);
		}
		else
			AfxMessageBox(txt);
	
	CSingleLock singleLock(&critical_log_section);
	singleLock.Lock();  
    	ASSERT(singleLock.IsLocked()); 

	sprintf(temp,"%s: %s",timelog.Format(),txt); // DonGato date-time localization
	debuglog += temp; //<<--9/21/02
	debuglog += "\r\n";

	CString tmp = debuglog; // i_a: MUST be copied here to local var (tmp) for use outside the critical section! 

	singleLock.Unlock();  

	if (serverwnd.debugbox.GetSafeHwnd())		//Cax2 debug log bugfix
d517 2
a518 14
		if (serverwnd.debugbox.GetLineCount() > MAX_LINES_IN_LOGVIEW)
		{ 
			// strip off old lines... 
			singleLock.Lock();  
			int pos = debuglog.Find('\r'); 
			if (pos >= 0) 
			{ 
				tmp = debuglog = debuglog.Mid(pos + 2 /* skip '\n' */); 
			} 
			singleLock.Unlock();  
		}
	
		serverwnd.debugbox.SetWindowText(tmp); // i_a: DON'T use debuglog here as this call cannot be placed inside the critical section either. (message pump) 
		serverwnd.debugbox.LineScroll(serverwnd.debugbox.GetLineCount());
d520 1
a520 11
		// DonGato
		if (theApp.glob_prefs->LogToFile())
		{
			CString LogFilePath = theApp.glob_prefs->GetAppDir() + CString("emule.log");
			FILE* LogFile = fopen((LPCTSTR)LogFilePath, "a+"); 
			if ( LogFile != NULL )
	 		{
				strcat(temp, "\n");
 				fwrite(temp, sizeof(char), strlen(temp), LogFile);
 				fclose(LogFile);
	 		}
d522 10
a531 1
		}
@


1.46
log
@converted to new logging method
@
text
@d941 1
a941 1
			link2 = (char*)data->lpData;
@


1.45
log
@split some logging methods
@
text
@d748 1
a748 1
				theApp.emuledlg->AddLogLine(true,GetResString(IDS_DISCONNECTED));
d980 1
a980 1
					else theApp.emuledlg->AddLogLine(true,GetResString(IDS_SERVERADDED)+CString(pSrv->GetListName()));
@


1.44
log
@another resource leak fix
@
text
@d474 1
a474 2

	char temp[1060]; //<<--9/21/02
d476 1
a476 3
 
	COleDateTime timelog(COleDateTime::GetCurrentTime()); // DonGato date-time localization
	
d481 9
d493 2
a494 2
			statusbar.SetText(bufferline,0,0);
			statusbar.SetTipText(0,bufferline);
d497 1
a497 1
			AfxMessageBox(bufferline);
d503 1
a503 1
	sprintf(temp,"%s: %s",timelog.Format(),bufferline); // DonGato date-time localization
d527 1
a527 1
		ShowNotifier(bufferline, TBN_LOG, false);
a541 1

d550 1
a550 3
		return;

	char temp[1060]; //<<--9/21/02
d552 1
a552 3
 
	COleDateTime timelog(COleDateTime::GetCurrentTime()); // DonGato date-time localization
	
d558 12
d573 2
a574 2
			statusbar.SetText(bufferline,0,0);
			statusbar.SetTipText(0,bufferline);
d577 1
a577 1
			AfxMessageBox(bufferline);
d583 1
a583 1
	sprintf(temp,"%s: %s",timelog.Format(),bufferline); // DonGato date-time localization
d607 1
a607 1
		ShowNotifier(bufferline, TBN_LOG, false);
@


1.43
log
@*** empty log message ***
@
text
@d1131 9
@


1.42
log
@fix for some problems during app shutdown
@
text
@d61 1
d105 4
a108 1

@


1.41
log
@Fixed bug #11
@
text
@d152 1
d1606 7
@


1.40
log
@smart lowId bugfix
@
text
@d274 2
d280 1
a280 1
	}
@


1.39
log
@all my stable changes and some minor fixes (refer to changelog)
@
text
@d272 2
@


1.38
log
@commented out redundant code
@
text
@d829 6
d1166 3
@


1.37
log
@messages notification icon for status bar, tooltip added to log messages in status bar.
@
text
@d135 1
a135 1

d142 1
d1458 1
a1458 1
// Added by Jmpep above
d1501 1
a1501 1

d1514 1
@


1.36
log
@Some icons ordering and added lowID systray icon (waiting for DrSiRiUs design)
@
text
@d207 1
a207 1
	statusbar.SetIcon(1, usersicon);
d476 1
d478 2
d549 1
d551 2
d666 1
a666 1
			statusbar.SetIcon(4,connicons[1]);
d668 1
a668 1
			statusbar.SetIcon(4,connicons[2]);
d672 3
a674 2
			statusbar.SetTipText(4,server);
			statusbar.SetText(server,4,0);
d696 1
a696 1
			statusbar.SetIcon(4,connicons[0]);
d698 2
a699 2
				statusbar.SetText(GetResString(IDS_CONNECTING),4,0);
				statusbar.SetTipText(4,"");
d722 1
a722 1
			statusbar.SetIcon(4,connicons[0]);
d724 1
a724 1
				statusbar.SetText(GetResString(IDS_NOTCONNECTED),4,0);
d726 1
a726 1
				statusbar.SetTipText(4,"");
d746 1
a746 1
	statusbar.SetText(sBuffer,1,0);
d750 1
a750 1
		statusbar.SetTipText(1,sBuffer);
d752 1
a752 1
		statusbar.SetTipText(1,GetResString(IDS_STATS_WAITCONN));
d763 1
a763 1
	//statusbar.SetIcon(4,imicons[iconnr]);
a782 1
		statusbar.SetTipText(2,sBuffer2);
d784 1
d788 1
a788 1
			statusbar.SetText(sBuffer,2,0);
d790 1
a790 1
			statusbar.SetText(sBuffer,3,0);
d795 1
a795 1
			statusbar.SetText(sBuffer,2,0);
d797 1
a797 1
			statusbar.SetText(sBuffer,3,0);
d824 2
a825 9
		if(lastuprate)
			statusbar.SetIcon(2,transicons[1]);
		else
			statusbar.SetIcon(2,transicons[0]);

		if(lastdownrate)
			statusbar.SetIcon(3,transicons[3]);
		else
			statusbar.SetIcon(3,transicons[2]);
d883 1
a883 1
	int widths[5] = { rect.right-480, rect.right-410, rect.right-340, rect.right-270,-1 };
d886 1
a886 1
		widths[2]=rect.right-305; widths[3]=rect.right-200;
d888 1
a888 1
	statusbar.SetParts(5, widths);
a1361 4
		CString buffer;
		buffer.Format("0                                "); //Cax2 spaces needed to activate tooltip
		statusbar.SetTipText(1,GetResString(IDS_STATS_WAITCONN));

d1366 5
a1370 1
			statusbar.SetText(buffer,1,0);
d1372 1
a1372 1
				statusbar.SetText(GetResString(IDS_CONNECTING),3,0);
d1374 1
a1374 1
				statusbar.SetText(GetResString(IDS_NOTCONNECTED),3,0);
@


1.35
log
@AutoTakeED2KLinks
@
text
@d77 3
a79 2
	sourceTrayIcon= (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	sourceTrayIconGrey= (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON_GREY),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
d101 1
d1227 1
a1227 1
	if(theApp.serverconnect->IsConnected())
d1229 2
@


1.34
log
@minor bugfixes, refreshes sources display...
@
text
@d1098 4
@


1.33
log
@Added again Confirm on exit. :-)
@
text
@d311 2
a312 3

	KillTimer(nIDEvent);
	switch (status)
d314 23
a336 5
		case 0:
			status++;
			ready = true;
			theApp.sharedfiles->SetOutputCtrl(&sharedfileswnd.sharedfilesctrl);
			break;
d338 8
a345 24
		case 1:
			status++;
			theApp.serverlist->Init();
			break;
		case 2:
			status++;
			theApp.downloadqueue->Init();
			if (!theApp.listensocket->StartListening())
				AddLogLine(false,GetResString(IDS_MAIN_SOCKETERROR),theApp.glob_prefs->GetPort());
			if (!theApp.clientudp->Create())
			   	AddLogLine(false,GetResString(IDS_MAIN_SOCKETERROR),theApp.glob_prefs->GetPort());
			AddLogLine(true,GetResString(IDS_MAIN_READY),CURRENT_VERSION_LONG);
			if (theApp.glob_prefs->DoAutoConnect())
				OnBnClickedButton2();
		
			// kuchin
			// Start server anyway, but you'll get response
			// only if it's enabled in preferences
			theApp.webserver->StartServer();

			break;

		default:
			AddDebugLogLine(true,"Timer called with no reason");
a346 1
	
@


1.32
log
@Exceptions shown on debug log
@
text
@d1047 1
a1047 1
	//if (theApp.glob_prefs->IsConfirmExitEnabled()) 
@


1.32.2.1
log
@First try
@
text
@a59 33
	try
	{
		// Some notes about Berkeley DB:
		// 1. When you compile debug version of emule, 
		// use debug version of Berkeley .lib and .dll
		// and the same for release - use release versions
		// 2. Open one Db object for one table in database
#define EDB_ENV_NAME _T("Db")
#define EDB_NAME _T("Main.db")
		CString sDBHome = CString(theApp.glob_prefs->GetAppDir()) + EDB_ENV_NAME;
		::CreateDirectory(sDBHome, NULL); // In case it doesn't exist
		pDbEnv = new DbEnv(0);
		pDbEnv->set_cachesize(0, 256 * 1024, 0); // 256Kb cache size
		pDbEnv->open(sDBHome, DB_INIT_CDB | DB_INIT_MPOOL | DB_CREATE | DB_THREAD, 0);
		pDbPrefs = new Db(pDbEnv, 0);
		pDbPrefs->set_pagesize(16 * 1024); // 16Kb page size
		pDbPrefs->open(NULL, EDB_NAME, _T("Preferences"), DB_BTREE, DB_CREATE | DB_THREAD, 0);
		// Example of using database
//		pDbSecond = new Db(pDbEnv, 0);
//		pDbSecond->set_pagesize(16 * 1024); // 16Kb page size
//		pDbSecond->open(NULL, EDB_NAME, _T("Example"), DB_BTREE, DB_CREATE | DB_THREAD, 0);
//		Dbt key("1", 2);
//		Dbt val("val", 4);
//		pDbPrefs->put(NULL, &key, &val, 0);
//		pDbSecond->put(NULL, &key, &val, 0);
	}
	catch(DbException &dbe)
	{
		AfxMessageBox(dbe.what());
		pDbPrefs = NULL;
		pDbEnv = NULL;
	}

a110 8
	// Problem when deleting objects?? :(
//	pDbSecond->close(0);
//	delete pDbSecond;
	pDbPrefs->close(0);
//	delete pDbPrefs;
	pDbEnv->close(0);
//	delete pDbEnv;

a160 3

	if(!pDbPrefs || !pDbEnv)
		return FALSE;
@


1.32.2.2
log
@write the info on part senders
@
text
@a68 1
#define EDB_SENDERS_NAME _T("partsenders.db")
d73 1
a73 1
		pDbEnv->open(sDBHome, DB_INIT_CDB | DB_INIT_MPOOL | DB_CREATE | DB_THREAD , 0);
d77 1
a77 7

        pDbSenders = new Db(pDbEnv, 0);
        pDbSenders->set_flags(DB_DUPSORT);
		pDbSenders->set_pagesize(16 * 1024); // 16Kb page size
		pDbSenders->open(NULL, EDB_SENDERS_NAME, _T("PartSenders"), DB_HASH, DB_CREATE | DB_THREAD, 0);

        // Example of using database
a90 1
        pDbSenders = NULL;
a146 2
    pDbSenders->close(0);

a355 2
	if (nIDEvent == INIT_TIMER_ID) // #zegzav (added)
	{
d384 1
d386 1
d390 1
a390 1
	}
d1091 1
a1091 1
	if (theApp.glob_prefs->IsConfirmExitEnabled()) 
@


1.32.2.3
log
@keeping in sync with the main cvs line
@
text
@d118 2
a119 3
	sourceTrayIcon = (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	sourceTrayIconLowID = (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON_LOWID),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
	sourceTrayIconGrey = (HICON)LoadImage(AfxGetInstanceHandle() ,MAKEINTRESOURCE(IDI_TRAYICON_GREY),IMAGE_ICON,16,16,LR_DEFAULTCOLOR);
a140 1
	::DestroyIcon(sourceTrayIconLowID);
a1151 4
	// Barry - Restore old registry if required
	if (theApp.glob_prefs->AutoTakeED2KLinks())
		RevertReg();
 
d1275 1
a1275 1
	if(theApp.serverconnect->IsConnected() && !theApp.serverconnect->IsLowID())
a1276 2
	else if(theApp.serverconnect->IsConnected() && theApp.serverconnect->IsLowID())
		trayIcon.Init(sourceTrayIconLowID,100,1,1,16,16, RGB(37,97,37));
@


1.32.2.4
log
@process senders
@
text
@a83 6
        pDbSendersScore = new Db(pDbEnv, 0);
		pDbSendersScore->set_pagesize(16 * 1024); // 16Kb page size
		pDbSendersScore->open(NULL, EDB_SENDERS_NAME, _T("SendersScore"), DB_HASH, DB_CREATE | DB_THREAD, 0);

        

a98 1
        pDbSendersScore = NULL;
a157 1
    pDbSendersScore->close(0);
a162 1

@


1.32.2.5
log
@Transactional store
@
text
@d74 1
a74 3
		//pDbEnv->open(sDBHome, DB_INIT_CDB | DB_INIT_MPOOL | DB_CREATE | DB_THREAD , 0);
		pDbEnv->open(sDBHome, DB_CREATE | DB_INIT_LOCK | DB_INIT_LOG |
	        DB_INIT_MPOOL | DB_INIT_TXN | DB_RECOVER | DB_THREAD , 0);
d82 1
a82 1
		pDbSenders->open(NULL, EDB_SENDERS_NAME, _T("PartSenders"), DB_HASH, DB_CREATE | DB_THREAD| DB_AUTO_COMMIT, 0);
d86 1
a86 1
		pDbSendersScore->open(NULL, EDB_SENDERS_NAME, _T("SendersScore"), DB_HASH, DB_CREATE | DB_THREAD| DB_AUTO_COMMIT, 0);
a168 2

    pDbEnv->txn_checkpoint(0,0,0);
@


1.31
log
@crash if AddLogLine is called during exit
@
text
@d619 1
a619 1
		AddLogLine(false, sOut);
@


1.30
log
@window title now shows correctly
@
text
@d473 1
a473 1
		if (statusbar.m_hWnd)
@


1.29
log
@minor updates & bugfixes
@
text
@d189 1
a189 1
	sprintf(buffer,"eMule v%s Plus",CURRENT_VERSION_LONG);
@


1.28
log
@minor graphic improvements. search bugfix
@
text
@d344 1
a344 1
			AddLogLine(true,"DEBUG: Timer called with no reason");
d478 1
a478 1
	CSingleLock singleLock(&critical_log_section); 
d541 1
d548 1
a548 1
	CSingleLock singleLock(&critical_log_section); 
d560 1
a560 1
	if (ready)
@


1.27
log
@minor improvements
@
text
@d880 1
a880 1
	int widths[5] = { rect.right-480, rect.right-410, rect.right-342, rect.right-274,-1 };
d883 1
a883 1
		widths[2]=rect.right-310; widths[3]=rect.right-210;
@


1.26
log
@Updates to IDS_UPDOWNLONG string
@
text
@d880 1
a880 1
	int widths[5] = { rect.right-410, rect.right-340, rect.right-275, rect.right-200,-1 };
d883 1
a883 1
		widths[0]=rect.right-480; widths[1]=rect.right-410; widths[2]=rect.right-310;
@


1.25
log
@minor bugfixes + aqua bars! :)
@
text
@a810 2
		//else,  sBuffer2 still contains the overhead version from when we set the toooltip.
		//sBuffer.Format("eMule Plus v%s (%s | "+GetResString((theApp.serverconnect->IsConnected())?IDS_CONNECTED:IDS_DISCONNECTED)+")",CURRENT_VERSION_LONG,sBuffer2);
@


1.24
log
@*** empty log message ***
@
text
@d179 1
a179 1
	toolbar.Create(WS_CHILD | WS_VISIBLE, CRect(0,0,0,0), this, IDC_TOOLBAR);
d735 1
a735 1
	sBuffer.Format(GetResString(IDS_USERS)+"                                  .",users_toshow);		//Cax2 spaces needed to activate tooltip
d739 1
a739 1
		sBuffer.Format("%s: %i (%s) | %s: %i (%s)", GetResString(IDS_UUSERS), users_toshow, CastItoIShort(totaluser), GetResString(IDS_FILES), files_toshow, CastItoIShort(totalfile)); 
d809 4
a812 8
		if (theApp.glob_prefs->ShowOverhead())
		{
			sBuffer2.Format("%s: %.2f (%.2f) | %s: %.2f (%.2f)", GetResString(IDS_PW_CON_UPLBL), (float)lastuprate/1024, (float)lastuprateoverhead/1024, GetResString(IDS_PW_CON_DOWNLBL), (float)lastdownrate/1024, (float)lastdownrateoverhead/1024); // DonGato
		}
		else
		{
			sBuffer2.Format("%s: %.2f | %s: %.2f", GetResString(IDS_PW_CON_UPLBL), (float)lastuprate/1024, GetResString(IDS_PW_CON_DOWNLBL), (float)lastdownrate/1024); // DonGato
		}		
d882 1
a882 1
	int widths[5] = { rect.right-410, rect.right-290, rect.right-225, rect.right-160,-1 };
d885 1
a885 1
		widths[0]=rect.right-480; widths[1]=rect.right-360; widths[2]=rect.right-260;
d1356 1
a1356 1
		buffer.Format(GetResString(IDS_UUSERS)+": 0"+"                                  ."); //Cax2 spaces needed to activate tooltip
@


1.23
log
@Little fixes and Static Servers additions from 26d
@
text
@d811 1
a811 1
			sBuffer2.Format("%s: %.2f (%.2f) | %s: %.2f (%.2f)",GetResString(IDS_PW_CON_DOWNLBL), (float)lastdownrate/1024, (float)lastdownrateoverhead/1024, GetResString(IDS_PW_CON_UPLBL), (float)lastuprate/1024, (float)lastuprateoverhead/1024); // DonGato
d815 1
a815 1
			sBuffer2.Format("%s: %.2f | %s: %.2f",GetResString(IDS_PW_CON_DOWNLBL), (float)lastdownrate/1024, GetResString(IDS_PW_CON_UPLBL), (float)lastuprate/1024); // DonGato
@


1.22
log
@Preparing for new SLS code
@
text
@d809 8
a816 2
		//sBuffer2.Format(GetResString(IDS_UPDOWNLONG),(float)lastuprate/1024, (float)lastuprateoverhead/1024, (float)lastdownrate/1024, (float)lastdownrateoverhead/1024); // DonGato (& Cax2)
		//sBuffer.Format("eMule Plus v%s (%s | "+GetResString((theApp.serverconnect->IsConnected())?IDS_CONNECTED:IDS_DISCONNECTED)+")",CURRENT_VERSION_LONG,sBuffer2);
@


1.21
log
@upgrade to 26d, fixes, extended reask, more upload parts seen, more crash fixes
@
text
@d1076 1
d1078 1
@


1.20
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d189 1
a189 1
	sprintf(buffer,"eMule V%s Plus",CURRENT_VERSION_LONG);
d842 1
a849 3
	if(dlg == &statisticswnd){
		statisticswnd.ShowStatistics();
	}
d859 1
a859 1
	else if (dlg==&chatwnd) toolbar.PressMuleButton(IDC_TOOLBARBUTTON+5);
d861 1
a861 1
	else if (dlg==&statisticswnd) toolbar.PressMuleButton(IDC_TOOLBARBUTTON+7);
d964 1
a964 1
		AddLogLine(true,clcommand);
d970 15
@


1.19
log
@overhead can be set in preferences now
@
text
@d40 2
d44 1
@


1.18
log
@Vorlost patch for invalid port + 2 bugfixes
@
text
@d201 1
a201 4
	CRect rect;
	statusbar.GetClientRect(&rect);
	int widths[5] = { rect.right-480, rect.right-360, rect.right-260, rect.right-160,-1 };	//Cax2
	statusbar.SetParts(5, widths);
d772 14
a785 5

		sBuffer.Format("%.2f (%.2f)                                   ",(float)lastuprate/1024, (float)lastuprateoverhead/1024);		//Cax2 spaces needed to activate tooltip
		statusbar.SetText(sBuffer,2,0);
		sBuffer.Format("%.2f (%.2f)                                   ",(float)lastdownrate/1024, (float)lastdownrateoverhead/1024);		//Cax2 spaces needed to activate tooltip
		statusbar.SetText(sBuffer,3,0);
d807 1
a807 1
		//sBuffer2.Format("eMule Plus v%s (%s | "+GetResString((theApp.serverconnect->IsConnected())?IDS_CONNECTED:IDS_DISCONNECTED)+")",CURRENT_VERSION_LONG,sBuffer);
d870 7
d879 5
a883 1
	int widths[5] = { rect.right-480, rect.right-360, rect.right-260, rect.right-160,-1 };	//Cax2
a884 2

	EMULE_CATCH2
@


1.17
log
@Updates to Search, System Tray tooltip and System Tray Menu.
@
text
@d800 2
a801 1
		sBuffer2.Format("%s: %.2f (%.2f) | %s: %.2f (%.2f)",GetResString(IDS_PW_CON_DOWNLBL), (float)lastdownrate/1024, (float)lastdownrateoverhead/1024, GetResString(IDS_PW_CON_UPLBL), (float)lastuprate/1024, (float)lastuprateoverhead/1024); // DonGato
a1054 2
    chatwnd.chatselector.SetRedraw(false);
    statisticswnd.SetRedraw(false);
d1061 1
a1061 1

@


1.16
log
@*** empty log message ***
@
text
@d800 1
a800 4
		if(theApp.serverconnect->IsConnected()) 
		sBuffer2.Format("eMule Plus v%s (%s | "+GetResString(IDS_CONNECTED)+")",CURRENT_VERSION_LONG,sBuffer.Trim());
		else
		sBuffer2.Format("eMule Plus v%s (%s | "+GetResString(IDS_DISCONNECTED)+")",CURRENT_VERSION_LONG,sBuffer.Trim());
@


1.15
log
@Final client statistics changes
@
text
@d1122 1
a1122 4
				// [Lord KiRon]
				//EndDialog(0); 
				CDialog::OnCancel(); // for some reason EndDialog() causes sometimes assertion in Window main loop 
				// [/Lord KiRon]
@


1.14
log
@bugifxes & improvements
@
text
@d1122 4
a1125 1
				EndDialog(0);
d1506 5
a1510 1
      		EndDialog(0);		//Cax2 don't ask for confirmation when receiving a shutdown message...
@


1.13
log
@new systray menu + small bugfix
@
text
@d67 4
a70 4
	transicons[0] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_UP0DOWN0),IMAGE_ICON,16,16,0);
	transicons[1] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_UP0DOWN1),IMAGE_ICON,16,16,0);
	transicons[2] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_UP1DOWN0),IMAGE_ICON,16,16,0);
	transicons[3] = (HICON)::LoadImage(AfxGetInstanceHandle(),MAKEINTRESOURCE(IDI_UP1DOWN1),IMAGE_ICON,16,16,0);
d203 2
a204 2
	int widths[4] = { rect.right-440, rect.right-320, rect.right-160,-1 };	//Cax2
	statusbar.SetParts(4, widths);
d657 1
a657 1
			statusbar.SetIcon(3,connicons[1]);
d659 1
a659 1
			statusbar.SetIcon(3,connicons[2]);
d663 2
a664 2
			statusbar.SetTipText(3,server);
			statusbar.SetText(server,3,0);
d686 1
a686 1
			statusbar.SetIcon(3,connicons[0]);
d688 2
a689 2
				statusbar.SetText(GetResString(IDS_CONNECTING),3,0);
				statusbar.SetTipText(3,"");
d712 1
a712 1
			statusbar.SetIcon(3,connicons[0]);
d714 1
a714 1
				statusbar.SetText(GetResString(IDS_NOTCONNECTED),3,0);
d716 1
a716 1
				statusbar.SetTipText(3,"");
d753 1
a753 1
	statusbar.SetIcon(4,imicons[iconnr]);
d774 3
a776 1
		sBuffer.Format(GetResString(IDS_UPDOWN) +"                                  ",(float)lastuprate/1024, (float)lastdownrate/1024);		//Cax2 spaces needed to activate tooltip
d778 2
a779 1

d807 1
a807 5
		if(lastuprate && lastdownrate)
			statusbar.SetIcon(2,transicons[3]);
		else if(lastuprate)
			statusbar.SetIcon(2,transicons[2]);
		else if(lastdownrate)
d811 5
d868 2
a869 2
	int widths[4] = { rect.right-440, rect.right-320, rect.right-160,-1 };	//Cax2 
	statusbar.SetParts(4, widths);
a1319 1
		
d1338 1
a1338 3

		buffer.Format(GetResString(IDS_UPDOWN),(float)theApp.uploadqueue->GetDatarate()/1024,(float)theApp.downloadqueue->GetDatarate()/1024);
		statusbar.SetText(buffer,2,0);
@


1.12
log
@new systray menu + small bugfix
@
text
@d1502 1
a1502 1
      		EndDialog(0); 
@


1.11
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@d77 1
d1084 5
a1088 6
	if (trayPopup) return;
	trayPopup.CreatePopupMenu(); 
	CTitleMenu trayUploadPopup;
	CTitleMenu trayDownloadPopup;
	UINT flagsC;
	UINT flagsD;
d1090 33
a1122 33
	CString text;

	// creating UploadPopup Menu
	trayUploadPopup.CreateMenu();
	trayUploadPopup.AddMenuTitle(GetResString(IDS_PW_TIT_UP));
	text.Format("20%%\t%i %s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.2),GetResString(IDS_KBYTESEC));	trayUploadPopup.AppendMenu(MF_STRING, MP_QS_U20,  text);
	text.Format("40%%\t%i %s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.4),GetResString(IDS_KBYTESEC));	trayUploadPopup.AppendMenu(MF_STRING, MP_QS_U40,  text);
	text.Format("60%%\t%i %s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.6),GetResString(IDS_KBYTESEC));	trayUploadPopup.AppendMenu(MF_STRING, MP_QS_U60,  text);
	text.Format("80%%\t%i %s",  (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()*0.8),GetResString(IDS_KBYTESEC));	trayUploadPopup.AppendMenu(MF_STRING, MP_QS_U80,  text);
	text.Format("100%%\t%i %s", (uint16)(theApp.glob_prefs->GetMaxGraphUploadRate()),GetResString(IDS_KBYTESEC));	trayUploadPopup.AppendMenu(MF_STRING, MP_QS_U100, text);
	trayUploadPopup.AppendMenu(MF_SEPARATOR);
	if (GetRecMaxUpload()>0) {
		text.Format(GetResString(IDS_PW_MINREC),GetRecMaxUpload());
		trayUploadPopup.AppendMenu(MF_STRING, MP_QS_UP10,text );
	}
	trayUploadPopup.AppendMenu(MF_STRING, MP_QS_UPC, GetResString(IDS_PW_UNLIMITED));

	// creating DownloadPopup Menu
	trayDownloadPopup.CreateMenu();
	trayDownloadPopup.AddMenuTitle(GetResString(IDS_PW_TIT_DOWN));
	text.Format("20%%\t%i %s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.2),GetResString(IDS_KBYTESEC));	trayDownloadPopup.AppendMenu(MF_STRING|MF_POPUP, MP_QS_D20,  text);
	text.Format("40%%\t%i %s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.4),GetResString(IDS_KBYTESEC));	trayDownloadPopup.AppendMenu(MF_STRING|MF_POPUP, MP_QS_D40,  text);
	text.Format("60%%\t%i %s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.6),GetResString(IDS_KBYTESEC));	trayDownloadPopup.AppendMenu(MF_STRING|MF_POPUP, MP_QS_D60,  text);
	text.Format("80%%\t%i %s",  (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()*0.8),GetResString(IDS_KBYTESEC));	trayDownloadPopup.AppendMenu(MF_STRING|MF_POPUP, MP_QS_D80,  text);
	text.Format("100%%\t%i %s", (uint16)(theApp.glob_prefs->GetMaxGraphDownloadRate()),GetResString(IDS_KBYTESEC));		trayDownloadPopup.AppendMenu(MF_STRING|MF_POPUP, MP_QS_D100, text);
	trayDownloadPopup.AppendMenu(MF_SEPARATOR);
	trayDownloadPopup.AppendMenu(MF_STRING, MP_QS_DC, GetResString(IDS_PW_UNLIMITED));

	// set connect/disconnect to enabled and disabled
	if (!theApp.serverconnect->IsConnected()) {
		flagsD=MF_STRING || MF_DISABLED; flagsC=MF_STRING;
	} else {
		flagsC=MF_STRING || MF_DISABLED; flagsD=MF_STRING;
a1123 41
	trayPopup.AddMenuTitle((CString)"eMule Plus v"+(CString)CURRENT_VERSION_LONG);

	// Show Xtras
	trayPopup.AppendMenu(MF_STRING, MP_QS_UA, GetResString(IDS_PW_UA));
	trayPopup.AppendMenu(MF_STRING, MP_QS_PA, GetResString(IDS_PW_PA));
	trayPopup.AppendMenu(MF_SEPARATOR);

	// Show UploadPopup Menu
	if(theApp.glob_prefs->GetMaxUpload()==UNLIMITED)
		text.Format("%s:\t%s (%i %s)", GetResString(IDS_PW_UPL),GetResString(IDS_PW_UNLIMITED), theApp.glob_prefs->GetMaxGraphUploadRate(),GetResString(IDS_KBYTESEC));
	else
		text.Format("%s:\t%i %s (%i %s)", GetResString(IDS_PW_UPL), theApp.glob_prefs->GetMaxUpload(),GetResString(IDS_KBYTESEC) ,theApp.glob_prefs->GetMaxGraphUploadRate(),GetResString(IDS_KBYTESEC));

	trayPopup.AppendMenu(MF_STRING|MF_POPUP, (UINT_PTR)trayUploadPopup.m_hMenu, text);

	// Show DownloadPopup Menu
	if(theApp.glob_prefs->GetMaxDownload()==UNLIMITED)
		text.Format("%s:\t%s (%i %s)", GetResString(IDS_PW_DOWNL),GetResString(IDS_PW_UNLIMITED), theApp.glob_prefs->GetMaxGraphDownloadRate(),GetResString(IDS_KBYTESEC));
	else
		text.Format("%s:\t%i %s (%i %s)", GetResString(IDS_PW_DOWNL), theApp.glob_prefs->GetMaxDownload(),GetResString(IDS_KBYTESEC), theApp.glob_prefs->GetMaxGraphDownloadRate(),GetResString(IDS_KBYTESEC));
	trayPopup.AppendMenu(MF_STRING|MF_POPUP, (UINT_PTR)trayDownloadPopup.m_hMenu, text);

	trayPopup.AppendMenu(MF_SEPARATOR);

	// Show the rest of the Menu
	trayPopup.AppendMenu(MF_STRING ,MP_RESTORE, GetResString(IDS_MAIN_POPUP_RESTORE)); 
	trayPopup.SetDefaultItem(MP_RESTORE);
	trayPopup.AppendMenu(MF_SEPARATOR);

	trayPopup.AppendMenu(flagsC,MP_CONNECT, GetResString(IDS_CONNECTTOANYSERVER));
	trayPopup.AppendMenu(flagsD ,MP_DISCONNECT, GetResString(IDS_MAIN_BTN_DISCONNECT)); 

	trayPopup.AppendMenu(MF_STRING,MP_EXIT, GetResString(IDS_EXIT)); 	

	SetForegroundWindow();
	trayPopup.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON, pt.x, pt.y, this); 
	PostMessage(WM_NULL, 0, 0);

	trayPopup.DestroyMenu();
	trayDownloadPopup.DestroyMenu();	// FoRcHa
	trayUploadPopup.DestroyMenu();	
d1502 1
a1502 1
      		OnClose(); 
@


1.10
log
@sivka's bugfix
@
text
@d23 1
d471 5
a475 2
	if (addtostatusbar && HWND(statusbar) != 0 ) // i_a: don't set text if the statusbar isn't there yet... 
		statusbar.SetText(bufferline,0,0);
d540 5
a544 2
	if (addtostatusbar && HWND(statusbar) != 0 ) // i_a: don't set text if the statusbar isn't there yet... 
		statusbar.SetText(bufferline,0,0);
d765 2
a766 2
	int lastuprateoverhead = theApp.uploadqueue->GetDatarateOverhead();
	int lastdownrateoverhead = theApp.downloadqueue->GetDatarateOverhead();
d1023 18
d1052 2
d1063 1
d1567 1
a1567 1
	theApp.emuledlg->serverwnd.serverlistctrl.RemoveServer((CServer*)wParam);
@


1.9
log
@Small fix
@
text
@d1539 1
a1539 1
	theApp.serverlist->RemoveServer((CServer*)wParam);
@


1.9.4.1
log
@*** empty log message ***
@
text
@a75 1
	m_pSystrayDlg = NULL;
d1055 40
a1094 39
	if(m_pSystrayDlg)
	{
		m_pSystrayDlg->BringWindowToTop();
		return;
	}
		
	m_pSystrayDlg = new CMuleSystrayDlg(this,pt, 
									theApp.glob_prefs->GetMaxGraphUploadRate(), 
									theApp.glob_prefs->GetMaxGraphDownloadRate(),
									theApp.glob_prefs->GetMaxUpload(),
									theApp.glob_prefs->GetMaxDownload());
	if(m_pSystrayDlg)
	{
		UINT nResult = m_pSystrayDlg->DoModal();
		delete m_pSystrayDlg;
		m_pSystrayDlg = NULL;
		switch(nResult)
		{
			case IDC_TOMAX:
				QuickSpeedOther(MP_QS_UA);
				break;
			case IDC_TOMIN:
				QuickSpeedOther(MP_QS_PA);
				break;
			case IDC_RESTORE:
				RestoreWindow();
				break;
			case IDC_CONNECT:
				StartConnection();
				break;
			case IDC_DISCONNECT:
				CloseConnection();
				break;
			case IDC_EXIT:
				EndDialog(0);
				break;
			default:
				break;
		}
d1096 41
@


1.9.2.1
log
@initial upgrade to .26
@
text
@a22 1
#include "afxinet.h"
d470 2
a471 5
	if (addtostatusbar)
		if (statusbar.m_hWnd)
			statusbar.SetText(bufferline,0,0);
		else
			AfxMessageBox(bufferline);
d536 2
a537 5
	if (addtostatusbar)
		if (statusbar.m_hWnd)
			statusbar.SetText(bufferline,0,0);
		else
			AfxMessageBox(bufferline);
d626 2
a627 1
void CemuleDlg::ShowConnectionState(bool connected, CString server,bool iconOnly){
a629 1
	// theApp.emuledlg->serverwnd.UpdateMyInfo(); // MERGE26
d758 2
a759 2
	int lastuprateoverhead = theApp.uploadqueue->GetUpDatarateOverhead();
	int lastdownrateoverhead = theApp.downloadqueue->GetDownDatarateOverhead();
@


1.9.2.2
log
@disable redraws while shutting down
@
text
@d1023 1
a1023 19
    // obaldin: disable redraws while shutting down
    // should take care of some crashes on exit
	transferwnd.downloadlistctrl.SetRedraw(false);
	transferwnd.uploadlistctrl.SetRedraw(false);
	transferwnd.queuelistctrl.SetRedraw(false);
	searchwnd.searchlistctrl.SetRedraw(false);
	sharedfileswnd.sharedfilesctrl.SetRedraw(false);
	ircwnd.serverChannelList.SetRedraw(false);
    transferwnd.infolistctrl.SetRedraw(false);
    chatwnd.chatselector.SetRedraw(false);
    statisticswnd.SetRedraw(false);
    transferwnd.SetRedraw(false);
    searchwnd.SetRedraw(false);
    sharedfileswnd.SetRedraw(false);
    ircwnd.SetRedraw(false);
    chatwnd.SetRedraw(false);
    //SetRedraw(false);  // is it enough to do only this, or do we need everything before too??

    // saving data & stuff
a1033 2
    chatwnd.chatselector.SetRedraw(false);
    statisticswnd.SetRedraw(false);
a1042 1
    // obaldin: do we still need te following? Now that we disable the redraws?
@


1.8
log
@bugfixes & control panel updates
@
text
@d256 1
a256 1
	TraySetMinimizeToTray(theApp.glob_prefs->GetMinTrayPTR());
d813 1
a813 1
	if (*theApp.glob_prefs->GetMinTrayPTR()) 
@


1.7
log
@Updates to Preferences (and enabling/disabling options in code because of that)
@
text
@d171 1
a171 1
	m_DefaultFont.CreatePointFont(80,theApp.glob_prefs->GetUsedFont()); // DonGato
d547 1
a547 1
	CString tmp = logtext; // i_a: MUST be copied here to local var (tmp) for use outside the critical section! 
d557 1
a557 1
			int pos = logtext.Find('\r'); 
d560 1
a560 1
				tmp = debuglog = logtext.Mid(pos + 2 /* skip '\n' */); 
d565 1
a565 1
		serverwnd.debugbox.SetWindowText(tmp); // i_a: DON'T use logtext here as this call cannot be placed inside the critical section either. (message pump) 
d1005 1
a1005 1
		if (theApp.glob_prefs->IsConfirmExitEnabled())
d1026 1
a1034 4

	// Barry - Restore old registry if required
	if (theApp.glob_prefs->AutoTakeED2KLinks())
		RevertReg();
@


1.6
log
@merge fixes and minor optimizations
@
text
@d526 1
a526 1
	char osDate[30],osTime[30]; //<<--9/21/02
d529 3
a531 1

d536 1
a536 1
	if (addtostatusbar)
d539 5
a543 3
	_strtime( osTime ); //<<--9/21/02
	_strdate( osDate ); //<<--9/21/02
	sprintf(temp,"%s %s: %s",osDate,osTime,bufferline);//<<--9/21/02 
d546 17
a562 6
	if (ready){
		if (serverwnd.debugbox.GetLineCount() > 100) {
			CString strToken;
			int pos = 0;
			strToken = debuglog.Tokenize("\n", pos);
			logtext = debuglog.Right(debuglog.GetLength() - strToken.GetLength());
d564 15
d580 1
a580 2
		serverwnd.debugbox.SetWindowText(debuglog);
		serverwnd.debugbox.LineScroll(serverwnd.debugbox.GetLineCount());
d583 1
a583 1
	EMULE_CATCH
@


1.5
log
@some variables got duplicated during merge
@
text
@d253 1
a253 1
	ShowTransferRate();
d284 1
d725 1
a725 2
	char buffer[50];
	char buffer2[100];
d734 6
a739 5
	  if( theApp.glob_prefs->ShowOverhead() )
		sprintf(buffer,GetResString(IDS_UPDOWN),(float)lastuprate/1024, (float)lastuprateoverhead/1024, (float)lastdownrate/1024, (float)lastdownrateoverhead/1024);
	  else
		  sprintf(buffer,GetResString(IDS_UPDOWNSMALL),(float)lastuprate/1024, (float)lastdownrate/1024);
		statusbar.SetText(buffer,2,0);
d761 1
a761 1
		sprintf(buffer2,"eMule Plus v%s (%s | "+GetResString(IDS_CONNECTED)+")",CURRENT_VERSION_LONG,buffer);
d763 1
a763 1
		sprintf(buffer2,"eMule Plus v%s (%s | "+GetResString(IDS_DISCONNECTED)+")",CURRENT_VERSION_LONG,buffer);
d765 1
a765 1
		TraySetToolTip(buffer2);
d913 1
a913 1
		if (clcommand=="resume") {theApp.downloadqueue->StartNextFile(); return true;}
d933 1
a933 2

			pString.Format("\n"+GetResString(IDS_UPDOWNSMALL),(float)theApp.uploadqueue->GetDatarate()/1024, (float)theApp.downloadqueue->GetDatarate()/1024);
d1000 1
a1000 1
	if(!(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04))	//Cax2 - win9x crash on exit bugfix
@


1.5.2.1
log
@updating this branch...
@
text
@@


1.5.2.2
log
@merge bugfixes
@
text
@d912 1
a912 1
		if (clcommand=="resume") {theApp.downloadqueue->StartPausedDownload(); return true;} //Cax2 restored the original function name
@


1.5.2.3
log
@merge cleanup!
@
text
@d253 1
a253 1

a283 1
	ShowTransferRate();
d724 3
a726 2
	CString sBuffer,sBuffer2;
	
d734 5
a738 6
		//Cax2 need to create IDS_UPDOWNLONG
		sBuffer2.Format(GetResString(IDS_UPDOWNLONG),(float)lastuprate/1024, (float)lastuprateoverhead/1024, (float)lastdownrate/1024, (float)lastdownrateoverhead/1024);
		statusbar.SetTipText(2,sBuffer2);
		sBuffer.Format(GetResString(IDS_UPDOWN) +"                                  ",(float)lastuprate/1024, (float)lastdownrate/1024);		//Cax2 spaces needed to activate tooltip
		statusbar.SetText(sBuffer,2,0);

d758 1
a758 1
		
d760 1
a760 1
		sBuffer2.Format("eMule Plus v%s (%s | "+GetResString(IDS_CONNECTED)+")",CURRENT_VERSION_LONG,sBuffer.Trim());
d762 1
a762 1
		sBuffer2.Format("eMule Plus v%s (%s | "+GetResString(IDS_DISCONNECTED)+")",CURRENT_VERSION_LONG,sBuffer.Trim());
d764 1
a764 1
		TraySetToolTip(sBuffer2);
d932 2
a933 1
			pString.Format("\n"+GetResString(IDS_UPDOWN),(float)theApp.uploadqueue->GetDatarate()/1024, (float)theApp.downloadqueue->GetDatarate()/1024);
d1000 1
a1000 1
	if(!(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04))	//Cax2 - win9x-NT crash on exit bugfix
@


1.5.2.4
log
@Interim release!
@
text
@d734 1
a734 1
		//Cax2 New string! IDS_UPDOWNLONG
@


1.5.2.5
log
@updated control panes, and assorted bugfixes
@
text
@d171 1
a171 1
	m_DefaultFont.CreatePointFont(theApp.glob_prefs->GetFontSize(),theApp.glob_prefs->GetUsedFont()); // DonGato
d526 1
a526 1

d529 1
a529 3
 
	COleDateTime timelog(COleDateTime::GetCurrentTime()); // DonGato date-time localization
	
d534 1
a534 1
	if (addtostatusbar && HWND(statusbar) != 0 ) // i_a: don't set text if the statusbar isn't there yet... 
d537 3
a539 5
	CSingleLock singleLock(&critical_log_section); 
	singleLock.Lock();  
    	ASSERT(singleLock.IsLocked()); 

	sprintf(temp,"%s: %s",timelog.Format(),bufferline); // DonGato date-time localization
d542 7
d550 1
a550 19
	CString tmp = debuglog; // i_a: MUST be copied here to local var (tmp) for use outside the critical section! 

	singleLock.Unlock();  

	if (ready)
	{
		if (serverwnd.debugbox.GetLineCount() > MAX_LINES_IN_LOGVIEW)
		{ 
			// strip off old lines... 
			singleLock.Lock();  
			int pos = debuglog.Find('\r'); 
			if (pos >= 0) 
			{ 
				tmp = debuglog = debuglog.Mid(pos + 2 /* skip '\n' */); 
			} 
			singleLock.Unlock();  
		}
	
		serverwnd.debugbox.SetWindowText(tmp); // i_a: DON'T use debuglog here as this call cannot be placed inside the critical section either. (message pump) 
a551 14
		ShowNotifier(bufferline, TBN_LOG, false);
		// DonGato
		if (theApp.glob_prefs->LogToFile())
		{
			CString LogFilePath = theApp.glob_prefs->GetAppDir() + CString("emule.log");
			FILE* LogFile = fopen((LPCTSTR)LogFilePath, "a+"); 
			if ( LogFile != NULL )
	 		{
				strcat(temp, "\n");
 				fwrite(temp, sizeof(char), strlen(temp), LogFile);
 				fclose(LogFile);
	 		}

		}
d554 1
a554 1
	EMULE_CATCH2
d726 1
a726 1

d759 1
a759 1

d976 1
a976 1
	//if (theApp.glob_prefs->IsConfirmExitEnabled()) 
a996 1
	ircwnd.serverChannelList.SaveSettings(CPreferences::tableIrc);
d1005 4
@


1.4
log
@first compile with .25 codebase!
@
text
@d1533 1
a1533 1
	return (m_app_state == APP_STATE_RUNNING);
@


1.3
log
@port to .25 b codebase...
@
text
@d1529 6
a1534 1
}@


1.2
log
@update to .25b codebase
@
text
@d451 1
a451 1
	serverwnd.debuglog.SetWindowText(debuglog);
d542 1
a542 1
		if (serverwnd.debuglog.GetLineCount() > 100) {
d549 2
a550 2
		serverwnd.debuglog.SetWindowText(debuglog);
		serverwnd.debuglog.LineScroll(serverwnd.debuglog.GetLineCount());
d1490 1
@


1.1
log
@*** empty log message ***
@
text
@d46 2
a48 1

d62 1
a152 65
void CemuleDlg::OnTimer(UINT_PTR nIDEvent)
{
	EMULE_TRY

	if(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04)
	{
		static status=0;
		
		KillTimer(nIDEvent);
		switch (status)
		{
			case 0:
				// Lucas 02-Jan - Show AFTER starting as this will allow W9x systems to work
				ready = true;
				theApp.sharedfiles->SetOutputCtrl(&sharedfileswnd.sharedfilesctrl);
				status++;
				break;
				
			case 1:
			  	// Lucas 02-Jan - Delay initialization of resources so that W9x works fine
			  	theApp.serverlist->Init();
			  	status++;
			  	break;
			
			case 2:
			  	// Lucas 02-Jan - Delay initialization of resources so that W9x works fine
			  	// ini. downloadqueue
			  	theApp.downloadqueue->Init();
			
			  	// start listining on edonkeyport
			  	if (!theApp.listensocket->StartListening())
					AddLogLine(false,GetResString(IDS_MAIN_SOCKETERROR),theApp.glob_prefs->GetPort());
			  	if (!theApp.clientudp->Create())
			   		AddLogLine(false,GetResString(IDS_MAIN_SOCKETERROR),theApp.glob_prefs->GetPort());
			
			  	AddLogLine(true,GetResString(IDS_MAIN_READY),CURRENT_VERSION_LONG);
			
				if (theApp.glob_prefs->DoAutoConnect())
					DisConnect();
			
				// kuchin
				// Start server anyway, but you'll get response
				// only if it's enabled in preferences
				theApp.webserver->StartServer();
	
			  	status++;
			  	break;
	
			default:
				AddLogLine(true,"DEBUG: Timer called with no reason");
		}
		
		CTrayDialog::OnTimer(nIDEvent);
		
		if (nIDEvent == INIT_TIMER_ID) 
	   	{ 
	    	if (status < 3) 
	        	if (!SetTimer(INIT_TIMER_ID,300,NULL)) 
	            	AfxMessageBox(GetResString(IDS_ERR_FAILEDTIMER)); 
	   	}
	}

	EMULE_CATCH2
}

a261 20
	//Lucas 02-Jan - Delay initialization of resources so that W9x works fine
	if(!(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04))
	{
		ready = true;
		theApp.sharedfiles->SetOutputCtrl(&sharedfileswnd.sharedfilesctrl);

		theApp.serverlist->Init();
	
		// ini. downloadqueue
		theApp.downloadqueue->Init();

		// start listening on edonkeyport
		if (!theApp.listensocket->StartListening())
			AddLogLine(false,GetResString(IDS_MAIN_SOCKETERROR),theApp.glob_prefs->GetPort());
		if (!theApp.clientudp->Create())
			AddLogLine(false,GetResString(IDS_MAIN_SOCKETERROR),theApp.glob_prefs->GetPort());
	
		AddLogLine(true,GetResString(IDS_MAIN_READY),CURRENT_VERSION_LONG);
	}

a270 5
			
		// kuchin
		// Start server anyway, but you'll get response
		// only if it's enabled in preferences
		theApp.webserver->StartServer();
d272 5
d295 2
a296 6
	//Lucas - 08-Jan - Initialization timer is defined 
	if(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04)
	{
	   	if (!SetTimer(INIT_TIMER_ID,300,NULL))
			AfxMessageBox(GetResString(IDS_ERR_FAILEDTIMER));
	}
d305 52
d364 3
a375 3
		case IDM_ABOUTBOX:
			dlgAbout.DoModal();		
			break;
d419 17
d446 10
d519 37
d729 2
d734 4
a737 1
		sprintf(buffer,GetResString(IDS_UPDOWN),(float)lastuprate/1024,(float)lastdownrate/1024);
d760 1
a760 1
			sprintf(buffer2,"eMule Plus (%s | "+GetResString(IDS_CONNECTED)+")",buffer);
d762 1
a762 1
			sprintf(buffer2,"eMule Plus (%s | "+GetResString(IDS_DISCONNECTED)+")",buffer);
d886 4
d903 40
d977 1
a977 1
			if (IDNO==MessageBox(GetResString(IDS_MAIN_EXIT),GetResString(IDS_MAIN_EXITTITLE),MB_YESNO)) return;
d1005 4
@

