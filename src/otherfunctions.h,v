head	1.159;
access;
symbols
	PublicRelease_1_2e:1.156
	Interim_Release_1-2e_RC1:1.156
	PublicRelease_1_2d:1.151
	Interim_Release_1-2d_RC1:1.151
	Interim_Release_1-2d_beta1:1.150
	PublicRelease_1_2c:1.144
	Interim_Release_1-2c_RC1:1.144
	Interim_Release_1-2c_beta1:1.142
	PublicRelease_1_2b:1.141
	Interim_Release_1-2b_RC1:1.141
	PublicRelease_1_2a:1.136
	Interim_Release_1-2a_RC1:1.135
	Interim_Release_1-2a_beta2:1.131
	Interim_Release_1-2a_beta1:1.129
	PublicRelease_1_2:1.126
	Interim_Release_1-2_RC1:1.126
	Interim_Release_1-2_beta1:1.124
	PublicRelease_1_1g:1.123
	Interim_Release_1-1g_RC3:1.123
	Interim_Release_1-1g_RC2:1.123
	Interim_Release_1-1g_RC1:1.123
	Interim_Release_1-1g_beta2:1.122
	Interim_Release_1-1g_beta1:1.119
	PublicRelease_1_1f:1.119
	Interim_Release_1-1f_RC1:1.119
	PublicRelease_1_1e:1.119
	Interim_Release_1-1e_RC2:1.119
	Interim_Release_1-1e_RC1:1.119
	Interim_Release_1-1e_beta1:1.119
	PublicRelease_1_1d:1.118
	Interim_Release_1-1d_RC1:1.118
	PublicRelease_1_1c:1.118
	Interim_Release_1-1c_RC1:1.118
	Interim_Release_1-1c_beta2:1.117
	Interim_Release_1-1c_beta1:1.115
	PublicRelease_1_1b:1.112
	Interim_Release_1-1b_RC1:1.112
	PublicRelease_1_1a:1.112
	Interim_Release_1-1a_RC2:1.111
	Interim_Release_1-1a_RC1:1.111
	Interim_Release_1-1a_beta2:1.111
	Interim_Release_1-1a_beta1:1.110
	PublicRelease_1_1:1.109
	Interim_Release_1-1_beta1:1.108
	PublicRelease_1o:1.106
	Interim_Release_1o_RC1:1.106
	Interim_Release_1o_beta1:1.106
	PublicRelease_1n:1.105
	Interim_Release_1n_RC2:1.105
	Interim_Release_1n_RC1:1.104
	Interim_Release_1n_beta2:1.102
	Interim_Release_1n_beta1:1.100
	PublicRelease_1m:1.97
	Interim_Release_1m_beta1:1.96
	PublicRelease_1l:1.96
	Interim_Release_1l_RC3:1.96
	Interim_Release_1l_RC2:1.96
	Interim_Release_1l_RC1:1.96
	Interim_Release_1l_beta2:1.96
	Interim_Release_1l_beta1:1.94
	PublicRelease_1k:1.90
	Interim_Release_1k_RC4:1.90
	Interim_1k_RC3:1.90
	Interim_1k_RC2:1.89
	Interim_Release_1k_RC1:1.88
	Interim_Release_1k_beta5:1.87
	Intrerim_Release_1k_beta4:1.87
	Interim_Release_1k_beta1:1.81
	PublicRelease_1j:1.71
	Interim_Release_1J_RC3:1.71
	Interim_Release_1j_RC3:1.71
	Interim_Release_1j_RC2:1.70
	Interim_Release_1j_RC1:1.70
	Interim_Release_1j_beta2:1.70
	Interim_Release_1j_beta1:1.70
	PublicRelease_1i:1.69
	Interim_Release_1i_RC6:1.69
	Interim_Release_1i_RC3:1.65
	Interim_Release_1i_RC2:1.65
	Interim_Release_1i_RC1:1.65
	Interim_Release_1i_beta3:1.65
	Interim_Release_1i_beta2:1.62
	Interim_Release_1i_beta1:1.57
	PublicRelease_1h:1.51
	Interim_Release_1h_rc2:1.51
	Interim_Release_1h_RC1:1.51
	Interim_Release_1h_beta2:1.51
	Interim_Release_1h_beta1_now:1.49
	Interim_Release_1h_beta1:1.49
	PublicRelease_1g:1.42
	Interim_Release_1g_RC6_Final:1.42
	Interim_Release_1g_RC6:1.42
	Interim_Release_1g_RC5:1.42
	Interim_Release_1g_RC4:1.42
	Interim_Release_1g_RC3:1.40
	Interim_Release_1g_beta2:1.28
	Interim_Release_1g_beta1:1.27
	Interim_Release_1f_RC4:1.22
	Interim_Release_1f_RC3:1.21
	Interim_Release_1f_RC2:1.18
	Interim_Release_1f_RC:1.18
	Interim_Release_1f_beta2:1.18
	Interim_Release_1f_beta1:1.17
	PublicRelease_1e:1.17
	Interim_Release_1e_RC2:1.17
	Interim_Release_1e_RC:1.17
	Interim_Release_1e_beta3:1.17
	Interim_Release_1e_beta2:1.17
	Interim_Release_1e_beta2_before_kuchin:1.16
	Interim_Release_1e_beta1:1.15
	PublicRelease_1c:1.15
	featurestest:1.15.0.4
	Interim_Release_1c_RC:1.15
	Interim_Release_1c_beta2:1.15
	Interim_Release_1c_beta1:1.15
	threaded_downloadqueue:1.15.0.2
	PublicRelease_1b:1.14
	Interim_Release_1b_beta2:1.14
	Interim_Release_1b_beta1:1.13
	proxydeadlake:1.13.0.2
	PublicRelease_1a:1.13
	Interim_Release_1a_beta2:1.13
	BerkeleyDb:1.12.0.2
	Interim_Release_1a_beta1:1.12
	PublicRelease_1:1.12
	goldfish:1.12
	eMulePlus_1_RC2:1.12
	eMulePlus_26b_1RC1:1.12
	PreRelease_26b_i0e:1.12
	before_26d_merge:1.12
	Interim_Release_26b_i0d:1.9
	Interim_Release_26b_i0c:1.6
	Interim_Release_26b_i0b:1.5
	Interim_Release_26b_i0a:1.5
	systraydlg:1.3.0.6
	plus26based:1.3.0.4
	Interim_Release_25b_i0b:1.3
	Proxy_Dev:1.3
	Interim_Release_25b_i0a:1.3.2.1
	proxytest:1.3.2.1.0.2
	official_sockets:1.3.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.159
date	2010.02.27.17.00.36;	author aw3;	state Exp;
branches;
next	1.158;

1.158
date	2009.06.02.02.10.08;	author aw3;	state Exp;
branches;
next	1.157;

1.157
date	2009.05.16.22.15.21;	author aw3;	state Exp;
branches;
next	1.156;

1.156
date	2009.03.25.02.43.54;	author aw3;	state Exp;
branches;
next	1.155;

1.155
date	2009.03.01.05.44.25;	author aw3;	state Exp;
branches;
next	1.154;

1.154
date	2008.09.29.04.47.56;	author aw3;	state Exp;
branches;
next	1.153;

1.153
date	2008.07.21.04.30.59;	author aw3;	state Exp;
branches;
next	1.152;

1.152
date	2008.07.17.05.01.22;	author aw3;	state Exp;
branches;
next	1.151;

1.151
date	2008.03.03.05.14.16;	author aw3;	state Exp;
branches;
next	1.150;

1.150
date	2007.12.01.10.38.07;	author eklmn;	state Exp;
branches;
next	1.149;

1.149
date	2007.11.12.23.51.27;	author fuxie-dk;	state Exp;
branches;
next	1.148;

1.148
date	2007.10.24.19.09.35;	author fuxie-dk;	state Exp;
branches;
next	1.147;

1.147
date	2007.10.12.21.35.11;	author double_t;	state Exp;
branches;
next	1.146;

1.146
date	2007.10.11.18.09.30;	author fuxie-dk;	state Exp;
branches;
next	1.145;

1.145
date	2007.10.03.18.09.18;	author eklmn;	state Exp;
branches;
next	1.144;

1.144
date	2007.07.27.06.14.03;	author aw3;	state Exp;
branches;
next	1.143;

1.143
date	2007.07.17.04.03.58;	author aw3;	state Exp;
branches;
next	1.142;

1.142
date	2007.02.18.05.30.28;	author aw3;	state Exp;
branches;
next	1.141;

1.141
date	2007.01.17.07.35.58;	author aw3;	state Exp;
branches;
next	1.140;

1.140
date	2007.01.11.19.57.05;	author eklmn;	state Exp;
branches;
next	1.139;

1.139
date	2006.12.06.14.02.54;	author aw3;	state Exp;
branches;
next	1.138;

1.138
date	2006.11.29.13.31.50;	author aw3;	state Exp;
branches;
next	1.137;

1.137
date	2006.11.23.05.28.24;	author aw3;	state Exp;
branches;
next	1.136;

1.136
date	2006.10.11.04.16.40;	author aw3;	state Exp;
branches;
next	1.135;

1.135
date	2006.08.28.00.35.34;	author aw3;	state Exp;
branches;
next	1.134;

1.134
date	2006.07.21.00.36.20;	author aw3;	state Exp;
branches;
next	1.133;

1.133
date	2006.07.13.03.57.03;	author aw3;	state Exp;
branches;
next	1.132;

1.132
date	2006.07.12.17.40.42;	author kush_eplus;	state Exp;
branches;
next	1.131;

1.131
date	2006.05.22.03.44.59;	author aw3;	state Exp;
branches;
next	1.130;

1.130
date	2006.05.17.03.52.25;	author aw3;	state Exp;
branches;
next	1.129;

1.129
date	2006.04.15.23.48.57;	author aw3;	state Exp;
branches;
next	1.128;

1.128
date	2006.04.09.15.18.43;	author kush_eplus;	state Exp;
branches;
next	1.127;

1.127
date	2006.03.05.23.53.55;	author aw3;	state Exp;
branches;
next	1.126;

1.126
date	2006.02.08.03.04.06;	author aw3;	state Exp;
branches;
next	1.125;

1.125
date	2006.02.07.05.31.04;	author aw3;	state Exp;
branches;
next	1.124;

1.124
date	2006.01.03.04.40.12;	author aw3;	state Exp;
branches;
next	1.123;

1.123
date	2005.11.30.03.17.37;	author aw3;	state Exp;
branches;
next	1.122;

1.122
date	2005.11.26.04.31.24;	author aw3;	state Exp;
branches;
next	1.121;

1.121
date	2005.11.23.01.28.15;	author aw3;	state Exp;
branches;
next	1.120;

1.120
date	2005.11.18.05.40.16;	author aw3;	state Exp;
branches;
next	1.119;

1.119
date	2005.03.26.04.10.35;	author aw3;	state Exp;
branches;
next	1.118;

1.118
date	2005.02.16.23.38.05;	author aw3;	state Exp;
branches;
next	1.117;

1.117
date	2005.02.03.16.12.39;	author kuchin;	state Exp;
branches;
next	1.116;

1.116
date	2005.02.02.07.00.13;	author aw3;	state Exp;
branches;
next	1.115;

1.115
date	2005.01.23.13.58.01;	author aw3;	state Exp;
branches;
next	1.114;

1.114
date	2005.01.19.21.10.54;	author netwolf1;	state Exp;
branches;
next	1.113;

1.113
date	2005.01.17.18.34.56;	author katsyonak;	state Exp;
branches;
next	1.112;

1.112
date	2004.12.09.05.40.18;	author aw3;	state Exp;
branches;
next	1.111;

1.111
date	2004.11.11.05.36.29;	author aw3;	state Exp;
branches;
next	1.110;

1.110
date	2004.10.31.22.39.55;	author aw3;	state Exp;
branches;
next	1.109;

1.109
date	2004.10.20.17.08.05;	author aw3;	state Exp;
branches;
next	1.108;

1.108
date	2004.10.16.04.30.30;	author aw3;	state Exp;
branches;
next	1.107;

1.107
date	2004.10.08.04.35.58;	author aw3;	state Exp;
branches;
next	1.106;

1.106
date	2004.09.20.07.12.31;	author aw3;	state Exp;
branches;
next	1.105;

1.105
date	2004.09.07.19.54.26;	author aw3;	state Exp;
branches;
next	1.104;

1.104
date	2004.08.12.14.51.53;	author eklmn;	state Exp;
branches;
next	1.103;

1.103
date	2004.08.10.12.43.39;	author eklmn;	state Exp;
branches;
next	1.102;

1.102
date	2004.08.06.17.00.46;	author eklmn;	state Exp;
branches;
next	1.101;

1.101
date	2004.08.05.21.41.23;	author aw3;	state Exp;
branches;
next	1.100;

1.100
date	2004.07.19.12.54.57;	author katsyonak;	state Exp;
branches;
next	1.99;

1.99
date	2004.07.07.22.21.42;	author katsyonak;	state Exp;
branches;
next	1.98;

1.98
date	2004.07.07.12.17.29;	author katsyonak;	state Exp;
branches;
next	1.97;

1.97
date	2004.06.23.15.19.23;	author aw3;	state Exp;
branches;
next	1.96;

1.96
date	2004.05.16.04.55.21;	author aw3;	state Exp;
branches;
next	1.95;

1.95
date	2004.05.15.00.32.59;	author aw3;	state Exp;
branches;
next	1.94;

1.94
date	2004.05.06.01.39.09;	author katsyonak;	state Exp;
branches;
next	1.93;

1.93
date	2004.05.04.06.10.35;	author aw3;	state Exp;
branches;
next	1.92;

1.92
date	2004.05.02.03.15.29;	author aw3;	state Exp;
branches;
next	1.91;

1.91
date	2004.05.01.05.37.21;	author aw3;	state Exp;
branches;
next	1.90;

1.90
date	2004.04.04.13.19.48;	author syrus77;	state Exp;
branches;
next	1.89;

1.89
date	2004.03.29.17.16.53;	author eklmn;	state Exp;
branches;
next	1.88;

1.88
date	2004.03.24.09.51.22;	author eklmn;	state Exp;
branches;
next	1.87;

1.87
date	2004.03.16.00.38.57;	author aw3;	state Exp;
branches;
next	1.86;

1.86
date	2004.03.15.10.45.27;	author bavariansnail;	state Exp;
branches;
next	1.85;

1.85
date	2004.03.11.04.56.49;	author aw3;	state Exp;
branches;
next	1.84;

1.84
date	2004.03.06.09.44.23;	author bavariansnail;	state Exp;
branches;
next	1.83;

1.83
date	2004.03.06.07.01.57;	author aw3;	state Exp;
branches;
next	1.82;

1.82
date	2004.03.02.01.51.10;	author aw3;	state Exp;
branches;
next	1.81;

1.81
date	2004.02.18.02.12.36;	author aw3;	state Exp;
branches;
next	1.80;

1.80
date	2004.02.16.23.22.39;	author aw3;	state Exp;
branches;
next	1.79;

1.79
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.78;

1.78
date	2004.02.13.11.36.39;	author morevit;	state Exp;
branches;
next	1.77;

1.77
date	2004.02.13.01.52.16;	author aw3;	state Exp;
branches;
next	1.76;

1.76
date	2004.02.11.23.41.51;	author aw3;	state Exp;
branches;
next	1.75;

1.75
date	2004.02.11.04.13.02;	author katsyonak;	state Exp;
branches;
next	1.74;

1.74
date	2004.02.04.14.17.00;	author kuchin;	state Exp;
branches;
next	1.73;

1.73
date	2004.02.03.22.53.58;	author netwolf1;	state Exp;
branches;
next	1.72;

1.72
date	2004.01.31.19.18.04;	author syrus77;	state Exp;
branches;
next	1.71;

1.71
date	2004.01.19.18.21.29;	author dropf;	state Exp;
branches;
next	1.70;

1.70
date	2003.12.11.14.32.47;	author kuchin;	state Exp;
branches;
next	1.69;

1.69
date	2003.12.02.04.33.14;	author katsyonak;	state Exp;
branches;
next	1.68;

1.68
date	2003.11.23.13.33.37;	author katsyonak;	state Exp;
branches;
next	1.67;

1.67
date	2003.11.21.20.24.58;	author eklmn;	state Exp;
branches;
next	1.66;

1.66
date	2003.11.20.20.07.25;	author katsyonak;	state Exp;
branches;
next	1.65;

1.65
date	2003.10.28.12.07.56;	author katsyonak;	state Exp;
branches;
next	1.64;

1.64
date	2003.10.28.10.09.30;	author katsyonak;	state Exp;
branches;
next	1.63;

1.63
date	2003.10.26.13.50.16;	author morevit;	state Exp;
branches;
next	1.62;

1.62
date	2003.10.17.10.29.06;	author morevit;	state Exp;
branches;
next	1.61;

1.61
date	2003.10.14.18.40.58;	author syrus77;	state Exp;
branches;
next	1.60;

1.60
date	2003.10.13.15.13.14;	author morevit;	state Exp;
branches;
next	1.59;

1.59
date	2003.10.10.17.59.02;	author morevit;	state Exp;
branches;
next	1.58;

1.58
date	2003.10.08.12.58.04;	author morevit;	state Exp;
branches;
next	1.57;

1.57
date	2003.09.26.18.37.34;	author bavariansnail;	state Exp;
branches;
next	1.56;

1.56
date	2003.09.24.20.37.32;	author dongato;	state Exp;
branches;
next	1.55;

1.55
date	2003.09.23.16.52.51;	author morevit;	state Exp;
branches;
next	1.54;

1.54
date	2003.09.21.22.05.20;	author morevit;	state Exp;
branches;
next	1.53;

1.53
date	2003.09.20.15.39.30;	author morevit;	state Exp;
branches;
next	1.52;

1.52
date	2003.09.19.00.13.38;	author morevit;	state Exp;
branches;
next	1.51;

1.51
date	2003.08.26.22.14.04;	author syrus77;	state Exp;
branches;
next	1.50;

1.50
date	2003.08.23.00.20.51;	author forcha;	state Exp;
branches;
next	1.49;

1.49
date	2003.08.16.17.57.38;	author eklmn;	state Exp;
branches;
next	1.48;

1.48
date	2003.08.15.15.14.51;	author forcha;	state Exp;
branches;
next	1.47;

1.47
date	2003.08.13.15.55.28;	author eklmn;	state Exp;
branches;
next	1.46;

1.46
date	2003.08.10.04.42.50;	author eklmn;	state Exp;
branches;
next	1.45;

1.45
date	2003.08.04.21.24.38;	author zegzav;	state Exp;
branches;
next	1.44;

1.44
date	2003.08.03.21.07.03;	author forcha;	state Exp;
branches;
next	1.43;

1.43
date	2003.07.28.14.57.52;	author dongato;	state Exp;
branches;
next	1.42;

1.42
date	2003.07.08.00.04.59;	author netwolf1;	state Exp;
branches;
next	1.41;

1.41
date	2003.07.06.11.56.28;	author partyckip;	state Exp;
branches;
next	1.40;

1.40
date	2003.06.28.09.17.22;	author partyckip;	state Exp;
branches;
next	1.39;

1.39
date	2003.06.28.09.04.48;	author partyckip;	state Exp;
branches;
next	1.38;

1.38
date	2003.06.21.18.50.04;	author partyckip;	state Exp;
branches;
next	1.37;

1.37
date	2003.06.19.07.47.47;	author partyckip;	state Exp;
branches;
next	1.36;

1.36
date	2003.06.16.05.07.34;	author partyckip;	state Exp;
branches;
next	1.35;

1.35
date	2003.06.15.15.10.03;	author netwolf1;	state Exp;
branches;
next	1.34;

1.34
date	2003.06.15.13.41.14;	author partyckip;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.15.09.09.28;	author partyckip;	state Exp;
branches;
next	1.32;

1.32
date	2003.06.14.18.08.22;	author partyckip;	state Exp;
branches;
next	1.31;

1.31
date	2003.06.11.18.27.15;	author eklmn;	state Exp;
branches;
next	1.30;

1.30
date	2003.06.09.21.59.36;	author partyckip;	state Exp;
branches;
next	1.29;

1.29
date	2003.06.09.20.17.37;	author partyckip;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.08.18.06.18;	author partyckip;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.01.10.08.44;	author partyckip;	state Exp;
branches;
next	1.26;

1.26
date	2003.05.31.15.38.57;	author partyckip;	state Exp;
branches;
next	1.25;

1.25
date	2003.05.31.08.50.55;	author partyckip;	state Exp;
branches;
next	1.24;

1.24
date	2003.05.26.22.54.24;	author partyckip;	state Exp;
branches;
next	1.23;

1.23
date	2003.05.26.22.15.44;	author partyckip;	state Exp;
branches;
next	1.22;

1.22
date	2003.05.23.00.16.42;	author syrus77;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.20.09.06.49;	author netwolf1;	state Exp;
branches;
next	1.20;

1.20
date	2003.05.17.18.37.08;	author lord_kiron;	state Exp;
branches;
next	1.19;

1.19
date	2003.05.15.22.03.57;	author syrus77;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.08.08.21.35;	author partyckip;	state Exp;
branches;
next	1.17;

1.17
date	2003.04.22.12.41.52;	author kuchin;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.19.07.17.00;	author kuchin;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.14.14.19.30;	author lord_kiron;	state Exp;
branches
	1.15.4.1;
next	1.14;

1.14
date	2003.03.08.12.09.43;	author recdvst;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.26.21.33.13;	author obaldin;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.14.13.54.13;	author lord_kiron;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2003.02.14.13.24.30;	author lord_kiron;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.14.12.22.36;	author lord_kiron;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.13.18.00.10;	author lord_kiron;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.12.20.18.25;	author obaldin;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.11.19.38.50;	author lord_kiron;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.11.17.52.20;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.10.19.24.54;	author cax2;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.09.18.39.42;	author kuchin;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.24.22.07.53;	author maverick65;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2003.01.22.15.05.42;	author cax2;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.25;	author cax2;	state Exp;
branches;
next	;

1.3.2.1
date	2003.01.28.16.54.41;	author cax2;	state Exp;
branches;
next	;

1.3.4.1
date	2003.02.05.01.58.42;	author obaldin;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2003.02.06.18.58.51;	author obaldin;	state Exp;
branches;
next	;

1.12.2.1
date	2003.02.28.22.44.57;	author obaldin;	state Exp;
branches;
next	;

1.15.4.1
date	2003.03.23.06.22.03;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.159
log
@Added Windows 7 OS detection in case it's required for future.
@
text
@//this file is part of eMule
//Copyright (C)2002-2006 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#include "KnownFile.h"
#include "memcpy_amd.h"	// To be renamed
#ifndef NEW_SOCKETS_ENGINE
#include "PartFile.h"
#endif //NEW_SOCKETS_ENGINE

#define _WINVER_NT4_	0x0004
#define _WINVER_95_		0x0004
#define _WINVER_98_		0x0A04
#define _WINVER_ME_		0x5A04
#define _WINVER_2K_		0x0005
#define _WINVER_XP_		0x0105
#define _WINVER_SE_		0x0205	//Win Server 2003
#define _WINVER_VISTA_	0x0006	//as well as Windows Server 2008
#define _WINVER_WIN7_	0x0106

#ifdef _DEBUG
#define OUTPUT_DEBUG_TRACE() { \
	try{ \
	CString strTrace; \
	strTrace.Format(_T("%s:%u, %s\n"), _tcsrchr(_T(__FILE__), _T('\\')) + 1, __LINE__, _T(__FUNCTION__)); \
	OutputDebugString(strTrace); \
	} catch(...){} \
}
#else
#define OUTPUT_DEBUG_TRACE() ((void)0)
#endif

extern const TCHAR g_acHexDigits[16];

double __fastcall GetPercent(uint64 qwValue, uint64 qwTotalValue);
double __fastcall GetPercent(uint32 dwValue, uint32 dwTotal);
CString __stdcall CastItoXBytes(uint64 count);
CString __stdcall CastItoIShort(uint64 number);
CString __stdcall CastItoThousands(_int64 count);
CString __stdcall CastSecondsToHM(sint32 iCount);
CString __stdcall CastSecondsToLngHM(uint32 dwSecs);
void 	ShellOpenFile(const CString& name);
CString __stdcall GetResString(UINT dwStringID);
CString __stdcall GetResString(UINT dwStringID, WORD uLanguageID);
__declspec(noinline) void __stdcall GetResString(CString *pstrOutput, UINT dwStringID);

//Simple encryption
CString Crypt(const CString &strNormal);
CString Decrypt(const CString &strCrypted);

ULONGLONG GetDiskFileSize(LPCTSTR pszFilePath);

bool CheckIsRegistrySet();
bool Ask4RegFix(bool dontAsk = false); // Barry - Allow forced update without prompt
void RevertReg(void); // Barry - Restore previous values
int		GetMaxConnections();
int		UpdateURLMenu(CMenu &menu);
void RunURL(CAbstractFile *file, CString urlpattern);

WORD	DetectWinVersion(bool *pbNTBased);
uint64	GetFreeDiskSpaceX(LPCTSTR pDirectory);
//	FillImgLstWith16x16Icons() fills image list with 16x16 icons.
void __stdcall FillImgLstWith16x16Icons(CImageList *pImgLst, const uint16 *uResIDs, unsigned uiResAmount);
//For Rate File
CString GetRatingString(EnumPartFileRating eRating);
int		GetAppImageListColorFlag();

CString EncodeBase32(const unsigned char* buffer, unsigned int bufLen);
unsigned DecodeBase32(const TCHAR *pcInStr, unsigned uiInLen, byte *pbyteOutput, unsigned uiBufSz);
CString StringLimit(const CString& in, unsigned uiLen);
CString ConcatFullPath(const CString &strPath, const CString &strFname);
// Returns client version string based on client type
CString GetClientVersionString(EnumClientTypes eClienType, uint32 dwVersion);
// returns upload queue client status based as string
void GetStatusULQueueString(CString *pstrOut, EnumULQState State);
// returns client type as string
CString GetClientNameString(EnumClientTypes clienttype);
unsigned HexChr2Num(TCHAR cCh);
CString BrowseFolder(HWND hwndOwner, LPCTSTR pszTitle, LPCTSTR pszStartFolder); //<<-- enkeyDEV(Ottavio84) -ChangeDir-
bool DialogBrowseFile(CString &rstrPath, LPCTSTR pcFilters, LPCTSTR pcDefFileName = NULL, DWORD dwFlags = 0, bool bOpenFile = true, LPCTSTR pcDefDir = NULL);
CString CleanupFilename(const CString &inStr);
int GetErrorMessage(DWORD dwError, CString &rstrErrorMsg, DWORD dwFlags = 0);
CString GetErrorMessage(DWORD dwError, DWORD dwFlags = 0);
CString GetErrorMessage(CException* e);
bool 	IsRightToLeftLanguage();
CString	GetLocalDecimalPoint(bool bSystem = false);
CString	GetLocalThousandsSep(bool bSystem = false);
CString	GetLocalNegativeSign(bool bSystem = false);
bool	IsStolenName(const CString& strUserName);
bool	IsLeecherType(const CString& strModVersion);
#ifndef NEW_SOCKETS_ENGINE
#define YesNoStr(bYes)	GetResString((bYes) ? IDS_YES : IDS_NO)
#else
#define YesNoStr(bYes)	_T("")
#endif //NEW_SOCKETS_ENGINE
int __stdcall GetItemUnderMouse(CListCtrl *ctrl);

//	Convert char to upper case
#define CHR2UP(ch)		((ch) & ~(_T('A') ^ _T('a')))

__inline int CompareUnsigned(uint32 dwVal1, uint32 dwVal2)
{
	if (dwVal1 < dwVal2)
		return -1;
	if (dwVal1 > dwVal2)
		return 1;
	return 0;
}

__inline int CompareInt64(uint64 qwVal1, uint64 qwVal2)
{
	uint64	qwRes = (qwVal1 - qwVal2);

	return (qwRes == 0) ? 0 : (static_cast<int>(qwRes >> 32ui64) | 1);
}

__inline CString GetPathToFile(const CString& p)
{
	TCHAR drive[_MAX_DRIVE];
	TCHAR dir[_MAX_DIR];

	_tsplitpath(p, drive, dir, NULL, NULL);

	return CString(drive) + dir;
}

__inline CString GetFileExtension(const CString& p)
{
	TCHAR ext[_MAX_EXT];
	_tsplitpath(p, NULL, NULL, NULL, ext);
	return CString(ext);
}

__inline CString RemoveFileExtension(const CString& p)
{
	TCHAR drive[_MAX_DRIVE];
	TCHAR dir[_MAX_DIR];
	TCHAR fname[_MAX_FNAME];

	_tsplitpath(p, drive, dir, fname, NULL);

	return CString(drive) + dir + fname;
}

//	IP conversions
#ifdef _UNICODE
uint32 inet_addr(LPCTSTR cp);
#endif
CString ipstr(uint32 dwIP);
void ipstr(CString *pstrOut, uint32 dwIP);

__inline CString ipstr(in_addr IP)
{
	return ipstr(*reinterpret_cast<uint32*>(&IP));
}

__inline void ipstr(CString *pstrOut, in_addr IP)
{
	ipstr(pstrOut, *reinterpret_cast<uint32*>(&IP));
}

//	Use intrinsic operations instead of calling ws2_32.dll
#define fast_htonl	_byteswap_ulong
#define fast_ntohl	_byteswap_ulong
#define fast_htons	_byteswap_ushort
#define fast_ntohs	_byteswap_ushort

__inline bool IsLowID(uint32 dwID)
{
	return (dwID < 0x1000000);
}

//	The validity check of HybridID based on invalid IP ranges
bool IsGoodHybridID(uint32 dwHybridID);

int CALLBACK BrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData);
bool SelectDir(HWND hWnd, LPTSTR pszPath, LPCTSTR pszTitle = NULL, LPCTSTR pszDlgTitle = NULL);
void MakeFolderName(TCHAR* path);
int CompareDirectories(const CString& rstrDir1, const CString& rstrDir2);

TCHAR* stristr(const TCHAR *str1, const TCHAR *str2);	//case insensitive substring search
size_t fast_strlen(const char *pcStr);

COLORREF LightenColor(COLORREF crColor, int i);


__inline void *memcpy2(void* dst, const void *src, size_t size)
{
	return ::memcpy_optimized(dst, src, size);
}

__inline void *memset2(void* dst, int c, size_t size)
{
	return ::memset_optimized(dst, c, size);
}

__inline void memzero(void* dst, size_t size)
{
	::memzero_optimized(dst, size);
}

typedef struct
{
	BYTE		hash[16];
} HashType;

#define	MAX_HASHSTR_SIZE (16*2+1)
CString __stdcall HashToString(const uchar *hash);
TCHAR* md4str(const uchar *hash, TCHAR *pszHash);

//	StringToHash() converts hexadecimal string into hash (case insensitive).
byte* __stdcall StringToHash(const CString &strHexStr, byte *pbyteHash);

// md4cpy -- replacement for memcpy(dst,src,16)
__inline void md4cpy(void* dst, const void* src)
{
	*reinterpret_cast<HashType*>(dst) = *reinterpret_cast<const HashType*>(src);
}

// md4cmp -- replacement for memcmp(hash1,hash2,16)
// Like 'memcmp' this function returns 0, if hash1==hash2, and !0, if hash1!=hash2.
// NOTE: Do *NOT* use that function for determining if hash1<hash2 or hash1>hash2.
__inline int md4cmp(const void* hash1, const void* hash2) {
	return !(((uint32*)hash1)[0] == ((uint32*)hash2)[0] &&
		((uint32*)hash1)[1] == ((uint32*)hash2)[1] &&
		((uint32*)hash1)[2] == ((uint32*)hash2)[2] &&
		((uint32*)hash1)[3] == ((uint32*)hash2)[3]);
}
// Like 'memcmp' this function returns 0 if hash1==0, and !0 if hash1!=0
// This implementation improves CPU jump prediction as it has only one cmp/jmp left
__inline int md4cmp0(const void *pH) {
	return (((uint32*)pH)[0] | ((uint32*)pH)[1] | ((uint32*)pH)[2] | ((uint32*)pH)[3]);
}

// md4clr -- replacement for memset(hash,0,16)
__inline void md4clr(const void* hash) {
	((uint32*)hash)[0] = ((uint32*)hash)[1] = ((uint32*)hash)[2] = ((uint32*)hash)[3] = 0;
}

#define SHA_HASHSIZE	20

//	Services to peek/poke integers from/to buffer
#define PEEK_QWORD(ptr)			*((uint64*)(ptr))
#define PEEK_DWORD(ptr)			*((uint32*)(ptr))
#define PEEK_WORD(ptr)			*((uint16*)(ptr))
#define POKE_QWORD(ptr, qw)		*((uint64*)(ptr)) = qw
#define POKE_DWORD(ptr, dw)		*((uint32*)(ptr)) = dw
#define POKE_WORD(ptr, w)		*((uint16*)(ptr)) = w

// called in the PreTranslateMessage function for shortcut managemment of client items
// (i.e. in CDownloadListCtrl, CUploadListCtrl, CQueueListCtrl and CClientListCtrl)
int GetClientListActionFromShortcutCode(short nCode, CUpDownClient* pClient);

EnumClientTypes GetClientTypeFromCompatibilityTag(uint32 dwTagValue);

//	CreateAllDirectories() creates full path (not only last directory like CreateDirectory()).
void CreateAllDirectories(const CString *pstrPath);

void FractionalRate2String(CString *pstrOut, uint32 dwRate);
#define String2FranctionalRate(str)		static_cast<uint32>((_tstof(str) * 10) + 0.5)

__inline uint32 TieUploadDownload(uint32 dwUL, uint32 dwDL)
{
	if (dwUL < 100)
	{
		if (dwUL < 40)
		{
			if ((3 * dwUL) < dwDL)
				dwDL = 3 * dwUL;
		}
		else if ((4 * dwUL) < dwDL)
			dwDL = 4 * dwUL;
	}
	return dwDL;
}

bool AdjustNTFSDaylightFileTime(uint32 *pdwFileDate, const CString &strFilePath);
bool IsFileOnFATVolume(const CString &strFilePath);
void GetAdjustedFileTime(const CString &strFName, uint32 *pdwTime);

//	GetFileTypeForWebServer() returns file type according to WebServer requirements
const TCHAR* GetFileTypeForWebServer(const CString &strFileName);

#ifdef EP_SPIDERWEB
//	StructuredExceptionHandler() intercepts all system crashes and logs crash information.
void StructuredExceptionHandler(unsigned int uiCode, EXCEPTION_POINTERS *pExp);
#endif

///////////////////////////////////////////////////////////////////////////////
// RC4 Encryption
struct RC4_Key_Struct
{
	byte abyteState[256];
	byte byteX;
	byte byteY;
};

RC4_Key_Struct* RC4CreateKey(const byte *pbyteKeyData, uint32 dwLen, RC4_Key_Struct *key, bool bSkipDiscard = false);
void RC4Crypt(const byte *pbyteIn, byte *pbyteOut, uint32 dwLen, RC4_Key_Struct *key);

///////////////////////////////////////////////////////////////////////////////
// Debugging
CString DbgGetClientTCPOpcode(bool bEMulePck, byte byteOpcode);
@


1.158
log
@Fast byte swap for ntohl and ntohs.
@
text
@d32 2
a33 1
#define _WINVER_VISTA_	0x0006
d244 1
a244 1
// This implementation improves CPU jump prediction as it has only one cmp/jmp felt
@


1.157
log
@Added AICH hash decoding from the link (just preparation for future - it's not used in anyway).
@
text
@d177 1
d179 1
@


1.156
log
@strlen optimization for IP filter.
@
text
@a80 1
#if 0	// Can be required later for AICH
d82 1
a82 1
#endif
a110 4
#define	MAX_HASHSTR_SIZE (16*2+1)
CString __stdcall HashToString(const uchar *hash);
TCHAR* md4str(const uchar *hash, TCHAR *pszHash);

a113 3
//	StringToHash() converts hexadecimal string into hash (case insensitive).
byte* __stdcall StringToHash(const CString &strHexStr, byte *pbyteHash);

d192 1
a192 1
TCHAR* stristr(const TCHAR *str1, const TCHAR *str2);
d218 7
d251 2
@


1.155
log
@More detailed debug information about received bad packets (received client TCP packets).
@
text
@d201 1
@


1.154
log
@Some local functions were made static; Removed unused DecodeLengthBase16().
@
text
@d309 4
@


1.153
log
@Optimized md4cmp0 implementation.
@
text
@a18 1
#include "types.h"
a67 1
void BackupReg(void); // Barry - Store previous values
a83 1
unsigned int DecodeLengthBase16(unsigned int base16Length);
a94 3
CString LeadingCaps(CString inStr, CString exceptStr=_T(""));
CString DeleteNonAlphaNumeric(CString inStr, CString exceptStr=_T("") , bool onlyRep=true);
CString ReplaceDotsWithSpaces(CString inStr, CString exceptStr, CString addClear, bool keepExt);
a95 1
int GetSystemErrorString(DWORD dwError, CString &rstrError);
@


1.152
log
@Faster (intrinsic) htonl and htons implementation.
@
text
@d247 4
a250 6
// Like 'memcmp' this function returns 0, if hash1==0, and !0, if hash1!=0.
__inline int md4cmp0(const void* hash1) {
	return !(((uint32*)hash1)[0] == 0 &&
		((uint32*)hash1)[1] == 0 &&
		((uint32*)hash1)[2] == 0 &&
		((uint32*)hash1)[3] == 0);
@


1.151
log
@Preparations for comprehensive exception handling;
GetKnownFilePriorityString() functionality moved to knownfile class.
@
text
@d190 4
@


1.150
log
@unicode prepararions:
1) added the code for conversion
2) unicode support for ini files
3) unicode support for URL en(de)coding
4) statistic output in UTF8 format
@
text
@d298 4
a301 1
CString GetKnownFilePriorityString(CKnownFile *pKnownFile);
@


1.149
log
@Suppressed compiler warnings [Aw3].
@
text
@d47 2
a66 1
CString URLEncode(CString sIn);
d95 1
a97 1
CString URLDecode(const CString &strIn);
@


1.148
log
@Suppressed level 4 warnings; Formatting [Aw3].
@
text
@d74 1
a74 1
WORD	DetectWinVersion(BOOL &bNTBased);
@


1.147
log
@Changes from Eklmn restored.
They were accidentally overwritten by Fuxie - DK
@
text
@d91 1
a91 1
void GetStatusULQueueString(CString *pstrOut, EnumULQState &State);
@


1.146
log
@Faster date to string conversion (CastSecondsToLngHM) -- used in statistics tree to show duration [Aw3].
@
text
@d87 1
a87 1
CString ConcatFullPath(CString& strPath,CString& strFname);
@


1.145
log
@improved the string handling
@
text
@d53 1
a53 1
CString __stdcall CastSecondsToLngHM(uint64 qwCount);
d87 1
a87 1
CString ConcatFullPath(const CString &strPath, const CString &strFname);
@


1.144
log
@ARRSIZE & ELEMENT_COUNT moved to stdafx; Removed unused functionality.
@
text
@d87 1
a87 1
CString ConcatFullPath(CString& strPath,CString& strFname);
@


1.143
log
@Removed duplicate #include; Removed unrequired ROUND() macro;
Optimized prototypes of widely used functions; Optimized YesNoStr() service.
@
text
@a46 9
#define ELEMENT_COUNT(X) (sizeof(X) / sizeof(X[0]))
#define ARRSIZE(X)	ELEMENT_COUNT(X)

enum TimeFormat
{
	TIMEFORMAT_D_DAYS_H_HOURS,
	TIMEFORMAT_D_COLON_H_DAYS
};

d52 1
a52 1
CString __stdcall CastSecondsToHM(sint32 iCount, TimeFormat eTimeFormat = TIMEFORMAT_D_DAYS_H_HOURS);
@


1.142
log
@Default browsing directory for WebServer templates and while saving logs (default is main e+ dir) {muleteer}.
@
text
@a21 1
#include <math.h>
a34 2
#define ROUND(x) (floor(static_cast<double>(x) + 0.5))

d58 5
a62 5
CString CastItoXBytes(uint64 count);
CString CastItoIShort(uint64 number);
CString CastItoThousands(_int64 count);
CString CastSecondsToHM(sint32 iCount, TimeFormat eTimeFormat = TIMEFORMAT_D_DAYS_H_HOURS);
CString CastSecondsToLngHM(uint64 qwCount);
d120 6
a125 2
CString	__stdcall YesNoStr(bool bYes);
int		GetItemUnderMouse(CListCtrl* ctrl);
d218 1
a218 1
	return(::memcpy_optimized(dst, src, size));
d223 1
a223 1
	return(::memset_optimized(dst, c, size));
@


1.141
log
@Fixed an issue introduced by SX update -- recovered ability to work with local sources if allowed in prefs.ini;
Removed useless check for 255.255.255.255.
@
text
@d107 1
a107 1
BOOL DialogBrowseFile(CString& rstrPath, LPCTSTR pszFilters, LPCTSTR pszDefaultFileName = NULL, DWORD dwFlags = 0,bool openfilestyle=true);
@


1.140
log
@1) updated source exchange protocol to ver.3
2) support of HighID clients with IP "x.x.x.0"  (see description in updownclient.h)
3) removed dublicated ip check for LowID clients in TryToConnect()
4) fixed a client name change by download start from remote client shared file list.
5) some formating
@
text
@d152 1
a152 1
inline CString GetPathToFile(const CString& p)
d162 1
a162 1
inline CString GetFileExtension(const CString& p)
d169 1
a169 1
inline CString RemoveFileExtension(const CString& p)
d202 2
a203 17
//	The validity check of HybridID based on invalid IP ranges  
__inline bool IsGoodHybridID (uint32 dwHybridID)
{
//	0.0.0.0					invalid
//	255.255.255.255				invalid
	if (dwHybridID == 0 || dwHybridID == 0xFFFFFFFF)
		return false;
//	127.0.0.0 - 127.255.255.255		Loopback
	if ((dwHybridID & 0xFF000000) == 0x7F000000)
		return false;
//	224.0.0.0 - 239.255.255.255		Multicast
//	240.0.0.0 - 255.255.255.255		Reserved for Future Use
	if (dwHybridID >= 0xE0000000)
		return false;

	return true;
}
@


1.139
log
@Added proper Vista detection {muleteer}.
@
text
@d197 23
@


1.138
log
@Unified way to preselect default folder for select dialog.
@
text
@a26 2
typedef 	int (__cdecl *SortFunction)(const void *, const void *);

d33 2
a34 1
#define _WINVER_SE_		0x0205
@


1.137
log
@Encryption preparations.
@
text
@d198 1
a198 1

@


1.136
log
@Fixed constant rehashing of files with some weird date {mamamia}.
@
text
@d2 1
a2 1
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
d17 1
a18 1
#pragma once
d299 12
@


1.135
log
@Large file size support preparations.
@
text
@d293 1
@


1.134
log
@Large file size support preparations.
@
text
@d292 1
@


1.133
log
@Simplified code; Removed double function declaration.
@
text
@d257 1
d260 1
@


1.132
log
@UNICODE preparations; optimizations; formattings.
@
text
@d83 3
a85 3
int 	GetMaxConnections();
void	UpdateURLMenu(CMenu &menu, int *piNumURLs);
void RunURL(CAbstractFile* file,CString urlpattern);
a92 1
void	UpdateURLMenu(CMenu &menu, int &counter);
d122 2
a123 2
bool 	IsStolenName(const CString& strUserName);
bool 	IsLeecherType(const CString& strModVersion);
@


1.131
log
@Large file size support preparations.
@
text
@d84 1
a84 1
void	UpdateURLMenu(CMenu &menu, int &out_iNumURLs);
@


1.130
log
@Removed function reading file in a circular way as such possibility was removed long time ago.
@
text
@d138 1
a138 1
__inline int CompareUnsigned(uint32 uSize1, uint32 uSize2)
d140 1
a140 1
	if (uSize1 < uSize2)
d142 1
a142 1
	if (uSize1 > uSize2)
d147 7
@


1.129
log
@Unicode preparations.
@
text
@a261 3
//	CircularFileRead() opens file and read information in circular way.
bool __stdcall CircularFileRead(const TCHAR *pcFileName, uint32 dwOffset, uint32 dwBytesToRead, byte *pbyteBuffer);

@


1.128
log
@UNICODE preparations; optimizations; formattings
@
text
@d175 1
d177 1
a177 1
unsigned long inet_addr(LPCTSTR cp);
d179 13
a193 1

@


1.127
log
@Fixed Unicode issue.
@
text
@d65 2
a66 2
CString CastSecondsToHM(sint32 seconds, TimeFormat enumTimeFormat = TIMEFORMAT_D_DAYS_H_HOURS);
CString CastSecondsToLngHM(uint64 count);
d91 1
a91 1
//For Rate File 
d96 1
d98 1
a99 1
bool DecodeBase16(const char *base16Buffer, unsigned int base16BufLen, byte *buffer, unsigned int bufflen);
d151 1
a151 1
	
d158 1
a158 1
{	
d175 1
a175 1
#ifdef UNICODE
@


1.126
log
@Fixed compilation, sorry and enjoy it again.
@
text
@d274 2
a275 2
//	GetFileTypeForWebServer() returns file type according to WebServer requirements.
const char* GetFileTypeForWebServer(const CString &strFileName);
@


1.125
log
@Download state to string conversion was moved to download client class.
@
text
@d99 1
a99 1
CString StringLimit(const CString& in,uint16 length);
@


1.124
log
@Removed unused code.
@
text
@a102 2
// returns download queue client status based as string
CString GetStatusDLQueueString(EnumDLQState &State);
@


1.123
log
@Unicode preparations; Improved string processing.
@
text
@a96 1
CString EncodeBase16(const unsigned char* buffer, unsigned int bufLen);
@


1.122
log
@Hash to string conversion is ready for Unicode.
@
text
@d115 1
a115 1
CString ReplaceDotsWithSpaces(CString inStr, CString exceptStr=_T(""), CString addClear=_T(""), bool keepExt=false);
d127 1
a127 1
CString	YesNoStr(bool bYes);
d131 1
a131 1
CString HashToString(const uchar *hash);
d138 1
a138 1
byte* StringToHash(const CString &strHexStr, byte *pbyteHash);
d186 1
a186 1
CHAR *stristr(const CHAR *str1, const CHAR *str2);
@


1.121
log
@Unicode corrections {KuSh}.
@
text
@d132 1
a132 1
void md4str(const uchar* hash, char* pszHash);
@


1.120
log
@Improved string processing.
@
text
@a39 1
// obaldin: no point crashing here
d41 1
a41 1
    try{ \
d43 1
a43 1
	strTrace.Format(_T("%s:%d, %s\n"), strrchr(__FILE__, '\\') + 1, __LINE__, __FUNCTION__); \
d45 1
a45 1
    } catch(...){} \
@


1.119
log
@Improved string processing.
@
text
@d74 2
a75 2
CString Crypt(CString sNormal);
CString Decrypt(CString sCrypted);
@


1.118
log
@Move displaying of LowID from Waited to Status column;
Faster conversion of upload status into string.
@
text
@d117 1
a117 1
CString CleanupFilename(CString inStr);
@


1.117
log
@Many ifdefs for v2
@
text
@d58 1
a58 1
	TIMEFORMAT_D_COLON_H_DAYS,
d108 1
a108 1
CString GetStatusULQueueString(EnumULQState &State);
@


1.116
log
@Faster services for packet dispatch/praparation.
@
text
@a19 1
#ifndef NEW_SOCKETS_ENGINE
a20 1
#endif //NEW_SOCKETS_ENGINE
a26 2
#ifndef NEW_SOCKETS_ENGINE

a190 1
#endif //NEW_SOCKETS_ENGINE
a239 2
#ifndef NEW_SOCKETS_ENGINE

a281 2

#endif //NEW_SOCKETS_ENGINE
@


1.115
log
@Unified display of file permission and upload file priority.
@
text
@d247 6
@


1.114
log
@Don't use 32 bit color resources if OS/comctl32.dll doesn't support it and some other minor changes/optimizations.
@
text
@d282 2
@


1.113
log
@Moved GetItemUnderMouse to otherfunctions.
@
text
@d99 1
d145 1
a145 1
__inline CompareUnsigned(uint32 uSize1, uint32 uSize2)
@


1.112
log
@Improved string processing.
@
text
@d132 1
@


1.111
log
@WebServer: faster way to detect file type as well as more file extentions added
(thanks eklmn for idea).
@
text
@d116 1
a116 2
//SyruS: cleanup
CString URLDecode(CString inStr);
@


1.110
log
@Service was moved to the H-file.
@
text
@d278 3
@


1.109
log
@Fixed rehashing on Daylight Saving Time change (official).
@
text
@d138 3
@


1.108
log
@Added unified function for speed check.
@
text
@d273 2
@


1.107
log
@Fractional upload/download limits (min 1 KB/s, granularity 0.1 KB/s).
@
text
@d258 15
@


1.106
log
@Improved string to hash conversion.
@
text
@d255 3
@


1.105
log
@Fixed directory creating [reported by Cheesy].
@
text
@d138 3
@


1.104
log
@GetPercent was splitted to 64 & 32 bit version
@
text
@d249 3
@


1.103
log
@1) statistic for file priority
2) optimization in category processing
@
text
@d66 1
@


1.102
log
@SSWQ
@
text
@a58 12
enum EED2KFileType
{
	ED2KFT_ANY,
	ED2KFT_AUDIO,
	ED2KFT_VIDEO,
	ED2KFT_IMAGE,
	ED2KFT_PROGRAM,
	ED2KFT_DOCUMENT,
	ED2KFT_ARCHIVE,
	ED2KFT_CDIMAGE
};

d65 1
a65 1
double		GetPercent(uint32 Value, uint32 TotalValue);
a182 2
EED2KFileType GetED2KFileTypeID(LPCTSTR pszFileName);

@


1.101
log
@Preparations for new client version report code.
@
text
@d238 7
@


1.100
log
@some code from official
@
text
@a124 1
CString GetClientNameAndVersionString(CUpDownClient *client);
@


1.99
log
@some more fixes & changes
@
text
@d134 3
@


1.98
log
@Changed to system default decimal point & thousand seperator (instead of current locale) + Some formatting
@
text
@d136 3
a138 2
CString	GetLocalDecimalPoint();
CString	GetLocalThousandsSep();
@


1.97
log
@Not allow GetResString to be inline (inline for GetResString doesn't
increase performance, but significantly increase size).
@
text
@d136 2
a137 2
char 	GetLocalDecimalPoint();
char 	GetLocalThousandsSep();
@


1.96
log
@Optimized resource string loading.
@
text
@d86 1
a86 1
void __stdcall GetResString(CString *pstrOutput, UINT dwStringID);
@


1.95
log
@One more new GetResString service which is more effective in some cases.
@
text
@d84 2
a85 2
CString GetResString(UINT dwStringID);
CString GetResString(UINT dwStringID, WORD uLanguageID);
@


1.94
log
@added tooltips to the Server list
@
text
@d84 3
a86 2
CString GetResString(UINT uStringID);
CString GetResString(UINT uStringID,WORD languageID);
@


1.93
log
@Removed old icon loading service.
@
text
@d139 1
@


1.92
log
@Added a new service to fill image lists.
@
text
@a103 1
HICON	LoadImgLstIcon(LPCTSTR lpszName, int cx, int cy);
@


1.91
log
@Fixed loss of client uploading turn during part file flushing and single part hashing;
Reworked file completion algorithm to eliminate file locking in completing state.
@
text
@d105 2
@


1.90
log
@fixed security exploit in IRC module and Web server (from official) [katsyonak]
@
text
@d246 3
@


1.89
log
@corrected client software detection
@
text
@d111 2
a112 2
int	DecodeLengthBase16(int base16Length);
void DecodeBase16(LPCTSTR base16Buffer, unsigned int base16BufLen, byte *buffer);
@


1.88
log
@some refactoring : IsStolenName & IsLeecherType were moved into otherfunctions.cpp
@
text
@d244 2
@


1.87
log
@Remake for display '&' on info pane; now also all fields can show '&' correctly.
@
text
@d133 5
a137 3
bool IsRightToLeftLanguage();
char GetLocalDecimalPoint();
char GetLocalThousandsSep();
@


1.86
log
@display fix for & chars in filename for infolist pane
@
text
@a94 1
CString MakeStringEscaped(CString in);
@


1.85
log
@minor optimization
@
text
@d95 1
@


1.84
log
@changed concatenation of .met path and fname in tooltips to avoid missing or doubled backslashes when using multiple temp folders.
@
text
@a130 1
byte GetRealPrio(byte in);
@


1.83
log
@Improved client version to string conversion
@
text
@d114 1
@


1.82
log
@Solved all problems with display of '&' in File and Client Details dialogs (unrequired service is removed)
@
text
@d115 1
a115 1
CString GetClientVersionString(EnumClientTypes clientype,uint32 uVersion);
@


1.81
log
@Improved hash to string conversion; improved DL/UP queue state display; minor optimization
@
text
@a98 1
CString MakeStringEscaped(CString in);
@


1.80
log
@Improved hash to string conversion
@
text
@a93 1
inline 	BYTE toHex(const BYTE &x);
@


1.79
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@a82 1
CString FileHashToString(const uchar *hash); 
d140 1
a140 1
CString md4str(const uchar* hash);
@


1.78
log
@Formatting, comments, and name changes.
@
text
@d133 1
a133 1
uint8 GetRealPrio(uint8 in);
@


1.77
log
@Optimized hash processings
@
text
@d215 1
a215 1
	uchar hash[16];
@


1.76
log
@Improved string processings; memzero optimization -- no return value
@
text
@d213 5
d221 1
a221 1
	memcpy2(dst,src,16);
@


1.75
log
@Replaced all zero filled memsets with optimized memzero (Thx Aw3 !) + some more Aw3 optimizations
@
text
@a83 1
CString LeadingZero(uint32 units);
d208 1
a208 1
__inline void *memzero(void* dst, size_t size)
d210 1
a210 1
	return(::memzero_optimized(dst, size));
@


1.74
log
@New engine - cosmetic changes
@
text
@d201 1
a201 1
	return(::memcpy_optimized(dst,src,size));
d206 6
a211 1
	return(::memset_optimized(dst,c,size));
@


1.73
log
@added button to toggle between known and shared files + minor changes
@
text
@d230 2
d235 2
@


1.72
log
@removed 3 lines which were doubled :huh:
@
text
@d23 1
a23 5
#ifdef OLD
	#include "memcpy_amd.h"
#else
	#include "memcpy_amd.h"	// To be renamed
#endif OLD
@


1.71
log
@Some corrections in shortcut management code to keep new engine hierarchy (thanks to eklmn ;-))
@
text
@a148 4
#define	MAX_HASHSTR_SIZE (16*2+1)
CString md4str(const uchar* hash);
void md4str(const uchar* hash, char* pszHash);

@


1.70
log
@New engine
@
text
@d237 4
@


1.69
log
@Formatting + minor changes
@
text
@d20 1
d22 1
d29 1
d31 3
a144 31
// md4cmp -- replacement for memcmp(hash1,hash2,16)
// Like 'memcmp' this function returns 0, if hash1==hash2, and !0, if hash1!=hash2.
// NOTE: Do *NOT* use that function for determining if hash1<hash2 or hash1>hash2.
__inline int md4cmp(const void* hash1, const void* hash2) {
	return !(((uint32*)hash1)[0] == ((uint32*)hash2)[0] &&
		     ((uint32*)hash1)[1] == ((uint32*)hash2)[1] &&
		     ((uint32*)hash1)[2] == ((uint32*)hash2)[2] &&
		     ((uint32*)hash1)[3] == ((uint32*)hash2)[3]);
}

// md4clr -- replacement for memset(hash,0,16)
__inline void md4clr(const void* hash) {
	((uint32*)hash)[0] = ((uint32*)hash)[1] = ((uint32*)hash)[2] = ((uint32*)hash)[3] = 0;
}

__inline void *memcpy2(void* dst, const void *src, size_t size)
{
	return(::memcpy_optimized(dst,src,size));
}

__inline void *memset2(void* dst, int c, size_t size)
{
	return(::memset_optimized(dst,c,size));
}

// md4cpy -- replacement for memcpy(dst,src,16)
__inline void md4cpy(void* dst, const void* src)
{
	memcpy2(dst,src,16);
}

d203 34
a236 1
COLORREF LightenColor(COLORREF crColor, int i);@


1.68
log
@Correct localization of decimal point & thousands seperator + Correct encoding for Hebrew language in WebServer
@
text
@d80 1
a80 1
CString CastSecondsToLngHM(uint64 count);	// -khaos
d83 2
a84 2
void 	ShellOpenFile(const CString& name); //<<--9/21/02
CString GetResString(UINT uStringID);//<<--10/01/02
a110 1
// From Gnucleus project [found by Tarod]
d126 1
a126 1
CString DialogBrowseFile(CString Filters, CString DefaultFileName="");
@


1.67
log
@File Type correction & related name changes
@
text
@d78 1
a78 1
CString CastItoIdots(_int64 count);
d137 2
@


1.66
log
@Added a function: bool IsRightToLeftLanguage(); + Fixed Hebrew text alignment in Shared Files list + Hebrew translation update
@
text
@a94 1
CString GetFiletypeByName(const CString& infile);
a222 2
CString GetFiletypeByName(LPCTSTR pszFileName);
LPCSTR GetED2KFileTypeSearchTerm(EED2KFileType iFileID);
@


1.65
log
@free disk space needed is now determined with respect to NTFS compression and/or sparse files
@
text
@d137 1
a155 10
#ifdef OLD	//Pre-katsyonak

#ifndef AMD
	return(::memcpy(dst,src,size));
#else
	return(::memcpy_amd(dst,src,size));
#endif AMD

#else

d157 1
d159 3
a161 1
#endif OLD
d165 2
a166 14
__inline void md4cpy(void* dst, const void* src) {
#ifdef OLD	// Pre-katsyonak

#ifndef AMD
	((uint32*)dst)[0] = ((uint32*)src)[0];
	((uint32*)dst)[1] = ((uint32*)src)[1];
	((uint32*)dst)[2] = ((uint32*)src)[2];
	((uint32*)dst)[3] = ((uint32*)src)[3];
#else
	memcpy_amd(dst,src,16);
#endif AMD

#else

a167 7

#endif OLD
}

__inline void *memset2(void* dst, int c, size_t size)
{
	return(::memset_optimized(dst,c,size));
@


1.64
log
@some updates from official
@
text
@d91 2
@


1.63
log
@Formatting, comments, and name changes.
float => double conversion
@
text
@d104 1
a104 1
_int64	GetFreeDiskSpaceX(LPCTSTR pDirectory);
@


1.62
log
@no message
@
text
@d39 1
a39 1
#define ROUND(x) (floor((float)x+0.5f))
d75 1
a75 1
float		GetPercent(uint32 Value, uint32 TotalValue);
@


1.61
log
@Added MMX/AMD/SSE optimized memset [katsyonak]
@
text
@a28 3
enum EnumDLQState;
enum EnumULQState;

d119 1
a119 1
CString GetStatusDLQueueString(EnumDLQState State);
d121 1
a121 1
CString GetStatusULQueueString(EnumULQState State);
@


1.60
log
@Formatting, comments, and name changes.
@
text
@d191 5
@


1.59
log
@Formatting, comments, and name changes.
@
text
@d103 1
a103 1
void	UpdateURLMenu(CMenu &menu, int &counter);
@


1.58
log
@Formatting, comments, and name changes.
Modified memcpy2() and md4cpy() to use katsyonak's optimized memcpy.
@
text
@d29 3
d110 1
a110 1
CString GetRateString(uint16 rate);
@


1.57
log
@added function to format large numbers with thousands dots (asked by purity to use in webserver)
@
text
@d21 5
a25 1
#include "memcpy_amd.h"
d151 17
d170 2
d180 6
a190 9

__inline void *memcpy2(void* dst, const void *src, size_t size)
{
#ifndef AMD
	return(::memcpy(dst,src,size));
#else
	return(::memcpy_amd(dst,src,size));
#endif AMD
}
@


1.56
log
@Added Known List to transfer window. Hope no major bug was introduced. Should be tested!
@
text
@d74 1
@


1.55
log
@Category rewrite with predefined status/media type categories.
@
text
@d158 4
@


1.54
log
@Removed all #ifndef AMDs and consolidated CPU specific behavior in md4cpy() and new method memcpy2() (come up with a better name if you can :P ).
@
text
@a211 1
bool CheckShowItemInGivenCat(CPartFile* file, int inCategory);
a215 1
CString GetCatTitle(int catid);
@


1.53
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d148 1
d153 12
@


1.52
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@d112 1
a112 1
CString GetClientVersionString(eClientTypes clientype,uint32 uVersion);
d114 1
a114 1
CString GetStatusDLQueueString(eDLQState State);
d116 1
a116 1
CString GetStatusULQueueString(eULQState State);
d118 1
a118 1
CString GetClientNameString(eClientTypes clienttype);
@


1.51
log
@filenamecleanup:
cutoff doubled extension
clear leading and trailing junk
safe failover returning original input
...more2come...
@
text
@d65 5
d74 1
a74 1
CString CastSecondsToHM(sint32 seconds);
d201 2
a202 1
void MakeFoldername(char* path);
@


1.50
log
@*** empty log message ***
@
text
@d123 1
a123 1
CString CleanupFilename(CString filename);
@


1.49
log
@extended Upload Session statistic
@
text
@a22 1
#ifdef __USE_CATEGORIES__
a23 1
#endif
d50 16
d193 1
a193 1
#ifdef __USE_CATEGORIES__
d195 1
d197 1
a198 1
#endif
d200 7
@


1.48
log
@*** empty log message ***
@
text
@d52 1
@


1.47
log
@1) fix with 100% load after connect to server
2) MOD are sorted now
@
text
@d181 1
@


1.46
log
@new statistic (khaos based)
@
text
@d55 1
a55 1
CString CastSecondsToLngHM(__int64 count);	// -khaos
@


1.45
log
@share files with soft limit
@
text
@d55 1
@


1.44
log
@*** empty log message ***
@
text
@d106 1
@


1.43
log
@Added simple encription of SMTP password.
@
text
@d23 3
d175 6
a180 1
#endif@


1.42
log
@FATURE: specify path to WebServer template in preferences
@
text
@d58 4
@


1.41
log
@added GetPathToFile function
@
text
@d93 1
@


1.40
log
@added GetFileExtension helper function
@
text
@d137 10
@


1.39
log
@added RemoveFileExtension helper function
@
text
@d137 7
@


1.38
log
@killed nstrdup function
@
text
@d137 11
@


1.37
log
@unicode cleanup
@
text
@a57 11
inline char* nstrdup(const char* todup) { 
  if (!todup) 
    return NULL; //added by lovelace (crash prevention)
   size_t len = strlen(todup)+1;
   #ifndef AMD
   return (char*)memcpy(new char[len], todup, len); 
   #else
   return (char*)memcpy_amd(new char[len], todup, len); 
   #endif
}

@


1.36
log
@unicode cleanup
@
text
@d103 1
a103 1
CString BrowseFolder(HWND hwndOwner, const char* pszTitle, const char* pszStartFolder); //<<-- enkeyDEV(Ottavio84) -ChangeDir-
@


1.35
log
@change in definition of md4cpy (by maella)
@
text
@d82 1
a82 1
_int64	GetFreeDiskSpaceX(TCHAR *pDirectory);
@


1.34
log
@unicode cleanup
@
text
@d128 1
a128 1
__inline void md4cpy(const void* dst, const void* src) {
@


1.33
log
@unicode cleanup
@
text
@d82 1
a82 1
_int64	GetFreeDiskSpaceX(PCHAR pDirectory);
@


1.32
log
@unicode cleanup
@
text
@d147 4
@


1.31
log
@memcpy() optimized for AMD (faster in 2-2.5 times). AMD only. Compile with tag AMD
@
text
@d41 1
a41 1
	strTrace.Format("%s:%d, %s\n", strrchr(__FILE__, '\\') + 1, __LINE__, __FUNCTION__); \
@


1.30
log
@unicode cleanup
@
text
@d21 1
d61 2
a62 1
   size_t len = strlen(todup)+1; 
d64 3
@


1.29
log
@unicode cleanup
@
text
@d87 1
a87 1
void DecodeBase16(const char *base16Buffer, unsigned int base16BufLen, byte *buffer);
@


1.28
log
@converted to helper function GetErrorMessage
@
text
@d101 3
a103 3
CString LeadingCaps(CString inStr, CString exceptStr="");
CString DeleteNonAlphaNumeric(CString inStr, CString exceptStr="" , bool onlyRep=true);
CString ReplaceDotsWithSpaces(CString inStr, CString exceptStr="", CString addClear="", bool keepExt=false);
@


1.27
log
@code cleanup
@
text
@d105 1
@


1.26
log
@code cleanup
@
text
@d48 3
a50 3
CString CastItoXBytes(uint64 count, char *pBuffer = NULL,size_t size=0);
CString CastItoIShort(uint64 number, char *pBuffer = NULL,size_t size=0);
CString CastSecondsToHM(sint32 seconds, char *pBuffer = NULL,size_t size=0);
@


1.25
log
@code cleanup
@
text
@d67 2
a68 1
bool Ask4RegFix(bool checkOnly, bool dontAsk = false); // Barry - Allow forced update without prompt
@


1.24
log
@inlined function should be defined in header
@
text
@d51 1
@


1.23
log
@kill unused URLDecode method
@
text
@d55 7
a61 1
inline 	char* nstrdup(const char* todup);
@


1.22
log
@SyruS: last cleanup-changes (before further major changes)
@
text
@a56 1
void 	URLDecode(CString& result, const char* buff);// Make a malloc'd decoded strnig from an URL encoded string (with escaped spaces '%20' and  the like
@


1.21
log
@windows server 2003 detection support
@
text
@d94 3
a96 1
CString LeadingCaps(CString inStr);
@


1.20
log
@Another fix for not used yet code :)
@
text
@d31 1
@


1.19
log
@SyruS: customizable cleanup of filenames
@
text
@d23 2
@


1.18
log
@code cleanup
@
text
@d89 4
@


1.17
log
@Upgrade to 0.28a
@
text
@d49 1
a49 1
void 	ShellOpenFile(CString name); //<<--9/21/02
d57 1
a57 1
CString GetFiletypeByName(CString infile);
d78 1
a78 1
CString StringLimit(CString in,uint16 length);
@


1.16
log
@Upgrade to webserver official 0.28a
@
text
@d89 36
@


1.15
log
@*** empty log message ***
@
text
@d78 1
@


1.15.4.1
log
@27a partial merge
@
text
@a87 1
void MakeFoldername(CString& path);@


1.14
log
@all my stable changes and some minor fixes (refer to changelog)
@
text
@d66 1
a66 1
WORD	DetectWinVersion();
@


1.13
log
@version displaying in messages, fixes in chunk selection
@
text
@d63 1
d87 1
@


1.12
log
@*** empty log message ***
@
text
@d84 2
a85 1
CString GetClientNameString(eClientTypes clienttype);@


1.12.2.1
log
@v1a upgrade
@
text
@d84 1
a84 2
CString GetClientNameString(eClientTypes clienttype);
CString GetClientNameAndVersionString(CUpDownClient *client);
@


1.11
log
@*** empty log message ***
@
text
@d77 1
d79 1
d81 4
a84 1
CString GetStatusULQueueString(eULQState State);@


1.10
log
@*** empty log message ***
@
text
@d78 2
a79 1
CString GetStatusString(eQState State);@


1.9
log
@Further Statistics changes
@
text
@d78 1
@


1.8
log
@more 26b merges
@
text
@d77 1
a77 1

@


1.7
log
@*** empty log message ***
@
text
@d63 1
a63 1
void RunURL(CKnownFile* file,CString urlpattern);
@


1.6
log
@Hotfixes.
@
text
@d45 3
a47 3
CString CastItoXBytes(uint64 count, char *pBuffer = NULL);
CString CastItoIShort(uint64 number, char *pBuffer = NULL);
CString CastSecondsToHM(sint32 seconds, char *pBuffer = NULL);
@


1.5
log
@.26b port
@
text
@d45 3
a47 3
CString CastItoXBytes(uint64 count);
CString CastItoIShort(uint64 number);
CString CastSecondsToHM(sint32 seconds); //<<--9/21/02
@


1.4
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@d45 1
a45 1
void 	CastItoXBytes(uint64 count,char* output);
d47 1
a47 1
void 	CastSecondsToHM(sint32 seconds,char* output); //<<--9/21/02
@


1.3
log
@updated to .25b codebase
@
text
@d20 1
d33 1
d35 1
d39 1
d63 1
d70 8
@


1.3.4.1
log
@initial upgrade to .26
@
text
@a19 1
#include "KnownFile.h"
d41 1
a41 1
void CastItoXBytes(uint64 count,char* output);
d43 1
a43 1
void CastSecondsToHM(sint32 seconds,char* output); //<<--9/21/02
d45 1
a45 1
void ShellOpenFile(CString name); //<<--9/21/02
d48 1
a48 1
inline char* nstrdup(const char* todup);
d50 1
a50 1
void URLDecode(CString& result, const char* buff);// Make a malloc'd decoded strnig from an URL encoded string (with escaped spaces '%20' and  the like
d52 1
a52 1
inline BYTE toHex(const BYTE &x);
d57 1
a57 1
int GetMaxConnections();
a58 1
void RunURL(CKnownFile* file,CString urlpattern);
a64 8
void	UpdateURLMenu(CMenu &menu, int &counter);

// From Gnucleus project [found by Tarod]
CString EncodeBase32(const unsigned char* buffer, unsigned int bufLen);
CString EncodeBase16(const unsigned char* buffer, unsigned int bufLen);
int	DecodeLengthBase16(int base16Length);
void DecodeBase16(const char *base16Buffer, unsigned int base16BufLen, byte *buffer);

@


1.3.4.2
log
@ran into exception in OUTPUT_DEBUG_TRACE today.
@
text
@a32 1
// obaldin: no point crashing here
a33 1
    try{ \
a36 1
    } catch(...){} \
@


1.3.2.1
log
@updating this branch...
@
text
@@


1.2
log
@update to .25b codebase
@
text
@d22 1
a22 1
#define _WINVER_NT4_		0x0004
@


1.1
log
@*** empty log message ***
@
text
@d54 3
a56 1
bool 	Ask4RegFix(bool checkOnly);
d58 1
@

