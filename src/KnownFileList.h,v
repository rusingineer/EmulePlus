head	1.23;
access;
symbols
	PublicRelease_1_2e:1.23
	Interim_Release_1-2e_RC1:1.23
	PublicRelease_1_2d:1.23
	Interim_Release_1-2d_RC1:1.23
	Interim_Release_1-2d_beta1:1.23
	PublicRelease_1_2c:1.22
	Interim_Release_1-2c_RC1:1.22
	Interim_Release_1-2c_beta1:1.22
	PublicRelease_1_2b:1.22
	Interim_Release_1-2b_RC1:1.22
	PublicRelease_1_2a:1.22
	Interim_Release_1-2a_RC1:1.22
	Interim_Release_1-2a_beta2:1.22
	Interim_Release_1-2a_beta1:1.21
	PublicRelease_1_2:1.21
	Interim_Release_1-2_RC1:1.21
	Interim_Release_1-2_beta1:1.21
	PublicRelease_1_1g:1.21
	Interim_Release_1-1g_RC3:1.21
	Interim_Release_1-1g_RC2:1.21
	Interim_Release_1-1g_RC1:1.21
	Interim_Release_1-1g_beta2:1.21
	Interim_Release_1-1g_beta1:1.21
	PublicRelease_1_1f:1.20
	Interim_Release_1-1f_RC1:1.20
	PublicRelease_1_1e:1.20
	Interim_Release_1-1e_RC2:1.20
	Interim_Release_1-1e_RC1:1.20
	Interim_Release_1-1e_beta1:1.20
	PublicRelease_1_1d:1.19
	Interim_Release_1-1d_RC1:1.19
	PublicRelease_1_1c:1.19
	Interim_Release_1-1c_RC1:1.19
	Interim_Release_1-1c_beta2:1.19
	Interim_Release_1-1c_beta1:1.18
	PublicRelease_1_1b:1.18
	Interim_Release_1-1b_RC1:1.18
	PublicRelease_1_1a:1.18
	Interim_Release_1-1a_RC2:1.18
	Interim_Release_1-1a_RC1:1.18
	Interim_Release_1-1a_beta2:1.18
	Interim_Release_1-1a_beta1:1.18
	PublicRelease_1_1:1.18
	Interim_Release_1-1_beta1:1.18
	PublicRelease_1o:1.18
	Interim_Release_1o_RC1:1.18
	Interim_Release_1o_beta1:1.18
	PublicRelease_1n:1.18
	Interim_Release_1n_RC2:1.18
	Interim_Release_1n_RC1:1.18
	Interim_Release_1n_beta2:1.18
	Interim_Release_1n_beta1:1.18
	PublicRelease_1m:1.18
	Interim_Release_1m_beta1:1.18
	PublicRelease_1l:1.18
	Interim_Release_1l_RC3:1.18
	Interim_Release_1l_RC2:1.18
	Interim_Release_1l_RC1:1.18
	Interim_Release_1l_beta2:1.18
	Interim_Release_1l_beta1:1.18
	PublicRelease_1k:1.18
	Interim_Release_1k_RC4:1.18
	Interim_1k_RC3:1.18
	Interim_1k_RC2:1.18
	Interim_Release_1k_RC1:1.18
	Interim_Release_1k_beta5:1.18
	Intrerim_Release_1k_beta4:1.18
	Interim_Release_1k_beta1:1.18
	PublicRelease_1j:1.16
	Interim_Release_1J_RC3:1.16
	Interim_Release_1j_RC3:1.16
	Interim_Release_1j_RC2:1.16
	Interim_Release_1j_RC1:1.16
	Interim_Release_1j_beta2:1.16
	Interim_Release_1j_beta1:1.16
	PublicRelease_1i:1.16
	Interim_Release_1i_RC6:1.16
	Interim_Release_1i_RC3:1.16
	Interim_Release_1i_RC2:1.16
	Interim_Release_1i_RC1:1.15
	Interim_Release_1i_beta3:1.15
	Interim_Release_1i_beta2:1.15
	Interim_Release_1i_beta1:1.14
	PublicRelease_1h:1.12
	Interim_Release_1h_rc2:1.12
	Interim_Release_1h_RC1:1.12
	Interim_Release_1h_beta2:1.12
	Interim_Release_1h_beta1_now:1.12
	Interim_Release_1h_beta1:1.12
	PublicRelease_1g:1.11
	Interim_Release_1g_RC6_Final:1.11
	Interim_Release_1g_RC6:1.11
	Interim_Release_1g_RC5:1.11
	Interim_Release_1g_RC4:1.11
	Interim_Release_1g_RC3:1.11
	Interim_Release_1g_beta2:1.10
	Interim_Release_1g_beta1:1.8
	Interim_Release_1f_RC4:1.8
	Interim_Release_1f_RC3:1.8
	Interim_Release_1f_RC2:1.7
	Interim_Release_1f_RC:1.7
	Interim_Release_1f_beta2:1.7
	Interim_Release_1f_beta1:1.6
	PublicRelease_1e:1.6
	Interim_Release_1e_RC2:1.6
	Interim_Release_1e_RC:1.6
	Interim_Release_1e_beta3:1.6
	Interim_Release_1e_beta2:1.6
	Interim_Release_1e_beta2_before_kuchin:1.6
	Interim_Release_1e_beta1:1.6
	PublicRelease_1c:1.5
	featurestest:1.5.0.4
	Interim_Release_1c_RC:1.5
	Interim_Release_1c_beta2:1.5
	Interim_Release_1c_beta1:1.5
	threaded_downloadqueue:1.5.0.2
	PublicRelease_1b:1.4
	Interim_Release_1b_beta2:1.4
	Interim_Release_1b_beta1:1.4
	proxydeadlake:1.3.0.4
	PublicRelease_1a:1.3
	Interim_Release_1a_beta2:1.3
	BerkeleyDb:1.3.0.2
	Interim_Release_1a_beta1:1.3
	PublicRelease_1:1.3
	goldfish:1.3
	eMulePlus_1_RC2:1.3
	eMulePlus_26b_1RC1:1.3
	PreRelease_26b_i0e:1.3
	before_26d_merge:1.3
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.23
date	2007.12.16.21.38.00;	author aw3;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.22.03.44.59;	author aw3;	state Exp;
branches;
next	1.21;

1.21
date	2005.08.04.03.20.09;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2005.06.05.19.52.53;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2005.02.04.09.38.19;	author kuchin;	state Exp;
branches;
next	1.18;

1.18
date	2004.02.09.02.31.48;	author netwolf1;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.06.17.47.01;	author netwolf1;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.07.21.07.32;	author eklmn;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.24.01.21.19;	author morevit;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.22.16.04.27;	author morevit;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.19.00.13.37;	author morevit;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.17.13.15.04;	author puritynn666;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.25.22.43.32;	author partyckip;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.06.00.42.42;	author syrus77;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.05.20.49.51;	author syrus77;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.20.20.46.27;	author netwolf1;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.06.21.17.15;	author partyckip;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.09.19.10.30;	author dongato;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.14.15.59.54;	author partyckip;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2003.03.01.14.46.56;	author dongato;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.15.15.44.49;	author lord_kiron;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2003.02.15.15.36.24;	author lord_kiron;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.20;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.14;	author cax2;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.01.20.59.35;	author obaldin;	state Exp;
branches;
next	;

1.5.4.1
date	2003.03.23.06.22.02;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Suppressed level 4 warnings; Formatting.
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#pragma once

#include "KnownFile.h"
#ifndef NEW_SOCKETS_ENGINE
#include "emule.h"
#endif //NEW_SOCKETS_ENGINE
#include "Loggable.h"

class CKnownFileList : public CArray<CKnownFile*, CKnownFile*>, public CLoggable
{
	friend class CSharedFilesWnd;
	friend class CFileStatistic;
public:
	CMutex		m_mutexList;

	CKnownFileList(const CString& in_appdir);
	~CKnownFileList();
	void	SafeAddKnownFile(CKnownFile* toadd);
	bool	Init();
	bool Load();
	void	Save();
	void	Clear();
	CKnownFile*	FindKnownFile(const CString &strFileName, uint32 dwDate, uint64 qwSize);
	CKnownFile* FindKnownFileByID(const uchar* hash);	//SyruS show completed files (0.28b)
	uint32	GetTotalRequested() {return m_iNumRequested;}
	bool merge();
	bool RemoveFile(CKnownFile* toRemove);

private:	
	bool SavePartTraffic();
	bool LoadPartTraffic();
	bool SavePartPrio();
	bool LoadPartPrio();
	CString m_strFilesPath;	
	CString m_strTrafficPath;	
	CString m_strPartPermissionsPath;

	uint64	m_qwNumTransferred;
	uint16	m_iNumRequested;
	uint16	m_iNumAccepted;
	bool	m_bInSave;
};
@


1.22
log
@Large file size support preparations.
@
text
@d55 1
a56 1
	uint64	m_iNumTransferred;
@


1.21
log
@Removed double #include of afxmt.h (once in stdafx.h is enough).
@
text
@d26 1
a26 2
class CKnownFileList : public CArray<CKnownFile*,CKnownFile*>, 
					   public CLoggable
d40 1
a40 1
	CKnownFile*	FindKnownFile(const CString& filename,uint32 in_date,uint32 in_size);
@


1.20
log
@Removed unused code.
@
text
@a17 1

a20 1
#include <afxmt.h>
@


1.19
log
@More ifdefs for v2
@
text
@a44 1
	bool	IsKnownFile(void* pToTest);
@


1.18
log
@BUGFIX: proper display of auto priorized Jumpstart files + FEATURE: display known unshared files in different color (in Search window)
@
text
@d23 1
d25 1
@


1.17
log
@show remaining files to be hashed counter in shared files window + appropriate string change if Known files are shown + minor cleanup
@
text
@d42 1
a42 1
	CKnownFile* FindKnownFileByID(uchar* hash);	//SyruS show completed files (0.28b)
@


1.16
log
@some steps to improve stability by loading of "known.met"
@
text
@d44 1
a44 6
	uint32	GetTotalRequested() {return m_iNumRequested;} // Tarod (herbert code)
	//--- xrmb:statsautosave ---
	void	Process();
	//--- :xrmb ---

	//--- xrmb:allyaknow ---
a46 1
	//--- :xrmb ---
a48 1
	//--- xrmb:parttraffic ---
a50 3
	//--- :xrmb ---

	//--- xrmb:partprio ---
a52 5
	//--- :xrmb ---

	//--- xrmb:statsautosave ---
	//DWORD lastsaved;
	//--- :xrmb ---	
@


1.15
log
@Formatting, comments, and name changes.
@
text
@d38 1
@


1.14
log
@Formatting, comments, and name changes.
@
text
@d36 1
a36 1
	void	SafeAddKFile(CKnownFile* toadd);
@


1.13
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@d27 1
a27 1
						public CLoggable
d32 2
d43 1
a43 2
	CMutex	list_mut;
	uint32	GetTotalRequested() {return requested;} // Tarod (herbert code)
d67 8
a74 8
	CString filesFilePath;	
	CString trafficFilePath;	
	CString partPermissionFilePath;

	uint16	requested;
	uint64	transferred;
	uint16	accepted;
	bool m_bInSave;
@


1.12
log
@latest mobile mule changes + some additional webserver stuff (see changelog)
@
text
@d71 1
a71 1
	uint64	transfered;
@


1.11
log
@unicode cleanup
@
text
@d40 1
@


1.10
log
@WebServer: clear all or single completed files [SyruS]
@
text
@d38 1
a38 1
	CKnownFile*	FindKnownFile(char* filename,uint32 in_date,uint32 in_size);
@


1.9
log
@WebServer: show completed files (0.28b) [SuruS]
@
text
@d39 1
a39 1
	CKnownFile* FindKnownFileByID(uchar* hash);	//SuruS show completed files (0.28b)
@


1.8
log
@minor fixes and improvements
@
text
@d39 1
@


1.7
log
@code cleanup
@
text
@d69 1
a69 1
	uint32	transfered;
@


1.6
log
@Updated version to 1e, removed DonkeyDoctor broken support and added again TwoBottleMOD code with a fix.
@
text
@d32 1
a32 1
	CKnownFileList(char* in_appdir);
d50 1
a50 1
private:
d63 5
a67 2
	//--- :xrmb ---
	char*	appdir;
@


1.5
log
@converted to new logging method
@
text
@d34 1
a34 1
	void   SafeAddKFile(CKnownFile* toadd, bool updateKnownMet = false); // DonkeyDoctor
@


1.5.4.1
log
@27a partial merge
@
text
@d66 1
a66 1
	uint64 transferred;
@


1.4
log
@xrmb updated code for Part Traffic (not the last one).
@
text
@d24 1
d26 2
a27 1
class CKnownFileList : public CArray<CKnownFile*,CKnownFile*>
@


1.3
log
@*** empty log message ***
@
text
@d49 10
@


1.3.2.1
log
@keeping in sync with the main cvs line
@
text
@a48 10
	//--- xrmb:parttraffic ---
	bool SavePartTraffic();
	bool LoadPartTraffic();
	//--- :xrmb ---

	//--- xrmb:partprio ---
	bool SavePartPrio();
	bool LoadPartPrio();
	//--- :xrmb ---

@


1.2
log
@*** empty log message ***
@
text
@d56 1
@


1.1
log
@*** empty log message ***
@
text
@d50 1
a50 1
	DWORD lastsaved;
@


1.1.4.1
log
@updating this branch...
@
text
@@

