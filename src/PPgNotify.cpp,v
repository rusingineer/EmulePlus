head	1.22;
access;
symbols
	PublicRelease_1_2e:1.22
	Interim_Release_1-2e_RC1:1.22
	PublicRelease_1_2d:1.22
	Interim_Release_1-2d_RC1:1.21
	Interim_Release_1-2d_beta1:1.20
	PublicRelease_1_2c:1.19
	Interim_Release_1-2c_RC1:1.19
	Interim_Release_1-2c_beta1:1.18
	PublicRelease_1_2b:1.18
	Interim_Release_1-2b_RC1:1.18
	PublicRelease_1_2a:1.18
	Interim_Release_1-2a_RC1:1.18
	Interim_Release_1-2a_beta2:1.18
	Interim_Release_1-2a_beta1:1.18
	PublicRelease_1_2:1.18
	Interim_Release_1-2_RC1:1.18
	Interim_Release_1-2_beta1:1.18
	PublicRelease_1_1g:1.18
	Interim_Release_1-1g_RC3:1.18
	Interim_Release_1-1g_RC2:1.18
	Interim_Release_1-1g_RC1:1.18
	Interim_Release_1-1g_beta2:1.16
	Interim_Release_1-1g_beta1:1.16
	PublicRelease_1_1f:1.16
	Interim_Release_1-1f_RC1:1.16
	PublicRelease_1_1e:1.16
	Interim_Release_1-1e_RC2:1.16
	Interim_Release_1-1e_RC1:1.16
	Interim_Release_1-1e_beta1:1.16
	PublicRelease_1_1d:1.16
	Interim_Release_1-1d_RC1:1.16
	PublicRelease_1_1c:1.16
	Interim_Release_1-1c_RC1:1.16
	Interim_Release_1-1c_beta2:1.16
	Interim_Release_1-1c_beta1:1.16
	PublicRelease_1_1b:1.16
	Interim_Release_1-1b_RC1:1.16
	PublicRelease_1_1a:1.16
	Interim_Release_1-1a_RC2:1.16
	Interim_Release_1-1a_RC1:1.16
	Interim_Release_1-1a_beta2:1.16
	Interim_Release_1-1a_beta1:1.16
	PublicRelease_1_1:1.16
	Interim_Release_1-1_beta1:1.16
	PublicRelease_1o:1.16
	Interim_Release_1o_RC1:1.16
	Interim_Release_1o_beta1:1.16
	PublicRelease_1n:1.16
	Interim_Release_1n_RC2:1.16
	Interim_Release_1n_RC1:1.16
	Interim_Release_1n_beta2:1.16
	Interim_Release_1n_beta1:1.16
	PublicRelease_1m:1.16
	Interim_Release_1m_beta1:1.16
	PublicRelease_1l:1.15
	Interim_Release_1l_RC3:1.15
	Interim_Release_1l_RC2:1.15
	Interim_Release_1l_RC1:1.15
	Interim_Release_1l_beta2:1.15
	Interim_Release_1l_beta1:1.15
	PublicRelease_1k:1.15
	Interim_Release_1k_RC4:1.15
	Interim_1k_RC3:1.15
	Interim_1k_RC2:1.15
	Interim_Release_1k_RC1:1.15
	Interim_Release_1k_beta5:1.15
	Intrerim_Release_1k_beta4:1.15
	Interim_Release_1k_beta1:1.15
	PublicRelease_1j:1.15
	Interim_Release_1J_RC3:1.15
	Interim_Release_1j_RC3:1.15
	Interim_Release_1j_RC2:1.15
	Interim_Release_1j_RC1:1.15
	Interim_Release_1j_beta2:1.15
	Interim_Release_1j_beta1:1.15
	PublicRelease_1i:1.15
	Interim_Release_1i_RC6:1.15
	Interim_Release_1i_RC3:1.14
	Interim_Release_1i_RC2:1.14
	Interim_Release_1i_RC1:1.14
	Interim_Release_1i_beta3:1.14
	Interim_Release_1i_beta2:1.14
	Interim_Release_1i_beta1:1.14
	PublicRelease_1h:1.12
	Interim_Release_1h_rc2:1.12
	Interim_Release_1h_RC1:1.12
	Interim_Release_1h_beta2:1.12
	Interim_Release_1h_beta1_now:1.10
	Interim_Release_1h_beta1:1.10
	PublicRelease_1g:1.7
	Interim_Release_1g_RC6_Final:1.7
	Interim_Release_1g_RC6:1.7
	Interim_Release_1g_RC5:1.7
	Interim_Release_1g_RC4:1.7
	Interim_Release_1g_RC3:1.7
	Interim_Release_1g_beta2:1.6
	Interim_Release_1g_beta1:1.6
	Interim_Release_1f_RC4:1.5
	Interim_Release_1f_RC3:1.5
	Interim_Release_1f_RC2:1.5
	Interim_Release_1f_RC:1.5
	Interim_Release_1f_beta2:1.5
	Interim_Release_1f_beta1:1.5
	PublicRelease_1e:1.5
	Interim_Release_1e_RC2:1.5
	Interim_Release_1e_RC:1.5
	Interim_Release_1e_beta3:1.5
	Interim_Release_1e_beta2:1.5
	Interim_Release_1e_beta2_before_kuchin:1.5
	Interim_Release_1e_beta1:1.5
	PublicRelease_1c:1.5
	featurestest:1.5.0.6
	Interim_Release_1c_RC:1.5
	Interim_Release_1c_beta2:1.5
	Interim_Release_1c_beta1:1.5
	threaded_downloadqueue:1.5.0.4
	PublicRelease_1b:1.5
	Interim_Release_1b_beta2:1.5
	Interim_Release_1b_beta1:1.5
	proxydeadlake:1.5.0.2
	PublicRelease_1a:1.5
	Interim_Release_1a_beta2:1.5
	BerkeleyDb:1.4.0.2
	Interim_Release_1a_beta1:1.3
	PublicRelease_1:1.3
	goldfish:1.3
	eMulePlus_1_RC2:1.3
	eMulePlus_26b_1RC1:1.3
	PreRelease_26b_i0e:1.3
	before_26d_merge:1.3
	Interim_Release_26b_i0d:1.2
	Interim_Release_26b_i0c:1.2
	Interim_Release_26b_i0b:1.2
	Interim_Release_26b_i0a:1.2
	systraydlg:1.2.0.4
	plus26based:1.2.0.2
	Interim_Release_25b_i0b:1.2
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.22
date	2008.04.28.04.19.16;	author aw3;	state Exp;
branches;
next	1.21;

1.21
date	2008.03.02.14.14.03;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.06.05.26.31;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2007.04.02.23.14.14;	author kush_eplus;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.27.22.11.48;	author eklmn;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.16;

1.16
date	2004.06.19.05.34.24;	author aw3;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.02.04.33.14;	author katsyonak;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.22.16.40.49;	author morevit;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.20.15.39.31;	author morevit;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.23.13.10.55;	author forcha;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.21.20.39.10;	author partyckip;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.31.15.02.19;	author puritynn666;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.29.19.21.12;	author dongato;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.28.13.25.33;	author dongato;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.14.18.08.22;	author partyckip;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.01.10.08.44;	author partyckip;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.26.10.39.54;	author dongato;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.24.20.09.47;	author dongato;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2003.02.16.22.01.48;	author lord_kiron;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.02.13.27.42;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.21;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.22;	author cax2;	state Exp;
branches;
next	;

1.4.2.1
date	2003.02.28.22.44.55;	author obaldin;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Fixed applying of some preferences settings when several are altered at once {Vladimir (SV)} (directory browse was undoing other changes);
Wav setting browsing was applied right away -- not after pressing Apply.
@
text
@//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "PPgNotify.h"
#include "AddBuddy.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNAMIC(CPPgNotify, CPropertyPage)
CPPgNotify::CPPgNotify()
	: CPropertyPage(CPPgNotify::IDD)
	, m_bUseSound(FALSE)
	, m_bOnLog(FALSE)
	, m_bOnChat(FALSE)
	, m_bOnChatMessage(FALSE)
	, m_bOnDownloadAdded(FALSE)
	, m_bOnDownloadFinished(FALSE)
	, m_bUseScheduler(FALSE)
	, m_bOnWebServer(FALSE)
	, m_bOnImportant(FALSE)
	, m_bOnServerError(FALSE)
{
}

CPPgNotify::~CPPgNotify()
{
}

void CPPgNotify::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Check(pDX, IDC_CB_TBN_USESOUND, m_bUseSound);
	DDX_Check(pDX, IDC_CB_TBN_ONLOG, m_bOnLog);
	DDX_Check(pDX, IDC_CB_TBN_ONCHAT, m_bOnChat);
	DDX_Check(pDX, IDC_CB_TBN_POP_ALWAYS, m_bOnChatMessage);
	DDX_Check(pDX, IDC_CB_TBN_ONDOWNLOADADD, m_bOnDownloadAdded);
	DDX_Check(pDX, IDC_CB_TBN_ONDOWNLOAD, m_bOnDownloadFinished);
	DDX_Check(pDX, IDC_CB_TBN_USESCHEDULER, m_bUseScheduler);
	DDX_Check(pDX, IDC_CB_TBN_WEBSERVER, m_bOnWebServer);
	DDX_Check(pDX, IDC_CB_TBN_IMPORTANT, m_bOnImportant);
	DDX_Check(pDX, IDC_CB_TBN_SERVER, m_bOnServerError);
	DDX_Text(pDX, IDC_EDIT_TBN_WAVFILE, m_strWavFileName);	
	DDX_Control(pDX, IDC_COMBO_TBN_DTIME, m_DtimeCombo);
	DDX_Control(pDX, IDC_COMBO_TBN_FSIZE, m_FsizeCombo);
	DDX_Control(pDX, IDC_EDIT_TBN_WAVFILE, m_WavFileNameEdit);
	DDX_Control(pDX, IDC_BTN_BROWSE_WAV, m_WavFileNameButton);
}

BEGIN_MESSAGE_MAP(CPPgNotify, CPropertyPage)
	ON_BN_CLICKED(IDC_CB_TBN_USESOUND, OnBnClickedCbTbnUsesound)
	ON_BN_CLICKED(IDC_CB_TBN_ONLOG, OnSettingsChange)
	ON_BN_CLICKED(IDC_CB_TBN_ONCHAT, OnBnClickedCbTbnOnchat)
	ON_BN_CLICKED(IDC_CB_TBN_POP_ALWAYS, OnSettingsChange)
	ON_BN_CLICKED(IDC_CB_TBN_ONDOWNLOADADD, OnSettingsChange)
	ON_BN_CLICKED(IDC_CB_TBN_ONDOWNLOAD, OnSettingsChange)
	ON_BN_CLICKED(IDC_CB_TBN_IMPORTANT, OnSettingsChange)
	ON_BN_CLICKED(IDC_CB_TBN_WEBSERVER, OnSettingsChange)
	ON_BN_CLICKED(IDC_CB_TBN_SERVER, OnSettingsChange)
	ON_BN_CLICKED(IDC_CB_TBN_USESCHEDULER, OnSettingsChange)
	ON_BN_CLICKED(IDC_BTN_BROWSE_WAV, OnBnClickedBtnBrowseWav)
	ON_CBN_SELCHANGE(IDC_COMBO_TBN_DTIME, OnSettingsChange)
	ON_CBN_SELCHANGE(IDC_COMBO_TBN_FSIZE, OnSettingsChange)
	ON_EN_CHANGE(IDC_EDIT_TBN_WAVFILE, OnSettingsChange)
END_MESSAGE_MAP()

BOOL CPPgNotify::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	m_DtimeCombo.SetItemData(m_DtimeCombo.AddString(_T("1")), 1000);
	m_DtimeCombo.SetItemData(m_DtimeCombo.AddString(_T("2")), 2000);
	m_DtimeCombo.SetItemData(m_DtimeCombo.AddString(_T("3")), 3000);
	m_DtimeCombo.SetItemData(m_DtimeCombo.AddString(_T("4")), 4000);
	m_DtimeCombo.SetItemData(m_DtimeCombo.AddString(_T("5")), 5000);
	m_DtimeCombo.SetItemData(m_DtimeCombo.AddString(_T("6")), 6000);
	m_DtimeCombo.SetItemData(m_DtimeCombo.AddString(_T("7")), 7000);
	m_DtimeCombo.SetItemData(m_DtimeCombo.AddString(_T("8")), 8000);
	m_DtimeCombo.SetItemData(m_DtimeCombo.AddString(_T("9")), 9000);

	m_FsizeCombo.SetItemData(m_FsizeCombo.AddString(_T("7")), 70);
	m_FsizeCombo.SetItemData(m_FsizeCombo.AddString(_T("8")), 80);
	m_FsizeCombo.SetItemData(m_FsizeCombo.AddString(_T("9")), 90);
	m_FsizeCombo.SetItemData(m_FsizeCombo.AddString(_T("10")), 100);

	AddBuddy(m_WavFileNameEdit.m_hWnd, m_WavFileNameButton.m_hWnd, BDS_RIGHT);

	LoadSettings();
	Localize();

	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
}

void CPPgNotify::LoadSettings(void)
{
	if(::IsWindow(m_hWnd))
	{
		m_bOnDownloadAdded = m_pPrefs->GetUseDownloadAddNotifier();
		m_bOnDownloadFinished = m_pPrefs->GetUseDownloadNotifier();
		m_bOnChat = m_pPrefs->GetUseChatNotifier();
		m_bUseSound = m_pPrefs->GetUseSoundInNotifier();
		m_bOnLog = m_pPrefs->GetUseLogNotifier();
		m_bUseScheduler = m_pPrefs->GetUseSchedulerNotifier();
		m_bOnChatMessage = m_pPrefs->GetNotifierPopsEveryChatMsg();
		m_bOnImportant = m_pPrefs->GetNotifierPopOnImportantError();
		m_bOnWebServer = m_pPrefs->GetNotifierPopOnWebServerError();
		m_bOnServerError = m_pPrefs->GetNotifierPopOnServerError();
		m_strWavFileName = m_pPrefs->GetNotifierWavSoundPath();

		GetDlgItem(IDC_CB_TBN_POP_ALWAYS)->EnableWindow(m_bOnChat);

		for(int i = 0; i != m_DtimeCombo.GetCount(); i++)
			if (m_DtimeCombo.GetItemData(i) == m_pPrefs->NotificationDisplayTime())
				m_DtimeCombo.SetCurSel(i);

		for(int i = 0; i != m_FsizeCombo.GetCount(); i++)
			if (m_FsizeCombo.GetItemData(i) == m_pPrefs->NotificationFontSize())
				m_FsizeCombo.SetCurSel(i);

		UpdateData(FALSE);

		OnBnClickedCbTbnUsesound();
	}

	SetModified(FALSE);
}

BOOL CPPgNotify::OnApply()
{
	if(m_bModified)
	{
		int	iVal;

		UpdateData(TRUE);

		m_pPrefs->SetUseDownloadAddNotifier(B2b(m_bOnDownloadAdded));
		m_pPrefs->SetUseDownloadNotifier(B2b(m_bOnDownloadFinished));
		m_pPrefs->SetUseChatNotifier(B2b(m_bOnChat));
		m_pPrefs->SetUseLogNotifier(B2b(m_bOnLog));
		m_pPrefs->SetUseSoundInNotifier(B2b(m_bUseSound));
		m_pPrefs->SetUseSchedulerNotifier(B2b(m_bUseScheduler));
		m_pPrefs->SetNotifierPopsEveryChatMsg(B2b(m_bOnChatMessage));
		m_pPrefs->SetNotifierPopOnImportantError(B2b(m_bOnImportant));
		m_pPrefs->SetNotifierPopOnWebServerError(B2b(m_bOnWebServer));
		m_pPrefs->SetNotifierPopOnServerError(B2b(m_bOnServerError));
		m_pPrefs->SetNotifierWavSoundPath(m_strWavFileName);

		if ((iVal = m_DtimeCombo.GetCurSel()) != CB_ERR)
			m_pPrefs->SetNotificationDisplayTime(m_DtimeCombo.GetItemData(iVal));

		if ((iVal = m_FsizeCombo.GetCurSel()) != CB_ERR)
			m_pPrefs->SetNotificationFontSize(m_FsizeCombo.GetItemData(iVal));

		((CEmuleDlg*)AfxGetMainWnd())->m_wndTaskbarNotifier.SetTextFont( _T("Arial"),
			g_App.m_pPrefs->NotificationFontSize(), TN_TEXT_NORMAL,
			TN_TEXT_UNDERLINE ); // Popup properties

		SetModified(FALSE);
	}

	return CPropertyPage::OnApply();
}

void CPPgNotify::Localize(void)
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_CB_TBN_USESOUND, IDS_PW_TBN_USESOUND },
		{ IDC_CB_TBN_ONLOG, IDS_PW_TBN_ONLOG },
		{ IDC_CB_TBN_ONCHAT, IDS_PW_TBN_ONCHAT },
		{ IDC_CB_TBN_POP_ALWAYS, IDS_PW_TBN_POP_ALWAYS },
		{ IDC_CB_TBN_ONDOWNLOADADD, IDS_PW_TBN_ONDOWNLOADADD },
		{ IDC_CB_TBN_ONDOWNLOAD, IDS_PW_TBN_ONDOWNLOAD },
		{ IDC_CB_TBN_IMPORTANT, IDS_PS_TBN_IMPORTANT },
		{ IDC_CB_TBN_WEBSERVER, IDS_PS_TBN_WEBSERVER },
		{ IDC_CB_TBN_SERVER, IDS_PS_TBN_SERVER },
		{ IDC_CB_TBN_USESCHEDULER, IDS_PW_TBN_USESCHEDULER },
		{ IDC_TBN_WARNING, IDS_PW_TBN_WARNING },
		{ IDC_TBN_OPTIONS, IDS_PW_TBN_OPTIONS },
		{ IDC_TBN_PROPERTIES, IDS_TBN_PROPERTIES },
		{ IDC_CB_TBN_DTIME, IDS_CB_TBN_DTIME },
		{ IDC_CB_TBN_FSIZE, IDS_CB_TBN_FSIZE },
		{ IDC_CB_TBN_SEC, IDS_SECS }
	};

	if (::IsWindow(m_hWnd))
	{
		CString	strRes;

		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl[i][1]));
			SetDlgItemText(s_auResTbl[i][0], strRes);
		}
	}
}

void CPPgNotify::OnBnClickedCbTbnOnchat()
{
	UpdateData(TRUE);
	GetDlgItem(IDC_CB_TBN_POP_ALWAYS)->EnableWindow(m_bOnChat);

	SetModified();
}

void CPPgNotify::OnBnClickedBtnBrowseWav()
{
	UpdateData(TRUE);
	if (DialogBrowseFile(m_strWavFileName, _T("Audio-Wav (*.wav)|*.wav||"), NULL, OFN_FILEMUSTEXIST))
	{
		UpdateData(FALSE);
		SetModified();
	}
}

void CPPgNotify::OnBnClickedCbTbnUsesound()
{
	UpdateData(TRUE);
	m_WavFileNameEdit.EnableWindow(m_bUseSound);
	m_WavFileNameButton.EnableWindow(m_bUseSound);

	SetModified();
}
@


1.21
log
@Selected file for reading should exist - let open dialog verify that (skin, WS templates, notify wav, antivirus exe).
@
text
@d225 1
a227 1
		m_pPrefs->SetNotifierWavSoundPath(m_strWavFileName);
a228 1

@


1.20
log
@Optimized dialog regarding required memory and speed;
Removed old not used localization; Suppressed compiler warnings; Formatting.
@
text
@d225 1
a225 1
	if (DialogBrowseFile(m_strWavFileName, _T("Audio-Wav (*.wav)|*.wav||")))
@


1.19
log
@Removed unneeded CString initializations.
@
text
@d14 1
d29 10
a38 10
	, useSound(FALSE)
	, onLog(FALSE)
	, onChat(FALSE)
	, onChatMessage(FALSE)
	, onDownloadAdded(FALSE)
	, onDownloadFinished(FALSE)
	, useScheduler(FALSE)
	, onWebServer(FALSE)
	, onImportant(FALSE)
	, onServerError(FALSE)
a39 2
	LoadSettings();
	Localize();
d49 15
a63 31
	DDX_Check(pDX, IDC_CB_TBN_USESOUND, useSound);
	DDX_Check(pDX, IDC_CB_TBN_ONLOG, onLog);
	DDX_Check(pDX, IDC_CB_TBN_ONCHAT, onChat);
	DDX_Check(pDX, IDC_CB_TBN_POP_ALWAYS, onChatMessage);
	DDX_Check(pDX, IDC_CB_TBN_ONDOWNLOADADD, onDownloadAdded);
	DDX_Check(pDX, IDC_CB_TBN_ONDOWNLOAD, onDownloadFinished);
	DDX_Check(pDX, IDC_CB_TBN_USESCHEDULER, useScheduler);
	DDX_Check(pDX, IDC_CB_TBN_WEBSERVER, onWebServer);
	DDX_Check(pDX, IDC_CB_TBN_IMPORTANT, onImportant);
	DDX_Check(pDX, IDC_CB_TBN_SERVER, onServerError);
	DDX_Text(pDX, IDC_EDIT_TBN_WAVFILE, wavFileName);	
	DDX_Control(pDX, IDC_COMBO_TBN_DTIME, dtimeCombo);
	DDX_Control(pDX, IDC_COMBO_TBN_FSIZE, fsizeCombo);
	DDX_Control(pDX, IDC_CB_TBN_USESOUND, useSoundCheck);
	DDX_Control(pDX, IDC_CB_TBN_ONLOG, onLogCheck);
	DDX_Control(pDX, IDC_CB_TBN_ONCHAT, onChatCheck);
	DDX_Control(pDX, IDC_CB_TBN_POP_ALWAYS, onChatMessageCheck);
	DDX_Control(pDX, IDC_CB_TBN_ONDOWNLOADADD, onDownloadAddedCheck);
	DDX_Control(pDX, IDC_CB_TBN_ONDOWNLOAD, onDownloadFinishedCheck);
	DDX_Control(pDX, IDC_CB_TBN_USESCHEDULER, useSchedulerCheck);
	DDX_Control(pDX, IDC_CB_TBN_WEBSERVER, onWebServerCheck);
	DDX_Control(pDX, IDC_CB_TBN_IMPORTANT, onImportantCheck);
	DDX_Control(pDX, IDC_CB_TBN_SERVER, onServerErrorCheck);
	DDX_Text(pDX, IDC_TBN_WARNING, warningDesc);
	DDX_Text(pDX, IDC_TBN_OPTIONS, optionsDesc);
	DDX_Text(pDX, IDC_TBN_PROPERTIES, propertiesDesc);
	DDX_Text(pDX, IDC_CB_TBN_DTIME, displayTimeDesc);
	DDX_Text(pDX, IDC_CB_TBN_FSIZE, fontSizeDesc);
	DDX_Text(pDX, IDC_CB_TBN_SEC, secDesc);
	DDX_Control(pDX, IDC_EDIT_TBN_WAVFILE, wavFileNameEdit);
	DDX_Control(pDX, IDC_BTN_BROWSE_WAV, wavFileNameButton);
d68 1
a68 1
	ON_BN_CLICKED(IDC_CB_TBN_ONLOG, OnBnClickedCbTbnOnlog)
d70 7
a76 7
	ON_BN_CLICKED(IDC_CB_TBN_POP_ALWAYS, OnBnClickedCbTbnPopAlways)
	ON_BN_CLICKED(IDC_CB_TBN_ONDOWNLOADADD, OnBnClickedCbTbnOndownloadAdd)
	ON_BN_CLICKED(IDC_CB_TBN_ONDOWNLOAD, OnBnClickedCbTbnOndownload)
	ON_BN_CLICKED(IDC_CB_TBN_IMPORTANT, OnBnClickedCbTbnImportant)
	ON_BN_CLICKED(IDC_CB_TBN_WEBSERVER, OnBnClickedCbTbnWebServer)
	ON_BN_CLICKED(IDC_CB_TBN_SERVER, OnBnClickedCbTbnServer)
	ON_BN_CLICKED(IDC_CB_TBN_USESCHEDULER, OnBnClickedCbTbnUseScheduler)
d78 3
a80 3
	ON_CBN_SELCHANGE(IDC_COMBO_TBN_DTIME, OnCbnSelchangeDtime)
	ON_CBN_SELCHANGE(IDC_COMBO_TBN_FSIZE, OnCbnSelchangeFsize)
	ON_EN_CHANGE(IDC_EDIT_TBN_WAVFILE, OnEnChangeEditTbnWavfile)
d87 14
a100 14
	dtimeCombo.SetItemData(dtimeCombo.AddString(_T("1")),1000);
	dtimeCombo.SetItemData(dtimeCombo.AddString(_T("2")),2000);
	dtimeCombo.SetItemData(dtimeCombo.AddString(_T("3")),3000);
	dtimeCombo.SetItemData(dtimeCombo.AddString(_T("4")),4000);
	dtimeCombo.SetItemData(dtimeCombo.AddString(_T("5")),5000);
	dtimeCombo.SetItemData(dtimeCombo.AddString(_T("6")),6000);
	dtimeCombo.SetItemData(dtimeCombo.AddString(_T("7")),7000);
	dtimeCombo.SetItemData(dtimeCombo.AddString(_T("8")),8000);
	dtimeCombo.SetItemData(dtimeCombo.AddString(_T("9")),9000);

	fsizeCombo.SetItemData(fsizeCombo.AddString(_T("7")),70);
	fsizeCombo.SetItemData(fsizeCombo.AddString(_T("8")),80);
	fsizeCombo.SetItemData(fsizeCombo.AddString(_T("9")),90);
	fsizeCombo.SetItemData(fsizeCombo.AddString(_T("10")),100);
d102 1
a102 1
	AddBuddy(wavFileNameEdit.m_hWnd, wavFileNameButton.m_hWnd, BDS_RIGHT);
d115 21
a135 21
		onDownloadAdded = m_pPrefs->GetUseDownloadAddNotifier();
		onDownloadFinished = m_pPrefs->GetUseDownloadNotifier();		
		onChat = m_pPrefs->GetUseChatNotifier();
		useSound = m_pPrefs->GetUseSoundInNotifier();
		onLog = m_pPrefs->GetUseLogNotifier();
		useScheduler = m_pPrefs->GetUseSchedulerNotifier();
		onChatMessage = m_pPrefs->GetNotifierPopsEveryChatMsg();
		onImportant = m_pPrefs->GetNotifierPopOnImportantError();
		onWebServer = m_pPrefs->GetNotifierPopOnWebServerError();
		onServerError = m_pPrefs->GetNotifierPopOnServerError();
		wavFileName = m_pPrefs->GetNotifierWavSoundPath();
				
		onChatMessageCheck.EnableWindow(onChat);

		for(int i = 0; i != dtimeCombo.GetCount(); i++)
			if(dtimeCombo.GetItemData(i) == m_pPrefs->NotificationDisplayTime())
				dtimeCombo.SetCurSel(i);

		for(int i = 0; i != fsizeCombo.GetCount(); i++)
			if(fsizeCombo.GetItemData(i) == m_pPrefs->NotificationFontSize())
				fsizeCombo.SetCurSel(i);
d145 1
a145 1
BOOL CPPgNotify::OnApply() 
d147 1
a147 1
    if(m_bModified)
d149 2
d152 23
a174 24
	    
		m_pPrefs->SetUseDownloadAddNotifier(onDownloadAdded);
		m_pPrefs->SetUseDownloadNotifier(onDownloadFinished);
	   	m_pPrefs->SetUseChatNotifier(onChat);
    	m_pPrefs->SetUseLogNotifier(onLog);        
    	m_pPrefs->SetUseSoundInNotifier(useSound);
    	m_pPrefs->SetUseSchedulerNotifier(useScheduler);
    	m_pPrefs->SetNotifierPopsEveryChatMsg(onChatMessage);
		m_pPrefs->SetNotifierPopOnImportantError(onImportant);
		m_pPrefs->SetNotifierPopOnWebServerError(onWebServer);
		m_pPrefs->SetNotifierPopOnServerError(onServerError);    	
		m_pPrefs->SetNotifierWavSoundPath(wavFileName);
	
		if (dtimeCombo.GetCurSel() != CB_ERR)
		{
			m_pPrefs->SetNotificationDisplayTime(dtimeCombo.GetItemData(dtimeCombo.GetCurSel()));
		}
		if (fsizeCombo.GetCurSel() != CB_ERR)
		{
			m_pPrefs->SetNotificationFontSize(fsizeCombo.GetItemData(fsizeCombo.GetCurSel()));
		}
	
		((CEmuleDlg*)AfxGetMainWnd())->m_wndTaskbarNotifier.SetTextFont(_T("Arial"),g_App.m_pPrefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE); // Popup porperties [DonGato]
	
d183 1
a183 1
	if(::IsWindow(m_hWnd))
d185 17
a201 1
		SetWindowText(GetResString(IDS_PW_EKDEV_OPTIONS));
d203 3
a205 16
		useSoundCheck.SetWindowText(GetResString(IDS_PW_TBN_USESOUND));
		onLogCheck.SetWindowText(GetResString(IDS_PW_TBN_ONLOG));
		onChatCheck.SetWindowText(GetResString(IDS_PW_TBN_ONCHAT));
		onChatMessageCheck.SetWindowText(GetResString(IDS_PW_TBN_POP_ALWAYS));
		onDownloadAddedCheck.SetWindowText(GetResString(IDS_PW_TBN_ONDOWNLOADADD));
		onDownloadFinishedCheck.SetWindowText(GetResString(IDS_PW_TBN_ONDOWNLOAD));
		onImportantCheck.SetWindowText(GetResString(IDS_PS_TBN_IMPORTANT));
		onWebServerCheck.SetWindowText(GetResString(IDS_PS_TBN_WEBSERVER));
		onServerErrorCheck.SetWindowText(GetResString(IDS_PS_TBN_SERVER));
		useSchedulerCheck.SetWindowText(GetResString(IDS_PW_TBN_USESCHEDULER));		
		GetResString(&warningDesc, IDS_PW_TBN_WARNING);
		GetResString(&optionsDesc, IDS_PW_TBN_OPTIONS);
		GetResString(&propertiesDesc, IDS_TBN_PROPERTIES);
		GetResString(&displayTimeDesc, IDS_CB_TBN_DTIME);
		GetResString(&fontSizeDesc, IDS_CB_TBN_FSIZE);
		GetResString(&secDesc, IDS_SECS);
d207 5
a211 1
		UpdateData(FALSE);
d217 2
a218 2
    UpdateData(TRUE);
    onChatMessageCheck.EnableWindow(onChat);	
d225 1
a225 1
    if (DialogBrowseFile(wavFileName, _T("Audio-Wav (*.wav)|*.wav||")))
d227 1
a227 1
		m_pPrefs->SetNotifierWavSoundPath(wavFileName);
d237 2
a238 2
	wavFileNameEdit.EnableWindow(useSound);
	wavFileNameButton.EnableWindow(useSound);
@


1.18
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@a37 7
	, wavFileName(_T(""))
	, warningDesc(_T(""))
	, optionsDesc(_T(""))
	, propertiesDesc(_T(""))
	, displayTimeDesc(_T(""))
	, fontSizeDesc(_T(""))
	, secDesc(_T(""))
@


1.17
log
@renamed 3 variables
@
text
@d196 1
a196 1
		((CEmuleDlg*)AfxGetMainWnd())->m_wndTaskbarNotifier.SetTextFont(_T("Arial"),g_App.g_pPrefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE); // Popup porperties [DonGato]
@


1.16
log
@Improved preferences localization.
@
text
@d196 1
a196 1
		((CEmuleDlg*)AfxGetMainWnd())->m_wndTaskbarNotifier.SetTextFont(_T("Arial"),g_eMuleApp.m_pGlobPrefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE); // Popup porperties [DonGato]
@


1.15
log
@Formatting + minor changes
@
text
@d220 6
a225 6
		warningDesc = GetResString(IDS_PW_TBN_WARNING);
		optionsDesc = GetResString(IDS_PW_TBN_OPTIONS);
		propertiesDesc = GetResString(IDS_TBN_PROPERTIES);
		displayTimeDesc = GetResString(IDS_CB_TBN_DTIME);
		fontSizeDesc = GetResString(IDS_CB_TBN_FSIZE);
		secDesc = GetResString(IDS_SECS);
@


1.14
log
@Formatting, comments, and name changes.
@
text
@d68 2
a69 2
	DDX_Control(pDX, IDC_COMBO_TBN_DTIME, dtimeCombo); // DonGato
	DDX_Control(pDX, IDC_COMBO_TBN_FSIZE, fsizeCombo); // DonGato
a110 1
	// DonGato
a120 1
	// DonGato
d187 2
a188 1
		if (dtimeCombo.GetCurSel() != CB_ERR){
d191 2
a192 1
		if (fsizeCombo.GetCurSel() != CB_ERR){
a230 8
CString CPPgNotify::DialogBrowseFile(const CString& Filters, CString DefaultFileName)
{
        CFileDialog myFileDialog(true,NULL,DefaultFileName,
                OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, Filters);
        myFileDialog.DoModal();
        return myFileDialog.GetPathName();
}

d241 4
a244 2
	wavFileName = DialogBrowseFile(_T("File wav (*.wav)|*.wav||"));
	m_pPrefs->SetNotifierWavSoundPath(wavFileName);
d246 2
a247 3
	UpdateData(FALSE);

	SetModified();
@


1.13
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d141 11
a151 11
		onDownloadAdded = app_prefs->GetUseDownloadAddNotifier();
		onDownloadFinished = app_prefs->GetUseDownloadNotifier();		
		onChat = app_prefs->GetUseChatNotifier();
		useSound = app_prefs->GetUseSoundInNotifier();
		onLog = app_prefs->GetUseLogNotifier();
		useScheduler = app_prefs->GetUseSchedulerNotifier();
		onChatMessage = app_prefs->GetNotifierPopsEveryChatMsg();
		onImportant = app_prefs->GetNotifierPopOnImportantError();
		onWebServer = app_prefs->GetNotifierPopOnWebServerError();
		onServerError = app_prefs->GetNotifierPopOnServerError();
		wavFileName = app_prefs->GetNotifierWavSoundPath();
d156 1
a156 1
			if(dtimeCombo.GetItemData(i) == app_prefs->NotificationDisplayTime())
d160 1
a160 1
			if(fsizeCombo.GetItemData(i) == app_prefs->NotificationFontSize())
d177 11
a187 11
		app_prefs->SetUseDownloadAddNotifier(onDownloadAdded);
		app_prefs->SetUseDownloadNotifier(onDownloadFinished);
	   	app_prefs->SetUseChatNotifier(onChat);
    	app_prefs->SetUseLogNotifier(onLog);        
    	app_prefs->SetUseSoundInNotifier(useSound);
    	app_prefs->SetUseSchedulerNotifier(useScheduler);
    	app_prefs->SetNotifierPopsEveryChatMsg(onChatMessage);
		app_prefs->SetNotifierPopOnImportantError(onImportant);
		app_prefs->SetNotifierPopOnWebServerError(onWebServer);
		app_prefs->SetNotifierPopOnServerError(onServerError);    	
		app_prefs->SetNotifierWavSoundPath(wavFileName);
d190 1
a190 1
			app_prefs->SetNotificationDisplayTime(dtimeCombo.GetItemData(dtimeCombo.GetCurSel()));
d193 1
a193 1
			app_prefs->SetNotificationFontSize(fsizeCombo.GetItemData(fsizeCombo.GetCurSel()));
d250 1
a250 1
	app_prefs->SetNotifierWavSoundPath(wavFileName);
@


1.12
log
@bugfix
@
text
@d196 1
a196 1
		((CemuleDlg*)AfxGetMainWnd())->m_wndTaskbarNotifier.SetTextFont(_T("Arial"),theApp.glob_prefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE); // Popup porperties [DonGato]
@


1.11
log
@converted to use DDX framework
@
text
@d17 1
d127 2
@


1.10
log
@eMailNotifier and PopUp CleanUp
@
text
@d27 17
d56 31
a86 2
	DDX_Control(pDX, IDC_COMBO_TBN_DTIME, m_dtime); // DonGato
	DDX_Control(pDX, IDC_COMBO_TBN_FSIZE, m_fsize); // DonGato
d111 9
a119 9
	m_dtime.SetItemData(m_dtime.AddString(_T("1")),1000);
	m_dtime.SetItemData(m_dtime.AddString(_T("2")),2000);
	m_dtime.SetItemData(m_dtime.AddString(_T("3")),3000);
	m_dtime.SetItemData(m_dtime.AddString(_T("4")),4000);
	m_dtime.SetItemData(m_dtime.AddString(_T("5")),5000);
	m_dtime.SetItemData(m_dtime.AddString(_T("6")),6000);
	m_dtime.SetItemData(m_dtime.AddString(_T("7")),7000);
	m_dtime.SetItemData(m_dtime.AddString(_T("8")),8000);
	m_dtime.SetItemData(m_dtime.AddString(_T("9")),9000);
d122 4
a125 4
	m_fsize.SetItemData(m_fsize.AddString(_T("7")),70);
	m_fsize.SetItemData(m_fsize.AddString(_T("8")),80);
	m_fsize.SetItemData(m_fsize.AddString(_T("9")),90);
	m_fsize.SetItemData(m_fsize.AddString(_T("10")),100);
d136 23
a158 2
	CEdit* editPtr;
	CButton* btnPTR;
d160 1
a160 36
	if(m_hWnd)
	{
		if (app_prefs->GetUseDownloadAddNotifier())
				CheckDlgButton(IDC_CB_TBN_ONDOWNLOADADD, BST_CHECKED);
		if (app_prefs->GetUseDownloadNotifier())
				CheckDlgButton(IDC_CB_TBN_ONDOWNLOAD, BST_CHECKED);
		if (app_prefs->GetUseChatNotifier())
				CheckDlgButton(IDC_CB_TBN_ONCHAT, BST_CHECKED);
		if (app_prefs->GetUseSoundInNotifier())
				CheckDlgButton(IDC_CB_TBN_USESOUND, BST_CHECKED);
		if (app_prefs->GetUseLogNotifier())
				CheckDlgButton(IDC_CB_TBN_ONLOG, BST_CHECKED);
		if (app_prefs->GetUseSchedulerNotifier())
				CheckDlgButton(IDC_CB_TBN_USESCHEDULER, BST_CHECKED);
		if (app_prefs->GetNotifierPopsEveryChatMsg())
				CheckDlgButton(IDC_CB_TBN_POP_ALWAYS, BST_CHECKED);
		if (app_prefs->GetNotifierPopOnImportantError())
			CheckDlgButton(IDC_CB_TBN_IMPORTANT, BST_CHECKED);
		if (app_prefs->GetNotifierPopOnWebServerError())
			CheckDlgButton(IDC_CB_TBN_WEBSERVER, BST_CHECKED);
		if (app_prefs->GetNotifierPopOnServerError())
			CheckDlgButton(IDC_CB_TBN_SERVER, BST_CHECKED);

		btnPTR = (CButton*) GetDlgItem(IDC_CB_TBN_POP_ALWAYS);
		btnPTR->EnableWindow(IsDlgButtonChecked(IDC_CB_TBN_ONCHAT));

		editPtr = (CEdit*) GetDlgItem(IDC_EDIT_TBN_WAVFILE);
		editPtr->SetWindowText(app_prefs->GetNotifierWavSoundPath());

		for(int i = 0; i != m_dtime.GetCount(); i++)
			if(m_dtime.GetItemData(i) == app_prefs->NotificationDisplayTime())
				m_dtime.SetCurSel(i);

		for(int i = 0; i != m_fsize.GetCount(); i++)
			if(m_fsize.GetItemData(i) == app_prefs->NotificationFontSize())
				m_fsize.SetCurSel(i);
a169 2
//	CSingleLock PrefLock(&(app_prefs->m_Pref_Mutex),TRUE); 

d172 13
a184 16
	    CEdit* editPTR;
		CString buffer;
		app_prefs->SetUseDownloadAddNotifier(IsDlgButtonChecked(IDC_CB_TBN_ONDOWNLOADADD));
		app_prefs->SetUseDownloadNotifier(IsDlgButtonChecked(IDC_CB_TBN_ONDOWNLOAD));
	   	app_prefs->SetUseChatNotifier(IsDlgButtonChecked(IDC_CB_TBN_ONCHAT));
    	app_prefs->SetUseLogNotifier(IsDlgButtonChecked(IDC_CB_TBN_ONLOG));        
    	app_prefs->SetUseSoundInNotifier(IsDlgButtonChecked(IDC_CB_TBN_USESOUND));
    	app_prefs->SetUseSchedulerNotifier(IsDlgButtonChecked(IDC_CB_TBN_USESCHEDULER));
    	app_prefs->SetNotifierPopsEveryChatMsg(IsDlgButtonChecked(IDC_CB_TBN_POP_ALWAYS));
		app_prefs->SetNotifierPopOnImportantError(IsDlgButtonChecked(IDC_CB_TBN_IMPORTANT));
		app_prefs->SetNotifierPopOnWebServerError(IsDlgButtonChecked(IDC_CB_TBN_WEBSERVER));
		app_prefs->SetNotifierPopOnServerError(IsDlgButtonChecked(IDC_CB_TBN_SERVER));
	
    	editPTR = (CEdit*) GetDlgItem(IDC_EDIT_TBN_WAVFILE);
		editPTR->GetWindowText(buffer);
		app_prefs->SetNotifierWavSoundPath(buffer);
d186 2
a187 2
		if (m_dtime.GetCurSel() != CB_ERR){
			app_prefs->SetNotificationDisplayTime(m_dtime.GetItemData(m_dtime.GetCurSel()));
d189 2
a190 2
		if (m_fsize.GetCurSel() != CB_ERR){
			app_prefs->SetNotificationFontSize(m_fsize.GetItemData(m_fsize.GetCurSel()));
d203 2
a204 1
	if(m_hWnd){
d206 19
a224 17
		GetDlgItem(IDC_CB_TBN_USESOUND)->SetWindowText(GetResString(IDS_PW_TBN_USESOUND));
		GetDlgItem(IDC_CB_TBN_ONLOG)->SetWindowText(GetResString(IDS_PW_TBN_ONLOG));
		GetDlgItem(IDC_CB_TBN_ONCHAT)->SetWindowText(GetResString(IDS_PW_TBN_ONCHAT));
		GetDlgItem(IDC_CB_TBN_POP_ALWAYS)->SetWindowText(GetResString(IDS_PW_TBN_POP_ALWAYS));
		GetDlgItem(IDC_CB_TBN_ONDOWNLOADADD)->SetWindowText(GetResString(IDS_PW_TBN_ONDOWNLOADADD));
		GetDlgItem(IDC_CB_TBN_ONDOWNLOAD)->SetWindowText(GetResString(IDS_PW_TBN_ONDOWNLOAD));
		GetDlgItem(IDC_CB_TBN_IMPORTANT)->SetWindowText(GetResString(IDS_PS_TBN_IMPORTANT));
		GetDlgItem(IDC_CB_TBN_WEBSERVER)->SetWindowText(GetResString(IDS_PS_TBN_WEBSERVER));
		GetDlgItem(IDC_CB_TBN_SERVER)->SetWindowText(GetResString(IDS_PS_TBN_SERVER));
		GetDlgItem(IDC_CB_TBN_USESCHEDULER)->SetWindowText(GetResString(IDS_PW_TBN_USESCHEDULER));
		GetDlgItem(IDC_TBN_WARNING)->SetWindowText(GetResString(IDS_PW_TBN_WARNING));

		GetDlgItem(IDC_TBN_OPTIONS)->SetWindowText(GetResString(IDS_PW_TBN_OPTIONS));
		GetDlgItem(IDC_TBN_PROPERTIES)->SetWindowText(GetResString(IDS_TBN_PROPERTIES));
		GetDlgItem(IDC_CB_TBN_DTIME)->SetWindowText(GetResString(IDS_CB_TBN_DTIME));
		GetDlgItem(IDC_CB_TBN_FSIZE)->SetWindowText(GetResString(IDS_CB_TBN_FSIZE));
		GetDlgItem(IDC_CB_TBN_SEC)->SetWindowText(GetResString(IDS_SECS));
d228 1
a228 1
CString CPPgNotify::DialogBrowseFile(CString Filters, CString DefaultFileName)
d230 2
a231 2
        CFileDialog myFileDialog(true,NULL,LPCTSTR(DefaultFileName),
                OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, LPCTSTR(Filters));
d238 2
a239 3
    CButton* btnPTR;
    btnPTR = (CButton*) GetDlgItem(IDC_CB_TBN_POP_ALWAYS);
    btnPTR->EnableWindow(IsDlgButtonChecked(IDC_CB_TBN_ONCHAT));	
d246 2
a247 1
//	CSingleLock PrefLock(&(app_prefs->m_Pref_Mutex),TRUE); 
d249 1
a249 6
    CEdit* editPTR;
	CString buffer;
    buffer = DialogBrowseFile(_T("File wav (*.wav)|*.wav||"));
    editPTR = (CEdit*) GetDlgItem(IDC_EDIT_TBN_WAVFILE);
    editPTR->SetWindowText(LPCTSTR(buffer));
	app_prefs->SetNotifierWavSoundPath(buffer);
d256 3
a258 2
	GetDlgItem(IDC_EDIT_TBN_WAVFILE)->EnableWindow(IsDlgButtonChecked(IDC_CB_TBN_USESOUND));
	GetDlgItem(IDC_BTN_BROWSE_WAV)->EnableWindow(IsDlgButtonChecked(IDC_CB_TBN_USESOUND));
@


1.9
log
@Updated notifications (for eMail alerts feature compatibility).
@
text
@d53 1
d105 2
d149 1
d187 1
@


1.8
log
@Updated dialogs
@
text
@d51 2
d93 2
a94 2
	{                   
		if (app_prefs->GetUseDownloadAddNotifier()) 
d96 1
a96 1
		if (app_prefs->GetUseDownloadNotifier()) 
d98 1
a98 1
		if (app_prefs->GetUseChatNotifier())  
d106 1
a106 1
		if (app_prefs->GetNotifierPopOnImportantError()) 
d108 4
d148 2
d181 3
d187 3
a189 3
		GetDlgItem(IDC_CB_TBN_DTIME)->SetWindowText(GetResString(IDS_CB_TBN_DTIME)); // DonGato
		GetDlgItem(IDC_CB_TBN_FSIZE)->SetWindowText(GetResString(IDS_CB_TBN_FSIZE)); // DonGato
		GetDlgItem(IDC_CB_TBN_SEC)->SetWindowText(GetResString(IDS_SECS)); // DonGato
@


1.7
log
@unicode cleanup
@
text
@a166 1
		GetDlgItem(IDC_BTN_BROWSE_WAV)->SetWindowText(GetResString(IDS_PW_BROWSE));
@


1.6
log
@code cleanup
@
text
@d62 9
a70 9
	m_dtime.SetItemData(m_dtime.AddString("1"),1000);
	m_dtime.SetItemData(m_dtime.AddString("2"),2000);
	m_dtime.SetItemData(m_dtime.AddString("3"),3000);
	m_dtime.SetItemData(m_dtime.AddString("4"),4000);
	m_dtime.SetItemData(m_dtime.AddString("5"),5000);
	m_dtime.SetItemData(m_dtime.AddString("6"),6000);
	m_dtime.SetItemData(m_dtime.AddString("7"),7000);
	m_dtime.SetItemData(m_dtime.AddString("8"),8000);
	m_dtime.SetItemData(m_dtime.AddString("9"),9000);
d73 4
a76 4
	m_fsize.SetItemData(m_fsize.AddString("7"),70);
	m_fsize.SetItemData(m_fsize.AddString("8"),80);
	m_fsize.SetItemData(m_fsize.AddString("9"),90);
	m_fsize.SetItemData(m_fsize.AddString("10"),100);
d154 1
a154 1
		((CemuleDlg*)AfxGetMainWnd())->m_wndTaskbarNotifier.SetTextFont("Arial",theApp.glob_prefs->NotificationFontSize(),TN_TEXT_NORMAL,TN_TEXT_UNDERLINE); // Popup porperties [DonGato]
d206 1
a206 1
    buffer = DialogBrowseFile("File wav (*.wav)|*.wav||");
@


1.5
log
@Changed placement of banned users message.
@
text
@a144 1
		//sprintf(app_prefs->prefs->notifierSoundFilePath,"%s",buffer);
a208 1
	//sprintf(app_prefs->prefs->notifierSoundFilePath,"%s",buffer); // Added by enkeyDEV
@


1.4
log
@Banning Message, A4AF customization, AutoPriority fix, Static Servers fix, .dat/.bin Preview
@
text
@a54 1
	ON_BN_CLICKED(IDC_BANMESSAGE, OnBnClickedBanMessageEnabled)
a105 2
		if (app_prefs->IsBanMessageEnabled()) 
			CheckDlgButton(IDC_BANMESSAGE, BST_CHECKED);
a141 1
		app_prefs->SetBanMessageEnabled(IsDlgButtonChecked(IDC_BANMESSAGE));
a174 1
		GetDlgItem(IDC_BANMESSAGE)->SetWindowText(GetResString(IDS_BANMESSAGE));
@


1.4.2.1
log
@v1a upgrade
@
text
@d55 1
d107 2
d145 1
d179 1
@


1.3
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d52 2
a53 2
	ON_CBN_SELCHANGE(IDC_COMBO_TBN_DTIME, OnCbnSelchangeDtime) // DonGato
	ON_CBN_SELCHANGE(IDC_COMBO_TBN_FSIZE, OnCbnSelchangeFsize) // DonGato
d55 1
d107 2
a115 1
		 // DonGato
d127 1
a127 1
	SetModified(FALSE);	// FoRcHa
d145 1
a151 1
		// DonGato
d179 1
@


1.2
log
@Removed SingleLock - no need there.
@
text
@d18 5
@


1.1
log
@*** empty log message ***
@
text
@d125 1
a125 1
	CSingleLock PrefLock(&(app_prefs->m_Pref_Mutex),TRUE); 
d200 1
a200 1
	CSingleLock PrefLock(&(app_prefs->m_Pref_Mutex),TRUE); 
@


1.1.4.1
log
@updating this branch...
@
text
@@

