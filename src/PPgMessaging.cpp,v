head	1.11;
access;
symbols
	PublicRelease_1_2e:1.11
	Interim_Release_1-2e_RC1:1.11
	PublicRelease_1_2d:1.11
	Interim_Release_1-2d_RC1:1.11
	Interim_Release_1-2d_beta1:1.11
	PublicRelease_1_2c:1.10
	Interim_Release_1-2c_RC1:1.10
	Interim_Release_1-2c_beta1:1.9
	PublicRelease_1_2b:1.9
	Interim_Release_1-2b_RC1:1.9
	PublicRelease_1_2a:1.9
	Interim_Release_1-2a_RC1:1.9
	Interim_Release_1-2a_beta2:1.9
	Interim_Release_1-2a_beta1:1.9
	PublicRelease_1_2:1.9
	Interim_Release_1-2_RC1:1.9
	Interim_Release_1-2_beta1:1.9
	PublicRelease_1_1g:1.9
	Interim_Release_1-1g_RC3:1.9
	Interim_Release_1-1g_RC2:1.9
	Interim_Release_1-1g_RC1:1.9
	Interim_Release_1-1g_beta2:1.9
	Interim_Release_1-1g_beta1:1.9
	PublicRelease_1_1f:1.8
	Interim_Release_1-1f_RC1:1.8
	PublicRelease_1_1e:1.8
	Interim_Release_1-1e_RC2:1.8
	Interim_Release_1-1e_RC1:1.8
	Interim_Release_1-1e_beta1:1.8
	PublicRelease_1_1d:1.8
	Interim_Release_1-1d_RC1:1.8
	PublicRelease_1_1c:1.8
	Interim_Release_1-1c_RC1:1.8
	Interim_Release_1-1c_beta2:1.8
	Interim_Release_1-1c_beta1:1.8
	PublicRelease_1_1b:1.8
	Interim_Release_1-1b_RC1:1.8
	PublicRelease_1_1a:1.8
	Interim_Release_1-1a_RC2:1.8
	Interim_Release_1-1a_RC1:1.8
	Interim_Release_1-1a_beta2:1.8
	Interim_Release_1-1a_beta1:1.8
	PublicRelease_1_1:1.8
	Interim_Release_1-1_beta1:1.8
	PublicRelease_1o:1.8
	Interim_Release_1o_RC1:1.8
	Interim_Release_1o_beta1:1.8
	PublicRelease_1n:1.8
	Interim_Release_1n_RC2:1.8
	Interim_Release_1n_RC1:1.8
	Interim_Release_1n_beta2:1.8
	Interim_Release_1n_beta1:1.8
	PublicRelease_1m:1.7
	Interim_Release_1m_beta1:1.7
	PublicRelease_1l:1.6
	Interim_Release_1l_RC3:1.6
	Interim_Release_1l_RC2:1.6
	Interim_Release_1l_RC1:1.6
	Interim_Release_1l_beta2:1.6
	Interim_Release_1l_beta1:1.6
	PublicRelease_1k:1.6
	Interim_Release_1k_RC4:1.6
	Interim_1k_RC3:1.6
	Interim_1k_RC2:1.6
	Interim_Release_1k_RC1:1.6
	Interim_Release_1k_beta5:1.6
	Intrerim_Release_1k_beta4:1.6
	Interim_Release_1k_beta1:1.6
	PublicRelease_1j:1.6
	Interim_Release_1J_RC3:1.6
	Interim_Release_1j_RC3:1.6
	Interim_Release_1j_RC2:1.6
	Interim_Release_1j_RC1:1.6
	Interim_Release_1j_beta2:1.6
	Interim_Release_1j_beta1:1.6
	PublicRelease_1i:1.6
	Interim_Release_1i_RC6:1.6
	Interim_Release_1i_RC3:1.6
	Interim_Release_1i_RC2:1.6
	Interim_Release_1i_RC1:1.6
	Interim_Release_1i_beta3:1.6
	Interim_Release_1i_beta2:1.6
	Interim_Release_1i_beta1:1.6
	PublicRelease_1h:1.5
	Interim_Release_1h_rc2:1.5
	Interim_Release_1h_RC1:1.5
	Interim_Release_1h_beta2:1.5
	Interim_Release_1h_beta1_now:1.4
	Interim_Release_1h_beta1:1.4
	PublicRelease_1g:1.3
	Interim_Release_1g_RC6_Final:1.3
	Interim_Release_1g_RC6:1.3
	Interim_Release_1g_RC5:1.3
	Interim_Release_1g_RC4:1.3
	Interim_Release_1g_RC3:1.3
	Interim_Release_1g_beta2:1.2
	Interim_Release_1g_beta1:1.2
	Interim_Release_1f_RC4:1.2
	Interim_Release_1f_RC3:1.1
	Interim_Release_1f_RC2:1.1
	Interim_Release_1f_RC:1.1
	Interim_Release_1f_beta2:1.1
	Interim_Release_1f_beta1:1.1
	PublicRelease_1e:1.1
	Interim_Release_1e_RC2:1.1
	Interim_Release_1e_RC:1.1
	Interim_Release_1e_beta3:1.1
	Interim_Release_1e_beta2:1.1
	Interim_Release_1e_beta2_before_kuchin:1.1
	Interim_Release_1e_beta1:1.1
	PublicRelease_1c:1.1
	featurestest:1.1.0.4
	Interim_Release_1c_RC:1.1
	Interim_Release_1c_beta2:1.1
	Interim_Release_1c_beta1:1.1
	threaded_downloadqueue:1.1.0.2
	PublicRelease_1b:1.1
	Interim_Release_1b_beta2:1.1;
locks; strict;
comment	@// @;


1.11
date	2008.01.02.04.34.16;	author aw3;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.02.23.14.14;	author kush_eplus;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.20.04.33.13;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.04.14.42.16;	author katsyonak;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.18.17.08.24;	author aw3;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.22.16.40.49;	author morevit;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.20.18.21.22;	author dongato;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.04.05.09.49;	author partyckip;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.14.00.48.56;	author netwolf1;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.25.01.12.05;	author syrus77;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.08.12.09.42;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Optimized dialog regarding required memory and speed; Suppressed compiler warnings;
Removed old not used localization.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "PPgMessaging.h"

IMPLEMENT_DYNAMIC(CPPgMessaging, CPropertyPage)

CPPgMessaging::CPPgMessaging()
	: CPropertyPage(CPPgMessaging::IDD)
	, m_iAcceptMessages(0)
	, m_bPutMeInAwayState(FALSE)
{	
}

CPPgMessaging::~CPPgMessaging()
{}

void CPPgMessaging::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Radio(pDX, IDC_RB_IM_FROMALLUSERS, m_iAcceptMessages);
	DDX_Check(pDX, IDC_CB_IM_PUTMEAWAY, m_bPutMeInAwayState);
	DDX_Text(pDX, IDC_EDIT_IM_AWAYMESSAGE, m_strAwayMessage);
	DDX_Text(pDX, IDC_FILTER, m_strMsgFilter);
	DDX_Text(pDX, IDC_FILTER2, m_strCommentFilter);
}

void CPPgMessaging::Localize(void)
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_GB_IM_ACCEPT, IDS_PW_IM_ACCEPT },
		{ IDC_GB_IM_OTHER, IDS_PW_IM_OTHER },
		{ IDC_RB_IM_FROMALLUSERS, IDS_PW_IM_FROMALLUSERS },
		{ IDC_RB_IM_ONLYFROMFRIENDS, IDS_PW_IM_ONLYFROMFRIENDS },
		{ IDC_RB_IM_ONLYFROMFRIENDS2, IDS_PW_IM_ONLYFROMFRIENDS2 },
		{ IDC_RB_IM_FROMNONE, IDS_PW_IM_FROMNONE },
		{ IDC_CB_IM_PUTMEAWAY, IDS_PW_IM_PUTMEAWAY },
		{ IDC_LBL_IM_AWAYMESSAGE, IDS_PW_IM_AWAYMESSAGE },
		{ IDC_FILTERLABEL, IDS_FILTERLABEL },
		{ IDC_MSG, IDS_MESSAGES },
		{ IDC_FILTERLABEL2, IDS_FILTERLABEL2 },
		{ IDC_CMT, IDS_COMMENTS }
	};

	if (::IsWindow(m_hWnd))
	{
		CString	strRes;

		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl[i][1]));
			SetDlgItemText(s_auResTbl[i][0], strRes);
		}
	}
}

void CPPgMessaging::LoadSettings(void)
{
	m_iAcceptMessages = m_pPrefs->GetAcceptMessagesFrom() - 1;
	m_bPutMeInAwayState = m_pPrefs->GetAwayState();
	m_strAwayMessage = m_pPrefs->GetAwayStateMessage();
	GetDlgItem(IDC_EDIT_IM_AWAYMESSAGE)->EnableWindow(m_bPutMeInAwayState);
	m_strMsgFilter = m_pPrefs->GetMessageFilter();
	m_strCommentFilter = m_pPrefs->GetCommentFilter();

	UpdateData(FALSE);
}

BEGIN_MESSAGE_MAP(CPPgMessaging, CPropertyPage)
	ON_BN_CLICKED(IDC_RB_IM_FROMALLUSERS, OnSettingsChange)
	ON_BN_CLICKED(IDC_RB_IM_ONLYFROMFRIENDS, OnSettingsChange)
	ON_BN_CLICKED(IDC_RB_IM_ONLYFROMFRIENDS2, OnSettingsChange)
	ON_BN_CLICKED(IDC_RB_IM_FROMNONE, OnSettingsChange)
	ON_BN_CLICKED(IDC_CB_IM_PUTMEAWAY, OnBnClickedCbImPutmeaway)
	ON_EN_CHANGE(IDC_EDIT_IM_AWAYMESSAGE, OnSettingsChange)
	ON_EN_CHANGE(IDC_FILTER, OnSettingsChange)
	ON_EN_CHANGE(IDC_FILTER2, OnSettingsChange)
END_MESSAGE_MAP()


BOOL CPPgMessaging::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	LoadSettings();
	Localize();

	return TRUE;
}

BOOL CPPgMessaging::OnApply()
{
	if(m_bModified)
	{
		UpdateData(TRUE);

		m_pPrefs->SetAcceptMessagesFrom(m_iAcceptMessages + 1);
		m_pPrefs->SetAwayState(B2b(m_bPutMeInAwayState));
		m_pPrefs->SetAwayStateMessage(m_strAwayMessage);
		m_pPrefs->SetMessageFilter(m_strMsgFilter);
		m_pPrefs->SetCommentFilter(m_strCommentFilter);

		SetModified(FALSE);
	}
	return CPropertyPage::OnApply();
}

void CPPgMessaging::OnBnClickedCbImPutmeaway()
{
	UpdateData(TRUE);
	
	CWnd	*pWnd = GetDlgItem(IDC_EDIT_IM_AWAYMESSAGE);

	pWnd->EnableWindow(m_bPutMeInAwayState);
	if (m_bPutMeInAwayState)
		pWnd->SetFocus();
	SetModified();
}
@


1.10
log
@Removed unneeded CString initializations.
@
text
@d1 1
a1 1
// PPgMessaging.cpp : implementation file
d3 13
a20 3

// CPPgMessaging dialog

d25 2
a26 2
	, acceptMessages(0)
	, putMeInAwayState(FALSE)
d30 2
a31 2
CPPgMessaging::~CPPgMessaging() {
}
d33 2
a34 1
void CPPgMessaging::DoDataExchange(CDataExchange* pDX) {
d36 5
a40 18
	DDX_Radio(pDX, IDC_RB_IM_FROMALLUSERS, acceptMessages);
	DDX_Check(pDX, IDC_CB_IM_PUTMEAWAY, putMeInAwayState);
	DDX_Text(pDX, IDC_EDIT_IM_AWAYMESSAGE, awayMessage);
	DDX_Text(pDX, IDC_FILTER, filter);
	DDX_Text(pDX, IDC_FILTER2, commentsFilter);
	DDX_Control(pDX, IDC_EDIT_IM_AWAYMESSAGE, awayMessageEdit);
	DDX_Text(pDX, IDC_GB_IM_ACCEPT, acceptMessagesDesc);
	DDX_Text(pDX, IDC_GB_IM_OTHER, otherDesc);	
	DDX_Text(pDX, IDC_CMT, commentsDesc);
	DDX_Text(pDX, IDC_MSG, msgDesc);
	DDX_Text(pDX, IDC_FILTERLABEL2, commentsFilterDesc);
	DDX_Text(pDX, IDC_FILTERLABEL, filterDesc);
	DDX_Control(pDX, IDC_CB_IM_PUTMEAWAY, putMeAwayCheck);
	DDX_Text(pDX, IDC_LBL_IM_AWAYMESSAGE, awayMessageDesc);
	DDX_Control(pDX, IDC_RB_IM_FROMALLUSERS, fromAllUsersRadio);
	DDX_Control(pDX, IDC_RB_IM_ONLYFROMFRIENDS, onlyFromFriendsRadio);
	DDX_Control(pDX, IDC_RB_IM_ONLYFROMFRIENDS2, otherToLogRadio);
	DDX_Control(pDX, IDC_RB_IM_FROMNONE, fromNoneRadio);
d45 17
a61 1
	if(::IsWindow(m_hWnd))
d63 7
a69 14
		SetWindowText(GetResString(IDS_PW_IM_OPTIONS));
		GetResString(&acceptMessagesDesc, IDS_PW_IM_ACCEPT);
		GetResString(&otherDesc, IDS_PW_IM_OTHER);
		fromAllUsersRadio.SetWindowText(GetResString(IDS_PW_IM_FROMALLUSERS));
		onlyFromFriendsRadio.SetWindowText(GetResString(IDS_PW_IM_ONLYFROMFRIENDS));
		otherToLogRadio.SetWindowText(GetResString(IDS_PW_IM_ONLYFROMFRIENDS2));
		fromNoneRadio.SetWindowText(GetResString(IDS_PW_IM_FROMNONE));
		putMeAwayCheck.SetWindowText(GetResString(IDS_PW_IM_PUTMEAWAY));
		GetResString(&awayMessageDesc, IDS_PW_IM_AWAYMESSAGE);
		GetResString(&filterDesc, IDS_FILTERLABEL);
		GetResString(&msgDesc, IDS_MESSAGES);
		GetResString(&commentsFilterDesc, IDS_FILTERLABEL2);
		GetResString(&commentsDesc, IDS_COMMENTS);
		UpdateData(FALSE);
d73 8
a80 8
void CPPgMessaging::LoadSettings(void) {
		
	acceptMessages = m_pPrefs->GetAcceptMessagesFrom() - 1;
	putMeInAwayState = m_pPrefs->GetAwayState();				
	awayMessage = m_pPrefs->GetAwayStateMessage();
	awayMessageEdit.EnableWindow(putMeInAwayState);
	filter = m_pPrefs->GetMessageFilter();		
	commentsFilter = m_pPrefs->GetCommentFilter();
d86 4
a89 4
	ON_BN_CLICKED(IDC_RB_IM_FROMALLUSERS, OnBnClickedRbImFromallusers)
	ON_BN_CLICKED(IDC_RB_IM_ONLYFROMFRIENDS, OnBnClickedRbImOnlyfromfriends)
	ON_BN_CLICKED(IDC_RB_IM_ONLYFROMFRIENDS2, OnBnClickedRbImOnlyfromfriends2)
	ON_BN_CLICKED(IDC_RB_IM_FROMNONE, OnBnClickedRbImFromnone)
d91 3
a93 3
	ON_EN_CHANGE(IDC_EDIT_IM_AWAYMESSAGE, OnEnChangeEditImAwaymessage)
	ON_EN_CHANGE(IDC_FILTER, OnEnChangeFilter)
	ON_EN_CHANGE(IDC_FILTER2, OnEnChangeCommentsFilter)
a96 2
// CPPgMessaging message handlers

d107 2
a108 2
BOOL CPPgMessaging::OnApply() {
	
d112 6
a117 6
	
		m_pPrefs->SetAcceptMessagesFrom(acceptMessages + 1);
		m_pPrefs->SetAwayState(putMeInAwayState);	
		m_pPrefs->SetAwayStateMessage(awayMessage);	
		m_pPrefs->SetMessageFilter(filter);	
		m_pPrefs->SetCommentFilter(commentsFilter);
d124 2
a125 2
void CPPgMessaging::OnBnClickedCbImPutmeaway() {

d128 5
a132 3
	awayMessageEdit.EnableWindow(putMeInAwayState);
	if (putMeInAwayState)
		awayMessageEdit.SetFocus();
@


1.9
log
@IDS_CW_MESSAGES renamed into IDS_MESSAGES.
@
text
@d14 3
a16 12
: CPropertyPage(CPPgMessaging::IDD) , acceptMessages(0)
, putMeInAwayState(FALSE)
, awayMessage(_T(""))
, filter(_T(""))
, commentsFilter(_T(""))
, acceptMessagesDesc(_T(""))
, otherDesc(_T(""))
, commentsDesc(_T(""))
, msgDesc(_T(""))
, commentsFilterDesc(_T(""))
, filterDesc(_T(""))
, awayMessageDesc(_T(""))
@


1.8
log
@Added clickable own rating icon in shared files list
@
text
@d68 1
a68 1
		GetResString(&msgDesc, IDS_CW_MESSAGES);
@


1.7
log
@Improved preferences localization.
@
text
@a18 1
, disableRatingIcons(FALSE)
a38 1
	DDX_Check(pDX, IDC_DISABLERATINGICONS, disableRatingIcons);
a42 1
	DDX_Control(pDX, IDC_DISABLERATINGICONS, disableRatingIconsCheck);
a70 1
		disableRatingIconsCheck.SetWindowText(GetResString(IDS_DISABLERATINGICONS));
a82 1
	disableRatingIcons = m_pPrefs->GetDisableRatingIcons();
a95 1
	ON_BN_CLICKED(IDC_DISABLERATINGICONS, OnBnClickedDisableRatingIcons)
a117 1
	
a121 1
		m_pPrefs->SetDisableRatingIcons(disableRatingIcons);
@


1.6
log
@Formatting, comments, and name changes.
@
text
@d57 2
a58 1
void CPPgMessaging::Localize(void) {
d62 2
a63 2
		acceptMessagesDesc = GetResString(IDS_PW_IM_ACCEPT);
		otherDesc = GetResString(IDS_PW_IM_OTHER);
d69 5
a73 5
		awayMessageDesc = GetResString(IDS_PW_IM_AWAYMESSAGE);
		filterDesc = GetResString(IDS_FILTERLABEL);
		msgDesc = GetResString(IDS_CW_MESSAGES);
		commentsFilterDesc = GetResString(IDS_FILTERLABEL2);
		commentsDesc = GetResString(IDS_COMMENTS);
@


1.5
log
@Fixes.
@
text
@d80 3
a82 3
	acceptMessages = app_prefs->GetAcceptMessagesFrom() - 1;
	putMeInAwayState = app_prefs->GetAwayState();				
	awayMessage = app_prefs->GetAwayStateMessage();
d84 3
a86 3
	filter = app_prefs->GetMessageFilter();		
	commentsFilter = app_prefs->GetCommentFilter();
	disableRatingIcons = app_prefs->GetDisableRatingIcons();
d122 1
a122 1
		app_prefs->SetAcceptMessagesFrom(acceptMessages + 1);
d124 5
a128 5
		app_prefs->SetAwayState(putMeInAwayState);	
		app_prefs->SetAwayStateMessage(awayMessage);	
		app_prefs->SetMessageFilter(filter);	
		app_prefs->SetCommentFilter(commentsFilter);
		app_prefs->SetDisableRatingIcons(disableRatingIcons);
@


1.4
log
@converted to use DDX framework
@
text
@d98 2
@


1.3
log
@FEATURE: disable rating icons
@
text
@d12 1
d14 14
a27 3
	: CPropertyPage(CPPgMessaging::IDD) {
	LoadSettings();
	Localize();
d35 20
d58 2
a59 1
	if(m_hWnd){
d61 15
a75 14
		GetDlgItem(IDC_GB_IM_ACCEPT)->SetWindowText(GetResString(IDS_PW_IM_ACCEPT));
		GetDlgItem(IDC_GB_IM_OTHER)->SetWindowText(GetResString(IDS_PW_IM_OTHER));
		GetDlgItem(IDC_RB_IM_FROMALLUSERS)->SetWindowText(GetResString(IDS_PW_IM_FROMALLUSERS));
		GetDlgItem(IDC_RB_IM_ONLYFROMFRIENDS)->SetWindowText(GetResString(IDS_PW_IM_ONLYFROMFRIENDS));
		GetDlgItem(IDC_RB_IM_ONLYFROMFRIENDS2)->SetWindowText(GetResString(IDS_PW_IM_ONLYFROMFRIENDS2));
		GetDlgItem(IDC_RB_IM_FROMNONE)->SetWindowText(GetResString(IDS_PW_IM_FROMNONE));
		GetDlgItem(IDC_CB_IM_PUTMEAWAY)->SetWindowText(GetResString(IDS_PW_IM_PUTMEAWAY));
		GetDlgItem(IDC_LBL_IM_AWAYMESSAGE)->SetWindowText(GetResString(IDS_PW_IM_AWAYMESSAGE));
		GetDlgItem(IDC_FILTERLABEL)->SetWindowText(GetResString(IDS_FILTERLABEL));
		GetDlgItem(IDC_MSG)->SetWindowText(GetResString(IDS_CW_MESSAGES));
		GetDlgItem(IDC_FILTERLABEL2)->SetWindowText(GetResString(IDS_FILTERLABEL2));
		GetDlgItem(IDC_CMT)->SetWindowText(GetResString(IDS_COMMENTS));
		GetDlgItem(IDC_DISABLERATINGICONS)->SetWindowText(GetResString(IDS_DISABLERATINGICONS));
		}
d79 10
a88 35
	CEdit* editPtr;
	if(m_hWnd)
	{
		switch(app_prefs->GetAcceptMessagesFrom()) {
			case 1: //Accept messages from all users
				CheckDlgButton(IDC_RB_IM_FROMALLUSERS, BST_CHECKED);				
				break;
			case 2: //Accept messages from friends only
				CheckDlgButton(IDC_RB_IM_ONLYFROMFRIENDS, BST_CHECKED);
				break;
			case 3: //Accept messages from friends and put other user's messages
				    //all in one tab
				CheckDlgButton(IDC_RB_IM_ONLYFROMFRIENDS2, BST_CHECKED);
				break;
			case 4: //Accept no message
				CheckDlgButton(IDC_RB_IM_FROMNONE, BST_CHECKED);
				break;
		}//switch acceptMessagesFrom

		if (app_prefs->GetAwayState())
				CheckDlgButton(IDC_CB_IM_PUTMEAWAY, BST_CHECKED);

		editPtr = (CEdit*) GetDlgItem(IDC_EDIT_IM_AWAYMESSAGE);
		editPtr->SetWindowText(app_prefs->GetAwayStateMessage());

		editPtr->EnableWindow(IsDlgButtonChecked(IDC_CB_IM_PUTMEAWAY));

		GetDlgItem(IDC_FILTER)->SetWindowText(app_prefs->GetMessageFilter());		
		GetDlgItem(IDC_FILTER2)->SetWindowText(app_prefs->GetCommentFilter());

	if (app_prefs->GetDisableRatingIcons())
		CheckDlgButton(IDC_DISABLERATINGICONS,1);
	else
		CheckDlgButton(IDC_DISABLERATINGICONS,0);
	}
d111 1
a111 2
	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
a114 13
	CString buffer;

	if (IsDlgButtonChecked(IDC_RB_IM_FROMALLUSERS))
		app_prefs->SetAcceptMessagesFrom(1); // Accept all messages

	if (IsDlgButtonChecked(IDC_RB_IM_ONLYFROMFRIENDS))
		app_prefs->SetAcceptMessagesFrom(2); // Accept from friends

	if (IsDlgButtonChecked(IDC_RB_IM_ONLYFROMFRIENDS2))
		app_prefs->SetAcceptMessagesFrom(3); // Accept from friends and put other msg in a single tab

	if (IsDlgButtonChecked(IDC_RB_IM_FROMNONE))
		app_prefs->SetAcceptMessagesFrom(4); // Do not accept messages
d116 11
a126 4
	app_prefs->SetAwayState(IsDlgButtonChecked(IDC_CB_IM_PUTMEAWAY));

	GetDlgItem(IDC_EDIT_IM_AWAYMESSAGE)->GetWindowText(buffer);
	app_prefs->SetAwayStateMessage(buffer);
a127 7
	GetDlgItem(IDC_FILTER)->GetWindowText(buffer);
	app_prefs->SetMessageFilter(buffer);

	GetDlgItem(IDC_FILTER2)->GetWindowText(buffer);
	app_prefs->SetCommentFilter(buffer);

	app_prefs->SetDisableRatingIcons((int8)IsDlgButtonChecked(IDC_DISABLERATINGICONS));
d129 1
d134 6
a139 4
	CEdit* editPtr;
	editPtr = (CEdit*) GetDlgItem(IDC_EDIT_IM_AWAYMESSAGE);
	editPtr->EnableWindow(IsDlgButtonChecked(IDC_CB_IM_PUTMEAWAY));
	if (IsDlgButtonChecked(IDC_CB_IM_PUTMEAWAY)) editPtr->SetFocus();
@


1.2
log
@SyruS: implemented netwolf's commentfilter (partly from 0.28b)
changed default button of "allow multiple instances" to "no"
@
text
@d40 2
a41 1
	}
d74 5
d89 1
d131 3
a133 1
	SetModified(FALSE);
d143 1
a143 1
}@


1.1
log
@all my stable changes and some minor fixes (refer to changelog)
@
text
@d38 2
d72 1
d122 2
@

