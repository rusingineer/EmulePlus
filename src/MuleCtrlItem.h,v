head	1.13;
access;
symbols
	PublicRelease_1_2e:1.13
	Interim_Release_1-2e_RC1:1.13
	PublicRelease_1_2d:1.13
	Interim_Release_1-2d_RC1:1.13
	Interim_Release_1-2d_beta1:1.12
	PublicRelease_1_2c:1.11
	Interim_Release_1-2c_RC1:1.11
	Interim_Release_1-2c_beta1:1.11
	PublicRelease_1_2b:1.11
	Interim_Release_1-2b_RC1:1.11
	PublicRelease_1_2a:1.11
	Interim_Release_1-2a_RC1:1.11
	Interim_Release_1-2a_beta2:1.11
	Interim_Release_1-2a_beta1:1.11
	PublicRelease_1_2:1.11
	Interim_Release_1-2_RC1:1.11
	Interim_Release_1-2_beta1:1.11
	PublicRelease_1_1g:1.11
	Interim_Release_1-1g_RC3:1.11
	Interim_Release_1-1g_RC2:1.11
	Interim_Release_1-1g_RC1:1.11
	Interim_Release_1-1g_beta2:1.11
	Interim_Release_1-1g_beta1:1.9
	PublicRelease_1_1f:1.9
	Interim_Release_1-1f_RC1:1.9
	PublicRelease_1_1e:1.9
	Interim_Release_1-1e_RC2:1.9
	Interim_Release_1-1e_RC1:1.9
	Interim_Release_1-1e_beta1:1.9
	PublicRelease_1_1d:1.9
	Interim_Release_1-1d_RC1:1.9
	PublicRelease_1_1c:1.9
	Interim_Release_1-1c_RC1:1.9
	Interim_Release_1-1c_beta2:1.9
	Interim_Release_1-1c_beta1:1.9
	PublicRelease_1_1b:1.9
	Interim_Release_1-1b_RC1:1.9
	PublicRelease_1_1a:1.9
	Interim_Release_1-1a_RC2:1.9
	Interim_Release_1-1a_RC1:1.9
	Interim_Release_1-1a_beta2:1.9
	Interim_Release_1-1a_beta1:1.9
	PublicRelease_1_1:1.9
	Interim_Release_1-1_beta1:1.9
	PublicRelease_1o:1.9
	Interim_Release_1o_RC1:1.9
	Interim_Release_1o_beta1:1.9
	PublicRelease_1n:1.9
	Interim_Release_1n_RC2:1.9
	Interim_Release_1n_RC1:1.9
	Interim_Release_1n_beta2:1.9
	Interim_Release_1n_beta1:1.9
	PublicRelease_1m:1.9
	Interim_Release_1m_beta1:1.9
	PublicRelease_1l:1.9
	Interim_Release_1l_RC3:1.9
	Interim_Release_1l_RC2:1.9
	Interim_Release_1l_RC1:1.9
	Interim_Release_1l_beta2:1.9
	Interim_Release_1l_beta1:1.9
	PublicRelease_1k:1.9
	Interim_Release_1k_RC4:1.9
	Interim_1k_RC3:1.9
	Interim_1k_RC2:1.9
	Interim_Release_1k_RC1:1.9
	Interim_Release_1k_beta5:1.9
	Intrerim_Release_1k_beta4:1.9
	Interim_Release_1k_beta1:1.9
	PublicRelease_1j:1.8
	Interim_Release_1J_RC3:1.8
	Interim_Release_1j_RC3:1.8
	Interim_Release_1j_RC2:1.8
	Interim_Release_1j_RC1:1.8
	Interim_Release_1j_beta2:1.8
	Interim_Release_1j_beta1:1.8
	PublicRelease_1i:1.7
	Interim_Release_1i_RC6:1.7
	Interim_Release_1i_RC3:1.7
	Interim_Release_1i_RC2:1.7
	Interim_Release_1i_RC1:1.5
	Interim_Release_1i_beta3:1.5
	Interim_Release_1i_beta2:1.5;
locks; strict;
comment	@ * @;


1.13
date	2008.03.03.05.22.35;	author aw3;	state Exp;
branches;
next	1.12;

1.12
date	2007.11.12.23.52.20;	author fuxie-dk;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.29.03.35.09;	author aw3;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.17.03.43.09;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.15.03.41.59;	author kush_eplus;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.11.10.44.40;	author kuchin;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.12.13.29.16;	author kuchin;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.12.12.17.16;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.17.21.53.30;	author morevit;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.15.10.24.20;	author morevit;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.15.03.51.45;	author morevit;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.13.15.12.35;	author morevit;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.09.11.53.40;	author morevit;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Removed namespace usage.
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#pragma warning(push)
#pragma warning(disable:4702) // unreachable code
#include <map>
#include <vector>
#pragma warning(pop)

class CPartFile;
class CUpDownClient;

class CMuleCtrlItem
{
private:
	DWORD				m_dwUpdateTimer;
	CBitmap				m_bmpStatus;
	bool				m_bIsVisible;

public:
//	Constructor
						CMuleCtrlItem()
							: m_dwUpdateTimer(0), m_bIsVisible(false) {}
	virtual			   ~CMuleCtrlItem()
						{ m_bmpStatus.DeleteObject(); }

//	Accessors
	DWORD				GetUpdateTimer() const { return m_dwUpdateTimer; }
	CBitmap			   &GetBitmap() { return m_bmpStatus; }
	virtual CPartFile  *GetFile() const = 0;
	bool				IsVisible() const { return m_bIsVisible; }
	virtual void		SetVisibility(bool bIsVisible) { m_bIsVisible = bIsVisible; }

//	General methods
	virtual void		SetUpdateTimer(DWORD dwUpdate) { m_dwUpdateTimer = dwUpdate; }
	virtual void		ResetUpdateTimer() { m_dwUpdateTimer = 0; }
};

class CPartFileDLItem;

class CSourceDLItem : public CMuleCtrlItem
{
public:
	CPartFileDLItem	   *m_pParentFileItem;

private:
	CUpDownClient	   *m_pSource;

	bool				m_bIsAvailable;
	CPartFile		   *m_pParentFile;

	CPartFile		   *GetFile() const { return m_pParentFile; }


public:
	CSourceDLItem(CUpDownClient	*pSource,CPartFile *pParentFile,
		CPartFileDLItem *pParentFileItem, bool bIsAvailable = true )
		: m_pSource(pSource),m_pParentFile(pParentFile),m_pParentFileItem(pParentFileItem),
		m_bIsAvailable(bIsAvailable) {}
	~CSourceDLItem();

	CUpDownClient*		GetSource() const { return m_pSource; }

	CPartFile*			GetParentFile() const { return m_pParentFile; }
	CPartFileDLItem*	GetParentFileItem() const { return m_pParentFileItem; }
	void				SetAvailability(bool bIsAvailable) { m_bIsAvailable = bIsAvailable; }
	bool				IsAvailable() const { return m_bIsAvailable; }
	bool				IsAskedForAnotherFile() const;
};

class CPartFileDLItem : public CMuleCtrlItem
{
public:
	typedef std::vector<CSourceDLItem*>				SourceItemVector;

	struct
	{
		bool			m_bSrcsAreVisible;
		bool			m_bShowUploadingSources : 1;
		bool			m_bShowOnQueueSources : 1;
		bool			m_bShowFullQueueSources : 1;
		bool			m_bShowConnectedSources : 1;
		bool			m_bShowConnectingSources : 1;
		bool			m_bShowNNPSources : 1;
		bool			m_bShowWaitForFileReqSources : 1;
		bool			m_bShowLowToLowIDSources : 1;
		bool			m_bShowLowIDOnOtherSrvSources : 1;
		bool			m_bShowBannedSources : 1;
		bool			m_bShowErrorSources : 1;
		bool			m_bShowA4AFSources : 1;
		bool			m_bShowUnknownSources : 1;
	};

private:
	typedef map<CUpDownClient*, CSourceDLItem*>	DLSourceMap;
	typedef DLSourceMap::iterator				SourceIter;
	typedef pair<SourceIter,SourceIter>			SourceRange;

	CPartFile		   *m_pFile;
	DLSourceMap			m_mapSources;

	void				RemoveAllSources(void);

public:
						CPartFileDLItem(CPartFile *pPartFile);
	virtual			   ~CPartFileDLItem();

	CPartFile		   *GetFile() const { return m_pFile; }

	CSourceDLItem*		CreateSourceItem(CUpDownClient *pSource,bool bIsAvailable);
	bool				DeleteSourceItem(CSourceDLItem *pSourceItem);
	SourceIter			FindSourceItem(CUpDownClient *pSource) { return(m_mapSources.find(pSource)); }
	void				FilterNoSources();
	void				FilterAllSources();
	SourceItemVector   *GetSources();
};
@


1.12
log
@Suppressed compiler warnings [KuSh/Aw3].
@
text
@a16 1

d22 1
a23 3
#include <vector>

using namespace std;
a25 1

d89 1
a89 1
	typedef vector<CSourceDLItem*>				SourceItemVector;
@


1.11
log
@One more step to integrate eklmn's SSDQ.
@
text
@d20 2
d23 1
@


1.10
log
@Some eklmn's modifications.
@
text
@d103 1
@


1.9
log
@final fix for excessive resizing on column resize bug + few optimisations and formatting
@
text
@d101 1
a101 1
		bool			m_bShowTooManyConnSources : 1;
@


1.8
log
@Separating engine and GUI
@
text
@d64 1
a64 1
					   
d72 1
a72 1
	CSourceDLItem(CUpDownClient	*pSource,CPartFile *pParentFile, 
d74 1
a74 1
		: m_pSource(pSource),m_pParentFile(pParentFile),m_pParentFileItem(pParentFileItem), 
d79 1
a79 1
						
@


1.7
log
@New sockets
@
text
@a26 1
#ifdef OLD_SOCKETS_ENABLED
a27 2
#endif //OLD_SOCKETS_ENABLED

a56 4
#ifdef NEW_SOCKETS
class CEmClientData;
#endif //NEW_SOCKETS

d63 2
a64 6
#ifdef NEW_SOCKETS
	CEmClientData
#else
	CUpDownClient
#endif //NEW_SOCKETS
					   *m_pSource;
d72 2
a73 7
	CSourceDLItem( 
#ifdef NEW_SOCKETS
					CEmClientData
#else
					CUpDownClient 
#endif //NEW_SOCKETS
	*pSource,CPartFile *pParentFile, CPartFileDLItem *pParentFileItem, bool bIsAvailable = true )
d78 2
a79 6
#ifdef NEW_SOCKETS
	CEmClientData*
#else
	CUpDownClient*
#endif //NEW_SOCKETS
						GetSource() const { return m_pSource; }
a109 3
#ifdef NEW_SOCKETS
	typedef map<CEmClientData*, CSourceDLItem*>	DLSourceMap;
#else
a110 1
#endif //NEW_SOCKETS
a124 3
#ifdef NEW_SOCKETS
	CSourceDLItem*		CreateSourceItem(CEmClientData *pSource,bool bIsAvailable);
#else
a125 1
#endif //NEW_SOCKETS
a126 3
#ifdef NEW_SOCKETS
	SourceIter			FindSourceItem(CEmClientData *pSource) { return(m_mapSources.find(pSource)); }
#else
a127 1
#endif //NEW_SOCKETS
@


1.6
log
@New sockets
@
text
@d130 3
d134 1
d149 5
a153 1
	CSourceDLItem	   *CreateSourceItem(CUpDownClient *pSource,bool bIsAvailable);
d155 3
d159 1
@


1.5
log
@Added "Queue Full" and "Unknown" to source filtering.
@
text
@d26 2
d29 2
d60 4
d70 6
a75 1
	CUpDownClient	   *m_pSource;
d81 1
d83 19
a101 9
						CSourceDLItem( CUpDownClient *pSource,CPartFile *pParentFile,CPartFileDLItem *pParentFileItem,
									   bool bIsAvailable = true )
							: m_pSource(pSource),m_pParentFile(pParentFile),m_pParentFileItem(pParentFileItem),
							  m_bIsAvailable(bIsAvailable) {}
					   ~CSourceDLItem();

	CUpDownClient	   *GetSource() const { return m_pSource; }
	CPartFile		   *GetParentFile() const { return m_pParentFile; }
	CPartFileDLItem	   *GetParentFileItem() const { return m_pParentFileItem; }
@


1.4
log
@A number of robustification changes.
@
text
@d93 1
d102 1
@


1.3
log
@DownloadListCtrl rewrite.
Changed Category ID types to an enumeration.
More async update work.
The usual formatting, comments, and name changes.
@
text
@d73 1
@


1.2
log
@Started fleshing out the PartFile item and Source item classes.
@
text
@d21 1
d85 2
d123 1
@


1.1
log
@Separated CMuleCtrlItem out of DownloadListCtrl files.
@
text
@d20 4
d29 5
d36 4
a39 6
	CMuleCtrlItem(CPartFile *pFile, CMuleCtrlItem *pFileItem, CUpDownClient *pSource)
		: m_pFile(pFile), m_pFileItem(pFileItem), m_pSource(pSource), m_dwUpdateTimer(0), m_bSourceIsAvailable(false),
		  m_bSrcsAreVisible(false), m_bShowOnlySrcsUploading(false), m_bShowOnlySrcsAllowingUsInUploadQueue(false),
		  m_bShowOnlySrcsWithNeededParts(false) { }
	~CMuleCtrlItem()
		{ m_bmpStatus.DeleteObject(); }
d42 12
a53 15
	CPartFile		*GetFile() const { return m_pFile; }
	CMuleCtrlItem   *GetFileItem() const { return m_pFileItem; }
	CUpDownClient	*GetSource() const { return m_pSource; }
	bool			SourceIsAvailable() const { return m_bSourceIsAvailable; }
	DWORD			GetUpdateTimer() const { return m_dwUpdateTimer; }
	CBitmap			&GetBitmap() { return m_bmpStatus; }

	void			SetUpdateTimer(DWORD dwUpdate) { m_dwUpdateTimer = dwUpdate; }
	void			SetSourceAvailability(bool bSourceIsAvailable) { m_bSourceIsAvailable = bSourceIsAvailable; }
	void			ResetUpdateTimer() { m_dwUpdateTimer = 0; }

//	Methods
	bool			IsFile() const { return m_pSource == NULL; }
	bool			IsSource() const { return m_pSource != NULL; }
	bool			IsAskedForAnotherFile() const;
d55 2
d58 6
a63 5
// For Files ONLY
	bool			m_bSrcsAreVisible;
	bool			m_bShowOnlySrcsUploading;
	bool			m_bShowOnlySrcsAllowingUsInUploadQueue;
	bool			m_bShowOnlySrcsWithNeededParts;
d65 33
a97 2
// For Sources ONLY
	CMuleCtrlItem	*m_pFileItem;
d100 20
a119 7
	DWORD			m_dwUpdateTimer;
	CBitmap			m_bmpStatus;
	CPartFile	   *m_pFile;

//	For Sources ONLY
	CUpDownClient  *m_pSource;
	bool			m_bSourceIsAvailable;
@

