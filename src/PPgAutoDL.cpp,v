head	1.10;
access;
symbols
	PublicRelease_1_2e:1.10
	Interim_Release_1-2e_RC1:1.10
	PublicRelease_1_2d:1.9
	Interim_Release_1-2d_RC1:1.8
	Interim_Release_1-2d_beta1:1.8
	PublicRelease_1_2c:1.7
	Interim_Release_1-2c_RC1:1.7
	Interim_Release_1-2c_beta1:1.7
	PublicRelease_1_2b:1.7
	Interim_Release_1-2b_RC1:1.7
	PublicRelease_1_2a:1.7
	Interim_Release_1-2a_RC1:1.7
	Interim_Release_1-2a_beta2:1.7
	Interim_Release_1-2a_beta1:1.7
	PublicRelease_1_2:1.7
	Interim_Release_1-2_RC1:1.7
	Interim_Release_1-2_beta1:1.7
	PublicRelease_1_1g:1.6
	Interim_Release_1-1g_RC3:1.6
	Interim_Release_1-1g_RC2:1.6
	Interim_Release_1-1g_RC1:1.6
	Interim_Release_1-1g_beta2:1.5
	Interim_Release_1-1g_beta1:1.5
	PublicRelease_1_1f:1.5
	Interim_Release_1-1f_RC1:1.5
	PublicRelease_1_1e:1.5
	Interim_Release_1-1e_RC2:1.5
	Interim_Release_1-1e_RC1:1.5
	Interim_Release_1-1e_beta1:1.5
	PublicRelease_1_1d:1.5
	Interim_Release_1-1d_RC1:1.5
	PublicRelease_1_1c:1.5
	Interim_Release_1-1c_RC1:1.5
	Interim_Release_1-1c_beta2:1.3;
locks; strict;
comment	@// @;


1.10
date	2008.10.04.03.34.34;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2008.04.30.05.07.51;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.31.18.18.53;	author fuxie-dk;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.06.20.05.54;	author kush_eplus;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.20.14.59.56;	author aw3;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.20.03.37.26;	author aw3;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.13.18.40.14;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.07.18.57.10;	author aw3;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.06.17.58.11;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Renaming; Proper protection for string buffer.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "PPgAutoDL.h"
#include "AutoDL.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif


IMPLEMENT_DYNAMIC(CPPgAutoDL, CPropertyPage)

CPPgAutoDL::CPPgAutoDL()
	: CPropertyPage(CPPgAutoDL::IDD)
	, m_lInterval(0)
	, m_bAutoDLEnabled(FALSE)
{
}

CPPgAutoDL::~CPPgAutoDL()
{
}

void CPPgAutoDL::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Check(pDX, IDC_ADL_USEIT, m_bAutoDLEnabled);
	DDX_Control(pDX, IDC_ADL_LIST, m_ctrlList);
	DDX_Text(pDX, IDC_EDITINTERVAL, m_lInterval);
}

BEGIN_MESSAGE_MAP(CPPgAutoDL, CPropertyPage)
	ON_NOTIFY(LVN_ITEMCHANGED, IDC_ADL_LIST, OnLvnItemchangedList)
	ON_NOTIFY(LVN_ENDLABELEDIT, IDC_ADL_LIST, OnLvnEndlabeleditList)
	ON_BN_CLICKED(IDC_ADL_USEIT, OnBnClickedAutoDL)
	ON_BN_CLICKED(IDC_ADL_ISET, OnBnClickedSet)
	ON_BN_CLICKED(IDC_ADL_NEW, OnBnClickedNew)
	ON_BN_CLICKED(IDC_ADL_DELETE, OnBnClickedDelete)
END_MESSAGE_MAP()

BOOL CPPgAutoDL::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	CRect rect;
	m_ctrlList.GetClientRect(&rect);
	m_ctrlList.InsertColumn(0, _T(""), LVCFMT_LEFT, rect.Width() - 70);
	m_ctrlList.InsertColumn(1, _T(""), LVCFMT_RIGHT, 60);

	LoadSettings();
	Localize();

	return TRUE;
}

void CPPgAutoDL::LoadSettings(void)
{
	if(::IsWindow(m_hWnd))
	{
		CString s;

		m_bAutoDLEnabled = g_App.m_pAutoDL->UseIt;
		m_ctrlList.DeleteAllItems();
		for(int i = 0; i < g_App.m_pAutoDL->UrlCount; i++)
		{
			CAutoDLData data = g_App.m_pAutoDL->UrlItem[i];
			int nIndex = m_ctrlList.GetItemCount();
			nIndex = m_ctrlList.InsertItem(nIndex, data.acUrl);
			s.Format(_T("%ld"), data.ulInterval);
			m_ctrlList.SetItemText(nIndex, 1, s);
			m_ctrlList.SetItemData(nIndex, data.ulInterval);
		}

		UpdateData(FALSE);

		OnBnClickedAutoDL();

		SetModified(FALSE);
	}
}

BOOL CPPgAutoDL::OnApply()
{
	if(m_bModified)
	{
		UpdateData(TRUE);

		g_App.m_pAutoDL->UseIt = B2b(m_bAutoDLEnabled);
		g_App.m_pAutoDL->ClearUrlList();
		for(int i = 0; i < m_ctrlList.GetItemCount(); i++)
		{
			CAutoDLData data;
			_tcsncpy(data.acUrl, m_ctrlList.GetItemText(i, 0), DLURLMAX);
			data.acUrl[DLURLMAX - 1] = _T('\0');
			data.ulInterval = m_ctrlList.GetItemData(i);
			data.lLastCheck = 0;
			g_App.m_pAutoDL->AddUrlItem(data);
		}
		g_App.m_pAutoDL->SavePrefs();
		// Restart feature
		g_App.m_pAutoDL->Restart();

		SetModified(FALSE);
	}
	return CPropertyPage::OnApply();
}

void CPPgAutoDL::Localize(void)
{	
	static const uint16 s_auResTbl[] =
	{
		IDS_SV_URL,			//URL
		IDS_INTERVAL		//Interval
	};
	static const uint16 s_auResTbl2[][2] =
	{
		{ IDC_ADL_USEIT, IDS_ENABLED },
		{ IDC_ADL_ISET, IDS_PW_APPLY },
		{ IDC_ADL_URLS, IDS_URL_CONFIG },
		{ IDC_ADL_ITITLE, IDS_ADL_INTERVALBL },
		{ IDC_ADL_NEW, IDS_NEW_URL },
		{ IDC_ADL_DELETE, IDS_ERASE }
	};

	if(::IsWindow(m_hWnd))
	{
		CHeaderCtrl	*pHeaderCtrl = m_ctrlList.GetHeaderCtrl();
		CString		strRes;
		HDITEM		hdi;

		hdi.mask = HDI_TEXT;

		for (unsigned ui = 0; ui < ARRSIZE(s_auResTbl); ui++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl[ui]));
			hdi.pszText = const_cast<LPTSTR>(strRes.GetString());
			pHeaderCtrl->SetItem(static_cast<int>(ui), &hdi);
		}
		for (uint32 i = 0; i < ARRSIZE(s_auResTbl2); i++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl2[i][1]));
			SetDlgItemText(s_auResTbl2[i][0], strRes);
		}
	}
}

void CPPgAutoDL::OnBnClickedAutoDL()
{
	UpdateData(TRUE);

	m_ctrlList.EnableWindow(m_bAutoDLEnabled);
	GetDlgItem(IDC_EDITINTERVAL)->EnableWindow(m_bAutoDLEnabled);
	GetDlgItem(IDC_ADL_ISET)->EnableWindow(m_bAutoDLEnabled);
	GetDlgItem(IDC_ADL_NEW)->EnableWindow(m_bAutoDLEnabled);
	GetDlgItem(IDC_ADL_DELETE)->EnableWindow(m_bAutoDLEnabled);

	SetModified();
}

void CPPgAutoDL::OnLvnItemchangedList(NMHDR *pNMHDR, LRESULT *pResult)
{
	LPNMLISTVIEW pNMLV = reinterpret_cast<LPNMLISTVIEW>(pNMHDR);
	if(pNMLV->uOldState & LVIS_SELECTED)
	{
		UpdateData();
		CString s; 
		if(m_lInterval > 0)
			s.Format(_T("%ld"), m_lInterval);
		else
			s = _T("---");
		m_ctrlList.SetItemText(pNMLV->iItem, 1, s);
		m_ctrlList.SetItemData(pNMLV->iItem, m_lInterval);
		SetModified();
	}
	else if(pNMLV->uNewState & LVIS_SELECTED)
	{
		UpdateData(TRUE);
		m_lInterval = m_ctrlList.GetItemData(pNMLV->iItem);
		UpdateData(FALSE);
	}
	*pResult = 0;
}

void CPPgAutoDL::OnLvnEndlabeleditList(NMHDR *pNMHDR, LRESULT *pResult)
{
	NMLVDISPINFO *pDispInfo = reinterpret_cast<NMLVDISPINFO*>(pNMHDR);
	
	if(pDispInfo && pDispInfo->item.pszText != NULL)
		m_ctrlList.SetItemText(pDispInfo->item.iItem, 0, pDispInfo->item.pszText);

	*pResult = 0;
}

void CPPgAutoDL::OnBnClickedSet()
{
	POSITION pos = m_ctrlList.GetFirstSelectedItemPosition();
	if(pos)
	{
		UpdateData();
		int nItem = m_ctrlList.GetNextSelectedItem(pos);
		CString s; 
		if(m_lInterval > 0)
			s.Format(_T("%ld"), m_lInterval);
		else
			s = _T("---");
		m_ctrlList.SetItemText(nItem, 1, s);
		m_ctrlList.SetItemData(nItem, m_lInterval);
		SetModified();
	}
}

void CPPgAutoDL::OnBnClickedNew()
{
	int nPos = m_ctrlList.GetItemCount();
	nPos = m_ctrlList.InsertItem(nPos, _T("http://enter_your_url"));
	m_ctrlList.SetItemText(nPos, 1, _T("60"));
	m_ctrlList.SetItemData(nPos, 60);
}

void CPPgAutoDL::OnBnClickedDelete()
{
	POSITION pos = m_ctrlList.GetFirstSelectedItemPosition();
	if(pos)
	{
		int nItem = m_ctrlList.GetNextSelectedItem(pos);
		m_ctrlList.DeleteItem(nItem);
	}
}
@


1.9
log
@Removed unrequired value update on localize; Minor string optimization; Proper value update on list item click.
@
text
@d86 1
a86 1
			nIndex = m_ctrlList.InsertItem(nIndex, data.sUrl);
d111 2
a112 1
			_tcsncpy(data.sUrl, m_ctrlList.GetItemText(i, 0), DLURLMAX);
@


1.8
log
@Suppressed compiler warnings [Aw3].
@
text
@a28 2
// CPPgAutoDL dialog

d78 2
d87 1
a87 1
			CString s; s.Format(_T("%ld"), data.ulInterval);
a160 2
		
		UpdateData(FALSE);
d194 1
@


1.7
log
@UNICODE preparation (first shot)
@
text
@d1 1
a1 1
// PPgAutoDL.cpp : implementation file
d3 13
d106 1
a106 1
		g_App.m_pAutoDL->UseIt = m_bAutoDLEnabled;
d150 1
a150 1
		for (unsigned ui = 0; ui < ELEMENT_COUNT(s_auResTbl); ui++)
d156 1
a156 1
		for (uint32 i = 0; i < ELEMENT_COUNT(s_auResTbl2); i++)
@


1.6
log
@renamed 3 variables
@
text
@d140 1
a140 1
			hdi.pszText = (LPSTR)strRes.GetString();
@


1.5
log
@Removed IDS_DELETE, IDS_ERASE will be used instead (thanks n@@boleo).
@
text
@d67 1
a67 1
		m_bAutoDLEnabled = g_eMuleApp.m_pAutoDL->UseIt;
d69 1
a69 1
		for(int i = 0; i < g_eMuleApp.m_pAutoDL->UrlCount; i++)
d71 1
a71 1
			CAutoDLData data = g_eMuleApp.m_pAutoDL->UrlItem[i];
d93 2
a94 2
		g_eMuleApp.m_pAutoDL->UseIt = m_bAutoDLEnabled;
		g_eMuleApp.m_pAutoDL->ClearUrlList();
d101 1
a101 1
			g_eMuleApp.m_pAutoDL->AddUrlItem(data);
d103 1
a103 1
		g_eMuleApp.m_pAutoDL->SavePrefs();
d105 1
a105 1
		g_eMuleApp.m_pAutoDL->Restart();
@


1.4
log
@Variables renaming; Finished dialog localization.
@
text
@d126 1
a126 1
		{ IDC_ADL_DELETE, IDS_DELETE }
@


1.3
log
@AutoDL - finalization, should work now, plus set smaller font in splash/about screens so debug version can be shown correctly
@
text
@d22 2
a23 2
	, lInterval(0)
	, bAutoDLEnabled(FALSE)
d34 3
a36 3
	DDX_Check(pDX, IDC_ADL_USEIT, bAutoDLEnabled);
	DDX_Control(pDX, IDC_ADL_LIST, ctrlList);
	DDX_Text(pDX, IDC_EDITINTERVAL, lInterval);
d53 3
a55 3
	ctrlList.GetClientRect(&rect);
	ctrlList.InsertColumn(0, _T(""), LVCFMT_LEFT, rect.Width() - 70);
	ctrlList.InsertColumn(1, _T(""), LVCFMT_RIGHT, 60);
d67 2
a68 2
		bAutoDLEnabled = g_eMuleApp.m_pAutoDL->UseIt;
		ctrlList.DeleteAllItems();
d72 2
a73 2
			int nIndex = ctrlList.GetItemCount();
			nIndex = ctrlList.InsertItem(nIndex, data.sUrl);
d75 2
a76 2
			ctrlList.SetItemText(nIndex, 1, s);
			ctrlList.SetItemData(nIndex, data.ulInterval);
d93 1
a93 1
		g_eMuleApp.m_pAutoDL->UseIt = bAutoDLEnabled;
d95 1
a95 1
		for(int i = 0; i < ctrlList.GetItemCount(); i++)
d98 2
a99 2
			_tcsncpy(data.sUrl, ctrlList.GetItemText(i, 0), DLURLMAX);
			data.ulInterval = ctrlList.GetItemData(i);
a106 1
//		LoadSettings();
d123 4
a126 4
//		{ IDC_ADL_URLS,  },
//		{ IDC_ADL_ITITLE,  },
//		{ IDC_ADL_NEW,  },
//		{ IDC_ADL_DELETE,  }
d131 1
a131 1
		CHeaderCtrl	*pHeaderCtrl = ctrlList.GetHeaderCtrl();
d157 5
a161 5
	ctrlList.EnableWindow(bAutoDLEnabled);
	GetDlgItem(IDC_EDITINTERVAL)->EnableWindow(bAutoDLEnabled);
	GetDlgItem(IDC_ADL_ISET)->EnableWindow(bAutoDLEnabled);
	GetDlgItem(IDC_ADL_NEW)->EnableWindow(bAutoDLEnabled);
	GetDlgItem(IDC_ADL_DELETE)->EnableWindow(bAutoDLEnabled);
d173 2
a174 2
		if(lInterval > 0)
			s.Format(_T("%ld"), lInterval);
d177 2
a178 2
		ctrlList.SetItemText(pNMLV->iItem, 1, s);
		ctrlList.SetItemData(pNMLV->iItem, lInterval);
d183 1
a183 1
		lInterval = ctrlList.GetItemData(pNMLV->iItem);
d194 1
a194 1
		ctrlList.SetItemText(pDispInfo->item.iItem, 0, pDispInfo->item.pszText);
d201 1
a201 1
	POSITION pos = ctrlList.GetFirstSelectedItemPosition();
d205 1
a205 1
		int nItem = ctrlList.GetNextSelectedItem(pos);
d207 2
a208 2
		if(lInterval > 0)
			s.Format(_T("%ld"), lInterval);
d211 2
a212 2
		ctrlList.SetItemText(nItem, 1, s);
		ctrlList.SetItemData(nItem, lInterval);
d219 4
a222 4
	int nPos = ctrlList.GetItemCount();
	nPos = ctrlList.InsertItem(nPos, _T("http://enter_your_url"));
	ctrlList.SetItemText(nPos, 1, _T("60"));
	ctrlList.SetItemData(nPos, 60);
d227 1
a227 1
	POSITION pos = ctrlList.GetFirstSelectedItemPosition();
d230 2
a231 2
		int nItem = ctrlList.GetNextSelectedItem(pos);
		ctrlList.DeleteItem(nItem);
@


1.2
log
@Auto Download preferences page made in more common style, corrected tab order,
partial localization, working Enable control.
@
text
@d7 1
a56 8
	ctrlList.InsertItem(0, _T("http://test.com/test.xml"));
	ctrlList.SetItemText(0, 1, _T("60"));
	ctrlList.SetItemData(0, 60);

	ctrlList.InsertItem(1, _T("http://test.com/test2.xml"));
	ctrlList.SetItemText(1, 1, _T("120"));
	ctrlList.SetItemData(1, 120);

d67 11
a77 1
/*		displayPartTraffic = m_pPrefs->DoUsePT();
a78 3
		uploadBarStyle = m_pPrefs->GetUpbarStyle();
		uploadBarColor = m_pPrefs->GetUpbarColor();
*/
d93 3
a95 1
/*		if(!displayPartTraffic==m_pPrefs->DoUsePT())
d97 5
a101 5
			m_pPrefs->SetUsePT(displayPartTraffic);
			if(m_pPrefs->DoUsePT())
				g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.m_ctlSharedFilesList.ShowColumn(9);
			else
				g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.m_ctlSharedFilesList.HideColumn(9);
d103 3
d107 1
a107 9
		m_pPrefs->SetUpbarStyle(uploadBarStyle);
		m_pPrefs->SetUpbarColor(uploadBarColor);
		
		OnBnClickedAutoDL();
		
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.m_ctlSharedFilesList.SetDisplay(m_pPrefs->GetUpbarStyle(), true);
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.m_ctlSharedFilesList.SetColoring(m_pPrefs->GetUpbarColor());
*/
		LoadSettings();
d193 4
a196 1
	// TODO: Add your control notification handler code here
@


1.1
log
@AutoDL GUI preferences, to be finished
@
text
@d22 1
d33 1
d35 1
a35 1
	DDX_Text(pDX, IDC_EDIT1, lInterval);
d39 6
a44 5
ON_NOTIFY(LVN_ITEMCHANGED, IDC_ADL_LIST, OnLvnItemchangedList)
ON_NOTIFY(LVN_ENDLABELEDIT, IDC_ADL_LIST, OnLvnEndlabeleditList)
ON_BN_CLICKED(IDC_ADL_ISET, OnBnClickedSet)
ON_BN_CLICKED(IDC_ADL_NEW, OnBnClickedNew)
ON_BN_CLICKED(IDC_ADL_DELETE, OnBnClickedDelete)
d53 2
a54 2
	ctrlList.InsertColumn(0, _T("URL"), LVCFMT_LEFT, rect.Width() - 70);
	ctrlList.InsertColumn(1, _T("Interval"), LVCFMT_CENTER, 60);
d81 1
a81 1
		OnBnClickedPtUseit();
d105 1
a105 1
		OnBnClickedPtUseit();
d118 15
d135 18
a152 11
/*		displayPartTrafficCheck.SetWindowText(GetResString(IDS_PT_USEIT));
		GetResString(&upBarStDesc, IDS_UPBARST);
		upBarSt1Radio.SetWindowText(GetResString(IDS_UPBARST1));
		upBarSt2Radio.SetWindowText(GetResString(IDS_UPBARST2));
		upBarSt3Radio.SetWindowText(GetResString(IDS_UPBARST3));		
		GetResString(&upBarClDesc, IDS_UPBARCL);
		upBarCl1Radio.SetWindowText(GetResString(IDS_UPBARCL1));
		upBarCl2Radio.SetWindowText(GetResString(IDS_UPBARCL2));
		upBarCl3Radio.SetWindowText(GetResString(IDS_UPBARCL3));
		upBarCl4Radio.SetWindowText(GetResString(IDS_UPBARCL4));
*/
d157 1
a157 1
void CPPgAutoDL::OnBnClickedPtUseit()
d161 5
a165 8
/*	upBarSt1Radio.EnableWindow(displayPartTraffic);
	upBarSt2Radio.EnableWindow(displayPartTraffic);
	upBarSt3Radio.EnableWindow(displayPartTraffic);
	upBarSt4Radio.EnableWindow(displayPartTraffic);
	upBarCl1Radio.EnableWindow(displayPartTraffic);
	upBarCl2Radio.EnableWindow(displayPartTraffic);
	upBarCl3Radio.EnableWindow(displayPartTraffic);
	upBarCl4Radio.EnableWindow(displayPartTraffic);*/
@

