head	1.25;
access;
symbols
	PublicRelease_1_2e:1.24
	Interim_Release_1-2e_RC1:1.24
	PublicRelease_1_2d:1.24
	Interim_Release_1-2d_RC1:1.23
	Interim_Release_1-2d_beta1:1.23
	PublicRelease_1_2c:1.21
	Interim_Release_1-2c_RC1:1.21
	Interim_Release_1-2c_beta1:1.20
	PublicRelease_1_2b:1.20
	Interim_Release_1-2b_RC1:1.20
	PublicRelease_1_2a:1.20
	Interim_Release_1-2a_RC1:1.20
	Interim_Release_1-2a_beta2:1.17
	Interim_Release_1-2a_beta1:1.17
	PublicRelease_1_2:1.15
	Interim_Release_1-2_RC1:1.15
	Interim_Release_1-2_beta1:1.15
	PublicRelease_1_1g:1.15
	Interim_Release_1-1g_RC3:1.15
	Interim_Release_1-1g_RC2:1.15
	Interim_Release_1-1g_RC1:1.15
	Interim_Release_1-1g_beta2:1.13
	Interim_Release_1-1g_beta1:1.13
	PublicRelease_1_1f:1.13
	Interim_Release_1-1f_RC1:1.13
	PublicRelease_1_1e:1.13
	Interim_Release_1-1e_RC2:1.13
	Interim_Release_1-1e_RC1:1.13
	Interim_Release_1-1e_beta1:1.13
	PublicRelease_1_1d:1.13
	Interim_Release_1-1d_RC1:1.13
	PublicRelease_1_1c:1.13
	Interim_Release_1-1c_RC1:1.13
	Interim_Release_1-1c_beta2:1.13
	Interim_Release_1-1c_beta1:1.13
	PublicRelease_1_1b:1.13
	Interim_Release_1-1b_RC1:1.13
	PublicRelease_1_1a:1.13
	Interim_Release_1-1a_RC2:1.13
	Interim_Release_1-1a_RC1:1.13
	Interim_Release_1-1a_beta2:1.13
	Interim_Release_1-1a_beta1:1.13
	PublicRelease_1_1:1.13
	Interim_Release_1-1_beta1:1.13
	PublicRelease_1o:1.12
	Interim_Release_1o_RC1:1.12
	Interim_Release_1o_beta1:1.12
	PublicRelease_1n:1.12
	Interim_Release_1n_RC2:1.12
	Interim_Release_1n_RC1:1.12
	Interim_Release_1n_beta2:1.12
	Interim_Release_1n_beta1:1.12
	PublicRelease_1m:1.12
	Interim_Release_1m_beta1:1.12
	PublicRelease_1l:1.11
	Interim_Release_1l_RC3:1.11
	Interim_Release_1l_RC2:1.11
	Interim_Release_1l_RC1:1.11
	Interim_Release_1l_beta2:1.11
	Interim_Release_1l_beta1:1.11
	PublicRelease_1k:1.11
	Interim_Release_1k_RC4:1.11
	Interim_1k_RC3:1.11
	Interim_1k_RC2:1.11
	Interim_Release_1k_RC1:1.11
	Interim_Release_1k_beta5:1.11
	Intrerim_Release_1k_beta4:1.11
	Interim_Release_1k_beta1:1.11
	PublicRelease_1j:1.11
	Interim_Release_1J_RC3:1.11
	Interim_Release_1j_RC3:1.11
	Interim_Release_1j_RC2:1.11
	Interim_Release_1j_RC1:1.11
	Interim_Release_1j_beta2:1.11
	Interim_Release_1j_beta1:1.11
	PublicRelease_1i:1.11
	Interim_Release_1i_RC6:1.11
	Interim_Release_1i_RC3:1.11
	Interim_Release_1i_RC2:1.11
	Interim_Release_1i_RC1:1.11
	Interim_Release_1i_beta3:1.11
	Interim_Release_1i_beta2:1.10
	Interim_Release_1i_beta1:1.8
	PublicRelease_1h:1.6
	Interim_Release_1h_rc2:1.6
	Interim_Release_1h_RC1:1.6
	Interim_Release_1h_beta2:1.6
	Interim_Release_1h_beta1_now:1.6
	Interim_Release_1h_beta1:1.6
	PublicRelease_1g:1.6
	Interim_Release_1g_RC6_Final:1.6
	Interim_Release_1g_RC6:1.6
	Interim_Release_1g_RC5:1.6
	Interim_Release_1g_RC4:1.6
	Interim_Release_1g_RC3:1.6
	Interim_Release_1g_beta2:1.3
	Interim_Release_1g_beta1:1.3
	Interim_Release_1f_RC4:1.2
	Interim_Release_1f_RC3:1.2
	Interim_Release_1f_RC2:1.2
	Interim_Release_1f_RC:1.2
	Interim_Release_1f_beta2:1.2
	Interim_Release_1f_beta1:1.2
	PublicRelease_1e:1.2
	Interim_Release_1e_RC2:1.2
	Interim_Release_1e_RC:1.2
	Interim_Release_1e_beta3:1.2
	Interim_Release_1e_beta2:1.2
	Interim_Release_1e_beta2_before_kuchin:1.2
	Interim_Release_1e_beta1:1.2
	PublicRelease_1c:1.2
	featurestest:1.2.0.8
	Interim_Release_1c_RC:1.2
	Interim_Release_1c_beta2:1.2
	Interim_Release_1c_beta1:1.2
	threaded_downloadqueue:1.2.0.6
	PublicRelease_1b:1.2
	Interim_Release_1b_beta2:1.2
	Interim_Release_1b_beta1:1.2
	proxydeadlake:1.2.0.4
	PublicRelease_1a:1.2
	Interim_Release_1a_beta2:1.2
	BerkeleyDb:1.2.0.2
	Interim_Release_1a_beta1:1.2
	PublicRelease_1:1.2
	goldfish:1.2
	eMulePlus_1_RC2:1.2
	eMulePlus_26b_1RC1:1.2
	PreRelease_26b_i0e:1.2
	before_26d_merge:1.2
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.6
	plus26based:1.1.0.4
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.2.1
	proxytest:1.1.2.1.0.2
	official_sockets:1.1.0.2;
locks; strict;
comment	@// @;


1.25
date	2009.07.30.03.50.48;	author aw3;	state Exp;
branches;
next	1.24;

1.24
date	2008.04.30.05.04.31;	author aw3;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.03.03.58.56;	author aw3;	state Exp;
branches;
next	1.22;

1.22
date	2007.10.14.05.21.09;	author fuxie-dk;	state Exp;
branches;
next	1.21;

1.21
date	2007.04.02.23.14.13;	author kush_eplus;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.12.04.11.58;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2006.09.07.03.26.00;	author aw3;	state Exp;
branches;
next	1.18;

1.18
date	2006.07.01.17.15.16;	author aw3;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.05.01.38.20;	author aw3;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.19.23.50.43;	author aw3;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.27.22.11.48;	author eklmn;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.13;

1.13
date	2004.10.15.17.01.57;	author aw3;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.19.05.34.24;	author aw3;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.29.14.14.18;	author morevit;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.20.00.55.48;	author katsyonak;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.05.17.53.56;	author morevit;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.22.16.40.48;	author morevit;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.20.15.39.31;	author morevit;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.23.23.42.09;	author partyckip;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.20.00.01.10;	author netwolf1;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.15.09.10.04;	author partyckip;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.31.16.45.18;	author partyckip;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.16.22.01.47;	author lord_kiron;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.22.15.36.57;	author kuchin;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.01.28.16.54.19;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Reduced H-file dependency.
@
text
@//this file is part of eMule
//Copyright (C)2002-2006 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "PPGProxy.h"
#include "AsyncProxySocketLayer.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif


// CPPGProxy dialog

IMPLEMENT_DYNAMIC(CPPgProxy, CPropertyPage)
CPPgProxy::CPPgProxy()
	: CPropertyPage(CPPgProxy::IDD)
	, m_bEnableProxy(FALSE)
	, m_bEnableAuth(FALSE)
{
}

CPPgProxy::~CPPgProxy()
{
}

void CPPgProxy::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_PROXYTYPE, m_ProxyTypeCombo);
	DDX_Check(pDX, IDC_ENABLEPROXY, m_bEnableProxy);
	DDX_Check(pDX, IDC_ENABLEAUTH, m_bEnableAuth);
	DDX_Text(pDX, IDC_PROXYPORT, m_strProxyPort);
	DDX_Text(pDX, IDC_USERNAME, m_strProxyUser);
	DDX_Text(pDX, IDC_PASSWORD, m_strProxyPassword);
	DDX_Text(pDX, IDC_PROXYNAME, m_strProxyName);
}


BEGIN_MESSAGE_MAP(CPPgProxy, CPropertyPage)
	ON_BN_CLICKED(IDC_ENABLEPROXY, OnBnClickedEnableproxy)
	ON_BN_CLICKED(IDC_ENABLEAUTH, OnBnClickedEnableauth)
	ON_CBN_SELCHANGE(IDC_PROXYTYPE, OnCbnSelchangeProxytype)
	ON_EN_CHANGE(IDC_PROXYNAME, OnSettingsChange)
	ON_EN_CHANGE(IDC_PROXYPORT, OnSettingsChange)
	ON_EN_CHANGE(IDC_USERNAME, OnSettingsChange)
	ON_EN_CHANGE(IDC_PASSWORD, OnSettingsChange)
END_MESSAGE_MAP()


BOOL CPPgProxy::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	m_ProxyTypeCombo.AddString(_T("SOCKS4"));
	m_ProxyTypeCombo.AddString(_T("SOCKS4a"));
	m_ProxyTypeCombo.AddString(_T("SOCKS5"));
	m_ProxyTypeCombo.AddString(_T("HTTP 1.1"));

	(reinterpret_cast<CEdit*>(GetDlgItem(IDC_PROXYPORT)))->SetLimitText(5);
	m_proxy = m_pPrefs->GetProxySettings();
	LoadSettings();
	Localize();

	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
}

BOOL CPPgProxy::OnApply()
{
	UpdateData(TRUE);

	m_proxy.m_bUseProxy = B2b(m_bEnableProxy);
	m_proxy.m_bEnablePassword = B2b(m_bEnableAuth);
	m_proxy.m_nType = (uint16)(m_ProxyTypeCombo.GetCurSel() + 1);	// PROXYTYPE_NOPROXY not in the list
	
	m_proxy.m_strName = m_strProxyName;
	if (m_strProxyName.IsEmpty())
		m_proxy.m_bUseProxy = false;

	unsigned	uiVal = _tstoi(m_strProxyPort);
	
//	Valid values range is 1..65535
	if ((uiVal - 1u) > 0xFFFEu)
		uiVal = PREF_DEF_PROXY_PORT;
	m_proxy.m_uPort = static_cast<uint16>(uiVal);
	
	m_proxy.m_strUser = m_strProxyUser;
	if (m_strProxyUser.IsEmpty())
		m_proxy.m_bEnablePassword = false;
		
	m_proxy.m_strPassword = m_strProxyPassword;
	if (m_strProxyPassword.IsEmpty())
		m_proxy.m_bEnablePassword = false;
	
	m_pPrefs->SetProxySettings(m_proxy);
	LoadSettings();
	return CPropertyPage::OnApply();
}

void CPPgProxy::OnBnClickedEnableproxy()
{
	SetModified();
	UpdateData(TRUE);

	GetDlgItem(IDC_ENABLEAUTH)->EnableWindow(m_bEnableProxy);
	m_ProxyTypeCombo.EnableWindow(m_bEnableProxy);
	GetDlgItem(IDC_PROXYNAME)->EnableWindow(m_bEnableProxy);
	GetDlgItem(IDC_PROXYPORT)->EnableWindow(m_bEnableProxy);
	GetDlgItem(IDC_USERNAME)->EnableWindow(m_bEnableProxy);
	GetDlgItem(IDC_PASSWORD)->EnableWindow(m_bEnableProxy);
	if (m_bEnableProxy)
	{
		OnBnClickedEnableauth();
		OnCbnSelchangeProxytype();
	}
}

void CPPgProxy::OnBnClickedEnableauth()
{
	SetModified();
	UpdateData(TRUE);

	GetDlgItem(IDC_USERNAME)->EnableWindow(m_bEnableAuth);
	GetDlgItem(IDC_PASSWORD)->EnableWindow(m_bEnableAuth);
}

void CPPgProxy::OnCbnSelchangeProxytype()
{
	SetModified();

	int		iCurType = m_ProxyTypeCombo.GetCurSel() + 1;	//	PROXYTYPE_NOPROXY not in the list
	CWnd	*pWnd = GetDlgItem(IDC_ENABLEAUTH);

	if ((iCurType != PROXYTYPE_SOCKS5) && (iCurType != PROXYTYPE_HTTP11))
	{
		m_bEnableAuth = false;
		UpdateData(TRUE);
		OnBnClickedEnableauth();
		pWnd->EnableWindow(false);
	} 
	else
		pWnd->EnableWindow(true);
}

void CPPgProxy::LoadSettings()
{
	m_bEnableProxy = m_proxy.m_bUseProxy;
	m_bEnableAuth = m_proxy.m_bEnablePassword;
	m_ProxyTypeCombo.SetCurSel(m_proxy.m_nType - 1);	//	PROXYTYPE_NOPROXY not in the list
	m_strProxyName = m_proxy.m_strName;
	m_strProxyPort.Format(_T("%u"), m_proxy.m_uPort);
	m_strProxyUser = m_proxy.m_strUser;
	m_strProxyPassword = m_proxy.m_strPassword;
	UpdateData(FALSE);
	OnBnClickedEnableproxy();
}

void CPPgProxy::Localize(void)
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_ENABLEPROXY, IDS_PROXY_ENABLED },
		{ IDC_PROXYTYPE_LBL, IDS_PROXY_TYPE },
		{ IDC_PROXYNAME_LBL, IDS_PROXY_ADDRESS },
		{ IDC_PROXYPORT_LBL, IDS_PROXY_PORT },
		{ IDC_ENABLEAUTH, IDS_AUTHENTICATION },
		{ IDC_USERNAME_LBL, IDS_PROXY_USERNAME },
		{ IDC_PASSWORD_LBL, IDS_PASSWORD },
		{ IDC_AUTH_LBL, IDS_PROXY_AUTH }
	};

	if (::IsWindow(m_hWnd))
	{
		CString	strRes;

		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl[i][1]));
			SetDlgItemText(s_auResTbl[i][0], strRes);
		}
	}
}
@


1.24
log
@Proper way to implement OnApply.
@
text
@d21 1
@


1.23
log
@Optimized dialog regarding required memory and speed;
Removed old not used localization;
Suppressed compiler warnings; Formatting.
@
text
@d114 1
a114 1
	return TRUE;
@


1.22
log
@Fixed authentication configuration for SOCK5 proxy [Aw3];
Deprecated IDS_PROXY_AUTH_ENABLED was replaced with IDS_AUTHENTICATION.
@
text
@d34 2
a35 2
	, enableProxy(FALSE)
	, enableAuth(FALSE)
d46 7
a52 19
	DDX_Control(pDX, IDC_ENABLEPROXY, enableProxyCheck);
	DDX_Control(pDX, IDC_ENABLEAUTH, enableAuthCheck);
	DDX_Control(pDX, IDC_PROXYTYPE, proxyTypeCombo);
	DDX_Control(pDX, IDC_PROXYNAME, proxyNameEdit);
	DDX_Control(pDX, IDC_PROXYPORT, proxyPortEdit);
	DDX_Control(pDX, IDC_USERNAME, userNameEdit);
	DDX_Control(pDX, IDC_PASSWORD, passwordEdit);
	DDX_Check(pDX, IDC_ENABLEPROXY, enableProxy);
	DDX_Check(pDX, IDC_ENABLEAUTH, enableAuth);
	DDX_Text(pDX, IDC_PROXYPORT, proxyPort);
	DDX_Text(pDX, IDC_USERNAME, proxyUser);
	DDX_Text(pDX, IDC_PASSWORD, proxyPassword);
	DDX_Text(pDX, IDC_PROXYNAME, proxyName);
	DDX_Text(pDX, IDC_PROXYTYPE_LBL, proxyTypeDesc);
	DDX_Text(pDX, IDC_PROXYNAME_LBL, proxyNameDesc);
	DDX_Text(pDX, IDC_PROXYPORT_LBL, proxyPortDesc);
	DDX_Text(pDX, IDC_USERNAME_LBL, userNameDesc);
	DDX_Text(pDX, IDC_PASSWORD_LBL, passwordDesc);
	DDX_Text(pDX, IDC_AUTH_LBL, authDesc);
d60 4
a63 4
	ON_EN_CHANGE(IDC_PROXYNAME, OnEnChangeProxyname)
	ON_EN_CHANGE(IDC_PROXYPORT, OnEnChangeProxyport)
	ON_EN_CHANGE(IDC_USERNAME, OnEnChangeUsername)
	ON_EN_CHANGE(IDC_PASSWORD, OnEnChangePassword)
d71 4
a74 4
	proxyTypeCombo.AddString(_T("SOCKS4"));
	proxyTypeCombo.AddString(_T("SOCKS4a"));
	proxyTypeCombo.AddString(_T("SOCKS5"));
	proxyTypeCombo.AddString(_T("HTTP 1.1"));
d76 2
a77 2
	proxyPortEdit.SetLimitText(5);
	proxy = m_pPrefs->GetProxySettings();
d89 3
a91 3
	proxy.m_bUseProxy = enableProxy;
	proxy.m_bEnablePassword = enableAuth;
	proxy.m_nType = proxyTypeCombo.GetCurSel() + 1;	//	PROXYTYPE_NOPROXY not in the list
d93 3
a95 3
	proxy.m_strName = proxyName;
	if (proxyName.IsEmpty())
		proxy.m_bUseProxy = false;
d97 1
a97 1
	unsigned	uiVal = _tstoi(proxyPort);
d102 1
a102 1
	proxy.m_uPort = static_cast<uint16>(uiVal);
d104 3
a106 3
	proxy.m_strUser = proxyUser;
	if (proxyUser.IsEmpty())
		proxy.m_bEnablePassword = false;
d108 3
a110 3
	proxy.m_strPassword = proxyPassword;
	if (proxyPassword.IsEmpty())
		proxy.m_bEnablePassword = false;
d112 1
a112 1
	m_pPrefs->SetProxySettings(proxy);
d119 1
a119 1
	SetModified(true);
d121 8
a128 8
		
	enableAuthCheck.EnableWindow(enableProxy);
	proxyTypeCombo.EnableWindow(enableProxy);
	proxyNameEdit.EnableWindow(enableProxy);
	proxyPortEdit.EnableWindow(enableProxy);
	userNameEdit.EnableWindow(enableProxy);
	passwordEdit.EnableWindow(enableProxy);
	if (enableProxy)
d137 1
a137 1
	SetModified(true);
d140 2
a141 2
	userNameEdit.EnableWindow(enableAuth);
	passwordEdit.EnableWindow(enableAuth);
d146 1
a146 1
	SetModified(true);
d148 2
a149 1
	int	iCurType = proxyTypeCombo.GetCurSel() + 1;	//	PROXYTYPE_NOPROXY not in the list
d153 1
a153 1
		enableAuth = false;
d156 1
a156 1
		enableAuthCheck.EnableWindow(false);
d159 1
a159 1
		enableAuthCheck.EnableWindow(true);
d164 7
a170 7
	enableProxy = proxy.m_bUseProxy;
	enableAuth = proxy.m_bEnablePassword;
	proxyTypeCombo.SetCurSel(proxy.m_nType - 1);	//	PROXYTYPE_NOPROXY not in the list
	proxyName = proxy.m_strName;
	proxyPort.Format(_T("%u"), proxy.m_uPort);
	proxyUser = proxy.m_strUser;
	proxyPassword = proxy.m_strPassword;
d177 1
a177 1
	if(::IsWindow(m_hWnd))
d179 19
a197 10
		SetWindowText(GetResString(IDS_PW_PROXY));
		enableProxyCheck.SetWindowText(GetResString(IDS_PROXY_ENABLED));	
		GetResString(&proxyTypeDesc, IDS_PROXY_TYPE);	
		GetResString(&proxyNameDesc, IDS_PROXY_ADDRESS);	
		GetResString(&proxyPortDesc, IDS_PROXY_PORT);	
		enableAuthCheck.SetWindowText(GetResString(IDS_AUTHENTICATION));	
		GetResString(&userNameDesc, IDS_PROXY_USERNAME);	
		GetResString(&passwordDesc, IDS_PASSWORD);	
		GetResString(&authDesc, IDS_PROXY_AUTH);	
		UpdateData(FALSE);
@


1.21
log
@Removed unneeded CString initializations.
@
text
@d160 3
a162 1
	if (!(proxyTypeCombo.GetCurSel() == PROXYTYPE_SOCKS5 || proxyTypeCombo.GetCurSel() == PROXYTYPE_HTTP11))
d195 1
a195 1
		enableAuthCheck.SetWindowText(GetResString(IDS_PROXY_AUTH_ENABLED));	
@


1.20
log
@Corrected file header.
@
text
@a35 10
	, proxyPort(_T(""))
	, proxyUser(_T(""))
	, proxyPassword(_T(""))
	, proxyName(_T(""))
	, proxyTypeDesc(_T(""))
	, proxyNameDesc(_T(""))
	, proxyPortDesc(_T(""))
	, userNameDesc(_T(""))
	, passwordDesc(_T(""))
	, authDesc(_T(""))
@


1.19
log
@Removed not working 'Automatic serverconnect without proxy' feature;
Removed "No Proxy" from dropdown list {BouRock};
Removed unrequired #include; Formatting.
@
text
@d1 2
a2 1
//	This file is part of eMule Plus
d4 4
a7 4
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
d9 4
a12 4
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
d14 3
a16 5
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
// PPGproxy.cpp : implementation file
@


1.18
log
@Preparations to translate non-localized string.
@
text
@d1 16
a17 1
//
a21 1
#include "opcodes.h"
a40 1
	, serverConWoProxy(FALSE)
a58 1
	DDX_Control(pDX, IDC_SERVERCON_WO_PROXY, serverConWoProxyCheck);
a69 1
	DDX_Check(pDX, IDC_SERVERCON_WO_PROXY, serverConWoProxy);
a86 1
	ON_BN_CLICKED(IDC_SERVERCON_WO_PROXY, OnBnClickedAscwop)
a93 1
	proxyTypeCombo.AddString(_T("No Proxy"));
a111 1
	g_App.m_pPrefs->SetProxyASCWOP(serverConWoProxy);
d114 1
a114 1
	proxy.m_nType = proxyTypeCombo.GetCurSel();
a154 1
		OnBnClickedAscwop();
d178 2
a179 1
	else enableAuthCheck.EnableWindow(true);
a183 1
	serverConWoProxy = g_App.m_pPrefs->IsProxyASCWOP();
d186 1
a186 1
	proxyTypeCombo.SetCurSel(proxy.m_nType);
a207 1
		serverConWoProxyCheck.SetWindowText(GetResString(IDS_SERVERCON_WO_PROXY));
a210 5

void CPPgProxy::OnBnClickedAscwop()
{
	SetModified(true);
}
@


1.17
log
@Added checks and limits to the proxy port value.
@
text
@d84 6
@


1.16
log
@Ranamed GetProxy into GetProxySettings; Crypt/Decrypt only on load/save.
@
text
@a8 1

d84 1
d106 6
a111 7
	if (proxyPort.IsEmpty())
		proxy.m_uPort = 1080;
	else {
		proxy.m_uPort = _tstoi(proxyPort);
		if (proxy.m_uPort == 0)
			proxy.m_uPort = 1080;
	}
a124 1
// CPPGProxy message handlers
d137 2
a138 1
	if (enableProxy) {
a167 1

d175 1
a175 1
	proxyPort.Format(_T("%ld"),proxy.m_uPort);
@


1.15
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d85 1
a85 1
	proxy = m_pPrefs->GetProxy();
d118 1
a118 1
	proxy.m_strPassword = Crypt(proxyPassword);
d179 1
a179 1
	proxyPassword = Decrypt(proxy.m_strPassword);
@


1.14
log
@renamed 3 variables
@
text
@d97 1
a97 1
	g_App.g_pPrefs->SetProxyASCWOP(serverConWoProxy);
d172 1
a172 1
	serverConWoProxy = g_App.g_pPrefs->IsProxyASCWOP();
@


1.13
log
@Removed duplicate string.
@
text
@d97 1
a97 1
	g_eMuleApp.m_pGlobPrefs->SetProxyASCWOP(serverConWoProxy);
d172 1
a172 1
	serverConWoProxy = g_eMuleApp.m_pGlobPrefs->IsProxyASCWOP();
@


1.12
log
@Improved preferences localization.
@
text
@d195 1
a195 1
		GetResString(&passwordDesc, IDS_PROXY_PASSWORD);	
@


1.11
log
@Formatting, comments, and name changes.
@
text
@d5 1
a5 1
#include "eMule.h"
d190 3
a192 3
		proxyTypeDesc = GetResString(IDS_PROXY_TYPE);	
		proxyNameDesc = GetResString(IDS_PROXY_ADDRESS);	
		proxyPortDesc = GetResString(IDS_PROXY_PORT);	
d194 3
a196 3
		userNameDesc = GetResString(IDS_PROXY_USERNAME);	
		passwordDesc = GetResString(IDS_PROXY_PASSWORD);	
		authDesc = GetResString(IDS_PROXY_AUTH);	
@


1.10
log
@Proxy password is now also crypted
@
text
@d107 1
a107 1
		proxy.m_nPort = 1080;
d109 3
a111 3
		proxy.m_nPort = _tstoi(proxyPort);
		if (proxy.m_nPort == 0)
			proxy.m_nPort = 1080;
d177 1
a177 1
	proxyPort.Format(_T("%ld"),proxy.m_nPort);
@


1.9
log
@Formatting, comments, and name changes.
@
text
@d118 1
a118 1
	proxy.m_strPassword = proxyPassword;
d179 1
a179 1
	proxyPassword = proxy.m_strPassword;
@


1.8
log
@Formatting, comments, and name changes.
@
text
@d98 3
a100 3
	proxy.UseProxy = enableProxy;
	proxy.EnablePassword = enableAuth;
	proxy.type = proxyTypeCombo.GetCurSel();
d102 1
a102 1
	proxy.name = proxyName;
d104 1
a104 1
		proxy.UseProxy = false;
d107 1
a107 1
		proxy.port = 1080;
d109 3
a111 3
		proxy.port = _tstoi(proxyPort);
		if (proxy.port == 0)
			proxy.port = 1080;
d114 1
a114 1
	proxy.user = proxyUser;
d116 1
a116 1
		proxy.EnablePassword = false;
d118 1
a118 1
	proxy.password = proxyPassword;
d120 1
a120 1
		proxy.EnablePassword = false;
d173 7
a179 7
	enableProxy = proxy.UseProxy;
	enableAuth = proxy.EnablePassword;
	proxyTypeCombo.SetCurSel(proxy.type);
	proxyName = proxy.name;
	proxyPort.Format(_T("%ld"),proxy.port);
	proxyUser = proxy.user;
	proxyPassword = proxy.password;
@


1.7
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d85 1
a85 1
	proxy = app_prefs->GetProxy();
d122 1
a122 1
	app_prefs->SetProxySettings(proxy);
@


1.6
log
@converted to use DDX framework
@
text
@d97 1
a97 1
	theApp.glob_prefs->SetProxyASCWOP(serverConWoProxy);
d172 1
a172 1
	serverConWoProxy = theApp.glob_prefs->IsProxyASCWOP();
@


1.5
log
@added 'Set manually added servers to High Priority' and 'Serverconnect w/o proxy' options and removed 'Accept ed2k links'
@
text
@d22 13
d45 21
d95 17
a111 11
	theApp.glob_prefs->SetProxyASCWOP(IsDlgButtonChecked(IDC_SERVERCON_WO_PROXY));
	proxy.UseProxy = ((CButton*)GetDlgItem(IDC_ENABLEPROXY))->GetCheck();
	proxy.EnablePassword = ((CButton*)GetDlgItem(IDC_ENABLEAUTH))->GetCheck();
	proxy.type = ((CComboBox*)GetDlgItem(IDC_PROXYTYPE))->GetCurSel();

	if(GetDlgItem(IDC_PROXYNAME)->GetWindowTextLength())
	{ 
		GetDlgItem(IDC_PROXYNAME)->GetWindowText(proxy.name);
	} else {
		proxy.name = "";
        proxy.UseProxy = false;
d113 3
a115 12

	if(GetDlgItem(IDC_PROXYPORT)->GetWindowTextLength())
	{ 
		TCHAR buffer[6];
		GetDlgItem(IDC_PROXYPORT)->GetWindowText(buffer,sizeof(buffer));
		proxy.port = (_tstoi(buffer)) ? _tstoi(buffer) : 1080;
	} else proxy.port = 1080;

	if(GetDlgItem(IDC_USERNAME)->GetWindowTextLength())
	{ 
		GetDlgItem(IDC_USERNAME)->GetWindowText(proxy.user);
	} else {
d117 3
a119 8
		proxy.user = "";
	}

	if(GetDlgItem(IDC_PASSWORD)->GetWindowTextLength())
	{ 
		GetDlgItem(IDC_PASSWORD)->GetWindowText(proxy.password);
	} else {
		proxy.password = "";
d121 1
a121 1
	}
d131 13
a143 11
	CButton* btn = (CButton*) GetDlgItem(IDC_ENABLEPROXY);

	GetDlgItem(IDC_ENABLEAUTH)->EnableWindow(btn->GetCheck() != 0);
	GetDlgItem(IDC_PROXYTYPE)->EnableWindow(btn->GetCheck() != 0);
	GetDlgItem(IDC_PROXYNAME)->EnableWindow(btn->GetCheck() != 0);
	GetDlgItem(IDC_PROXYPORT)->EnableWindow(btn->GetCheck() != 0);
	GetDlgItem(IDC_USERNAME)->EnableWindow(btn->GetCheck() != 0);
	GetDlgItem(IDC_PASSWORD)->EnableWindow(btn->GetCheck() != 0);
	if (btn->GetCheck() != 0) OnBnClickedEnableauth();
	if (btn->GetCheck() != 0) OnCbnSelchangeProxytype();
	if (btn->GetCheck() != 0) OnBnClickedAscwop();
d149 1
a149 1
	CButton* btn = (CButton*) GetDlgItem(IDC_ENABLEAUTH);
d151 2
a152 2
	GetDlgItem(IDC_USERNAME)->EnableWindow(btn->GetCheck() != 0);
	GetDlgItem(IDC_PASSWORD)->EnableWindow(btn->GetCheck() != 0);
d158 2
a159 2
	CComboBox* cbbox = (CComboBox*)GetDlgItem(IDC_PROXYTYPE);
	if (!(cbbox->GetCurSel() == PROXYTYPE_SOCKS5 || cbbox->GetCurSel() == PROXYTYPE_HTTP11))
d161 2
a162 1
		((CButton*)GetDlgItem(IDC_ENABLEAUTH))->SetCheck(false);
d164 1
a164 1
		GetDlgItem(IDC_ENABLEAUTH)->EnableWindow(false);
d166 1
a166 3
	else GetDlgItem(IDC_ENABLEAUTH)->EnableWindow(true);


d172 9
a180 10
	CheckDlgButton(IDC_SERVERCON_WO_PROXY,(theApp.glob_prefs->IsProxyASCWOP() ));
	((CButton*)GetDlgItem(IDC_ENABLEPROXY))->SetCheck(proxy.UseProxy);
	((CButton*)GetDlgItem(IDC_ENABLEAUTH))->SetCheck(proxy.EnablePassword);
	((CComboBox*)GetDlgItem(IDC_PROXYTYPE))->SetCurSel(proxy.type);
	GetDlgItem(IDC_PROXYNAME)->SetWindowText(proxy.name);
	CString buffer;
	buffer.Format(_T("%ld"),proxy.port);
	GetDlgItem(IDC_PROXYPORT)->SetWindowText(buffer);
	GetDlgItem(IDC_USERNAME)->SetWindowText(proxy.user);
	GetDlgItem(IDC_PASSWORD)->SetWindowText(proxy.password);
d186 1
a186 1
	if(m_hWnd)
d189 10
a198 9
		GetDlgItem(IDC_ENABLEPROXY)->SetWindowText(GetResString(IDS_PROXY_ENABLED));	
		GetDlgItem(IDC_PROXYTYPE_LBL)->SetWindowText(GetResString(IDS_PROXY_TYPE));	
		GetDlgItem(IDC_PROXYNAME_LBL)->SetWindowText(GetResString(IDS_PROXY_ADDRESS));	
		GetDlgItem(IDC_PROXYPORT_LBL)->SetWindowText(GetResString(IDS_PROXY_PORT));	
		GetDlgItem(IDC_ENABLEAUTH)->SetWindowText(GetResString(IDS_PROXY_AUTH_ENABLED));	
		GetDlgItem(IDC_USERNAME_LBL)->SetWindowText(GetResString(IDS_PROXY_USERNAME));	
		GetDlgItem(IDC_PASSWORD_LBL)->SetWindowText(GetResString(IDS_PROXY_PASSWORD));	
		GetDlgItem(IDC_AUTH_LBL)->SetWindowText(GetResString(IDS_PROXY_AUTH));	
		GetDlgItem(IDC_SERVERCON_WO_PROXY)->SetWindowText(GetResString(IDS_SERVERCON_WO_PROXY));
a200 1

@


1.4
log
@unicode cleanup
@
text
@d43 1
d61 1
d115 1
d145 1
d171 1
d175 5
@


1.3
log
@code cleanup
@
text
@d74 1
a74 1
		char buffer[6];
d76 1
a76 1
		proxy.port = (atoi(buffer)) ? atoi(buffer) : 1080;
d147 1
a147 1
	buffer.Format("%ld",proxy.port);
@


1.2
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d66 1
a66 1
		GetDlgItem(IDC_PROXYNAME)->GetWindowText(proxy.name,sizeof(proxy.name));
d68 1
a68 1
		proxy.name[0] = 0;
d81 1
a81 1
		GetDlgItem(IDC_USERNAME)->GetWindowText(proxy.user,sizeof(proxy.user));
d84 1
a84 1
		proxy.user[0] = 0;
d89 1
a89 1
		GetDlgItem(IDC_PASSWORD)->GetWindowText(proxy.password,sizeof(proxy.password));
d91 1
a91 1
		proxy.password[0] = 0;
@


1.1
log
@Maverick's proxy support
@
text
@d10 7
@


1.1.2.1
log
@updating this branch...
@
text
@@

