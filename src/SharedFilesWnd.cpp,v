head	1.46;
access;
symbols
	PublicRelease_1_2e:1.45
	Interim_Release_1-2e_RC1:1.45
	PublicRelease_1_2d:1.44
	Interim_Release_1-2d_RC1:1.44
	Interim_Release_1-2d_beta1:1.43
	PublicRelease_1_2c:1.40
	Interim_Release_1-2c_RC1:1.40
	Interim_Release_1-2c_beta1:1.37
	PublicRelease_1_2b:1.37
	Interim_Release_1-2b_RC1:1.37
	PublicRelease_1_2a:1.37
	Interim_Release_1-2a_RC1:1.37
	Interim_Release_1-2a_beta2:1.37
	Interim_Release_1-2a_beta1:1.37
	PublicRelease_1_2:1.37
	Interim_Release_1-2_RC1:1.37
	Interim_Release_1-2_beta1:1.37
	PublicRelease_1_1g:1.37
	Interim_Release_1-1g_RC3:1.37
	Interim_Release_1-1g_RC2:1.37
	Interim_Release_1-1g_RC1:1.37
	Interim_Release_1-1g_beta2:1.35
	Interim_Release_1-1g_beta1:1.33
	PublicRelease_1_1f:1.31
	Interim_Release_1-1f_RC1:1.31
	PublicRelease_1_1e:1.31
	Interim_Release_1-1e_RC2:1.31
	Interim_Release_1-1e_RC1:1.31
	Interim_Release_1-1e_beta1:1.31
	PublicRelease_1_1d:1.30
	Interim_Release_1-1d_RC1:1.30
	PublicRelease_1_1c:1.29
	Interim_Release_1-1c_RC1:1.29
	Interim_Release_1-1c_beta2:1.29
	Interim_Release_1-1c_beta1:1.29
	PublicRelease_1_1b:1.21
	Interim_Release_1-1b_RC1:1.21
	PublicRelease_1_1a:1.20
	Interim_Release_1-1a_RC2:1.20
	Interim_Release_1-1a_RC1:1.20
	Interim_Release_1-1a_beta2:1.20
	Interim_Release_1-1a_beta1:1.20
	PublicRelease_1_1:1.20
	Interim_Release_1-1_beta1:1.20
	PublicRelease_1o:1.20
	Interim_Release_1o_RC1:1.20
	Interim_Release_1o_beta1:1.20
	PublicRelease_1n:1.20
	Interim_Release_1n_RC2:1.20
	Interim_Release_1n_RC1:1.20
	Interim_Release_1n_beta2:1.20
	Interim_Release_1n_beta1:1.20
	PublicRelease_1m:1.20
	Interim_Release_1m_beta1:1.20
	PublicRelease_1l:1.20
	Interim_Release_1l_RC3:1.20
	Interim_Release_1l_RC2:1.20
	Interim_Release_1l_RC1:1.20
	Interim_Release_1l_beta2:1.20
	Interim_Release_1l_beta1:1.20
	PublicRelease_1k:1.18
	Interim_Release_1k_RC4:1.18
	Interim_1k_RC3:1.18
	Interim_1k_RC2:1.18
	Interim_Release_1k_RC1:1.18
	Interim_Release_1k_beta5:1.17
	Intrerim_Release_1k_beta4:1.17
	Interim_Release_1k_beta1:1.17
	PublicRelease_1j:1.16
	Interim_Release_1J_RC3:1.16
	Interim_Release_1j_RC3:1.16
	Interim_Release_1j_RC2:1.16
	Interim_Release_1j_RC1:1.16
	Interim_Release_1j_beta2:1.16
	Interim_Release_1j_beta1:1.16
	PublicRelease_1i:1.16
	Interim_Release_1i_RC6:1.16
	Interim_Release_1i_RC3:1.16
	Interim_Release_1i_RC2:1.16
	Interim_Release_1i_RC1:1.16
	Interim_Release_1i_beta3:1.16
	Interim_Release_1i_beta2:1.16
	Interim_Release_1i_beta1:1.14
	PublicRelease_1h:1.10
	Interim_Release_1h_rc2:1.10
	Interim_Release_1h_RC1:1.10
	Interim_Release_1h_beta2:1.10
	Interim_Release_1h_beta1_now:1.10
	Interim_Release_1h_beta1:1.10
	PublicRelease_1g:1.9
	Interim_Release_1g_RC6_Final:1.9
	Interim_Release_1g_RC6:1.9
	Interim_Release_1g_RC5:1.9
	Interim_Release_1g_RC4:1.9
	Interim_Release_1g_RC3:1.9
	Interim_Release_1g_beta2:1.6
	Interim_Release_1g_beta1:1.6
	Interim_Release_1f_RC4:1.5
	Interim_Release_1f_RC3:1.5
	Interim_Release_1f_RC2:1.5
	Interim_Release_1f_RC:1.5
	Interim_Release_1f_beta2:1.5
	Interim_Release_1f_beta1:1.5
	PublicRelease_1e:1.5
	Interim_Release_1e_RC2:1.5
	Interim_Release_1e_RC:1.5
	Interim_Release_1e_beta3:1.5
	Interim_Release_1e_beta2:1.5
	Interim_Release_1e_beta2_before_kuchin:1.5
	Interim_Release_1e_beta1:1.5
	PublicRelease_1c:1.5
	featurestest:1.5.0.4
	Interim_Release_1c_RC:1.5
	Interim_Release_1c_beta2:1.5
	Interim_Release_1c_beta1:1.5
	threaded_downloadqueue:1.5.0.2
	PublicRelease_1b:1.4
	Interim_Release_1b_beta2:1.4
	Interim_Release_1b_beta1:1.4
	proxydeadlake:1.4.0.4
	PublicRelease_1a:1.4
	Interim_Release_1a_beta2:1.4
	BerkeleyDb:1.4.0.2
	Interim_Release_1a_beta1:1.4
	PublicRelease_1:1.3
	goldfish:1.3
	eMulePlus_1_RC2:1.3
	eMulePlus_26b_1RC1:1.3
	PreRelease_26b_i0e:1.3
	before_26d_merge:1.3
	Interim_Release_26b_i0d:1.2
	Interim_Release_26b_i0c:1.2
	Interim_Release_26b_i0b:1.2
	Interim_Release_26b_i0a:1.2
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.46
date	2009.10.22.23.36.52;	author aw3;	state Exp;
branches;
next	1.45;

1.45
date	2008.11.03.05.45.23;	author aw3;	state Exp;
branches;
next	1.44;

1.44
date	2008.03.03.05.19.15;	author aw3;	state Exp;
branches;
next	1.43;

1.43
date	2008.01.01.01.22.07;	author aw3;	state Exp;
branches;
next	1.42;

1.42
date	2007.12.30.23.41.23;	author aw3;	state Exp;
branches;
next	1.41;

1.41
date	2007.12.16.21.38.00;	author aw3;	state Exp;
branches;
next	1.40;

1.40
date	2007.07.31.15.07.19;	author kush_eplus;	state Exp;
branches;
next	1.39;

1.39
date	2007.07.30.10.27.27;	author kush_eplus;	state Exp;
branches;
next	1.38;

1.38
date	2007.07.30.00.17.20;	author kush_eplus;	state Exp;
branches;
next	1.37;

1.37
date	2005.11.27.22.11.50;	author eklmn;	state Exp;
branches;
next	1.36;

1.36
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.35;

1.35
date	2005.09.23.10.56.08;	author eklmn;	state Exp;
branches;
next	1.34;

1.34
date	2005.09.19.22.14.59;	author eklmn;	state Exp;
branches;
next	1.33;

1.33
date	2005.08.21.17.58.39;	author aw3;	state Exp;
branches;
next	1.32;

1.32
date	2005.08.06.17.59.09;	author aw3;	state Exp;
branches;
next	1.31;

1.31
date	2005.06.06.04.33.24;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2005.03.06.22.02.37;	author aw3;	state Exp;
branches;
next	1.29;

1.29
date	2005.01.23.13.58.01;	author aw3;	state Exp;
branches;
next	1.28;

1.28
date	2005.01.17.18.34.54;	author katsyonak;	state Exp;
branches;
next	1.27;

1.27
date	2005.01.17.11.02.50;	author katsyonak;	state Exp;
branches;
next	1.26;

1.26
date	2005.01.12.15.35.09;	author katsyonak;	state Exp;
branches;
next	1.25;

1.25
date	2005.01.09.12.46.27;	author katsyonak;	state Exp;
branches;
next	1.24;

1.24
date	2005.01.08.19.00.47;	author syrus77;	state Exp;
branches;
next	1.23;

1.23
date	2005.01.07.22.28.56;	author netwolf1;	state Exp;
branches;
next	1.22;

1.22
date	2005.01.06.01.16.17;	author katsyonak;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.16.21.06.23;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.03.05.09.09;	author dongato;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.16.08.37.01;	author dongato;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.26.22.23.38;	author aw3;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.03.22.53.58;	author netwolf1;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.08.15.39.48;	author morevit;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.08.12.56.34;	author morevit;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.22.16.45.09;	author morevit;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.21.22.05.18;	author morevit;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.20.15.39.32;	author morevit;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.19.00.13.38;	author morevit;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.02.14.39.53;	author dongato;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.16.15.37.42;	author netwolf1;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.15.13.41.14;	author partyckip;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.11.18.27.13;	author eklmn;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.01.10.08.44;	author partyckip;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.13.21.16.35;	author partyckip;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2003.02.24.10.54.00;	author recdvst;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.16.22.01.49;	author lord_kiron;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.10.19.24.50;	author cax2;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.23;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.27;	author cax2;	state Exp;
branches;
next	;

1.5.4.1
date	2003.03.23.06.22.02;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.46
log
@Fixed redraw of shared file statistics status bars on system color change (ported from original);
Slightly reduced number of system calls.
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "SharedFilesWnd.h"
#include "SharedFileList.h"
#include "otherfunctions.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNAMIC(CSharedFilesWnd, CDialog)
CSharedFilesWnd::CSharedFilesWnd(CWnd* pParent /*=NULL*/)
	: CResizableDialog(CSharedFilesWnd::IDD, pParent)
{
}

CSharedFilesWnd::~CSharedFilesWnd()
{
}

void CSharedFilesWnd::DoDataExchange(CDataExchange* pDX)
{
	CResizableDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_SFLIST, m_ctlSharedFilesList);
	DDX_Control(pDX, IDC_POPBAR, pop_bar);
	DDX_Control(pDX, IDC_POPBAR2, pop_baraccept);
	DDX_Control(pDX, IDC_POPBAR3, pop_bartrans);
	DDX_Control(pDX, IDC_STATISTICS, m_ctrlStatisticsFrm);
}

BOOL CSharedFilesWnd::OnInitDialog()
{
	CResizableDialog::OnInitDialog();

	m_ctlSharedFilesList.Init();

	COLORREF	crInactive = GetSysColor(COLOR_INACTIVECAPTION);
	COLORREF	crActive = GetSysColor(COLOR_ACTIVECAPTION);
	COLORREF	crCaptTxt = GetSysColor(COLOR_CAPTIONTEXT);

	pop_bar.SetGradientColors(crInactive, crActive);
	pop_baraccept.SetGradientColors(crInactive, crActive);
	pop_bartrans.SetGradientColors(crInactive, crActive);
	pop_bar.SetTextColor(crCaptTxt);
	pop_baraccept.SetTextColor(crCaptTxt);
	pop_bartrans.SetTextColor(crCaptTxt);

	oldFilesIcon = GetFilesStatic()->SetIcon(GetFilesIcon());

	LOGFONT lf;
	GetFont()->GetLogFont(&lf);
	lf.lfWeight = FW_BOLD;
	bold.CreateFontIndirect(&lf);
	m_ctrlStatisticsFrm.Init(IDI_SMALLSTATISTICS, &g_App.m_pMDlg->m_themeHelper);
	m_ctrlStatisticsFrm.SetFont(&bold);
	GetDlgItem(IDC_FILEBOX)->SetFont(&bold);
	GetDlgItem(IDC_CURSESSION_LBL)->SetFont(&bold);
	GetDlgItem(IDC_TOTAL_LBL)->SetFont(&bold);

	AddAnchor(IDC_FILES_ICO, TOP_LEFT);
	AddAnchor(IDC_TRAFFIC_TEXT, TOP_LEFT);
	AddAnchor(IDC_SFLIST,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(IDC_RELOADSHAREDFILES, BOTTOM_RIGHT);
	AddAnchor(IDC_OPENINCOMINGFOLDER,TOP_RIGHT);
	AddAnchor(IDC_BN_SWITCHALLKNOWN,TOP_RIGHT);
	AddAnchor(IDC_STATISTICS,BOTTOM_LEFT);
	AddAnchor(IDC_FILEBOX, BOTTOM_LEFT);
	AddAnchor(IDC_CURSESSION_LBL, BOTTOM_LEFT);
	AddAnchor(IDC_TOTAL_LBL, BOTTOM_LEFT);
	AddAnchor(IDC_FSTATIC4, BOTTOM_LEFT);
	AddAnchor(IDC_SREQUESTED,BOTTOM_LEFT);
	AddAnchor(IDC_POPBAR,BOTTOM_LEFT);
	AddAnchor(IDC_FSTATIC7,BOTTOM_LEFT);
	AddAnchor(IDC_SREQUESTED2,BOTTOM_LEFT);
	AddAnchor(IDC_FSTATIC5,BOTTOM_LEFT);
	AddAnchor(IDC_SACCEPTED,BOTTOM_LEFT);
	AddAnchor(IDC_POPBAR2,BOTTOM_LEFT);
	AddAnchor(IDC_FSTATIC8,BOTTOM_LEFT);
	AddAnchor(IDC_SACCEPTED2,BOTTOM_LEFT);
	AddAnchor(IDC_FSTATIC6,BOTTOM_LEFT);
	AddAnchor(IDC_STRANSFERRED,BOTTOM_LEFT);
	AddAnchor(IDC_POPBAR3,BOTTOM_LEFT);
	AddAnchor(IDC_FSTATIC9,BOTTOM_LEFT);
	AddAnchor(IDC_STRANSFERRED2,BOTTOM_LEFT);

	Localize();

	m_ttip.Create(this);
	m_ttip.SetDelayTime(TTDT_AUTOPOP, 15000);
	m_ttip.SetDelayTime(TTDT_INITIAL, g_App.m_pPrefs->GetToolTipDelay()*1000);
	m_ttip.SendMessage(TTM_SETMAXTIPWIDTH, 0, SHRT_MAX);
	m_ttip.SetBehaviour(PPTOOLTIP_MULTIPLE_SHOW);
	m_ttip.SetNotify(m_hWnd);
	m_ttip.AddTool(&m_ctlSharedFilesList, _T(""));

	return true;
}

BEGIN_MESSAGE_MAP(CSharedFilesWnd, CResizableDialog)
	ON_BN_CLICKED(IDC_RELOADSHAREDFILES, OnBnClickedReloadsharedfiles)
	ON_NOTIFY(LVN_ITEMACTIVATE, IDC_SFLIST, OnLvnItemActivateSflist)
	ON_NOTIFY(NM_CLICK, IDC_SFLIST, OnNMClickSflist)
	ON_BN_CLICKED(IDC_OPENINCOMINGFOLDER, OnBnClickedOpenincomingfolder)
	ON_BN_CLICKED(IDC_BN_SWITCHALLKNOWN, OnBnClickedSwitchAllKnown)
	ON_WM_DESTROY()
	ON_WM_SYSCOLORCHANGE()
END_MESSAGE_MAP()

void CSharedFilesWnd::OnBnClickedReloadsharedfiles()
{
	g_App.m_pSharedFilesList->Reload();
}

void CSharedFilesWnd::OnLvnItemActivateSflist(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR);

	if (m_ctlSharedFilesList.GetSelectionMark() != (-1))
	{
		sfl_itemdata	*itemdata = (sfl_itemdata*)m_ctlSharedFilesList.GetItemData(m_ctlSharedFilesList.GetSelectionMark());

		ShowDetails(itemdata->knownFile);
	}
	*pResult = 0;
}

void CSharedFilesWnd::ShowDetails(CKnownFile* cur_file)
{
	ASSERT(cur_file != NULL);

	CString buffer;

	pop_bartrans.SetShowPercent();			
	pop_bartrans.SetRange32(0, static_cast<uint32>(g_App.m_pKnownFilesList->m_qwNumTransferred / 1024ui64));
	pop_bartrans.SetPos(static_cast<uint32>(cur_file->statistic.GetTransferred() / 1024ui64));
	
	SetDlgItemText(IDC_STRANSFERRED, CastItoXBytes(cur_file->statistic.GetTransferred()));

	pop_bar.SetShowPercent();			
	pop_bar.SetRange32(0,g_App.m_pKnownFilesList->m_iNumRequested);
	pop_bar.SetPos(cur_file->statistic.GetRequests());
	buffer.Format(_T("%u"),cur_file->statistic.GetRequests());
	SetDlgItemText(IDC_SREQUESTED, buffer);

	buffer.Format(_T("%u"),cur_file->statistic.GetAccepts());
	pop_baraccept.SetShowPercent();
	pop_baraccept.SetRange32(0,g_App.m_pKnownFilesList->m_iNumAccepted);
	pop_baraccept.SetPos(cur_file->statistic.GetAccepts());
	SetDlgItemText(IDC_SACCEPTED, buffer);
	SetDlgItemText(IDC_STRANSFERRED2, CastItoXBytes(cur_file->statistic.GetAllTimeTransferred()));

	buffer.Format(_T("%u"),cur_file->statistic.GetAllTimeRequests());
	SetDlgItemText(IDC_SREQUESTED2, buffer);

	buffer.Format(_T("%u"),cur_file->statistic.GetAllTimeAccepts());
	SetDlgItemText(IDC_SACCEPTED2, buffer);

	SetDlgItemText(IDC_FILEBOX, cur_file->GetFileName());
}

void CSharedFilesWnd::OnNMClickSflist(NMHDR *pNMHDR, LRESULT *pResult)
{
	OnLvnItemActivateSflist(pNMHDR, pResult);
	*pResult = 0;
}

BOOL CSharedFilesWnd::PreTranslateMessage(MSG* pMsg) 
{
	if (pMsg->message == WM_KEYUP && pMsg->hwnd == GetDlgItem(IDC_SFLIST)->m_hWnd)
	{
		LRESULT	lResult = 0;

		OnLvnItemActivateSflist(NULL, &lResult);
	}

	if (g_App.m_pPrefs->GetToolTipDelay() != 0)
		m_ttip.RelayEvent(pMsg);

	return CResizableDialog::PreTranslateMessage(pMsg);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSharedFilesWnd::OnSysColorChange()
{
	COLORREF	crBkGrnd = GetSysColor(COLOR_3DFACE);

	pop_bar.SetBkColor(crBkGrnd);
	pop_baraccept.SetBkColor(crBkGrnd);
	pop_bartrans.SetBkColor(crBkGrnd);
	CResizableDialog::OnSysColorChange();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CSharedFilesWnd::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult)
{
	NMHDR	*pNMHDR = (NMHDR*)lParam;

	switch (pNMHDR->code)
	{
		case UDM_TOOLTIP_DISPLAY:
		{
			NM_PPTOOLTIP_DISPLAY *pNotify = (NM_PPTOOLTIP_DISPLAY*)lParam;

			GetInfo4ToolTip(pNotify);
			return TRUE;
		}
		case UDM_TOOLTIP_POP:
		{
			m_ttip.Pop();
			return TRUE;
		}
	}

	return CResizableDialog::OnNotify(wParam, lParam, pResult);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSharedFilesWnd::GetInfo4ToolTip(NM_PPTOOLTIP_DISPLAY *pNotify)
{
	int	iControlId = CWnd::FromHandle(pNotify->ti->hWnd)->GetDlgCtrlID();

	if (iControlId == IDC_SFLIST)
	{
		int	iSel = GetItemUnderMouse(&m_ctlSharedFilesList);

		if (iSel < 0 || iSel == 65535)
			return;

		sfl_itemdata	*pItemData = reinterpret_cast<sfl_itemdata*>(m_ctlSharedFilesList.GetItemData(iSel));

		if (pItemData == NULL)
			return;

		CKnownFile	*pKnownFile = pItemData->knownFile;

		if (pKnownFile == NULL || !pItemData->isFile)
			return;

		CString	strTemp;
		CString	strInfo;

		if (m_ctlSharedFilesList.IsKnownFilesView())
			GetResString(&strTemp, (!pKnownFile->GetSharedFile()) ? IDS_KNOWNFILES : IDS_SHAREDFILES);
		else
		{
			if (pKnownFile->IsPartFile())
				strTemp.Format(_T("%s (%s)"), GetResString(IDS_TREE_DL), ((CPartFile*)pKnownFile)->GetPartFileStatus());
			else
				GetResString(&strTemp, IDS_SHAREDFILES);
		}

		CString	strPriority(pKnownFile->GetKnownFilePriorityString());

		strInfo.Format(_T("<t=2><b>%s</b><br><t=2>%s<br><t=2>%s<br><hr=100%%><br><b>%s:<t></b>%s (%s %s)<br><b>%s:<t></b>%s<br><b>%s:<t></b>%s<br><b>%s:<t></b>%s"),
			pKnownFile->GetFileName(),
			pKnownFile->GetFileTypeString(),
			strTemp,
			GetResString(IDS_DL_SIZE), CastItoXBytes(pKnownFile->GetFileSize()), CastItoThousands(pKnownFile->GetFileSize()), GetResString(IDS_BYTES),
			GetResString(IDS_PRIORITY), strPriority,
			GetResString(IDS_PERMISSION), pKnownFile->GetPermissionString(),
			GetResString(IDS_FILEHASH), HashToString(pKnownFile->GetFileHash()));

		EnumPartFileRating	eRated = pKnownFile->GetFileRating();

		if (eRated != PF_RATING_NONE)
			strInfo.AppendFormat(_T("<br><b>%s:<t></b>%s"), GetResString(IDS_TT_CMT_RATING), GetRatingString(eRated));

		strTemp = pKnownFile->GetFileComment();
		strTemp.Replace(_T("<"), _T("<<"));

		if (!strTemp.IsEmpty())
			strInfo.AppendFormat(_T("<br><b>%s<t></b>%s"), GetResString(IDS_CMT_READ), strTemp);

		uint64	qwA = pKnownFile->statistic.GetRequests();
		uint64	qwB = pKnownFile->statistic.GetAllTimeRequests();

		if (qwA != 0 || qwB != 0)
			strInfo.AppendFormat(_T("<br><b>%s:<t></b>%I64u (%I64u)"), GetResString(IDS_SF_REQUESTS), qwA, qwB);

		qwA = pKnownFile->statistic.GetAccepts();
		qwB = pKnownFile->statistic.GetAllTimeAccepts();
		if (qwA != 0 || qwB != 0)
			strInfo.AppendFormat(_T("<br><b>%s:<t></b>%I64u (%I64u)"), GetResString(IDS_SF_ACCEPTS), qwA, qwB);

		qwA = pKnownFile->statistic.GetTransferred();
		qwB = pKnownFile->statistic.GetAllTimeTransferred();
		if (qwA != 0 || qwB != 0)
			strInfo.AppendFormat(_T("<br><b>%s:<t></b>%s (%s)"), GetResString(IDS_SF_TRANSFERRED), CastItoXBytes(qwA), CastItoXBytes(qwB));

		qwA = pKnownFile->GetFileSize();

		double	dblCR = pKnownFile->statistic.GetCompleteReleases();

		if (qwA != 0 && (dblCR + qwB != 0.0))
			strInfo.AppendFormat(_T("<br><b>%s:<t></b>%0.2f (%0.2f)"), GetResString(IDS_SF_COLUPLOADS), dblCR, (double)qwB / qwA);

		if (pKnownFile->IsPartFile())
		{
			strTemp.Format(_T("%u"), ((CPartFile*)pKnownFile)->GetCompleteSourcesCount());
		}
		else
		{
			uint16	nCompleteSourcesCountLo, nCompleteSourcesCountHi;

			pKnownFile->GetCompleteSourcesRange(&nCompleteSourcesCountLo, &nCompleteSourcesCountHi);
			if (nCompleteSourcesCountLo == 0)
			{
				if (nCompleteSourcesCountHi == 0)
					strTemp = _T("");
				else
					strTemp.Format(_T("<< %u"), nCompleteSourcesCountHi);
			}
			else if (nCompleteSourcesCountLo == nCompleteSourcesCountHi)
				strTemp.Format(_T("%u"), nCompleteSourcesCountLo);
			else
				strTemp.Format(_T("%u - %u"), nCompleteSourcesCountLo, nCompleteSourcesCountHi);
		}

		if (!strTemp.IsEmpty())
			strInfo.AppendFormat(_T("<br><b>%s:<t></b>%s"), GetResString(IDS_SF_COMPLETESRC), strTemp);

		strTemp = pKnownFile->GetPath();
		if (!strTemp.IsEmpty())
			strInfo.AppendFormat(_T("<br><b>%s:<t></b>%s"), GetResString(IDS_SF_FOLDER), strTemp);

		SHFILEINFO	shfi;

		memzero(&shfi, sizeof(shfi));
		SHGetFileInfo(pKnownFile->GetFileName(), FILE_ATTRIBUTE_NORMAL, &shfi, sizeof(shfi), SHGFI_ICON | SHGFI_USEFILEATTRIBUTES);
		pNotify->ti->hIcon = shfi.hIcon;
		pNotify->ti->sTooltip = strInfo;
	}
}

void CSharedFilesWnd::Localize()
{
	static const int s_aiResTbl[][2] =
	{
		{ IDC_RELOADSHAREDFILES, IDS_SF_RELOAD },
		{ IDC_OPENINCOMINGFOLDER, IDS_SF_OPENINCOMINGFOLDER },
		{ IDC_FILEBOX, IDS_FILEBOX },
		{ IDC_CURSESSION_LBL, IDS_SF_CURRENT },
		{ IDC_TOTAL_LBL, IDS_SF_TOTAL2 },
		{ IDC_FSTATIC6, IDS_SF_TRANS },
		{ IDC_FSTATIC5, IDS_SF_ACCEPTED },
		{ IDC_FSTATIC4, IDS_SF_REQUESTED },
		{ IDC_FSTATIC9, IDS_SF_TRANS },
		{ IDC_FSTATIC8, IDS_SF_ACCEPTED },
		{ IDC_FSTATIC7, IDS_SF_REQUESTED }
	};

	for (uint32 i = 0; i < ARRSIZE(s_aiResTbl); i++)
		SetDlgItemText(s_aiResTbl[i][0], GetResString(static_cast<UINT>(s_aiResTbl[i][1])));

	m_ctrlStatisticsFrm.SetText(GetResString(IDS_STATISTICS));
	m_ctlSharedFilesList.Localize();
}

void CSharedFilesWnd::OnBnClickedOpenincomingfolder()
{
	ShellOpenFile(g_App.m_pPrefs->GetIncomingDir());
}

void CSharedFilesWnd::OnBnClickedSwitchAllKnown()
{
	if (m_ctlSharedFilesList.IsKnownFilesView())
		m_ctlSharedFilesList.ShowFileList(g_App.m_pSharedFilesList);
	else
		m_ctlSharedFilesList.ShowKnownList();
}

void CSharedFilesWnd::OnDestroy()
{
	CResizableDialog::OnDestroy();
	DestroyIcon(GetFilesStatic()->SetIcon(oldFilesIcon));	
}
@


1.45
log
@Reduced H-file dependency.
@
text
@d56 10
a65 6
	pop_bar.SetGradientColors(GetSysColor(COLOR_INACTIVECAPTION),GetSysColor(COLOR_ACTIVECAPTION));
	pop_bar.SetTextColor(GetSysColor(COLOR_CAPTIONTEXT));
	pop_baraccept.SetGradientColors(GetSysColor(COLOR_INACTIVECAPTION),GetSysColor(COLOR_ACTIVECAPTION));
	pop_baraccept.SetTextColor(GetSysColor(COLOR_CAPTIONTEXT));
	pop_bartrans.SetGradientColors(GetSysColor(COLOR_INACTIVECAPTION),GetSysColor(COLOR_ACTIVECAPTION));
	pop_bartrans.SetTextColor(GetSysColor(COLOR_CAPTIONTEXT));
d125 1
d201 10
@


1.44
log
@GetKnownFilePriorityString() functionality moved to knownfile class.
@
text
@d21 1
@


1.43
log
@Debug code removed... Happy New Year to Everyone!
@
text
@d252 1
a252 1
		CString	strPriority = GetKnownFilePriorityString(pKnownFile);
@


1.42
log
@Fixed missed percentage in the shared files statistics on the very first drawing {muleteer};
Temporary added debug printing.
@
text
@a170 1
#if 0
a171 4
#else
	buffer.Format(_T("dbg(%I64u/%I64u %u/%u) %s"), cur_file->statistic.GetTransferred() / 1024ui64, g_App.m_pKnownFilesList->m_qwNumTransferred / 1024ui64, static_cast<uint32>(cur_file->statistic.GetTransferred() / 1024ui64), static_cast<uint32>(g_App.m_pKnownFilesList->m_qwNumTransferred / 1024ui64), cur_file->GetFileName());
	SetDlgItemText(IDC_FILEBOX, buffer);
#endif
@


1.41
log
@Suppressed level 4 warnings; Formatting.
@
text
@d146 1
a148 1
	pop_bartrans.SetShowPercent();			
d152 1
a154 1
	pop_bar.SetShowPercent();			
d159 1
a161 1
	pop_baraccept.SetShowPercent();
d171 1
d173 4
@


1.40
log
@Fix a bug introduced in revision 1.39 {muleteer}.
@
text
@d146 2
a147 2
	pop_bartrans.SetRange32(0,g_App.m_pKnownFilesList->m_iNumTransferred/1024);
	pop_bartrans.SetPos(cur_file->statistic.GetTransferred()/1024);
d352 1
a352 1
	for (uint32 i = 0; i < ELEMENT_COUNT(s_aiResTbl); i++)
@


1.39
log
@Reverted back #include was moved to C-file;
Fix a bug enlightened by level 4 warnings {Aw3}.
@
text
@d183 5
a187 1
		OnLvnItemActivateSflist(0, 0);
@


1.38
log
@#include was moved to C-file.
Suppressed level 4 warnings.
@
text
@a21 1
#include "IconStatic.h"
a129 1
	NOPRM(pResult);
d137 1
@


1.37
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@a17 4

// SharedFilesWnd.cpp : implementation file
//

d22 1
a29 2
// CSharedFilesWnd dialog

d130 3
d135 2
a136 1
		sfl_itemdata* itemdata = (sfl_itemdata*)m_ctlSharedFilesList.GetItemData(m_ctlSharedFilesList.GetSelectionMark());
d144 1
d177 1
a177 1
	OnLvnItemActivateSflist(pNMHDR,pResult);
d183 2
a184 5
	if((pMsg->message == WM_KEYUP))
	{
		if (pMsg->hwnd == GetDlgItem(IDC_SFLIST)->m_hWnd)
			OnLvnItemActivateSflist(0,0);
	}
d194 1
a194 1
	NMHDR* pNMHDR = (NMHDR*)lParam;
d196 1
a196 1
	switch(pNMHDR->code)
d217 1
a217 1
	int						iControlId = CWnd::FromHandle(pNotify->ti->hWnd)->GetDlgCtrlID();
d221 1
a221 1
		int				iSel = GetItemUnderMouse(&m_ctlSharedFilesList);
d231 1
a231 1
		CKnownFile		*pKnownFile = pItemData->knownFile;
d236 2
a237 2
		CString			strTemp;
		CString			strInfo;
d249 1
a249 1
		CString		strPriority = GetKnownFilePriorityString(pKnownFile);
d260 1
a260 1
		EnumPartFileRating		eRated = pKnownFile->GetFileRating();
d271 2
a272 2
		uint64		qwA = pKnownFile->statistic.GetRequests();
		uint64		qwB = pKnownFile->statistic.GetAllTimeRequests();
d289 1
a289 1
		double		dblCR = pKnownFile->statistic.GetCompleteReleases();
d300 1
a300 1
			uint16		nCompleteSourcesCountLo, nCompleteSourcesCountHi;
d323 1
a323 1
		SHFILEINFO		shfi;
a363 1
	{
a364 1
	}
a365 1
	{
a366 1
	}
@


1.36
log
@renamed 3 variables
@
text
@d110 1
a110 1
	m_ttip.SetDelayTime(TTDT_INITIAL, g_App.g_pPrefs->GetToolTipDelay()*1000);
d189 1
a189 1
	if (g_App.g_pPrefs->GetToolTipDelay() != 0)
d361 1
a361 1
	ShellOpenFile(g_App.g_pPrefs->GetIncomingDir());
@


1.35
log
@correction for string processing by tooltip notify. thanks Aw3
@
text
@d74 1
a74 1
	m_ctrlStatisticsFrm.Init(IDI_SMALLSTATISTICS, &g_eMuleApp.m_pdlgEmule->m_themeHelper);
d110 1
a110 1
	m_ttip.SetDelayTime(TTDT_INITIAL, g_eMuleApp.m_pGlobPrefs->GetToolTipDelay()*1000);
d130 1
a130 1
	g_eMuleApp.m_pSharedFilesList->Reload();
d147 1
a147 1
	pop_bartrans.SetRange32(0,g_eMuleApp.m_pKnownFilesList->m_iNumTransferred/1024);
d153 1
a153 1
	pop_bar.SetRange32(0,g_eMuleApp.m_pKnownFilesList->m_iNumRequested);
d160 1
a160 1
	pop_baraccept.SetRange32(0,g_eMuleApp.m_pKnownFilesList->m_iNumAccepted);
d189 1
a189 1
	if (g_eMuleApp.m_pGlobPrefs->GetToolTipDelay() != 0)
d361 1
a361 1
	ShellOpenFile(g_eMuleApp.m_pGlobPrefs->GetIncomingDir());
d368 1
a368 1
		m_ctlSharedFilesList.ShowFileList(g_eMuleApp.m_pSharedFilesList);
@


1.34
log
@fixed hanging tooltip by focus switch; the "OnToolTipNotify" replaced over OnNotify because it works faster as using ON_NOTIFY_EX_RANGE(...)
@
text
@d205 1
a205 1
			pNotify->ti->sTooltip = GetInfo4ToolTip(pNotify);
d218 1
a218 1
CString  CSharedFilesWnd::GetInfo4ToolTip(NM_PPTOOLTIP_DISPLAY *pNotify)
a220 1
	CString					strInfo(_T(""));
d227 1
a227 1
			return FALSE;
d232 1
a232 1
			return FALSE;
d237 1
a237 1
			return FALSE;
d240 1
d331 1
a332 2

	return strInfo;
@


1.33
log
@IDS_SF_STATISTICS renamed into IDS_STATISTICS.
@
text
@a122 1
	ON_NOTIFY_EX_RANGE(UDM_TOOLTIP_DISPLAY,0,0xFFFF,OnToolTipNotify)
d194 20
d215 4
a218 1
BOOL CSharedFilesWnd::OnToolTipNotify(UINT id, NMHDR *pNMH, LRESULT *pResult)
a219 1
	NM_PPTOOLTIP_DISPLAY	*pNotify = (NM_PPTOOLTIP_DISPLAY*)pNMH;
d221 1
a221 1
	CString					strInfo;
a331 1
	pNotify->ti->sTooltip = strInfo;
d333 1
a333 1
	return TRUE;
@


1.32
log
@Separate GetFileTypeString for search type.
@
text
@d336 1
a336 1
	m_ctrlStatisticsFrm.SetText(GetResString(IDS_SF_STATISTICS));
@


1.31
log
@Removed locking of Reload button; Removed unused code.
@
text
@d235 1
a235 1
			pKnownFile->GetFileTypeString(true),
@


1.30
log
@Use a method instead of public member.
@
text
@a38 1
	//shownFileHash[0]=0;
d58 1
a58 1
	
d60 1
a60 3
	//Lucas 30-Dec - Bug not loading when many files shared in Win9x
	//	g_eMuleApp.m_pSharedFilesList->SetOutputCtrl(&m_ctlSharedFilesList);
		
d67 1
a67 1
		
d69 1
a69 1
	
d79 1
a79 1
	
a105 5
	if (g_eMuleApp.m_pdlgEmule->m_iFilesToBeHashed != 0)
	{
		GetDlgItem(IDC_RELOADSHAREDFILES)->EnableWindow(false);
	}

d131 1
a131 8
	GetDlgItem(IDC_RELOADSHAREDFILES)->EnableWindow(false);
	g_eMuleApp.m_pSharedFilesList->Reload(true);
}

void CSharedFilesWnd::Check4StatUpdate(CKnownFile* file)
{
	if (!md4cmp(file->GetFileHash(),shownFileHash))
		ShowDetails(file);
d145 1
a145 1
	ASSERT( cur_file != NULL);
a172 2
	md4cpy(shownFileHash,cur_file->GetFileHash());

d193 1
a193 1
   return CResizableDialog::PreTranslateMessage(pMsg);
@


1.29
log
@Unified display of file permission and upload file priority.
@
text
@d238 1
a238 1
		if (g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.m_ctlSharedFilesList.m_allYaKnow)
d364 1
a364 1
	if (g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.m_ctlSharedFilesList.m_allYaKnow)
d366 1
a366 1
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.m_ctlSharedFilesList.ShowFileList(g_eMuleApp.m_pSharedFilesList);
d370 1
a370 1
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.m_ctlSharedFilesList.ShowKnownList();
@


1.28
log
@Moved GetItemUnderMouse to otherfunctions.
@
text
@d248 1
a248 48
		uint32		dwResId;

		if (pKnownFile->IsULAutoPrioritized())
		{
			switch (pKnownFile->GetULPriority())
			{
			case PR_LOW:
				dwResId = IDS_PRIOAUTOLOW;
				break;
			case PR_NORMAL:
				dwResId = IDS_PRIOAUTONORMAL;
				break;
			case PR_HIGH:
				dwResId = IDS_PRIOAUTOHIGH;
				break;
			case PR_RELEASE:
				dwResId = IDS_PRIOAUTORELEASE;
				break;
			}
		}
		else
		{
			switch (pKnownFile->GetULPriority())
			{
			case PR_VERYLOW:
				dwResId = IDS_PRIOVERYLOW;
				break;
			case PR_LOW:
				dwResId = IDS_PRIOLOW;
				break;
			case PR_NORMAL:
				dwResId = IDS_PRIONORMAL;
				break;
			case PR_HIGH:
				dwResId = IDS_PRIOHIGH;
				break;
			case PR_RELEASE:
				dwResId = IDS_PRIORELEASE;
				break;
			}
		}

		CString		strPriority;

		if (pKnownFile->GetJumpstartEnabled())
			strPriority.Format(_T("JumpStart[%s]"), GetResString(dwResId));
		else
			GetResString(&strPriority, dwResId);
d305 1
a305 1
					strTemp.Empty();
@


1.27
log
@Added 'Folder' to Search & Shared Files tooltips.
@
text
@a212 28
int CSharedFilesWnd::GetItemUnderMouse(CListCtrl* ctrl)
{
	EMULE_TRY

	CPoint			pt;

	::GetCursorPos(&pt);
	ctrl->ScreenToClient(&pt);

	LVHITTESTINFO	hit, subhit;

	hit.pt = pt;
	subhit.pt = pt;
	ctrl->SubItemHitTest(&subhit);

	int				iSel = ctrl->HitTest(&hit);

	if (iSel != LB_ERR && (hit.flags & LVHT_ONITEM))
	{
		if (subhit.iSubItem == 0)
			return iSel;
	}

	EMULE_CATCH

	return LB_ERR;
}

@


1.26
log
@Minor change in tooltips.
@
text
@d393 4
@


1.25
log
@Correction in tooltips.
@
text
@d325 1
a325 1
		strInfo.Format(_T("<t=2><b>%s</b><br><t=2>%s<br><t=2>%s<br><hr=100%%><br><b>%s:<t></b>%s (%u %s)<br><b>%s:<t></b>%s<br><b>%s:<t></b>%s<br><b>%s:<t></b>%s"),
d329 1
a329 1
			GetResString(IDS_DL_SIZE), CastItoXBytes(pKnownFile->GetFileSize()), pKnownFile->GetFileSize(), GetResString(IDS_BYTES),
@


1.24
log
@corrections for shared files tooltip
@
text
@d267 1
a267 6
		{
			if (!pKnownFile->GetSharedFile())
				GetResString(&strTemp, IDS_KNOWNFILES);
			else
				GetResString(&strTemp, IDS_SHAREDFILES);
		}
d318 1
a318 1
		CString	strPriority;
d374 2
a375 1
			uint16 nCompleteSourcesCountLo, nCompleteSourcesCountHi;
d380 1
a380 1
					strTemp = _T("");
@


1.23
log
@Enabled shared files view permission settings (all, friends only, noone).
(have been reminded of this forgotten column when I saw it in tooltips :))
@
text
@d345 1
d371 25
a395 1
			strInfo.AppendFormat(_T("<br><b>%s:<t></b>%0.2f (%0.2f)"), GetResString(IDS_SF_COMPLETESRC), dblCR, (double)qwB / qwA);
@


1.22
log
@Added tooltips to the Search & Shared Files lists.
@
text
@d336 1
a336 1
			GetResString(IDS_PERMISSION), GetResString(IDS_FSTATUS_PUBLIC),
@


1.21
log
@Simplified way to display list labels with count.
@
text
@d115 9
d131 1
d201 3
a203 3
   if((pMsg->message == WM_KEYUP))
   {
	   if (pMsg->hwnd == GetDlgItem(IDC_SFLIST)->m_hWnd)
d205 5
a209 1
   }
d213 170
@


1.20
log
@Updated Reload button disable behavior to handle hashing on client start
Minor order change on preferences
@
text
@a202 1
		{ IDC_TRAFFIC_TEXT, IDS_SF_FILES },
@


1.19
log
@Reload button now is disabled whenever there are files to be hashed
@
text
@d46 2
a47 1
void CSharedFilesWnd::DoDataExchange(CDataExchange* pDX){
d56 2
a57 1
BOOL CSharedFilesWnd::OnInitDialog(){
d71 1
a71 1
	oldFilesIcon = GetFilesStatic()->SetIcon(GetFilesIcon()); //[TwoBottle Mod]
d108 6
a113 1
	
a126 3

// CSharedFilesWnd message handlers

d133 2
a134 1
void CSharedFilesWnd::Check4StatUpdate(CKnownFile* file){
d141 2
a142 2
	if (m_ctlSharedFilesList.GetSelectionMark() != (-1) ) {
		//--- xrmb:parttraffic ---
a143 1

a144 1
		//--- :xrmb ---
d148 2
a149 1
void CSharedFilesWnd::ShowDetails(CKnownFile* cur_file) {
a169 2

	
d183 2
a184 1
void CSharedFilesWnd::OnNMClickSflist(NMHDR *pNMHDR, LRESULT *pResult){
d191 2
a192 1
   if((pMsg->message == WM_KEYUP)){
a243 1
	//Resources cleanup - [TwoBottle Mod]
@


1.18
log
@Corrected update of list title after language change (number of files in the list was lost);
Remake for display '&' in file name;
Unified localization; minor improvements.
@
text
@d125 1
@


1.17
log
@added button to toggle between known and shared files + minor changes
@
text
@d152 1
a152 1
	GetDlgItem(IDC_STRANSFERRED)->SetWindowText(CastItoXBytes(cur_file->statistic.GetTransferred()));
d158 1
a158 1
	GetDlgItem(IDC_SREQUESTED)->SetWindowText(buffer);
d164 1
a164 1
	GetDlgItem(IDC_SACCEPTED)->SetWindowText(buffer);
d167 1
a167 1
	GetDlgItem(IDC_STRANSFERRED2)->SetWindowText(CastItoXBytes(cur_file->statistic.GetAllTimeTransferred()));
d170 1
a170 1
	GetDlgItem(IDC_SREQUESTED2)->SetWindowText(buffer);
d173 1
a173 1
	GetDlgItem(IDC_SACCEPTED2)->SetWindowText(buffer);
d177 1
a177 3
	CString title=cur_file->GetFileName();
	title.Replace(_T("&"),_T("&&")); //DonGato: FIX for & showing
	GetDlgItem(IDC_FILEBOX)->SetWindowText(title);
d196 20
a216 13
	GetDlgItem(IDC_TRAFFIC_TEXT)->SetWindowText(GetResString(IDS_SF_FILES));
	GetDlgItem(IDC_RELOADSHAREDFILES)->SetWindowText(GetResString(IDS_SF_RELOAD));
	GetDlgItem(IDC_OPENINCOMINGFOLDER)->SetWindowText(GetResString(IDS_SF_OPENINCOMINGFOLDER));
	m_ctrlStatisticsFrm.SetText(GetResString(IDS_SF_STATISTICS));
	GetDlgItem(IDC_FILEBOX)->SetWindowText(GetResString(IDS_FILEBOX));
	GetDlgItem(IDC_CURSESSION_LBL)->SetWindowText(GetResString(IDS_SF_CURRENT));
	GetDlgItem(IDC_TOTAL_LBL)->SetWindowText(GetResString(IDS_SF_TOTAL2));
	GetDlgItem(IDC_FSTATIC6)->SetWindowText(GetResString(IDS_SF_TRANS));
	GetDlgItem(IDC_FSTATIC5)->SetWindowText(GetResString(IDS_SF_ACCEPTED));
	GetDlgItem(IDC_FSTATIC4)->SetWindowText(GetResString(IDS_SF_REQUESTED));
	GetDlgItem(IDC_FSTATIC9)->SetWindowText(GetResString(IDS_SF_TRANS));
	GetDlgItem(IDC_FSTATIC8)->SetWindowText(GetResString(IDS_SF_ACCEPTED));
	GetDlgItem(IDC_FSTATIC7)->SetWindowText(GetResString(IDS_SF_REQUESTED));
@


1.16
log
@Formatting, comments, and name changes. Factored various UI update methods out and modified to use async. messaging instead of sync. call.
@
text
@d60 1
a60 1
	// g_eMuleApp.m_pSharedFilesList->SetOutputCtrl(&m_ctlSharedFilesList);
d86 1
d116 1
d219 12
@


1.15
log
@Formatting, comments, and name changes.
Removed #includes for "memcpy_amd.h".
@
text
@d48 1
a48 1
	DDX_Control(pDX, IDC_SFLIST, sharedfilesctrl);
d58 1
a58 1
	sharedfilesctrl.Init();
d60 1
a60 1
	// g_eMuleApp.m_pSharedFilesList->SetOutputCtrl(&sharedfilesctrl);
d133 1
a133 1
	if (sharedfilesctrl.GetSelectionMark() != (-1) ) {
d135 1
a135 1
		sfl_itemdata* itemdata = (sfl_itemdata*)sharedfilesctrl.GetItemData(sharedfilesctrl.GetSelectionMark());
d196 1
a196 1
	sharedfilesctrl.Localize();
@


1.14
log
@Formatting, comments, and name changes.
@
text
@a25 1
#include "memcpy_amd.h"
@


1.13
log
@Removed all #ifndef AMDs and consolidated CPU specific behavior in md4cpy() and new method memcpy2() (come up with a better name if you can :P ).
@
text
@d147 1
a147 1
	pop_bartrans.SetRange32(0,g_eMuleApp.m_pKnownFilesList->transferred/1024);
d153 1
a153 1
	pop_bar.SetRange32(0,g_eMuleApp.m_pKnownFilesList->requested);
d160 1
a160 1
	pop_baraccept.SetRange32(0,g_eMuleApp.m_pKnownFilesList->accepted);
@


1.12
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@a173 1
	#ifndef AMD
a174 3
	#else
	memcpy_amd(shownFileHash,cur_file->GetFileHash(),16);
	#endif
@


1.11
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@d61 1
a61 1
	// theApp.sharedfiles->SetOutputCtrl(&sharedfilesctrl);
d76 1
a76 1
	m_ctrlStatisticsFrm.Init(IDI_SMALLSTATISTICS, &theApp.emuledlg->m_ThemeHelper);
d124 1
a124 1
	theApp.sharedfiles->Reload(true);
d147 1
a147 1
	pop_bartrans.SetRange32(0,theApp.knownfiles->transferred/1024);
d153 1
a153 1
	pop_bar.SetRange32(0,theApp.knownfiles->requested);
d160 1
a160 1
	pop_baraccept.SetRange32(0,theApp.knownfiles->accepted);
d219 1
a219 1
	ShellOpenFile(theApp.glob_prefs->GetIncomingDir());
@


1.10
log
@Little fix for properly showing &
@
text
@d102 1
a102 1
	AddAnchor(IDC_STRANSFERED,BOTTOM_LEFT);
d105 1
a105 1
	AddAnchor(IDC_STRANSFERED2,BOTTOM_LEFT);
d147 2
a148 2
	pop_bartrans.SetRange32(0,theApp.knownfiles->transfered/1024);
	pop_bartrans.SetPos(cur_file->statistic.GetTransfered()/1024);
d151 1
a151 1
	GetDlgItem(IDC_STRANSFERED)->SetWindowText(CastItoXBytes(cur_file->statistic.GetTransfered()));
d166 1
a166 1
	GetDlgItem(IDC_STRANSFERED2)->SetWindowText(CastItoXBytes(cur_file->statistic.GetAllTimeTransfered()));
@


1.9
log
@minor changes (use md4... instead of mem...)
@
text
@d181 1
@


1.8
log
@unicode cleanup
@
text
@d128 2
a129 1
	if (!memcmp(file->GetFileHash(),shownFileHash ,16)) ShowDetails(file);
d175 1
a175 1
	memcpy(shownFileHash,cur_file->GetFileHash(),16);
@


1.7
log
@memcpy() optimized for AMD (faster in 2-2.5 times). AMD only. Compile with tag AMD
@
text
@d155 1
a155 1
	buffer.Format("%u",cur_file->statistic.GetRequests());
d158 1
a158 1
	buffer.Format("%u",cur_file->statistic.GetAccepts());
d167 1
a167 1
	buffer.Format("%u",cur_file->statistic.GetAllTimeRequests());
d170 1
a170 1
	buffer.Format("%u",cur_file->statistic.GetAllTimeAccepts());
@


1.6
log
@code cleanup
@
text
@d26 1
d173 1
d175 3
@


1.5
log
@fixed resource leak
@
text
@d143 1
a143 1
	char buffer[100];
d154 1
a154 1
	sprintf(buffer,"%u",cur_file->statistic.GetRequests());
d157 1
a157 1
	sprintf(buffer,"%u",cur_file->statistic.GetAccepts());
d166 1
a166 1
	sprintf(buffer,"%u",cur_file->statistic.GetAllTimeRequests());
d169 1
a169 1
	sprintf(buffer,"%u",cur_file->statistic.GetAllTimeAccepts());
@


1.5.4.1
log
@27a partial merge
@
text
@d145 2
a146 2
	pop_bartrans.SetRange32(0,theApp.knownfiles->transferred/1024);
	pop_bartrans.SetPos(cur_file->statistic.GetTransferred()/1024);
d149 1
a149 1
	GetDlgItem(IDC_STRANSFERED)->SetWindowText(CastItoXBytes(cur_file->statistic.GetTransferred()));
d164 1
a164 1
	GetDlgItem(IDC_STRANSFERED2)->SetWindowText(CastItoXBytes(cur_file->statistic.GetAllTimeTransferred()));
@


1.4
log
@open containing and incoming folders in shared files
@
text
@d68 2
a69 2
	
	((CStatic*)GetDlgItem(IDC_FILES_ICO))->SetIcon((HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_SHAREDFILES), IMAGE_ICON, 16, 16, 0));
d115 1
d213 7
@


1.3
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d85 1
d114 1
d196 1
d209 4
@


1.2
log
@.26b port
@
text
@d27 5
@


1.1
log
@*** empty log message ***
@
text
@d140 2
a141 2
	CastItoXBytes(cur_file->statistic.GetTransfered(),buffer);
	GetDlgItem(IDC_STRANSFERED)->SetWindowText(buffer);
d155 2
a156 2
	CastItoXBytes(cur_file->statistic.GetAllTimeTransfered(),buffer);
	GetDlgItem(IDC_STRANSFERED2)->SetWindowText(buffer);
@


1.1.4.1
log
@updating this branch...
@
text
@@

