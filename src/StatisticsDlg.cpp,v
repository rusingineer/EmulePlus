head	1.184;
access;
symbols
	PublicRelease_1_2e:1.181
	Interim_Release_1-2e_RC1:1.180
	PublicRelease_1_2d:1.178
	Interim_Release_1-2d_RC1:1.178
	Interim_Release_1-2d_beta1:1.178
	PublicRelease_1_2c:1.173
	Interim_Release_1-2c_RC1:1.173
	Interim_Release_1-2c_beta1:1.172
	PublicRelease_1_2b:1.170
	Interim_Release_1-2b_RC1:1.170
	PublicRelease_1_2a:1.168
	Interim_Release_1-2a_RC1:1.168
	Interim_Release_1-2a_beta2:1.165
	Interim_Release_1-2a_beta1:1.164
	PublicRelease_1_2:1.162
	Interim_Release_1-2_RC1:1.161
	Interim_Release_1-2_beta1:1.161
	PublicRelease_1_1g:1.158
	Interim_Release_1-1g_RC3:1.158
	Interim_Release_1-1g_RC2:1.158
	Interim_Release_1-1g_RC1:1.158
	Interim_Release_1-1g_beta2:1.154
	Interim_Release_1-1g_beta1:1.149
	PublicRelease_1_1f:1.144
	Interim_Release_1-1f_RC1:1.144
	PublicRelease_1_1e:1.143
	Interim_Release_1-1e_RC2:1.143
	Interim_Release_1-1e_RC1:1.142
	Interim_Release_1-1e_beta1:1.139
	PublicRelease_1_1d:1.135
	Interim_Release_1-1d_RC1:1.135
	PublicRelease_1_1c:1.134
	Interim_Release_1-1c_RC1:1.134
	Interim_Release_1-1c_beta2:1.134
	Interim_Release_1-1c_beta1:1.132
	PublicRelease_1_1b:1.131
	Interim_Release_1-1b_RC1:1.131
	PublicRelease_1_1a:1.130
	Interim_Release_1-1a_RC2:1.130
	Interim_Release_1-1a_RC1:1.130
	Interim_Release_1-1a_beta2:1.128
	Interim_Release_1-1a_beta1:1.128
	PublicRelease_1_1:1.126
	Interim_Release_1-1_beta1:1.126
	PublicRelease_1o:1.124
	Interim_Release_1o_RC1:1.123
	Interim_Release_1o_beta1:1.122
	PublicRelease_1n:1.121
	Interim_Release_1n_RC2:1.121
	Interim_Release_1n_RC1:1.121
	Interim_Release_1n_beta2:1.119
	Interim_Release_1n_beta1:1.115
	PublicRelease_1m:1.115
	Interim_Release_1m_beta1:1.114
	PublicRelease_1l:1.113
	Interim_Release_1l_RC3:1.113
	Interim_Release_1l_RC2:1.113
	Interim_Release_1l_RC1:1.113
	Interim_Release_1l_beta2:1.113
	Interim_Release_1l_beta1:1.112
	PublicRelease_1k:1.107
	Interim_Release_1k_RC4:1.106
	Interim_1k_RC3:1.105
	Interim_1k_RC2:1.105
	Interim_Release_1k_RC1:1.105
	Interim_Release_1k_beta5:1.103
	Intrerim_Release_1k_beta4:1.103
	Interim_Release_1k_beta1:1.100
	PublicRelease_1j:1.93
	Interim_Release_1J_RC3:1.93
	Interim_Release_1j_RC3:1.93
	Interim_Release_1j_RC2:1.93
	Interim_Release_1j_RC1:1.93
	Interim_Release_1j_beta2:1.93
	Interim_Release_1j_beta1:1.93
	PublicRelease_1i:1.93
	Interim_Release_1i_RC6:1.93
	Interim_Release_1i_RC3:1.90
	Interim_Release_1i_RC2:1.90
	Interim_Release_1i_RC1:1.88
	Interim_Release_1i_beta3:1.86
	Interim_Release_1i_beta2:1.85
	Interim_Release_1i_beta1:1.77
	PublicRelease_1h:1.68
	Interim_Release_1h_rc2:1.68
	Interim_Release_1h_RC1:1.67
	Interim_Release_1h_beta2:1.63
	Interim_Release_1h_beta1_now:1.59
	Interim_Release_1h_beta1:1.59
	PublicRelease_1g:1.54
	Interim_Release_1g_RC6_Final:1.54
	Interim_Release_1g_RC6:1.54
	Interim_Release_1g_RC5:1.54
	Interim_Release_1g_RC4:1.54
	Interim_Release_1g_RC3:1.54
	Interim_Release_1g_beta2:1.50
	Interim_Release_1g_beta1:1.48
	Interim_Release_1f_RC4:1.45
	Interim_Release_1f_RC3:1.45
	Interim_Release_1f_RC2:1.45
	Interim_Release_1f_RC:1.45
	Interim_Release_1f_beta2:1.45
	Interim_Release_1f_beta1:1.42
	PublicRelease_1e:1.41
	Interim_Release_1e_RC2:1.41
	Interim_Release_1e_RC:1.41
	Interim_Release_1e_beta3:1.41
	Interim_Release_1e_beta2:1.41
	Interim_Release_1e_beta2_before_kuchin:1.41
	Interim_Release_1e_beta1:1.40
	PublicRelease_1c:1.38
	featurestest:1.37.0.2
	Interim_Release_1c_RC:1.37
	Interim_Release_1c_beta2:1.36
	Interim_Release_1c_beta1:1.32
	threaded_downloadqueue:1.32.0.2
	PublicRelease_1b:1.31
	Interim_Release_1b_beta2:1.31
	Interim_Release_1b_beta1:1.31
	proxydeadlake:1.31.0.4
	PublicRelease_1a:1.31
	Interim_Release_1a_beta2:1.31
	BerkeleyDb:1.31.0.2
	Interim_Release_1a_beta1:1.31
	PublicRelease_1:1.29
	goldfish:1.29
	eMulePlus_1_RC2:1.27
	eMulePlus_26b_1RC1:1.24
	PreRelease_26b_i0e:1.24
	before_26d_merge:1.23
	Interim_Release_26b_i0d:1.17
	Interim_Release_26b_i0c:1.9
	Interim_Release_26b_i0b:1.8
	Interim_Release_26b_i0a:1.8
	systraydlg:1.3.0.6
	plus26based:1.3.0.4
	Interim_Release_25b_i0b:1.3
	Proxy_Dev:1.3
	Interim_Release_25b_i0a:1.3.2.1
	proxytest:1.3.2.1.0.2
	official_sockets:1.3.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.184
date	2009.10.28.04.35.00;	author aw3;	state Exp;
branches;
next	1.183;

1.183
date	2009.08.01.01.42.49;	author aw3;	state Exp;
branches;
next	1.182;

1.182
date	2009.05.01.04.20.41;	author aw3;	state Exp;
branches;
next	1.181;

1.181
date	2009.04.08.04.05.38;	author aw3;	state Exp;
branches;
next	1.180;

1.180
date	2008.11.03.05.45.23;	author aw3;	state Exp;
branches;
next	1.179;

1.179
date	2008.10.27.03.42.59;	author aw3;	state Exp;
branches;
next	1.178;

1.178
date	2008.02.09.20.24.24;	author eklmn;	state Exp;
branches;
next	1.177;

1.177
date	2008.02.03.02.11.36;	author aw3;	state Exp;
branches;
next	1.176;

1.176
date	2008.01.14.21.32.57;	author eklmn;	state Exp;
branches;
next	1.175;

1.175
date	2007.10.31.18.18.57;	author fuxie-dk;	state Exp;
branches;
next	1.174;

1.174
date	2007.10.11.18.09.30;	author fuxie-dk;	state Exp;
branches;
next	1.173;

1.173
date	2007.07.08.22.31.19;	author kush_eplus;	state Exp;
branches;
next	1.172;

1.172
date	2007.02.18.16.00.49;	author eklmn;	state Exp;
branches;
next	1.171;

1.171
date	2007.02.17.10.41.42;	author eklmn;	state Exp;
branches;
next	1.170;

1.170
date	2006.12.10.20.58.39;	author aw3;	state Exp;
branches;
next	1.169;

1.169
date	2006.12.05.21.59.24;	author eklmn;	state Exp;
branches;
next	1.168;

1.168
date	2006.07.31.03.44.08;	author aw3;	state Exp;
branches;
next	1.167;

1.167
date	2006.07.27.01.58.52;	author aw3;	state Exp;
branches;
next	1.166;

1.166
date	2006.07.19.04.24.12;	author aw3;	state Exp;
branches;
next	1.165;

1.165
date	2006.05.22.03.45.00;	author aw3;	state Exp;
branches;
next	1.164;

1.164
date	2006.04.22.23.26.02;	author aw3;	state Exp;
branches;
next	1.163;

1.163
date	2006.04.05.01.37.26;	author aw3;	state Exp;
branches;
next	1.162;

1.162
date	2006.02.27.18.48.00;	author dongato;	state Exp;
branches;
next	1.161;

1.161
date	2006.01.25.05.37.54;	author aw3;	state Exp;
branches;
next	1.160;

1.160
date	2006.01.22.19.39.23;	author aw3;	state Exp;
branches;
next	1.159;

1.159
date	2005.12.29.05.23.00;	author aw3;	state Exp;
branches;
next	1.158;

1.158
date	2005.11.28.05.27.38;	author aw3;	state Exp;
branches;
next	1.157;

1.157
date	2005.11.28.03.11.13;	author aw3;	state Exp;
branches;
next	1.156;

1.156
date	2005.11.27.22.11.50;	author eklmn;	state Exp;
branches;
next	1.155;

1.155
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.154;

1.154
date	2005.11.11.05.54.48;	author aw3;	state Exp;
branches;
next	1.153;

1.153
date	2005.11.09.20.09.32;	author eklmn;	state Exp;
branches;
next	1.152;

1.152
date	2005.10.29.04.46.26;	author aw3;	state Exp;
branches;
next	1.151;

1.151
date	2005.10.04.03.27.25;	author aw3;	state Exp;
branches;
next	1.150;

1.150
date	2005.09.29.03.35.09;	author aw3;	state Exp;
branches;
next	1.149;

1.149
date	2005.08.24.04.01.24;	author aw3;	state Exp;
branches;
next	1.148;

1.148
date	2005.08.22.01.37.36;	author aw3;	state Exp;
branches;
next	1.147;

1.147
date	2005.08.21.17.58.39;	author aw3;	state Exp;
branches;
next	1.146;

1.146
date	2005.08.20.04.28.53;	author aw3;	state Exp;
branches;
next	1.145;

1.145
date	2005.08.01.15.26.43;	author aw3;	state Exp;
branches;
next	1.144;

1.144
date	2005.07.25.03.40.20;	author aw3;	state Exp;
branches;
next	1.143;

1.143
date	2005.06.28.03.55.34;	author aw3;	state Exp;
branches;
next	1.142;

1.142
date	2005.06.13.05.19.10;	author eklmn;	state Exp;
branches;
next	1.141;

1.141
date	2005.06.12.13.53.37;	author eklmn;	state Exp;
branches;
next	1.140;

1.140
date	2005.06.08.05.00.11;	author aw3;	state Exp;
branches;
next	1.139;

1.139
date	2005.06.04.06.59.54;	author eklmn;	state Exp;
branches;
next	1.138;

1.138
date	2005.03.28.08.44.49;	author bavariansnail;	state Exp;
branches;
next	1.137;

1.137
date	2005.03.28.02.53.58;	author aw3;	state Exp;
branches;
next	1.136;

1.136
date	2005.03.27.14.06.45;	author aw3;	state Exp;
branches;
next	1.135;

1.135
date	2005.03.03.04.41.09;	author aw3;	state Exp;
branches;
next	1.134;

1.134
date	2005.02.13.22.55.56;	author aw3;	state Exp;
branches;
next	1.133;

1.133
date	2005.02.02.07.15.52;	author aw3;	state Exp;
branches;
next	1.132;

1.132
date	2005.01.19.21.10.51;	author netwolf1;	state Exp;
branches;
next	1.131;

1.131
date	2004.12.16.22.48.00;	author aw3;	state Exp;
branches;
next	1.130;

1.130
date	2004.11.27.05.03.22;	author aw3;	state Exp;
branches;
next	1.129;

1.129
date	2004.11.22.06.17.54;	author aw3;	state Exp;
branches;
next	1.128;

1.128
date	2004.11.08.00.21.02;	author aw3;	state Exp;
branches;
next	1.127;

1.127
date	2004.10.25.20.41.53;	author aw3;	state Exp;
branches;
next	1.126;

1.126
date	2004.10.08.04.35.58;	author aw3;	state Exp;
branches;
next	1.125;

1.125
date	2004.10.01.17.16.23;	author aw3;	state Exp;
branches;
next	1.124;

1.124
date	2004.09.29.01.33.19;	author aw3;	state Exp;
branches;
next	1.123;

1.123
date	2004.09.25.07.25.10;	author aw3;	state Exp;
branches;
next	1.122;

1.122
date	2004.09.21.20.15.46;	author aw3;	state Exp;
branches;
next	1.121;

1.121
date	2004.08.27.16.26.35;	author aw3;	state Exp;
branches;
next	1.120;

1.120
date	2004.08.10.12.43.39;	author eklmn;	state Exp;
branches;
next	1.119;

1.119
date	2004.08.03.03.59.14;	author aw3;	state Exp;
branches;
next	1.118;

1.118
date	2004.08.02.04.28.59;	author aw3;	state Exp;
branches;
next	1.117;

1.117
date	2004.08.01.05.52.28;	author aw3;	state Exp;
branches;
next	1.116;

1.116
date	2004.07.30.15.09.07;	author eklmn;	state Exp;
branches;
next	1.115;

1.115
date	2004.06.23.02.13.00;	author aw3;	state Exp;
branches;
next	1.114;

1.114
date	2004.06.16.16.29.46;	author dongato;	state Exp;
branches;
next	1.113;

1.113
date	2004.05.07.05.01.40;	author aw3;	state Exp;
branches;
next	1.112;

1.112
date	2004.05.05.02.22.51;	author netwolf1;	state Exp;
branches;
next	1.111;

1.111
date	2004.05.03.09.59.44;	author netwolf1;	state Exp;
branches;
next	1.110;

1.110
date	2004.05.02.19.04.03;	author katsyonak;	state Exp;
branches;
next	1.109;

1.109
date	2004.05.02.15.51.35;	author katsyonak;	state Exp;
branches;
next	1.108;

1.108
date	2004.04.15.02.32.55;	author katsyonak;	state Exp;
branches;
next	1.107;

1.107
date	2004.04.08.00.23.32;	author aw3;	state Exp;
branches;
next	1.106;

1.106
date	2004.04.07.02.07.32;	author katsyonak;	state Exp;
branches;
next	1.105;

1.105
date	2004.03.27.17.22.13;	author eklmn;	state Exp;
branches;
next	1.104;

1.104
date	2004.03.26.23.16.59;	author aw3;	state Exp;
branches;
next	1.103;

1.103
date	2004.03.14.21.06.29;	author aw3;	state Exp;
branches;
next	1.102;

1.102
date	2004.03.06.07.01.57;	author aw3;	state Exp;
branches;
next	1.101;

1.101
date	2004.02.23.13.33.24;	author kush_eplus;	state Exp;
branches;
next	1.100;

1.100
date	2004.02.19.12.53.45;	author bavariansnail;	state Exp;
branches;
next	1.99;

1.99
date	2004.02.18.11.43.26;	author netwolf1;	state Exp;
branches;
next	1.98;

1.98
date	2004.02.17.13.36.06;	author dongato;	state Exp;
branches;
next	1.97;

1.97
date	2004.02.16.15.27.55;	author netwolf1;	state Exp;
branches;
next	1.96;

1.96
date	2004.02.15.19.48.35;	author eklmn;	state Exp;
branches;
next	1.95;

1.95
date	2004.02.15.11.55.58;	author morevit;	state Exp;
branches;
next	1.94;

1.94
date	2004.02.15.10.12.15;	author eklmn;	state Exp;
branches;
next	1.93;

1.93
date	2003.12.04.11.30.15;	author netwolf1;	state Exp;
branches;
next	1.92;

1.92
date	2003.11.25.21.30.07;	author katsyonak;	state Exp;
branches;
next	1.91;

1.91
date	2003.11.23.13.33.37;	author katsyonak;	state Exp;
branches;
next	1.90;

1.90
date	2003.11.11.15.55.42;	author kuchin;	state Exp;
branches;
next	1.89;

1.89
date	2003.11.11.08.26.26;	author kuchin;	state Exp;
branches;
next	1.88;

1.88
date	2003.11.03.17.01.36;	author eklmn;	state Exp;
branches;
next	1.87;

1.87
date	2003.11.02.13.52.22;	author dongato;	state Exp;
branches;
next	1.86;

1.86
date	2003.10.26.14.00.48;	author morevit;	state Exp;
branches;
next	1.85;

1.85
date	2003.10.24.01.21.20;	author morevit;	state Exp;
branches;
next	1.84;

1.84
date	2003.10.20.11.07.09;	author eklmn;	state Exp;
branches;
next	1.83;

1.83
date	2003.10.15.03.51.45;	author morevit;	state Exp;
branches;
next	1.82;

1.82
date	2003.10.14.17.06.28;	author eklmn;	state Exp;
branches;
next	1.81;

1.81
date	2003.10.08.12.56.34;	author morevit;	state Exp;
branches;
next	1.80;

1.80
date	2003.10.08.11.22.19;	author syrus77;	state Exp;
branches;
next	1.79;

1.79
date	2003.10.05.17.53.56;	author morevit;	state Exp;
branches;
next	1.78;

1.78
date	2003.10.05.13.23.47;	author bavariansnail;	state Exp;
branches;
next	1.77;

1.77
date	2003.10.05.10.31.36;	author eklmn;	state Exp;
branches;
next	1.76;

1.76
date	2003.10.03.18.08.49;	author dongato;	state Exp;
branches;
next	1.75;

1.75
date	2003.10.03.13.30.42;	author bavariansnail;	state Exp;
branches;
next	1.74;

1.74
date	2003.09.29.14.55.46;	author morevit;	state Exp;
branches;
next	1.73;

1.73
date	2003.09.27.21.23.14;	author dongato;	state Exp;
branches;
next	1.72;

1.72
date	2003.09.27.19.59.42;	author dongato;	state Exp;
branches;
next	1.71;

1.71
date	2003.09.24.10.46.59;	author morevit;	state Exp;
branches;
next	1.70;

1.70
date	2003.09.20.15.39.32;	author morevit;	state Exp;
branches;
next	1.69;

1.69
date	2003.09.19.00.13.38;	author morevit;	state Exp;
branches;
next	1.68;

1.68
date	2003.09.12.04.46.59;	author dongato;	state Exp;
branches;
next	1.67;

1.67
date	2003.09.06.14.08.12;	author dongato;	state Exp;
branches;
next	1.66;

1.66
date	2003.09.06.13.27.57;	author dongato;	state Exp;
branches;
next	1.65;

1.65
date	2003.09.06.05.31.36;	author dongato;	state Exp;
branches;
next	1.64;

1.64
date	2003.09.05.02.58.36;	author dongato;	state Exp;
branches;
next	1.63;

1.63
date	2003.09.04.19.31.24;	author dongato;	state Exp;
branches;
next	1.62;

1.62
date	2003.08.26.16.54.23;	author kuchin;	state Exp;
branches;
next	1.61;

1.61
date	2003.08.21.20.38.45;	author dongato;	state Exp;
branches;
next	1.60;

1.60
date	2003.08.21.00.56.03;	author dongato;	state Exp;
branches;
next	1.59;

1.59
date	2003.08.16.17.58.55;	author eklmn;	state Exp;
branches;
next	1.58;

1.58
date	2003.08.13.15.55.27;	author eklmn;	state Exp;
branches;
next	1.57;

1.57
date	2003.08.10.16.42.02;	author kuchin;	state Exp;
branches;
next	1.56;

1.56
date	2003.08.10.12.51.39;	author dongato;	state Exp;
branches;
next	1.55;

1.55
date	2003.08.10.04.42.50;	author eklmn;	state Exp;
branches;
next	1.54;

1.54
date	2003.06.15.13.41.14;	author partyckip;	state Exp;
branches;
next	1.53;

1.53
date	2003.06.10.22.53.32;	author syrus77;	state Exp;
branches;
next	1.52;

1.52
date	2003.06.10.09.36.47;	author kuchin;	state Exp;
branches;
next	1.51;

1.51
date	2003.06.09.15.14.38;	author kuchin;	state Exp;
branches;
next	1.50;

1.50
date	2003.06.09.12.51.05;	author kuchin;	state Exp;
branches;
next	1.49;

1.49
date	2003.06.05.16.20.12;	author netwolf1;	state Exp;
branches;
next	1.48;

1.48
date	2003.06.01.11.50.00;	author kuchin;	state Exp;
branches;
next	1.47;

1.47
date	2003.06.01.10.08.44;	author partyckip;	state Exp;
branches;
next	1.46;

1.46
date	2003.06.01.08.59.02;	author kuchin;	state Exp;
branches;
next	1.45;

1.45
date	2003.05.09.23.07.44;	author moosetea;	state Exp;
branches;
next	1.44;

1.44
date	2003.05.08.17.08.25;	author netwolf1;	state Exp;
branches;
next	1.43;

1.43
date	2003.05.06.23.11.20;	author moosetea;	state Exp;
branches;
next	1.42;

1.42
date	2003.04.29.08.37.45;	author kuchin;	state Exp;
branches;
next	1.41;

1.41
date	2003.04.20.17.27.35;	author kuchin;	state Exp;
branches;
next	1.40;

1.40
date	2003.03.25.12.39.36;	author cax2;	state Exp;
branches;
next	1.39;

1.39
date	2003.03.25.11.16.23;	author pooz;	state Exp;
branches;
next	1.38;

1.38
date	2003.03.23.09.29.15;	author kuchin;	state Exp;
branches;
next	1.37;

1.37
date	2003.03.22.02.42.10;	author cax2;	state Exp;
branches
	1.37.2.1;
next	1.36;

1.36
date	2003.03.20.18.09.31;	author cax2;	state Exp;
branches;
next	1.35;

1.35
date	2003.03.19.01.02.30;	author cax2;	state Exp;
branches;
next	1.34;

1.34
date	2003.03.17.22.15.54;	author cax2;	state Exp;
branches;
next	1.33;

1.33
date	2003.03.17.20.48.31;	author cax2;	state Exp;
branches;
next	1.32;

1.32
date	2003.03.13.19.17.31;	author emoulari;	state Exp;
branches;
next	1.31;

1.31
date	2003.02.21.13.40.16;	author kuchin;	state Exp;
branches;
next	1.30;

1.30
date	2003.02.21.12.01.29;	author lord_kiron;	state Exp;
branches;
next	1.29;

1.29
date	2003.02.21.04.46.03;	author cax2;	state Exp;
branches;
next	1.28;

1.28
date	2003.02.20.23.21.19;	author cax2;	state Exp;
branches;
next	1.27;

1.27
date	2003.02.20.07.25.22;	author cax2;	state Exp;
branches;
next	1.26;

1.26
date	2003.02.19.20.53.08;	author cax2;	state Exp;
branches;
next	1.25;

1.25
date	2003.02.19.19.37.37;	author kuchin;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.17.20.36.12;	author obaldin;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.16.22.01.49;	author lord_kiron;	state Exp;
branches;
next	1.22;

1.22
date	2003.02.16.14.31.05;	author dongato;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.14.13.54.13;	author lord_kiron;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.14.13.24.29;	author lord_kiron;	state Exp;
branches;
next	1.19;

1.19
date	2003.02.14.12.22.36;	author lord_kiron;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.13.20.56.40;	author lord_kiron;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.13.18.52.39;	author lord_kiron;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.13.18.43.16;	author lord_kiron;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.13.18.27.42;	author lord_kiron;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.13.18.00.06;	author lord_kiron;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.12.20.35.03;	author lord_kiron;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.12.18.04.00;	author lord_kiron;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.11.22.50.44;	author lord_kiron;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.11.19.38.44;	author lord_kiron;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.11.17.52.19;	author kuchin;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.10.19.24.50;	author cax2;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.09.18.39.42;	author kuchin;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.07.08.17.57;	author lord_kiron;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.06.21.32.36;	author lord_kiron;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.06.21.13.56;	author lord_kiron;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.24.14.05.54;	author kuchin;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2003.01.23.17.00.45;	author cax2;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.23;	author cax2;	state Exp;
branches;
next	;

1.3.2.1
date	2003.01.28.16.54.27;	author cax2;	state Exp;
branches;
next	;

1.3.4.1
date	2003.02.05.01.58.42;	author obaldin;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2003.02.08.18.03.55;	author obaldin;	state Exp;
branches;
next	;

1.37.2.1
date	2003.03.23.06.22.02;	author recdvst;	state Exp;
branches;
next	1.37.2.2;

1.37.2.2
date	2003.03.24.09.39.44;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.184
log
@Reduced H-file dependency.
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "SharedFileList.h"
#include "StatisticsDlg.h"
#include "UploadQueue.h"
#include "otherfunctions.h"
#include "ServerList.h"
#include "WebServer.h"
#include "IP2Country.h"
#include "ListenSocket.h"
#ifdef OLD_SOCKETS_ENABLED
#include "sockets.h"
#endif

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif


IMPLEMENT_DYNAMIC(CStatisticsDlg, CDialog)
CStatisticsDlg::CStatisticsDlg(CWnd* pParent /*=NULL*/)
	: CResizableDialog(CStatisticsDlg::IDD, pParent), m_DownloadOMeter(3), m_Statistics(3), m_UploadOMeter(3)
{
	m_oldcx = 0;
	m_oldcy = 0;

	//eklmn: add initial data in the list
	downrateHistory.push_front(0);
	uprateHistory.push_front(0);
	timeHistory.push_front(::GetTickCount());
}

CStatisticsDlg::~CStatisticsDlg()
{
	// v- eklmn: bugfix(06): resource cleanup in statistic
	if (m_imagelistStatTree) m_imagelistStatTree.DeleteImageList();
	if (stattree) stattree.DeleteAllItems();
	// ^- eklmn: bugfix(06): resource cleanup in statistic
}

void CStatisticsDlg::DoDataExchange(CDataExchange* pDX)
{
	CResizableDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_STATTREE, stattree);
}


BEGIN_MESSAGE_MAP(CStatisticsDlg, CResizableDialog)
	ON_WM_SIZE()
	ON_BN_CLICKED(IDC_BNMENU, OnMenuButtonClicked)
	ON_WM_DESTROY()	// eklmn: bugfix(00): resource cleanup due to CResizableDialog
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CStatisticsDlg message handlers
BOOL CStatisticsDlg::OnInitDialog()
{
	static const uint16 s_auIconResID[] =
	{
		IDI_TVI_GENERIC,		// Dots & Arrow (Default icon for stats)
		IDI_UP1DOWN1,			// Transfer
		IDI_CONNECTEDHIGH,		// Connection
		IDI_USERS,				// Clients
		IDI_PREF_SERVER,		// Server
		IDI_SHAREDFILES,		// Shared Files
		IDI_UPLOAD,				// Transfer > Upload
		IDI_DIRECTDOWNLOAD,		// Transfer > Download
		IDI_SMALLSTATISTICS,	// Session Sections
		IDI_TVI_CUMULATIVE,		// Cumulative Sections
		IDI_PREF_TWEAK,			// Records
		IDI_PREF_CONNECTION,	// Connection > General
		IDI_PREF_SCHEDULER,		// Time Section
		IDI_PREF_STATISTICS,	// Time > Averages and Projections
		IDI_TVI_DAY,			// Time > Averages and Projections > Daily
		IDI_TVI_MONTH,			// Time > Averages and Projections > Monthly
		IDI_TVI_YEAR			// Time > Averages and Projections > Yearly
	};

	EMULE_TRY

	CResizableDialog::OnInitDialog();
	EnableWindow(FALSE);

	stattree.Init();

	m_imagelistStatTree.Create(16, 16, g_App.m_iDfltImageListColorFlags | ILC_MASK, ARRSIZE(s_auIconResID), 0);
	FillImgLstWith16x16Icons(&m_imagelistStatTree, s_auIconResID, ARRSIZE(s_auIconResID));
	stattree.SetImageList(&m_imagelistStatTree, TVSIL_NORMAL);

	Localize();

	CRect rClient;
	GetClientRect(&rClient);

	m_DownloadOMeter.m_nYDecimals = 0;
	m_UploadOMeter.m_nYDecimals = 0;
	m_Statistics.m_nYDecimals = 0;
	int iStatYGrids=int((g_App.m_pPrefs->GetStatsMax()/10.0)+0.1)-1;
	if (iStatYGrids>10)
		iStatYGrids=int((g_App.m_pPrefs->GetStatsMax()/50.0)+0.1)-1;
	m_Statistics.m_nYGrids=iStatYGrids;

	// Setup download scope
	CRect rect;
	GetDlgItem(IDC_SCOPE_D)->GetWindowRect(rect);
	ScreenToClient(rect);
	m_DownloadOMeter.Create(WS_VISIBLE | WS_CHILD, rect, this);
	SetARange(true, g_App.m_pPrefs->GetMaxGraphDownloadRate() / 10);
	m_DownloadOMeter.SetYUnits(GetResString(IDS_KBYTESEC));
	//m_DownloadOMeter.SetXUnits(GetResString(IDS_TIME));
	CSize sDlMeter[2];
	sDlMeter[0].cx = 100 * rect.left / rClient.Width();
	sDlMeter[0].cy = 100 * rect.top / rClient.Height();
	sDlMeter[1].cx = 100 * rect.right / rClient.Width();
	sDlMeter[1].cy = 100 * rect.bottom / rClient.Height();

	// Setup upload scope
	GetDlgItem(IDC_SCOPE_U)->GetWindowRect(rect);
	ScreenToClient(rect);
	m_UploadOMeter.Create(WS_VISIBLE | WS_CHILD, rect, this);
	SetARange(false, g_App.m_pPrefs->GetMaxGraphUploadRate() / 10);
	m_UploadOMeter.SetYUnits(GetResString(IDS_KBYTESEC));
	//m_UploadOMeter.SetXUnits(GetResString(IDS_TIME));
	CSize sUpMeter[2];
	sUpMeter[0].cx = 100 * rect.left / rClient.Width();
	sUpMeter[0].cy = 100 * rect.top / rClient.Height();
	sUpMeter[1].cx = 100 * rect.right / rClient.Width();
	sUpMeter[1].cy = 100 * rect.bottom / rClient.Height();

	// Setup connections scope
	GetDlgItem(IDC_STATSSCOPE)->GetWindowRect(rect) ;
	ScreenToClient(rect) ;
	m_Statistics.Create(WS_VISIBLE | WS_CHILD, rect, this) ;
	m_Statistics.SetRanges(0, g_App.m_pPrefs->GetStatsMax());
	m_Statistics.autofitYscale=false; // DonGato
	m_Statistics.SetYUnits(_T("")) ;
	m_Statistics.SetXUnits(GetResString(IDS_TIME));

	CSize sStatistics[2];
	sStatistics[0].cx = 100 * rect.left / rClient.Width();
	sStatistics[0].cy = 100 * rect.top / rClient.Height();
	sStatistics[1].cx = 100 * rect.right / rClient.Width();
	sStatistics[1].cy = 100 * rect.bottom  / rClient.Height();

	m_byteStatGraphRatio = g_App.m_pPrefs->GetGraphRatio();		//Cax2 - Resize active connections line...

	RepaintMeters();

	if (g_App.m_pPrefs->GetStatsInterval() == 0) 
		GetDlgItem(IDC_STATTREE)->EnableWindow(false);

	UpdateData(FALSE);

	m_ilastMaxConnReached = 0;
	peakconnections = 0;
	totalconnectionchecks = 0;
	averageconnections = 0;
	activeconnections = 0;
	maxDown=0;
	maxDownavg=0;
	maxUp =					0;
	maxUpavg =				0;
	rateDown =				0;
	rateUp =				0;
	timeTransfers =			0;
	timeDownloads =			0;
	timeUploads =			0;
	start_timeTransfers =	0;
	start_timeDownloads =	0;
	start_timeUploads =		0;
	time_thisTransfer =		0;
	time_thisDownload =		0;
	time_thisUpload =		0;
	timeServerDuration =	0;
	time_thisServerDuration=0;
	cum_DL_maximal =		g_App.m_pPrefs->GetConnMaxDownRate();
	cum_DL_average = 0;
	cum_DL_max_average =	g_App.m_pPrefs->GetConnMaxAvgDownRate();

	cum_UL_maximal =		g_App.m_pPrefs->GetConnMaxUpRate();
	cum_UL_average = 0;
	cum_UL_max_average =	g_App.m_pPrefs->GetConnMaxAvgUpRate();

	AddAnchor(IDC_STATTREE,TOP_LEFT, BOTTOM_CENTER );

	AddAnchor(IDC_SCOPE_D, TOP_CENTER, CSize(100,34));
	AddAnchor(m_DownloadOMeter.m_hWnd, TOP_CENTER, CSize(100,34));
	AddAnchor(IDC_SCOPE_U, CSize(50,34), CSize(100,68));
	AddAnchor(m_UploadOMeter.m_hWnd, CSize(50,34), CSize(100,68));
	AddAnchor(IDC_STATSSCOPE, CSize(50,68), BOTTOM_RIGHT);
	AddAnchor(m_Statistics.m_hWnd, CSize(50,68), BOTTOM_RIGHT);

	AddAnchor(IDC_STATIC_D3, TOP_CENTER);
	AddAnchor(IDC_C0, TOP_RIGHT);
	AddAnchor(IDC_STATIC_D, TOP_RIGHT);
	AddAnchor(IDC_C0_3, TOP_RIGHT);
	AddAnchor(IDC_TIMEAVG1, TOP_RIGHT);
	AddAnchor(IDC_C0_2, TOP_RIGHT);
	AddAnchor(IDC_STATIC_D2, TOP_RIGHT);
	AddAnchor(m_Led1[0].m_hWnd, TOP_RIGHT);
	AddAnchor(m_Led1[1].m_hWnd, TOP_RIGHT);
	AddAnchor(m_Led1[2].m_hWnd, TOP_RIGHT);

	AddAnchor(IDC_STATIC_U, CSize(50,34));
	AddAnchor(IDC_C1, CSize(100,34));
	AddAnchor(IDC_STATIC_U2, CSize(100,34));
	AddAnchor(IDC_C1_3, CSize(100,34));
	AddAnchor(IDC_TIMEAVG2, CSize(100,34));
	AddAnchor(IDC_C1_2, CSize(100,34));
	AddAnchor(IDC_STATIC_U3, CSize(100,34));
	AddAnchor(m_Led2[0].m_hWnd, CSize(100,34));
	AddAnchor(m_Led2[1].m_hWnd, CSize(100,34));
	AddAnchor(m_Led2[2].m_hWnd, CSize(100,34));

	AddAnchor(IDC_STATIC_A, CSize(50,68));
	AddAnchor(IDC_S3, CSize(100,68));
	AddAnchor(IDC_STATIC_S2, CSize(100,68));
	AddAnchor(IDC_S0, CSize(100,68));
	AddAnchor(IDC_STATIC_S0, CSize(100,68));
	AddAnchor(IDC_S1, CSize(100,68));
	AddAnchor(IDC_STATIC_S1, CSize(100,68));
	AddAnchor(m_Led3[1].m_hWnd, CSize(100,68));
	AddAnchor(m_Led3[0].m_hWnd, CSize(100,68));
	AddAnchor(m_Led3[2].m_hWnd, CSize(100,68));

	m_oldcx = 0;
	m_oldcy = 0;

	EnableWindow(TRUE);

	return true;

	EMULE_CATCH

	return false;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// -khaos--+++> This function is going to basically calculate and save a bunch of averages.
//				I made a seperate funtion so that it would always run instead of having
//				the averages not be calculated if the graphs are disabled (Which is bad!).
void CStatisticsDlg::UpdateConnectionStats(double uploadrate, double downloadrate)
{
	// Can't do anything before OnInitDialog
	if(!m_hWnd)
		return;

	rateUp = uploadrate;
	rateDown = downloadrate;

	if (maxUp<uploadrate) maxUp=uploadrate;
	if (cum_UL_maximal<maxUp)
	{
		cum_UL_maximal=maxUp;
		g_App.m_pPrefs->Add2ConnMaxUpRate(cum_UL_maximal);
	}

	if (maxDown<downloadrate) maxDown=downloadrate; // MOVED from SetCurrentRate!
	if (cum_DL_maximal < maxDown)
	{
		cum_DL_maximal=maxDown;
		g_App.m_pPrefs->Add2ConnMaxDownRate(cum_DL_maximal);
	}

	cum_DL_average = GetAvgDownloadRate(AVG_TOTAL);
	if (cum_DL_max_average<cum_DL_average)
	{
		cum_DL_max_average=cum_DL_average;
		g_App.m_pPrefs->Add2ConnMaxAvgDownRate(cum_DL_max_average);
	}

	cum_UL_average = GetAvgUploadRate(AVG_TOTAL);
	if (cum_UL_max_average<cum_UL_average)
	{
		cum_UL_max_average=cum_UL_average;
		g_App.m_pPrefs->Add2ConnMaxAvgUpRate(cum_UL_max_average);
	}


	// Transfer Times (Increment Session)
	if (uploadrate > 0 || downloadrate > 0)
	{
		if (start_timeTransfers == 0) start_timeTransfers = GetTickCount();
		else time_thisTransfer = (GetTickCount() - start_timeTransfers) / 1000;

		if (uploadrate > 0)
		{
			if (start_timeUploads == 0) start_timeUploads = GetTickCount();
			else time_thisUpload = (GetTickCount() - start_timeUploads) / 1000;
		}

		if (downloadrate > 0)
		{
			if (start_timeDownloads == 0) start_timeDownloads = GetTickCount();
			else time_thisDownload = (GetTickCount() - start_timeDownloads) / 1000;
		}
	}

	if (uploadrate == 0 && downloadrate == 0 && (time_thisTransfer > 0 || start_timeTransfers > 0))
	{
		timeTransfers += time_thisTransfer;
		time_thisTransfer = 0;
		start_timeTransfers = 0;
	}

	if (uploadrate == 0 && (time_thisUpload > 0 || start_timeUploads > 0))
	{
		timeUploads += time_thisUpload;
		time_thisUpload = 0;
		start_timeUploads = 0;
	}

	if (downloadrate == 0 && (time_thisDownload > 0 || start_timeDownloads > 0))
	{
		timeDownloads += time_thisDownload;
		time_thisDownload = 0;
		start_timeDownloads = 0;
	}

	// Server Durations
	if (g_App.stat_serverConnectTime==0) time_thisServerDuration = 0;
	else time_thisServerDuration = ( GetTickCount() - g_App.stat_serverConnectTime ) / 1000;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::ShowStatistics(bool forceUpdate)
{
	stattree.SetRedraw(false);

	CString	cbuffer, strBuf2;
	uint64	aqwDQData[STATS_DLDATA_COUNT];
	uint32	adwDQSrc[STATS_DLSRC_COUNT];
	// Set Tree Values

	// TRANSFER SECTION
	// If a section is not expanded, don't waste CPU cycles updating it.
	if (forceUpdate || stattree.IsExpanded(h_transfer))
	{
		uint32	statGoodSessions =				0;
		uint32	statBadSessions =				0;
		double	percentSessions =				0;
		// Transfer Ratios
		if ( g_App.stat_sessionReceivedBytes>0 && g_App.stat_sessionSentBytes>0 )
		{
			// Session
			if (g_App.stat_sessionReceivedBytes<g_App.stat_sessionSentBytes)
			{
				cbuffer.Format(_T("%s %.2f : 1"),GetResString(IDS_STATS_SRATIO),static_cast<double>(g_App.stat_sessionSentBytes)/g_App.stat_sessionReceivedBytes);
				stattree.SetItemText(trans[0], cbuffer);
			}
			else
			{
				cbuffer.Format(_T("%s 1 : %.2f"),GetResString(IDS_STATS_SRATIO),static_cast<double>(g_App.stat_sessionReceivedBytes)/g_App.stat_sessionSentBytes);
				stattree.SetItemText(trans[0], cbuffer);
			}
		}
		else
		{
			cbuffer.Format(_T("%s %s"), GetResString(IDS_STATS_SRATIO), GetResString(IDS_FSTAT_WAITING));
			stattree.SetItemText(trans[0], cbuffer);
		}
		if ( (g_App.m_pPrefs->GetTotalDownloaded()>0 && g_App.m_pPrefs->GetTotalUploaded()>0) || (g_App.stat_sessionReceivedBytes>0 && g_App.stat_sessionSentBytes>0) )
		{
			// Cumulative
			if ((g_App.stat_sessionReceivedBytes+g_App.m_pPrefs->GetTotalDownloaded())<(g_App.stat_sessionSentBytes+g_App.m_pPrefs->GetTotalUploaded()))
			{
				cbuffer.Format(_T("%s %.2f : 1"),GetResString(IDS_STATS_CRATIO),static_cast<double>(g_App.stat_sessionSentBytes+g_App.m_pPrefs->GetTotalUploaded())/(g_App.stat_sessionReceivedBytes+g_App.m_pPrefs->GetTotalDownloaded()));
				stattree.SetItemText(trans[1], cbuffer);
			}
			else
			{
				cbuffer.Format(_T("%s 1 : %.2f"),GetResString(IDS_STATS_CRATIO),static_cast<double>(g_App.stat_sessionReceivedBytes+g_App.m_pPrefs->GetTotalDownloaded())/(g_App.stat_sessionSentBytes+g_App.m_pPrefs->GetTotalUploaded()));
				stattree.SetItemText(trans[1], cbuffer);
			}
		}
		else
		{
			cbuffer.Format(_T("%s %s"), GetResString(IDS_STATS_CRATIO), GetResString(IDS_FSTAT_WAITING));
			stattree.SetItemText(trans[1], cbuffer);
		}
		// TRANSFER -> DOWNLOADS SECTION
		if (forceUpdate || stattree.IsExpanded(h_download))
		{
			uint64	DownOHTotal = 0;
			uint64	DownOHTotalPackets = 0;
			g_App.m_pDownloadQueue->GetDownloadStats(adwDQSrc, aqwDQData);
			// TRANSFER -> DOWNLOADS -> SESSION SECTION
			if (forceUpdate || stattree.IsExpanded(h_down_session))
			{
				// Downloaded Data
				cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_DDATA), CastItoXBytes(g_App.stat_sessionReceivedBytes));
				stattree.SetItemText(down_S[0], cbuffer);
				if (forceUpdate || stattree.IsExpanded(down_S[0]))
				{
					// Downloaded Data By Client
					if (forceUpdate || stattree.IsExpanded(hdown_scb))
					{
						uint64 DownDataTotal = g_App.m_pPrefs->GetDownSessionClientData();
						uint64 DownDataClient = 0;
						double percentClientTransferred = 0;
						int i = 0;
						for (int j = 0;j<SO_LAST;j++)
							if ((EnumClientTypes)j != SO_OLDEMULE)
							{
								if ((EnumClientTypes)j == SO_EMULE)
									DownDataClient = g_App.m_pPrefs->GetDownData((EnumClientTypes)j)
													+ g_App.m_pPrefs->GetDownData(SO_OLDEMULE);
								else
									DownDataClient = g_App.m_pPrefs->GetDownData((EnumClientTypes)j);
								if ( DownDataTotal!=0 && DownDataClient!=0 )
									percentClientTransferred = (double) 100 * DownDataClient / DownDataTotal;
								else
									percentClientTransferred = 0;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient), percentClientTransferred);
								stattree.SetItemText(down_scb[i], cbuffer);
								i++;
							}
					}
				}
				// Completed Downloads
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_COMPDL), g_App.m_pPrefs->GetDownSessionCompletedFiles());
				stattree.SetItemText(down_S[1], cbuffer);
				// Active Downloads (not paused or stopped)
				cbuffer.Format(GetResString(IDS_DWTOT_NUM), g_App.m_pDownloadQueue->GetActiveFileCount());
				stattree.SetItemText(down_S[2], cbuffer);
				// Transferring Chunks
				cbuffer.Format(GetResString(IDS_STATS_ACTDL), adwDQSrc[STATS_DLSRC_TRANSFERRING]);
				stattree.SetItemText(down_S[3], cbuffer);
				// Total Size of Active Downloads
				cbuffer.Format(GetResString(IDS_DWTOT_TSD), CastItoXBytes(aqwDQData[STATS_DLDAT_ACTFILESIZE]));
				stattree.SetItemText(down_S[4], cbuffer);
				// Total Size of All Downloads
				cbuffer.Format(GetResString(IDS_DWTOT_TSAD), CastItoXBytes(aqwDQData[STATS_DLDAT_FILESIZETOTAL]));
				stattree.SetItemText(down_S[5], cbuffer);
				// Total Size on Disk of All Downloads
				cbuffer.Format(GetResString(IDS_DWTOT_TSODAD), CastItoXBytes(aqwDQData[STATS_DLDAT_FILEREALSIZE]));
				stattree.SetItemText(down_S[6], cbuffer);
				// Total Completed Size
				uint64 ui64BytesTransferred = (aqwDQData[STATS_DLDAT_ACTFILESIZE] - aqwDQData[STATS_DLDAT_SIZE2TRANSFER]);
				cbuffer.Format(GetResString(IDS_DWTOT_TCS), CastItoXBytes(ui64BytesTransferred), (aqwDQData[STATS_DLDAT_ACTFILESIZE] != 0) ? (100*static_cast<double>(ui64BytesTransferred) / aqwDQData[STATS_DLDAT_ACTFILESIZE]) : 0);
				stattree.SetItemText( down_S[7] , cbuffer );
				// Total Size Left to Transfer
				cbuffer.Format(GetResString(IDS_DWTOT_TSL), CastItoXBytes(aqwDQData[STATS_DLDAT_SIZE2TRANSFER]), (aqwDQData[STATS_DLDAT_ACTFILESIZE] != 0) ? (100*static_cast<double>(aqwDQData[STATS_DLDAT_SIZE2TRANSFER]) / aqwDQData[STATS_DLDAT_ACTFILESIZE]) : 0);
				stattree.SetItemText(down_S[8], cbuffer);
				// Total Space Needed by Active Downloads
				cbuffer.Format(GetResString(IDS_DWTOT_TSN), CastItoXBytes(aqwDQData[STATS_DLDAT_ACTFILEREQSPACE]));
				stattree.SetItemText(down_S[9], cbuffer);
				// Total Space Needed by All Downloads
				cbuffer.Format( GetResString(IDS_DWTOT_TSNA), CastItoXBytes(aqwDQData[STATS_DLDAT_FILEREQSPACETOTAL]));
				stattree.SetItemText(down_S[10], cbuffer);
				// Free Space on Tempdrive
				uint64 t_FreeBytes = GetFreeDiskSpaceX(g_App.m_pPrefs->GetTempDir().GetBuffer());
				strBuf2.Format(GetResString(IDS_DWTOT_FS), CastItoXBytes(t_FreeBytes));
				if(aqwDQData[STATS_DLDAT_ACTFILEREQSPACE] > t_FreeBytes)
					cbuffer.Format(GetResString(IDS_NEEDFREEDISKSPACE), strBuf2, CastItoXBytes(aqwDQData[STATS_DLDAT_ACTFILEREQSPACE] - t_FreeBytes));
				else
					cbuffer.Format(GetResString(IDS_FREEDISKSPACEAFTER), strBuf2, CastItoXBytes(t_FreeBytes - aqwDQData[STATS_DLDAT_ACTFILEREQSPACE]));
				stattree.SetItemText(down_S[11], cbuffer);
				// Found Sources
				cbuffer.Format(GetResString(IDS_STATS_FOUNDSRC), adwDQSrc[STATS_DLSRC_TOTAL]);
				stattree.SetItemText(down_S[12], cbuffer);
				if (forceUpdate || stattree.IsExpanded(down_S[12]))
				{
					int i = 0;
					// Sources By Status
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ONQUEUE), adwDQSrc[STATS_DLSRC_ONQUEUE]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_QUEUEFULL), adwDQSrc[STATS_DLSRC_QUEUEFULL]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_HIGHQR), adwDQSrc[STATS_DLSRC_HIGH_QR]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_NONEEDEDPARTS), adwDQSrc[STATS_DLSRC_NNS]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ASKING), adwDQSrc[STATS_DLSRC_CONNECTED]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_CONNECTING), adwDQSrc[STATS_DLSRC_CONNECTING]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_CONNVIASERVER), adwDQSrc[STATS_DLSRC_CONNECTING_VIA_SRV]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_WAITFILEREQ), adwDQSrc[STATS_DLSRC_WAIT4FILEREQ]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ASKED4ANOTHERFILE), g_App.m_pClientList->GetA4AFSourcesCount());
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_NOCONNECTLOW2LOW), adwDQSrc[STATS_DLSRC_LOW2LOW]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ANOTHER_SERVER_LOWID), adwDQSrc[STATS_DLSRC_LOWID_ON_OTHER_SRV]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_BANNED), adwDQSrc[STATS_DLSRC_BANNED]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
				}
				// Set Download Sessions
				statGoodSessions =	g_App.m_pPrefs->GetDownS_SuccessfulSessions() + adwDQSrc[STATS_DLSRC_TRANSFERRING]; // Add Active Downloads
				statBadSessions =	g_App.m_pPrefs->GetDownS_FailedSessions();
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_DLSES), statGoodSessions + statBadSessions);
				stattree.SetItemText(down_S[13], cbuffer);
				if (forceUpdate || stattree.IsExpanded(down_S[13]))
				{
				// Set Successful Download Sessions and Average Downloaded Per Session
					percentSessions = 0;
					if (statGoodSessions > 0)
					{
						percentSessions = (double) 100 * statGoodSessions / (statGoodSessions + statBadSessions);
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATADLSES), CastItoXBytes((uint64)g_App.stat_sessionReceivedBytes / statGoodSessions));
					}
					else cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATADLSES), CastItoXBytes(0));
					stattree.SetItemText(down_ssessions[2], cbuffer); // Set Avg DL/Session
					cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_SDLSES), statGoodSessions, percentSessions);
					stattree.SetItemText(down_ssessions[0], cbuffer); // Set Succ Sessions
				// Set Failed Download Sessions (Avoid Division)
					if (percentSessions != 0 && statBadSessions > 0) percentSessions = 100 - percentSessions; // There were some good sessions and bad ones...
					else if (percentSessions == 0 && statBadSessions > 0) percentSessions = 100; // There were bad sessions and no good ones, must be 100%
					else percentSessions = 0; // No sessions at all, or no bad ones.
					cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_FDLSES), statBadSessions, percentSessions);
					stattree.SetItemText(down_ssessions[1], cbuffer);
				// Set Failed Download Sessions because remote client does not have required data
					uint16 statBadSessionsNoRequiredData =	g_App.m_pPrefs->GetDownS_FailedSessionsNoRequiredData();
					percentSessions = 0;
					if ((statGoodSessions + statBadSessions) > 0)
					{
						percentSessions = (double) 100 * statBadSessionsNoRequiredData / (statGoodSessions + statBadSessions);
					}
					cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_FDLSES_NRD), statBadSessionsNoRequiredData, percentSessions);
					stattree.SetItemText(htiDLFailedSesNRD, cbuffer);
				// Set Average Download Time
					cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDLTIME), CastSecondsToLngHM(g_App.m_pPrefs->GetDownS_AvgTime()));
					stattree.SetItemText(down_ssessions[3] , cbuffer);
				}
				// Set Gain Due To Compression
				cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes(g_App.m_pPrefs->GetSesSavedFromCompression()));
				stattree.SetItemText(down_S[14], cbuffer);
				// Set Lost Due To Corruption
				cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes(g_App.m_pPrefs->GetSesLostFromCorruption()));
				stattree.SetItemText(down_S[15], cbuffer);
				// Set Parts Saved Due To ICH
				cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), g_App.m_pPrefs->GetSesPartsSavedByICH());
				stattree.SetItemText(down_S[16], cbuffer);

				// Calculate downline OH totals
				DownOHTotal = g_App.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchange() + g_App.m_pDownloadQueue->GetDownDataOverheadServer() + g_App.m_pDownloadQueue->GetDownDataOverheadOther();
				DownOHTotalPackets = g_App.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets() + g_App.m_pDownloadQueue->GetDownDataOverheadServerPackets() + g_App.m_pDownloadQueue->GetDownDataOverheadOtherPackets();

				// Downline Overhead
				cbuffer.Format( GetResString( IDS_TOVERHEAD ) , CastItoXBytes( DownOHTotal ) , CastItoIShort( DownOHTotalPackets ) );
				stattree.SetItemText( hdown_soh , cbuffer );
				if (forceUpdate || stattree.IsExpanded(hdown_soh))
				{
					int i = 0;
					// Set down session file req OH
					cbuffer.Format( GetResString( IDS_FROVERHEAD ) , CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadFileRequest() ) , CastItoIShort( g_App.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() ) );
					stattree.SetItemText( down_soh[i] , cbuffer ); i++;
					// Set down session source exch OH
					cbuffer.Format( GetResString( IDS_SSOVERHEAD ) , CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchange() ), CastItoIShort( g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets() ) );
					stattree.SetItemText( down_soh[i] , cbuffer ); i++;
					// Set down session server OH
					cbuffer.Format( GetResString( IDS_SOVERHEAD ) , CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadServer() ), CastItoIShort( g_App.m_pDownloadQueue->GetDownDataOverheadServerPackets() ) );
					stattree.SetItemText( down_soh[i] , cbuffer ); i++;
					// Set down session others OH
					cbuffer.Format( GetResString( IDS_OOVERHEAD ) , CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadOther() ), CastItoIShort( g_App.m_pDownloadQueue->GetDownDataOverheadOtherPackets() ) );
					stattree.SetItemText( down_soh[i] , cbuffer ); i++;
				}

			}
			// TRANSFER -> DOWNLOADS -> CUMULATIVE SECTION
			if (forceUpdate || stattree.IsExpanded(h_down_total))
			{
				// Downloaded Data
				cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_DDATA), CastItoXBytes(g_App.stat_sessionReceivedBytes+g_App.m_pPrefs->GetTotalDownloaded()));
				stattree.SetItemText(down_T[0], cbuffer);
				if (forceUpdate || stattree.IsExpanded(down_T[0]))
				{
					// Downloaded Data By Client
					if (forceUpdate || stattree.IsExpanded(hdown_tcb))
					{
						uint64 DownDataTotal = g_App.m_pPrefs->GetDownTotalClientData();
						uint64 DownDataClient = 0;
						double percentClientTransferred = 0;
						//eklmn: sequence was replaced to loop...
						int i = 0;
						for (int j = 0;j<SO_LAST;j++)
							if ((EnumClientTypes)j != SO_OLDEMULE)
							{
								if ((EnumClientTypes)j == SO_EMULE)
									DownDataClient = g_App.m_pPrefs->GetCumDownData((EnumClientTypes)j)
													+ g_App.m_pPrefs->GetCumDownData(SO_OLDEMULE);
								else
									DownDataClient = g_App.m_pPrefs->GetCumDownData((EnumClientTypes)j);
								if ( DownDataTotal!=0 && DownDataClient!=0 )
									percentClientTransferred = (double) 100 * DownDataClient / DownDataTotal;
								else
									percentClientTransferred = 0;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
								stattree.SetItemText( down_tcb[i] , cbuffer );
								i++;
							}
					}
				}
				// Set Cum Completed Downloads
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_COMPDL), g_App.m_pPrefs->GetDownCompletedFiles());
				stattree.SetItemText(down_T[1], cbuffer);
				// Set Cum Download Sessions
				statGoodSessions = g_App.m_pPrefs->GetDownC_SuccessfulSessions() + adwDQSrc[STATS_DLSRC_TRANSFERRING]; // Need to reset these from the session section. Declared up there.
				statBadSessions = g_App.m_pPrefs->GetDownC_FailedSessions(); // ^^^^^^^^^^^^^^
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_DLSES), statGoodSessions + statBadSessions);
				stattree.SetItemText(down_T[2], cbuffer);
				if (forceUpdate || stattree.IsExpanded(down_T[2]))
				{
					// Set Cum Successful Download Sessions & Cum Average Download Per Sessions (Save an if-else statement)
					if (statGoodSessions > 0)
					{
						percentSessions = (double) 100 * statGoodSessions / (statGoodSessions + statBadSessions);
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATADLSES), CastItoXBytes((uint64)(g_App.stat_sessionReceivedBytes + g_App.m_pPrefs->GetTotalDownloaded()) / statGoodSessions));
					}
					else
					{
						percentSessions = 0;
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATADLSES), CastItoXBytes(0));
					}
					stattree.SetItemText(down_tsessions[2], cbuffer); // Set Avg DL/Session
					cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_SDLSES), statGoodSessions, percentSessions);
					stattree.SetItemText(down_tsessions[0], cbuffer); // Set Successful Sessions
					// Set Cum Failed Download Sessions
					if (percentSessions != 0 && statBadSessions > 0) percentSessions = 100 - percentSessions; // There were some good sessions and bad ones...
					else if (percentSessions == 0 && statBadSessions > 0) percentSessions = 100; // There were bad sessions and no good ones, must be 100%
					else percentSessions = 0; // No sessions at all, or no bad ones.
					cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_FDLSES), statBadSessions, percentSessions);
					stattree.SetItemText(down_tsessions[1], cbuffer);
				}
				// Set Cumulative Gained Due To Compression
				cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes(g_App.m_pPrefs->GetSesSavedFromCompression() + g_App.m_pPrefs->GetCumSavedFromCompression()));
				stattree.SetItemText(down_T[3], cbuffer);
				// Set Cumulative Lost Due To Corruption
				cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes(g_App.m_pPrefs->GetSesLostFromCorruption() + g_App.m_pPrefs->GetCumLostFromCorruption()));
				stattree.SetItemText(down_T[4], cbuffer);
				// Set Cumulative Saved Due To ICH
				cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), g_App.m_pPrefs->GetSesPartsSavedByICH() + g_App.m_pPrefs->GetCumPartsSavedByICH());
				stattree.SetItemText(down_T[5], cbuffer);

				if (DownOHTotal == 0 || DownOHTotalPackets == 0)
				{
					DownOHTotal = g_App.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchange() + g_App.m_pDownloadQueue->GetDownDataOverheadServer() + g_App.m_pDownloadQueue->GetDownDataOverheadOther();
					DownOHTotalPackets = g_App.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets() + g_App.m_pDownloadQueue->GetDownDataOverheadServerPackets() + g_App.m_pDownloadQueue->GetDownDataOverheadOtherPackets();
				}
				// Total Overhead
				cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(DownOHTotal + g_App.m_pPrefs->GetDownOverheadTotal()), CastItoIShort(DownOHTotalPackets + g_App.m_pPrefs->GetDownOverheadTotalPackets()));
				stattree.SetItemText(hdown_toh, cbuffer);
				if (forceUpdate || stattree.IsExpanded(hdown_toh))
				{
					int i = 0;
					// File Request Overhead
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_App.m_pPrefs->GetDownOverheadFileReq()), CastItoIShort(g_App.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_App.m_pPrefs->GetDownOverheadFileReqPackets()));
					stattree.SetItemText(down_toh[i], cbuffer); i++;
					// Source Exchange Overhead
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchange()+g_App.m_pPrefs->GetDownOverheadSrcEx()), CastItoIShort(g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets()+g_App.m_pPrefs->GetDownOverheadSrcExPackets()));
					stattree.SetItemText(down_toh[i], cbuffer); i++;
					// Server Overhead
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadServer()+g_App.m_pPrefs->GetDownOverheadServer()), CastItoIShort(g_App.m_pDownloadQueue->GetDownDataOverheadServerPackets()+g_App.m_pPrefs->GetDownOverheadServerPackets()));
					stattree.SetItemText(down_toh[i], cbuffer); i++;
					// Others Overhead
					cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadOther()+g_App.m_pPrefs->GetDownOverheadOther()), CastItoIShort(g_App.m_pDownloadQueue->GetDownDataOverheadOtherPackets()+g_App.m_pPrefs->GetDownOverheadOtherPackets()));
					stattree.SetItemText(down_toh[i], cbuffer); i++;
				}
			} // - End Transfer -> Downloads -> Cumulative Section
		} // - End Transfer -> Downloads Section
		// TRANSFER-> UPLOADS SECTION
		if (forceUpdate || stattree.IsExpanded(h_upload))
		{
			uint64 UpOHTotal =			0;
			uint64 UpOHTotalPackets =	0;
			// TRANSFER -> UPLOADS -> SESSION SECTION
			if (forceUpdate || stattree.IsExpanded(h_up_session))
			{
				// Uploaded Data
				cbuffer.Format(_T("%s: %s"),GetResString(IDS_STATS_UDATA),CastItoXBytes(g_App.stat_sessionSentBytes));
				stattree.SetItemText(up_S[0], cbuffer);
				if (forceUpdate || stattree.IsExpanded(up_S[0]))
				{
					// Uploaded Data By Client
					if (forceUpdate || stattree.IsExpanded(hup_scb))
					{
						uint64 UpDataTotal =	g_App.m_pPrefs->GetUpSessionClientData();
						uint64 UpDataClient = 0;
						double percentClientTransferred = 0;
						//eklmn: sequence was replaced to loop...
						int i = 0;
						for (int j = 0;j<SO_LAST;j++)
							if ((EnumClientTypes)j != SO_OLDEMULE)
							{
								if ((EnumClientTypes)j == SO_EMULE)
									UpDataClient = g_App.m_pPrefs->GetUpData((EnumClientTypes)j)
													+ g_App.m_pPrefs->GetUpData(SO_OLDEMULE);
								else
									UpDataClient = g_App.m_pPrefs->GetUpData((EnumClientTypes)j);
								if ( UpDataTotal!=0 && UpDataClient!=0 )
									percentClientTransferred = (double) 100 * UpDataClient / UpDataTotal;
								else
									percentClientTransferred = 0;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetClientNameString((EnumClientTypes)j), CastItoXBytes(UpDataClient), percentClientTransferred);
								stattree.SetItemText(up_scb[i], cbuffer);
								i++;
							}
					}
					// Uploaded Data By Source
					if (forceUpdate || stattree.IsExpanded(hup_ssb))
					{
						int i = 0;
						uint64	DataSourceFile =	g_App.m_pPrefs->GetUpData_File();
						uint64	DataSourcePF =		g_App.m_pPrefs->GetUpData_PartFile();
						uint64	DataSourceTotal =	g_App.m_pPrefs->GetUpSessionDataFile();
						double	percentFileTransferred = 0;

						if ( DataSourceTotal!=0 && DataSourceFile!=0 )
							percentFileTransferred = (double) 100 * DataSourceFile / DataSourceTotal;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DSFILE), CastItoXBytes(DataSourceFile), percentFileTransferred);
						stattree.SetItemText(up_ssb[i], cbuffer); i++;

						if ( DataSourceTotal!=0 && DataSourcePF!=0 )
							percentFileTransferred = (double) 100 * DataSourcePF / DataSourceTotal;
						else
							percentFileTransferred = 0;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DSPF), CastItoXBytes(DataSourcePF), percentFileTransferred);
						stattree.SetItemText(up_ssb[i], cbuffer); i++;
					}
					// Uploaded Data By Community
					if (forceUpdate || stattree.IsExpanded(hup_scomb))
					{
						int i = 0;
						uint64	DataCommunity =		g_App.m_pPrefs->GetUpData_Community();
						uint64	DataNoCommunity =	g_App.m_pPrefs->GetUpData_NoCommunity();
						uint64	DataTotal =			g_App.m_pPrefs->GetUpSessionDataCommunity();
						double	percentCommunityTransferred = 0;

						if ( DataTotal!=0 && DataCommunity!=0 )
							percentCommunityTransferred = (double) 100 * DataCommunity / DataTotal;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_YES), CastItoXBytes(DataCommunity), percentCommunityTransferred);
						stattree.SetItemText(up_scomb[i], cbuffer); i++;

						if ( DataTotal!=0 && DataNoCommunity!=0 )
							percentCommunityTransferred = (double) 100 * DataNoCommunity / DataTotal;
						else
							percentCommunityTransferred = 0;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_NO), CastItoXBytes(DataNoCommunity), percentCommunityTransferred);
						stattree.SetItemText(up_scomb[i], cbuffer); i++;
					}
					// Uploaded Data By Priority
					if (forceUpdate || stattree.IsExpanded(hULPrioDataNode))
					{
						int i = 0;
						uint64	qwData;

						qwData = g_App.m_pPrefs->GetUpDataByPriority(PR_RELEASE);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIORELEASE), CastItoXBytes(qwData), GetPercent(qwData, g_App.stat_sessionSentBytes));
						stattree.SetItemText(hULPrioDataItems[i], cbuffer); i++;

						qwData = g_App.m_pPrefs->GetUpDataByPriority(PR_HIGH);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIOHIGH), CastItoXBytes(qwData), GetPercent(qwData, g_App.stat_sessionSentBytes));
						stattree.SetItemText(hULPrioDataItems[i], cbuffer); i++;

						qwData = g_App.m_pPrefs->GetUpDataByPriority(PR_NORMAL);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIONORMAL), CastItoXBytes(qwData), GetPercent(qwData, g_App.stat_sessionSentBytes));
						stattree.SetItemText(hULPrioDataItems[i], cbuffer); i++;

						qwData = g_App.m_pPrefs->GetUpDataByPriority(PR_LOW);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIOLOW), CastItoXBytes(qwData), GetPercent(qwData, g_App.stat_sessionSentBytes));
						stattree.SetItemText(hULPrioDataItems[i], cbuffer); i++;

						qwData = g_App.m_pPrefs->GetUpDataByPriority(PR_VERYLOW);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIOVERYLOW), CastItoXBytes(qwData), GetPercent(qwData, g_App.stat_sessionSentBytes));
						stattree.SetItemText(hULPrioDataItems[i], cbuffer); i++;
					}
				}
				// Set Active Uploads
				cbuffer.Format(GetResString(IDS_STATS_ACTUL),g_App.m_pUploadQueue->GetUploadQueueLength());
				stattree.SetItemText(up_S[1], cbuffer);
				// Set Queue Length
				cbuffer.Format(GetResString(IDS_STATS_WAITINGUSERS),g_App.m_pUploadQueue->GetWaitingUserCount());
				stattree.SetItemText(up_S[2], cbuffer);

				// Set Upload Sessions
				statGoodSessions = g_App.m_pUploadQueue->GetSuccessfulUpCount(); // + g_App.m_pUploadQueue->GetUploadQueueLength();
				statBadSessions = g_App.m_pUploadQueue->GetFailedUpCount();
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_ULSES), statGoodSessions + statBadSessions);
				stattree.SetItemText(up_S[3], cbuffer);
				if (forceUpdate || stattree.IsExpanded(up_S[3]))
				{
					// Set Successful Upload Sessions & Average Uploaded Per Session
					uint32 statTotalSessions = statGoodSessions+statBadSessions;
					if (statGoodSessions>0)
					{
						percentSessions = (double) 100*(statGoodSessions+g_App.m_pUploadQueue->GetUploadQueueLength())/(statGoodSessions+g_App.m_pUploadQueue->GetUploadQueueLength()+statBadSessions);
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64)g_App.stat_sessionSentBytes / (statGoodSessions+g_App.m_pUploadQueue->GetUploadQueueLength())));
					}
					else
					{
						percentSessions = 0;
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATAULSES), GetResString(IDS_FSTAT_WAITING));
					}
					stattree.SetItemText(up_ssessions[2], cbuffer);
					// Successful sessions
					cbuffer.Format(_T("%s: %u (%.1f%%)"),GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,GetPercent(statGoodSessions,statTotalSessions));
					stattree.SetItemText(up_ssessions[0], cbuffer);
					// chunks stasts
					cbuffer.Format(_T("%s: %u (%.1f%%)"),GetResString(IDS_STATS_SUCCUP_FC),g_App.m_pUploadQueue->GetULFullChunkCount(),GetPercent(g_App.m_pUploadQueue->GetULFullChunkCount(),statTotalSessions));
					stattree.SetItemText(up_ssessions_s[0], cbuffer);
					cbuffer.Format(_T("%s: %u (%.1f%%)"),GetResString(IDS_STATS_SUCCUP_PC),g_App.m_pUploadQueue->GetULPartChunkCount(),GetPercent(g_App.m_pUploadQueue->GetULPartChunkCount(),statTotalSessions));
					stattree.SetItemText(up_ssessions_s[1], cbuffer);
					//subtree for "part of chunk"
					for (int i = 0; i<ETS_TERMINATOR; i++)
					{
						cbuffer.Format(_T("%s: %u (%.1f%%)"), GetUpEndReason(i),
							g_App.m_pUploadQueue->GetULPartChunkSubCount((EnumEndTransferSession)i),
							GetPercent(g_App.m_pUploadQueue->GetULPartChunkSubCount((EnumEndTransferSession)i), statTotalSessions));
						stattree.SetItemText(up_ssessions_spc[i], cbuffer);
					}

					// Set Failed Upload Sessions
					cbuffer.Format(_T("%s: %u (%.1f%%)"),GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,GetPercent(statBadSessions,statTotalSessions));
					stattree.SetItemText(up_ssessions[1], cbuffer);
					//subtree for "Failed"
					for (int i = 0; i<ETS_TERMINATOR; i++)
					{
						cbuffer.Format(_T("%s: %u (%.1f%%)"), GetUpEndReason(i),
							g_App.m_pUploadQueue->GetFailedSubCount((EnumEndTransferSession)i),
							GetPercent(g_App.m_pUploadQueue->GetFailedSubCount((EnumEndTransferSession)i), statTotalSessions));
						stattree.SetItemText(up_ssessions_f[i], cbuffer);
					}

					// Set Avg Upload time
					cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME), CastSecondsToLngHM(g_App.m_pUploadQueue->GetAverageUpTime()));
					stattree.SetItemText(up_ssessions[3], cbuffer);
				}
				// Calculate Upline OH Totals
				UpOHTotal = g_App.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange() + g_App.m_pUploadQueue->GetUpDataOverheadServer() + g_App.m_pUploadQueue->GetUpDataOverheadOther();
				UpOHTotalPackets = g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets() + g_App.m_pUploadQueue->GetUpDataOverheadServerPackets() + g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets();
				// Total Upline Overhead
				cbuffer.Format(GetResString(IDS_TOVERHEAD), CastItoXBytes(UpOHTotal), CastItoIShort(UpOHTotalPackets));
				stattree.SetItemText(hup_soh, cbuffer);
				if (forceUpdate || stattree.IsExpanded(hup_soh))
				{
					int i = 0;
					// File Request Overhead
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadFileRequest()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets()));
					stattree.SetItemText(up_soh[i], cbuffer); i++;
					// Source Exchanged Overhead
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets()));
					stattree.SetItemText(up_soh[i], cbuffer); i++;
					// Server Overhead
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadServer()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadServerPackets()));
					stattree.SetItemText(up_soh[i], cbuffer); i++;
					// Others Overhead
					cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadOther()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets()));
					stattree.SetItemText(up_soh[i], cbuffer); i++;
				}
			} // - End Transfer -> Uploads -> Session Section
			// TRANSFER -> UPLOADS -> CUMULATIVE SECTION
			if (forceUpdate || stattree.IsExpanded(h_up_total))
			{

				// Uploaded Data
				cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_UDATA), CastItoXBytes(g_App.stat_sessionSentBytes+g_App.m_pPrefs->GetTotalUploaded()));
				stattree.SetItemText(up_T[0],cbuffer);
				if (forceUpdate || stattree.IsExpanded(up_T[0]))
				{
					// Uploaded Data By Client
					if (forceUpdate || stattree.IsExpanded(hup_tcb))
					{
						uint64 UpDataTotal =	g_App.m_pPrefs->GetUpTotalClientData();
						uint64 UpDataClient =	0;
						double percentClientTransferred = 0;
						int i = 0;
						//eklmn: sequence was replaced to loop...
						for (int j = 0;j<SO_LAST;j++)
							if ((EnumClientTypes)j != SO_OLDEMULE)
							{
								if ((EnumClientTypes)j == SO_EMULE)
									UpDataClient = g_App.m_pPrefs->GetCumUpData((EnumClientTypes)j)
													+ g_App.m_pPrefs->GetCumUpData(SO_OLDEMULE);
								else
									UpDataClient = g_App.m_pPrefs->GetCumUpData((EnumClientTypes)j);

								if ( UpDataTotal!=0 && UpDataClient!=0 )
									percentClientTransferred = (double) 100 * UpDataClient / UpDataTotal;
								else
									percentClientTransferred = 0;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetClientNameString((EnumClientTypes)j), CastItoXBytes(UpDataClient), percentClientTransferred);
								stattree.SetItemText(up_tcb[i], cbuffer);
								i++;
							}
					}
					// Uploaded Data By Source
					if (forceUpdate || stattree.IsExpanded(hup_tsb))
					{
						int i = 0;
						uint64	DataSourceFile =	g_App.m_pPrefs->GetCumUpData_File();
						uint64	DataSourcePF =		g_App.m_pPrefs->GetCumUpData_PartFile();
						uint64	DataSourceTotal =	g_App.m_pPrefs->GetUpTotalDataFile();
						double	percentFileTransferred = 0;

						if ( DataSourceTotal!=0 && DataSourceFile!=0 )
							percentFileTransferred = (double) 100 * DataSourceFile / DataSourceTotal;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DSFILE), CastItoXBytes(DataSourceFile), percentFileTransferred);
						stattree.SetItemText(up_tsb[i], cbuffer); i++;

						if ( DataSourceTotal!=0 && DataSourcePF!=0 )
							percentFileTransferred = (double) 100 * DataSourcePF / DataSourceTotal;
						else
							percentFileTransferred = 0;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DSPF), CastItoXBytes(DataSourcePF), percentFileTransferred);
						stattree.SetItemText(up_tsb[i], cbuffer); i++;
					}
					// Uploaded Data By Community
					if (forceUpdate || stattree.IsExpanded(hup_tcomb))
					{
						int i = 0;
						uint64	DataCommunity =		g_App.m_pPrefs->GetCumUpData_Community();
						uint64	DataNoCommunity =	g_App.m_pPrefs->GetCumUpData_NoCommunity();
						uint64	DataTotal =			g_App.m_pPrefs->GetUpTotalDataCommunity();
						double	percentCommunityTransferred = 0;

						if ( DataTotal!=0 && DataCommunity!=0 )
							percentCommunityTransferred = (double) 100 * DataCommunity / DataTotal;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_YES), CastItoXBytes(DataCommunity), percentCommunityTransferred);
						stattree.SetItemText(up_tcomb[i], cbuffer); i++;

						if ( DataTotal!=0 && DataNoCommunity!=0 )
							percentCommunityTransferred = (double) 100 * DataNoCommunity / DataTotal;
						else
							percentCommunityTransferred = 0;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_NO), CastItoXBytes(DataNoCommunity), percentCommunityTransferred);
						stattree.SetItemText(up_tcomb[i], cbuffer); i++;
					}
				}
				// Upload Sessions
				statGoodSessions = g_App.m_pUploadQueue->GetSuccessfulUpCount() + g_App.m_pPrefs->GetUpSuccessfulSessions() + g_App.m_pUploadQueue->GetUploadQueueLength();
				statBadSessions = g_App.m_pUploadQueue->GetFailedUpCount() + g_App.m_pPrefs->GetUpFailedSessions();
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_ULSES), statGoodSessions + statBadSessions);
				stattree.SetItemText(up_T[1], cbuffer);
				if (forceUpdate || stattree.IsExpanded(up_T[1]))
				{
					// Set Successful Upload Sessions & Average Uploaded Per Session
					if (statGoodSessions>0)
					{ // Blackholes are when God divided by 0
						percentSessions = (double) 100*statGoodSessions/(statGoodSessions+statBadSessions);
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) (g_App.stat_sessionSentBytes + g_App.m_pPrefs->GetTotalUploaded()) / statGoodSessions));
					}
					else
					{
						percentSessions = 0;
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATAULSES), GetResString(IDS_FSTAT_WAITING));
					}
					stattree.SetItemText(up_tsessions[2], cbuffer);
					//cbuffer.Format(GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,percentSessions);
					cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_SUCCUPCOUNT), statGoodSessions, percentSessions);
					stattree.SetItemText(up_tsessions[0], cbuffer);
					// Set Failed Upload Sessions
					if (percentSessions != 0 && statBadSessions > 0) percentSessions = 100 - percentSessions; // There were some good sessions and bad ones...
					else if (percentSessions == 0 && statBadSessions > 0) percentSessions = 100; // There were bad sessions and no good ones, must be 100%
					else percentSessions = 0; // No sessions at all, or no bad ones.
					//cbuffer.Format(GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,percentSessions);
					cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_FAILUPCOUNT), statBadSessions, percentSessions);
					stattree.SetItemText(up_tsessions[1], cbuffer);
				}

				if (UpOHTotal == 0 || UpOHTotalPackets == 0)
				{
					// Calculate Upline OH Totals
					UpOHTotal = g_App.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange() + g_App.m_pUploadQueue->GetUpDataOverheadServer() + g_App.m_pUploadQueue->GetUpDataOverheadOther();
					UpOHTotalPackets = g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets() + g_App.m_pUploadQueue->GetUpDataOverheadServerPackets() + g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets();
				}
				// Set Cumulative Total Overhead
				cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(UpOHTotal + g_App.m_pPrefs->GetUpOverheadTotal()), CastItoIShort(UpOHTotalPackets + g_App.m_pPrefs->GetUpOverheadTotalPackets()));
				stattree.SetItemText(hup_toh, cbuffer);
				if (forceUpdate || stattree.IsExpanded(hup_toh))
				{
					int i = 0;
					// Set up total file req OH
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_App.m_pPrefs->GetUpOverheadFileReq()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_App.m_pPrefs->GetUpOverheadFileReqPackets()));
					stattree.SetItemText(up_toh[i], cbuffer); i++;
					// Set up total source exch OH
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange()+g_App.m_pPrefs->GetUpOverheadSrcEx()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets()+g_App.m_pPrefs->GetUpOverheadSrcExPackets()));
					stattree.SetItemText(up_toh[i], cbuffer); i++;
					// Set up total server OH
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadServer()+g_App.m_pPrefs->GetUpOverheadServer()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadServerPackets()+g_App.m_pPrefs->GetUpOverheadServerPackets()));
					stattree.SetItemText(up_toh[i], cbuffer); i++;
					// Set up total others OH
					cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadOther()+g_App.m_pPrefs->GetUpOverheadOther()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets()+g_App.m_pPrefs->GetUpOverheadOtherPackets()));
					stattree.SetItemText(up_toh[i], cbuffer); i++;
				}
			} // - End Transfer -> Uploads -> Cumulative Section
		} // - End Transfer -> Uploads Section
	} // - END TRANSFER SECTION


	// CONNECTION SECTION
	if (forceUpdate || stattree.IsExpanded(h_connection))
	{
		// CONNECTION -> SESSION SECTION
		if (forceUpdate || stattree.IsExpanded(h_conn_session))
		{
			// CONNECTION -> SESSION -> GENERAL SECTION
			if (forceUpdate || stattree.IsExpanded(hconn_sg))
			{
				int i = 0;
				// Server Reconnects
				if (g_App.stat_reconnects>0) cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),g_App.stat_reconnects-1);
				else cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),0);
				stattree.SetItemText(conn_sg[i], cbuffer); i++;
				// Active Connections
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_ACTIVECON), activeconnections);
				stattree.SetItemText(conn_sg[i], cbuffer); i++;
				// Average Connections
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_AVGCON), (uint32)averageconnections);
				stattree.SetItemText(conn_sg[i], cbuffer); i++;
				// Peak Connections
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_PEAKCON), peakconnections);
				stattree.SetItemText(conn_sg[i], cbuffer); i++;
				// Connect Limit Reached
#ifdef OLD_SOCKETS_ENABLED
				uint32 m_itemp = g_App.m_pListenSocket->GetMaxConnectionsReachedCount();
				if( m_itemp != m_ilastMaxConnReached )
				{
					COleDateTime	currentTime(COleDateTime::GetCurrentTime());
					cbuffer.Format(_T("%s: %i : %s"), GetResString(IDS_SF_MAXCONLIMITREACHED), m_itemp, currentTime.Format(_T("%c")));
					stattree.SetItemText(conn_sg[i], cbuffer);
					m_ilastMaxConnReached = m_itemp;
				}
				else if( m_itemp == 0 )
				{
					cbuffer.Format(_T("%s: %i"), GetResString(IDS_SF_MAXCONLIMITREACHED), m_itemp);
					stattree.SetItemText(conn_sg[i], cbuffer);
				}
#endif //OLD_SOCKETS_ENABLED
				i++;
			} // - End Connection -> Session -> General Section
			// CONNECTION -> SESSION -> UPLOADS SECTION
			if (forceUpdate || stattree.IsExpanded(hconn_su))
			{
				CString	strKBSec = GetResString(IDS_KBYTESEC);
				double	dAvgUpRate = GetAvgUploadRate(AVG_SESSION);
				int		i = 0;

				// Upload Rate
				cbuffer.Format(_T("%s: %.2f %s"), GetResString(IDS_ST_UPLOAD), rateUp, strKBSec);			stattree.SetItemText(conn_su[i], cbuffer); i++;
				// Average Upload Rate
				cbuffer.Format(GetResString(IDS_STATS_AVGUL), dAvgUpRate);	stattree.SetItemText(conn_su[i], cbuffer); i++;
				// Max Upload Rate
				cbuffer.Format(_T("%s: %.2f %s"), GetResString(IDS_STATS_MAXUL), maxUp, strKBSec);			stattree.SetItemText(conn_su[i], cbuffer); i++;
				// Max Average Upload Rate
				if (dAvgUpRate > maxUpavg)
					maxUpavg = dAvgUpRate;
				cbuffer.Format(_T("%s: %.2f %s"), GetResString(IDS_STATS_MAXAVGUL), maxUpavg, strKBSec);	stattree.SetItemText(conn_su[i], cbuffer); i++;
			} // - End Connection -> Session -> Uploads Section
			// CONNECTION -> SESSION -> DOWNLOADS SECTION
			if (forceUpdate || stattree.IsExpanded(hconn_sd))
			{
				double dAvgDownRate = GetAvgDownloadRate(AVG_SESSION);
				int		i = 0;

				// Download Rate
				cbuffer.Format(_T("%s: %.2f %s"), GetResString(IDS_ST_DOWNLOAD), rateDown, GetResString(IDS_KBYTESEC));		stattree.SetItemText(conn_sd[i], cbuffer); i++;
				// Average Download Rate
				cbuffer.Format(GetResString(IDS_STATS_AVGDL), dAvgDownRate);	stattree.SetItemText(conn_sd[i], cbuffer); i++;
				// Max Download Rate
				cbuffer.Format(GetResString(IDS_STATS_MAXDL), maxDown);							stattree.SetItemText(conn_sd[i], cbuffer); i++;
				// Max Average Download Rate
				if (dAvgDownRate > maxDownavg)
					maxDownavg = dAvgDownRate;
				cbuffer.Format(GetResString(IDS_STATS_MAXAVGDL), maxDownavg);					stattree.SetItemText(conn_sd[i], cbuffer); i++;
			} // - End Connection -> Session -> Downloads Section
		} // - End Connection -> Session Section
		// CONNECTION -> CUMULATIVE SECTION
		if (forceUpdate || stattree.IsExpanded(h_conn_total))
		{
			// CONNECTION -> CUMULATIVE -> GENERAL SECTION
			if (forceUpdate || stattree.IsExpanded(hconn_tg))
			{
				int i = 0;
				// Server Reconnects
				if(g_App.stat_reconnects>0)
					cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),g_App.stat_reconnects - 1 + g_App.m_pPrefs->GetConnNumReconnects());
				else
					cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),g_App.m_pPrefs->GetConnNumReconnects());
				stattree.SetItemText(conn_tg[i], cbuffer); i++;
				// Average Connections
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_AVGCON), (activeconnections + g_App.m_pPrefs->GetConnAvgConnections()) / 2);
				stattree.SetItemText(conn_tg[i], cbuffer); i++;
				// Peak Connections
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_PEAKCON), g_App.m_pPrefs->GetConnPeakConnections());
				stattree.SetItemText(conn_tg[i], cbuffer); i++;
				// Connection Limit Reached
#ifdef OLD_SOCKETS_ENABLED
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_MAXCONLIMITREACHED), g_App.m_pListenSocket->GetMaxConnectionsReachedCount() + g_App.m_pPrefs->GetConnMaxConnLimitReached());
				stattree.SetItemText(conn_tg[i], cbuffer); i++;
#endif //OLD_SOCKETS_ENABLED
			} // - End Connection -> Cumulative -> General Section
			// CONNECTION -> CUMULATIVE -> UPLOADS SECTION
			if (forceUpdate || stattree.IsExpanded(hconn_tu))
			{
				int i = 0;
				// Average Upload Rate
				cbuffer.Format(GetResString(IDS_STATS_AVGUL),cum_UL_average);
				stattree.SetItemText(conn_tu[i], cbuffer); i++;
				// Max Upload Rate
				cbuffer.Format(_T("%s: %.2f ") + GetResString(IDS_KBYTESEC), GetResString(IDS_STATS_MAXUL), cum_UL_maximal);
				stattree.SetItemText(conn_tu[i], cbuffer); i++;
				// Max Average Upload Rate
				cbuffer.Format(_T("%s: %.2f ") + GetResString(IDS_KBYTESEC), GetResString(IDS_STATS_MAXAVGUL), cum_UL_max_average);
				stattree.SetItemText(conn_tu[i], cbuffer); i++;
			} // - End Connection -> Cumulative -> Uploads Section
			// CONNECTION -> CUMULATIVE -> DOWNLOADS SECTION
			if (forceUpdate || stattree.IsExpanded(hconn_td))
			{
				int i = 0;
				// Average Download Rate
				cbuffer.Format(GetResString(IDS_STATS_AVGDL), cum_DL_average);
				stattree.SetItemText(conn_td[i], cbuffer); i++;
				// Max Download Rate
				cbuffer.Format(GetResString(IDS_STATS_MAXDL), cum_DL_maximal);
				stattree.SetItemText(conn_td[i], cbuffer); i++;
				// Max Average Download Rate
				cbuffer.Format(GetResString(IDS_STATS_MAXAVGDL), cum_DL_max_average);
				stattree.SetItemText(conn_td[i], cbuffer); i++;
			} // - End Connection -> Cumulative -> Downloads Section
		} // - End Connection -> Cumulative Section
	} // - END CONNECTION SECTION


	// TIME STATISTICS SECTION
	if (forceUpdate || stattree.IsExpanded(h_time))
	{
		// Statistics Last Reset
		cbuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), g_App.m_pPrefs->GetStatsLastResetStr());
		stattree.SetItemText(tvitime[0], cbuffer);
		// Time Since Last Reset
		time_t timeDiff, timeNow;
		if (g_App.m_pPrefs->GetStatsLastResetLng())
		{
			time(&timeNow);
			timeDiff = timeNow - g_App.m_pPrefs->GetStatsLastResetLng(); // In seconds
			cbuffer.Format(GetResString(IDS_STATS_TIMESINCERESET), CastSecondsToLngHM(timeDiff));
		}
		else
		{
			timeDiff = 0;
			cbuffer.Format(GetResString(IDS_STATS_TIMESINCERESET), GetResString(IDS_UNKNOWN));
		}
		stattree.SetItemText(tvitime[1], cbuffer);
		// TIME STATISTICS -> SESSION SECTION
		if (forceUpdate || stattree.IsExpanded(htime_s))
		{
			int i = 0;
			uint32	dwSesRunTime = (::GetTickCount() - g_App.stat_starttime) / 1000u;

			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_RUNTIME), CastSecondsToLngHM(dwSesRunTime));
			stattree.SetItemText(tvitime_s[i], cbuffer); i++;
			if (dwSesRunTime == 0)
				dwSesRunTime = 1;
			// Transfer Time
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime()), (double) (100 * GetTransferTime()) / dwSesRunTime);
			stattree.SetItemText(tvitime_s[i], cbuffer);
			if (forceUpdate || stattree.IsExpanded(tvitime_s[i]))
			{
				int x = 0;
				// Upload Time
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime()), (double) (100 * GetUploadTime()) / dwSesRunTime);
				stattree.SetItemText(tvitime_st[x], cbuffer); x++;
				// Download Time
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime()), (double) (100 * GetDownloadTime()) / dwSesRunTime);
				stattree.SetItemText(tvitime_st[x], cbuffer); x++;
			}
			i++;
			// Current Server Duration
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_CURRSRVDUR), CastSecondsToLngHM(time_thisServerDuration), (double) (100 * time_thisServerDuration) / dwSesRunTime);
			stattree.SetItemText(tvitime_s[i], cbuffer); i++;
			// Total Server Duration
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration()), (double) (100 * GetServerDuration()) / dwSesRunTime);
			stattree.SetItemText(tvitime_s[i], cbuffer); i++;
		}
		// TIME STATISTICS -> CUMULATIVE SECTION
		if (forceUpdate || stattree.IsExpanded(htime_t))
		{
			int i = 0;
			uint32	dwTotalRunTime = (::GetTickCount() - g_App.stat_starttime) / 1000u + g_App.m_pPrefs->GetConnRunTime();

			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_RUNTIME), CastSecondsToLngHM(dwTotalRunTime));
			stattree.SetItemText(tvitime_t[i], cbuffer); i++;
			if (dwTotalRunTime == 0)
				dwTotalRunTime = 1;
			// Transfer Time
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime() + g_App.m_pPrefs->GetConnTransferTime()), (double) (100 * (GetTransferTime() + g_App.m_pPrefs->GetConnTransferTime())) / dwTotalRunTime);
			stattree.SetItemText(tvitime_t[i], cbuffer);
			if (forceUpdate || stattree.IsExpanded(tvitime_t[i]))
			{
				int x = 0;
				// Upload Time
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime() + g_App.m_pPrefs->GetConnUploadTime()), (double) (100 * (GetUploadTime() + g_App.m_pPrefs->GetConnUploadTime())) / dwTotalRunTime);
				stattree.SetItemText(tvitime_tt[x], cbuffer); x++;
				// Download Time
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime() + g_App.m_pPrefs->GetConnDownloadTime()), (double) (100 * (GetDownloadTime() + g_App.m_pPrefs->GetConnDownloadTime())) / dwTotalRunTime);
				stattree.SetItemText(tvitime_tt[x], cbuffer); x++;
			}
			i++;
			// Total Server Duration
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration() + g_App.m_pPrefs->GetConnServerDuration()), (double) (100 * (GetServerDuration() + g_App.m_pPrefs->GetConnServerDuration())) / dwTotalRunTime);
			stattree.SetItemText(tvitime_t[i], cbuffer); i++;
		}
		// TIME STATISTICS -> PROJECTED AVERAGES SECTION
		if ( (forceUpdate || stattree.IsExpanded(htime_aap)) && timeDiff > 0 )
		{
			double avgModifier[3];
			avgModifier[0] = (double) 86400 / timeDiff; // Days
			avgModifier[1] = (double) 2628000 / timeDiff; // Months
			avgModifier[2] = (double) 31536000 / timeDiff; // Years
			// TIME STATISTICS -> PROJECTED AVERAGES -> TIME PERIODS
			// This section is completely scalable.  Might add "Week" to it in the future.
			// For each time period that we are calculating a projected average for...
			for (int mx = 0; mx < 3; mx++)
			{
				if (forceUpdate || stattree.IsExpanded(time_aaph[mx]))
				{
					// TIME STATISTICS -> PROJECTED AVERAGES -> TIME PERIOD -> UPLOADS SECTION
					if (forceUpdate || stattree.IsExpanded(time_aap_hup[mx]))
					{
						// Uploaded Data
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_UDATA), CastItoXBytes((uint64)((double)(uint64)(g_App.stat_sessionSentBytes+g_App.m_pPrefs->GetTotalUploaded())*avgModifier[mx])));
						stattree.SetItemText(time_aap_up[mx][0],cbuffer);
						if (forceUpdate || stattree.IsExpanded(time_aap_up[mx][0]))
						{
							// Uploaded Data By Client
							if (forceUpdate || stattree.IsExpanded(time_aap_up_hd[mx][0]))
							{
								double dUpDataTotal = g_App.m_pPrefs->GetUpTotalClientData() * avgModifier[mx];
								uint64 UpDataTotal = static_cast<uint64>(dUpDataTotal);
								uint64 UpDataClient;
								double dUpDataClient, percentClientTransferred;
								//eklmn: sequence was replaced to loop...
								int i = 0;
								for (int j = 0;j<SO_LAST;j++)
									if ((EnumClientTypes)j != SO_OLDEMULE)
									{
										if ((EnumClientTypes)j == SO_EMULE)
											dUpDataClient = (g_App.m_pPrefs->GetCumUpData((EnumClientTypes)j)
															+ g_App.m_pPrefs->GetCumUpData(SO_OLDEMULE)) * avgModifier[mx];
										else
											dUpDataClient = g_App.m_pPrefs->GetCumUpData((EnumClientTypes)j) * avgModifier[mx];
										UpDataClient = static_cast<uint64>(dUpDataClient);

										if ((UpDataTotal != 0) && (UpDataClient != 0))
											percentClientTransferred = 100.0 * dUpDataClient / dUpDataTotal;
										else
											percentClientTransferred = 0;
										cbuffer.Format(_T("%s: %s (%.1f%%)"), GetClientNameString((EnumClientTypes)j), CastItoXBytes(UpDataClient), percentClientTransferred);
										stattree.SetItemText( time_aap_up_dc[mx][i] , cbuffer );
										i++;
									}
							}
							// Uploaded Data By Source
							if (forceUpdate || stattree.IsExpanded(time_aap_up_hd[mx][1]))
							{
								int i = 0;
								double	dDataSourceFile = g_App.m_pPrefs->GetCumUpData_File() * avgModifier[mx];
								uint64	DataSourceFile = static_cast<uint64>(dDataSourceFile);
								double	dDataSourcePF = g_App.m_pPrefs->GetCumUpData_PartFile() * avgModifier[mx];
								uint64	DataSourcePF = static_cast<uint64>(dDataSourcePF);
								double	dDataSourceTotal = g_App.m_pPrefs->GetUpTotalDataFile() * avgModifier[mx];
								uint64	DataSourceTotal = static_cast<uint64>(dDataSourceTotal);
								double	percentFileTransferred = 0;

								if ((DataSourceTotal != 0) && (DataSourceFile != 0))
									percentFileTransferred = 100.0 * dDataSourceFile / dDataSourceTotal;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DSFILE), CastItoXBytes(DataSourceFile), percentFileTransferred);
								stattree.SetItemText(time_aap_up_ds[mx][i], cbuffer); i++;

								if ((DataSourceTotal != 0) && (DataSourcePF != 0))
									percentFileTransferred = 100.0 * dDataSourcePF / dDataSourceTotal;
								else
									percentFileTransferred = 0;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DSPF), CastItoXBytes(DataSourcePF), percentFileTransferred);
								stattree.SetItemText(time_aap_up_ds[mx][i], cbuffer); i++;
							}
							// Uploaded Data By Community
							if (forceUpdate || stattree.IsExpanded(time_aap_up_hd[mx][2]))
							{
								int i = 0;
								double	dDataCommunity = g_App.m_pPrefs->GetCumUpData_Community() * avgModifier[mx];
								uint64	DataCommunity = static_cast<uint64>(dDataCommunity);
								double	dDataNoCommunity = g_App.m_pPrefs->GetCumUpData_NoCommunity() * avgModifier[mx];
								uint64	DataNoCommunity = static_cast<uint64>(dDataNoCommunity);
								double	dDataTotal = g_App.m_pPrefs->GetUpTotalDataCommunity() * avgModifier[mx];
								uint64	DataTotal = static_cast<uint64>(dDataTotal);
								double	percentCommunityTransferred = 0;

								if ((DataTotal != 0) && (DataCommunity != 0))
									percentCommunityTransferred = 100.0 * dDataCommunity / dDataTotal;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_YES), CastItoXBytes(DataCommunity), percentCommunityTransferred);
								stattree.SetItemText( time_aap_up_com[mx][i] , cbuffer ); i++;

								if ((DataTotal != 0) && (DataNoCommunity != 0))
									percentCommunityTransferred = 100.0 * dDataNoCommunity / dDataTotal;
								else
									percentCommunityTransferred = 0;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_NO), CastItoXBytes(DataNoCommunity), percentCommunityTransferred);
								stattree.SetItemText( time_aap_up_com[mx][i] , cbuffer ); i++;
							}
						}
						// Upload Sessions
						double dGoodSessions = (g_App.m_pUploadQueue->GetSuccessfulUpCount() + g_App.m_pPrefs->GetUpSuccessfulSessions() + g_App.m_pUploadQueue->GetUploadQueueLength()) * avgModifier[mx];
						uint32 statGoodSessions = static_cast<uint32>(dGoodSessions);
						double dBadSessions = (g_App.m_pUploadQueue->GetFailedUpCount() + g_App.m_pPrefs->GetUpFailedSessions()) * avgModifier[mx];
						uint32 statBadSessions = static_cast<uint32>(dBadSessions);
						double percentSessions;
						cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_ULSES), statGoodSessions + statBadSessions);
						stattree.SetItemText(time_aap_up[mx][1], cbuffer);
						if (forceUpdate || stattree.IsExpanded(time_aap_up[mx][1]))
						{
							// Set Successful Upload Sessions
							if (statGoodSessions > 0) percentSessions = 100.0 * dGoodSessions / (dGoodSessions + dBadSessions);
							else percentSessions = 0;
							cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_SUCCUPCOUNT), statGoodSessions, percentSessions);
							stattree.SetItemText(time_aap_up_s[mx][0], cbuffer);
							// Set Failed Upload Sessions
							if (percentSessions != 0 && statBadSessions > 0) percentSessions = 100 - percentSessions; // There were some good sessions and bad ones...
							else if (percentSessions == 0 && statBadSessions > 0) percentSessions = 100; // There were bad sessions and no good ones, must be 100%
							else percentSessions = 0; // No sessions at all, or no bad ones.
							cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_FAILUPCOUNT), statBadSessions, percentSessions);
							stattree.SetItemText(time_aap_up_s[mx][1], cbuffer);
						}

						// Calculate Upline OH Totals
						uint64 UpOHTotal = g_App.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange() + g_App.m_pUploadQueue->GetUpDataOverheadServer() + g_App.m_pUploadQueue->GetUpDataOverheadOther();
						uint64 UpOHTotalPackets = g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets() + g_App.m_pUploadQueue->GetUpDataOverheadServerPackets() + g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets();

						// Set Cumulative Total Overhead
						cbuffer.Format(GetResString(IDS_TOVERHEAD), CastItoXBytes((uint64)((double)(uint64)(UpOHTotal + g_App.m_pPrefs->GetUpOverheadTotal()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(UpOHTotalPackets + g_App.m_pPrefs->GetUpOverheadTotalPackets()) * avgModifier[mx])));
						stattree.SetItemText(time_aap_up[mx][2], cbuffer);
						if (forceUpdate || stattree.IsExpanded(time_aap_up[mx][2]))
						{
							int i = 0;
							// Set up total file req OH
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_App.m_pPrefs->GetUpOverheadFileReq()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_App.m_pPrefs->GetUpOverheadFileReqPackets()) * avgModifier[mx])));
							stattree.SetItemText(time_aap_up_oh[mx][i], cbuffer); i++;
							// Set up total source exch OH
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange() + g_App.m_pPrefs->GetUpOverheadSrcEx()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets() + g_App.m_pPrefs->GetUpOverheadSrcExPackets()) * avgModifier[mx])));
							stattree.SetItemText(time_aap_up_oh[mx][i], cbuffer); i++;
							// Set up total server OH
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pUploadQueue->GetUpDataOverheadServer() + g_App.m_pPrefs->GetUpOverheadServer()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(g_App.m_pUploadQueue->GetUpDataOverheadServerPackets() + g_App.m_pPrefs->GetUpOverheadServerPackets()) * avgModifier[mx])));
							stattree.SetItemText(time_aap_up_oh[mx][i], cbuffer); i++;
							// Set up total others OH
							cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pUploadQueue->GetUpDataOverheadOther() + g_App.m_pPrefs->GetUpOverheadOther()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets() + g_App.m_pPrefs->GetUpOverheadOtherPackets()) * avgModifier[mx])));
							stattree.SetItemText(time_aap_up_oh[mx][i], cbuffer); i++;
						}
					} // - End Time Statistics -> Projected Averages -> Time Period -> Uploads Section
					// TIME STATISTICS -> PROJECTED AVERAGES -> TIME PERIOD -> DOWNLOADS SECTION
					if (forceUpdate || stattree.IsExpanded(time_aap_hdown[mx]))
					{
						g_App.m_pDownloadQueue->GetDownloadStats(adwDQSrc, aqwDQData);
						// Downloaded Data
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_DDATA), CastItoXBytes((uint64)((double)(uint64)(g_App.stat_sessionReceivedBytes+g_App.m_pPrefs->GetTotalDownloaded()) * avgModifier[mx])));
						stattree.SetItemText(time_aap_down[mx][0], cbuffer);
						if (forceUpdate || stattree.IsExpanded(time_aap_down[mx][0]))
						{
							// Downloaded Data By Client
							if (forceUpdate || stattree.IsExpanded(time_aap_down_hd[mx][0]))
							{
								double dDownDataTotal = g_App.m_pPrefs->GetDownTotalClientData() * avgModifier[mx];
								uint64 DownDataTotal = static_cast<uint64>(dDownDataTotal);
								uint64 DownDataClient;
								double dDownDataClient, percentClientTransferred;
								//eklmn: sequence was replaced to loop...
								int i = 0;
								for (int j = 0;j<SO_LAST;j++)
									if ((EnumClientTypes)j != SO_OLDEMULE)
									{
										if ((EnumClientTypes)j == SO_EMULE)
											dDownDataClient = (g_App.m_pPrefs->GetCumDownData((EnumClientTypes)j)
															+ g_App.m_pPrefs->GetCumDownData(SO_OLDEMULE)) * avgModifier[mx];
										else
											dDownDataClient = g_App.m_pPrefs->GetCumDownData((EnumClientTypes)j) * avgModifier[mx];
										DownDataClient = static_cast<uint64>(dDownDataClient);

										if ((DownDataTotal != 0) && (DownDataClient != 0))
											percentClientTransferred = 100.0 * dDownDataClient / dDownDataTotal;
										else
											percentClientTransferred = 0;
										cbuffer.Format(_T("%s: %s (%.1f%%)"), GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient), percentClientTransferred);
										stattree.SetItemText( time_aap_down_dc[mx][i] , cbuffer );
										i++;
									}
							}
						}
						// Set Cum Completed Downloads
						cbuffer.Format(_T("%s: %I64u"), GetResString(IDS_STATS_COMPDL), (uint64)(g_App.m_pPrefs->GetDownCompletedFiles() * avgModifier[mx]));
						stattree.SetItemText(time_aap_down[mx][1], cbuffer);
						// Set Cum Download Sessions
						double	dGoodSessions = (uint32)(g_App.m_pPrefs->GetDownC_SuccessfulSessions() + adwDQSrc[STATS_DLSRC_TRANSFERRING]) * avgModifier[mx];
						uint32	statGoodSessions = static_cast<uint32>(dGoodSessions);
						double	dBadSessions = (double)g_App.m_pPrefs->GetDownC_FailedSessions() * avgModifier[mx];
						uint32	statBadSessions = static_cast<uint32>(dBadSessions);
						double	percentSessions;
						cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_DLSES), statGoodSessions + statBadSessions);
						stattree.SetItemText(time_aap_down[mx][2], cbuffer);
						if (forceUpdate || stattree.IsExpanded(time_aap_down[mx][2]))
						{
							// Set Cum Successful Download Sessions
							if (statGoodSessions > 0) percentSessions = 100.0 * dGoodSessions / (dGoodSessions + dBadSessions);
							else percentSessions = 0;
							cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_SDLSES), statGoodSessions, percentSessions);
							stattree.SetItemText( time_aap_down_s[mx][0] , cbuffer ); // Set Successful Sessions
							// Set Cum Failed Download Sessions
							if (percentSessions != 0 && statBadSessions > 0) percentSessions = 100 - percentSessions; // There were some good sessions and bad ones...
							else if (percentSessions == 0 && statBadSessions > 0) percentSessions = 100; // There were bad sessions and no good ones, must be 100%
							else percentSessions = 0; // No sessions at all, or no bad ones.
							cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_FDLSES), statBadSessions, percentSessions);
							stattree.SetItemText( time_aap_down_s[mx][1] , cbuffer );
						}
						// Set Cumulative Gained Due To Compression
						cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pPrefs->GetSesSavedFromCompression() + g_App.m_pPrefs->GetCumSavedFromCompression()) * avgModifier[mx])));
						stattree.SetItemText(time_aap_down[mx][3], cbuffer);
						// Set Cumulative Lost Due To Corruption
						cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pPrefs->GetSesLostFromCorruption() + g_App.m_pPrefs->GetCumLostFromCorruption()) * avgModifier[mx])));
						stattree.SetItemText(time_aap_down[mx][4], cbuffer);
						// Set Cumulative Saved Due To ICH
						cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), (uint32)((g_App.m_pPrefs->GetSesPartsSavedByICH() + g_App.m_pPrefs->GetCumPartsSavedByICH()) * avgModifier[mx]));
						stattree.SetItemText(time_aap_down[mx][5], cbuffer);

						uint64 DownOHTotal = g_App.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchange() + g_App.m_pDownloadQueue->GetDownDataOverheadServer() + g_App.m_pDownloadQueue->GetDownDataOverheadOther();
						uint64 DownOHTotalPackets = g_App.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets() + g_App.m_pDownloadQueue->GetDownDataOverheadServerPackets() + g_App.m_pDownloadQueue->GetDownDataOverheadOtherPackets();
						// Total Overhead
						cbuffer.Format(GetResString(IDS_TOVERHEAD), CastItoXBytes((uint64)((double)(uint64)(DownOHTotal + g_App.m_pPrefs->GetDownOverheadTotal()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(DownOHTotalPackets + g_App.m_pPrefs->GetDownOverheadTotalPackets()) * avgModifier[mx])));
						stattree.SetItemText(time_aap_down[mx][6], cbuffer);
						if (forceUpdate || stattree.IsExpanded(time_aap_down[mx][6]))
						{
							int i = 0;
							// File Request Overhead
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_App.m_pPrefs->GetDownOverheadFileReq()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_App.m_pPrefs->GetDownOverheadFileReqPackets()) * avgModifier[mx])));
							stattree.SetItemText(time_aap_down_oh[mx][i], cbuffer); i++;
							// Source Exchange Overhead
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchange()+g_App.m_pPrefs->GetDownOverheadSrcEx()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets()+g_App.m_pPrefs->GetDownOverheadSrcExPackets()) * avgModifier[mx])));
							stattree.SetItemText(time_aap_down_oh[mx][i], cbuffer); i++;
							// Server Overhead
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadServer()+g_App.m_pPrefs->GetDownOverheadServer()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadServerPackets()+g_App.m_pPrefs->GetDownOverheadServerPackets()) * avgModifier[mx])));
							stattree.SetItemText(time_aap_down_oh[mx][i], cbuffer); i++;
							// Others Overhead
							cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes((uint64)((double)(uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadOther()+g_App.m_pPrefs->GetDownOverheadOther()) * avgModifier[mx])), CastItoIShort((uint64)((double)(uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadOtherPackets()+g_App.m_pPrefs->GetDownOverheadOtherPackets()) * avgModifier[mx])));
							stattree.SetItemText(time_aap_down_oh[mx][i], cbuffer); i++;
						}
					} // - End Time Statistics -> Projected Averages -> Time Period -> Downloads Section
				} // - End Time Statistics -> Projected Averages -> Time Period Sections
			} // - End Time Statistics -> Projected Averages Section
		} // - End Time Statistics -> Projected Averages Section Loop
	} // - END TIME STATISTICS SECTION


	// CLIENTS SECTION		[Original idea and code by xrmb]
	//						Note:	This section now has dynamic tree items.  This technique
	//								may appear in other areas, however, there is usually an
	//								advantage to displaying 0 datems.  Here, with the ver-
	//								sions being displayed the way they are, it makes sense.
	//								Who wants to stare at totally blank tree items?  ;)
	if (forceUpdate || stattree.IsExpanded(h_clients))
	{
		CMap<POSITION, POSITION, uint32, uint32>	clientMODs(200), clientPlusMODs;
		CMap<int, int, uint32, uint32>				clientCountries;

		uint32	totalclient, totalMODs, dwTotalPlusMODs, myStats[18];
		ClientsData 	AllClients;	// xrmb : statsclientstatus
		// get clientversion-counts
		g_App.m_pClientList->GetStatistics(totalclient, myStats, &AllClients, totalMODs, &dwTotalPlusMODs, &clientMODs, &clientPlusMODs, &clientCountries);
		//eklmn: check NULL exception
		if (totalclient == 0)
		{
			totalclient = 1;

			cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_ONLISTCLIENTS), 0);
			stattree.SetItemText(hcliconnected, cbuffer);

			cbuffer.Format(_T("%s: %u (0%%)"), GetResString(IDS_STATS_SUI), myStats[14]);
			stattree.SetItemText(cligen[0], cbuffer);

			cbuffer.Format(_T("%s: %u (0%%)"), GetResString(IDS_STATS_NONSUI), myStats[15]);
			stattree.SetItemText(cligen[1], cbuffer);

			cbuffer.Format(_T("%s: %u (0%%)"), GetResString(IDS_LOWID), myStats[16]);
			stattree.SetItemText(cligen[2], cbuffer);
		}
		else
		{
			cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_ONLISTCLIENTS), totalclient);
			stattree.SetItemText(hcliconnected, cbuffer);

			cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_SUI), myStats[14], static_cast<double>(100*myStats[14])/totalclient);
			stattree.SetItemText(cligen[0], cbuffer);

			cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_NONSUI), myStats[15], static_cast<double>(100*myStats[15])/totalclient);
			stattree.SetItemText(cligen[1], cbuffer);

			cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_LOWID), myStats[16], static_cast<double>(100*myStats[16])/totalclient);
			stattree.SetItemText(cligen[2], cbuffer);
		}

		// CLIENTS -> CLIENT SOFTWARE SECTION
		if (forceUpdate || stattree.IsExpanded(hcliconnected))
		{
			uint32 dwTotalMules = myStats[SO_EMULE] + myStats[SO_OLDEMULE];

			if (dwTotalMules)
				cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_CLIENT_MODS), totalMODs,100.0*totalMODs/dwTotalMules);
			else
				cbuffer.Format(_T("%s: %u (0.0%%)"), GetResString(IDS_STATS_CLIENT_MODS), totalMODs);
			stattree.SetItemText(hclisoftMODs, cbuffer);
			//eklmn: delete old stuff
			for (int im = 0; im < STAT_CLIENT_MOD_NODES; im++)
			{
				if (clisoftMODs[im] != NULL) stattree.DeleteChildItems(clisoftMODs[im]);
				m_nMODs[im] = 0;
			}
		//	Build a new MOD's subtree
			if (totalMODs)
			{
				uint32	dwLastTop = 0xFFFFFFFF;

				while (!clientMODs.IsEmpty())
				{
					POSITION	MOD_pos, top_pos = 0, pos = clientMODs.GetStartPosition();
					uint32		dwMODCnt, dwCurrTop = 0;

					while(pos)
					{
						clientMODs.GetNextAssoc(pos, MOD_pos, dwMODCnt);
						if ((dwCurrTop < dwMODCnt) && (dwMODCnt <= dwLastTop))
						{
							top_pos = MOD_pos;
							dwCurrTop = dwMODCnt;
						}
					}
					dwLastTop = dwCurrTop;

					if (top_pos)
					{
					// Sort clients by known types
						g_App.m_pClientList->GetMODType(top_pos, &strBuf2);
						for (uint32 dwModIdx = 0; dwModIdx < STAT_CLIENT_MOD_NODES; dwModIdx++)
						{
							if ((dwModIdx == (STAT_CLIENT_MOD_NODES - 1)) || (strBuf2.Find(GetMODType(dwModIdx)) >= 0))
							{
								m_nMODs[dwModIdx] += dwLastTop;
								// check item
								if (clisoftMODs[dwModIdx] == NULL)
								{
								// Delete "Others"
									if ((dwModIdx != (STAT_CLIENT_MOD_NODES - 1)) && (clisoftMODs[STAT_CLIENT_MOD_NODES - 1] != NULL))
									{
										stattree.DeleteItem(clisoftMODs[STAT_CLIENT_MOD_NODES - 1]);
										clisoftMODs[STAT_CLIENT_MOD_NODES - 1] = NULL;
									}
									clisoftMODs[dwModIdx] = stattree.InsertItem(cbuffer, hclisoftMODs);
								}
								// now insert a string
								cbuffer.Format(_T("%s: %u"), strBuf2, dwLastTop);
								stattree.InsertItem(cbuffer, clisoftMODs[dwModIdx]);
								break;
							}
						}
						clientMODs.RemoveKey(top_pos);
					}
				}
				for (uint32 dwModIdx = 0; dwModIdx < STAT_CLIENT_MOD_NODES; dwModIdx++)
				{
					if (clisoftMODs[dwModIdx] != NULL)
					{
						cbuffer.Format(_T("%s: %u (%.1f%%)"), GetMODType(dwModIdx), m_nMODs[dwModIdx], 100.0*m_nMODs[dwModIdx]/dwTotalMules);
						stattree.SetItemText(clisoftMODs[dwModIdx], cbuffer);
					}
				}
			}

			cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_CLIENT_MODS),
				dwTotalPlusMODs, (myStats[SO_PLUS]) ? (100.0 * dwTotalPlusMODs / myStats[SO_PLUS]) : 0.0);
			stattree.SetItemText(hclisoftPlusMODs, cbuffer);
			stattree.DeleteChildItems(hclisoftPlusMODs);
		//	Build a new MOD's subtree
			if (dwTotalPlusMODs)
			{
				uint32	dwLastTop = 0xFFFFFFFF;

				while (!clientPlusMODs.IsEmpty())
				{
					POSITION	MOD_pos, top_pos = 0, pos = clientPlusMODs.GetStartPosition();
					uint32		dwMODCnt, dwCurrTop = 0;

					while(pos)
					{
						clientPlusMODs.GetNextAssoc(pos, MOD_pos, dwMODCnt);
						if ((dwCurrTop < dwMODCnt) && (dwMODCnt <= dwLastTop))
						{
							top_pos = MOD_pos;
							dwCurrTop = dwMODCnt;
						}
					}
					dwLastTop = dwCurrTop;

					if (top_pos)
					{
						g_App.m_pClientList->GetMODType(top_pos, &strBuf2);
						cbuffer.Format(_T("%s: %u"), strBuf2, dwLastTop);
						stattree.InsertItem(cbuffer, hclisoftPlusMODs);
						clientPlusMODs.RemoveKey(top_pos);
					}
				}
			}

			uint32	clients;
			double	percentClients = 0;
			int it = 0;
			for (int j = 0; j < SO_LAST; j++)
				if ((EnumClientTypes)j != SO_OLDEMULE)
				{
					clients = myStats[j];
					if ((EnumClientTypes)j == SO_EMULE)
						clients += myStats[SO_OLDEMULE];
					percentClients = static_cast<double>(100*clients)/totalclient;
					cbuffer.Format(_T("%s: %u (%.1f%%)"), GetClientNameString((EnumClientTypes)j), clients, percentClients);
					stattree.SetItemText(clisoft[it], cbuffer);
					//eklmn: here we are building subtrees
					switch ((EnumClientTypes)j)
					{
						case SO_PLUS:
						case SO_EMULE:
						case SO_EDONKEYHYBRID:
						case SO_XMULE:
						case SO_MLDONKEY:
						case SO_AMULE:
						case SO_SHAREAZA:
						case SO_LPHANT:
							if (forceUpdate || stattree.IsExpanded(clisoft[it]) || clients != 0)
							{
								//eklmn: since "other versions" must be always on the bottom of the list, let's delete it,
								//           if last of the 4 top values is empty
								if (cli_versions_other[j])
								{
									stattree.DeleteItem(cli_versions_other[j]);
									cli_versions_other[j] = NULL;
								}
								//uint32 totcnt = 0;
								//uint32 verCount = 0;
								//--- find top 4 eDonkey client versions ---
								uint64	currtop = 0;
								uint64	lasttop = 0xFFFFFFFFFFFFFFFF;
								uint32	SubTotal = 0;
								for (uint32 i = 0; i < 4; i++)
								{
									POSITION pos = AllClients.m_pClients[j].GetStartPosition();
									uint32 topver=0;
									uint32 topcnt=0;
									uint64 cntver=0;
									uint32 ver;
									uint32 cnt;
									while(pos)
									{
										AllClients.m_pClients[j].GetNextAssoc(pos, ver, cnt);
										cntver = cnt; cntver <<= 32; cntver += ver;	//SyruS sort by popularity and version
										if(currtop<cntver && cntver<lasttop)
										{
											topver = ver;
											topcnt = cnt;
											currtop = cntver;
										}
									}
									lasttop=currtop;
									currtop=0;

									if (topcnt)
									{
										SubTotal += topcnt;
										cbuffer.Format(_T("%s: %u (%.1f%%)"), GetClientVersionString((EnumClientTypes)j,topver), topcnt, static_cast<double>(topcnt)/clients*100.0);
										//eklmn: if we found something just replaced a text
										if (cli_versions[j][i] != NULL)
											stattree.SetItemText(cli_versions[j][i], cbuffer);
										else
											cli_versions[j][i] = stattree.InsertItem(cbuffer, clisoft[it]);
									}
									else
									{
										if (cli_versions[j][i] != NULL)
										{
											stattree.DeleteItem(cli_versions[j][i]);
											cli_versions[j][i] = NULL;
										}
									}
								}
								//eklmn: check a other clients
								if ((clients-SubTotal) != 0)
								{
									cbuffer.Format(_T("%s: %u (%.1f%%)"), GetResString(IDS_STATS_OTHERS), (clients-SubTotal),100.0*(clients-SubTotal)/clients);
									if (cli_versions_other[j])
										stattree.SetItemText(cli_versions_other[j], cbuffer);
									else
										cli_versions_other[j] = stattree.InsertItem(cbuffer, clisoft[it]);
								}

							}
						default:
							break;
					}
					it++;
				}
		} // - End Clients -> Client Software Section
		// General Client Statistics
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_PROBLEMATIC), myStats[17]);stattree.SetItemText(cligen[3], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_BANNED), g_App.m_pUploadQueue->GetBanCount()); stattree.SetItemText(cligen[4], cbuffer);

		//Filtered ... subtree
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_FILTEREDCLIENTS),g_App.m_lTotalFiltered); stattree.SetItemText(hFiltered, cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_FILTEREDCLIENTS_IN),g_App.m_lIncomingFiltered); stattree.SetItemText(hFilteredItems[0], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_FILTEREDCLIENTS_OUT),g_App.m_lOutgoingFiltered); stattree.SetItemText(hFilteredItems[1], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_FILTEREDCLIENTS_SX),g_App.m_lSXFiltered); stattree.SetItemText(hFilteredItems[2], cbuffer);

	//	Countries subtree
		if (forceUpdate || stattree.IsExpanded(h_clients))
		{
			stattree.DeleteChildItems(hCountries);
			if (g_App.m_pIP2Country->IsIP2Country())
			{
				if (totalclient)
				{
					uint32	dwLastTop = 0xFFFFFFFF, dwCountryTotal = 0;

					while (!clientCountries.IsEmpty())
					{
						POSITION	pos = clientCountries.GetStartPosition();
						uint32		dwCountryCnt, dwCurrTop = 0;
						int			iCountryIdx, iTopIdx = 0;

						while(pos)
						{
							clientCountries.GetNextAssoc(pos, iCountryIdx, dwCountryCnt);
							if ((dwCurrTop < dwCountryCnt) && (dwCountryCnt <= dwLastTop))
							{
								iTopIdx = iCountryIdx;
								dwCurrTop = dwCountryCnt;
							}
						}
						if ((dwLastTop = dwCurrTop) != 0)
						{
							cbuffer.Format( _T("%s: %u (%.1f%%)"), g_App.m_pIP2Country->GetCountryNameByIndex(static_cast<uint16>(iTopIdx)),
								dwLastTop, static_cast<double>(100 * dwLastTop) / totalclient );
							stattree.InsertItem(cbuffer, hCountries);
							clientCountries.RemoveKey(iTopIdx);
							dwCountryTotal++;
						}
					}
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_COUNTRIES), dwCountryTotal);
				}
				else
					cbuffer.Format(_T("%s: <%s>"), GetResString(IDS_COUNTRIES), GetResString(IDS_FSTAT_WAITING));
			}
			else
				cbuffer.Format(_T("%s: <%s>"), GetResString(IDS_COUNTRIES), GetResString(IDS_DISABLED));
			stattree.SetItemText(hCountries, cbuffer);
		} // - End Countries
	} // - END CLIENTS SECTION


	// UPDATE RECORDS FOR SERVERS AND SHARED FILES
	g_App.m_pPrefs->SetRecordStructMembers();

	// SERVERS SECTION
	if (forceUpdate || stattree.IsExpanded(h_servers))
	{
		// Get stat values
		uint32	servtotal, servfail, servuser, servfile, servtuser, servtfile, dwSrvLowIdUsers;
		double	servocc;
		g_App.m_pServerList->GetServersStatus(servtotal, servfail, servuser, servfile, dwSrvLowIdUsers, servtuser, servtfile, servocc);
		// Set working servers value
		cbuffer.Format(_T("%s: %u"),GetResString(IDS_SF_WORKING),servtotal-servfail);stattree.SetItemText(srv[0], cbuffer);
		if (forceUpdate || stattree.IsExpanded(srv[0]))
		{
			// Set users on working servers value
			cbuffer.Format(_T("%s: %s; %s: %s (%.1f%%)"),GetResString(IDS_SF_WUSER),CastItoThousands(servuser),GetResString(IDS_LOWID),CastItoThousands(dwSrvLowIdUsers),servuser ? (dwSrvLowIdUsers * 100.0 / servuser) : 0.0);stattree.SetItemText(srv_w[0], cbuffer);
			// Set files on working servers value
			cbuffer.Format(_T("%s: %s"),GetResString(IDS_SF_WFILE),CastItoThousands(servfile));stattree.SetItemText(srv_w[1], cbuffer);
			// Set server occ value
			cbuffer.Format(GetResString(IDS_SF_SRVOCC),servocc);stattree.SetItemText(srv_w[2], cbuffer);
		}
		// Set failed servers value
		cbuffer.Format(_T("%s: %u"),GetResString(IDS_SF_FAIL),servfail);stattree.SetItemText(srv[1], cbuffer);
		// Set deleted servers value
		cbuffer.Format(_T("%s: %u"),GetResString(IDS_SF_DELCOUNT),g_App.m_pServerList->GetDeletedServerCount());stattree.SetItemText(srv[2], cbuffer);
		// Set total servers value
		cbuffer.Format(_T("%s: %u"),GetResString(IDS_SF_TOTAL),servtotal);stattree.SetItemText(srv[3], cbuffer);
		// Set total users value
		cbuffer.Format(_T("%s: %s"),GetResString(IDS_SF_USER),CastItoThousands(servtuser));stattree.SetItemText(srv[4], cbuffer);
		// Set total files value
		cbuffer.Format(_T("%s: %s"),GetResString(IDS_SF_FILE),CastItoThousands(servtfile));stattree.SetItemText(srv[5], cbuffer);
		// UDP Search status
		g_App.m_pDownloadQueue->GetUDPSearchStatus(&strBuf2);
		cbuffer.Format(GetResString(IDS_STATS_UDPSEARCH), strBuf2);
		stattree.SetItemText(srv[6], cbuffer);
		// SERVERS -> RECORDS SECTION
		if (forceUpdate || stattree.IsExpanded(hsrv_records))
		{
			// Set most working servers
			cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_SVRECWORKING), g_App.m_pPrefs->GetSrvrsMostWorkingServers() );
			stattree.SetItemText(srv_r[0], cbuffer);
			// Set most users online
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SVRECUSERS), CastItoThousands(g_App.m_pPrefs->GetSrvrsMostUsersOnline()) );
			stattree.SetItemText(srv_r[1], cbuffer);
			// Set most files avail
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SVRECFILES), CastItoThousands(g_App.m_pPrefs->GetSrvrsMostFilesAvail()) );
			stattree.SetItemText(srv_r[2], cbuffer);
		} // - End Servers -> Records Section
	} // - END SERVERS SECTION


	// SHARED FILES SECTION
	if (forceUpdate || stattree.IsExpanded(h_shared))
	{
		// Set Number of Shared Files
		cbuffer.Format(GetResString(IDS_SHAREDFILESCOUNT),g_App.m_pSharedFilesList->GetCount());
		stattree.SetItemText(shar[0], cbuffer);
		// Set Average File Size
		uint64 qwLargestFile;
		uint64 allsize = g_App.m_pSharedFilesList->GetDatasize(&qwLargestFile); // returns total share size as well as largest filesize

		cbuffer.Format( GetResString(IDS_SF_AVERAGESIZE),
			CastItoXBytes((g_App.m_pSharedFilesList->GetCount() != 0) ? (allsize / g_App.m_pSharedFilesList->GetCount()) : 0) );
		stattree.SetItemText(shar[1], cbuffer);
		// Set Largest File Size
		cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_LARGESTFILE), CastItoXBytes(qwLargestFile));
		stattree.SetItemText(shar[2], cbuffer);
		// Set Total Share Size
		cbuffer.Format(GetResString(IDS_SF_SIZE),CastItoXBytes(allsize));
		stattree.SetItemText(shar[3], cbuffer);

		// SHARED FILES -> RECORDS SECTION
		if (forceUpdate || stattree.IsExpanded(hshar_records))
		{
			// Set Most Files Shared
			cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_SHRECNUM), g_App.m_pPrefs->GetSharedMostFilesShared() );
			stattree.SetItemText(shar_r[0], cbuffer);
			// Set largest avg file size
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SHRECASIZE), CastItoXBytes(g_App.m_pPrefs->GetSharedLargestAvgFileSize()) );
			stattree.SetItemText(shar_r[1], cbuffer);
			// Set largest file size
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_LARGESTFILE), CastItoXBytes(g_App.m_pPrefs->GetSharedLargestFileSize()) );
			stattree.SetItemText(shar_r[2], cbuffer);
			// Set largest share size
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SHRECSIZE), CastItoXBytes(g_App.m_pPrefs->GetSharedLargestShareSize()) );
			stattree.SetItemText(shar_r[3], cbuffer);
		} // - End Shared Files -> Records Section
	} // - END SHARED FILES SECTION

	// - End Set Tree Values

	stattree.SetRedraw(true);
} // ShowStatistics(bool forceRedraw = false){}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::Localize()
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_STATIC_D3, IDS_ST_DOWNLOAD },
		{ IDC_STATIC_U, IDS_ST_UPLOAD },
		{ IDC_STATIC_A, IDS_SP_ACTCON },
		{ IDC_BNMENU, IDS_STATISTICS }
	};
	static const uint16 s_auResTbl2[][2] =
	{
		{ IDC_STATIC_D, IDS_ST_CURRENT },
		{ IDC_STATIC_U2, IDS_ST_CURRENT },
		{ IDC_STATIC_D2, IDS_ST_SESSION },
		{ IDC_STATIC_U3, IDS_ST_SESSION },
		{ IDC_STATIC_S2, IDS_ST_ACTIVEDOWNLOAD },
		{ IDC_STATIC_S1, IDS_ST_ACTIVEUPLOAD }
	};
	CString	strBuffer;

	for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
	{
		GetResString(&strBuffer, static_cast<UINT>(s_auResTbl[i][1]));
		SetDlgItemText(s_auResTbl[i][0], strBuffer);
	}

	for (uint32 i = 0; i < ARRSIZE(s_auResTbl2); i++)
	{
		GetResString(&strBuffer, static_cast<UINT>(s_auResTbl2[i][1]));
		strBuffer.MakeLower();
		SetDlgItemText(s_auResTbl2[i][0], strBuffer);
	}

	GetResString(&strBuffer, IDS_PW_GENERAL);
	strBuffer.MakeLower();
	if (g_App.m_pPrefs->GetGraphRatio() == 255) // 255 magic number for %
		strBuffer += _T(" (%)");
	else
		strBuffer.AppendFormat(_T(" (1:%u)"), g_App.m_pPrefs->GetGraphRatio());
	SetDlgItemText(IDC_STATIC_S0, strBuffer);
	strBuffer.Format( _T("%s (%u %s)"), GetResString(IDS_AVG).MakeLower(),
		g_App.m_pPrefs->GetStatsAverageMinutes(), GetResString(IDS_MINS) );
	SetDlgItemText(IDC_TIMEAVG1, strBuffer);
	SetDlgItemText(IDC_TIMEAVG2, strBuffer);

	if (IsRightToLeftLanguage())
		GetDlgItem(IDC_STATTREE)->ModifyStyleEx(0, WS_EX_RTLREADING);
	else
		GetDlgItem(IDC_STATTREE)->ModifyStyleEx(WS_EX_RTLREADING, 0);

	CreateStatsTree();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Menu Button: Displays the menu of stat tree commands.
void CStatisticsDlg::OnMenuButtonClicked()
{
	CRect rectBn;
	CPoint thePoint;
	CSize theSize;
	GetDlgItem(IDC_BNMENU)->GetWindowRect(&rectBn);
	thePoint = rectBn.TopLeft();
	theSize.SetSize(42,18);
	stattree.DoMenu(thePoint.operator+(theSize));
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::CreateStatsTree()
{
	CString buffer;

	stattree.SetRedraw(false);

	EMULE_TRY

	stattree.DeleteAllItems();

//	Setup Tree
//	Transfer section
	h_transfer = stattree.InsertItem(GetResString(IDS_TRANSFER_NOUN), 1, 1);
		buffer.Format(_T("%s %s"), GetResString(IDS_STATS_SRATIO), GetResString(IDS_FSTAT_WAITING));			// Make It Pretty
		trans[0]= stattree.InsertItem(buffer, h_transfer);												// Session Ratio
		buffer.Format(_T("%s %s"), GetResString(IDS_STATS_CRATIO), GetResString(IDS_FSTAT_WAITING));			// Make It Pretty
		trans[1]= stattree.InsertItem(buffer, h_transfer);												// Cumulative Ratio

//	Upload section
	h_upload = stattree.InsertItem(GetResString(IDS_TW_UPLOADS), 6,6,h_transfer);
	//	UL: session
		h_up_session= stattree.InsertItem(GetResString(IDS_STATS_SESSION), 8,8,h_upload);				// Session Section (Uploads)
		for(int i = 0; i<4; i++) up_S[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_up_session);
				hup_scb= stattree.InsertItem(GetResString(IDS_CLIENTS),up_S[0]);						// Clients Section
				for(int i = 0; i<(SO_LAST-1); i++) up_scb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_scb);
				hup_ssb= stattree.InsertItem(GetResString(IDS_STATS_DATASOURCE),up_S[0]);				// Data Source Section
				for(int i = 0; i<2; i++) up_ssb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_ssb);
				hup_scomb= stattree.InsertItem(GetResString(IDS_COMMUNITY), up_S[0]);		// Community Section
				for(int i = 0; i<2; i++) up_scomb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_scomb);
				hULPrioDataNode = stattree.InsertItem(GetResString(IDS_PRIORITY),up_S[0]);		// FilePriority Section
				for(int i = 0; i<5; i++) hULPrioDataItems[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hULPrioDataNode);
			//	upload session section
				for(int i = 0; i<4; i++) up_ssessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), up_S[3]);
					// successful sessions
					for(int i = 0; i<2; i++) up_ssessions_s[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), up_ssessions[0]);
					for(int i = 0; i<ETS_TERMINATOR; i++) up_ssessions_spc[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), up_ssessions_s[1]);
					// failed sessions
					for(int i = 0; i<ETS_TERMINATOR; i++) up_ssessions_f[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), up_ssessions[1]);
				hup_soh= stattree.InsertItem(GetResString(IDS_STATS_OVRHD),h_up_session);				// Upline Overhead (Session)
				for(int i = 0; i<4; i++) up_soh[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_soh);
	//	UL: cumulative
		h_up_total= stattree.InsertItem(GetResString(IDS_STATS_CUMULATIVE),9,9, h_upload);				// Cumulative Section (Uploads)
		up_T[0]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_up_total);						// Uploaded Data (Total)
			hup_tcb= stattree.InsertItem(GetResString(IDS_CLIENTS),up_T[0]);							// Clients Section
			for(int i = 0; i<(SO_LAST-1); i++) up_tcb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_tcb);
			hup_tsb= stattree.InsertItem(GetResString(IDS_STATS_DATASOURCE),up_T[0]);					// Data Source Section
			for(int i = 0; i<2; i++) up_tsb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_tsb);
			hup_tcomb= stattree.InsertItem(GetResString(IDS_COMMUNITY), up_T[0]);			// Community Section
			for(int i = 0; i<2; i++) up_tcomb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_tcomb);
			up_T[1]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_up_total);					// Upload Sessions (Total)
			for(int i = 0; i < ARRSIZE(up_tsessions); i++) up_tsessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), up_T[1]);
			hup_toh= stattree.InsertItem(GetResString(IDS_STATS_OVRHD),h_up_total);						// Upline Overhead (Total)
			for(int i = 0; i<4; i++) up_toh[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_toh);

//	Download section
	h_download = stattree.InsertItem(GetResString(IDS_TW_DOWNLOADS), 7,7,h_transfer);
	//	DL: session
		h_down_session= stattree.InsertItem(GetResString(IDS_STATS_SESSION),8,8, h_download);			// Session Section (Downloads)
		for(int i = 0; i<17; i++) down_S[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_down_session);
			hdown_scb= stattree.InsertItem(GetResString(IDS_CLIENTS),down_S[0]);						// Clients Section
			for(int i = 0; i<(SO_LAST-1); i++) down_scb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hdown_scb);
			for(int i = 0; i < ARRSIZE(down_sources); i++) down_sources[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[12]);
			for(int i = 0; i<4; i++) down_ssessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[13]);
				htiDLFailedSesNRD = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_ssessions[1]);
			hdown_soh= stattree.InsertItem(GetResString(IDS_STATS_OVRHD),h_down_session);				// Downline Overhead (Session)
			for(int i = 0; i<4; i++) down_soh[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hdown_soh);

	//	DL: cumulative
		h_down_total= stattree.InsertItem(GetResString(IDS_STATS_CUMULATIVE),9,9, h_download);			// Cumulative Section (Downloads)
		for(int i = 0; i<6; i++) down_T[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_down_total);
			hdown_tcb= stattree.InsertItem(GetResString(IDS_CLIENTS),down_T[0]);						// Clients Section
			for(int i = 0; i<(SO_LAST-1); i++) down_tcb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hdown_tcb);
			for(int i = 0; i < ARRSIZE(down_tsessions); i++) down_tsessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_T[2]);
			hdown_toh= stattree.InsertItem(GetResString(IDS_STATS_OVRHD),h_down_total);					// Downline Overhead (Total)
			for(int i = 0; i<4; i++) down_toh[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hdown_toh);

//	Connection section
	h_connection = stattree.InsertItem(GetResString(IDS_FSTAT_CONNECTION),2,2);
	//	Connection: session
		h_conn_session= stattree.InsertItem(GetResString(IDS_STATS_SESSION),8,8,h_connection);		// Session Section (Connection)
			hconn_sg= stattree.InsertItem(GetResString(IDS_PW_GENERAL), 11, 11, h_conn_session);	// General Section (Session)
			for(int i = 0; i<5; i++) conn_sg[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hconn_sg);
			hconn_su= stattree.InsertItem(GetResString(IDS_UPLOAD_NOUN),6,6,h_conn_session);		// Uploads Section (Session)
			for(int i = 0; i<4; i++) conn_su[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hconn_su);
			hconn_sd= stattree.InsertItem(GetResString(IDS_DOWNLOAD_NOUN),7,7,h_conn_session);			// Downloads Section (Session)
			for(int i = 0; i<4; i++) conn_sd[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hconn_sd);
	//	Connection: cumulative
		h_conn_total= stattree.InsertItem(GetResString(IDS_STATS_CUMULATIVE),9,9,h_connection);		// Cumulative Section (Connection)
			hconn_tg= stattree.InsertItem(GetResString(IDS_PW_GENERAL), 11, 11, h_conn_total);		// General (Total)
			for(int i = 0; i<4; i++) conn_tg[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hconn_tg);
			hconn_tu= stattree.InsertItem(GetResString(IDS_UPLOAD_NOUN),6,6,h_conn_total);			// Uploads (Total)
			for(int i = 0; i<3; i++) conn_tu[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hconn_tu);
			hconn_td= stattree.InsertItem(GetResString(IDS_DOWNLOAD_NOUN),7,7,h_conn_total);				// Downloads (Total)
			for(int i = 0; i<3; i++) conn_td[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hconn_td);

//	Time section
	h_time = stattree.InsertItem(GetResString(IDS_STATS_TIMESTATS),12,12);							// Time Statistics Section
	for(int i = 0; i<2; i++) tvitime[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_time);
	//	Time: session
		htime_s = stattree.InsertItem(GetResString(IDS_STATS_SESSION),8,8,h_time);					// Session Section (Time)
			for(int i = 0; i<4; i++) tvitime_s[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), htime_s);
			for(int i = 0; i<2; i++) tvitime_st[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), tvitime_s[1]);
	//	Time: cumulative
		htime_t = stattree.InsertItem(GetResString(IDS_STATS_CUMULATIVE),9,9,h_time);				// Cumulative Section (Time)
			for(int i = 0; i<3; i++) tvitime_t[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), htime_t);
			for(int i = 0; i<2; i++) tvitime_tt[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), tvitime_t[1]);

		htime_aap = stattree.InsertItem(GetResString(IDS_STATS_AVGANDPROJ),13,13,h_time);			// Projected Averages Section
			time_aaph[0] = stattree.InsertItem(GetResString(IDS_STATS_DAYLY),14,14,htime_aap);		// Daily Section
			time_aaph[1] = stattree.InsertItem(GetResString(IDS_STATS_MONTHLY),15,15,htime_aap);	// Monthly Section
			time_aaph[2] = stattree.InsertItem(GetResString(IDS_STATS_YEARLY),16,16,htime_aap);		// Yearly Section
			for(int x = 0; x<3; x++)
			{
				time_aap_hup[x] = stattree.InsertItem(GetResString(IDS_TW_UPLOADS),6,6,time_aaph[x]);	// Upload Section
				for(int i = 0; i<3; i++) time_aap_up[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),time_aap_hup[x]);

				time_aap_up_hd[x][0] = stattree.InsertItem(GetResString(IDS_CLIENTS),time_aap_up[x][0]);					// Clients Section
				for(int i = 0; i<(SO_LAST-1); i++) time_aap_up_dc[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_up_hd[x][0]);
				time_aap_up_hd[x][1] = stattree.InsertItem(GetResString(IDS_STATS_DATASOURCE),time_aap_up[x][0]);			// Data Source Section
				for(int i = 0; i<2; i++) time_aap_up_ds[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_up_hd[x][1]);
				time_aap_up_hd[x][2] = stattree.InsertItem(GetResString(IDS_COMMUNITY), time_aap_up[x][0]);		// Community Section
				for(int i = 0; i<2; i++) time_aap_up_com[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_up_hd[x][2]);
				for(int i = 0; i<2; i++) time_aap_up_s[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_up[x][1]);
				for(int i = 0; i<4; i++) time_aap_up_oh[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_up[x][2]);

				time_aap_hdown[x] = stattree.InsertItem(GetResString(IDS_TW_DOWNLOADS),7,7,time_aaph[x]);					// Download Section
				for(int i = 0; i<7; i++) time_aap_down[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),time_aap_hdown[x]);
				time_aap_down_hd[x][0] = stattree.InsertItem(GetResString(IDS_CLIENTS),time_aap_down[x][0]);				// Clients Section
				for(int i = 0; i<(SO_LAST-1); i++) time_aap_down_dc[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_down_hd[x][0]);
				for(int i = 0; i<2; i++) time_aap_down_s[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_down[x][2]);
				for(int i = 0; i<4; i++) time_aap_down_oh[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_down[x][6]);
			}

//	Client section
	h_clients = stattree.InsertItem(GetResString(IDS_CLIENTS),3,3);															// Clients Section
		hcliconnected = stattree.InsertItem(GetResString(IDS_STATS_ONLISTCLIENTS),h_clients);								// Connected Section
			for (int i = 0; i < (SO_LAST-1); i++)
				clisoft[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hcliconnected /*hclisoft*/);
			GetResString(&buffer, IDS_STATS_CLIENT_MODS);
			hclisoftMODs = stattree.InsertItem(buffer, clisoft[SO_EMULE]);			// eMule MODs Section
			hclisoftPlusMODs = stattree.InsertItem(buffer, clisoft[SO_PLUS]);			// eMule Plus MODs Section
			for (int im = 0; im < STAT_CLIENT_MOD_NODES; im++)
			{
				clisoftMODs[im] = NULL; m_nMODs[im] = 0;
			}
			for (int i = 0; i<(SO_LAST-1); i++)
			{
				cli_versions_other[i] = NULL; for (int j=0; j<4;j++) cli_versions[i][j] = NULL;
			}
			for(int i = 0; i<5; i++) cligen[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_clients);	// general clients stats
		hFiltered = stattree.InsertItem(GetResString(IDS_STATS_FILTEREDCLIENTS),h_clients);							// subsections: filtered
			for(int i = 0; i<3; i++) hFilteredItems[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hFiltered);
		hCountries = stattree.InsertItem(GetResString(IDS_COUNTRIES),h_clients);									// Countries Section			

//	Server section
	h_servers = stattree.InsertItem(GetResString(IDS_SERVERS),4,4);											// Servers section
		for(int i = 0; i<7; i++) srv[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_servers);			// Servers Items
		for(int i = 0; i<3; i++) srv_w[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), srv[0]);			// Working Servers Items
		hsrv_records = stattree.InsertItem(GetResString(IDS_STATS_RECORDS),10,10,h_servers);						// Servers Records Section
		for(int i = 0; i<3; i++) srv_r[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hsrv_records);		// Record Items

//	Shared files
	h_shared = stattree.InsertItem( GetResString(IDS_SHAREDFILES),5,5 );											// Shared Files Section
		for(int i = 0; i<4; i++) shar[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_shared);
		hshar_records= stattree.InsertItem(GetResString(IDS_STATS_RECORDS),10,10,h_shared);							// Shared Records Section
		for(int i = 0; i<4; i++) shar_r[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hshar_records);

//	Make section headers bold in order to make the tree easier to view at a glance.
	stattree.SetItemState(h_transfer, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_connection, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_time, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(htime_s, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(htime_t, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(htime_aap, TVIS_BOLD, TVIS_BOLD);
	for(int i = 0; i<3; i++)
	{
		stattree.SetItemState(time_aaph[i], TVIS_BOLD, TVIS_BOLD);
		stattree.SetItemState(time_aap_hup[i], TVIS_BOLD, TVIS_BOLD);
		stattree.SetItemState(time_aap_hdown[i], TVIS_BOLD, TVIS_BOLD);
	}
	stattree.SetItemState(h_clients, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_servers, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_shared, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_upload, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_download, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_up_session, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_up_total, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_down_session, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_down_total, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_conn_session, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(h_conn_total, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(hsrv_records, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(hshar_records, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(hconn_sg, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(hconn_su, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(hconn_sd, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(hconn_tg, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(hconn_tu, TVIS_BOLD, TVIS_BOLD);
	stattree.SetItemState(hconn_td, TVIS_BOLD, TVIS_BOLD);

//	Expand our purdy new tree...
	CString strTreeMask(g_App.m_pPrefs->GetExpandedTreeItems());

	if (strTreeMask.IsEmpty())
		strTreeMask = PREF_DEF_STATREE_MASK;
	stattree.ApplyExpandedMask(strTreeMask);

//	Select the top item so that the tree is not scrolled to the bottom when first viewed.
	stattree.SelectItem(h_transfer);

//	End Tree Setup
	EMULE_CATCH

	stattree.SetRedraw(true);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::UpdateActConScale()
{
	EMULE_TRY

	int iStatYGrids=int((g_App.m_pPrefs->GetStatsMax()/10.0)+0.1)-1;
	if (iStatYGrids>10)
		iStatYGrids=int((g_App.m_pPrefs->GetStatsMax()/50.0)+0.1)-1;
	m_Statistics.m_nYGrids=iStatYGrids;

	m_Statistics.SetRanges(0, g_App.m_pPrefs->GetStatsMax());

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::ShowInterval()
{
	if (!g_App.m_pMDlg->IsRunning())
		return;

	EMULE_TRY

	EnableWindow(FALSE);

	if(!m_DownloadOMeter.GetSafeHwnd() || !m_UploadOMeter.GetSafeHwnd())
		return;

	CRect r;
	m_DownloadOMeter.GetPlotRect(r);

	if (g_App.m_pPrefs->GetTrafficOMeterInterval() == 0)
	{
		m_DownloadOMeter.SetXUnits(GetResString(IDS_STOPPED));
		m_UploadOMeter.SetXUnits(GetResString(IDS_STOPPED));
	}
	else
	{
		CString buffer = CastSecondsToHM(r.Width() * g_App.m_pPrefs->GetTrafficOMeterInterval());

		m_UploadOMeter.SetXUnits(buffer);
		m_DownloadOMeter.SetXUnits(buffer);
	}

	UpdateData(FALSE);
	EnableWindow(TRUE);

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::SetARange(bool SetDownload,int maxValue)
{
	COScopeCtrl	*pScope;
	uint32		dwNotch, dwScale = 0;

	if (SetDownload)
	{
		do
		{
			dwScale += 10;
			dwNotch = (maxValue + (dwScale - 1)) / dwScale;
		} while(dwNotch > 12);
		pScope = &m_DownloadOMeter;
	}
	else
	{
		do
		{
			dwScale += 2;
			dwNotch = (maxValue + (dwScale - 1)) / dwScale;
		} while(dwNotch > 12);
		pScope = &m_UploadOMeter;
	}
	pScope->m_nYGrids = dwNotch - 1;
	dwNotch *= dwScale;
	pScope->SetRange(0, dwNotch, 0);
	pScope->SetRange(0, dwNotch, 1);
	pScope->SetRange(0, dwNotch, 2);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::OnSize(UINT nType, int cx, int cy)
{
	CResizableDialog::OnSize(nType, cx, cy);
	if ((cx > 0 && cy > 0) && (cx != m_oldcx && cy != m_oldcy))
	{
		m_oldcx=cx;
		m_oldcy=cy;
		ShowInterval();
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double CStatisticsDlg::GetAvgDownloadRate(int averageType)
{
	EMULE_TRY

	//check initial state
	if (g_App.stat_transferStarttime==0)
		return 0.0f;

	if (averageType==AVG_SESSION)
	{
		DWORD dwRunTime_MS = ::GetTickCount() - g_App.stat_transferStarttime;

		//Cax2 - stops the sudden session upload average 'jump' at the beginning.
		if (dwRunTime_MS < 5000)
			return 0;
		//eklmn: calculation of mean value only with one division allows us to get better result
		return ((double)g_App.stat_sessionReceivedBytes)/((double) dwRunTime_MS * 1.024);
	}
	else
	{
		if (downrateHistory.empty())
			return 0;
		//Cax2 - we could use that formula... but it's faster if we compute that ratio beforehand,
		//Cax2 - & more accurate if we use the actual data we have now instead of the front of the list.
		return ((double)(g_App.stat_sessionReceivedBytes - downrateHistory.back()))/((double)(::GetTickCount() - timeHistory.back())*1.024);
	}

	EMULE_CATCH

	return 0.0f;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double CStatisticsDlg::GetAvgUploadRate(int averageType)
{
	EMULE_TRY

	//check initial state
	if (g_App.stat_transferStarttime==0)
		return 0.0f;

	if (averageType == AVG_SESSION)
	{
		DWORD dwRunTime_MS = ::GetTickCount() - g_App.stat_transferStarttime;

		//Cax2 - stops the sudden session upload average 'jump' at the beginning.
		if (dwRunTime_MS < 5000)
			return 0;
		//eklmn: calculation of mean value only with one division allows us to get better result
		return ((double)g_App.stat_sessionSentBytes)/((double) dwRunTime_MS * 1.024);
	}
	else
	{
		if (uprateHistory.empty())
			return 0.0f;
		//Cax2 - precomputed ratio. see above
		return ((double)(g_App.stat_sessionSentBytes - uprateHistory.back()))/((double)(::GetTickCount() - timeHistory.back())*1.024);
	}

	EMULE_CATCH

	return 0.0f;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::RecordRate()
{
	EMULE_TRY

	if (g_App.stat_transferStarttime==0)
		return;

	DWORD tickNow = ::GetTickCount();

	// Cax 2: save every 10th of the statsaverageminutes (no need to be more accurate...)
	// check time has passed since we updated the list last
	DWORD nUpdateTime = g_App.m_pPrefs->GetStatsAverageMinutes()*60*100;		//A 10th of the average interval
	if (tickNow - timeHistory.front() < nUpdateTime)
		return;

	downrateHistory.push_front(g_App.stat_sessionReceivedBytes);
	uprateHistory.push_front(g_App.stat_sessionSentBytes);
	timeHistory.push_front(tickNow);

	// limit to maxmins
	nUpdateTime *= 10; //Now we finally get the average interval expressed in ticks!
	while (tickNow-timeHistory.back()>nUpdateTime)		//Cax2 - keep them in sync
	{
		downrateHistory.pop_back();
		uprateHistory.pop_back();
		timeHistory.pop_back();
	}
	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::UpdateConnectionsStatus()
{
	EMULE_TRY

	// Can't do anything before OnInitDialog
	if(!m_hWnd)
		return;

#ifdef OLD_SOCKETS_ENABLED
	activeconnections = g_App.m_pListenSocket->GetNumOpenSockets(); // netwolf 07.05.03 (moved here from CStatisticsDlg::SetCurrentRate())
	// Update statistics for 'peak connections'
	if (peakconnections < activeconnections)
		peakconnections = activeconnections;
	if (peakconnections > g_App.m_pPrefs->GetConnPeakConnections())
		g_App.m_pPrefs->Add2ConnPeakConnections(peakconnections);

	if (g_App.m_pServerConnect->IsConnected())
	{
		double	dPercent;

		// Get a weight for the 'avg. connections' value. The longer we run the higher 
		// gets the weight (the percent of 'avg. connections' we use).
		if (++totalconnectionchecks < 100)
			dPercent = static_cast<double>(totalconnectionchecks - 1) / static_cast<double>(totalconnectionchecks);
		else
			dPercent = 0.99;

		// The longer we run the more we use the 'avg. connections' value and the less we
		// use the 'active connections' value. However, if we are running quite some time
		// without any connections (except the server connection) we will eventually create 
		// a floating point underflow exception.
		averageconnections = averageconnections * dPercent + static_cast<double>(activeconnections) * (1.0 - dPercent);
		if (averageconnections < 0.001)
			averageconnections = 0.001;	// avoid floating point underflow
	}
#endif //OLD_SOCKETS_ENABLED

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::SetCurrentRate(uint32 dwUpRate, uint32 dwDownRate)
{
	EMULE_TRY

	if (!g_App.m_pMDlg->IsRunning())
		return;

	// Can't do anything before OnInitDialog
	if(!m_hWnd)
		return;

	double	adPlotDataUp[3], adPlotDataDown[3], adPlotDataMore[3];
	uint64	myBigStats[STATS_DLDATA_COUNT];
	uint32	adwRateStats[STATS_DLSRC_COUNT];

//	Current rate
	adPlotDataUp[2] = static_cast<double>(dwUpRate) / 1024.0;
	adPlotDataDown[2] = static_cast<double>(dwDownRate) / 1024.0;
	if (maxDown < adPlotDataDown[2])
		maxDown = adPlotDataDown[2];

//	Averages
	adPlotDataDown[0] = GetAvgDownloadRate(AVG_SESSION);
	adPlotDataUp[0] = GetAvgUploadRate(AVG_SESSION);
	adPlotDataDown[1] = GetAvgDownloadRate(AVG_TIME);
	adPlotDataUp[1] = GetAvgUploadRate(AVG_TIME);
//	Show
	m_DownloadOMeter.AppendPoints(adPlotDataDown);
	m_UploadOMeter.AppendPoints(adPlotDataUp);

	// get Partialfiles summary

	g_App.m_pDownloadQueue->GetDownloadStats(adwRateStats, myBigStats);
	if(g_App.m_pPrefs->GetGraphRatio() == 255) // 255 magic number for %
		adPlotDataMore[0] = (100*activeconnections/g_App.m_pPrefs->GetMaxConnections());
	else
		adPlotDataMore[0] = (activeconnections/g_App.m_pPrefs->GetGraphRatio());
	adPlotDataMore[1] = g_App.m_pUploadQueue->GetUploadQueueLength();
	adPlotDataMore[2] = adwRateStats[STATS_DLSRC_TRANSFERRING];

	m_Statistics.AppendPoints(adPlotDataMore);

	UpDown updown = { dwDownRate, dwUpRate, activeconnections };

	g_App.m_pWebServer->AddStatsLine(&updown);

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::RepaintMeters()
{
	EMULE_TRY

	EnableWindow(FALSE);

	m_DownloadOMeter.SetBackgroundColor(g_App.m_pPrefs->GetStatsColor(0));
	m_DownloadOMeter.SetGridColor(g_App.m_pPrefs->GetStatsColor(1));
	m_DownloadOMeter.SetPlotColor(g_App.m_pPrefs->GetStatsColor(4), 0);
	m_DownloadOMeter.SetPlotColor(g_App.m_pPrefs->GetStatsColor(3), 1);
	m_DownloadOMeter.SetPlotColor(g_App.m_pPrefs->GetStatsColor(2), 2);
	m_UploadOMeter.SetBackgroundColor(g_App.m_pPrefs->GetStatsColor(0));
	m_UploadOMeter.SetGridColor(g_App.m_pPrefs->GetStatsColor(1));
	m_UploadOMeter.SetPlotColor(g_App.m_pPrefs->GetStatsColor(7), 0);
	m_UploadOMeter.SetPlotColor(g_App.m_pPrefs->GetStatsColor(6), 1);
	m_UploadOMeter.SetPlotColor(g_App.m_pPrefs->GetStatsColor(5), 2);
	m_Statistics.SetBackgroundColor(g_App.m_pPrefs->GetStatsColor(0));
	m_Statistics.SetGridColor(g_App.m_pPrefs->GetStatsColor(1));
	m_Statistics.SetPlotColor(g_App.m_pPrefs->GetStatsColor(8), 0);
	m_Statistics.SetPlotColor(g_App.m_pPrefs->GetStatsColor(9), 1);
	m_Statistics.SetPlotColor(g_App.m_pPrefs->GetStatsColor(10), 2);

	if (m_byteStatGraphRatio != g_App.m_pPrefs->GetGraphRatio())	//	Resize the general connections...
	{
		// xrmb: if either old or new is % we need to invalidate 
		// (maybe not true, but don't have the time to think about this)
		// btw. 255 is still the magic number for %
		if(m_byteStatGraphRatio == 255 || g_App.m_pPrefs->GetGraphRatio() == 255)
			m_Statistics.Invalidate();
		else
			m_Statistics.ReSizePlot(0,(double)m_byteStatGraphRatio/g_App.m_pPrefs->GetGraphRatio());
		m_byteStatGraphRatio = g_App.m_pPrefs->GetGraphRatio();
	}

	SetupLegend(IDC_C0_2, 0, 1);
	SetupLegend(IDC_C0_3, 1, 1);
	SetupLegend(IDC_C0,   2, 1);

	SetupLegend(IDC_C1_2, 0, 2);
	SetupLegend(IDC_C1_3, 1, 2);
	SetupLegend(IDC_C1,   2, 2);

	SetupLegend(IDC_S0,   0, 3);
	SetupLegend(IDC_S1,   1, 3);
	SetupLegend(IDC_S3,   2, 3);

	EnableWindow(TRUE);		//Cax2 show the updated graphs immediately!

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::OnDestroy()
{
	CResizableDialog::OnDestroy();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatisticsDlg::SetupLegend( int ResIdx, int ElmtIdx, int legendNr)
{
	EMULE_TRY

	CRect Rect;

	GetDlgItem( ResIdx )->GetWindowRect( Rect );
	ScreenToClient( Rect );

	if (legendNr==1)
	{
		if (!m_Led1[ElmtIdx])
			m_Led1[ElmtIdx].Create(WS_VISIBLE | WS_CHILD, Rect, this);
		m_Led1[ElmtIdx].SetBackgroundColor(m_DownloadOMeter.GetPlotColor(ElmtIdx));
		m_Led1[ElmtIdx].SetFrameColor(RGB(0x00, 0x00, 0x00));
	}
	else if (legendNr==2)
	{
		if (!m_Led2[ElmtIdx])
			m_Led2[ElmtIdx].Create( WS_VISIBLE | WS_CHILD, Rect, this);
		m_Led2[ElmtIdx].SetBackgroundColor(m_UploadOMeter.GetPlotColor(ElmtIdx));
		m_Led2[ElmtIdx].SetFrameColor(RGB(0x00, 0x00, 0x00));
	}
	else if (legendNr==3)
	{
		if (!m_Led3[ElmtIdx])
			m_Led3[ElmtIdx].Create(WS_VISIBLE | WS_CHILD, Rect, this);
		m_Led3[ElmtIdx].SetBackgroundColor(m_Statistics.GetPlotColor(ElmtIdx));
		m_Led3[ElmtIdx].SetFrameColor(RGB(0x00, 0x00, 0x00));
	}

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString CStatisticsDlg::GetMODType(uint32 dwIndex)
{
	static const TCHAR *apcModStrs[] =
	{
		_T("Morph"), _T("Xtreme")
	};

	if (dwIndex < ARRSIZE(apcModStrs))
		return apcModStrs[dwIndex];
	else
		return ::GetResString(IDS_STATS_OTHERS);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString CStatisticsDlg::GetUpEndReason(unsigned uiState)
{
	static const uint16 s_auResTbl[] =
	{
		IDS_STATS_UL_SESSION_T,		//ETS_TIMEOUT
		IDS_STATS_UL_SESSION_D,		//ETS_DISCONNECT
		IDS_STATS_UL_SESSION_B,		//ETS_BAN
		IDS_STATS_UL_SESSION_C,		//ETS_CANCELED
		IDS_STATS_UL_SESSION_ED,	//ETS_END_OF_DOWNLOAD
		IDS_STATS_UL_SESSION_FE,	//ETS_FILE_ERROR
		IDS_STATS_UL_SESSION_BC,	//ETS_BLOCKED_CHUNK
	};
	CString		strBuf;

	if (uiState < ARRSIZE(s_auResTbl))
		GetResString(&strBuf, s_auResTbl[uiState]);
	return strBuf;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@


1.183
log
@Minor connection statistics improvements, plus some update from original;
Reduced H-file dependency.
@
text
@d28 3
@


1.182
log
@Removed meaningless Average Up/Download Time cumulative statistics (our code can't preserve and calculate it properly, so better to remove it than show some wrong stuff).
@
text
@d27 1
a27 1

d2344 1
a2346 1
	// -khaos--+++>
d2349 1
a2349 1
	// <-----khaos-
d2352 16
a2367 6
		totalconnectionchecks++;
		double percent;
		percent = (static_cast<double>(totalconnectionchecks-1.0)/static_cast<double>(totalconnectionchecks));
		if (percent > 0.99)
			percent = 0.99;
		averageconnections = (averageconnections*percent) + static_cast<double>(static_cast<double>(activeconnections)*static_cast<double>(1.0-percent));
@


1.181
log
@Reduced H-file dependency.
@
text
@d193 1
a193 1
	cum_DL_average =		g_App.m_pPrefs->GetConnAvgDownRate();
d197 1
a197 1
	cum_UL_average =		g_App.m_pPrefs->GetConnAvgUpRate();
a640 6
					// Set Cumulative Average Download Time
					uint32 avgDownTime = g_App.m_pPrefs->GetDownS_AvgTime();
					if (g_App.m_pPrefs->GetDownC_AvgTime()<=0) g_App.m_pPrefs->Add2DownCAvgTime(avgDownTime);
					avgDownTime = (uint32) (avgDownTime+g_App.m_pPrefs->GetDownC_AvgTime())/2;
					cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDLTIME), CastSecondsToLngHM(avgDownTime));
					stattree.SetItemText(down_tsessions[3], cbuffer);
a974 6
					// Set Avg Upload time
					uint32 avguptime = g_App.m_pUploadQueue->GetAverageUpTime();
					if (g_App.m_pPrefs->GetUpAvgTime() <= 0) g_App.m_pPrefs->Add2UpAvgTime(avguptime);
					avguptime = (avguptime + g_App.m_pPrefs->GetUpAvgTime()) / 2u;
					cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME), CastSecondsToLngHM(avguptime));
					stattree.SetItemText(up_tsessions[3], cbuffer);
d1986 1
a1986 1
			for(int i = 0; i<4; i++) up_tsessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), up_T[1]);
d2008 1
a2008 1
			for(int i = 0; i<4; i++) down_tsessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_T[2]);
@


1.180
log
@Reduced H-file dependency.
@
text
@d24 1
@


1.179
log
@Implified interface by replacing external for this class enum type.
@
text
@a17 2
// StatisticsDlg.cpp : implementation file
//
d20 1
a34 2
// CStatisticsDlg dialog

a58 1
	//{{AFX_DATA_MAP(CExoSliderDlg)
a59 1
	//}}AFX_DATA_MAP
a63 1
	//{{AFX_MSG_MAP(CStatisticsDlg)
a64 1
	//}}AFX_MSG_MAP
@


1.178
log
@1) removed duplicated invalidation of the plots on initialization
2) removed statistic forced update plots on initialization (it does not required at this palce)
3) formating
@
text
@d835 1
a835 1
						cbuffer.Format(_T("%s: %u (%.1f%%)"),GetUpEndReason((EnumEndTransferSession)i),
d837 1
a837 1
							GetPercent(g_App.m_pUploadQueue->GetULPartChunkSubCount((EnumEndTransferSession)i),statTotalSessions));
d847 1
a847 1
						cbuffer.Format(_T("%s: %u (%.1f%%)"),GetUpEndReason((EnumEndTransferSession)i),
d849 1
a849 1
							GetPercent(g_App.m_pUploadQueue->GetFailedSubCount((EnumEndTransferSession)i),statTotalSessions));
d2534 1
a2534 1
CString CStatisticsDlg::GetUpEndReason(EnumEndTransferSession index)
a2546 1
	unsigned	uiState = index;
@


1.177
log
@Removed unrequired check.
@
text
@d167 1
a167 1
	oldRatio=g_App.m_pPrefs->GetGraphRatio();		//Cax2 - Resize active connections line...
d171 2
a172 5
	m_DownloadOMeter.InvalidateCtrl();
	m_UploadOMeter.InvalidateCtrl();
	m_Statistics.InvalidateCtrl();

	if (g_App.m_pPrefs->GetStatsInterval()==0) GetDlgItem(IDC_STATTREE)->EnableWindow(false);
d248 2
a249 7
#ifdef OLD_SOCKETS_ENABLED
	ShowStatistics(true);
#endif //OLD_SOCKETS_ENABLED

	// <-----khaos-
	m_oldcx=0;
	m_oldcy=0;
d2453 1
a2453 1
	if (oldRatio != g_App.m_pPrefs->GetGraphRatio())	//	Resize the general connections...
d2458 1
a2458 1
		if(oldRatio == 255 || g_App.m_pPrefs->GetGraphRatio() == 255)
d2461 2
a2462 2
			m_Statistics.ReSizePlot(0,(double)oldRatio/g_App.m_pPrefs->GetGraphRatio());
		oldRatio = g_App.m_pPrefs->GetGraphRatio();
@


1.176
log
@1) set Unicode message format for Win9x systems
2) fixed dublicated creation of the statistic tree
@
text
@d1934 1
a1934 1
	else if (g_App.m_pPrefs->GetGraphRatio() > 1)
d2470 1
a2470 1
		oldRatio=g_App.m_pPrefs->GetGraphRatio();
@


1.175
log
@Suppressed compiler warnings [Aw3].
@
text
@d106 1
a106 1
	Localize();
d112 1
a112 1
	CreateStatsTree();
a1941 2
	CreateStatsTree(); //Localization (should be tested)

d1946 2
d1966 2
a2170 1
	stattree.Init();
d2174 2
@


1.174
log
@Faster date to string conversion (CastSecondsToLngHM) -- used in statistics tree to show duration [Aw3].
@
text
@d360 1
a360 1
	uint16	auDQSrc[STATS_DLSRC_COUNT];
d414 1
a414 1
			g_App.m_pDownloadQueue->GetDownloadStats(auDQSrc, aqwDQData);
d455 1
a455 1
				cbuffer.Format(GetResString(IDS_STATS_ACTDL), auDQSrc[STATS_DLSRC_TRANSFERRING]);
d488 1
a488 1
				cbuffer.Format(GetResString(IDS_STATS_FOUNDSRC), auDQSrc[STATS_DLSRC_TOTAL]);
d494 1
a494 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ONQUEUE), auDQSrc[STATS_DLSRC_ONQUEUE]);
d496 1
a496 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_QUEUEFULL), auDQSrc[STATS_DLSRC_QUEUEFULL]);
d498 1
a498 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_HIGHQR), auDQSrc[STATS_DLSRC_HIGH_QR]);
d500 1
a500 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_NONEEDEDPARTS), auDQSrc[STATS_DLSRC_NNS]);
d502 1
a502 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ASKING), auDQSrc[STATS_DLSRC_CONNECTED]);
d504 1
a504 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_CONNECTING), auDQSrc[STATS_DLSRC_CONNECTING]);
d506 1
a506 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_CONNVIASERVER), auDQSrc[STATS_DLSRC_CONNECTING_VIA_SRV]);
d508 1
a508 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_WAITFILEREQ), auDQSrc[STATS_DLSRC_WAIT4FILEREQ]);
d512 1
a512 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_NOCONNECTLOW2LOW), auDQSrc[STATS_DLSRC_LOW2LOW]);
d514 1
a514 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ANOTHER_SERVER_LOWID), auDQSrc[STATS_DLSRC_LOWID_ON_OTHER_SRV]);
d516 1
a516 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_BANNED), auDQSrc[STATS_DLSRC_BANNED]);
d520 1
a520 1
				statGoodSessions =	g_App.m_pPrefs->GetDownS_SuccessfulSessions() + auDQSrc[STATS_DLSRC_TRANSFERRING]; // Add Active Downloads
d629 1
a629 1
				statGoodSessions = g_App.m_pPrefs->GetDownC_SuccessfulSessions() + auDQSrc[STATS_DLSRC_TRANSFERRING]; // Need to reset these from the session section.  Declared up there.
d1174 1
a1174 1
		time_t timeDiff;
a1176 2
			time_t	timeNow;

d1256 1
a1256 1
			for (int mx = 0; mx<3; mx++)
d1264 1
a1264 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_UDATA), CastItoXBytes((uint64)(g_App.stat_sessionSentBytes+g_App.m_pPrefs->GetTotalUploaded())*avgModifier[mx]));
d1271 4
a1274 3
								uint64 UpDataTotal =	(uint64) g_App.m_pPrefs->GetUpTotalClientData() * avgModifier[mx];
								uint64 UpDataClient =	0;
								double percentClientTransferred = 0;
d1281 2
a1282 2
											UpDataClient = (g_App.m_pPrefs->GetCumUpData((EnumClientTypes)j)
															+ g_App.m_pPrefs->GetCumUpData(SO_OLDEMULE))*avgModifier[mx];
d1284 2
a1285 1
											UpDataClient = g_App.m_pPrefs->GetCumUpData((EnumClientTypes)j)*avgModifier[mx];
d1287 2
a1288 2
										if ( UpDataTotal!=0 && UpDataClient!=0 )
											percentClientTransferred = (double) 100 * UpDataClient / UpDataTotal;
d1300 6
a1305 3
								uint64	DataSourceFile =	(uint64) g_App.m_pPrefs->GetCumUpData_File() * avgModifier[mx];
								uint64	DataSourcePF =		(uint64) g_App.m_pPrefs->GetCumUpData_PartFile() * avgModifier[mx];
								uint64	DataSourceTotal =	(uint64) g_App.m_pPrefs->GetUpTotalDataFile() * avgModifier[mx];
d1308 2
a1309 2
								if ( DataSourceTotal!=0 && DataSourceFile!=0 )
									percentFileTransferred = (double) 100 * DataSourceFile / DataSourceTotal;
d1311 1
a1311 1
								stattree.SetItemText( time_aap_up_ds[mx][i] , cbuffer ); i++;
d1313 2
a1314 2
								if ( DataSourceTotal!=0 && DataSourcePF!=0 )
									percentFileTransferred = (double) 100 * DataSourcePF / DataSourceTotal;
d1318 1
a1318 1
								stattree.SetItemText( time_aap_up_ds[mx][i] , cbuffer ); i++;
d1324 6
a1329 3
								uint64	DataCommunity =		(uint64) g_App.m_pPrefs->GetCumUpData_Community() * avgModifier[mx];
								uint64	DataNoCommunity =	(uint64) g_App.m_pPrefs->GetCumUpData_NoCommunity() * avgModifier[mx];
								uint64	DataTotal =			(uint64) g_App.m_pPrefs->GetUpTotalDataCommunity() * avgModifier[mx];
d1332 2
a1333 2
								if ( DataTotal!=0 && DataCommunity!=0 )
									percentCommunityTransferred = (double) 100 * DataCommunity / DataTotal;
d1337 2
a1338 2
								if ( DataTotal!=0 && DataNoCommunity!=0 )
									percentCommunityTransferred = (double) 100 * DataNoCommunity / DataTotal;
d1346 4
a1349 2
						uint32 statGoodSessions = (uint32) (g_App.m_pUploadQueue->GetSuccessfulUpCount() + g_App.m_pPrefs->GetUpSuccessfulSessions() + g_App.m_pUploadQueue->GetUploadQueueLength()) * avgModifier[mx];
						uint32 statBadSessions = (uint32) (g_App.m_pUploadQueue->GetFailedUpCount() + g_App.m_pPrefs->GetUpFailedSessions()) * avgModifier[mx];
d1356 1
a1356 1
							if (statGoodSessions>0) percentSessions = (double) 100*statGoodSessions/(statGoodSessions+statBadSessions);
a1357 1
							//cbuffer.Format(GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,percentSessions);
a1363 1
							//cbuffer.Format(GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,percentSessions);
d1369 2
a1370 2
						uint64 UpOHTotal = (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange() + g_App.m_pUploadQueue->GetUpDataOverheadServer() + g_App.m_pUploadQueue->GetUpDataOverheadOther()) * avgModifier[mx];
						uint64 UpOHTotalPackets = (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets() + g_App.m_pUploadQueue->GetUpDataOverheadServerPackets() + g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets()) * avgModifier[mx];
d1373 1
a1373 1
						cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(UpOHTotal + ((uint64)g_App.m_pPrefs->GetUpOverheadTotal() * avgModifier[mx])), CastItoIShort(UpOHTotalPackets + ((uint64)g_App.m_pPrefs->GetUpOverheadTotalPackets() * avgModifier[mx])));
d1379 1
a1379 1
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_App.m_pPrefs->GetUpOverheadFileReq()) * avgModifier[mx]), CastItoIShort( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_App.m_pPrefs->GetUpOverheadFileReqPackets()) * avgModifier[mx]));
d1382 1
a1382 1
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange()+g_App.m_pPrefs->GetUpOverheadSrcEx()) * avgModifier[mx]), CastItoIShort( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets()+g_App.m_pPrefs->GetUpOverheadSrcExPackets()) * avgModifier[mx]));
d1385 1
a1385 1
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadServer()+g_App.m_pPrefs->GetUpOverheadServer()) * avgModifier[mx]), CastItoIShort( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadServerPackets()+g_App.m_pPrefs->GetUpOverheadServerPackets()) * avgModifier[mx]));
d1388 1
a1388 1
							cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadOther()+g_App.m_pPrefs->GetUpOverheadOther()) * avgModifier[mx]), CastItoIShort( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets()+g_App.m_pPrefs->GetUpOverheadOtherPackets()) * avgModifier[mx]));
d1395 1
a1395 1
						g_App.m_pDownloadQueue->GetDownloadStats(auDQSrc, aqwDQData);
d1397 1
a1397 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_DDATA), CastItoXBytes((uint64) (g_App.stat_sessionReceivedBytes+g_App.m_pPrefs->GetTotalDownloaded()) * avgModifier[mx]));
d1404 4
a1407 3
								uint64 DownDataTotal = (uint64) g_App.m_pPrefs->GetDownTotalClientData() * avgModifier[mx];
								uint64 DownDataClient = 0;
								double percentClientTransferred = 0;
d1414 2
a1415 2
											DownDataClient = (g_App.m_pPrefs->GetCumDownData((EnumClientTypes)j)
															+ g_App.m_pPrefs->GetCumDownData(SO_OLDEMULE))* avgModifier[mx];
d1417 2
a1418 1
											DownDataClient = g_App.m_pPrefs->GetCumDownData((EnumClientTypes)j)* avgModifier[mx];
d1420 2
a1421 2
										if ( DownDataTotal!=0 && DownDataClient!=0 )
											percentClientTransferred = (double) 100 * DownDataClient / DownDataTotal;
d1424 1
a1424 1
										cbuffer.Format(_T("%s: %s (%.1f%%)"), GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
d1434 4
a1437 2
						uint32	statGoodSessions = (uint32) (g_App.m_pPrefs->GetDownC_SuccessfulSessions() + auDQSrc[STATS_DLSRC_TRANSFERRING]) * avgModifier[mx];
						uint32	statBadSessions = (uint32) g_App.m_pPrefs->GetDownC_FailedSessions() * avgModifier[mx];
d1439 1
a1439 1
						cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_DLSES), statGoodSessions+statBadSessions );
d1444 1
a1444 1
							if (statGoodSessions > 0) percentSessions = (double) 100 * statGoodSessions / (statGoodSessions + statBadSessions);
d1456 1
a1456 1
						cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes((uint64)(g_App.m_pPrefs->GetSesSavedFromCompression() + g_App.m_pPrefs->GetCumSavedFromCompression()) * avgModifier[mx]));
d1459 1
a1459 1
						cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes((uint64)(g_App.m_pPrefs->GetSesLostFromCorruption() + g_App.m_pPrefs->GetCumLostFromCorruption()) * avgModifier[mx]));
d1468 1
a1468 1
						cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes( (uint64) (DownOHTotal + g_App.m_pPrefs->GetDownOverheadTotal()) * avgModifier[mx]), CastItoIShort((uint64)(DownOHTotalPackets + g_App.m_pPrefs->GetDownOverheadTotalPackets()) * avgModifier[mx]));
d1474 1
a1474 1
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( (uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_App.m_pPrefs->GetDownOverheadFileReq()) * avgModifier[mx]), CastItoIShort((uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_App.m_pPrefs->GetDownOverheadFileReqPackets()) * avgModifier[mx]));
d1477 1
a1477 1
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( (uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchange()+g_App.m_pPrefs->GetDownOverheadSrcEx()) * avgModifier[mx]), CastItoIShort((uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets()+g_App.m_pPrefs->GetDownOverheadSrcExPackets()) * avgModifier[mx]));
d1480 1
a1480 1
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( (uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadServer()+g_App.m_pPrefs->GetDownOverheadServer()) * avgModifier[mx]), CastItoIShort((uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadServerPackets()+g_App.m_pPrefs->GetDownOverheadServerPackets()) * avgModifier[mx]));
d1483 1
a1483 1
							cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( (uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadOther()+g_App.m_pPrefs->GetDownOverheadOther()) * avgModifier[mx]), CastItoIShort((uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadOtherPackets()+g_App.m_pPrefs->GetDownOverheadOtherPackets()) * avgModifier[mx]));
d1784 2
a1785 1
							cbuffer.Format(_T("%s: %u (%.1f%%)"), g_App.m_pIP2Country->GetCountryNameByIndex(iTopIdx), dwLastTop, static_cast<double>(100*dwLastTop)/totalclient);
d2400 1
a2400 1
	uint16	myRateStats[STATS_DLSRC_COUNT];
d2419 1
a2419 1
	g_App.m_pDownloadQueue->GetDownloadStats(myRateStats, myBigStats);
d2425 1
a2425 1
	adPlotDataMore[2] = myRateStats[STATS_DLSRC_TRANSFERRING];
@


1.173
log
@fix time disappearing at midnight
@
text
@d108 2
a109 2
	m_imagelistStatTree.Create(16, 16, g_App.m_iDfltImageListColorFlags | ILC_MASK, ELEMENT_COUNT(s_auIconResID), 0);
	FillImgLstWith16x16Icons(&m_imagelistStatTree, s_auIconResID, ELEMENT_COUNT(s_auIconResID));
d554 1
a554 1
					stattree.SetItemText( down_ssessions[3] , cbuffer );
d862 1
a862 1
					cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME),CastSecondsToLngHM(g_App.m_pUploadQueue->GetAverageUpTime()));
d869 1
a869 1
				cbuffer.Format(GetResString(IDS_TOVERHEAD), CastItoXBytes( UpOHTotal), CastItoIShort(UpOHTotalPackets));
d997 3
a999 3
					if (g_App.m_pPrefs->GetUpAvgTime()<=0) g_App.m_pPrefs->Add2UpAvgTime(avguptime);
					avguptime = (uint32) (avguptime+g_App.m_pPrefs->GetUpAvgTime())/2;
					cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME),CastSecondsToLngHM(avguptime));
d1193 3
a1195 3
			// Run Time
			uint64 sessionRunTime = (uint64)((::GetTickCount()-g_App.stat_starttime)/1000);
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_RUNTIME), CastSecondsToLngHM(sessionRunTime));
d1197 2
a1198 1
			if (!sessionRunTime) sessionRunTime = 1;
d1200 1
a1200 1
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime()), (double) (100 * GetTransferTime()) / sessionRunTime);
d1206 1
a1206 1
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime()), (double) (100 * GetUploadTime()) / sessionRunTime);
d1209 1
a1209 1
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime()), (double) (100 * GetDownloadTime()) / sessionRunTime);
d1214 1
a1214 1
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_CURRSRVDUR), CastSecondsToLngHM(time_thisServerDuration), (double) (100 * time_thisServerDuration) / sessionRunTime);
d1217 1
a1217 1
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration()), (double) (100 * GetServerDuration()) / sessionRunTime);
d1224 3
a1226 3
			// Run Time
			uint64 totalRunTime = (uint64)((::GetTickCount()-g_App.stat_starttime)/1000)+g_App.m_pPrefs->GetConnRunTime();
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_RUNTIME), CastSecondsToLngHM(totalRunTime));
d1228 2
a1229 1
			if (!totalRunTime) totalRunTime = 1;
d1231 1
a1231 1
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime() + g_App.m_pPrefs->GetConnTransferTime()), (double) (100 * (GetTransferTime() + g_App.m_pPrefs->GetConnTransferTime())) / totalRunTime);
d1237 1
a1237 1
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime() + g_App.m_pPrefs->GetConnUploadTime()), (double) (100 * (GetUploadTime() + g_App.m_pPrefs->GetConnUploadTime())) / totalRunTime);
d1240 1
a1240 1
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime() + g_App.m_pPrefs->GetConnDownloadTime()), (double) (100 * (GetDownloadTime() + g_App.m_pPrefs->GetConnDownloadTime())) / totalRunTime);
d1245 1
a1245 1
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration() + g_App.m_pPrefs->GetConnServerDuration()), (double) (100 * (GetServerDuration() + g_App.m_pPrefs->GetConnServerDuration())) / totalRunTime);
d1906 1
a1906 1
	for (uint32 i = 0; i < ELEMENT_COUNT(s_auResTbl); i++)
d1912 1
a1912 1
	for (uint32 i = 0; i < ELEMENT_COUNT(s_auResTbl2); i++)
d2010 1
a2010 1
			for(int i = 0; i< ELEMENT_COUNT(down_sources); i++) down_sources[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[12]);
d2356 1
a2356 1
	if ( peakconnections < activeconnections )
d2362 1
a2362 1
	if( g_App.m_pServerConnect->IsConnected())
d2522 1
a2522 1
	if (dwIndex < ELEMENT_COUNT(apcModStrs))
d2543 1
a2543 1
	if (uiState < ELEMENT_COUNT(s_auResTbl))
@


1.172
log
@removed the port statistic (part 2)
@
text
@d1062 1
a1062 1
					cbuffer.Format(_T("%s: %i : %s"), GetResString(IDS_SF_MAXCONLIMITREACHED), m_itemp, currentTime.Format());
@


1.171
log
@removed port statistic (part1)
@
text
@a446 21
					// Downloaded Data By Port
					if (forceUpdate || stattree.IsExpanded(hdown_spb))
					{
						int i = 0;
						uint64	PortDataDefault =	g_App.m_pPrefs->GetDownDataPort_4662();
						uint64	PortDataOther =		g_App.m_pPrefs->GetDownDataPort_OTHER();
						uint64	PortDataTotal =		g_App.m_pPrefs->GetDownSessionDataPort();
						double	percentPortTransferred = 0;

						if ( PortDataTotal!=0 && PortDataDefault!=0 )
							percentPortTransferred = (double) 100 * PortDataDefault / PortDataTotal;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTDEF), CastItoXBytes(PortDataDefault), percentPortTransferred);
						stattree.SetItemText(down_spb[i], cbuffer); i++;

						if ( PortDataTotal!=0 && PortDataOther!=0 )
							percentPortTransferred = (double) 100 * PortDataOther / PortDataTotal;
						else
							percentPortTransferred = 0;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTOTHER), CastItoXBytes(PortDataOther), percentPortTransferred);
						stattree.SetItemText(down_spb[i], cbuffer); i++;
					}
a623 21
					// Downloaded Data By Port
					if (forceUpdate || stattree.IsExpanded(hdown_tpb))
					{
						int i = 0;
						uint64	PortDataDefault =	g_App.m_pPrefs->GetCumDownDataPort_4662();
						uint64	PortDataOther =		g_App.m_pPrefs->GetCumDownDataPort_OTHER();
						uint64	PortDataTotal =		g_App.m_pPrefs->GetDownTotalPortData();
						double	percentPortTransferred = 0;

						if ( PortDataTotal!=0 && PortDataDefault!=0 )
							percentPortTransferred = (double) 100 * PortDataDefault / PortDataTotal;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTDEF), CastItoXBytes(PortDataDefault), percentPortTransferred);
						stattree.SetItemText(down_tpb[i], cbuffer); i++;

						if ( PortDataTotal!=0 && PortDataOther!=0 )
							percentPortTransferred = (double) 100 * PortDataOther / PortDataTotal;
						else
							percentPortTransferred = 0;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTOTHER), CastItoXBytes(PortDataOther), percentPortTransferred);
						stattree.SetItemText( down_tpb[i] , cbuffer ); i++;
					}
a735 21
					// Uploaded Data By Port
					if (forceUpdate || stattree.IsExpanded(hup_spb))
					{
						int i = 0;
						uint64	PortDataDefault =	g_App.m_pPrefs->GetUpDataPort_4662();
						uint64	PortDataOther =		g_App.m_pPrefs->GetUpDataPort_OTHER();
						uint64	PortDataTotal =		g_App.m_pPrefs->GetUpSessionPortData();
						double	percentPortTransferred = 0;

						if ( PortDataTotal!=0 && PortDataDefault!=0 )
							percentPortTransferred = (double) 100 * PortDataDefault / PortDataTotal;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTDEF), CastItoXBytes(PortDataDefault), percentPortTransferred);
						stattree.SetItemText(up_spb[i], cbuffer); i++;

						if ( PortDataTotal!=0 && PortDataOther!=0 )
							percentPortTransferred = (double) 100 * PortDataOther / PortDataTotal;
						else
							percentPortTransferred = 0;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTOTHER), CastItoXBytes(PortDataOther), percentPortTransferred);
						stattree.SetItemText(up_spb[i], cbuffer); i++;
					}
a922 21
					// Uploaded Data By Port
					if (forceUpdate || stattree.IsExpanded(hup_tpb))
					{
						int i = 0;
						uint64	PortDataDefault =	g_App.m_pPrefs->GetCumUpDataPort_4662();
						uint64	PortDataOther =		g_App.m_pPrefs->GetCumUpDataPort_OTHER();
						uint64	PortDataTotal =		g_App.m_pPrefs->GetUpTotalPortData();
						double	percentPortTransferred = 0;

						if ( PortDataTotal!=0 && PortDataDefault!=0 )
							percentPortTransferred = (double) 100 * PortDataDefault / PortDataTotal;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTDEF), CastItoXBytes(PortDataDefault), percentPortTransferred);
						stattree.SetItemText(up_tpb[i], cbuffer); i++;

						if ( PortDataTotal!=0 && PortDataOther!=0 )
							percentPortTransferred = (double) 100 * PortDataOther / PortDataTotal;
						else
							percentPortTransferred = 0;
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTOTHER), CastItoXBytes(PortDataOther), percentPortTransferred);
						stattree.SetItemText(up_tpb[i], cbuffer); i++;
					}
d1294 1
a1294 1
							// Uploaded Data By Port
a1297 21
								uint64	PortDataDefault =	(uint64) g_App.m_pPrefs->GetCumUpDataPort_4662() * avgModifier[mx];
								uint64	PortDataOther =		(uint64) g_App.m_pPrefs->GetCumUpDataPort_OTHER() * avgModifier[mx];
								uint64	PortDataTotal =		(uint64) g_App.m_pPrefs->GetUpTotalPortData() * avgModifier[mx];
								double	percentPortTransferred = 0;

								if ( PortDataTotal!=0 && PortDataDefault!=0 )
									percentPortTransferred = (double) 100 * PortDataDefault / PortDataTotal;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTDEF), CastItoXBytes(PortDataDefault), percentPortTransferred);
								stattree.SetItemText( time_aap_up_dp[mx][i] , cbuffer ); i++;

								if ( PortDataTotal!=0 && PortDataOther!=0 )
									percentPortTransferred = (double) 100 * PortDataOther / PortDataTotal;
								else
									percentPortTransferred = 0;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTOTHER), CastItoXBytes(PortDataOther), percentPortTransferred);
								stattree.SetItemText( time_aap_up_dp[mx][i] , cbuffer ); i++;
							}
							// Uploaded Data By Source
							if (forceUpdate || stattree.IsExpanded(time_aap_up_hd[mx][2]))
							{
								int i = 0;
d1316 1
a1316 1
							if (forceUpdate || stattree.IsExpanded(time_aap_up_hd[mx][3]))
a1418 21
							// Downloaded Data By Port
							if (forceUpdate || stattree.IsExpanded(time_aap_down_hd[mx][1]))
							{
								int i = 0;
								uint64	PortDataDefault =	(uint64) g_App.m_pPrefs->GetCumDownDataPort_4662() * avgModifier[mx];
								uint64	PortDataOther =		(uint64) g_App.m_pPrefs->GetCumDownDataPort_OTHER() * avgModifier[mx];
								uint64	PortDataTotal =		(uint64) g_App.m_pPrefs->GetDownTotalPortData() * avgModifier[mx];
								double	percentPortTransferred = 0;

								if ( PortDataTotal!=0 && PortDataDefault!=0 )
									percentPortTransferred = (double) 100 * PortDataDefault / PortDataTotal;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTDEF), CastItoXBytes(PortDataDefault), percentPortTransferred);
								stattree.SetItemText(time_aap_down_dp[mx][i], cbuffer); i++;

								if ( PortDataTotal!=0 && PortDataOther!=0 )
									percentPortTransferred = (double) 100 * PortDataOther / PortDataTotal;
								else
									percentPortTransferred = 0;
								cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_PRTOTHER), CastItoXBytes( PortDataOther ) , percentPortTransferred);
								stattree.SetItemText(time_aap_down_dp[mx][i], cbuffer); i++;
							}
a1971 2
				hup_spb= stattree.InsertItem(GetResString(IDS_PORT),up_S[0]);							// Ports Section
				for(int i = 0; i<2; i++) up_spb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_spb);
a1991 2
			hup_tpb= stattree.InsertItem(GetResString(IDS_PORT),up_T[0]);								// Ports Section
			for(int i = 0; i<2; i++) up_tpb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_tpb);
a2007 2
			hdown_spb= stattree.InsertItem(GetResString(IDS_PORT),down_S[0]);							// Ports Section
			for(int i = 0; i<2; i++) down_spb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hdown_spb);
a2018 2
			hdown_tpb= stattree.InsertItem(GetResString(IDS_PORT),down_T[0]);							// Ports Section
			for(int i = 0; i<2; i++) down_tpb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hdown_tpb);
d2065 4
a2068 6
				time_aap_up_hd[x][1] = stattree.InsertItem(GetResString(IDS_PORT),time_aap_up[x][0]);						// Ports Section
				for(int i = 0; i<2; i++) time_aap_up_dp[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_up_hd[x][1]);
				time_aap_up_hd[x][2] = stattree.InsertItem(GetResString(IDS_STATS_DATASOURCE),time_aap_up[x][0]);			// Data Source Section
				for(int i = 0; i<2; i++) time_aap_up_ds[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_up_hd[x][2]);
				time_aap_up_hd[x][3] = stattree.InsertItem(GetResString(IDS_COMMUNITY), time_aap_up[x][0]);		// Community Section
				for(int i = 0; i<2; i++) time_aap_up_com[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_up_hd[x][3]);
a2075 2
				time_aap_down_hd[x][1] = stattree.InsertItem(GetResString(IDS_PORT),time_aap_down[x][0]);					// Ports Section
				for(int i = 0; i<2; i++) time_aap_down_dp[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_down_hd[x][1]);
@


1.170
log
@Removed separate statistics branch for eChanblard due to low percentage.
@
text
@d1618 1
a1618 1
		uint32	totalclient, totalMODs, dwTotalPlusMODs, myStats[18], clientsPorts[2];
d1621 1
a1621 1
		g_App.m_pClientList->GetStatistics(totalclient, myStats, clientsPorts, &AllClients, totalMODs, &dwTotalPlusMODs, &clientMODs, &clientPlusMODs, &clientCountries);
@


1.169
log
@removed "unfair *" statistic
@
text
@d2655 1
a2655 1
		_T("Morph"), _T("Xtreme"), _T("eChanblard")
@


1.168
log
@Faster plot statistics processing for WebServer and MobileMule.
@
text
@d1871 1
a1871 10
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_CLIENTS), g_App.m_lTotalNumUnfairClients); stattree.SetItemText(cligen[5], cbuffer);

		// Unfair actions subtree
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTIONS), g_App.m_lTotalNumUnfairActions); stattree.SetItemText(hUnfairAction, cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTION_MH),g_App.m_lTotalNumUseMyHashActions); stattree.SetItemText(hUnfairActionItems[0], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTION_HC),g_App.m_lTotalNumHashChangeActions); stattree.SetItemText(hUnfairActionItems[1], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTION_BN),g_App.m_lTotalNumStolenNameActions); stattree.SetItemText(hUnfairActionItems[2], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTION_LT),g_App.m_lTotalNumLeecherTypeActions); stattree.SetItemText(hUnfairActionItems[3], cbuffer);

		// Countries subtree
d2234 1
a2234 1
			for(int i = 0; i<6; i++) cligen[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_clients);	// general clients stats
a2236 2
		hUnfairAction = stattree.InsertItem(GetResString(IDS_STATS_UNFAIR_ACTIONS),h_clients);						// subsections: Unfair action
			for(int i = 0; i<4; i++) hUnfairActionItems[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hUnfairAction);
@


1.167
log
@Minor corrections and improvements (from original).
@
text
@d2514 1
a2514 1
		if( percent > 0.99 )
d2523 1
a2523 1
void CStatisticsDlg::SetCurrentRate(double uploadrate, double downloadrate)
d2534 1
a2534 1
	double	m_dPlotDataUp[3], m_dPlotDataDown[3], adPlotDataMore[3];
d2538 14
a2551 17
	// current rate
	m_dPlotDataDown[2] = downloadrate;
	m_dPlotDataUp[2] = uploadrate;

	if (maxDown < downloadrate)
		maxDown = downloadrate;

	// averages
	m_dPlotDataDown[0] = GetAvgDownloadRate(AVG_SESSION);
	m_dPlotDataUp[0] = GetAvgUploadRate(AVG_SESSION);

	m_dPlotDataDown[1] = GetAvgDownloadRate(AVG_TIME);
	m_dPlotDataUp[1] = GetAvgUploadRate(AVG_TIME);

	// show
	m_DownloadOMeter.AppendPoints(m_dPlotDataDown);
	m_UploadOMeter.AppendPoints(m_dPlotDataUp);
d2565 3
a2567 5
	UpDown updown;
	updown.upload = uploadrate;
	updown.download = downloadrate;
	updown.connections = activeconnections;
	g_App.m_pWebServer->AddStatsLine(updown);
@


1.166
log
@Updated list of popular mods.
@
text
@d1258 1
a1258 1
		__int64 timeDiff;
d1263 1
a1263 1
			time ( &timeNow );
@


1.165
log
@Large file size support preparations.
@
text
@d2671 1
a2671 1
		_T("Morph"), _T("WebCache"), _T("eChanblard")
@


1.164
log
@Added default statistics tree mask; Improve string processing; Unicode corrections.
@
text
@d1983 2
a1984 2
		uint32 dwLargestFile;
		uint64 allsize = g_App.m_pSharedFilesList->GetDatasize(&dwLargestFile); // returns total share size as well as largest filesize
d1990 1
a1990 1
		cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_LARGESTFILE), CastItoXBytes(dwLargestFile));
@


1.163
log
@Removed one of the mod's node in statistics (due to low user base).
@
text
@d2297 5
a2301 5
	CString sTreeMask;
	sTreeMask = g_App.m_pPrefs->GetExpandedTreeItems();
	if (sTreeMask.IsEmpty())
		sTreeMask = "111000000100000110000010000011110000010010";
	stattree.ApplyExpandedMask(sTreeMask);
@


1.162
log
@fixed date display for maximum connections reached statistics {Fuxie - DK}
@
text
@a2609 1
	//m_Statistics.Invalidate();	// eklmn: why we have to invalidate a stats?!
d2671 1
a2671 1
		_T("L!ONetwork"), _T("Morph"), _T("WebCache"), _T("eChanblard")
@


1.161
log
@Not popular mods were removed from statistics tree.
@
text
@d1145 2
a1146 1
					cbuffer.Format(_T("%s: %i : %s"), GetResString(IDS_SF_MAXCONLIMITREACHED), m_itemp, CTime::GetCurrentTime().Format(_T("%c")));
@


1.160
log
@Minor optimization.
@
text
@d1696 1
a1696 1
							if ((dwModIdx == (STAT_CLIENT_MOD_NODES - 1)) || (strBuf2.Find(GetMODType(dwModIdx)) != -1))
d2671 1
a2671 2
		_T("L!ONetwork"), _T("sivka"), _T("LSD"), _T("Morph"), _T("WebCache"),
		_T("eChanblard"), _T("Pawcio")
@


1.159
log
@Minor local optimization.
@
text
@a2337 1
	int shownSecs = r.Width() * g_App.m_pPrefs->GetTrafficOMeterInterval();
d2339 1
a2339 2

	if(g_App.m_pPrefs->GetTrafficOMeterInterval()==0)
d2346 2
a2347 1
		CString buffer = CastSecondsToHM(shownSecs);
@


1.158
log
@Fixed session statistics 'Parts Saved Due To ICH' {Fuxie - DK}.
@
text
@d502 1
a503 2
				{
					strBuf2.Format(GetResString(IDS_DWTOT_FS), CastItoXBytes(t_FreeBytes));
a504 1
				}
a505 2
				{
					strBuf2.Format(GetResString(IDS_DWTOT_FS), CastItoXBytes(t_FreeBytes));
a506 1
				}
@


1.157
log
@Renaming in comments.
@
text
@d589 1
a589 1
				cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), auDQSrc[STATS_DLSRC_SAVED_BY_ICH]);
d716 1
a716 1
				cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), auDQSrc[STATS_DLSRC_SAVED_BY_ICH] + g_App.m_pPrefs->GetPartsSavedByICH());
d1580 1
a1580 1
						cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), (uint32)((auDQSrc[STATS_DLSRC_SAVED_BY_ICH] + g_App.m_pPrefs->GetPartsSavedByICH()) * avgModifier[mx]));
@


1.156
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d881 1
a881 1
				statGoodSessions = g_App.m_pUploadQueue->GetSuccessfulUpCount(); // + g_eMuleApp.m_pUploadQueue->GetUploadQueueLength();
a929 1
					//DWORD running=g_eMuleApp.m_pUploadQueue->GetAverageUpTime();
d2576 1
a2576 1
	updown.connections = activeconnections;	//SyruS / g_eMuleApp.m_pGlobPrefs->GetGraphRatio();
@


1.155
log
@renamed 3 variables
@
text
@d120 1
a120 1
	int iStatYGrids=int((g_App.g_pPrefs->GetStatsMax()/10.0)+0.1)-1;
d122 1
a122 1
		iStatYGrids=int((g_App.g_pPrefs->GetStatsMax()/50.0)+0.1)-1;
d130 1
a130 1
	SetARange(true, g_App.g_pPrefs->GetMaxGraphDownloadRate() / 10);
d143 1
a143 1
	SetARange(false, g_App.g_pPrefs->GetMaxGraphUploadRate() / 10);
d156 1
a156 1
	m_Statistics.SetRanges(0, g_App.g_pPrefs->GetStatsMax());
d167 1
a167 1
	oldRatio=g_App.g_pPrefs->GetGraphRatio();		//Cax2 - Resize active connections line...
d175 1
a175 1
	if (g_App.g_pPrefs->GetStatsInterval()==0) GetDlgItem(IDC_STATTREE)->EnableWindow(false);
d201 7
a207 7
	cum_DL_maximal =		g_App.g_pPrefs->GetConnMaxDownRate();
	cum_DL_average =		g_App.g_pPrefs->GetConnAvgDownRate();
	cum_DL_max_average =	g_App.g_pPrefs->GetConnMaxAvgDownRate();

	cum_UL_maximal =		g_App.g_pPrefs->GetConnMaxUpRate();
	cum_UL_average =		g_App.g_pPrefs->GetConnAvgUpRate();
	cum_UL_max_average =	g_App.g_pPrefs->GetConnMaxAvgUpRate();
d284 1
a284 1
		g_App.g_pPrefs->Add2ConnMaxUpRate(cum_UL_maximal);
d291 1
a291 1
		g_App.g_pPrefs->Add2ConnMaxDownRate(cum_DL_maximal);
d298 1
a298 1
		g_App.g_pPrefs->Add2ConnMaxAvgDownRate(cum_DL_max_average);
d305 1
a305 1
		g_App.g_pPrefs->Add2ConnMaxAvgUpRate(cum_UL_max_average);
d390 1
a390 1
		if ( (g_App.g_pPrefs->GetTotalDownloaded()>0 && g_App.g_pPrefs->GetTotalUploaded()>0) || (g_App.stat_sessionReceivedBytes>0 && g_App.stat_sessionSentBytes>0) )
d393 1
a393 1
			if ((g_App.stat_sessionReceivedBytes+g_App.g_pPrefs->GetTotalDownloaded())<(g_App.stat_sessionSentBytes+g_App.g_pPrefs->GetTotalUploaded()))
d395 1
a395 1
				cbuffer.Format(_T("%s %.2f : 1"),GetResString(IDS_STATS_CRATIO),static_cast<double>(g_App.stat_sessionSentBytes+g_App.g_pPrefs->GetTotalUploaded())/(g_App.stat_sessionReceivedBytes+g_App.g_pPrefs->GetTotalDownloaded()));
d400 1
a400 1
				cbuffer.Format(_T("%s 1 : %.2f"),GetResString(IDS_STATS_CRATIO),static_cast<double>(g_App.stat_sessionReceivedBytes+g_App.g_pPrefs->GetTotalDownloaded())/(g_App.stat_sessionSentBytes+g_App.g_pPrefs->GetTotalUploaded()));
d426 1
a426 1
						uint64 DownDataTotal = g_App.g_pPrefs->GetDownSessionClientData();
d434 2
a435 2
									DownDataClient = g_App.g_pPrefs->GetDownData((EnumClientTypes)j)
													+ g_App.g_pPrefs->GetDownData(SO_OLDEMULE);
d437 1
a437 1
									DownDataClient = g_App.g_pPrefs->GetDownData((EnumClientTypes)j);
d451 3
a453 3
						uint64	PortDataDefault =	g_App.g_pPrefs->GetDownDataPort_4662();
						uint64	PortDataOther =		g_App.g_pPrefs->GetDownDataPort_OTHER();
						uint64	PortDataTotal =		g_App.g_pPrefs->GetDownSessionDataPort();
d470 1
a470 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_COMPDL), g_App.g_pPrefs->GetDownSessionCompletedFiles());
d501 1
a501 1
				uint64 t_FreeBytes = GetFreeDiskSpaceX(g_App.g_pPrefs->GetTempDir().GetBuffer());
d546 2
a547 2
				statGoodSessions =	g_App.g_pPrefs->GetDownS_SuccessfulSessions() + auDQSrc[STATS_DLSRC_TRANSFERRING]; // Add Active Downloads
				statBadSessions =	g_App.g_pPrefs->GetDownS_FailedSessions();
d570 1
a570 1
					uint16 statBadSessionsNoRequiredData =	g_App.g_pPrefs->GetDownS_FailedSessionsNoRequiredData();
d579 1
a579 1
					cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDLTIME), CastSecondsToLngHM(g_App.g_pPrefs->GetDownS_AvgTime()));
d583 1
a583 1
				cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes(g_App.g_pPrefs->GetSesSavedFromCompression()));
d586 1
a586 1
				cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes(g_App.g_pPrefs->GetSesLostFromCorruption()));
d621 1
a621 1
				cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_DDATA), CastItoXBytes(g_App.stat_sessionReceivedBytes+g_App.g_pPrefs->GetTotalDownloaded()));
d628 1
a628 1
						uint64 DownDataTotal = g_App.g_pPrefs->GetDownTotalClientData();
d637 2
a638 2
									DownDataClient = g_App.g_pPrefs->GetCumDownData((EnumClientTypes)j)
													+ g_App.g_pPrefs->GetCumDownData(SO_OLDEMULE);
d640 1
a640 1
									DownDataClient = g_App.g_pPrefs->GetCumDownData((EnumClientTypes)j);
d654 3
a656 3
						uint64	PortDataDefault =	g_App.g_pPrefs->GetCumDownDataPort_4662();
						uint64	PortDataOther =		g_App.g_pPrefs->GetCumDownDataPort_OTHER();
						uint64	PortDataTotal =		g_App.g_pPrefs->GetDownTotalPortData();
d673 1
a673 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_COMPDL), g_App.g_pPrefs->GetDownCompletedFiles());
d676 2
a677 2
				statGoodSessions = g_App.g_pPrefs->GetDownC_SuccessfulSessions() + auDQSrc[STATS_DLSRC_TRANSFERRING]; // Need to reset these from the session section.  Declared up there.
				statBadSessions = g_App.g_pPrefs->GetDownC_FailedSessions(); // ^^^^^^^^^^^^^^
d686 1
a686 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATADLSES), CastItoXBytes((uint64)(g_App.stat_sessionReceivedBytes + g_App.g_pPrefs->GetTotalDownloaded()) / statGoodSessions));
d703 3
a705 3
					uint32 avgDownTime = g_App.g_pPrefs->GetDownS_AvgTime();
					if (g_App.g_pPrefs->GetDownC_AvgTime()<=0) g_App.g_pPrefs->Add2DownCAvgTime(avgDownTime);
					avgDownTime = (uint32) (avgDownTime+g_App.g_pPrefs->GetDownC_AvgTime())/2;
d710 1
a710 1
				cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes(g_App.g_pPrefs->GetSesSavedFromCompression() + g_App.g_pPrefs->GetCumSavedFromCompression()));
d713 1
a713 1
				cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes(g_App.g_pPrefs->GetSesLostFromCorruption() + g_App.g_pPrefs->GetCumLostFromCorruption()));
d716 1
a716 1
				cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), auDQSrc[STATS_DLSRC_SAVED_BY_ICH] + g_App.g_pPrefs->GetPartsSavedByICH());
d725 1
a725 1
				cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(DownOHTotal + g_App.g_pPrefs->GetDownOverheadTotal()), CastItoIShort(DownOHTotalPackets + g_App.g_pPrefs->GetDownOverheadTotalPackets()));
d731 1
a731 1
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_App.g_pPrefs->GetDownOverheadFileReq()), CastItoIShort(g_App.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_App.g_pPrefs->GetDownOverheadFileReqPackets()));
d734 1
a734 1
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchange()+g_App.g_pPrefs->GetDownOverheadSrcEx()), CastItoIShort(g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets()+g_App.g_pPrefs->GetDownOverheadSrcExPackets()));
d737 1
a737 1
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadServer()+g_App.g_pPrefs->GetDownOverheadServer()), CastItoIShort(g_App.m_pDownloadQueue->GetDownDataOverheadServerPackets()+g_App.g_pPrefs->GetDownOverheadServerPackets()));
d740 1
a740 1
					cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( g_App.m_pDownloadQueue->GetDownDataOverheadOther()+g_App.g_pPrefs->GetDownOverheadOther()), CastItoIShort(g_App.m_pDownloadQueue->GetDownDataOverheadOtherPackets()+g_App.g_pPrefs->GetDownOverheadOtherPackets()));
d761 1
a761 1
						uint64 UpDataTotal =	g_App.g_pPrefs->GetUpSessionClientData();
d770 2
a771 2
									UpDataClient = g_App.g_pPrefs->GetUpData((EnumClientTypes)j)
													+ g_App.g_pPrefs->GetUpData(SO_OLDEMULE);
d773 1
a773 1
									UpDataClient = g_App.g_pPrefs->GetUpData((EnumClientTypes)j);
d787 3
a789 3
						uint64	PortDataDefault =	g_App.g_pPrefs->GetUpDataPort_4662();
						uint64	PortDataOther =		g_App.g_pPrefs->GetUpDataPort_OTHER();
						uint64	PortDataTotal =		g_App.g_pPrefs->GetUpSessionPortData();
d808 3
a810 3
						uint64	DataSourceFile =	g_App.g_pPrefs->GetUpData_File();
						uint64	DataSourcePF =		g_App.g_pPrefs->GetUpData_PartFile();
						uint64	DataSourceTotal =	g_App.g_pPrefs->GetUpSessionDataFile();
d829 3
a831 3
						uint64	DataCommunity =		g_App.g_pPrefs->GetUpData_Community();
						uint64	DataNoCommunity =	g_App.g_pPrefs->GetUpData_NoCommunity();
						uint64	DataTotal =			g_App.g_pPrefs->GetUpSessionDataCommunity();
d852 1
a852 1
						qwData = g_App.g_pPrefs->GetUpDataByPriority(PR_RELEASE);
d856 1
a856 1
						qwData = g_App.g_pPrefs->GetUpDataByPriority(PR_HIGH);
d860 1
a860 1
						qwData = g_App.g_pPrefs->GetUpDataByPriority(PR_NORMAL);
d864 1
a864 1
						qwData = g_App.g_pPrefs->GetUpDataByPriority(PR_LOW);
d868 1
a868 1
						qwData = g_App.g_pPrefs->GetUpDataByPriority(PR_VERYLOW);
d962 1
a962 1
				cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_UDATA), CastItoXBytes(g_App.stat_sessionSentBytes+g_App.g_pPrefs->GetTotalUploaded()));
d969 1
a969 1
						uint64 UpDataTotal =	g_App.g_pPrefs->GetUpTotalClientData();
d978 2
a979 2
									UpDataClient = g_App.g_pPrefs->GetCumUpData((EnumClientTypes)j)
													+ g_App.g_pPrefs->GetCumUpData(SO_OLDEMULE);
d981 1
a981 1
									UpDataClient = g_App.g_pPrefs->GetCumUpData((EnumClientTypes)j);
d996 3
a998 3
						uint64	PortDataDefault =	g_App.g_pPrefs->GetCumUpDataPort_4662();
						uint64	PortDataOther =		g_App.g_pPrefs->GetCumUpDataPort_OTHER();
						uint64	PortDataTotal =		g_App.g_pPrefs->GetUpTotalPortData();
d1017 3
a1019 3
						uint64	DataSourceFile =	g_App.g_pPrefs->GetCumUpData_File();
						uint64	DataSourcePF =		g_App.g_pPrefs->GetCumUpData_PartFile();
						uint64	DataSourceTotal =	g_App.g_pPrefs->GetUpTotalDataFile();
d1038 3
a1040 3
						uint64	DataCommunity =		g_App.g_pPrefs->GetCumUpData_Community();
						uint64	DataNoCommunity =	g_App.g_pPrefs->GetCumUpData_NoCommunity();
						uint64	DataTotal =			g_App.g_pPrefs->GetUpTotalDataCommunity();
d1057 2
a1058 2
				statGoodSessions = g_App.m_pUploadQueue->GetSuccessfulUpCount() + g_App.g_pPrefs->GetUpSuccessfulSessions() + g_App.m_pUploadQueue->GetUploadQueueLength();
				statBadSessions = g_App.m_pUploadQueue->GetFailedUpCount() + g_App.g_pPrefs->GetUpFailedSessions();
d1067 1
a1067 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) (g_App.stat_sessionSentBytes + g_App.g_pPrefs->GetTotalUploaded()) / statGoodSessions));
d1087 2
a1088 2
					if (g_App.g_pPrefs->GetUpAvgTime()<=0) g_App.g_pPrefs->Add2UpAvgTime(avguptime);
					avguptime = (uint32) (avguptime+g_App.g_pPrefs->GetUpAvgTime())/2;
d1100 1
a1100 1
				cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(UpOHTotal + g_App.g_pPrefs->GetUpOverheadTotal()), CastItoIShort(UpOHTotalPackets + g_App.g_pPrefs->GetUpOverheadTotalPackets()));
d1106 1
a1106 1
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_App.g_pPrefs->GetUpOverheadFileReq()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_App.g_pPrefs->GetUpOverheadFileReqPackets()));
d1109 1
a1109 1
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange()+g_App.g_pPrefs->GetUpOverheadSrcEx()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets()+g_App.g_pPrefs->GetUpOverheadSrcExPackets()));
d1112 1
a1112 1
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadServer()+g_App.g_pPrefs->GetUpOverheadServer()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadServerPackets()+g_App.g_pPrefs->GetUpOverheadServerPackets()));
d1115 1
a1115 1
					cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( g_App.m_pUploadQueue->GetUpDataOverheadOther()+g_App.g_pPrefs->GetUpOverheadOther()), CastItoIShort(g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets()+g_App.g_pPrefs->GetUpOverheadOtherPackets()));
d1208 1
a1208 1
					cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),g_App.stat_reconnects - 1 + g_App.g_pPrefs->GetConnNumReconnects());
d1210 1
a1210 1
					cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),g_App.g_pPrefs->GetConnNumReconnects());
d1213 1
a1213 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_AVGCON), (activeconnections + g_App.g_pPrefs->GetConnAvgConnections()) / 2);
d1216 1
a1216 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_PEAKCON), g_App.g_pPrefs->GetConnPeakConnections());
d1220 1
a1220 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_MAXCONLIMITREACHED), g_App.m_pListenSocket->GetMaxConnectionsReachedCount() + g_App.g_pPrefs->GetConnMaxConnLimitReached());
d1260 1
a1260 1
		cbuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), g_App.g_pPrefs->GetStatsLastResetStr());
d1264 1
a1264 1
		if (g_App.g_pPrefs->GetStatsLastResetLng())
d1269 1
a1269 1
			timeDiff = timeNow - g_App.g_pPrefs->GetStatsLastResetLng(); // In seconds
d1313 1
a1313 1
			uint64 totalRunTime = (uint64)((::GetTickCount()-g_App.stat_starttime)/1000)+g_App.g_pPrefs->GetConnRunTime();
d1318 1
a1318 1
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime() + g_App.g_pPrefs->GetConnTransferTime()), (double) (100 * (GetTransferTime() + g_App.g_pPrefs->GetConnTransferTime())) / totalRunTime);
d1324 1
a1324 1
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime() + g_App.g_pPrefs->GetConnUploadTime()), (double) (100 * (GetUploadTime() + g_App.g_pPrefs->GetConnUploadTime())) / totalRunTime);
d1327 1
a1327 1
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime() + g_App.g_pPrefs->GetConnDownloadTime()), (double) (100 * (GetDownloadTime() + g_App.g_pPrefs->GetConnDownloadTime())) / totalRunTime);
d1332 1
a1332 1
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration() + g_App.g_pPrefs->GetConnServerDuration()), (double) (100 * (GetServerDuration() + g_App.g_pPrefs->GetConnServerDuration())) / totalRunTime);
d1353 1
a1353 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_UDATA), CastItoXBytes((uint64)(g_App.stat_sessionSentBytes+g_App.g_pPrefs->GetTotalUploaded())*avgModifier[mx]));
d1360 1
a1360 1
								uint64 UpDataTotal =	(uint64) g_App.g_pPrefs->GetUpTotalClientData() * avgModifier[mx];
d1369 2
a1370 2
											UpDataClient = (g_App.g_pPrefs->GetCumUpData((EnumClientTypes)j)
															+ g_App.g_pPrefs->GetCumUpData(SO_OLDEMULE))*avgModifier[mx];
d1372 1
a1372 1
											UpDataClient = g_App.g_pPrefs->GetCumUpData((EnumClientTypes)j)*avgModifier[mx];
d1387 3
a1389 3
								uint64	PortDataDefault =	(uint64) g_App.g_pPrefs->GetCumUpDataPort_4662() * avgModifier[mx];
								uint64	PortDataOther =		(uint64) g_App.g_pPrefs->GetCumUpDataPort_OTHER() * avgModifier[mx];
								uint64	PortDataTotal =		(uint64) g_App.g_pPrefs->GetUpTotalPortData() * avgModifier[mx];
d1408 3
a1410 3
								uint64	DataSourceFile =	(uint64) g_App.g_pPrefs->GetCumUpData_File() * avgModifier[mx];
								uint64	DataSourcePF =		(uint64) g_App.g_pPrefs->GetCumUpData_PartFile() * avgModifier[mx];
								uint64	DataSourceTotal =	(uint64) g_App.g_pPrefs->GetUpTotalDataFile() * avgModifier[mx];
d1429 3
a1431 3
								uint64	DataCommunity =		(uint64) g_App.g_pPrefs->GetCumUpData_Community() * avgModifier[mx];
								uint64	DataNoCommunity =	(uint64) g_App.g_pPrefs->GetCumUpData_NoCommunity() * avgModifier[mx];
								uint64	DataTotal =			(uint64) g_App.g_pPrefs->GetUpTotalDataCommunity() * avgModifier[mx];
d1448 2
a1449 2
						uint32 statGoodSessions = (uint32) (g_App.m_pUploadQueue->GetSuccessfulUpCount() + g_App.g_pPrefs->GetUpSuccessfulSessions() + g_App.m_pUploadQueue->GetUploadQueueLength()) * avgModifier[mx];
						uint32 statBadSessions = (uint32) (g_App.m_pUploadQueue->GetFailedUpCount() + g_App.g_pPrefs->GetUpFailedSessions()) * avgModifier[mx];
d1475 1
a1475 1
						cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(UpOHTotal + ((uint64)g_App.g_pPrefs->GetUpOverheadTotal() * avgModifier[mx])), CastItoIShort(UpOHTotalPackets + ((uint64)g_App.g_pPrefs->GetUpOverheadTotalPackets() * avgModifier[mx])));
d1481 1
a1481 1
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_App.g_pPrefs->GetUpOverheadFileReq()) * avgModifier[mx]), CastItoIShort( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_App.g_pPrefs->GetUpOverheadFileReqPackets()) * avgModifier[mx]));
d1484 1
a1484 1
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadSourceExchange()+g_App.g_pPrefs->GetUpOverheadSrcEx()) * avgModifier[mx]), CastItoIShort( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets()+g_App.g_pPrefs->GetUpOverheadSrcExPackets()) * avgModifier[mx]));
d1487 1
a1487 1
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadServer()+g_App.g_pPrefs->GetUpOverheadServer()) * avgModifier[mx]), CastItoIShort( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadServerPackets()+g_App.g_pPrefs->GetUpOverheadServerPackets()) * avgModifier[mx]));
d1490 1
a1490 1
							cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadOther()+g_App.g_pPrefs->GetUpOverheadOther()) * avgModifier[mx]), CastItoIShort( (uint64) (g_App.m_pUploadQueue->GetUpDataOverheadOtherPackets()+g_App.g_pPrefs->GetUpOverheadOtherPackets()) * avgModifier[mx]));
d1499 1
a1499 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_DDATA), CastItoXBytes((uint64) (g_App.stat_sessionReceivedBytes+g_App.g_pPrefs->GetTotalDownloaded()) * avgModifier[mx]));
d1506 1
a1506 1
								uint64 DownDataTotal = (uint64) g_App.g_pPrefs->GetDownTotalClientData() * avgModifier[mx];
d1515 2
a1516 2
											DownDataClient = (g_App.g_pPrefs->GetCumDownData((EnumClientTypes)j)
															+ g_App.g_pPrefs->GetCumDownData(SO_OLDEMULE))* avgModifier[mx];
d1518 1
a1518 1
											DownDataClient = g_App.g_pPrefs->GetCumDownData((EnumClientTypes)j)* avgModifier[mx];
d1533 3
a1535 3
								uint64	PortDataDefault =	(uint64) g_App.g_pPrefs->GetCumDownDataPort_4662() * avgModifier[mx];
								uint64	PortDataOther =		(uint64) g_App.g_pPrefs->GetCumDownDataPort_OTHER() * avgModifier[mx];
								uint64	PortDataTotal =		(uint64) g_App.g_pPrefs->GetDownTotalPortData() * avgModifier[mx];
d1552 1
a1552 1
						cbuffer.Format(_T("%s: %I64u"), GetResString(IDS_STATS_COMPDL), (uint64)(g_App.g_pPrefs->GetDownCompletedFiles() * avgModifier[mx]));
d1555 2
a1556 2
						uint32	statGoodSessions = (uint32) (g_App.g_pPrefs->GetDownC_SuccessfulSessions() + auDQSrc[STATS_DLSRC_TRANSFERRING]) * avgModifier[mx];
						uint32	statBadSessions = (uint32) g_App.g_pPrefs->GetDownC_FailedSessions() * avgModifier[mx];
d1575 1
a1575 1
						cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes((uint64)(g_App.g_pPrefs->GetSesSavedFromCompression() + g_App.g_pPrefs->GetCumSavedFromCompression()) * avgModifier[mx]));
d1578 1
a1578 1
						cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes((uint64)(g_App.g_pPrefs->GetSesLostFromCorruption() + g_App.g_pPrefs->GetCumLostFromCorruption()) * avgModifier[mx]));
d1581 1
a1581 1
						cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), (uint32)((auDQSrc[STATS_DLSRC_SAVED_BY_ICH] + g_App.g_pPrefs->GetPartsSavedByICH()) * avgModifier[mx]));
d1587 1
a1587 1
						cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes( (uint64) (DownOHTotal + g_App.g_pPrefs->GetDownOverheadTotal()) * avgModifier[mx]), CastItoIShort((uint64)(DownOHTotalPackets + g_App.g_pPrefs->GetDownOverheadTotalPackets()) * avgModifier[mx]));
d1593 1
a1593 1
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( (uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_App.g_pPrefs->GetDownOverheadFileReq()) * avgModifier[mx]), CastItoIShort((uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_App.g_pPrefs->GetDownOverheadFileReqPackets()) * avgModifier[mx]));
d1596 1
a1596 1
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( (uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchange()+g_App.g_pPrefs->GetDownOverheadSrcEx()) * avgModifier[mx]), CastItoIShort((uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets()+g_App.g_pPrefs->GetDownOverheadSrcExPackets()) * avgModifier[mx]));
d1599 1
a1599 1
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( (uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadServer()+g_App.g_pPrefs->GetDownOverheadServer()) * avgModifier[mx]), CastItoIShort((uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadServerPackets()+g_App.g_pPrefs->GetDownOverheadServerPackets()) * avgModifier[mx]));
d1602 1
a1602 1
							cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( (uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadOther()+g_App.g_pPrefs->GetDownOverheadOther()) * avgModifier[mx]), CastItoIShort((uint64)(g_App.m_pDownloadQueue->GetDownDataOverheadOtherPackets()+g_App.g_pPrefs->GetDownOverheadOtherPackets()) * avgModifier[mx]));
d1931 1
a1931 1
	g_App.g_pPrefs->SetRecordStructMembers();
d1969 1
a1969 1
			cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_SVRECWORKING), g_App.g_pPrefs->GetSrvrsMostWorkingServers() );
d1972 1
a1972 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SVRECUSERS), CastItoThousands(g_App.g_pPrefs->GetSrvrsMostUsersOnline()) );
d1975 1
a1975 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SVRECFILES), CastItoThousands(g_App.g_pPrefs->GetSrvrsMostFilesAvail()) );
d2005 1
a2005 1
			cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_SHRECNUM), g_App.g_pPrefs->GetSharedMostFilesShared() );
d2008 1
a2008 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SHRECASIZE), CastItoXBytes(g_App.g_pPrefs->GetSharedLargestAvgFileSize()) );
d2011 1
a2011 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_LARGESTFILE), CastItoXBytes(g_App.g_pPrefs->GetSharedLargestFileSize()) );
d2014 1
a2014 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SHRECSIZE), CastItoXBytes(g_App.g_pPrefs->GetSharedLargestShareSize()) );
d2059 1
a2059 1
	if (g_App.g_pPrefs->GetGraphRatio() == 255) // 255 magic number for %
d2061 2
a2062 2
	else if (g_App.g_pPrefs->GetGraphRatio() > 1)
		strBuffer.AppendFormat(_T(" (1:%u)"), g_App.g_pPrefs->GetGraphRatio());
d2065 1
a2065 1
		g_App.g_pPrefs->GetStatsAverageMinutes(), GetResString(IDS_MINS) );
d2303 1
a2303 1
	sTreeMask = g_App.g_pPrefs->GetExpandedTreeItems();
d2320 1
a2320 1
	int iStatYGrids=int((g_App.g_pPrefs->GetStatsMax()/10.0)+0.1)-1;
d2322 1
a2322 1
		iStatYGrids=int((g_App.g_pPrefs->GetStatsMax()/50.0)+0.1)-1;
d2325 1
a2325 1
	m_Statistics.SetRanges(0, g_App.g_pPrefs->GetStatsMax());
d2344 1
a2344 1
	int shownSecs = r.Width() * g_App.g_pPrefs->GetTrafficOMeterInterval();
d2347 1
a2347 1
	if(g_App.g_pPrefs->GetTrafficOMeterInterval()==0)
d2480 1
a2480 1
	DWORD nUpdateTime = g_App.g_pPrefs->GetStatsAverageMinutes()*60*100;		//A 10th of the average interval
d2512 2
a2513 2
	if (peakconnections > g_App.g_pPrefs->GetConnPeakConnections())
		g_App.g_pPrefs->Add2ConnPeakConnections(peakconnections);
d2565 2
a2566 2
	if(g_App.g_pPrefs->GetGraphRatio() == 255) // 255 magic number for %
		adPlotDataMore[0] = (100*activeconnections/g_App.g_pPrefs->GetMaxConnections());
d2568 1
a2568 1
		adPlotDataMore[0] = (activeconnections/g_App.g_pPrefs->GetGraphRatio());
d2589 15
a2603 15
	m_DownloadOMeter.SetBackgroundColor(g_App.g_pPrefs->GetStatsColor(0));
	m_DownloadOMeter.SetGridColor(g_App.g_pPrefs->GetStatsColor(1));
	m_DownloadOMeter.SetPlotColor(g_App.g_pPrefs->GetStatsColor(4), 0);
	m_DownloadOMeter.SetPlotColor(g_App.g_pPrefs->GetStatsColor(3), 1);
	m_DownloadOMeter.SetPlotColor(g_App.g_pPrefs->GetStatsColor(2), 2);
	m_UploadOMeter.SetBackgroundColor(g_App.g_pPrefs->GetStatsColor(0));
	m_UploadOMeter.SetGridColor(g_App.g_pPrefs->GetStatsColor(1));
	m_UploadOMeter.SetPlotColor(g_App.g_pPrefs->GetStatsColor(7), 0);
	m_UploadOMeter.SetPlotColor(g_App.g_pPrefs->GetStatsColor(6), 1);
	m_UploadOMeter.SetPlotColor(g_App.g_pPrefs->GetStatsColor(5), 2);
	m_Statistics.SetBackgroundColor(g_App.g_pPrefs->GetStatsColor(0));
	m_Statistics.SetGridColor(g_App.g_pPrefs->GetStatsColor(1));
	m_Statistics.SetPlotColor(g_App.g_pPrefs->GetStatsColor(8), 0);
	m_Statistics.SetPlotColor(g_App.g_pPrefs->GetStatsColor(9), 1);
	m_Statistics.SetPlotColor(g_App.g_pPrefs->GetStatsColor(10), 2);
d2605 1
a2605 1
	if (oldRatio != g_App.g_pPrefs->GetGraphRatio())	//	Resize the general connections...
d2610 1
a2610 1
		if(oldRatio == 255 || g_App.g_pPrefs->GetGraphRatio() == 255)
d2613 2
a2614 2
			m_Statistics.ReSizePlot(0,(double)oldRatio/g_App.g_pPrefs->GetGraphRatio());
		oldRatio=g_App.g_pPrefs->GetGraphRatio();
@


1.154
log
@Unified download queue statistics, removed unused stuff; Formatting.
@
text
@d108 1
a108 1
	m_imagelistStatTree.Create(16, 16, g_eMuleApp.m_iDfltImageListColorFlags | ILC_MASK, ELEMENT_COUNT(s_auIconResID), 0);
d120 1
a120 1
	int iStatYGrids=int((g_eMuleApp.m_pGlobPrefs->GetStatsMax()/10.0)+0.1)-1;
d122 1
a122 1
		iStatYGrids=int((g_eMuleApp.m_pGlobPrefs->GetStatsMax()/50.0)+0.1)-1;
d130 1
a130 1
	SetARange(true, g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate() / 10);
d143 1
a143 1
	SetARange(false, g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate() / 10);
d156 1
a156 1
	m_Statistics.SetRanges(0, g_eMuleApp.m_pGlobPrefs->GetStatsMax());
d167 1
a167 1
	oldRatio=g_eMuleApp.m_pGlobPrefs->GetGraphRatio();		//Cax2 - Resize active connections line...
d175 1
a175 1
	if (g_eMuleApp.m_pGlobPrefs->GetStatsInterval()==0) GetDlgItem(IDC_STATTREE)->EnableWindow(false);
d201 7
a207 7
	cum_DL_maximal =		g_eMuleApp.m_pGlobPrefs->GetConnMaxDownRate();
	cum_DL_average =		g_eMuleApp.m_pGlobPrefs->GetConnAvgDownRate();
	cum_DL_max_average =	g_eMuleApp.m_pGlobPrefs->GetConnMaxAvgDownRate();

	cum_UL_maximal =		g_eMuleApp.m_pGlobPrefs->GetConnMaxUpRate();
	cum_UL_average =		g_eMuleApp.m_pGlobPrefs->GetConnAvgUpRate();
	cum_UL_max_average =	g_eMuleApp.m_pGlobPrefs->GetConnMaxAvgUpRate();
d284 1
a284 1
		g_eMuleApp.m_pGlobPrefs->Add2ConnMaxUpRate(cum_UL_maximal);
d291 1
a291 1
		g_eMuleApp.m_pGlobPrefs->Add2ConnMaxDownRate(cum_DL_maximal);
d298 1
a298 1
		g_eMuleApp.m_pGlobPrefs->Add2ConnMaxAvgDownRate(cum_DL_max_average);
d305 1
a305 1
		g_eMuleApp.m_pGlobPrefs->Add2ConnMaxAvgUpRate(cum_UL_max_average);
d350 2
a351 2
	if (g_eMuleApp.stat_serverConnectTime==0) time_thisServerDuration = 0;
	else time_thisServerDuration = ( GetTickCount() - g_eMuleApp.stat_serverConnectTime ) / 1000;
d371 1
a371 1
		if ( g_eMuleApp.stat_sessionReceivedBytes>0 && g_eMuleApp.stat_sessionSentBytes>0 )
d374 1
a374 1
			if (g_eMuleApp.stat_sessionReceivedBytes<g_eMuleApp.stat_sessionSentBytes)
d376 1
a376 1
				cbuffer.Format(_T("%s %.2f : 1"),GetResString(IDS_STATS_SRATIO),static_cast<double>(g_eMuleApp.stat_sessionSentBytes)/g_eMuleApp.stat_sessionReceivedBytes);
d381 1
a381 1
				cbuffer.Format(_T("%s 1 : %.2f"),GetResString(IDS_STATS_SRATIO),static_cast<double>(g_eMuleApp.stat_sessionReceivedBytes)/g_eMuleApp.stat_sessionSentBytes);
d390 1
a390 1
		if ( (g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()>0 && g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()>0) || (g_eMuleApp.stat_sessionReceivedBytes>0 && g_eMuleApp.stat_sessionSentBytes>0) )
d393 1
a393 1
			if ((g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded())<(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()))
d395 1
a395 1
				cbuffer.Format(_T("%s %.2f : 1"),GetResString(IDS_STATS_CRATIO),static_cast<double>(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded())/(g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()));
d400 1
a400 1
				cbuffer.Format(_T("%s 1 : %.2f"),GetResString(IDS_STATS_CRATIO),static_cast<double>(g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded())/(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()));
d414 1
a414 1
			g_eMuleApp.m_pDownloadQueue->GetDownloadStats(auDQSrc, aqwDQData);
d419 1
a419 1
				cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_DDATA), CastItoXBytes(g_eMuleApp.stat_sessionReceivedBytes));
d426 1
a426 1
						uint64 DownDataTotal = g_eMuleApp.m_pGlobPrefs->GetDownSessionClientData();
d434 2
a435 2
									DownDataClient = g_eMuleApp.m_pGlobPrefs->GetDownData((EnumClientTypes)j)
													+ g_eMuleApp.m_pGlobPrefs->GetDownData(SO_OLDEMULE);
d437 1
a437 1
									DownDataClient = g_eMuleApp.m_pGlobPrefs->GetDownData((EnumClientTypes)j);
d451 3
a453 3
						uint64	PortDataDefault =	g_eMuleApp.m_pGlobPrefs->GetDownDataPort_4662();
						uint64	PortDataOther =		g_eMuleApp.m_pGlobPrefs->GetDownDataPort_OTHER();
						uint64	PortDataTotal =		g_eMuleApp.m_pGlobPrefs->GetDownSessionDataPort();
d470 1
a470 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_COMPDL), g_eMuleApp.m_pGlobPrefs->GetDownSessionCompletedFiles());
d473 1
a473 1
				cbuffer.Format(GetResString(IDS_DWTOT_NUM), g_eMuleApp.m_pDownloadQueue->GetActiveFileCount());
d501 1
a501 1
				uint64 t_FreeBytes = GetFreeDiskSpaceX(g_eMuleApp.m_pGlobPrefs->GetTempDir().GetBuffer());
d536 1
a536 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ASKED4ANOTHERFILE), g_eMuleApp.m_pClientList->GetA4AFSourcesCount());
d546 2
a547 2
				statGoodSessions =	g_eMuleApp.m_pGlobPrefs->GetDownS_SuccessfulSessions() + auDQSrc[STATS_DLSRC_TRANSFERRING]; // Add Active Downloads
				statBadSessions =	g_eMuleApp.m_pGlobPrefs->GetDownS_FailedSessions();
d557 1
a557 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATADLSES), CastItoXBytes((uint64)g_eMuleApp.stat_sessionReceivedBytes / statGoodSessions));
d570 1
a570 1
					uint16 statBadSessionsNoRequiredData =	g_eMuleApp.m_pGlobPrefs->GetDownS_FailedSessionsNoRequiredData();
d579 1
a579 1
					cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDLTIME), CastSecondsToLngHM(g_eMuleApp.m_pGlobPrefs->GetDownS_AvgTime()));
d583 1
a583 1
				cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSesSavedFromCompression()));
d586 1
a586 1
				cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSesLostFromCorruption()));
d593 2
a594 2
				DownOHTotal = g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchange() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServer() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOther();
				DownOHTotalPackets = g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServerPackets() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOtherPackets();
d603 1
a603 1
					cbuffer.Format( GetResString( IDS_FROVERHEAD ) , CastItoXBytes( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequest() ) , CastItoIShort( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() ) );
d606 1
a606 1
					cbuffer.Format( GetResString( IDS_SSOVERHEAD ) , CastItoXBytes( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchange() ), CastItoIShort( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets() ) );
d609 1
a609 1
					cbuffer.Format( GetResString( IDS_SOVERHEAD ) , CastItoXBytes( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServer() ), CastItoIShort( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServerPackets() ) );
d612 1
a612 1
					cbuffer.Format( GetResString( IDS_OOVERHEAD ) , CastItoXBytes( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOther() ), CastItoIShort( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOtherPackets() ) );
d621 1
a621 1
				cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_DDATA), CastItoXBytes(g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()));
d628 1
a628 1
						uint64 DownDataTotal = g_eMuleApp.m_pGlobPrefs->GetDownTotalClientData();
d637 2
a638 2
									DownDataClient = g_eMuleApp.m_pGlobPrefs->GetCumDownData((EnumClientTypes)j)
													+ g_eMuleApp.m_pGlobPrefs->GetCumDownData(SO_OLDEMULE);
d640 1
a640 1
									DownDataClient = g_eMuleApp.m_pGlobPrefs->GetCumDownData((EnumClientTypes)j);
d654 3
a656 3
						uint64	PortDataDefault =	g_eMuleApp.m_pGlobPrefs->GetCumDownDataPort_4662();
						uint64	PortDataOther =		g_eMuleApp.m_pGlobPrefs->GetCumDownDataPort_OTHER();
						uint64	PortDataTotal =		g_eMuleApp.m_pGlobPrefs->GetDownTotalPortData();
d673 1
a673 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_COMPDL), g_eMuleApp.m_pGlobPrefs->GetDownCompletedFiles());
d676 2
a677 2
				statGoodSessions = g_eMuleApp.m_pGlobPrefs->GetDownC_SuccessfulSessions() + auDQSrc[STATS_DLSRC_TRANSFERRING]; // Need to reset these from the session section.  Declared up there.
				statBadSessions = g_eMuleApp.m_pGlobPrefs->GetDownC_FailedSessions(); // ^^^^^^^^^^^^^^
d686 1
a686 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATADLSES), CastItoXBytes((uint64)(g_eMuleApp.stat_sessionReceivedBytes + g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()) / statGoodSessions));
d703 3
a705 3
					uint32 avgDownTime = g_eMuleApp.m_pGlobPrefs->GetDownS_AvgTime();
					if (g_eMuleApp.m_pGlobPrefs->GetDownC_AvgTime()<=0) g_eMuleApp.m_pGlobPrefs->Add2DownCAvgTime(avgDownTime);
					avgDownTime = (uint32) (avgDownTime+g_eMuleApp.m_pGlobPrefs->GetDownC_AvgTime())/2;
d710 1
a710 1
				cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSesSavedFromCompression() + g_eMuleApp.m_pGlobPrefs->GetCumSavedFromCompression()));
d713 1
a713 1
				cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSesLostFromCorruption() + g_eMuleApp.m_pGlobPrefs->GetCumLostFromCorruption()));
d716 1
a716 1
				cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), auDQSrc[STATS_DLSRC_SAVED_BY_ICH] + g_eMuleApp.m_pGlobPrefs->GetPartsSavedByICH());
d721 2
a722 2
					DownOHTotal = g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchange() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServer() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOther();
					DownOHTotalPackets = g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServerPackets() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOtherPackets();
d725 1
a725 1
				cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(DownOHTotal + g_eMuleApp.m_pGlobPrefs->GetDownOverheadTotal()), CastItoIShort(DownOHTotalPackets + g_eMuleApp.m_pGlobPrefs->GetDownOverheadTotalPackets()));
d731 1
a731 1
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_eMuleApp.m_pGlobPrefs->GetDownOverheadFileReq()), CastItoIShort(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_eMuleApp.m_pGlobPrefs->GetDownOverheadFileReqPackets()));
d734 1
a734 1
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchange()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadSrcEx()), CastItoIShort(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadSrcExPackets()));
d737 1
a737 1
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServer()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadServer()), CastItoIShort(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServerPackets()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadServerPackets()));
d740 1
a740 1
					cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOther()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadOther()), CastItoIShort(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOtherPackets()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadOtherPackets()));
d754 1
a754 1
				cbuffer.Format(_T("%s: %s"),GetResString(IDS_STATS_UDATA),CastItoXBytes(g_eMuleApp.stat_sessionSentBytes));
d761 1
a761 1
						uint64 UpDataTotal =	g_eMuleApp.m_pGlobPrefs->GetUpSessionClientData();
d770 2
a771 2
									UpDataClient = g_eMuleApp.m_pGlobPrefs->GetUpData((EnumClientTypes)j)
													+ g_eMuleApp.m_pGlobPrefs->GetUpData(SO_OLDEMULE);
d773 1
a773 1
									UpDataClient = g_eMuleApp.m_pGlobPrefs->GetUpData((EnumClientTypes)j);
d787 3
a789 3
						uint64	PortDataDefault =	g_eMuleApp.m_pGlobPrefs->GetUpDataPort_4662();
						uint64	PortDataOther =		g_eMuleApp.m_pGlobPrefs->GetUpDataPort_OTHER();
						uint64	PortDataTotal =		g_eMuleApp.m_pGlobPrefs->GetUpSessionPortData();
d808 3
a810 3
						uint64	DataSourceFile =	g_eMuleApp.m_pGlobPrefs->GetUpData_File();
						uint64	DataSourcePF =		g_eMuleApp.m_pGlobPrefs->GetUpData_PartFile();
						uint64	DataSourceTotal =	g_eMuleApp.m_pGlobPrefs->GetUpSessionDataFile();
d829 3
a831 3
						uint64	DataCommunity =		g_eMuleApp.m_pGlobPrefs->GetUpData_Community();
						uint64	DataNoCommunity =	g_eMuleApp.m_pGlobPrefs->GetUpData_NoCommunity();
						uint64	DataTotal =			g_eMuleApp.m_pGlobPrefs->GetUpSessionDataCommunity();
d852 2
a853 2
						qwData = g_eMuleApp.m_pGlobPrefs->GetUpDataByPriority(PR_RELEASE);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIORELEASE), CastItoXBytes(qwData), GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d856 2
a857 2
						qwData = g_eMuleApp.m_pGlobPrefs->GetUpDataByPriority(PR_HIGH);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIOHIGH), CastItoXBytes(qwData), GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d860 2
a861 2
						qwData = g_eMuleApp.m_pGlobPrefs->GetUpDataByPriority(PR_NORMAL);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIONORMAL), CastItoXBytes(qwData), GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d864 2
a865 2
						qwData = g_eMuleApp.m_pGlobPrefs->GetUpDataByPriority(PR_LOW);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIOLOW), CastItoXBytes(qwData), GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d868 2
a869 2
						qwData = g_eMuleApp.m_pGlobPrefs->GetUpDataByPriority(PR_VERYLOW);
						cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_PRIOVERYLOW), CastItoXBytes(qwData), GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d874 1
a874 1
				cbuffer.Format(GetResString(IDS_STATS_ACTUL),g_eMuleApp.m_pUploadQueue->GetUploadQueueLength());
d877 1
a877 1
				cbuffer.Format(GetResString(IDS_STATS_WAITINGUSERS),g_eMuleApp.m_pUploadQueue->GetWaitingUserCount());
d881 2
a882 2
				statGoodSessions = g_eMuleApp.m_pUploadQueue->GetSuccessfulUpCount(); // + g_eMuleApp.m_pUploadQueue->GetUploadQueueLength();
				statBadSessions = g_eMuleApp.m_pUploadQueue->GetFailedUpCount();
d891 2
a892 2
						percentSessions = (double) 100*(statGoodSessions+g_eMuleApp.m_pUploadQueue->GetUploadQueueLength())/(statGoodSessions+g_eMuleApp.m_pUploadQueue->GetUploadQueueLength()+statBadSessions);
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64)g_eMuleApp.stat_sessionSentBytes / (statGoodSessions+g_eMuleApp.m_pUploadQueue->GetUploadQueueLength())));
d904 1
a904 1
					cbuffer.Format(_T("%s: %u (%.1f%%)"),GetResString(IDS_STATS_SUCCUP_FC),g_eMuleApp.m_pUploadQueue->GetULFullChunkCount(),GetPercent(g_eMuleApp.m_pUploadQueue->GetULFullChunkCount(),statTotalSessions));
d906 1
a906 1
					cbuffer.Format(_T("%s: %u (%.1f%%)"),GetResString(IDS_STATS_SUCCUP_PC),g_eMuleApp.m_pUploadQueue->GetULPartChunkCount(),GetPercent(g_eMuleApp.m_pUploadQueue->GetULPartChunkCount(),statTotalSessions));
d912 2
a913 2
							g_eMuleApp.m_pUploadQueue->GetULPartChunkSubCount((EnumEndTransferSession)i),
							GetPercent(g_eMuleApp.m_pUploadQueue->GetULPartChunkSubCount((EnumEndTransferSession)i),statTotalSessions));
d924 2
a925 2
							g_eMuleApp.m_pUploadQueue->GetFailedSubCount((EnumEndTransferSession)i),
							GetPercent(g_eMuleApp.m_pUploadQueue->GetFailedSubCount((EnumEndTransferSession)i),statTotalSessions));
d931 1
a931 1
					cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME),CastSecondsToLngHM(g_eMuleApp.m_pUploadQueue->GetAverageUpTime()));
d935 2
a936 2
				UpOHTotal = g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchange() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServer() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOther();
				UpOHTotalPackets = g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServerPackets() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOtherPackets();
d944 1
a944 1
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequest()), CastItoIShort(g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequestPackets()));
d947 1
a947 1
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchange()), CastItoIShort(g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets()));
d950 1
a950 1
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServer()), CastItoIShort(g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServerPackets()));
d953 1
a953 1
					cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOther()), CastItoIShort(g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOtherPackets()));
d962 1
a962 1
				cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_UDATA), CastItoXBytes(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()));
d969 1
a969 1
						uint64 UpDataTotal =	g_eMuleApp.m_pGlobPrefs->GetUpTotalClientData();
d978 2
a979 2
									UpDataClient = g_eMuleApp.m_pGlobPrefs->GetCumUpData((EnumClientTypes)j)
													+ g_eMuleApp.m_pGlobPrefs->GetCumUpData(SO_OLDEMULE);
d981 1
a981 1
									UpDataClient = g_eMuleApp.m_pGlobPrefs->GetCumUpData((EnumClientTypes)j);
d996 3
a998 3
						uint64	PortDataDefault =	g_eMuleApp.m_pGlobPrefs->GetCumUpDataPort_4662();
						uint64	PortDataOther =		g_eMuleApp.m_pGlobPrefs->GetCumUpDataPort_OTHER();
						uint64	PortDataTotal =		g_eMuleApp.m_pGlobPrefs->GetUpTotalPortData();
d1017 3
a1019 3
						uint64	DataSourceFile =	g_eMuleApp.m_pGlobPrefs->GetCumUpData_File();
						uint64	DataSourcePF =		g_eMuleApp.m_pGlobPrefs->GetCumUpData_PartFile();
						uint64	DataSourceTotal =	g_eMuleApp.m_pGlobPrefs->GetUpTotalDataFile();
d1038 3
a1040 3
						uint64	DataCommunity =		g_eMuleApp.m_pGlobPrefs->GetCumUpData_Community();
						uint64	DataNoCommunity =	g_eMuleApp.m_pGlobPrefs->GetCumUpData_NoCommunity();
						uint64	DataTotal =			g_eMuleApp.m_pGlobPrefs->GetUpTotalDataCommunity();
d1057 2
a1058 2
				statGoodSessions = g_eMuleApp.m_pUploadQueue->GetSuccessfulUpCount() + g_eMuleApp.m_pGlobPrefs->GetUpSuccessfulSessions() + g_eMuleApp.m_pUploadQueue->GetUploadQueueLength();
				statBadSessions = g_eMuleApp.m_pUploadQueue->GetFailedUpCount() + g_eMuleApp.m_pGlobPrefs->GetUpFailedSessions();
d1067 1
a1067 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) (g_eMuleApp.stat_sessionSentBytes + g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()) / statGoodSessions));
d1086 3
a1088 3
					uint32 avguptime = g_eMuleApp.m_pUploadQueue->GetAverageUpTime();
					if (g_eMuleApp.m_pGlobPrefs->GetUpAvgTime()<=0) g_eMuleApp.m_pGlobPrefs->Add2UpAvgTime(avguptime);
					avguptime = (uint32) (avguptime+g_eMuleApp.m_pGlobPrefs->GetUpAvgTime())/2;
d1096 2
a1097 2
					UpOHTotal = g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchange() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServer() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOther();
					UpOHTotalPackets = g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServerPackets() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOtherPackets();
d1100 1
a1100 1
				cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(UpOHTotal + g_eMuleApp.m_pGlobPrefs->GetUpOverheadTotal()), CastItoIShort(UpOHTotalPackets + g_eMuleApp.m_pGlobPrefs->GetUpOverheadTotalPackets()));
d1106 1
a1106 1
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_eMuleApp.m_pGlobPrefs->GetUpOverheadFileReq()), CastItoIShort(g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_eMuleApp.m_pGlobPrefs->GetUpOverheadFileReqPackets()));
d1109 1
a1109 1
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchange()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadSrcEx()), CastItoIShort(g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadSrcExPackets()));
d1112 1
a1112 1
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServer()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadServer()), CastItoIShort(g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServerPackets()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadServerPackets()));
d1115 1
a1115 1
					cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOther()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadOther()), CastItoIShort(g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOtherPackets()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadOtherPackets()));
d1134 1
a1134 1
				if (g_eMuleApp.stat_reconnects>0) cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),g_eMuleApp.stat_reconnects-1);
d1148 1
a1148 1
				uint32 m_itemp = g_eMuleApp.m_pListenSocket->GetMaxConnectionsReachedCount();
d1207 2
a1208 2
				if(g_eMuleApp.stat_reconnects>0)
					cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),g_eMuleApp.stat_reconnects - 1 + g_eMuleApp.m_pGlobPrefs->GetConnNumReconnects());
d1210 1
a1210 1
					cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),g_eMuleApp.m_pGlobPrefs->GetConnNumReconnects());
d1213 1
a1213 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_AVGCON), (activeconnections + g_eMuleApp.m_pGlobPrefs->GetConnAvgConnections()) / 2);
d1216 1
a1216 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_PEAKCON), g_eMuleApp.m_pGlobPrefs->GetConnPeakConnections());
d1220 1
a1220 1
				cbuffer.Format(_T("%s: %u"), GetResString(IDS_SF_MAXCONLIMITREACHED), g_eMuleApp.m_pListenSocket->GetMaxConnectionsReachedCount() + g_eMuleApp.m_pGlobPrefs->GetConnMaxConnLimitReached());
d1260 1
a1260 1
		cbuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), g_eMuleApp.m_pGlobPrefs->GetStatsLastResetStr());
d1264 1
a1264 1
		if (g_eMuleApp.m_pGlobPrefs->GetStatsLastResetLng())
d1269 1
a1269 1
			timeDiff = timeNow - g_eMuleApp.m_pGlobPrefs->GetStatsLastResetLng(); // In seconds
d1283 1
a1283 1
			uint64 sessionRunTime = (uint64)((::GetTickCount()-g_eMuleApp.stat_starttime)/1000);
d1313 1
a1313 1
			uint64 totalRunTime = (uint64)((::GetTickCount()-g_eMuleApp.stat_starttime)/1000)+g_eMuleApp.m_pGlobPrefs->GetConnRunTime();
d1318 1
a1318 1
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime() + g_eMuleApp.m_pGlobPrefs->GetConnTransferTime()), (double) (100 * (GetTransferTime() + g_eMuleApp.m_pGlobPrefs->GetConnTransferTime())) / totalRunTime);
d1324 1
a1324 1
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime() + g_eMuleApp.m_pGlobPrefs->GetConnUploadTime()), (double) (100 * (GetUploadTime() + g_eMuleApp.m_pGlobPrefs->GetConnUploadTime())) / totalRunTime);
d1327 1
a1327 1
				cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime() + g_eMuleApp.m_pGlobPrefs->GetConnDownloadTime()), (double) (100 * (GetDownloadTime() + g_eMuleApp.m_pGlobPrefs->GetConnDownloadTime())) / totalRunTime);
d1332 1
a1332 1
			cbuffer.Format(_T("%s: %s (%.1f%%)"), GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration() + g_eMuleApp.m_pGlobPrefs->GetConnServerDuration()), (double) (100 * (GetServerDuration() + g_eMuleApp.m_pGlobPrefs->GetConnServerDuration())) / totalRunTime);
d1353 1
a1353 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_UDATA), CastItoXBytes((uint64)(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded())*avgModifier[mx]));
d1360 1
a1360 1
								uint64 UpDataTotal =	(uint64) g_eMuleApp.m_pGlobPrefs->GetUpTotalClientData() * avgModifier[mx];
d1369 2
a1370 2
											UpDataClient = (g_eMuleApp.m_pGlobPrefs->GetCumUpData((EnumClientTypes)j)
															+ g_eMuleApp.m_pGlobPrefs->GetCumUpData(SO_OLDEMULE))*avgModifier[mx];
d1372 1
a1372 1
											UpDataClient = g_eMuleApp.m_pGlobPrefs->GetCumUpData((EnumClientTypes)j)*avgModifier[mx];
d1387 3
a1389 3
								uint64	PortDataDefault =	(uint64) g_eMuleApp.m_pGlobPrefs->GetCumUpDataPort_4662() * avgModifier[mx];
								uint64	PortDataOther =		(uint64) g_eMuleApp.m_pGlobPrefs->GetCumUpDataPort_OTHER() * avgModifier[mx];
								uint64	PortDataTotal =		(uint64) g_eMuleApp.m_pGlobPrefs->GetUpTotalPortData() * avgModifier[mx];
d1408 3
a1410 3
								uint64	DataSourceFile =	(uint64) g_eMuleApp.m_pGlobPrefs->GetCumUpData_File() * avgModifier[mx];
								uint64	DataSourcePF =		(uint64) g_eMuleApp.m_pGlobPrefs->GetCumUpData_PartFile() * avgModifier[mx];
								uint64	DataSourceTotal =	(uint64) g_eMuleApp.m_pGlobPrefs->GetUpTotalDataFile() * avgModifier[mx];
d1429 3
a1431 3
								uint64	DataCommunity =		(uint64) g_eMuleApp.m_pGlobPrefs->GetCumUpData_Community() * avgModifier[mx];
								uint64	DataNoCommunity =	(uint64) g_eMuleApp.m_pGlobPrefs->GetCumUpData_NoCommunity() * avgModifier[mx];
								uint64	DataTotal =			(uint64) g_eMuleApp.m_pGlobPrefs->GetUpTotalDataCommunity() * avgModifier[mx];
d1448 2
a1449 2
						uint32 statGoodSessions = (uint32) (g_eMuleApp.m_pUploadQueue->GetSuccessfulUpCount() + g_eMuleApp.m_pGlobPrefs->GetUpSuccessfulSessions() + g_eMuleApp.m_pUploadQueue->GetUploadQueueLength()) * avgModifier[mx];
						uint32 statBadSessions = (uint32) (g_eMuleApp.m_pUploadQueue->GetFailedUpCount() + g_eMuleApp.m_pGlobPrefs->GetUpFailedSessions()) * avgModifier[mx];
d1471 2
a1472 2
						uint64 UpOHTotal = (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchange() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServer() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOther()) * avgModifier[mx];
						uint64 UpOHTotalPackets = (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServerPackets() + g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOtherPackets()) * avgModifier[mx];
d1475 1
a1475 1
						cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(UpOHTotal + ((uint64)g_eMuleApp.m_pGlobPrefs->GetUpOverheadTotal() * avgModifier[mx])), CastItoIShort(UpOHTotalPackets + ((uint64)g_eMuleApp.m_pGlobPrefs->GetUpOverheadTotalPackets() * avgModifier[mx])));
d1481 1
a1481 1
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequest() + g_eMuleApp.m_pGlobPrefs->GetUpOverheadFileReq()) * avgModifier[mx]), CastItoIShort( (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadFileRequestPackets() + g_eMuleApp.m_pGlobPrefs->GetUpOverheadFileReqPackets()) * avgModifier[mx]));
d1484 1
a1484 1
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchange()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadSrcEx()) * avgModifier[mx]), CastItoIShort( (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadSourceExchangePackets()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadSrcExPackets()) * avgModifier[mx]));
d1487 1
a1487 1
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServer()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadServer()) * avgModifier[mx]), CastItoIShort( (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadServerPackets()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadServerPackets()) * avgModifier[mx]));
d1490 1
a1490 1
							cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOther()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadOther()) * avgModifier[mx]), CastItoIShort( (uint64) (g_eMuleApp.m_pUploadQueue->GetUpDataOverheadOtherPackets()+g_eMuleApp.m_pGlobPrefs->GetUpOverheadOtherPackets()) * avgModifier[mx]));
d1497 1
a1497 1
						g_eMuleApp.m_pDownloadQueue->GetDownloadStats(auDQSrc, aqwDQData);
d1499 1
a1499 1
						cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_DDATA), CastItoXBytes((uint64) (g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()) * avgModifier[mx]));
d1506 1
a1506 1
								uint64 DownDataTotal = (uint64) g_eMuleApp.m_pGlobPrefs->GetDownTotalClientData() * avgModifier[mx];
d1515 2
a1516 2
											DownDataClient = (g_eMuleApp.m_pGlobPrefs->GetCumDownData((EnumClientTypes)j)
															+ g_eMuleApp.m_pGlobPrefs->GetCumDownData(SO_OLDEMULE))* avgModifier[mx];
d1518 1
a1518 1
											DownDataClient = g_eMuleApp.m_pGlobPrefs->GetCumDownData((EnumClientTypes)j)* avgModifier[mx];
d1533 3
a1535 3
								uint64	PortDataDefault =	(uint64) g_eMuleApp.m_pGlobPrefs->GetCumDownDataPort_4662() * avgModifier[mx];
								uint64	PortDataOther =		(uint64) g_eMuleApp.m_pGlobPrefs->GetCumDownDataPort_OTHER() * avgModifier[mx];
								uint64	PortDataTotal =		(uint64) g_eMuleApp.m_pGlobPrefs->GetDownTotalPortData() * avgModifier[mx];
d1552 1
a1552 1
						cbuffer.Format(_T("%s: %I64u"), GetResString(IDS_STATS_COMPDL), (uint64)(g_eMuleApp.m_pGlobPrefs->GetDownCompletedFiles() * avgModifier[mx]));
d1555 2
a1556 2
						uint32	statGoodSessions = (uint32) (g_eMuleApp.m_pGlobPrefs->GetDownC_SuccessfulSessions() + auDQSrc[STATS_DLSRC_TRANSFERRING]) * avgModifier[mx];
						uint32	statBadSessions = (uint32) g_eMuleApp.m_pGlobPrefs->GetDownC_FailedSessions() * avgModifier[mx];
d1575 1
a1575 1
						cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes((uint64)(g_eMuleApp.m_pGlobPrefs->GetSesSavedFromCompression() + g_eMuleApp.m_pGlobPrefs->GetCumSavedFromCompression()) * avgModifier[mx]));
d1578 1
a1578 1
						cbuffer.Format(GetResString(IDS_STATS_LOSTCORRUPT), CastItoXBytes((uint64)(g_eMuleApp.m_pGlobPrefs->GetSesLostFromCorruption() + g_eMuleApp.m_pGlobPrefs->GetCumLostFromCorruption()) * avgModifier[mx]));
d1581 1
a1581 1
						cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), (uint32)((auDQSrc[STATS_DLSRC_SAVED_BY_ICH] + g_eMuleApp.m_pGlobPrefs->GetPartsSavedByICH()) * avgModifier[mx]));
d1584 2
a1585 2
						uint64 DownOHTotal = g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchange() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServer() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOther();
						uint64 DownOHTotalPackets = g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServerPackets() + g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOtherPackets();
d1587 1
a1587 1
						cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes( (uint64) (DownOHTotal + g_eMuleApp.m_pGlobPrefs->GetDownOverheadTotal()) * avgModifier[mx]), CastItoIShort((uint64)(DownOHTotalPackets + g_eMuleApp.m_pGlobPrefs->GetDownOverheadTotalPackets()) * avgModifier[mx]));
d1593 1
a1593 1
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( (uint64)(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequest() + g_eMuleApp.m_pGlobPrefs->GetDownOverheadFileReq()) * avgModifier[mx]), CastItoIShort((uint64)(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadFileRequestPackets() + g_eMuleApp.m_pGlobPrefs->GetDownOverheadFileReqPackets()) * avgModifier[mx]));
d1596 1
a1596 1
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( (uint64)(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchange()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadSrcEx()) * avgModifier[mx]), CastItoIShort((uint64)(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadSourceExchangePackets()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadSrcExPackets()) * avgModifier[mx]));
d1599 1
a1599 1
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( (uint64)(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServer()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadServer()) * avgModifier[mx]), CastItoIShort((uint64)(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadServerPackets()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadServerPackets()) * avgModifier[mx]));
d1602 1
a1602 1
							cbuffer.Format(GetResString(IDS_OOVERHEAD), CastItoXBytes( (uint64)(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOther()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadOther()) * avgModifier[mx]), CastItoIShort((uint64)(g_eMuleApp.m_pDownloadQueue->GetDownDataOverheadOtherPackets()+g_eMuleApp.m_pGlobPrefs->GetDownOverheadOtherPackets()) * avgModifier[mx]));
d1626 1
a1626 1
		g_eMuleApp.m_pClientList->GetStatistics(totalclient, myStats, clientsPorts, &AllClients, totalMODs, &dwTotalPlusMODs, &clientMODs, &clientPlusMODs, &clientCountries);
d1699 1
a1699 1
						g_eMuleApp.m_pClientList->GetMODType(top_pos, &strBuf2);
d1762 1
a1762 1
						g_eMuleApp.m_pClientList->GetMODType(top_pos, &strBuf2);
d1868 1
a1868 1
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_BANNED), g_eMuleApp.m_pUploadQueue->GetBanCount()); stattree.SetItemText(cligen[4], cbuffer);
d1871 4
a1874 4
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_FILTEREDCLIENTS),g_eMuleApp.m_lTotalFiltered); stattree.SetItemText(hFiltered, cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_FILTEREDCLIENTS_IN),g_eMuleApp.m_lIncomingFiltered); stattree.SetItemText(hFilteredItems[0], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_FILTEREDCLIENTS_OUT),g_eMuleApp.m_lOutgoingFiltered); stattree.SetItemText(hFilteredItems[1], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_FILTEREDCLIENTS_SX),g_eMuleApp.m_lSXFiltered); stattree.SetItemText(hFilteredItems[2], cbuffer);
d1876 1
a1876 1
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_CLIENTS), g_eMuleApp.m_lTotalNumUnfairClients); stattree.SetItemText(cligen[5], cbuffer);
d1879 5
a1883 5
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTIONS), g_eMuleApp.m_lTotalNumUnfairActions); stattree.SetItemText(hUnfairAction, cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTION_MH),g_eMuleApp.m_lTotalNumUseMyHashActions); stattree.SetItemText(hUnfairActionItems[0], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTION_HC),g_eMuleApp.m_lTotalNumHashChangeActions); stattree.SetItemText(hUnfairActionItems[1], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTION_BN),g_eMuleApp.m_lTotalNumStolenNameActions); stattree.SetItemText(hUnfairActionItems[2], cbuffer);
		cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_UNFAIR_ACTION_LT),g_eMuleApp.m_lTotalNumLeecherTypeActions); stattree.SetItemText(hUnfairActionItems[3], cbuffer);
d1889 1
a1889 1
			if (g_eMuleApp.m_pIP2Country->IsIP2Country())
d1912 1
a1912 1
							cbuffer.Format(_T("%s: %u (%.1f%%)"), g_eMuleApp.m_pIP2Country->GetCountryNameByIndex(iTopIdx), dwLastTop, static_cast<double>(100*dwLastTop)/totalclient);
d1931 1
a1931 1
	g_eMuleApp.m_pGlobPrefs->SetRecordStructMembers();
d1939 1
a1939 1
		g_eMuleApp.m_pServerList->GetServersStatus(servtotal, servfail, servuser, servfile, dwSrvLowIdUsers, servtuser, servtfile, servocc);
d1954 1
a1954 1
		cbuffer.Format(_T("%s: %u"),GetResString(IDS_SF_DELCOUNT),g_eMuleApp.m_pServerList->GetDeletedServerCount());stattree.SetItemText(srv[2], cbuffer);
d1962 1
a1962 1
		g_eMuleApp.m_pDownloadQueue->GetUDPSearchStatus(&strBuf2);
d1969 1
a1969 1
			cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_SVRECWORKING), g_eMuleApp.m_pGlobPrefs->GetSrvrsMostWorkingServers() );
d1972 1
a1972 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SVRECUSERS), CastItoThousands(g_eMuleApp.m_pGlobPrefs->GetSrvrsMostUsersOnline()) );
d1975 1
a1975 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SVRECFILES), CastItoThousands(g_eMuleApp.m_pGlobPrefs->GetSrvrsMostFilesAvail()) );
d1985 1
a1985 1
		cbuffer.Format(GetResString(IDS_SHAREDFILESCOUNT),g_eMuleApp.m_pSharedFilesList->GetCount());
d1989 1
a1989 1
		uint64 allsize = g_eMuleApp.m_pSharedFilesList->GetDatasize(&dwLargestFile); // returns total share size as well as largest filesize
d1992 1
a1992 1
			CastItoXBytes((g_eMuleApp.m_pSharedFilesList->GetCount() != 0) ? (allsize / g_eMuleApp.m_pSharedFilesList->GetCount()) : 0) );
d2005 1
a2005 1
			cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_SHRECNUM), g_eMuleApp.m_pGlobPrefs->GetSharedMostFilesShared() );
d2008 1
a2008 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SHRECASIZE), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSharedLargestAvgFileSize()) );
d2011 1
a2011 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_LARGESTFILE), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSharedLargestFileSize()) );
d2014 1
a2014 1
			cbuffer.Format(_T("%s: %s"), GetResString(IDS_STATS_SHRECSIZE), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSharedLargestShareSize()) );
d2059 1
a2059 1
	if (g_eMuleApp.m_pGlobPrefs->GetGraphRatio() == 255) // 255 magic number for %
d2061 2
a2062 2
	else if (g_eMuleApp.m_pGlobPrefs->GetGraphRatio() > 1)
		strBuffer.AppendFormat(_T(" (1:%u)"), g_eMuleApp.m_pGlobPrefs->GetGraphRatio());
d2065 1
a2065 1
		g_eMuleApp.m_pGlobPrefs->GetStatsAverageMinutes(), GetResString(IDS_MINS) );
d2303 1
a2303 1
	sTreeMask = g_eMuleApp.m_pGlobPrefs->GetExpandedTreeItems();
d2320 1
a2320 1
	int iStatYGrids=int((g_eMuleApp.m_pGlobPrefs->GetStatsMax()/10.0)+0.1)-1;
d2322 1
a2322 1
		iStatYGrids=int((g_eMuleApp.m_pGlobPrefs->GetStatsMax()/50.0)+0.1)-1;
d2325 1
a2325 1
	m_Statistics.SetRanges(0, g_eMuleApp.m_pGlobPrefs->GetStatsMax());
d2332 1
a2332 1
	if (!g_eMuleApp.m_pdlgEmule->IsRunning())
d2344 1
a2344 1
	int shownSecs = r.Width() * g_eMuleApp.m_pGlobPrefs->GetTrafficOMeterInterval();
d2347 1
a2347 1
	if(g_eMuleApp.m_pGlobPrefs->GetTrafficOMeterInterval()==0)
d2411 1
a2411 1
	if (g_eMuleApp.stat_transferStarttime==0)
d2416 1
a2416 1
		DWORD dwRunTime_MS = ::GetTickCount() - g_eMuleApp.stat_transferStarttime;
d2422 1
a2422 1
		return ((double)g_eMuleApp.stat_sessionReceivedBytes)/((double) dwRunTime_MS * 1.024);
d2430 1
a2430 1
		return ((double)(g_eMuleApp.stat_sessionReceivedBytes - downrateHistory.back()))/((double)(::GetTickCount() - timeHistory.back())*1.024);
d2443 1
a2443 1
	if (g_eMuleApp.stat_transferStarttime==0)
d2448 1
a2448 1
		DWORD dwRunTime_MS = ::GetTickCount() - g_eMuleApp.stat_transferStarttime;
d2454 1
a2454 1
		return ((double)g_eMuleApp.stat_sessionSentBytes)/((double) dwRunTime_MS * 1.024);
d2461 1
a2461 1
		return ((double)(g_eMuleApp.stat_sessionSentBytes - uprateHistory.back()))/((double)(::GetTickCount() - timeHistory.back())*1.024);
d2473 1
a2473 1
	if (g_eMuleApp.stat_transferStarttime==0)
d2480 1
a2480 1
	DWORD nUpdateTime = g_eMuleApp.m_pGlobPrefs->GetStatsAverageMinutes()*60*100;		//A 10th of the average interval
d2484 2
a2485 2
	downrateHistory.push_front(g_eMuleApp.stat_sessionReceivedBytes);
	uprateHistory.push_front(g_eMuleApp.stat_sessionSentBytes);
d2508 1
a2508 1
	activeconnections = g_eMuleApp.m_pListenSocket->GetNumOpenSockets(); // netwolf 07.05.03 (moved here from CStatisticsDlg::SetCurrentRate())
d2512 2
a2513 2
	if (peakconnections > g_eMuleApp.m_pGlobPrefs->GetConnPeakConnections())
		g_eMuleApp.m_pGlobPrefs->Add2ConnPeakConnections(peakconnections);
d2515 1
a2515 1
	if( g_eMuleApp.m_pServerConnect->IsConnected())
d2533 1
a2533 1
	if (!g_eMuleApp.m_pdlgEmule->IsRunning())
d2564 3
a2566 3
	g_eMuleApp.m_pDownloadQueue->GetDownloadStats(myRateStats, myBigStats);
	if(g_eMuleApp.m_pGlobPrefs->GetGraphRatio() == 255) // 255 magic number for %
		adPlotDataMore[0] = (100*activeconnections/g_eMuleApp.m_pGlobPrefs->GetMaxConnections());
d2568 2
a2569 2
		adPlotDataMore[0] = (activeconnections/g_eMuleApp.m_pGlobPrefs->GetGraphRatio());
	adPlotDataMore[1] = g_eMuleApp.m_pUploadQueue->GetUploadQueueLength();
d2578 1
a2578 1
	g_eMuleApp.m_pWebServer->AddStatsLine(updown);
d2589 15
a2603 15
	m_DownloadOMeter.SetBackgroundColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(0));
	m_DownloadOMeter.SetGridColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(1));
	m_DownloadOMeter.SetPlotColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(4), 0);
	m_DownloadOMeter.SetPlotColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(3), 1);
	m_DownloadOMeter.SetPlotColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(2), 2);
	m_UploadOMeter.SetBackgroundColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(0));
	m_UploadOMeter.SetGridColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(1));
	m_UploadOMeter.SetPlotColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(7), 0);
	m_UploadOMeter.SetPlotColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(6), 1);
	m_UploadOMeter.SetPlotColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(5), 2);
	m_Statistics.SetBackgroundColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(0));
	m_Statistics.SetGridColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(1));
	m_Statistics.SetPlotColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(8), 0);
	m_Statistics.SetPlotColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(9), 1);
	m_Statistics.SetPlotColor(g_eMuleApp.m_pGlobPrefs->GetStatsColor(10), 2);
d2605 1
a2605 1
	if (oldRatio != g_eMuleApp.m_pGlobPrefs->GetGraphRatio())	//	Resize the general connections...
d2610 1
a2610 1
		if(oldRatio == 255 || g_eMuleApp.m_pGlobPrefs->GetGraphRatio() == 255)
d2613 2
a2614 2
			m_Statistics.ReSizePlot(0,(double)oldRatio/g_eMuleApp.m_pGlobPrefs->GetGraphRatio());
		oldRatio=g_eMuleApp.m_pGlobPrefs->GetGraphRatio();
@


1.153
log
@removed unneeded statistic items
@
text
@a353 1
// -khaos--+++> Completely rewritten ShowStatistics
d359 2
a360 2
	uint64	myBigStats[STATS_DL_DATA_INFO];
	uint16	myStats[STATS_DL_SOURCES_TYPE];
d414 1
a414 1
			g_eMuleApp.m_pDownloadQueue->GetDownloadStats(myStats, myBigStats);
d473 2
a474 2
				cbuffer.Format( GetResString( IDS_DWTOT_NUM ) , g_eMuleApp.m_pDownloadQueue->GetActiveFileCount());
				stattree.SetItemText( down_S[2] , cbuffer );
d476 2
a477 2
				cbuffer.Format( GetResString( IDS_STATS_ACTDL ) , myStats[1] );
				stattree.SetItemText( down_S[3] , cbuffer );
d479 2
a480 2
				cbuffer.Format( GetResString( IDS_DWTOT_TSD ) , CastItoXBytes(myBigStats[2]) );
				stattree.SetItemText( down_S[4] , cbuffer );
d482 2
a483 2
				cbuffer.Format( GetResString( IDS_DWTOT_TSAD ) , CastItoXBytes(myBigStats[5]) );
				stattree.SetItemText( down_S[5] , cbuffer );
d485 2
a486 2
				cbuffer.Format( GetResString( IDS_DWTOT_TSODAD ) , CastItoXBytes(myBigStats[9]) );
				stattree.SetItemText( down_S[6] , cbuffer );
d488 2
a489 2
				uint64 ui64BytesTransferred = (myBigStats[2]-myBigStats[3]);
				cbuffer.Format( GetResString( IDS_DWTOT_TCS ) , CastItoXBytes(ui64BytesTransferred), (myBigStats[2] != 0) ? (100*static_cast<double>(ui64BytesTransferred) / myBigStats[2]) : 0 );
d492 2
a493 2
				cbuffer.Format( GetResString( IDS_DWTOT_TSL ) , CastItoXBytes(myBigStats[3]), (myBigStats[2] != 0) ? (100*static_cast<double>(myBigStats[3]) / myBigStats[2]) : 0 );
				stattree.SetItemText( down_S[8] , cbuffer );
d495 2
a496 2
				cbuffer.Format( GetResString( IDS_DWTOT_TSN ) , CastItoXBytes(myBigStats[4]) );
				stattree.SetItemText( down_S[9] , cbuffer );
d498 2
a499 2
				cbuffer.Format( GetResString( IDS_DWTOT_TSNA ) , CastItoXBytes(myBigStats[6]) );
				stattree.SetItemText( down_S[10] , cbuffer );
d502 1
a502 1
				if(myBigStats[4] > t_FreeBytes)
d505 1
a505 1
					cbuffer.Format(GetResString(IDS_NEEDFREEDISKSPACE), strBuf2, CastItoXBytes(myBigStats[4] - t_FreeBytes));
d510 1
a510 1
					cbuffer.Format(GetResString(IDS_FREEDISKSPACEAFTER), strBuf2, CastItoXBytes(t_FreeBytes - myBigStats[4]));
d512 1
a512 1
				stattree.SetItemText( down_S[11] , cbuffer );
d514 2
a515 2
				cbuffer.Format( GetResString( IDS_STATS_FOUNDSRC ) , myStats[0] );
				stattree.SetItemText( down_S[12] , cbuffer );
d520 1
a520 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ONQUEUE), myStats[2]);
d522 1
a522 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_QUEUEFULL), myStats[3]);
d524 1
a524 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_HIGHQR), myStats[17]);
d526 1
a526 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_NONEEDEDPARTS), myStats[4]);
d528 1
a528 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ASKING), myStats[5]);
d530 1
a530 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_CONNECTING), myStats[7]);
d532 1
a532 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_CONNVIASERVER), myStats[8]);
d534 1
a534 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_WAITFILEREQ), myStats[9]);
d538 1
a538 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_NOCONNECTLOW2LOW), myStats[10]);
d540 1
a540 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ANOTHER_SERVER_LOWID), myStats[12]);
d542 1
a542 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_BANNED), myStats[13]);
d546 1
a546 1
				statGoodSessions =	g_eMuleApp.m_pGlobPrefs->GetDownS_SuccessfulSessions() + myStats[1]; // Add Active Downloads
d589 1
a589 1
				cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), myStats[14]);
d676 1
a676 1
				statGoodSessions = g_eMuleApp.m_pGlobPrefs->GetDownC_SuccessfulSessions() + myStats[1]; // Need to reset these from the session section.  Declared up there.
d716 1
a716 1
				cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), myStats[14] + g_eMuleApp.m_pGlobPrefs->GetPartsSavedByICH());
d1497 1
a1497 1
						g_eMuleApp.m_pDownloadQueue->GetDownloadStats(myStats, myBigStats);
d1555 1
a1555 1
						uint32	statGoodSessions = (uint32) (g_eMuleApp.m_pGlobPrefs->GetDownC_SuccessfulSessions() + myStats[1]) * avgModifier[mx];
d1581 1
a1581 1
						cbuffer.Format(GetResString(IDS_STATS_ICHSAVED), (uint32)((myStats[14] + g_eMuleApp.m_pGlobPrefs->GetPartsSavedByICH()) * avgModifier[mx]));
d2154 1
a2154 1
			for(int i = 0; i<STATS_DL_SOURCES_TYPE-7; i++) down_sources[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[12]);
d2540 3
a2542 4
	double m_dPlotDataUp[ 3 ];
	double m_dPlotDataDown[ 3 ], adPlotDataMore[3];
	uint64	myBigStats[STATS_DL_DATA_INFO];
	uint16	myRateStats[STATS_DL_SOURCES_TYPE];
d2545 2
a2546 2
	m_dPlotDataDown[2]=downloadrate;
	m_dPlotDataUp[2]=uploadrate;
d2548 2
a2549 2
	if (maxDown<downloadrate)
		maxDown=downloadrate;
d2552 2
a2553 2
	m_dPlotDataDown[0]=	GetAvgDownloadRate(AVG_SESSION);
	m_dPlotDataUp[0]=	GetAvgUploadRate(AVG_SESSION);
d2555 2
a2556 2
	m_dPlotDataDown[1]=	GetAvgDownloadRate(AVG_TIME);
	m_dPlotDataUp[1]=	GetAvgUploadRate(AVG_TIME);
d2570 1
a2570 1
	adPlotDataMore[2] = myRateStats[1];
@


1.152
log
@One more step to integrate eklmn's SSDQ.
@
text
@a530 2
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_RECHASHSET), myStats[6]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
a542 2
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_TIMEOUTED), myStats[16]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
a544 2
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_UNKNOWN), myStats[11]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
d2155 1
a2155 1
			for(int i = 0; i<STATS_DL_SOURCES_TYPE-3; i++) down_sources[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[12]);
@


1.151
log
@One more step to integrate eklmn's SSDQ.
@
text
@d537 1
a537 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_TOOMANYCONNS), myStats[9]);
@


1.150
log
@One more step to integrate eklmn's SSDQ.
@
text
@d541 1
a541 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_NOCONNECTLOW2LOW), myStats[18]);
d543 1
a543 3
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ANOTHER_SERVER_LOWID), myStats[10]);
					stattree.SetItemText(down_sources[i], cbuffer); i++;
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_PROBLEMATIC), myStats[12]);
@


1.149
log
@IDS_INFLST_USER_COMMUNITY renamed into IDS_COMMUNITY.
@
text
@d537 1
a537 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_TOOMANYCONNS) , myStats[9]);
d539 1
a539 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_NOCONNECTLOW2LOW) , myStats[10]);
d541 1
a541 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_ASKED4ANOTHERFILE), g_eMuleApp.m_pClientList->GetA4AFSourcesCount());
d543 1
a543 1
					cbuffer.Format(_T("%s: %u"), GetResString(IDS_STATS_NOUPLOAD), myStats[18]);
@


1.148
log
@IDS_TRANSFER_NOUN substitutes IDS_FSTAT_TRANSFER and IDS_INFLST_FILE_TRANSFER.
@
text
@d2125 1
a2125 1
				hup_scomb= stattree.InsertItem(GetResString(IDS_INFLST_USER_COMMUNITY),up_S[0]);		// Community Section
d2147 1
a2147 1
			hup_tcomb= stattree.InsertItem(GetResString(IDS_INFLST_USER_COMMUNITY),up_T[0]);			// Community Section
d2226 1
a2226 1
				time_aap_up_hd[x][3] = stattree.InsertItem(GetResString(IDS_INFLST_USER_COMMUNITY),time_aap_up[x][0]);		// Community Section
@


1.147
log
@IDS_SF_STATISTICS renamed into IDS_STATISTICS.
@
text
@d2108 1
a2108 1
	h_transfer = stattree.InsertItem(GetResString(IDS_FSTAT_TRANSFER),1,1);
@


1.146
log
@IDS_SERVERS substitutes IDS_FSTAT_SERVERS and IDS_TREE_GENERAL_SHOW_SERVER.
@
text
@d2040 1
a2040 1
		{ IDC_BNMENU, IDS_SF_STATISTICS }
@


1.145
log
@Some optimization.
@
text
@d2265 1
a2265 1
	h_servers = stattree.InsertItem(GetResString(IDS_FSTAT_SERVERS),4,4);											// Servers section
@


1.144
log
@Fixed saving and display of "Gained Due To Compression" global statistics.
@
text
@d1175 4
a1178 1
				int i = 0;
d1180 1
a1180 1
				cbuffer.Format(_T("%s: %.2f ") + GetResString(IDS_KBYTESEC), GetResString(IDS_ST_UPLOAD), rateUp);			stattree.SetItemText(conn_su[i], cbuffer); i++;
d1182 1
a1182 1
				cbuffer.Format(GetResString(IDS_STATS_AVGUL),GetAvgUploadRate(AVG_SESSION));	stattree.SetItemText(conn_su[i], cbuffer); i++;
d1184 1
a1184 1
				cbuffer.Format(_T("%s: %.2f ") + GetResString(IDS_KBYTESEC), GetResString(IDS_STATS_MAXUL), maxUp);			stattree.SetItemText(conn_su[i], cbuffer); i++;
d1186 3
a1188 3
				double myAverageUpRate = GetAvgUploadRate(AVG_SESSION);
				if (myAverageUpRate>maxUpavg) maxUpavg = myAverageUpRate;
				cbuffer.Format(_T("%s: %.2f ") + GetResString(IDS_KBYTESEC), GetResString(IDS_STATS_MAXAVGUL), maxUpavg);	stattree.SetItemText(conn_su[i], cbuffer); i++;
d1193 3
a1195 1
				int i = 0;
d1197 1
a1197 1
				cbuffer.Format(_T("%s: %.2f ") + GetResString(IDS_KBYTESEC), GetResString(IDS_ST_DOWNLOAD), rateDown);		stattree.SetItemText(conn_sd[i], cbuffer); i++;
d1199 1
a1199 1
				cbuffer.Format(GetResString(IDS_STATS_AVGDL),GetAvgDownloadRate(AVG_SESSION));	stattree.SetItemText(conn_sd[i], cbuffer); i++;
d1201 1
a1201 1
				cbuffer.Format(GetResString(IDS_STATS_MAXDL),maxDown);							stattree.SetItemText(conn_sd[i], cbuffer); i++;
d1203 2
a1204 2
				double myAverageDownRate = GetAvgDownloadRate(AVG_SESSION);
				if (myAverageDownRate>maxDownavg) maxDownavg = myAverageDownRate;
@


1.143
log
@Corrected calculation of corruption loss size (subtraction of actually saved data was required);
Corrected calculation of lost due to corruption in Projected Averages statistics
(only current session statistics was used).
@
text
@d592 1
a592 1
				cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes(myBigStats[1]));
d719 1
a719 1
				cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes(myBigStats[8] + g_eMuleApp.m_pGlobPrefs->GetSavedFromCompression()));
d1579 1
a1579 1
						cbuffer.Format(GetResString(IDS_STATS_GAINCOMP), CastItoXBytes((uint64)(myBigStats[1] + g_eMuleApp.m_pGlobPrefs->GetSavedFromCompression()) * avgModifier[mx]));
@


1.142
log
@sorry. i forgot one line during file comparison :)
@
text
@d592 2
a593 2
				cbuffer.Format( GetResString( IDS_STATS_GAINCOMP ) , CastItoXBytes( myBigStats[1] ) );
				stattree.SetItemText( down_S[14] , cbuffer );
d595 2
a596 2
				cbuffer.Format( GetResString( IDS_STATS_LOSTCORRUPT ) , CastItoXBytes( myBigStats[0] ) );
				stattree.SetItemText( down_S[15] , cbuffer );
d598 2
a599 2
				cbuffer.Format( GetResString( IDS_STATS_ICHSAVED ) , myStats[14] );
				stattree.SetItemText( down_S[16] , cbuffer );
d719 2
a720 2
				cbuffer.Format( GetResString( IDS_STATS_GAINCOMP ) , CastItoXBytes( myBigStats[8] + g_eMuleApp.m_pGlobPrefs->GetSavedFromCompression() ) );
				stattree.SetItemText( down_T[3] , cbuffer );
d722 2
a723 2
				cbuffer.Format( GetResString( IDS_STATS_LOSTCORRUPT ) , CastItoXBytes( myBigStats[7] + g_eMuleApp.m_pGlobPrefs->GetLostFromCorruption() ) );
				stattree.SetItemText( down_T[4] , cbuffer );
d725 2
a726 2
				cbuffer.Format( GetResString( IDS_STATS_ICHSAVED ) , myStats[14] + g_eMuleApp.m_pGlobPrefs->GetPartsSavedByICH() );
				stattree.SetItemText( down_T[5] , cbuffer );
d1579 2
a1580 2
						cbuffer.Format( GetResString( IDS_STATS_GAINCOMP ) , CastItoXBytes( (uint64) (myBigStats[1] + g_eMuleApp.m_pGlobPrefs->GetSavedFromCompression()) * avgModifier[mx] ) );
						stattree.SetItemText( time_aap_down[mx][3] , cbuffer );
d1582 2
a1583 2
						cbuffer.Format( GetResString( IDS_STATS_LOSTCORRUPT ) , CastItoXBytes( (uint64) (myBigStats[0] + g_eMuleApp.m_pGlobPrefs->GetLostFromCorruption()) * avgModifier[mx] ) );
						stattree.SetItemText( time_aap_down[mx][4] , cbuffer );
d1585 2
a1586 2
						cbuffer.Format( GetResString( IDS_STATS_ICHSAVED ) , (uint32) ((myStats[14] + g_eMuleApp.m_pGlobPrefs->GetPartsSavedByICH()) * avgModifier[mx]) );
						stattree.SetItemText( time_aap_down[mx][5] , cbuffer );
@


1.141
log
@added number of download failed sessions due to NNS sources to the statistic
@
text
@d2160 1
@


1.140
log
@Reduced number of GDI objects in Statistics window;
Removed several identical user icons (one is enough); Member renaming.
@
text
@d561 1
a561 1
					// Set Successful Download Sessions and Average Downloaded Per Session
d572 1
a572 1
					// Set Failed Download Sessions (Avoid Division)
d578 10
a587 1
					// Set Average Download Time
@


1.139
log
@reimplemented "connection in 5 sec" condition, now it does not use average
@
text
@d53 4
a56 4
        // v- eklmn: bugfix(06): resource cleanup in statistic
        if (imagelistStatTree) imagelistStatTree.DeleteImageList();
        if (stattree) stattree.DeleteAllItems();
        // ^- eklmn: bugfix(06): resource cleanup in statistic
d80 21
d104 1
a104 1
	EnableWindow( FALSE );
d108 3
a110 20
	// Setup image list For Tree (2-18-03)
	imagelistStatTree.Create(16, 16, g_eMuleApp.m_iDfltImageListColorFlags | ILC_MASK, 12, 0);
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_TVI_GENERIC));		// Dots & Arrow (Default icon for stats)
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_UP1DOWN1));			// Transfer
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_CONNECTEDHIGH));		// Connection
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_USER));				// Clients
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_PREF_SERVER));		// Server
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_SHAREDFILES));		// Shared Files
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_UPLOAD));				// Transfer > Upload
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_DIRECTDOWNLOAD));		// Transfer > Download
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_SMALLSTATISTICS));	// Session Sections
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_TVI_CUMULATIVE));		// Cumulative Sections
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_PREF_TWEAK));			// Records
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_PREF_CONNECTION));	// Connection > General
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_PREF_SCHEDULER));		// Time Section
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_PREF_STATISTICS));	// Time > Averages and Projections
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_TVI_DAY));			// Time > Averages and Projections > Daily
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_TVI_MONTH));			// Time > Averages and Projections > Monthly
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_TVI_YEAR));			// Time > Averages and Projections > Yearly
	stattree.SetImageList(&imagelistStatTree, TVSIL_NORMAL);
d271 1
a271 1
void CStatisticsDlg::UpdateConnectionStats (double uploadrate, double downloadrate)
@


1.138
log
@obvious copy paste error
@
text
@a2518 22
double CStatisticsDlg::GetMaxConPerFiveModifier()
{
//	This is a alpha test.. Will clean up for b version.
	double		dblSpikeSize = 0;

#ifdef OLD_SOCKETS_ENABLED
	dblSpikeSize = g_eMuleApp.m_pListenSocket->GetNumOpenSockets() - averageconnections;
#endif //OLD_SOCKETS_ENABLED
	if (dblSpikeSize < 1.0)
		return 1;

//	MOREVIT - Ok, why not 2.5 * maxPer5 instead of this?
	double		dblSpikeTolerance = 25.0*static_cast<double>(g_eMuleApp.m_pGlobPrefs->GetMaxConPerFive())/10.0;

	if (dblSpikeSize > dblSpikeTolerance)
		return 0;

	double		dblModifier = (1-(dblSpikeSize/dblSpikeTolerance));

	return dblModifier;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@


1.137
log
@Removed suspicious OnShowWindow processing.
@
text
@d133 1
a133 1
	sDlMeter[1].cy = 100 * rect.bottom / rClient.Width();
@


1.136
log
@Enable client subtree for Shareaza and lphant.
@
text
@a69 1
	ON_WM_SHOWWINDOW()
d2388 1
a2388 1
	if ( (cx>0 && cy>0) && (cx!=m_oldcx && cy!=m_oldcy) )
a2395 4
void CStatisticsDlg::OnShowWindow(BOOL bShow,UINT nStatus)
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@


1.135
log
@Unicode preparations; Improved string processing.
@
text
@d1783 2
@


1.134
log
@Type of statistics values Max. Shared File Size and Max. Shared Average File Size
was changed from 64-bit into 32-bit to speed up processing as max. supported ed2k file size fits 32-bit;
Improved string processing.
@
text
@d374 1
a374 1
				cbuffer.Format("%s %.2f : 1",GetResString(IDS_STATS_SRATIO),static_cast<double>(g_eMuleApp.stat_sessionSentBytes)/g_eMuleApp.stat_sessionReceivedBytes);
d379 1
a379 1
				cbuffer.Format("%s 1 : %.2f",GetResString(IDS_STATS_SRATIO),static_cast<double>(g_eMuleApp.stat_sessionReceivedBytes)/g_eMuleApp.stat_sessionSentBytes);
d385 1
a385 1
			cbuffer.Format("%s %s", GetResString(IDS_STATS_SRATIO), GetResString(IDS_FSTAT_WAITING));
d393 1
a393 1
				cbuffer.Format("%s %.2f : 1",GetResString(IDS_STATS_CRATIO),static_cast<double>(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded())/(g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()));
d398 1
a398 1
				cbuffer.Format("%s 1 : %.2f",GetResString(IDS_STATS_CRATIO),static_cast<double>(g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded())/(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()));
d404 1
a404 1
			cbuffer.Format("%s %s", GetResString(IDS_STATS_CRATIO), GetResString(IDS_FSTAT_WAITING));
d417 2
a418 2
				cbuffer.Format( "%s: %s", GetResString( IDS_STATS_DDATA ) , CastItoXBytes( g_eMuleApp.stat_sessionReceivedBytes ) );
				stattree.SetItemText( down_S[0] , cbuffer );
d440 2
a441 2
								cbuffer.Format( "%s: %s (%.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
								stattree.SetItemText( down_scb[i] , cbuffer );
d456 2
a457 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
						stattree.SetItemText( down_spb[i] , cbuffer ); i++;
d463 2
a464 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTOTHER) , CastItoXBytes( PortDataOther ) , percentPortTransferred);
						stattree.SetItemText( down_spb[i] , cbuffer ); i++;
d468 2
a469 2
				cbuffer.Format( "%s: %u" , GetResString( IDS_STATS_COMPDL ) , g_eMuleApp.m_pGlobPrefs->GetDownSessionCompletedFiles() );
				stattree.SetItemText( down_S[1] , cbuffer );
d518 32
a549 32
					cbuffer.Format( "%s: %u" , GetResString( IDS_ONQUEUE ) , myStats[2] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString( IDS_QUEUEFULL ) , myStats[3] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString( IDS_STATS_HIGHQR ) , myStats[17] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString( IDS_NONEEDEDPARTS ) , myStats[4] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString( IDS_ASKING ) , myStats[5] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString( IDS_RECHASHSET ) , myStats[6] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString( IDS_CONNECTING ) , myStats[7] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString(IDS_CONNVIASERVER) , myStats[8] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString(IDS_TOOMANYCONNS) , myStats[9] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString(IDS_NOCONNECTLOW2LOW) , myStats[10] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString(IDS_ASKED4ANOTHERFILE) , g_eMuleApp.m_pClientList->GetA4AFSourcesCount());
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString(IDS_STATS_NOUPLOAD) , myStats[18] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString(IDS_STATS_PROBLEMATIC) , myStats[12] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString(IDS_STATS_TIMEOUTED) , myStats[16] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString(IDS_BANNED) , myStats[13] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
					cbuffer.Format( "%s: %u" , GetResString(IDS_UNKNOWN) , myStats[11] );
					stattree.SetItemText( down_sources[i] , cbuffer ); i++;
d554 2
a555 2
				cbuffer.Format( "%s: %u" , GetResString(IDS_STATS_DLSES) , statGoodSessions + statBadSessions );
				stattree.SetItemText( down_S[13] , cbuffer );
d563 1
a563 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATADLSES) , CastItoXBytes( (uint64) g_eMuleApp.stat_sessionReceivedBytes / statGoodSessions ) );
d565 4
a568 4
					else cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATADLSES) , CastItoXBytes(0) );
					stattree.SetItemText( down_ssessions[2] , cbuffer ); // Set Avg DL/Session
					cbuffer.Format( "%s: %u (%.1f%%)" , GetResString(IDS_STATS_SDLSES) , statGoodSessions , percentSessions );
					stattree.SetItemText( down_ssessions[0] , cbuffer ); // Set Succ Sessions
d573 2
a574 2
					cbuffer.Format( "%s: %u (%.1f%%)" , GetResString(IDS_STATS_FDLSES) , statBadSessions , percentSessions );
					stattree.SetItemText( down_ssessions[1] , cbuffer );
d576 1
a576 1
					cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDLTIME), CastSecondsToLngHM(g_eMuleApp.m_pGlobPrefs->GetDownS_AvgTime()));
d618 1
a618 1
				cbuffer.Format("%s: %s",GetResString(IDS_STATS_DDATA),CastItoXBytes( g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded() ));
d642 1
a642 1
								cbuffer.Format( "%s: %s (%.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
d658 2
a659 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
						stattree.SetItemText( down_tpb[i] , cbuffer ); i++;
d665 1
a665 1
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTOTHER), CastItoXBytes( PortDataOther ) , percentPortTransferred);
d670 1
a670 1
				cbuffer.Format("%s: %u", GetResString(IDS_STATS_COMPDL), g_eMuleApp.m_pGlobPrefs->GetDownCompletedFiles() );
d675 1
a675 1
				cbuffer.Format("%s: %u", GetResString(IDS_STATS_DLSES), statGoodSessions+statBadSessions );
d683 1
a683 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATADLSES) , CastItoXBytes( (uint64) (g_eMuleApp.stat_sessionReceivedBytes + g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()) / statGoodSessions ) );
d688 1
a688 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATADLSES) , CastItoXBytes(0) );
d690 3
a692 3
					stattree.SetItemText( down_tsessions[2] , cbuffer ); // Set Avg DL/Session
					cbuffer.Format( "%s: %u (%.1f%%)", GetResString(IDS_STATS_SDLSES) , statGoodSessions , percentSessions );
					stattree.SetItemText( down_tsessions[0] , cbuffer ); // Set Successful Sessions
d697 2
a698 2
					cbuffer.Format( "%s: %u (%.1f%%)" , GetResString(IDS_STATS_FDLSES) , statBadSessions , percentSessions);
					stattree.SetItemText( down_tsessions[1] , cbuffer );
d703 1
a703 1
					cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDLTIME), CastSecondsToLngHM(avgDownTime));
d751 1
a751 1
				cbuffer.Format("%s: %s",GetResString(IDS_STATS_UDATA),CastItoXBytes(g_eMuleApp.stat_sessionSentBytes));
d775 2
a776 2
								cbuffer.Format( "%s: %s (%.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(UpDataClient) , percentClientTransferred);
								stattree.SetItemText( up_scb[i] , cbuffer );
d791 2
a792 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
						stattree.SetItemText( up_spb[i] , cbuffer ); i++;
d798 2
a799 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTOTHER) , CastItoXBytes( PortDataOther ) , percentPortTransferred);
						stattree.SetItemText( up_spb[i] , cbuffer ); i++;
d812 2
a813 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_DSFILE) , CastItoXBytes( DataSourceFile ) , percentFileTransferred);
						stattree.SetItemText( up_ssb[i] , cbuffer ); i++;
d819 2
a820 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_DSPF) , CastItoXBytes( DataSourcePF ) , percentFileTransferred);
						stattree.SetItemText( up_ssb[i] , cbuffer ); i++;
d833 2
a834 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_YES) , CastItoXBytes( DataCommunity ) , percentCommunityTransferred);
						stattree.SetItemText( up_scomb[i] , cbuffer ); i++;
d840 2
a841 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_NO) , CastItoXBytes( DataNoCommunity ) , percentCommunityTransferred);
						stattree.SetItemText( up_scomb[i] , cbuffer ); i++;
d850 2
a851 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_PRIORELEASE) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
						stattree.SetItemText( hULPrioDataItems[i] , cbuffer ); i++;
d854 2
a855 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_PRIOHIGH) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
						stattree.SetItemText( hULPrioDataItems[i] , cbuffer ); i++;
d858 2
a859 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_PRIONORMAL) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
						stattree.SetItemText( hULPrioDataItems[i] , cbuffer ); i++;
d862 2
a863 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_PRIOLOW) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
						stattree.SetItemText( hULPrioDataItems[i] , cbuffer ); i++;
d866 2
a867 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_PRIOVERYLOW) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
						stattree.SetItemText( hULPrioDataItems[i] , cbuffer ); i++;
d880 1
a880 1
				cbuffer.Format("%s: %u", GetResString(IDS_STATS_ULSES), statGoodSessions + statBadSessions);
d889 1
a889 1
						cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) g_eMuleApp.stat_sessionSentBytes / (statGoodSessions+g_eMuleApp.m_pUploadQueue->GetUploadQueueLength())) );
d894 1
a894 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATAULSES) , GetResString(IDS_FSTAT_WAITING) );
d898 1
a898 1
					cbuffer.Format("%s: %u (%.1f%%)",GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,GetPercent(statGoodSessions,statTotalSessions));
d901 1
a901 1
					cbuffer.Format("%s: %u (%.1f%%)",GetResString(IDS_STATS_SUCCUP_FC),g_eMuleApp.m_pUploadQueue->GetULFullChunkCount(),GetPercent(g_eMuleApp.m_pUploadQueue->GetULFullChunkCount(),statTotalSessions));
d903 1
a903 1
					cbuffer.Format("%s: %u (%.1f%%)",GetResString(IDS_STATS_SUCCUP_PC),g_eMuleApp.m_pUploadQueue->GetULPartChunkCount(),GetPercent(g_eMuleApp.m_pUploadQueue->GetULPartChunkCount(),statTotalSessions));
d908 1
a908 1
						cbuffer.Format("%s: %u (%.1f%%)",GetUpEndReason((EnumEndTransferSession)i),
d915 1
a915 1
					cbuffer.Format("%s: %u (%.1f%%)",GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,GetPercent(statBadSessions,statTotalSessions));
d920 1
a920 1
						cbuffer.Format("%s: %u (%.1f%%)",GetUpEndReason((EnumEndTransferSession)i),
d959 1
a959 1
				cbuffer.Format("%s: %s",GetResString(IDS_STATS_UDATA),CastItoXBytes( g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()));
d984 2
a985 2
								cbuffer.Format( "%s: %s (%.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(UpDataClient) , percentClientTransferred);
								stattree.SetItemText( up_tcb[i] , cbuffer );
d1000 2
a1001 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
						stattree.SetItemText( up_tpb[i] , cbuffer ); i++;
d1007 2
a1008 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTOTHER) , CastItoXBytes( PortDataOther ) , percentPortTransferred);
						stattree.SetItemText( up_tpb[i] , cbuffer ); i++;
d1021 2
a1022 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_DSFILE) , CastItoXBytes( DataSourceFile ) , percentFileTransferred);
						stattree.SetItemText( up_tsb[i] , cbuffer ); i++;
d1028 2
a1029 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_DSPF) , CastItoXBytes( DataSourcePF ) , percentFileTransferred);
						stattree.SetItemText( up_tsb[i] , cbuffer ); i++;
d1042 2
a1043 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_YES) , CastItoXBytes( DataCommunity ) , percentCommunityTransferred);
						stattree.SetItemText( up_tcomb[i] , cbuffer ); i++;
d1049 2
a1050 2
						cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_NO) , CastItoXBytes( DataNoCommunity ) , percentCommunityTransferred);
						stattree.SetItemText( up_tcomb[i] , cbuffer ); i++;
d1056 1
a1056 1
				cbuffer.Format("%s: %u", GetResString(IDS_STATS_ULSES), statGoodSessions + statBadSessions);
d1064 1
a1064 1
						cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) (g_eMuleApp.stat_sessionSentBytes + g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()) / statGoodSessions) );
d1069 1
a1069 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATAULSES) , GetResString(IDS_FSTAT_WAITING) );
d1073 1
a1073 1
					cbuffer.Format("%s: %u (%.1f%%)",GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,percentSessions);
d1080 1
a1080 1
					cbuffer.Format("%s: %u (%.1f%%)",GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,percentSessions);
d1135 1
a1135 1
				cbuffer.Format("%s: %i",GetResString(IDS_SF_ACTIVECON),activeconnections);
d1138 1
a1138 1
				cbuffer.Format("%s: %i",GetResString(IDS_SF_AVGCON),(int)averageconnections);
d1141 1
a1141 1
				cbuffer.Format("%s: %i",GetResString(IDS_SF_PEAKCON),peakconnections);
d1148 1
a1148 1
					cbuffer.Format("%s: %i : %s",GetResString(IDS_SF_MAXCONLIMITREACHED),m_itemp,CTime::GetCurrentTime().Format(_T("%c")));
d1154 1
a1154 1
					cbuffer.Format("%s: %i",GetResString(IDS_SF_MAXCONLIMITREACHED),m_itemp);
d1165 1
a1165 1
				cbuffer.Format("%s: %.2f " + GetResString(IDS_KBYTESEC), GetResString(IDS_ST_UPLOAD), rateUp);			stattree.SetItemText(conn_su[i], cbuffer); i++;
d1169 1
a1169 1
				cbuffer.Format("%s: %.2f " + GetResString(IDS_KBYTESEC), GetResString(IDS_STATS_MAXUL), maxUp);			stattree.SetItemText(conn_su[i], cbuffer); i++;
d1173 1
a1173 1
				cbuffer.Format("%s: %.2f " + GetResString(IDS_KBYTESEC), GetResString(IDS_STATS_MAXAVGUL), maxUpavg);	stattree.SetItemText(conn_su[i], cbuffer); i++;
d1180 1
a1180 1
				cbuffer.Format("%s: %.2f " + GetResString(IDS_KBYTESEC), GetResString(IDS_ST_DOWNLOAD), rateDown);		stattree.SetItemText(conn_sd[i], cbuffer); i++;
d1205 1
a1205 1
				cbuffer.Format("%s: %i", GetResString(IDS_SF_AVGCON), (int) (activeconnections + g_eMuleApp.m_pGlobPrefs->GetConnAvgConnections()) / 2 );
d1208 1
a1208 1
				cbuffer.Format("%s: %i", GetResString(IDS_SF_PEAKCON), g_eMuleApp.m_pGlobPrefs->GetConnPeakConnections());
d1212 1
a1212 1
				cbuffer.Format("%s: %i", GetResString(IDS_SF_MAXCONLIMITREACHED), g_eMuleApp.m_pListenSocket->GetMaxConnectionsReachedCount() + g_eMuleApp.m_pGlobPrefs->GetConnMaxConnLimitReached());
d1224 1
a1224 1
				cbuffer.Format("%s: %.2f " + GetResString(IDS_KBYTESEC), GetResString(IDS_STATS_MAXUL), cum_UL_maximal);
d1227 1
a1227 1
				cbuffer.Format("%s: %.2f " + GetResString(IDS_KBYTESEC), GetResString(IDS_STATS_MAXAVGUL), cum_UL_max_average);
d1276 1
a1276 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_RUNTIME), CastSecondsToLngHM(sessionRunTime));
d1280 1
a1280 1
			cbuffer.Format("%s: %s (%.1f%%)", GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime()), (double) (100 * GetTransferTime()) / sessionRunTime);
d1286 1
a1286 1
				cbuffer.Format("%s: %s (%.1f%%)", GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime()), (double) (100 * GetUploadTime()) / sessionRunTime);
d1289 1
a1289 1
				cbuffer.Format("%s: %s (%.1f%%)", GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime()), (double) (100 * GetDownloadTime()) / sessionRunTime);
d1294 1
a1294 1
			cbuffer.Format("%s: %s (%.1f%%)", GetResString(IDS_STATS_CURRSRVDUR), CastSecondsToLngHM(time_thisServerDuration), (double) (100 * time_thisServerDuration) / sessionRunTime);
d1297 1
a1297 1
			cbuffer.Format("%s: %s (%.1f%%)", GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration()), (double) (100 * GetServerDuration()) / sessionRunTime);
d1306 1
a1306 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_RUNTIME), CastSecondsToLngHM(totalRunTime));
d1310 1
a1310 1
			cbuffer.Format("%s: %s (%.1f%%)", GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime() + g_eMuleApp.m_pGlobPrefs->GetConnTransferTime()), (double) (100 * (GetTransferTime() + g_eMuleApp.m_pGlobPrefs->GetConnTransferTime())) / totalRunTime);
d1316 1
a1316 1
				cbuffer.Format("%s: %s (%.1f%%)", GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime() + g_eMuleApp.m_pGlobPrefs->GetConnUploadTime()), (double) (100 * (GetUploadTime() + g_eMuleApp.m_pGlobPrefs->GetConnUploadTime())) / totalRunTime);
d1319 1
a1319 1
				cbuffer.Format("%s: %s (%.1f%%)", GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime() + g_eMuleApp.m_pGlobPrefs->GetConnDownloadTime()), (double) (100 * (GetDownloadTime() + g_eMuleApp.m_pGlobPrefs->GetConnDownloadTime())) / totalRunTime);
d1324 1
a1324 1
			cbuffer.Format("%s: %s (%.1f%%)", GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration() + g_eMuleApp.m_pGlobPrefs->GetConnServerDuration()), (double) (100 * (GetServerDuration() + g_eMuleApp.m_pGlobPrefs->GetConnServerDuration())) / totalRunTime);
d1345 1
a1345 1
						cbuffer.Format("%s: %s",GetResString(IDS_STATS_UDATA),CastItoXBytes( (uint64)(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded())*avgModifier[mx]));
d1370 1
a1370 1
										cbuffer.Format( "%s: %s (%.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(UpDataClient) , percentClientTransferred);
d1386 1
a1386 1
								cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
d1393 1
a1393 1
								cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTOTHER) , CastItoXBytes( PortDataOther ) , percentPortTransferred);
d1407 1
a1407 1
								cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_DSFILE) , CastItoXBytes( DataSourceFile ) , percentFileTransferred);
d1414 1
a1414 1
								cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_DSPF) , CastItoXBytes( DataSourcePF ) , percentFileTransferred);
d1428 1
a1428 1
								cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_YES) , CastItoXBytes( DataCommunity ) , percentCommunityTransferred);
d1435 1
a1435 1
								cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_NO) , CastItoXBytes( DataNoCommunity ) , percentCommunityTransferred);
d1443 1
a1443 1
						cbuffer.Format("%s: %u", GetResString(IDS_STATS_ULSES), statGoodSessions + statBadSessions);
d1451 1
a1451 1
							cbuffer.Format("%s: %u (%.1f%%)",GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,percentSessions);
d1458 1
a1458 1
							cbuffer.Format("%s: %u (%.1f%%)",GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,percentSessions);
d1491 1
a1491 1
						cbuffer.Format("%s: %s",GetResString(IDS_STATS_DDATA),CastItoXBytes( (uint64) (g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()) * avgModifier[mx] ));
d1516 1
a1516 1
										cbuffer.Format( "%s: %s (%.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
d1532 2
a1533 2
								cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
								stattree.SetItemText( time_aap_down_dp[mx][i] , cbuffer ); i++;
d1539 2
a1540 2
								cbuffer.Format( "%s: %s (%.1f%%)" , GetResString(IDS_STATS_PRTOTHER), CastItoXBytes( PortDataOther ) , percentPortTransferred);
								stattree.SetItemText( time_aap_down_dp[mx][i] , cbuffer ); i++;
d1544 1
a1544 1
						cbuffer.Format("%s: %I64u", GetResString(IDS_STATS_COMPDL), (uint64) (g_eMuleApp.m_pGlobPrefs->GetDownCompletedFiles() * avgModifier[mx]) );
d1550 1
a1550 1
						cbuffer.Format("%s: %u", GetResString(IDS_STATS_DLSES), statGoodSessions+statBadSessions );
d1557 1
a1557 1
							cbuffer.Format( "%s: %u (%.1f%%)", GetResString(IDS_STATS_SDLSES) , statGoodSessions , percentSessions );
d1563 1
a1563 1
							cbuffer.Format( "%s: %u (%.1f%%)" , GetResString(IDS_STATS_FDLSES) , statBadSessions , percentSessions);
d1624 1
a1624 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_ONLISTCLIENTS), 0);
d1627 1
a1627 1
			cbuffer.Format("%s: %u (0%%)", GetResString(IDS_STATS_SUI), myStats[14]);
d1630 1
a1630 1
			cbuffer.Format("%s: %u (0%%)", GetResString(IDS_STATS_NONSUI), myStats[15]);
d1633 1
a1633 1
			cbuffer.Format("%s: %u (0%%)", GetResString(IDS_LOWID), myStats[16]);
d1638 1
a1638 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_ONLISTCLIENTS), totalclient);
d1641 1
a1641 1
			cbuffer.Format("%s: %u (%.1f%%)", GetResString(IDS_STATS_SUI), myStats[14], static_cast<double>(100*myStats[14])/totalclient);
d1644 1
a1644 1
			cbuffer.Format("%s: %u (%.1f%%)", GetResString(IDS_STATS_NONSUI), myStats[15], static_cast<double>(100*myStats[15])/totalclient);
d1647 1
a1647 1
			cbuffer.Format("%s: %u (%.1f%%)", GetResString(IDS_LOWID), myStats[16], static_cast<double>(100*myStats[16])/totalclient);
d1657 1
a1657 1
				cbuffer.Format("%s: %u (%.1f%%)", GetResString(IDS_STATS_CLIENT_MODS), totalMODs,100.0*totalMODs/dwTotalMules);
d1659 1
a1659 1
				cbuffer.Format("%s: %u (0.0%%)", GetResString(IDS_STATS_CLIENT_MODS), totalMODs);
d1709 1
a1709 1
								cbuffer.Format("%s: %u", strBuf2, dwLastTop);
d1721 1
a1721 1
						cbuffer.Format("%s: %u (%.1f%%)", GetMODType(dwModIdx), m_nMODs[dwModIdx], 100.0*m_nMODs[dwModIdx]/dwTotalMules);
d1727 1
a1727 1
			cbuffer.Format("%s: %u (%.1f%%)", GetResString(IDS_STATS_CLIENT_MODS),
d1755 1
a1755 1
						cbuffer.Format("%s: %u", strBuf2, dwLastTop);
d1772 1
a1772 1
					cbuffer.Format("%s: %u (%.1f%%)",GetClientNameString((EnumClientTypes)j), clients, percentClients);
d1842 1
a1842 1
									cbuffer.Format("%s: %u (%.1f%%)",GetResString(IDS_STATS_OTHERS),(clients-SubTotal),100.0*(clients-SubTotal)/clients);
d1857 2
a1858 2
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_PROBLEMATIC), myStats[17]);stattree.SetItemText(cligen[3], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_BANNED), g_eMuleApp.m_pUploadQueue->GetBanCount()); stattree.SetItemText(cligen[4], cbuffer);
d1861 4
a1864 4
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_FILTEREDCLIENTS),g_eMuleApp.m_lTotalFiltered); stattree.SetItemText(hFiltered, cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_FILTEREDCLIENTS_IN),g_eMuleApp.m_lIncomingFiltered); stattree.SetItemText(hFilteredItems[0], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_FILTEREDCLIENTS_OUT),g_eMuleApp.m_lOutgoingFiltered); stattree.SetItemText(hFilteredItems[1], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_FILTEREDCLIENTS_SX),g_eMuleApp.m_lSXFiltered); stattree.SetItemText(hFilteredItems[2], cbuffer);
d1866 1
a1866 1
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_CLIENTS), g_eMuleApp.m_lTotalNumUnfairClients); stattree.SetItemText(cligen[5], cbuffer);
d1869 5
a1873 5
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_ACTIONS), g_eMuleApp.m_lTotalNumUnfairActions); stattree.SetItemText(hUnfairAction, cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_ACTION_MH),g_eMuleApp.m_lTotalNumUseMyHashActions); stattree.SetItemText(hUnfairActionItems[0], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_ACTION_HC),g_eMuleApp.m_lTotalNumHashChangeActions); stattree.SetItemText(hUnfairActionItems[1], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_ACTION_BN),g_eMuleApp.m_lTotalNumStolenNameActions); stattree.SetItemText(hUnfairActionItems[2], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_ACTION_LT),g_eMuleApp.m_lTotalNumLeecherTypeActions); stattree.SetItemText(hUnfairActionItems[3], cbuffer);
d1902 1
a1902 1
							cbuffer.Format("%s: %u (%.1f%%)", g_eMuleApp.m_pIP2Country->GetCountryNameByIndex(iTopIdx), dwLastTop, static_cast<double>(100*dwLastTop)/totalclient);
d1908 1
a1908 1
					cbuffer.Format("%s: %u", GetResString(IDS_COUNTRIES), dwCountryTotal);
d1911 1
a1911 1
					cbuffer.Format("%s: <%s>", GetResString(IDS_COUNTRIES), GetResString(IDS_FSTAT_WAITING));
d1914 1
a1914 1
				cbuffer.Format("%s: <%s>", GetResString(IDS_COUNTRIES), GetResString(IDS_DISABLED));
d2090 1
a2090 1
		buffer.Format("%s %s",GetResString(IDS_STATS_SRATIO),GetResString(IDS_FSTAT_WAITING));			// Make It Pretty
d2092 1
a2092 1
		buffer.Format("%s %s",GetResString(IDS_STATS_CRATIO),GetResString(IDS_FSTAT_WAITING));			// Make It Pretty
a2589 1
	// m_pWebServer
d2706 1
a2706 1
	switch (index)
d2708 14
a2721 17
		case ETS_TIMEOUT:
			return GetResString(IDS_STATS_UL_SESSION_T);
		case ETS_DISCONNECT:
			return GetResString(IDS_STATS_UL_SESSION_D);
		case ETS_BAN:
			return GetResString(IDS_STATS_UL_SESSION_B);
		case ETS_CANCELED:
			return GetResString(IDS_STATS_UL_SESSION_C);
		case ETS_END_OF_DOWNLOAD:
			return GetResString(IDS_STATS_UL_SESSION_ED);
		case ETS_FILE_ERROR:
			return GetResString(IDS_STATS_UL_SESSION_FE);
		case ETS_BLOCKED_CHUNK:
			return GetResString(IDS_STATS_UL_SESSION_BC);
		default:
			return "";
	}
@


1.133
log
@Server LowID users statistics.
@
text
@d356 1
a356 1
	CString	cbuffer;
d502 2
a503 3
					CString	cbuffer2;
					cbuffer2.Format( GetResString( IDS_DWTOT_FS ) , CastItoXBytes(t_FreeBytes) );
					cbuffer.Format( GetResString( IDS_NEEDFREEDISKSPACE ) , cbuffer2, CastItoXBytes(myBigStats[4] - t_FreeBytes) );
d507 2
a508 3
					CString	cbuffer2;
					cbuffer2.Format( GetResString( IDS_DWTOT_FS ) , CastItoXBytes(t_FreeBytes) );
					cbuffer.Format( GetResString( IDS_FREEDISKSPACEAFTER ) , cbuffer2, CastItoXBytes(t_FreeBytes - myBigStats[4]) );
a1669 1
				CString	strMODTypeName;
d1691 1
a1691 1
						strMODTypeName = g_eMuleApp.m_pClientList->GetMODType(top_pos);
d1694 1
a1694 1
							if ((dwModIdx == (STAT_CLIENT_MOD_NODES - 1)) || (strMODTypeName.Find(GetMODType(dwModIdx)) != -1))
d1709 1
a1709 1
								cbuffer.Format("%s: %u", strMODTypeName, dwLastTop);
d1754 2
a1755 1
						cbuffer.Format("%s: %u", g_eMuleApp.m_pClientList->GetMODType(top_pos), dwLastTop);
d1942 1
a1942 1
		cbuffer.Format("%s: %i",GetResString(IDS_SF_FAIL),servfail);stattree.SetItemText(srv[1], cbuffer);
d1944 1
a1944 1
		cbuffer.Format("%s: %i",GetResString(IDS_SF_DELCOUNT),g_eMuleApp.m_pServerList->GetDeletedServerCount());stattree.SetItemText(srv[2], cbuffer);
d1946 1
a1946 1
		cbuffer.Format("%s: %i",GetResString(IDS_SF_TOTAL),servtotal);stattree.SetItemText(srv[3], cbuffer);
d1948 1
a1948 1
		cbuffer.Format("%s: %s",GetResString(IDS_SF_USER),CastItoThousands(servtuser));stattree.SetItemText(srv[4], cbuffer);
d1950 1
a1950 1
		cbuffer.Format("%s: %s",GetResString(IDS_SF_FILE),CastItoThousands(servtfile));stattree.SetItemText(srv[5], cbuffer);
d1952 3
a1954 10
		if(g_eMuleApp.m_pDownloadQueue->GetUDPSearchStatus() == "")
		{
			cbuffer.Format(GetResString(IDS_STATS_UDPSEARCH), GetResString(IDS_FSTAT_WAITING));
			stattree.SetItemText(srv[6], cbuffer);
		}
		else
		{
			cbuffer.Format(GetResString(IDS_STATS_UDPSEARCH), g_eMuleApp.m_pDownloadQueue->GetUDPSearchStatus());
			stattree.SetItemText(srv[6], cbuffer);
		}
d1959 1
a1959 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_SVRECWORKING), g_eMuleApp.m_pGlobPrefs->GetSrvrsMostWorkingServers() );
d1962 1
a1962 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_SVRECUSERS), CastItoThousands(g_eMuleApp.m_pGlobPrefs->GetSrvrsMostUsersOnline()) );
d1965 1
a1965 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_SVRECFILES), CastItoThousands(g_eMuleApp.m_pGlobPrefs->GetSrvrsMostFilesAvail()) );
d1978 5
a1982 10
		uint64 bytesLargestFile = 0;
		uint64 allsize = g_eMuleApp.m_pSharedFilesList->GetDatasize(bytesLargestFile); // Func returns total share size and sets pointeredd uint64 to largest single filesize
		CString cbuffer2;
		if(g_eMuleApp.m_pSharedFilesList->GetCount() != 0)
			cbuffer2.Format( "%s", CastItoXBytes((uint64)allsize/g_eMuleApp.m_pSharedFilesList->GetCount()));
		else
		{
			cbuffer2.Format( "%s", CastItoXBytes(0) );
		}
		cbuffer.Format(GetResString(IDS_SF_AVERAGESIZE),cbuffer2);
d1985 1
a1985 1
		cbuffer.Format("%s: %s", GetResString(IDS_STATS_LARGESTFILE), CastItoXBytes(bytesLargestFile) );
d1995 1
a1995 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_SHRECNUM), g_eMuleApp.m_pGlobPrefs->GetSharedMostFilesShared() );
d1998 1
a1998 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_SHRECASIZE), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSharedLargestAvgFileSize()) );
d2001 1
a2001 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_LARGESTFILE), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSharedLargestFileSize()) );
d2004 1
a2004 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_SHRECSIZE), CastItoXBytes(g_eMuleApp.m_pGlobPrefs->GetSharedLargestShareSize()) );
a2011 1

d2016 1
a2016 1
	static const int s_aiResTbl[][2] =
d2023 1
a2023 1
	static const int s_aiResTbl2[][2] =
d2034 1
a2034 1
	for (uint32 i = 0; i < ELEMENT_COUNT(s_aiResTbl); i++)
d2036 2
a2037 2
		GetResString(&strBuffer, static_cast<UINT>(s_aiResTbl[i][1]));
		SetDlgItemText(s_aiResTbl[i][0], strBuffer);
d2040 1
a2040 1
	for (uint32 i = 0; i < ELEMENT_COUNT(s_aiResTbl2); i++)
d2042 1
a2042 1
		GetResString(&strBuffer, static_cast<UINT>(s_aiResTbl2[i][1]));
d2044 1
a2044 1
		SetDlgItemText(s_aiResTbl2[i][0], strBuffer);
d2321 2
a2322 1
	if (!g_eMuleApp.m_pdlgEmule->IsRunning()) return;
d2608 3
a2610 3
	m_DownloadOMeter.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(4) ,0);
	m_DownloadOMeter.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(3) ,1);
	m_DownloadOMeter.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(2) ,2);
d2613 3
a2615 3
	m_UploadOMeter.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(7) ,0);
	m_UploadOMeter.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(6) ,1);
	m_UploadOMeter.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(5) ,2);
d2618 3
a2620 3
	m_Statistics.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(8),0);
	m_Statistics.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(9),1);
	m_Statistics.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(10),2);
d2622 1
a2622 1
	if (oldRatio!= g_eMuleApp.m_pGlobPrefs->GetGraphRatio())	//Cax2 - Resize the general connections...
@


1.132
log
@Don't use 32 bit color resources if OS/comctl32.dll doesn't support it and some other minor changes/optimizations.
@
text
@d1929 1
a1929 1
		uint32	servtotal, servfail, servuser, servfile, servtuser, servtfile;
d1931 1
a1931 1
		g_eMuleApp.m_pServerList->GetStatus (servtotal, servfail, servuser, servfile, servtuser, servtfile, servocc);
d1933 1
a1933 1
		cbuffer.Format("%s: %i",GetResString(IDS_SF_WORKING),servtotal-servfail);stattree.SetItemText(srv[0], cbuffer);
d1937 1
a1937 1
			cbuffer.Format("%s: %s",GetResString(IDS_SF_WUSER),CastItoThousands(servuser));stattree.SetItemText(srv_w[0], cbuffer);
d1939 1
a1939 1
			cbuffer.Format("%s: %s",GetResString(IDS_SF_WFILE),CastItoThousands(servfile));stattree.SetItemText(srv_w[1], cbuffer);
@


1.131
log
@Fixed localization of "(in %)" by removing "in" :) {koizo}.
@
text
@d89 1
a89 1
	imagelistStatTree.Create(16, 16, ILC_COLOR32 | ILC_MASK, 12, 0);
@


1.130
log
@Added MODs client statistics for eMule Plus;
Removed separate client statistics node for emule.de.
@
text
@d2065 1
a2065 1
		strBuffer += _T(" (in %)");
@


1.129
log
@Better grid scaling for statistics plots.
@
text
@d440 1
a440 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
d456 1
a456 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
d463 1
a463 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTOTHER) , CastItoXBytes( PortDataOther ) , percentPortTransferred);
d569 1
a569 1
					cbuffer.Format( "%s: %u (%1.1f%%)" , GetResString(IDS_STATS_SDLSES) , statGoodSessions , percentSessions );
d575 1
a575 1
					cbuffer.Format( "%s: %u (%1.1f%%)" , GetResString(IDS_STATS_FDLSES) , statBadSessions , percentSessions );
d644 1
a644 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
d660 1
a660 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
d667 1
a667 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTOTHER), CastItoXBytes( PortDataOther ) , percentPortTransferred);
d693 1
a693 1
					cbuffer.Format( "%s: %u (%1.1f%%)", GetResString(IDS_STATS_SDLSES) , statGoodSessions , percentSessions );
d699 1
a699 1
					cbuffer.Format( "%s: %u (%1.1f%%)" , GetResString(IDS_STATS_FDLSES) , statBadSessions , percentSessions);
d777 1
a777 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(UpDataClient) , percentClientTransferred);
d793 1
a793 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
d800 1
a800 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTOTHER) , CastItoXBytes( PortDataOther ) , percentPortTransferred);
d814 1
a814 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_DSFILE) , CastItoXBytes( DataSourceFile ) , percentFileTransferred);
d821 1
a821 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_DSPF) , CastItoXBytes( DataSourcePF ) , percentFileTransferred);
d835 1
a835 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_YES) , CastItoXBytes( DataCommunity ) , percentCommunityTransferred);
d842 1
a842 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_NO) , CastItoXBytes( DataNoCommunity ) , percentCommunityTransferred);
d852 1
a852 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_PRIORELEASE) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d856 1
a856 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_PRIOHIGH) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d860 1
a860 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_PRIONORMAL) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d864 1
a864 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_PRIOLOW) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d868 1
a868 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_PRIOVERYLOW) , CastItoXBytes( qwData ) , GetPercent(qwData, g_eMuleApp.stat_sessionSentBytes));
d900 1
a900 1
					cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,GetPercent(statGoodSessions,statTotalSessions));
d903 1
a903 1
					cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_SUCCUP_FC),g_eMuleApp.m_pUploadQueue->GetULFullChunkCount(),GetPercent(g_eMuleApp.m_pUploadQueue->GetULFullChunkCount(),statTotalSessions));
d905 1
a905 1
					cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_SUCCUP_PC),g_eMuleApp.m_pUploadQueue->GetULPartChunkCount(),GetPercent(g_eMuleApp.m_pUploadQueue->GetULPartChunkCount(),statTotalSessions));
d910 1
a910 1
						cbuffer.Format("%s: %u (%1.1f%%)",GetUpEndReason((EnumEndTransferSession)i),
d917 1
a917 1
					cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,GetPercent(statBadSessions,statTotalSessions));
d922 1
a922 1
						cbuffer.Format("%s: %u (%1.1f%%)",GetUpEndReason((EnumEndTransferSession)i),
d986 1
a986 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(UpDataClient) , percentClientTransferred);
d1002 1
a1002 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
d1009 1
a1009 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTOTHER) , CastItoXBytes( PortDataOther ) , percentPortTransferred);
d1023 1
a1023 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_DSFILE) , CastItoXBytes( DataSourceFile ) , percentFileTransferred);
d1030 1
a1030 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_DSPF) , CastItoXBytes( DataSourcePF ) , percentFileTransferred);
d1044 1
a1044 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_YES) , CastItoXBytes( DataCommunity ) , percentCommunityTransferred);
d1051 1
a1051 1
						cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_NO) , CastItoXBytes( DataNoCommunity ) , percentCommunityTransferred);
d1075 1
a1075 1
					cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,percentSessions);
d1082 1
a1082 1
					cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,percentSessions);
d1282 1
a1282 1
			cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime()), (double) (100 * GetTransferTime()) / sessionRunTime);
d1288 1
a1288 1
				cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime()), (double) (100 * GetUploadTime()) / sessionRunTime);
d1291 1
a1291 1
				cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime()), (double) (100 * GetDownloadTime()) / sessionRunTime);
d1296 1
a1296 1
			cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_CURRSRVDUR), CastSecondsToLngHM(time_thisServerDuration), (double) (100 * time_thisServerDuration) / sessionRunTime);
d1299 1
a1299 1
			cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration()), (double) (100 * GetServerDuration()) / sessionRunTime);
d1312 1
a1312 1
			cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime() + g_eMuleApp.m_pGlobPrefs->GetConnTransferTime()), (double) (100 * (GetTransferTime() + g_eMuleApp.m_pGlobPrefs->GetConnTransferTime())) / totalRunTime);
d1318 1
a1318 1
				cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime() + g_eMuleApp.m_pGlobPrefs->GetConnUploadTime()), (double) (100 * (GetUploadTime() + g_eMuleApp.m_pGlobPrefs->GetConnUploadTime())) / totalRunTime);
d1321 1
a1321 1
				cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime() + g_eMuleApp.m_pGlobPrefs->GetConnDownloadTime()), (double) (100 * (GetDownloadTime() + g_eMuleApp.m_pGlobPrefs->GetConnDownloadTime())) / totalRunTime);
d1326 1
a1326 1
			cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration() + g_eMuleApp.m_pGlobPrefs->GetConnServerDuration()), (double) (100 * (GetServerDuration() + g_eMuleApp.m_pGlobPrefs->GetConnServerDuration())) / totalRunTime);
d1372 1
a1372 1
										cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(UpDataClient) , percentClientTransferred);
d1388 1
a1388 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
d1395 1
a1395 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTOTHER) , CastItoXBytes( PortDataOther ) , percentPortTransferred);
d1409 1
a1409 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_DSFILE) , CastItoXBytes( DataSourceFile ) , percentFileTransferred);
d1416 1
a1416 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_DSPF) , CastItoXBytes( DataSourcePF ) , percentFileTransferred);
d1430 1
a1430 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_YES) , CastItoXBytes( DataCommunity ) , percentCommunityTransferred);
d1437 1
a1437 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_NO) , CastItoXBytes( DataNoCommunity ) , percentCommunityTransferred);
d1453 1
a1453 1
							cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,percentSessions);
d1460 1
a1460 1
							cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,percentSessions);
d1518 1
a1518 1
										cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((EnumClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
d1534 1
a1534 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTDEF) , CastItoXBytes( PortDataDefault ) , percentPortTransferred);
d1541 1
a1541 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetResString(IDS_STATS_PRTOTHER), CastItoXBytes( PortDataOther ) , percentPortTransferred);
d1559 1
a1559 1
							cbuffer.Format( "%s: %u (%1.1f%%)", GetResString(IDS_STATS_SDLSES) , statGoodSessions , percentSessions );
d1565 1
a1565 1
							cbuffer.Format( "%s: %u (%1.1f%%)" , GetResString(IDS_STATS_FDLSES) , statBadSessions , percentSessions);
d1614 1
a1614 1
		CMap<POSITION, POSITION, uint32, uint32>	clientMODs(200);
d1617 1
a1617 1
		uint32	totalclient,totalMODs,myStats[18],clientsPorts[2];
d1620 1
a1620 1
		g_eMuleApp.m_pClientList->GetStatistics(totalclient, myStats, clientsPorts, &AllClients, totalMODs, &clientMODs, &clientCountries);
d1643 1
a1643 1
			cbuffer.Format("%s: %u (%1.1f%%)", GetResString(IDS_STATS_SUI), myStats[14], static_cast<double>(100*myStats[14])/totalclient);
d1646 1
a1646 1
			cbuffer.Format("%s: %u (%1.1f%%)", GetResString(IDS_STATS_NONSUI), myStats[15], static_cast<double>(100*myStats[15])/totalclient);
d1649 1
a1649 1
			cbuffer.Format("%s: %u (%1.1f%%)", GetResString(IDS_LOWID), myStats[16], static_cast<double>(100*myStats[16])/totalclient);
d1659 1
a1659 1
				cbuffer.Format("%s: %u (%1.1f%%)", GetResString(IDS_STATS_CLIENT_MODS), totalMODs,100.0*totalMODs/dwTotalMules);
d1724 1
a1724 1
						cbuffer.Format("%s: %u (%1.1f%%)", GetMODType(dwModIdx), m_nMODs[dwModIdx], 100.0*m_nMODs[dwModIdx]/dwTotalMules);
d1729 35
a1763 1
			//eklmn: sequence was replaced to loop...
d1767 1
a1767 1
			for (int j = 0;j<SO_LAST;j++)
d1774 1
a1774 1
					cbuffer.Format("%s: %u (%1.1f%%)",GetClientNameString((EnumClientTypes)j), clients, percentClients);
d1825 1
a1825 1
										cbuffer.Format(_T("%s: %u (%1.1f%%)"), GetClientVersionString((EnumClientTypes)j,topver), topcnt, static_cast<double>(topcnt)/clients*100.0);
d1844 1
a1844 1
									cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_OTHERS),(clients-SubTotal),100.0*(clients-SubTotal)/clients);
d1904 1
a1904 1
							cbuffer.Format("%s: %u (%1.1f%%)", g_eMuleApp.m_pIP2Country->GetCountryNameByIndex(iTopIdx), dwLastTop, static_cast<double>(100*dwLastTop)/totalclient);
d2241 3
a2243 1
			hclisoftMODs = stattree.InsertItem(GetResString(IDS_STATS_CLIENT_MODS), clisoft[SO_EMULE] /*hclisoft*/);			// MODs Section
a2317 2

	buffer.Empty();
d2710 1
a2710 1
		_T("eChanblard"), _T("Pawcio"), _T("emule.de")
@


1.128
log
@Renamed resource strings tags for better meaning;
Corrected resource string usage {orokulus}.
@
text
@a116 4
	int iMaxDlGraph = int((g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()/100.0)+0.99)*10;
	int iMaxUlGraph = int((g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()/40.0)+0.99)*4;
	m_DownloadOMeter.m_nYGrids=int(iMaxDlGraph/10)-1;
	m_UploadOMeter.m_nYGrids=int(iMaxUlGraph/2)-1;
d127 1
a127 3
	m_DownloadOMeter.SetRange(0, iMaxDlGraph, 0);
	m_DownloadOMeter.SetRange(0, iMaxDlGraph, 1);
	m_DownloadOMeter.SetRange(0, iMaxDlGraph, 2);
d140 1
a140 3
	m_UploadOMeter.SetRange(0, iMaxUlGraph, 0);
	m_UploadOMeter.SetRange(0, iMaxUlGraph, 1);
	m_UploadOMeter.SetRange(0, iMaxUlGraph, 2);
d2336 2
a2337 1
	EMULE_TRY
d2341 6
a2346 6
		int iMaxDlGraph = maxValue;
		iMaxDlGraph = int((iMaxDlGraph/10.0)+0.99)*10;
		m_DownloadOMeter.m_nYGrids=int(iMaxDlGraph/10)-1;
		m_DownloadOMeter.SetRange(0, iMaxDlGraph, 0);
		m_DownloadOMeter.SetRange(0, iMaxDlGraph, 1);
		m_DownloadOMeter.SetRange(0, iMaxDlGraph, 2);
d2350 12
a2361 9
		int iMaxUlGraph = maxValue;
		iMaxUlGraph = int((iMaxUlGraph/4.0)+0.99)*4;
		m_UploadOMeter.m_nYGrids=int(iMaxUlGraph/2)-1;
		m_UploadOMeter.SetRange(0, iMaxUlGraph, 0);
		m_UploadOMeter.SetRange(0, iMaxUlGraph, 1);
		m_UploadOMeter.SetRange(0, iMaxUlGraph, 2);
	}

	EMULE_CATCH
@


1.127
log
@Additional branch for WebCache MOD;
Removed possibility to expand eDonkey client statistics (it became quite rare).
@
text
@d2155 1
a2155 1
			hconn_su= stattree.InsertItem(GetResString(IDS_PW_CON_UPLBL),6,6,h_conn_session);		// Uploads Section (Session)
d2157 1
a2157 1
			hconn_sd= stattree.InsertItem(GetResString(IDS_DOWNLOAD),7,7,h_conn_session);			// Downloads Section (Session)
d2163 1
a2163 1
			hconn_tu= stattree.InsertItem(GetResString(IDS_PW_CON_UPLBL),6,6,h_conn_total);			// Uploads (Total)
d2165 1
a2165 1
			hconn_td= stattree.InsertItem(GetResString(IDS_DOWNLOAD),7,7,h_conn_total);				// Downloads (Total)
@


1.126
log
@Fractional upload/download limits (min 1 KB/s, granularity 0.1 KB/s).
@
text
@d1664 4
a1667 3
			uint32 totalMules = myStats[SO_EMULE]+myStats[SO_OLDEMULE];
			if (totalMules)
				cbuffer.Format("%s: %u (%1.1f%%)", GetResString(IDS_STATS_CLIENT_MODS), totalMODs,100.0*totalMODs/totalMules);
d1732 1
a1732 1
						cbuffer.Format("%s: %u (%1.1f%%)", GetMODType(dwModIdx), m_nMODs[dwModIdx], 100.0*m_nMODs[dwModIdx]/totalMules);
d1744 1
d1746 1
a1746 3
						clients = myStats[SO_EMULE]+myStats[SO_OLDEMULE];
					else
						clients = myStats[j];
d1748 1
a1748 1
					cbuffer.Format("%s: %i (%1.1f%%)",GetClientNameString((EnumClientTypes)j), clients, percentClients);
a1754 1
						case SO_EDONKEY:	// CLIENTS ->CONNECTED_> CLIENT SOFTWARE -> EDONKEY SECTION
d1799 1
a1799 1
										cbuffer.Format(_T("%s: %i (%1.1f%%)"), GetClientVersionString((EnumClientTypes)j,topver), topcnt, static_cast<double>(topcnt)/clients*100.0);
d1818 1
a1818 1
									cbuffer.Format("%s: %i (%1.1f%%)",GetResString(IDS_STATS_OTHERS),(clients-SubTotal),100.0*(clients-SubTotal)/clients);
d2679 1
a2679 1
		_T("L!ONetwork"), _T("sivka"), _T("LSD"), _T("Morph"),
@


1.125
log
@Unified string usage for IDS_PW_GENERAL, IDS_STATS_GENERAL, IDS_TREE_GENERAL.
@
text
@d117 2
a118 2
	int iMaxDlGraph = int((g_eMuleApp.m_pGlobPrefs->GetMaxGraphDownloadRate()/10.0)+0.99)*10;
	int iMaxUlGraph = int((g_eMuleApp.m_pGlobPrefs->GetMaxGraphUploadRate()/4.0)+0.99)*4;
@


1.124
log
@Replace "The Black Hand" with "emule.de" mod in the MODs tree.
@
text
@d2154 1
a2154 1
			hconn_sg= stattree.InsertItem(GetResString(IDS_STATS_GENERAL),11,11,h_conn_session);	// General Section (Session)
d2162 1
a2162 1
			hconn_tg= stattree.InsertItem(GetResString(IDS_STATS_GENERAL),11,11,h_conn_total);		// General (Total)
@


1.123
log
@Own client type for eMule Plus clients;
Separate eMule Plus statistics; Removed unused class variables.
@
text
@d2681 1
a2681 1
		_T("eChanblard"), _T("Pawcio"), _T("The Black Hand")
@


1.122
log
@LMULE -> XMULE; Possibility to collapse MLdonkey client statistics.
@
text
@a205 1
	cntDelay =				0;
d1753 1
a1798 1
										//cli_lastCount[j]++;
a1818 1
									//cli_lastCount[j]++;
d2214 7
a2220 7
			clisoft[0] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hcliconnected /*hclisoft*/);
				hclisoftMODs = stattree.InsertItem(GetResString(IDS_STATS_CLIENT_MODS), clisoft[0] /*hclisoft*/);			// MODs Section
				for (int im = 0; im < STAT_CLIENT_MOD_NODES; im++)
				{
					clisoftMODs[im] = NULL; m_nMODs[im] = 0;
				}
			for (int i = 1; i<(SO_LAST-1); i++) clisoft[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hcliconnected /*hclisoft*/);
a2288 3
//	Initialize our client version counts
	for (uint32 i = 0; i < 5; i++) cli_lastCount[i] = 0;

d2620 11
a2630 11
	SetupLegend( IDC_C0_2, 0 ,1);
	SetupLegend( IDC_C0_3, 1 ,1);
	SetupLegend( IDC_C0,   2 ,1);

	SetupLegend( IDC_C1_2, 0 ,2);
	SetupLegend( IDC_C1_3, 1 ,2);
	SetupLegend( IDC_C1,   2 ,2);

	SetupLegend( IDC_S0,   0 ,3);
	SetupLegend( IDC_S1,   1 ,3);
	SetupLegend( IDC_S3,   2 ,3);
d2680 1
a2680 1
		_T("Plus"), _T("L!ONetwork"), _T("sivka"), _T("LSD"), _T("Morph"),
@


1.121
log
@Added collapse possibility for aMule client statistics.
@
text
@d1757 2
a1758 1
						case SO_LMULE:
@


1.120
log
@1) statistic for file priority
2) optimization in category processing
@
text
@d1758 1
d1774 1
a1774 1
								for(uint32 i=0; i<4; i++)
d1828 2
a1829 1
						default: ;
@


1.119
log
@Reduced memory used by country and client statistics;
Optimized internal loops; Formatting and renaming.
@
text
@d854 26
d2097 3
@


1.118
log
@Optimization by using cached string.
@
text
@d1597 2
a1598 2
		CMap<POSITION, POSITION,uint32, uint32> clientMODs;
		CMap<POSITION, POSITION,uint32, uint32> clientCountries;
d1603 1
a1603 1
		g_eMuleApp.m_pClientList->GetStatistics(totalclient,myStats, clientsPorts, &AllClients, totalMODs, &clientMODs, &clientCountries);
d1605 1
a1605 1
		if (!totalclient)
d1651 1
a1651 4
			//eklmn: now build a new MOD's subtree
			uint32 MOD_count;
			CString MOD_TypeName;
			POSITION MOD_pos;
d1654 3
a1656 2
				uint32	currtop = 0;
				uint32	lasttop = 0xFFFFFFFF;
d1659 3
a1661 3
					POSITION pos = clientMODs.GetStartPosition();
					POSITION top_pos = 0;
					uint32 top_count=0;
d1664 2
a1665 2
						clientMODs.GetNextAssoc(pos, MOD_pos, MOD_count);
						if(currtop<MOD_count && MOD_count<=lasttop)
d1668 1
a1668 2
							top_count = MOD_count;
							currtop = MOD_count;
d1671 1
a1671 2
					lasttop=currtop;
					currtop=0;
d1675 2
a1676 2
						// eklmn: now sort client by known types
						MOD_TypeName = g_eMuleApp.m_pClientList->GetMODType(top_pos);
d1679 1
a1679 1
							if ((dwModIdx == (STAT_CLIENT_MOD_NODES - 1)) || (MOD_TypeName.Find(GetMODType(dwModIdx)) != -1))
d1681 1
a1681 1
								m_nMODs[dwModIdx] += top_count;
d1694 1
a1694 1
								cbuffer.Format("%s: %u", MOD_TypeName, top_count);
d1833 1
a1833 4
					POSITION Country_pos;
					uint32 currtop = 0;
					uint32 lasttop = 0xFFFFFFFF;
					uint32 Country_count, Country_Total = 0;
d1837 4
a1840 3
						POSITION pos = clientCountries.GetStartPosition();
						POSITION top_pos = 0;
						uint32 top_count = 0;
d1843 2
a1844 2
							clientCountries.GetNextAssoc(pos, Country_pos, Country_count);
							if(currtop<Country_count && Country_count<=lasttop)
d1846 2
a1847 3
								top_pos = Country_pos;
								top_count = Country_count;
								currtop = Country_count;
d1850 1
a1850 3
						lasttop = currtop;
						currtop = 0;
						if (top_pos)
d1852 1
a1852 1
							cbuffer.Format("%s: %u (%1.1f%%)", g_eMuleApp.m_pClientList->GetClientCountry(top_pos), top_count, static_cast<double>(100*top_count)/totalclient);
d1854 2
a1855 2
							clientCountries.RemoveKey(top_pos);
							Country_Total++;
d1858 1
a1858 1
					cbuffer.Format("%s: %u", GetResString(IDS_COUNTRIES), Country_Total);
@


1.117
log
@Improved processing of MODs branch in client statistics tree;
Created separate branch for eChanblard mod in client statistics tree.
@
text
@d1698 1
a1698 1
								cbuffer.Format("%s: %u", g_eMuleApp.m_pClientList->GetMODType(top_pos), top_count);
@


1.116
log
@corrected misimplemented node
@
text
@d1646 1
a1646 1
			for (int im = 0; im<8; im++)
d1681 1
a1681 1
						for (uint16 im = 0; im<8; im++)
d1683 1
a1683 1
							if (im == 7 || MOD_TypeName.Find(GetMODType(im)) != -1)
d1685 1
a1685 1
								m_nMODs[im] += top_count;
d1687 1
a1687 1
								if (clisoftMODs[im] == NULL)
d1689 2
a1690 2
									// delete an "Others"
									if (im != 7 && clisoftMODs[7] != NULL)
d1692 2
a1693 1
										stattree.DeleteItem(clisoftMODs[7]); clisoftMODs[7] = NULL;
d1695 1
a1695 1
									clisoftMODs[im] = stattree.InsertItem(cbuffer, hclisoftMODs);
d1699 1
a1699 1
								stattree.InsertItem(cbuffer, clisoftMODs[im]);
d1706 3
a1708 2
				for (uint16 im = 0; im<8; im++)
					if (clisoftMODs[im] != NULL)
d1710 2
a1711 2
						cbuffer.Format("%s: %u (%1.1f%%)", GetMODType(im), m_nMODs[im], 100.0*m_nMODs[im]/totalMules);
						stattree.SetItemText(clisoftMODs[im], cbuffer);
d1713 1
d2195 1
a2195 1
				for (int im = 0; im<8; im++)
d2658 1
a2658 1
CString CStatisticsDlg::GetMODType(uint16 index)
d2660 1
a2660 5
	EMULE_TRY

	CString sMODName;

	switch (index)
d2662 2
a2663 24
		case 0:
			sMODName = "Plus";
			break;
		case 1:
			sMODName = "sivka";
			break;
		case 2:
			sMODName = "LSD";
			break;
		case 3:
			sMODName = "The Black Hand";
			break;
		case 4:
			sMODName = "Morph";
			break;
		case 5:
			sMODName = "Pawcio";
			break;
		case 6:
			sMODName = "L!ONetwork";
			break;
		case 7:
			GetResString(&sMODName, IDS_STATS_OTHERS);
			break;
a2664 1
	return sMODName;
d2666 4
a2669 2
	EMULE_CATCH
	return "";
@


1.115
log
@Updated LionHeart MOD node in the statistics tree;
Improved string processing.
@
text
@d2093 1
a2093 1
			for(int i = 0; i<2; i++) up_tpb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_tpb);
@


1.114
log
@Community statistics
@
text
@a2000 1
	// Used for formatting the Active Connections ratio and the time for average graphs
d2004 4
a2007 1
		SetDlgItemText(s_aiResTbl[i][0], GetResString(static_cast<UINT>(s_aiResTbl[i][1])));
d2010 5
a2014 1
		SetDlgItemText(s_aiResTbl2[i][0], GetResString(static_cast<UINT>(s_aiResTbl2[i][1])).MakeLower());
d2016 2
d2019 1
a2019 1
		strBuffer=_T(" (in %)");
d2021 2
a2022 2
			strBuffer.Format(_T(" (1:%u)"),g_eMuleApp.m_pGlobPrefs->GetGraphRatio());
	SetDlgItemText(IDC_STATIC_S0, GetResString(IDS_PW_GENERAL).MakeLower() + strBuffer);
d2655 1
a2655 1
CString CStatisticsDlg::GetMODType (uint16 index)
d2682 1
a2682 1
			sMODName = "LH";
d2685 1
a2685 1
			sMODName = GetResString(IDS_STATS_OTHERS);
a2686 2
		default:
			sMODName = "";
a2716 1

@


1.113
log
@Corrected availability check of country name (more correct if flags weren't loaded).
@
text
@d818 1
a818 1
						uint64	DataSourceTotal =		g_eMuleApp.m_pGlobPrefs->GetUpSessionDataFile();
d833 21
d1016 21
d1402 21
d2048 12
a2059 12
	// Setup Tree
	// transfer section
	h_transfer = stattree.InsertItem(GetResString(IDS_FSTAT_TRANSFER),1,1);				// Transfers Section
		buffer.Format("%s %s",GetResString(IDS_STATS_SRATIO),GetResString(IDS_FSTAT_WAITING));// Make It Pretty
		trans[0]= stattree.InsertItem(buffer, h_transfer);										// Session Ratio
		buffer.Format("%s %s",GetResString(IDS_STATS_CRATIO),GetResString(IDS_FSTAT_WAITING));// Make It Pretty
		trans[1]= stattree.InsertItem(buffer, h_transfer);										// Cumulative Ratio

	// upload section
	h_upload = stattree.InsertItem(GetResString(IDS_TW_UPLOADS), 6,6,h_transfer);		// Uploads Section
		// UL: session
		h_up_session= stattree.InsertItem(GetResString(IDS_STATS_SESSION), 8,8,h_upload);		// Session Section (Uploads)
d2061 1
a2061 1
				hup_scb= stattree.InsertItem(GetResString(IDS_CLIENTS),up_S[0]);							// Clients Section
d2063 1
a2063 1
				hup_spb= stattree.InsertItem(GetResString(IDS_PORT),up_S[0]);								// Ports Section
d2067 2
d2075 1
a2075 1
				hup_soh= stattree.InsertItem(GetResString(IDS_STATS_OVRHD),h_up_session);					// Upline Overhead (Session)
d2077 3
a2079 3
		// UL: cumulative
		h_up_total= stattree.InsertItem(GetResString(IDS_STATS_CUMULATIVE),9,9, h_upload);		// Cumulative Section (Uploads)
		up_T[0]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_up_total);				// Uploaded Data (Total)
d2085 4
a2088 2
			for(int i = 0; i<2; i++) up_tsb[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_tsb);
			up_T[1]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_up_total);				// Upload Sessions (Total)
d2093 4
a2096 4
	// download section
	h_download = stattree.InsertItem(GetResString(IDS_TW_DOWNLOADS), 7,7,h_transfer);	// Downloads Section
		//DL: session
		h_down_session= stattree.InsertItem(GetResString(IDS_STATS_SESSION),8,8, h_download);	// Session Section (Downloads)
d2098 1
a2098 1
			hdown_scb= stattree.InsertItem(GetResString(IDS_CLIENTS),down_S[0]);			// Clients Section
d2107 2
a2108 2
		//DL: cumulative
		h_down_total= stattree.InsertItem(GetResString(IDS_STATS_CUMULATIVE),9,9, h_download);	// Cumulative Section (Downloads)
d2118 4
a2121 4
	//connection section
	h_connection = stattree.InsertItem(GetResString(IDS_FSTAT_CONNECTION),2,2);				// Connection Section
		// connection: session
		h_conn_session= stattree.InsertItem(GetResString(IDS_STATS_SESSION),8,8,h_connection);	// Session Section (Connection)
d2128 2
a2129 2
		// connection: cumulative
		h_conn_total= stattree.InsertItem(GetResString(IDS_STATS_CUMULATIVE),9,9,h_connection);	// Cumulative Section (Connection)
d2137 2
a2138 2
	// time section
	h_time = stattree.InsertItem(GetResString(IDS_STATS_TIMESTATS),12,12);					// Time Statistics Section
d2140 2
a2141 2
		// time: session
		htime_s = stattree.InsertItem(GetResString(IDS_STATS_SESSION),8,8,h_time);				// Session Section (Time)
d2144 2
a2145 2
		//time: cumulative
		htime_t = stattree.InsertItem(GetResString(IDS_STATS_CUMULATIVE),9,9,h_time);			// Cumulative Section (Time)
d2149 2
a2150 2
		htime_aap = stattree.InsertItem(GetResString(IDS_STATS_AVGANDPROJ),13,13,h_time);		// Projected Averages Section
			time_aaph[0] = stattree.InsertItem(GetResString(IDS_STATS_DAYLY),14,14,htime_aap);			// Daily Section
d2158 1
a2158 1
				time_aap_up_hd[x][0] = stattree.InsertItem(GetResString(IDS_CLIENTS),time_aap_up[x][0]);							// Clients Section
d2160 1
a2160 1
				time_aap_up_hd[x][1] = stattree.InsertItem(GetResString(IDS_PORT),time_aap_up[x][0]);								// Ports Section
d2162 1
a2162 1
				time_aap_up_hd[x][2] = stattree.InsertItem(GetResString(IDS_STATS_DATASOURCE),time_aap_up[x][0]);					// Data Source Section
d2164 2
d2169 1
a2169 1
				time_aap_hdown[x] = stattree.InsertItem(GetResString(IDS_TW_DOWNLOADS),7,7,time_aaph[x]);// Download Section
d2171 1
a2171 1
				time_aap_down_hd[x][0] = stattree.InsertItem(GetResString(IDS_CLIENTS),time_aap_down[x][0]);							// Clients Section
d2173 1
a2173 1
				time_aap_down_hd[x][1] = stattree.InsertItem(GetResString(IDS_PORT),time_aap_down[x][0]);								// Ports Section
d2179 3
a2181 3
	//client section
	h_clients = stattree.InsertItem(GetResString(IDS_CLIENTS),3,3);					// Clients Section
		hcliconnected = stattree.InsertItem(GetResString(IDS_STATS_ONLISTCLIENTS),h_clients);	// Connected Section
d2183 1
a2183 1
				hclisoftMODs = stattree.InsertItem(GetResString(IDS_STATS_CLIENT_MODS), clisoft[0] /*hclisoft*/);	// MODs Section
d2194 1
a2194 1
		hFiltered = stattree.InsertItem(GetResString(IDS_STATS_FILTEREDCLIENTS),h_clients);	// subsections: filtered
d2196 1
a2196 1
		hUnfairAction = stattree.InsertItem(GetResString(IDS_STATS_UNFAIR_ACTIONS),h_clients);	// subsections: Unfair action
d2198 1
a2198 1
		hCountries = stattree.InsertItem(GetResString(IDS_COUNTRIES),h_clients);	// Countries Section			
d2200 6
a2205 6
	//server section
	h_servers = stattree.InsertItem(GetResString(IDS_FSTAT_SERVERS),4,4);					// Servers section
		for(int i = 0; i<7; i++) srv[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_servers);		// Servers Items
		for(int i = 0; i<3; i++) srv_w[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), srv[0]);	// Working Servers Items
		hsrv_records = stattree.InsertItem(GetResString(IDS_STATS_RECORDS),10,10,h_servers);	// Servers Records Section
		for(int i = 0; i<3; i++) srv_r[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hsrv_records);	// Record Items
d2207 2
a2208 2
	// shared files
	h_shared = stattree.InsertItem( GetResString(IDS_SHAREDFILES),5,5 );					// Shared Files Section
d2210 1
a2210 1
		hshar_records= stattree.InsertItem(GetResString(IDS_STATS_RECORDS),10,10,h_shared);		// Shared Records Section
d2213 1
a2213 1
	// Make section headers bold in order to make the tree easier to view at a glance.
d2246 1
a2246 1
	// Expand our purdy new tree...
d2253 1
a2253 1
	// Select the top item so that the tree is not scrolled to the bottom when first viewed.
d2257 1
a2257 1
	// -khaos--+++>  Initialize our client version counts
d2260 1
a2260 1
	// End Tree Setup
@


1.112
log
@Added 'filesize on disk' info to details pane, file details, category tooltips and statistics
@
text
@d1767 1
a1767 1
			if (g_eMuleApp.m_pIP2Country->ShowCountryFlag())
@


1.111
log
@minor changes (Partfile --> PartFile...)
@
text
@d491 3
d497 1
a497 1
				stattree.SetItemText( down_S[6] , cbuffer );
d500 1
a500 1
				stattree.SetItemText( down_S[7] , cbuffer );
d503 1
a503 1
				stattree.SetItemText( down_S[8] , cbuffer );
d506 1
a506 1
				stattree.SetItemText( down_S[9] , cbuffer );
d521 1
a521 1
				stattree.SetItemText( down_S[10] , cbuffer );
d524 2
a525 2
				stattree.SetItemText( down_S[11] , cbuffer );
				if (forceUpdate || stattree.IsExpanded(down_S[11]))
d566 2
a567 2
				stattree.SetItemText( down_S[12] , cbuffer );
				if (forceUpdate || stattree.IsExpanded(down_S[12]))
d592 1
a592 1
				stattree.SetItemText( down_S[13] , cbuffer );
d595 1
a595 1
				stattree.SetItemText( down_S[14] , cbuffer );
d598 1
a598 1
				stattree.SetItemText( down_S[15] , cbuffer );
d2030 1
a2030 1
		for(int i = 0; i<16; i++) down_S[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_down_session);
d2035 2
a2036 2
			for(int i = 0; i<STATS_DL_SOURCES_TYPE-3; i++) down_sources[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[11]);
			for(int i = 0; i<4; i++) down_ssessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[12]);
@


1.110
log
@added percentage indicators to countries stats + minor changes
@
text
@d814 1
a814 1
						uint64	DataSourcePF =		g_eMuleApp.m_pGlobPrefs->GetUpData_Partfile();
d976 1
a976 1
						uint64	DataSourcePF =		g_eMuleApp.m_pGlobPrefs->GetCumUpData_Partfile();
d1341 1
a1341 1
								uint64	DataSourcePF =		(uint64) g_eMuleApp.m_pGlobPrefs->GetCumUpData_Partfile() * avgModifier[mx];
@


1.109
log
@added connected clients country statistics
@
text
@d1766 6
a1771 4
				POSITION Country_pos;
				uint32 currtop = 0;
				uint32 lasttop = 0xFFFFFFFF;
				uint32 Country_count, Country_Total = 0;
d1773 1
a1773 6
				while (!clientCountries.IsEmpty())
				{
					POSITION pos = clientCountries.GetStartPosition();
					POSITION top_pos = 0;
					uint32 top_count = 0;
					while(pos)
d1775 16
a1790 2
						clientCountries.GetNextAssoc(pos, Country_pos, Country_count);
						if(currtop<Country_count && Country_count<=lasttop)
d1792 4
a1795 3
							top_pos = Country_pos;
							top_count = Country_count;
							currtop = Country_count;
d1798 1
a1798 9
					lasttop = currtop;
					currtop = 0;
					if (top_pos)
					{
						cbuffer.Format("%s: %u", g_eMuleApp.m_pClientList->GetClientCountry(top_pos), top_count);
						stattree.InsertItem(cbuffer, hCountries);
						clientCountries.RemoveKey(top_pos);
						Country_Total++;
					}
d1800 2
a1801 2
				cbuffer.Format("%s: %u", GetResString(IDS_COUNTRIES), Country_Total);
				stattree.SetItemText(hCountries, cbuffer);
a1803 1
			{
d1805 1
a1805 2
				stattree.SetItemText(hCountries, cbuffer);
			}
@


1.108
log
@scale connection utilization by percentage in statistics [xrmb]
@
text
@d26 1
d1532 1
d1534 1
a1534 4
		uint32	totalclient;
		uint32	totalMODs;
		uint32	myStats[18];
		uint32	clientsPorts[2];
a1535 1
		//g_eMuleApp.m_pClientList->GetStatistics(totalclient, myStats, &clientVersionEDonkey, &clientVersionEDonkeyHybrid, &clientVersionEMule, &clientVersionLMule);
d1537 1
a1537 1
		g_eMuleApp.m_pClientList->GetStatistics(totalclient,myStats, clientsPorts, &AllClients, totalMODs, &clientMODs);
d1759 46
d2124 1
@


1.107
log
@Removal of old never used stuff.
@
text
@d1898 4
a1901 2
	if (g_eMuleApp.m_pGlobPrefs->GetGraphRatio() > 1)
		strBuffer.Format(_T(" (1:%u)"),g_eMuleApp.m_pGlobPrefs->GetGraphRatio());
d2418 4
a2421 1
	adPlotDataMore[0] = (activeconnections/g_eMuleApp.m_pGlobPrefs->GetGraphRatio());//myRateStats[0]; // propstats Cax2
d2461 7
a2467 1
		m_Statistics.ReSizePlot(0,(double)oldRatio/g_eMuleApp.m_pGlobPrefs->GetGraphRatio());
@


1.106
log
@minor changes
@
text
@d39 1
a39 1
	: CResizableDialog(CStatisticsDlg::IDD, pParent) , m_DownloadOMeter( 3 ),m_Statistics(4),m_UploadOMeter(3)
d254 1
a254 4
	AddAnchor(m_Led3[3].m_hWnd, CSize(100,68));

	AddAnchor(IDC_S2, CSize(50,100));
	AddAnchor(IDC_STATIC_S3, CSize(50,100));
d2391 1
a2391 1
	double m_dPlotDataDown[ 3 ];
d2416 3
a2418 4
	m_dPlotDataMore[0]=(activeconnections/g_eMuleApp.m_pGlobPrefs->GetGraphRatio());//myRateStats[0]; // propstats Cax2
	m_dPlotDataMore[1]=g_eMuleApp.m_pUploadQueue->GetUploadQueueLength();
	m_dPlotDataMore[2]=0;//g_eMuleApp.m_pUploadQueue->GetWaitingUserCount();
	m_dPlotDataMore[3]=myRateStats[1];
d2420 1
a2420 1
	m_Statistics.AppendPoints(m_dPlotDataMore);
d2452 1
a2452 2
	//m_Statistics.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(10),2);
	m_Statistics.SetPlotColor( g_eMuleApp.m_pGlobPrefs->GetStatsColor(10),3);
d2471 1
a2471 2
	//SetupLegend( IDC_S2, 2 ,3);
	SetupLegend( IDC_S3,   3 ,3);
@


1.105
log
@corretions in "hash thieves", added Leecher type statistic
@
text
@d1090 1
a1090 4
					char osDate[30],osTime[30];
					_strtime( osTime );
					_strdate( osDate );
					cbuffer.Format("%s: %i : %s %s",GetResString(IDS_SF_MAXCONLIMITREACHED),m_itemp,osDate,osTime);
@


1.104
log
@minor improvements
@
text
@d1766 1
d2083 1
a2083 1
			for(int i = 0; i<3; i++) hUnfairActionItems[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hUnfairAction);
@


1.103
log
@Improved string processing; Unified localization.
@
text
@d1898 1
a1898 1
		GetDlgItem(s_aiResTbl[i][0])->SetWindowText(GetResString(static_cast<UINT>(s_aiResTbl[i][1])));
d1901 1
a1901 1
		GetDlgItem(s_aiResTbl2[i][0])->SetWindowText(GetResString(static_cast<UINT>(s_aiResTbl2[i][1])).MakeLower());
d1905 1
a1905 1
	GetDlgItem(IDC_STATIC_S0)->SetWindowText(GetResString(IDS_PW_GENERAL).MakeLower() + strBuffer);
d1908 2
a1909 2
	GetDlgItem(IDC_TIMEAVG1)->SetWindowText(strBuffer);
	GetDlgItem(IDC_TIMEAVG2)->SetWindowText(strBuffer);
@


1.102
log
@Improved client version to string conversion
@
text
@d1878 16
d1895 1
a1895 1
	CString myBuffer;
d1897 13
a1909 16
	GetDlgItem(IDC_STATIC_D3)->SetWindowText(GetResString(IDS_ST_DOWNLOAD));
	GetDlgItem(IDC_STATIC_U)->SetWindowText(GetResString(IDS_ST_UPLOAD));
	GetDlgItem(IDC_STATIC_D)->SetWindowText(GetResString(IDS_ST_CURRENT).MakeLower());
	GetDlgItem(IDC_STATIC_U2)->SetWindowText(GetResString(IDS_ST_CURRENT).MakeLower());
	GetDlgItem(IDC_STATIC_D2)->SetWindowText(GetResString(IDS_ST_SESSION).MakeLower());
	GetDlgItem(IDC_STATIC_U3)->SetWindowText(GetResString(IDS_ST_SESSION).MakeLower());
	GetDlgItem(IDC_STATIC_A)->SetWindowText(GetResString(IDS_SP_ACTCON));

	GetDlgItem(IDC_STATIC_S2)->SetWindowText(GetResString(IDS_ST_ACTIVEDOWNLOAD).MakeLower());
	if (g_eMuleApp.m_pGlobPrefs->GetGraphRatio()>1) myBuffer.Format(_T(" (1:%i)"),g_eMuleApp.m_pGlobPrefs->GetGraphRatio());
	GetDlgItem(IDC_STATIC_S0)->SetWindowText(GetResString(IDS_PW_GENERAL).MakeLower()+myBuffer);
	GetDlgItem(IDC_STATIC_S1)->SetWindowText((LPCTSTR)GetResString(IDS_ST_ACTIVEUPLOAD).MakeLower());
	myBuffer.Format(_T(" (%u ")+ GetResString(IDS_MINS) + _T(")"),g_eMuleApp.m_pGlobPrefs->GetStatsAverageMinutes());
	GetDlgItem(IDC_TIMEAVG1)->SetWindowText((LPCTSTR)GetResString(IDS_AVG).MakeLower() +myBuffer);
	GetDlgItem(IDC_TIMEAVG2)->SetWindowText((LPCTSTR)GetResString(IDS_AVG).MakeLower() + myBuffer);
	GetDlgItem(IDC_BNMENU)->SetWindowText(GetResString(IDS_SF_STATISTICS));
a1916 2

	myBuffer.Empty();
@


1.101
log
@formatting;
optimzations in UploadQueue.cpp;
removing doubled ';'
@
text
@d1716 1
a1716 1
										cbuffer.Format(_T("v%s: %i (%1.1f%%)"), GetClientVersionString((EnumClientTypes)j,topver), topcnt, static_cast<double>(topcnt)/clients*100.0);
@


1.100
log
@bugfix: missing shift to show client stats again after insert of new statistics item
@
text
@d72 1
a72 1
	ON_BN_CLICKED(IDC_BNMENU, OnMenuButtonClicked)	
d129 1
a129 1
	m_DownloadOMeter.Create(WS_VISIBLE | WS_CHILD, rect, this); 
d144 1
a144 1
	m_UploadOMeter.Create(WS_VISIBLE | WS_CHILD, rect, this); 
d159 1
a159 1
	m_Statistics.Create(WS_VISIBLE | WS_CHILD, rect, this) ; 
d172 3
a174 3
	
	RepaintMeters();	
	
d180 1
a180 1
	
d213 1
a213 1
	
d222 1
a222 1
	
d233 1
a233 1
	
d244 1
a244 1
	
d268 1
a268 1
	
d315 1
a315 1
	
d366 1
a366 1
	
d380 1
a380 1
		if ( g_eMuleApp.stat_sessionReceivedBytes>0 && g_eMuleApp.stat_sessionSentBytes>0 ) 
d394 1
a394 1
		else 
d399 1
a399 1
		if ( (g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()>0 && g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()>0) || (g_eMuleApp.stat_sessionReceivedBytes>0 && g_eMuleApp.stat_sessionSentBytes>0) ) 
d402 1
a402 1
			if ((g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded())<(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded())) 
d433 1
a433 1
					if (forceUpdate || stattree.IsExpanded(hdown_scb)) 
d525 1
a525 1
				{ 
d633 1
a633 1
					if (forceUpdate || stattree.IsExpanded(hdown_tcb)) 
d638 1
a638 1
						//eklmn: sequence was replaced to loop... 
d766 1
a766 1
					if (forceUpdate || stattree.IsExpanded(hup_scb)) 
d771 1
a771 1
						//eklmn: sequence was replaced to loop... 
d779 1
a779 1
								else 
d845 1
a845 1
				if (forceUpdate || stattree.IsExpanded(up_S[3])) 
d849 2
a850 2
					if (statGoodSessions>0) 
					{ 
d852 1
a852 1
						cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) g_eMuleApp.stat_sessionSentBytes / (statGoodSessions+g_eMuleApp.m_pUploadQueue->GetUploadQueueLength())) ); 
d857 1
a857 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATAULSES) , GetResString(IDS_FSTAT_WAITING) ); 
d876 1
a876 1
					
d920 1
a920 1
				
d927 1
a927 1
					if (forceUpdate || stattree.IsExpanded(hup_tcb)) 
d933 1
a933 1
						//eklmn: sequence was replaced to loop... 
d938 1
a938 1
									UpDataClient = g_eMuleApp.m_pGlobPrefs->GetCumUpData((EnumClientTypes)j) 
d1064 1
a1064 1
	{		
d1067 1
a1067 1
		{			
d1134 1
a1134 1
			} // - End Connection -> Session -> Downloads Section		
d1138 1
a1138 1
		{			
d1232 1
a1232 1
				stattree.SetItemText(tvitime_st[x], cbuffer); x++;;
d1238 1
a1238 1
			// Current Server Duration				
d1262 1
a1262 1
				stattree.SetItemText(tvitime_tt[x], cbuffer); x++;;
d1295 1
a1295 1
							if (forceUpdate || stattree.IsExpanded(time_aap_up_hd[mx][0])) 
d1300 1
a1300 1
								//eklmn: sequence was replaced to loop... 
d1310 1
a1310 1
										
d1316 1
a1316 1
										stattree.SetItemText( time_aap_up_dc[mx][i] , cbuffer ); 
d1420 1
a1420 1
							if (forceUpdate || stattree.IsExpanded(time_aap_down_hd[mx][0])) 
d1425 1
a1425 1
								//eklmn: sequence was replaced to loop... 
d1441 1
a1441 1
										stattree.SetItemText( time_aap_down_dc[mx][i] , cbuffer ); 
d1526 2
a1527 2
	
	
d1534 1
a1534 1
	if (forceUpdate || stattree.IsExpanded(h_clients)) 
d1537 1
a1537 1
		
d1551 1
a1551 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_ONLISTCLIENTS), 0); 
d1556 1
a1556 1
		
d1559 1
a1559 1
		
d1565 1
a1565 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_ONLISTCLIENTS), totalclient); 
d1570 1
a1570 1
		
d1573 1
a1573 1
		
d1579 1
a1579 1
		if (forceUpdate || stattree.IsExpanded(hcliconnected)) 
d1583 1
a1583 1
				cbuffer.Format("%s: %u (%1.1f%%)", GetResString(IDS_STATS_CLIENT_MODS), totalMODs,100.0*totalMODs/totalMules); 
d1585 1
a1585 1
				cbuffer.Format("%s: %u (0.0%%)", GetResString(IDS_STATS_CLIENT_MODS), totalMODs); 
d1654 1
a1654 1
			//eklmn: sequence was replaced to loop... 
d1659 1
a1659 1
				if ((EnumClientTypes)j != SO_OLDEMULE) 
d1663 1
a1663 1
					else 
d1675 1
a1675 1
							if (forceUpdate || stattree.IsExpanded(clisoft[it]) || clients != 0) 
d1677 1
a1677 1
								//eklmn: since "other versions" must be always on the bottom of the list, let's delete it, 
d1712 1
a1712 1
									if (topcnt) 
d1723 1
a1723 1
									else 
d1742 1
a1742 1
								
d1760 1
a1760 1
		
d1773 2
a1774 2
	if (forceUpdate || stattree.IsExpanded(h_servers)) 
	{		
d1782 1
a1782 1
		{			
d1812 2
a1813 2
		if (forceUpdate || stattree.IsExpanded(hsrv_records)) 
		{			
d1826 1
a1826 1
	
d1829 1
a1829 1
	{		
d1853 2
a1854 2
		if (forceUpdate || stattree.IsExpanded(hshar_records)) 
		{			
d1920 1
a1920 1
void CStatisticsDlg::CreateStatsTree() 
d1923 1
a1923 1
	
d2020 1
a2020 1
		//time: cumulative		
d2024 1
a2024 1
			
d2029 1
a2029 1
			for(int x = 0; x<3; x++) 
d2033 1
a2033 1
					
d2072 1
a2072 1
		
d2112 7
a2118 7
	stattree.SetItemState(hconn_sg, TVIS_BOLD, TVIS_BOLD);	
	stattree.SetItemState(hconn_su, TVIS_BOLD, TVIS_BOLD);	
	stattree.SetItemState(hconn_sd, TVIS_BOLD, TVIS_BOLD);	
	stattree.SetItemState(hconn_tg, TVIS_BOLD, TVIS_BOLD);	
	stattree.SetItemState(hconn_tu, TVIS_BOLD, TVIS_BOLD);	
	stattree.SetItemState(hconn_td, TVIS_BOLD, TVIS_BOLD);	
	
d2125 1
a2125 1
	
d2153 1
a2153 1
void CStatisticsDlg::ShowInterval() 
d2162 2
a2163 2
		return;	
	
d2167 7
a2173 7
	
	
	if(g_eMuleApp.m_pGlobPrefs->GetTrafficOMeterInterval()==0) 
	{
		m_DownloadOMeter.SetXUnits(GetResString(IDS_STOPPED)); 
		m_UploadOMeter.SetXUnits(GetResString(IDS_STOPPED)); 
	} 
d2175 1
a2175 1
	{		
d2178 1
a2178 1
		m_DownloadOMeter.SetXUnits(buffer); 
d2191 1
a2191 1
	if (SetDownload) 
d2221 1
a2221 1
	}	
d2228 1
a2228 1
double CStatisticsDlg::GetAvgDownloadRate(int averageType) 
d2233 1
a2233 1
	if (g_eMuleApp.stat_transferStarttime==0) 
d2235 1
a2235 1
		
d2241 1
a2241 1
		if (dwRunTime_MS < 5000) 
d2245 2
a2246 2
	} 
	else 
d2248 1
a2248 1
		if (downrateHistory.empty()) 
d2250 1
a2250 1
		//Cax2 - we could use that formula... but it's faster if we compute that ratio beforehand, 
d2260 1
a2260 1
double CStatisticsDlg::GetAvgUploadRate(int averageType) 
d2265 1
a2265 1
	if (g_eMuleApp.stat_transferStarttime==0) 
d2268 1
a2268 1
	if (averageType == AVG_SESSION) 
d2273 1
a2273 1
		if (dwRunTime_MS < 5000) 
d2276 3
a2278 3
		return ((double)g_eMuleApp.stat_sessionSentBytes)/((double) dwRunTime_MS * 1.024); 
	} 
	else  
d2280 1
a2280 1
		if (uprateHistory.empty()) 
d2291 1
a2291 1
void CStatisticsDlg::RecordRate() 
d2294 2
a2295 2
	
	if (g_eMuleApp.stat_transferStarttime==0) 
d2305 1
a2305 1
	
d2309 2
a2310 2
	
	// limit to maxmins 
d2328 1
a2328 1
		
d2373 1
a2373 1
void CStatisticsDlg::SetCurrentRate(double uploadrate, double downloadrate) 
d2395 1
a2395 1
	
d2427 1
a2427 1
void CStatisticsDlg::RepaintMeters() 
d2456 1
a2456 1
	
d2460 1
a2460 1
	
d2464 1
a2464 1
	
d2488 1
a2488 1
	
@


1.99
log
@added Active Downloads to stats + some other changes
@
text
@d524 1
a524 1
				if (forceUpdate || stattree.IsExpanded(down_S[10]))
@


1.98
log
@Changed some code by other devs
@
text
@d481 4
a484 1
				// Active Downloads
d486 2
a487 2
				stattree.SetItemText( down_S[2] , cbuffer );
				// Total Size of Downloads
d489 1
a489 1
				stattree.SetItemText( down_S[3] , cbuffer );
d492 1
a492 1
				stattree.SetItemText( down_S[4] , cbuffer );
d495 2
a496 5
				double fPercent = 0.0;
				if(myBigStats[2] != 0)
					fPercent = ((ui64BytesTransferred*100)/(myBigStats[2])); //kuchin
				cbuffer.Format( GetResString( IDS_DWTOT_TCS ) , CastItoXBytes(ui64BytesTransferred), fPercent );
				stattree.SetItemText( down_S[5] , cbuffer );
d498 3
a500 3
				cbuffer.Format( GetResString( IDS_DWTOT_TSL ) , CastItoXBytes(myBigStats[3]) );
				stattree.SetItemText( down_S[6] , cbuffer );
				// Total Space Needed by Downloads
d502 1
a502 1
				stattree.SetItemText( down_S[7] , cbuffer );
d505 1
a505 1
				stattree.SetItemText( down_S[8] , cbuffer );
d520 1
a520 1
				stattree.SetItemText( down_S[9] , cbuffer );
d523 1
a523 1
				stattree.SetItemText( down_S[10] , cbuffer );
d565 2
a566 2
				stattree.SetItemText( down_S[11] , cbuffer );
				if (forceUpdate || stattree.IsExpanded(down_S[11]))
d591 1
a591 1
				stattree.SetItemText( down_S[12] , cbuffer );
d594 1
a594 1
				stattree.SetItemText( down_S[13] , cbuffer );
d597 1
a597 1
				stattree.SetItemText( down_S[14] , cbuffer );
d1973 1
a1973 1
		for(int i = 0; i<15; i++) down_S[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_down_session);
d1978 2
a1979 2
			for(int i = 0; i<STATS_DL_SOURCES_TYPE-3; i++) down_sources[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[10]);
			for(int i = 0; i<4; i++) down_ssessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[11]);
@


1.97
log
@added SUI and LowID stats + more accurate clients stats ouput
@
text
@d1547 1
a1547 1
		if (!totalclient )
d1554 1
a1554 1
			cbuffer.Format("%s: %u (0%%) | %u (0%%)", GetResString(IDS_STATS_SUI), myStats[14], myStats[15] );
d1557 1
a1557 1
			cbuffer.Format("%s: %u (0%%)", GetResString(IDS_LOWID), myStats[16] );
d1559 3
d1568 1
a1568 1
			cbuffer.Format("%s: %u (%1.1f%%) | %u (%1.1f%%)", GetResString(IDS_STATS_SUI), myStats[14], static_cast<double>(100*myStats[14])/totalclient, myStats[15], static_cast<double>(100*myStats[15])/totalclient );
d1571 1
a1571 1
			cbuffer.Format("%s: %u (%1.1f%%)", GetResString(IDS_LOWID), myStats[16], static_cast<double>(100*myStats[16])/totalclient );
d1573 3
d1750 2
a1751 2
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_PROBLEMATIC), myStats[17]);stattree.SetItemText(cligen[2], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_BANNED), g_eMuleApp.m_pUploadQueue->GetBanCount()); stattree.SetItemText(cligen[3], cbuffer);
d1759 1
a1759 1
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_CLIENTS), g_eMuleApp.m_lTotalNumUnfairClients); stattree.SetItemText(cligen[4], cbuffer);
d2067 1
a2067 1
			for(int i = 0; i<5; i++) cligen[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_clients);	// general clients stats
@


1.96
log
@extended filtered stats
@
text
@a71 1
	// -khaos--+++> Menu button.
a72 1
	// <-----khaos-
a108 1
	// <-----khaos- End Additions
d1540 1
a1540 1
		uint32	myStats[14];
d1550 9
a1558 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_ONLISTCLIENTS), 0); stattree.SetItemText(hcliconnected, cbuffer);
d1561 10
a1570 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_ONLISTCLIENTS), totalclient); stattree.SetItemText(hcliconnected, cbuffer);
d1659 1
a1659 1
					percentClients = 100*clients/totalclient;
d1744 2
a1745 2
		/* cbuffer.Format("%s: %u", GetResString(IDS_STATS_PROBLEMATIC), myStats[6]);stattree.SetItemText(cligen[0], cbuffer); i++;*/
		cbuffer.Format("%s: %u", GetResString(IDS_BANNED), g_eMuleApp.m_pUploadQueue->GetBanCount()); stattree.SetItemText(cligen[0], cbuffer);
d1753 1
a1753 1
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_CLIENTS), g_eMuleApp.m_lTotalNumUnfairClients); stattree.SetItemText(cligen[1], cbuffer);
d2061 1
a2061 1
		cligen[0] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_clients);	//banned
a2063 1
		cligen[1] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_clients);	//unfair clients
@


1.95
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@a1731 1
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_FILTEREDCLIENTS),g_eMuleApp.stat_filteredclients); stattree.SetItemText(cligen[1], cbuffer);
d1733 7
a1739 1
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_CLIENTS), g_eMuleApp.m_lTotalNumUnfairClients); stattree.SetItemText(cligen[2], cbuffer);
d2047 4
a2050 1
		for(int i = 0; i<3; i++) cligen[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_clients);
@


1.94
log
@speed optimization & output in stats of the feature "countermeasures against unfair client"
@
text
@d1734 1
a1734 1
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_CLIENTS), g_eMuleApp.m_dwTotalNumUnfairClients); stattree.SetItemText(cligen[2], cbuffer);
d1737 4
a1740 4
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_ACTIONS), g_eMuleApp.m_dwTotalNumUnfairActions); stattree.SetItemText(hUnfairAction, cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_ACTION_MH),g_eMuleApp.m_dwTotalNumUseMyHashActions); stattree.SetItemText(hUnfairActionItems[0], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_ACTION_HC),g_eMuleApp.m_dwTotalNumHashChangeActions); stattree.SetItemText(hUnfairActionItems[1], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_UNFAIR_ACTION_BN),g_eMuleApp.m_dwTotalNumStolenNameActions); stattree.SetItemText(hUnfairActionItems[2], cbuffer);
@


1.93
log
@replaced Athlazan mod by Pawcio mod (five times more users)
@
text
@d1734 7
d2042 3
a2044 1
		for(int i = 0; i<2; i++) cligen[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_clients);
@


1.92
log
@Minor fix + Formatting + Hebrew localization update + Translation update
@
text
@d2502 1
a2502 1
			sMODName = "Athlazan";
@


1.91
log
@Correct localization of decimal point & thousands seperator + Correct encoding for Hebrew language in WebServer
@
text
@d112 1
a112 1
	
a208 1
	// eklmn(khaos) : init new variables 
d217 1
a217 1
	AddAnchor(IDC_STATTREE,TOP_LEFT, BOTTOM_CENTER );	// acchor for new tree
d292 2
a293 1
	if (cum_UL_maximal<maxUp) {
d299 2
a300 1
	if (cum_DL_maximal < maxDown) {
d306 2
a307 1
	if (cum_DL_max_average<cum_DL_average) {
d313 2
a314 1
	if (cum_UL_max_average<cum_UL_average) {
d321 2
a322 1
	if (uploadrate > 0 || downloadrate > 0) {
d326 2
a327 1
		if (uploadrate > 0) {
d332 2
a333 1
		if (downloadrate > 0) {
d339 2
a340 1
	if (uploadrate == 0 && downloadrate == 0 && (time_thisTransfer > 0 || start_timeTransfers > 0)) {
d346 2
a347 1
	if (uploadrate == 0 && (time_thisUpload > 0 || start_timeUploads > 0)) {
d353 2
a354 1
	if (downloadrate == 0 && (time_thisDownload > 0 || start_timeDownloads > 0)) {
d366 2
a367 1
void CStatisticsDlg::ShowStatistics(bool forceUpdate) {
d377 2
a378 1
	if (forceUpdate || stattree.IsExpanded(h_transfer)) {
d386 2
a387 1
			if (g_eMuleApp.stat_sessionReceivedBytes<g_eMuleApp.stat_sessionSentBytes) {
d390 3
a392 1
			} else {
d399 1
a399 1
			cbuffer.Format("%s %s", GetResString(IDS_STATS_SRATIO), GetResString(IDS_FSTAT_WAITING)); // Localize
d409 3
a411 1
			} else {
d416 3
a418 2
		else {
			cbuffer.Format("%s %s", GetResString(IDS_STATS_CRATIO), GetResString(IDS_FSTAT_WAITING)); // Localize
d422 2
a423 1
		if (forceUpdate || stattree.IsExpanded(h_download)) {
d428 2
a429 1
			if (forceUpdate || stattree.IsExpanded(h_down_session)) {
d433 2
a434 1
				if (forceUpdate || stattree.IsExpanded(down_S[0])) {
d460 2
a461 1
					if (forceUpdate || stattree.IsExpanded(hdown_spb)) {
d569 2
a570 1
				if (forceUpdate || stattree.IsExpanded(down_S[11])) {
d573 2
a574 1
					if (statGoodSessions > 0) {
d576 2
a577 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATADLSES) , CastItoXBytes( (uint64) g_eMuleApp.stat_sessionReceivedBytes / statGoodSessions ) ); }
d609 2
a610 1
				if (forceUpdate || stattree.IsExpanded(hdown_soh)) {
d628 2
a629 1
			if (forceUpdate || stattree.IsExpanded(h_down_total)) {
d633 2
a634 1
				if (forceUpdate || stattree.IsExpanded(down_T[0])) {
d661 2
a662 1
					if (forceUpdate || stattree.IsExpanded(hdown_tpb)) {
d690 2
a691 1
				if (forceUpdate || stattree.IsExpanded(down_T[2])) {
d693 2
a694 1
					if (statGoodSessions > 0) {
d698 2
a699 1
					else {
d729 2
a730 1
				if (DownOHTotal == 0 || DownOHTotalPackets == 0) {
d737 2
a738 1
				if (forceUpdate || stattree.IsExpanded(hdown_toh)) {
d756 2
a757 1
		if (forceUpdate || stattree.IsExpanded(h_upload)) {
d761 2
a762 1
			if (forceUpdate || stattree.IsExpanded(h_up_session)) {
d766 2
a767 1
				if (forceUpdate || stattree.IsExpanded(up_S[0])) {
d794 2
a795 1
					if (forceUpdate || stattree.IsExpanded(hup_spb)) {
d815 2
a816 1
					if (forceUpdate || stattree.IsExpanded(hup_ssb)) {
d857 2
a858 1
					else {
d903 2
a904 1
				if (forceUpdate || stattree.IsExpanded(hup_soh)) {
d921 2
a922 1
			if (forceUpdate || stattree.IsExpanded(h_up_total)) {
d927 2
a928 1
				if (forceUpdate || stattree.IsExpanded(up_T[0])) {
d956 2
a957 1
					if (forceUpdate || stattree.IsExpanded(hup_tpb)) {
d977 2
a978 1
					if (forceUpdate || stattree.IsExpanded(hup_tsb)) {
d1003 2
a1004 1
				if (forceUpdate || stattree.IsExpanded(up_T[1])) {
d1006 2
a1007 1
					if (statGoodSessions>0) { // Blackholes are when God divided by 0
d1009 4
a1012 2
						cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) (g_eMuleApp.stat_sessionSentBytes + g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()) / statGoodSessions) ); }
					else {
d1014 2
a1015 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATAULSES) , GetResString(IDS_FSTAT_WAITING) ); }
d1035 2
a1036 1
				if (UpOHTotal == 0 || UpOHTotalPackets == 0) {
d1044 2
a1045 1
				if (forceUpdate || stattree.IsExpanded(hup_toh)) {
d1066 2
a1067 1
	if (forceUpdate || stattree.IsExpanded(h_connection)) {		
d1069 2
a1070 1
		if (forceUpdate || stattree.IsExpanded(h_conn_session)) {			
d1072 2
a1073 1
			if (forceUpdate || stattree.IsExpanded(hconn_sg)) {
d1091 2
a1092 1
				if( m_itemp != m_ilastMaxConnReached ){
d1100 2
a1101 1
				else if( m_itemp == 0 ){
d1109 2
a1110 1
			if (forceUpdate || stattree.IsExpanded(hconn_su)) {
d1113 1
a1113 1
				cbuffer.Format("%s: %.2f KB/s", GetResString(IDS_ST_UPLOAD), rateUp);			stattree.SetItemText(conn_su[i], cbuffer); i++;
d1117 1
a1117 1
				cbuffer.Format("%s: %.2f KB/s", GetResString(IDS_STATS_MAXUL), maxUp);			stattree.SetItemText(conn_su[i], cbuffer); i++;
d1121 1
a1121 1
				cbuffer.Format("%s: %.2f KB/s", GetResString(IDS_STATS_MAXAVGUL), maxUpavg);	stattree.SetItemText(conn_su[i], cbuffer); i++;
d1124 2
a1125 1
			if (forceUpdate || stattree.IsExpanded(hconn_sd)) {
d1128 1
a1128 1
				cbuffer.Format("%s: %.2f KB/s", GetResString(IDS_ST_DOWNLOAD), rateDown);		stattree.SetItemText(conn_sd[i], cbuffer); i++;
d1140 2
a1141 1
		if (forceUpdate || stattree.IsExpanded(h_conn_total)) {			
d1143 2
a1144 1
			if (forceUpdate || stattree.IsExpanded(hconn_tg)) {
d1165 2
a1166 1
			if (forceUpdate || stattree.IsExpanded(hconn_tu)) {
d1172 1
a1172 1
				cbuffer.Format("%s: %.2f KB/s", GetResString(IDS_STATS_MAXUL), cum_UL_maximal);
d1175 1
a1175 1
				cbuffer.Format("%s: %.2f KB/s", GetResString(IDS_STATS_MAXAVGUL), cum_UL_max_average);
d1179 2
a1180 1
			if (forceUpdate || stattree.IsExpanded(hconn_td)) {
d1197 2
a1198 1
	if (forceUpdate || stattree.IsExpanded(h_time)) {
d1204 2
a1205 1
		if (g_eMuleApp.m_pGlobPrefs->GetStatsLastResetLng()) {
d1212 2
a1213 1
		else {
d1219 2
a1220 1
		if (forceUpdate || stattree.IsExpanded(htime_s)) {
d1230 2
a1231 1
			if (forceUpdate || stattree.IsExpanded(tvitime_s[i])) {
d1239 2
a1240 1
			} i++;
d1249 2
a1250 1
		if (forceUpdate || stattree.IsExpanded(htime_t)) {
d1260 2
a1261 1
			if (forceUpdate || stattree.IsExpanded(tvitime_t[i])) {
d1269 2
a1270 1
			} i++;
d1276 2
a1277 1
		if ( (forceUpdate || stattree.IsExpanded(htime_aap)) && timeDiff > 0 ) {
d1285 4
a1288 2
			for (int mx = 0; mx<3; mx++) {
				if (forceUpdate || stattree.IsExpanded(time_aaph[mx])) {
d1290 2
a1291 1
					if (forceUpdate || stattree.IsExpanded(time_aap_hup[mx])) {
d1295 2
a1296 1
						if (forceUpdate || stattree.IsExpanded(time_aap_up[mx][0])) {
d1324 2
a1325 1
							if (forceUpdate || stattree.IsExpanded(time_aap_up_hd[mx][1])) {
d1345 2
a1346 1
							if (forceUpdate || stattree.IsExpanded(time_aap_up_hd[mx][2])) {
d1372 2
a1373 1
						if (forceUpdate || stattree.IsExpanded(time_aap_up[mx][1])) {
d1396 2
a1397 1
						if (forceUpdate || stattree.IsExpanded(time_aap_up[mx][2])) {
d1414 2
a1415 1
					if (forceUpdate || stattree.IsExpanded(time_aap_hdown[mx])) {
d1420 2
a1421 1
						if (forceUpdate || stattree.IsExpanded(time_aap_down[mx][0])) {
d1449 2
a1450 1
							if (forceUpdate || stattree.IsExpanded(time_aap_down_hd[mx][1])) {
d1479 2
a1480 1
						if (forceUpdate || stattree.IsExpanded(time_aap_down[mx][2])) {
d1508 2
a1509 1
						if (forceUpdate || stattree.IsExpanded(time_aap_down[mx][6])) {
d1612 4
a1615 1
									if (im != 7 && clisoftMODs[7] != NULL) {stattree.DeleteItem(clisoftMODs[7]); clisoftMODs[7] = NULL;}
d1749 2
a1750 1
		if (forceUpdate || stattree.IsExpanded(srv[0])) {			
d1773 3
a1775 1
		} else {
d1796 2
a1797 1
	if (forceUpdate || stattree.IsExpanded(h_shared)) {		
d1807 2
a1808 1
		else {
d1867 6
d2026 9
a2034 3
				for (int im = 0; im<8; im++) { clisoftMODs[im] = NULL; m_nMODs[im] = 0; }
			for(int i = 1; i<(SO_LAST-1); i++) clisoft[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hcliconnected /*hclisoft*/);
			for (int i = 0; i<(SO_LAST-1); i++) { cli_versions_other[i] = NULL; for (int j=0; j<4;j++) cli_versions[i][j] = NULL;}
d2057 2
a2058 1
	for(int i = 0; i<3; i++) {
d2086 2
a2087 1
	if (sTreeMask.IsEmpty()) sTreeMask = "111000000100000110000010000011110000010010";
d2267 2
a2268 1
	if (tickNow - timeHistory.front() < nUpdateTime) return;
d2298 2
a2299 1
	if (peakconnections > g_eMuleApp.m_pGlobPrefs->GetConnPeakConnections()) g_eMuleApp.m_pGlobPrefs->Add2ConnPeakConnections(peakconnections);
d2341 2
a2342 1
	if (!g_eMuleApp.m_pdlgEmule->IsRunning()) return;
d2357 2
a2358 1
	if (maxDown<downloadrate) maxDown=downloadrate;
d2453 4
a2456 2
	if (legendNr==1){
		if (!m_Led1[ElmtIdx]) m_Led1[ElmtIdx].Create(WS_VISIBLE | WS_CHILD, Rect, this);
d2459 5
a2463 2
	} else if (legendNr==2) {
		if (!m_Led2[ElmtIdx]) m_Led2[ElmtIdx].Create( WS_VISIBLE | WS_CHILD, Rect, this);
d2466 5
a2470 2
	} else if (legendNr==3){
		if (!m_Led3[ElmtIdx]) m_Led3[ElmtIdx].Create(WS_VISIBLE | WS_CHILD, Rect, this);
@


1.90
log
@Small fixes
@
text
@d1663 1
a1663 1
			cbuffer.Format("%s: %s",GetResString(IDS_SF_WUSER),CastItoIdots(servuser));stattree.SetItemText(srv_w[0], cbuffer);
d1665 1
a1665 1
			cbuffer.Format("%s: %s",GetResString(IDS_SF_WFILE),CastItoIdots(servfile));stattree.SetItemText(srv_w[1], cbuffer);
d1676 1
a1676 1
		cbuffer.Format("%s: %s",GetResString(IDS_SF_USER),CastItoIdots(servtuser));stattree.SetItemText(srv[4], cbuffer);
d1678 1
a1678 1
		cbuffer.Format("%s: %s",GetResString(IDS_SF_FILE),CastItoIdots(servtfile));stattree.SetItemText(srv[5], cbuffer);
d1695 1
a1695 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_SVRECUSERS), CastItoIdots(g_eMuleApp.m_pGlobPrefs->GetSrvrsMostUsersOnline()) );
d1698 1
a1698 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_SVRECFILES), CastItoIdots(g_eMuleApp.m_pGlobPrefs->GetSrvrsMostFilesAvail()) );
@


1.89
log
@Small fix
@
text
@d283 6
a288 1
void CStatisticsDlg::UpdateConnectionStats (double uploadrate, double downloadrate){
d2230 2
d2234 3
a2236 1
	EMULE_TRY
a2258 1

@


1.88
log
@bugfix: incorrect UL average value
@
text
@d2175 4
a2181 1
#endif //OLD_SOCKETS_ENABLED
a2186 1
#ifdef OLD_SOCKETS_ENABLED
@


1.87
log
@Fix for my fix (statistics for corruption/compression gain)
@
text
@d2083 4
d2090 12
a2101 7
		if (g_eMuleApp.stat_transferStarttime ==0) return 0;
		DWORD running=(GetTickCount()-g_eMuleApp.stat_transferStarttime)/1000+.5;		//Cax2 - not really needed here, but the math is 'right' now!
		if (running<5) return 0;
		return (g_eMuleApp.stat_sessionReceivedBytes/1024.0) / running;
	} else {
		if (downrateHistory.empty()) return 0;
		//return ((downrateHistory.front()-downrateHistory.back())/1024.0f)*1000/(timeHistory.front()-timeHistory.back()+.5);
d2104 1
a2104 1
		return (g_eMuleApp.stat_sessionReceivedBytes-downrateHistory.back())*.9765/(GetTickCount()-timeHistory.back());
d2116 4
d2122 1
a2122 1
		if (g_eMuleApp.stat_transferStarttime==0) return 0;
d2124 10
a2133 6
		DWORD running=(GetTickCount()-g_eMuleApp.stat_transferStarttime)/1000+.5;		//Cax2 - stops the sudden session upload average 'jump' at the beginning.
		if (running<5) return 0;

		return (g_eMuleApp.stat_sessionSentBytes/1024) / running;
	} else  {
		if (uprateHistory.empty()) return 0;
d2135 1
a2135 1
		return (g_eMuleApp.stat_sessionSentBytes-uprateHistory.back())*.9765/(GetTickCount()-timeHistory.back());
d2150 1
a2150 1
	DWORD tickNow=GetTickCount();
@


1.86
log
@Formatting, comments, and name changes.
float => double conversion
@
text
@d684 1
a684 1
				cbuffer.Format( GetResString( IDS_STATS_GAINCOMP ) , CastItoXBytes( myBigStats[1] + g_eMuleApp.m_pGlobPrefs->GetSavedFromCompression() ) );
d687 1
a687 1
				cbuffer.Format( GetResString( IDS_STATS_LOSTCORRUPT ) , CastItoXBytes( myBigStats[0] + g_eMuleApp.m_pGlobPrefs->GetLostFromCorruption() ) );
@


1.85
log
@Formatting, comments, and name changes.
@
text
@d283 1
a283 1
void CStatisticsDlg::UpdateConnectionStats (float uploadrate, float downloadrate){
d371 1
a371 1
				cbuffer.Format("%s %.2f : 1",GetResString(IDS_STATS_SRATIO),(float)g_eMuleApp.stat_sessionSentBytes/g_eMuleApp.stat_sessionReceivedBytes);
d374 1
a374 1
				cbuffer.Format("%s 1 : %.2f",GetResString(IDS_STATS_SRATIO),(float)g_eMuleApp.stat_sessionReceivedBytes/g_eMuleApp.stat_sessionSentBytes);
d388 1
a388 1
				cbuffer.Format("%s %.2f : 1",GetResString(IDS_STATS_CRATIO),(float)(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded())/(g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded()));
d391 1
a391 1
				cbuffer.Format("%s 1 : %.2f",GetResString(IDS_STATS_CRATIO),(float)(g_eMuleApp.stat_sessionReceivedBytes+g_eMuleApp.m_pGlobPrefs->GetTotalDownloaded())/(g_eMuleApp.stat_sessionSentBytes+g_eMuleApp.m_pGlobPrefs->GetTotalUploaded()));
d469 1
a469 1
				float fPercent = 0.0f;
d471 1
a471 1
					fPercent = (float)((ui64BytesTransferred*100)/(myBigStats[2])); //kuchin
d1057 1
a1057 1
				float myAverageUpRate = GetAvgUploadRate(AVG_SESSION);
d1071 1
a1071 1
				float myAverageDownRate = GetAvgDownloadRate(AVG_SESSION);
d1473 1
a1473 1
				cbuffer.Format("%s: %u (%1.1f%%)", GetResString(IDS_STATS_CLIENT_MODS), totalMODs,(float)100*totalMODs/totalMules); 
d1537 1
a1537 1
						cbuffer.Format("%s: %u (%1.1f%%)", GetMODType(im), m_nMODs[im], (float)100*m_nMODs[im]/totalMules);
d1603 1
a1603 1
										cbuffer.Format(_T("v%s: %i (%1.1f%%)"), GetClientVersionString((EnumClientTypes)j,topver), topcnt, (float)topcnt/clients*100);
d1623 1
a1623 1
									cbuffer.Format("%s: %i (%1.1f%%)",GetResString(IDS_STATS_OTHERS),(clients-SubTotal),(float)100*(clients-SubTotal)/clients);
d1652 1
a1652 1
		float	servocc;
d2080 1
a2080 1
float CStatisticsDlg::GetAvgDownloadRate(int averageType) 
d2087 1
a2087 1
		DWORD running=(float)(GetTickCount()-g_eMuleApp.stat_transferStarttime)/1000+.5;		//Cax2 - not really needed here, but the math is 'right' now!
d2089 1
a2089 1
		return (float)(g_eMuleApp.stat_sessionReceivedBytes/1024) / running;
d2103 1
a2103 1
float CStatisticsDlg::GetAvgUploadRate(int averageType) 
d2111 1
a2111 1
		DWORD running=(float)(GetTickCount()-g_eMuleApp.stat_transferStarttime)/1000+.5;		//Cax2 - stops the sudden session upload average 'jump' at the beginning.
d2114 1
a2114 1
		return (float)(g_eMuleApp.stat_sessionSentBytes/1024) / running;
d2171 5
a2175 5
		float percent;
		percent = (float)((float)(totalconnectionchecks-1)/(float)totalconnectionchecks);
		if( percent > .99f )
			percent = (float).99f;
		averageconnections = (averageconnections*percent) + (float)((float)activeconnections*(float)(1.0f-percent));
d2182 1
a2182 1
float CStatisticsDlg::GetMaxConPerFiveModifier()
d2204 1
a2204 1
void CStatisticsDlg::SetCurrentRate(float uploadrate, float downloadrate) 
@


1.84
log
@1) Maella MOD replaced by The Black Hand
2) init of variables in constructor
@
text
@d89 1
a89 1
	// Setup ImageList For Tree (2-18-03)
@


1.83
log
@DownloadListCtrl rewrite.
Changed Category ID types to an enumeration.
More async update work.
The usual formatting, comments, and name changes.
@
text
@d43 5
d2130 2
a2131 1
	if (g_eMuleApp.stat_transferStarttime==0) return;
d2138 1
a2138 1
	if (tickNow-timeHistory.front() < nUpdateTime) return;
a2151 1

d2350 1
a2350 1
			sMODName = "Maella";
@


1.82
log
@some old comments deleted
@
text
@d2390 2
@


1.81
log
@Formatting, comments, and name changes.
Removed #includes for "memcpy_amd.h".
@
text
@d73 1
a73 1

a74 1

d274 1
a274 1

d345 1
a345 2
// <-----khaos-

d1740 1
a1740 2

// -khaos--+++> Various changes in Localize() and a new button event...
d1766 1
a1766 2
// End Localize

d1778 1
a1778 2
// <-----khaos-

d1985 1
a1985 1

d1999 1
a1999 1

d2033 1
a2033 1

d2059 1
a2059 1

d2070 1
a2070 1

d2074 1
a2074 1

d2097 1
a2097 1

d2120 1
a2120 1

d2149 1
a2149 3



d2247 1
a2247 1

d2295 1
a2295 2

// v- eklmn: bugfix(00): resource cleanup due to CResizableDialog
d2300 1
a2300 2
// ^- eklmn: bugfix(00): resource cleanup due to CResizableDialog

d2326 1
a2326 1

d2367 1
a2367 1

@


1.80
log
@sorting client-statistics by popularity (and version)
@
text
@d2186 1
a2186 1
	//This is a alpha test.. Will clean up for b version.
@


1.79
log
@Formatting, comments, and name changes.
@
text
@d1561 1
a1561 1
								//eklmn: since "other versions" must be alwasy on the bottom of the list, let's delete it, 
d1571 2
a1572 2
								uint32	currtop = 0;
								uint32	lasttop = 0xFFFFFFFF;
d1579 1
a1579 1
									//double topper=0;
d1585 2
a1586 1
										if(currtop<ver && ver<lasttop)
a1587 1
											//if (ver==0xFFFFFFFF) continue;
d1590 1
a1590 1
											currtop = ver;
d2186 1
a2186 1
//	This is a alpha test.. Will clean up for b version.
@


1.78
log
@thousands dots for some big stats values - asked by netwolf
@
text
@d2162 1
a2162 1
	activeconnections = g_eMuleApp.m_pListenSocket->GetOpenSockets(); // netwolf 07.05.03 (moved here from CStatisticsDlg::SetCurrentRate())
d2183 5
a2188 4
float CStatisticsDlg::GetMaxConperFiveModifier()
{
	//This is a alpha test.. Will clean up for b version.
	float SpikeSize = 0;
d2190 1
a2190 1
	SpikeSize = g_eMuleApp.m_pListenSocket->GetOpenSockets() - averageconnections ;
d2192 1
a2192 1
	if ( SpikeSize < 1 )
d2194 5
a2198 2
	float SpikeTolerance = 25*(float)g_eMuleApp.m_pGlobPrefs->GetMaxConperFive()/(float)10;
	if ( SpikeSize > SpikeTolerance )
d2200 4
a2203 2
	float Modifier = (1-(SpikeSize/SpikeTolerance));
	return Modifier;
d2205 1
a2205 1

@


1.77
log
@variables init into constructor
@
text
@d1655 1
a1655 1
			cbuffer.Format("%s: %i",GetResString(IDS_SF_WUSER),servuser);stattree.SetItemText(srv_w[0], cbuffer);
d1657 1
a1657 1
			cbuffer.Format("%s: %i",GetResString(IDS_SF_WFILE),servfile);stattree.SetItemText(srv_w[1], cbuffer);
d1668 1
a1668 1
		cbuffer.Format("%s: %i",GetResString(IDS_SF_USER),servtuser);stattree.SetItemText(srv[4], cbuffer);
d1670 1
a1670 1
		cbuffer.Format("%s: %i",GetResString(IDS_SF_FILE),servtfile);stattree.SetItemText(srv[5], cbuffer);
d1687 1
a1687 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_SVRECUSERS), g_eMuleApp.m_pGlobPrefs->GetSrvrsMostUsersOnline() );
d1690 1
a1690 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_SVRECFILES), g_eMuleApp.m_pGlobPrefs->GetSrvrsMostFilesAvail() );
@


1.76
log
@Localization fixes.
@
text
@d41 2
a42 1

@


1.75
log
@Stats - added free disk space after download completed
@
text
@d93 1
a93 1
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_DIRECTDOWNLOAD));	// Transfer > Download
d101 1
a101 1
	imagelistStatTree.Add(g_eMuleApp.LoadIcon(IDI_TVI_MONTH));		// Time > Averages and Projections > Monthly
a102 19
/*
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_TVI_GENERIC));		// Dots & Arrow (Default icon for stats)
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_UP1DOWN1));			// Transfer
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_CONNECTEDHIGH));		// Connection
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_USER));				// Clients
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_PREF_SERVER));		// Server
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_SHAREDFILES));		// Shared Files
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_UPLOAD));				// Transfer > Upload
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_DIRECTDOWNLOAD));	// Transfer > Download
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_SMALLSTATISTICS));	// Session Sections
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_TVI_CUMULATIVE));		// Cumulative Sections
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_PREF_TWEAK));			// Records
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_PREF_CONNECTION));	// Connection > General
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_PREF_SCHEDULER));		// Time Section
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_PREF_STATISTICS));	// Time > Averages and Projections
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_TVI_DAY));			// Time > Averages and Projections > Daily
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_TVI_MONTH));		// Time > Averages and Projections > Monthly
	imagelistStatTree.Add(AfxGetApp()->LoadIcon(IDI_TVI_YEAR));			// Time > Averages and Projections > Yearly
*/
d1765 1
a2123 58

/*
// Changed these two functions (khaos)...
float CStatisticsDlg::GetAvgDownloadRate(int averageType) {
	DWORD running;
	switch(averageType) {
		case AVG_SESSION:
			if (g_eMuleApp.stat_transferStarttime == 0) return 0;            
			running=(GetTickCount()-g_eMuleApp.stat_transferStarttime)/1000;
			if (running<5) return 0;
			return (float) (g_eMuleApp.stat_sessionReceivedBytes/1024) / running;

		case AVG_TOTAL:
			if (g_eMuleApp.stat_transferStarttime == 0) return g_eMuleApp.m_pGlobPrefs->GetConnAvgDownRate();
			running=(GetTickCount()-g_eMuleApp.stat_transferStarttime)/1000;
			if (running<5) return g_eMuleApp.m_pGlobPrefs->GetConnAvgDownRate();
			return (float) ((( (float) (g_eMuleApp.stat_sessionReceivedBytes/1024) / running ) + g_eMuleApp.m_pGlobPrefs->GetConnAvgDownRate() ) / 2 );

		default:
			// By BadWolf - Accurate data rate Calculation
			if (downrateHistory.size()==0) return 0;
			float deltat = (float)(downrateHistory.front().timestamp - downrateHistory.back().timestamp) / 1000.0;
			if (deltat > 0.0) 
				return (float)((float)(downrateHistory.front().datalen-downrateHistory.back().datalen) / deltat)/1024;
			else
				return 0;
			// END By BadWolf - Accurate data rate Calculation
	}
}

float CStatisticsDlg::GetAvgUploadRate(int averageType) {
	DWORD running;
	switch(averageType) {
		case AVG_SESSION:
			if (g_eMuleApp.stat_transferStarttime == 0) return 0;            
			running=(GetTickCount()-g_eMuleApp.stat_transferStarttime)/1000;
			if (running<5) return 0;
			return (float) (g_eMuleApp.stat_sessionSentBytes/1024) / running;

		case AVG_TOTAL:
			if (g_eMuleApp.stat_transferStarttime == 0) return g_eMuleApp.m_pGlobPrefs->GetConnAvgUpRate();
			running=(GetTickCount()-g_eMuleApp.stat_transferStarttime)/1000;
			if (running<5) return g_eMuleApp.m_pGlobPrefs->GetConnAvgUpRate();
			return (float) ((( (float) (g_eMuleApp.stat_sessionSentBytes/1024) / running ) + g_eMuleApp.m_pGlobPrefs->GetConnAvgUpRate() ) / 2 );

		default:
			// By BadWolf - Accurate data rate Calculation
			if (uprateHistory.size()==0) return 0;
			float deltat = (float)(uprateHistory.front().timestamp - uprateHistory.back().timestamp) / 1000.0;
			if (deltat > 0.0) 
				return (float)((float)(uprateHistory.front().datalen-uprateHistory.back().datalen) / deltat)/1024;
			else
				return 0;
			// END By BadWolf - Accurate data rate Calculation
	}
}
// <-----khaos-
*/
@


1.74
log
@Formatting, comments, and name changes.
@
text
@d507 5
a511 1
					cbuffer.Format( GetResString( IDS_DWTOT_FS ) , CastItoXBytes(t_FreeBytes) );
@


1.73
log
@Completed statistics fix (now new values stored in preferences)
@
text
@d1042 1
a1042 1
				uint32 m_itemp = g_eMuleApp.m_pListenSocket->GetMaxConnectionReached();
d1106 1
a1106 1
				cbuffer.Format("%s: %i", GetResString(IDS_SF_MAXCONLIMITREACHED), g_eMuleApp.m_pListenSocket->GetMaxConnectionReached() + g_eMuleApp.m_pGlobPrefs->GetConnMaxConnLimitReached());
d2157 1
a2157 1
			// By BadWolf - Accurate dataRate Calculation
d2164 1
a2164 1
			// END By BadWolf - Accurate dataRate Calculation
d2184 1
a2184 1
			// By BadWolf - Accurate dataRate Calculation
d2191 1
a2191 1
			// END By BadWolf - Accurate dataRate Calculation
@


1.72
log
@Some statistics fixes
@
text
@d722 3
d1011 3
d1334 3
d1441 3
d1844 1
a1844 1
			for(int i = 0; i<3; i++) up_toh[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_toh);
d1869 2
a1870 2
			for(int i = 0; i<3; i++) down_toh[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hdown_toh);
			
d1918 1
a1918 1
				for(int i = 0; i<3; i++) time_aap_up_oh[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_up[x][2]);
d1927 1
a1927 1
				for(int i = 0; i<3; i++) time_aap_down_oh[x][i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), time_aap_down[x][6]);
@


1.71
log
@Fixed a NEW_SOCKETS compiler warning.
@
text
@d602 3
d878 3
d1819 1
a1819 1
				for(int i = 0; i<3; i++) up_soh[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hup_soh);
d1846 1
a1846 1
			for(int i = 0; i<3; i++) down_soh[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hdown_soh);
d1921 2
a1922 2
			//hclisoft = stattree.InsertItem(GetResString(IDS_STATS_CLIENT_SOFT_TYPE),hcliconnected);		// Client Software Section
				hclisoftMODs = stattree.InsertItem(GetResString(IDS_STATS_CLIENT_MODS), hcliconnected /*hclisoft*/);	// MODs Section
d1924 1
a1924 1
			for(int i = 0; i<(SO_LAST-1); i++) clisoft[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hcliconnected /*hclisoft*/);
@


1.70
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d2240 1
a2240 1
	float SpikeSize;
@


1.69
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@d23 1
a23 1
#include "uploadqueue.h"
d86 17
a102 17
	imagelistStatTree.Add(theApp.LoadIcon(IDI_TVI_GENERIC));		// Dots & Arrow (Default icon for stats)
	imagelistStatTree.Add(theApp.LoadIcon(IDI_UP1DOWN1));			// Transfer
	imagelistStatTree.Add(theApp.LoadIcon(IDI_CONNECTEDHIGH));		// Connection
	imagelistStatTree.Add(theApp.LoadIcon(IDI_USER));				// Clients
	imagelistStatTree.Add(theApp.LoadIcon(IDI_PREF_SERVER));		// Server
	imagelistStatTree.Add(theApp.LoadIcon(IDI_SHAREDFILES));		// Shared Files
	imagelistStatTree.Add(theApp.LoadIcon(IDI_UPLOAD));				// Transfer > Upload
	imagelistStatTree.Add(theApp.LoadIcon(IDI_DIRECTDOWNLOAD));	// Transfer > Download
	imagelistStatTree.Add(theApp.LoadIcon(IDI_SMALLSTATISTICS));	// Session Sections
	imagelistStatTree.Add(theApp.LoadIcon(IDI_TVI_CUMULATIVE));		// Cumulative Sections
	imagelistStatTree.Add(theApp.LoadIcon(IDI_PREF_TWEAK));			// Records
	imagelistStatTree.Add(theApp.LoadIcon(IDI_PREF_CONNECTION));	// Connection > General
	imagelistStatTree.Add(theApp.LoadIcon(IDI_PREF_SCHEDULER));		// Time Section
	imagelistStatTree.Add(theApp.LoadIcon(IDI_PREF_STATISTICS));	// Time > Averages and Projections
	imagelistStatTree.Add(theApp.LoadIcon(IDI_TVI_DAY));			// Time > Averages and Projections > Daily
	imagelistStatTree.Add(theApp.LoadIcon(IDI_TVI_MONTH));		// Time > Averages and Projections > Monthly
	imagelistStatTree.Add(theApp.LoadIcon(IDI_TVI_YEAR));			// Time > Averages and Projections > Yearly
d133 2
a134 2
	int iMaxDlGraph = int((theApp.glob_prefs->GetMaxGraphDownloadRate()/10.0)+0.99)*10;
	int iMaxUlGraph = int((theApp.glob_prefs->GetMaxGraphUploadRate()/4.0)+0.99)*4;
d137 1
a137 1
	int iStatYGrids=int((theApp.glob_prefs->GetStatsMax()/10.0)+0.1)-1;
d139 1
a139 1
		iStatYGrids=int((theApp.glob_prefs->GetStatsMax()/50.0)+0.1)-1;
d177 1
a177 1
	m_Statistics.SetRanges(0, theApp.glob_prefs->GetStatsMax());
d188 1
a188 1
	oldRatio=theApp.glob_prefs->GetGraphRatio();		//Cax2 - Resize active connections line...
d196 1
a196 1
	if (theApp.glob_prefs->GetStatsInterval()==0) GetDlgItem(IDC_STATTREE)->EnableWindow(false);
d224 7
a230 7
	cum_DL_maximal =		theApp.glob_prefs->GetConnMaxDownRate();
	cum_DL_average =		theApp.glob_prefs->GetConnAvgDownRate();
	cum_DL_max_average =	theApp.glob_prefs->GetConnMaxAvgDownRate();

	cum_UL_maximal =		theApp.glob_prefs->GetConnMaxUpRate();
	cum_UL_average =		theApp.glob_prefs->GetConnAvgUpRate();
	cum_UL_max_average =	theApp.glob_prefs->GetConnMaxAvgUpRate();
d304 1
a304 1
		theApp.glob_prefs->Add2ConnMaxUpRate(cum_UL_maximal);
d310 1
a310 1
		theApp.glob_prefs->Add2ConnMaxDownRate(cum_DL_maximal);
d316 1
a316 1
		theApp.glob_prefs->Add2ConnMaxAvgDownRate(cum_DL_max_average);
d322 1
a322 1
		theApp.glob_prefs->Add2ConnMaxAvgUpRate(cum_UL_max_average);
d361 2
a362 2
	if (theApp.stat_serverConnectTime==0) time_thisServerDuration = 0;
	else time_thisServerDuration = ( GetTickCount() - theApp.stat_serverConnectTime ) / 1000;
d382 1
a382 1
		if ( theApp.stat_sessionReceivedBytes>0 && theApp.stat_sessionSentBytes>0 ) 
d385 2
a386 2
			if (theApp.stat_sessionReceivedBytes<theApp.stat_sessionSentBytes) {
				cbuffer.Format("%s %.2f : 1",GetResString(IDS_STATS_SRATIO),(float)theApp.stat_sessionSentBytes/theApp.stat_sessionReceivedBytes);
d389 1
a389 1
				cbuffer.Format("%s 1 : %.2f",GetResString(IDS_STATS_SRATIO),(float)theApp.stat_sessionReceivedBytes/theApp.stat_sessionSentBytes);
d398 1
a398 1
		if ( (theApp.glob_prefs->GetTotalDownloaded()>0 && theApp.glob_prefs->GetTotalUploaded()>0) || (theApp.stat_sessionReceivedBytes>0 && theApp.stat_sessionSentBytes>0) ) 
d401 1
a401 1
			if ((theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded())<(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded())) 
d403 1
a403 1
				cbuffer.Format("%s %.2f : 1",GetResString(IDS_STATS_CRATIO),(float)(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded())/(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded()));
d406 1
a406 1
				cbuffer.Format("%s 1 : %.2f",GetResString(IDS_STATS_CRATIO),(float)(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded())/(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded()));
d418 1
a418 1
			theApp.downloadqueue->GetDownloadStats(myStats, myBigStats);
d422 1
a422 1
				cbuffer.Format( "%s: %s", GetResString( IDS_STATS_DDATA ) , CastItoXBytes( theApp.stat_sessionReceivedBytes ) );
d428 1
a428 1
						uint64 DownDataTotal = theApp.glob_prefs->GetDownSessionClientData();
d433 1
a433 1
							if ((eClientTypes)j != SO_OLDEMULE)
d435 3
a437 3
								if ((eClientTypes)j == SO_EMULE)
									DownDataClient = theApp.glob_prefs->GetDownData((eClientTypes)j)
													+ theApp.glob_prefs->GetDownData(SO_OLDEMULE);
d439 1
a439 1
									DownDataClient = theApp.glob_prefs->GetDownData((eClientTypes)j);
d444 1
a444 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((eClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
d452 3
a454 3
						uint64	PortDataDefault =	theApp.glob_prefs->GetDownDataPort_4662();
						uint64	PortDataOther =		theApp.glob_prefs->GetDownDataPort_OTHER();
						uint64	PortDataTotal =		theApp.glob_prefs->GetDownSessionDataPort();
d471 1
a471 1
				cbuffer.Format( "%s: %u" , GetResString( IDS_STATS_COMPDL ) , theApp.glob_prefs->GetDownSessionCompletedFiles() );
d499 1
a499 1
				uint64 t_FreeBytes = GetFreeDiskSpaceX(theApp.glob_prefs->GetTempDir().GetBuffer());
d536 1
a536 1
					cbuffer.Format( "%s: %u" , GetResString(IDS_ASKED4ANOTHERFILE) , theApp.clientlist->GetA4AFSourcesCount());
d550 2
a551 2
				statGoodSessions =	theApp.glob_prefs->GetDownS_SuccessfulSessions() + myStats[1]; // Add Active Downloads
				statBadSessions =	theApp.glob_prefs->GetDownS_FailedSessions();
d559 1
a559 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATADLSES) , CastItoXBytes( (uint64) theApp.stat_sessionReceivedBytes / statGoodSessions ) ); }
d571 1
a571 1
					cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDLTIME), CastSecondsToLngHM(theApp.glob_prefs->GetDownS_AvgTime()));
d585 2
a586 2
				DownOHTotal = theApp.downloadqueue->GetDownDataOverheadFileRequest() + theApp.downloadqueue->GetDownDataOverheadSourceExchange() + theApp.downloadqueue->GetDownDataOverheadServer() + theApp.downloadqueue->GetDownDataOverheadOther();
				DownOHTotalPackets = theApp.downloadqueue->GetDownDataOverheadFileRequestPackets() + theApp.downloadqueue->GetDownDataOverheadSourceExchangePackets() + theApp.downloadqueue->GetDownDataOverheadServerPackets() + theApp.downloadqueue->GetDownDataOverheadOtherPackets();
d594 1
a594 1
					cbuffer.Format( GetResString( IDS_FROVERHEAD ) , CastItoXBytes( theApp.downloadqueue->GetDownDataOverheadFileRequest() ) , CastItoIShort( theApp.downloadqueue->GetDownDataOverheadFileRequestPackets() ) );
d597 1
a597 1
					cbuffer.Format( GetResString( IDS_SSOVERHEAD ) , CastItoXBytes( theApp.downloadqueue->GetDownDataOverheadSourceExchange() ), CastItoIShort( theApp.downloadqueue->GetDownDataOverheadSourceExchangePackets() ) );
d600 1
a600 1
					cbuffer.Format( GetResString( IDS_SOVERHEAD ) , CastItoXBytes( theApp.downloadqueue->GetDownDataOverheadServer() ), CastItoIShort( theApp.downloadqueue->GetDownDataOverheadServerPackets() ) );
d608 1
a608 1
				cbuffer.Format("%s: %s",GetResString(IDS_STATS_DDATA),CastItoXBytes( theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded() ));
d614 1
a614 1
						uint64 DownDataTotal = theApp.glob_prefs->GetDownTotalClientData();
d620 1
a620 1
							if ((eClientTypes)j != SO_OLDEMULE)
d622 3
a624 3
								if ((eClientTypes)j == SO_EMULE)
									DownDataClient = theApp.glob_prefs->GetCumDownData((eClientTypes)j)
													+ theApp.glob_prefs->GetCumDownData(SO_OLDEMULE);
d626 1
a626 1
									DownDataClient = theApp.glob_prefs->GetCumDownData((eClientTypes)j);
d631 1
a631 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((eClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
d639 3
a641 3
						uint64	PortDataDefault =	theApp.glob_prefs->GetCumDownDataPort_4662();
						uint64	PortDataOther =		theApp.glob_prefs->GetCumDownDataPort_OTHER();
						uint64	PortDataTotal =		theApp.glob_prefs->GetDownTotalPortData();
d658 1
a658 1
				cbuffer.Format("%s: %u", GetResString(IDS_STATS_COMPDL), theApp.glob_prefs->GetDownCompletedFiles() );
d661 2
a662 2
				statGoodSessions = theApp.glob_prefs->GetDownC_SuccessfulSessions() + myStats[1]; // Need to reset these from the session section.  Declared up there.
				statBadSessions = theApp.glob_prefs->GetDownC_FailedSessions(); // ^^^^^^^^^^^^^^
d669 1
a669 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATADLSES) , CastItoXBytes( (uint64) (theApp.stat_sessionReceivedBytes + theApp.glob_prefs->GetTotalDownloaded()) / statGoodSessions ) );
d685 3
a687 3
					uint32 avgDownTime = theApp.glob_prefs->GetDownS_AvgTime();
					if (theApp.glob_prefs->GetDownC_AvgTime()<=0) theApp.glob_prefs->Add2DownCAvgTime(avgDownTime);
					avgDownTime = (uint32) (avgDownTime+theApp.glob_prefs->GetDownC_AvgTime())/2;
d692 1
a692 1
				cbuffer.Format( GetResString( IDS_STATS_GAINCOMP ) , CastItoXBytes( myBigStats[1] + theApp.glob_prefs->GetSavedFromCompression() ) );
d695 1
a695 1
				cbuffer.Format( GetResString( IDS_STATS_LOSTCORRUPT ) , CastItoXBytes( myBigStats[0] + theApp.glob_prefs->GetLostFromCorruption() ) );
d698 1
a698 1
				cbuffer.Format( GetResString( IDS_STATS_ICHSAVED ) , myStats[14] + theApp.glob_prefs->GetPartsSavedByICH() );
d702 2
a703 2
					DownOHTotal = theApp.downloadqueue->GetDownDataOverheadFileRequest() + theApp.downloadqueue->GetDownDataOverheadSourceExchange() + theApp.downloadqueue->GetDownDataOverheadServer() + theApp.downloadqueue->GetDownDataOverheadOther();
					DownOHTotalPackets = theApp.downloadqueue->GetDownDataOverheadFileRequestPackets() + theApp.downloadqueue->GetDownDataOverheadSourceExchangePackets() + theApp.downloadqueue->GetDownDataOverheadServerPackets() + theApp.downloadqueue->GetDownDataOverheadOtherPackets();
d706 1
a706 1
				cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(DownOHTotal + theApp.glob_prefs->GetDownOverheadTotal()), CastItoIShort(DownOHTotalPackets + theApp.glob_prefs->GetDownOverheadTotalPackets()));
d711 1
a711 1
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( theApp.downloadqueue->GetDownDataOverheadFileRequest() + theApp.glob_prefs->GetDownOverheadFileReq()), CastItoIShort(theApp.downloadqueue->GetDownDataOverheadFileRequestPackets() + theApp.glob_prefs->GetDownOverheadFileReqPackets()));
d714 1
a714 1
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( theApp.downloadqueue->GetDownDataOverheadSourceExchange()+theApp.glob_prefs->GetDownOverheadSrcEx()), CastItoIShort(theApp.downloadqueue->GetDownDataOverheadSourceExchangePackets()+theApp.glob_prefs->GetDownOverheadSrcExPackets()));
d717 1
a717 1
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( theApp.downloadqueue->GetDownDataOverheadServer()+theApp.glob_prefs->GetDownOverheadServer()), CastItoIShort(theApp.downloadqueue->GetDownDataOverheadServerPackets()+theApp.glob_prefs->GetDownOverheadServerPackets()));
d729 1
a729 1
				cbuffer.Format("%s: %s",GetResString(IDS_STATS_UDATA),CastItoXBytes(theApp.stat_sessionSentBytes));
d735 1
a735 1
						uint64 UpDataTotal =	theApp.glob_prefs->GetUpSessionClientData();
d741 1
a741 1
							if ((eClientTypes)j != SO_OLDEMULE)
d743 3
a745 3
								if ((eClientTypes)j == SO_EMULE)
									UpDataClient = theApp.glob_prefs->GetUpData((eClientTypes)j)
													+ theApp.glob_prefs->GetUpData(SO_OLDEMULE);
d747 1
a747 1
									UpDataClient = theApp.glob_prefs->GetUpData((eClientTypes)j);
d752 1
a752 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((eClientTypes)j), CastItoXBytes(UpDataClient) , percentClientTransferred);
d760 3
a762 3
						uint64	PortDataDefault =	theApp.glob_prefs->GetUpDataPort_4662();
						uint64	PortDataOther =		theApp.glob_prefs->GetUpDataPort_OTHER();
						uint64	PortDataTotal =		theApp.glob_prefs->GetUpSessionPortData();
d780 3
a782 3
						uint64	DataSourceFile =	theApp.glob_prefs->GetUpData_File();
						uint64	DataSourcePF =		theApp.glob_prefs->GetUpData_Partfile();
						uint64	DataSourceTotal =		theApp.glob_prefs->GetUpSessionDataFile();
d799 1
a799 1
				cbuffer.Format(GetResString(IDS_STATS_ACTUL),theApp.uploadqueue->GetUploadQueueLength());
d802 1
a802 1
				cbuffer.Format(GetResString(IDS_STATS_WAITINGUSERS),theApp.uploadqueue->GetWaitingUserCount());
d806 2
a807 2
				statGoodSessions = theApp.uploadqueue->GetSuccessfulUpCount(); // + theApp.uploadqueue->GetUploadQueueLength();
				statBadSessions = theApp.uploadqueue->GetFailedUpCount();
d816 2
a817 2
						percentSessions = (double) 100*(statGoodSessions+theApp.uploadqueue->GetUploadQueueLength())/(statGoodSessions+theApp.uploadqueue->GetUploadQueueLength()+statBadSessions);
						cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) theApp.stat_sessionSentBytes / (statGoodSessions+theApp.uploadqueue->GetUploadQueueLength())) ); 
d828 1
a828 1
					cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_SUCCUP_FC),theApp.uploadqueue->GetULFullChunkCount(),GetPercent(theApp.uploadqueue->GetULFullChunkCount(),statTotalSessions));
d830 1
a830 1
					cbuffer.Format("%s: %u (%1.1f%%)",GetResString(IDS_STATS_SUCCUP_PC),theApp.uploadqueue->GetULPartChunkCount(),GetPercent(theApp.uploadqueue->GetULPartChunkCount(),statTotalSessions));
d835 3
a837 3
						cbuffer.Format("%s: %u (%1.1f%%)",GetUpEndReason((eEndTransferSession)i),
							theApp.uploadqueue->GetULPartChunkSubCount((eEndTransferSession)i),
							GetPercent(theApp.uploadqueue->GetULPartChunkSubCount((eEndTransferSession)i),statTotalSessions));
d847 3
a849 3
						cbuffer.Format("%s: %u (%1.1f%%)",GetUpEndReason((eEndTransferSession)i),
							theApp.uploadqueue->GetFailedSubCount((eEndTransferSession)i),
							GetPercent(theApp.uploadqueue->GetFailedSubCount((eEndTransferSession)i),statTotalSessions));
d854 2
a855 2
					//DWORD running=theApp.uploadqueue->GetAverageUpTime();
					cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME),CastSecondsToLngHM(theApp.uploadqueue->GetAverageUpTime()));
d859 2
a860 2
				UpOHTotal = theApp.uploadqueue->GetUpDataOverheadFileRequest() + theApp.uploadqueue->GetUpDataOverheadSourceExchange() + theApp.uploadqueue->GetUpDataOverheadServer() + theApp.uploadqueue->GetUpDataOverheadOther();
				UpOHTotalPackets = theApp.uploadqueue->GetUpDataOverheadFileRequestPackets() + theApp.uploadqueue->GetUpDataOverheadSourceExchangePackets() + theApp.uploadqueue->GetUpDataOverheadServerPackets() + theApp.uploadqueue->GetUpDataOverheadOtherPackets();
d867 1
a867 1
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( theApp.uploadqueue->GetUpDataOverheadFileRequest()), CastItoIShort(theApp.uploadqueue->GetUpDataOverheadFileRequestPackets()));
d870 1
a870 1
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( theApp.uploadqueue->GetUpDataOverheadSourceExchange()), CastItoIShort(theApp.uploadqueue->GetUpDataOverheadSourceExchangePackets()));
d873 1
a873 1
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( theApp.uploadqueue->GetUpDataOverheadServer()), CastItoIShort(theApp.uploadqueue->GetUpDataOverheadServerPackets()));
d881 1
a881 1
				cbuffer.Format("%s: %s",GetResString(IDS_STATS_UDATA),CastItoXBytes( theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded()));
d887 1
a887 1
						uint64 UpDataTotal =	theApp.glob_prefs->GetUpTotalClientData();
d893 1
a893 1
							if ((eClientTypes)j != SO_OLDEMULE)
d895 3
a897 3
								if ((eClientTypes)j == SO_EMULE)
									UpDataClient = theApp.glob_prefs->GetCumUpData((eClientTypes)j) 
													+ theApp.glob_prefs->GetCumUpData(SO_OLDEMULE);
d899 1
a899 1
									UpDataClient = theApp.glob_prefs->GetCumUpData((eClientTypes)j);
d905 1
a905 1
								cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((eClientTypes)j), CastItoXBytes(UpDataClient) , percentClientTransferred);
d913 3
a915 3
						uint64	PortDataDefault =	theApp.glob_prefs->GetCumUpDataPort_4662();
						uint64	PortDataOther =		theApp.glob_prefs->GetCumUpDataPort_OTHER();
						uint64	PortDataTotal =		theApp.glob_prefs->GetUpTotalPortData();
d933 3
a935 3
						uint64	DataSourceFile =	theApp.glob_prefs->GetCumUpData_File();
						uint64	DataSourcePF =		theApp.glob_prefs->GetCumUpData_Partfile();
						uint64	DataSourceTotal =	theApp.glob_prefs->GetUpTotalDataFile();
d952 2
a953 2
				statGoodSessions = theApp.uploadqueue->GetSuccessfulUpCount() + theApp.glob_prefs->GetUpSuccessfulSessions() + theApp.uploadqueue->GetUploadQueueLength();
				statBadSessions = theApp.uploadqueue->GetFailedUpCount() + theApp.glob_prefs->GetUpFailedSessions();
d960 1
a960 1
						cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) (theApp.stat_sessionSentBytes + theApp.glob_prefs->GetTotalUploaded()) / statGoodSessions) ); }
d976 3
a978 3
					uint32 avguptime = theApp.uploadqueue->GetAverageUpTime();
					if (theApp.glob_prefs->GetUpAvgTime()<=0) theApp.glob_prefs->Add2UpAvgTime(avguptime);
					avguptime = (uint32) (avguptime+theApp.glob_prefs->GetUpAvgTime())/2;
d985 2
a986 2
					UpOHTotal = theApp.uploadqueue->GetUpDataOverheadFileRequest() + theApp.uploadqueue->GetUpDataOverheadSourceExchange() + theApp.uploadqueue->GetUpDataOverheadServer() + theApp.uploadqueue->GetUpDataOverheadOther();
					UpOHTotalPackets = theApp.uploadqueue->GetUpDataOverheadFileRequestPackets() + theApp.uploadqueue->GetUpDataOverheadSourceExchangePackets() + theApp.uploadqueue->GetUpDataOverheadServerPackets() + theApp.uploadqueue->GetUpDataOverheadOtherPackets();
d989 1
a989 1
				cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(UpOHTotal + theApp.glob_prefs->GetUpOverheadTotal()), CastItoIShort(UpOHTotalPackets + theApp.glob_prefs->GetUpOverheadTotalPackets()));
d994 1
a994 1
					cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( theApp.uploadqueue->GetUpDataOverheadFileRequest() + theApp.glob_prefs->GetUpOverheadFileReq()), CastItoIShort(theApp.uploadqueue->GetUpDataOverheadFileRequestPackets() + theApp.glob_prefs->GetUpOverheadFileReqPackets()));
d997 1
a997 1
					cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( theApp.uploadqueue->GetUpDataOverheadSourceExchange()+theApp.glob_prefs->GetUpOverheadSrcEx()), CastItoIShort(theApp.uploadqueue->GetUpDataOverheadSourceExchangePackets()+theApp.glob_prefs->GetUpOverheadSrcExPackets()));
d1000 1
a1000 1
					cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( theApp.uploadqueue->GetUpDataOverheadServer()+theApp.glob_prefs->GetUpOverheadServer()), CastItoIShort(theApp.uploadqueue->GetUpDataOverheadServerPackets()+theApp.glob_prefs->GetUpOverheadServerPackets()));
d1016 1
a1016 1
				if (theApp.stat_reconnects>0) cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),theApp.stat_reconnects-1);
d1030 1
a1030 1
				uint32 m_itemp = theApp.listensocket->GetMaxConnectionReached();
d1081 2
a1082 2
				if(theApp.stat_reconnects>0)
					cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),theApp.stat_reconnects - 1 + theApp.glob_prefs->GetConnNumReconnects());
d1084 1
a1084 1
					cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),theApp.glob_prefs->GetConnNumReconnects());
d1087 1
a1087 1
				cbuffer.Format("%s: %i", GetResString(IDS_SF_AVGCON), (int) (activeconnections + theApp.glob_prefs->GetConnAvgConnections()) / 2 );
d1090 1
a1090 1
				cbuffer.Format("%s: %i", GetResString(IDS_SF_PEAKCON), theApp.glob_prefs->GetConnPeakConnections());
d1094 1
a1094 1
				cbuffer.Format("%s: %i", GetResString(IDS_SF_MAXCONLIMITREACHED), theApp.listensocket->GetMaxConnectionReached() + theApp.glob_prefs->GetConnMaxConnLimitReached());
d1131 1
a1131 1
		cbuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), theApp.glob_prefs->GetStatsLastResetStr());
d1135 1
a1135 1
		if (theApp.glob_prefs->GetStatsLastResetLng()) {
d1139 1
a1139 1
			timeDiff = timeNow - theApp.glob_prefs->GetStatsLastResetLng(); // In seconds
d1151 1
a1151 1
			uint64 sessionRunTime = (uint64)((::GetTickCount()-theApp.stat_starttime)/1000);
d1178 1
a1178 1
			uint64 totalRunTime = (uint64)((::GetTickCount()-theApp.stat_starttime)/1000)+theApp.glob_prefs->GetConnRunTime();
d1183 1
a1183 1
			cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_TRANSTIME), CastSecondsToLngHM(GetTransferTime() + theApp.glob_prefs->GetConnTransferTime()), (double) (100 * (GetTransferTime() + theApp.glob_prefs->GetConnTransferTime())) / totalRunTime);
d1188 1
a1188 1
				cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_UPTIME), CastSecondsToLngHM(GetUploadTime() + theApp.glob_prefs->GetConnUploadTime()), (double) (100 * (GetUploadTime() + theApp.glob_prefs->GetConnUploadTime())) / totalRunTime);
d1191 1
a1191 1
				cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_DOWNTIME), CastSecondsToLngHM(GetDownloadTime() + theApp.glob_prefs->GetConnDownloadTime()), (double) (100 * (GetDownloadTime() + theApp.glob_prefs->GetConnDownloadTime())) / totalRunTime);
d1195 1
a1195 1
			cbuffer.Format("%s: %s (%1.1f%%)", GetResString(IDS_STATS_TOTALSRVDUR), CastSecondsToLngHM(GetServerDuration() + theApp.glob_prefs->GetConnServerDuration()), (double) (100 * (GetServerDuration() + theApp.glob_prefs->GetConnServerDuration())) / totalRunTime);
d1212 1
a1212 1
						cbuffer.Format("%s: %s",GetResString(IDS_STATS_UDATA),CastItoXBytes( (uint64)(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded())*avgModifier[mx]));
d1218 1
a1218 1
								uint64 UpDataTotal =	(uint64) theApp.glob_prefs->GetUpTotalClientData() * avgModifier[mx];
d1224 1
a1224 1
									if ((eClientTypes)j != SO_OLDEMULE)
d1226 3
a1228 3
										if ((eClientTypes)j == SO_EMULE)
											UpDataClient = (theApp.glob_prefs->GetCumUpData((eClientTypes)j)
															+ theApp.glob_prefs->GetCumUpData(SO_OLDEMULE))*avgModifier[mx];
d1230 1
a1230 1
											UpDataClient = theApp.glob_prefs->GetCumUpData((eClientTypes)j)*avgModifier[mx];
d1236 1
a1236 1
										cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((eClientTypes)j), CastItoXBytes(UpDataClient) , percentClientTransferred);
d1244 3
a1246 3
								uint64	PortDataDefault =	(uint64) theApp.glob_prefs->GetCumUpDataPort_4662() * avgModifier[mx];
								uint64	PortDataOther =		(uint64) theApp.glob_prefs->GetCumUpDataPort_OTHER() * avgModifier[mx];
								uint64	PortDataTotal =		(uint64) theApp.glob_prefs->GetUpTotalPortData() * avgModifier[mx];
d1264 3
a1266 3
								uint64	DataSourceFile =	(uint64) theApp.glob_prefs->GetCumUpData_File() * avgModifier[mx];
								uint64	DataSourcePF =		(uint64) theApp.glob_prefs->GetCumUpData_Partfile() * avgModifier[mx];
								uint64	DataSourceTotal =	(uint64) theApp.glob_prefs->GetUpTotalDataFile() * avgModifier[mx];
d1283 2
a1284 2
						uint32 statGoodSessions = (uint32) (theApp.uploadqueue->GetSuccessfulUpCount() + theApp.glob_prefs->GetUpSuccessfulSessions() + theApp.uploadqueue->GetUploadQueueLength()) * avgModifier[mx];
						uint32 statBadSessions = (uint32) (theApp.uploadqueue->GetFailedUpCount() + theApp.glob_prefs->GetUpFailedSessions()) * avgModifier[mx];
d1305 2
a1306 2
						uint64 UpOHTotal = (uint64) (theApp.uploadqueue->GetUpDataOverheadFileRequest() + theApp.uploadqueue->GetUpDataOverheadSourceExchange() + theApp.uploadqueue->GetUpDataOverheadServer() + theApp.uploadqueue->GetUpDataOverheadOther()) * avgModifier[mx];
						uint64 UpOHTotalPackets = (uint64) (theApp.uploadqueue->GetUpDataOverheadFileRequestPackets() + theApp.uploadqueue->GetUpDataOverheadSourceExchangePackets() + theApp.uploadqueue->GetUpDataOverheadServerPackets() + theApp.uploadqueue->GetUpDataOverheadOtherPackets()) * avgModifier[mx];
d1309 1
a1309 1
						cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes(UpOHTotal + ((uint64)theApp.glob_prefs->GetUpOverheadTotal() * avgModifier[mx])), CastItoIShort(UpOHTotalPackets + ((uint64)theApp.glob_prefs->GetUpOverheadTotalPackets() * avgModifier[mx])));
d1314 1
a1314 1
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( (uint64) (theApp.uploadqueue->GetUpDataOverheadFileRequest() + theApp.glob_prefs->GetUpOverheadFileReq()) * avgModifier[mx]), CastItoIShort( (uint64) (theApp.uploadqueue->GetUpDataOverheadFileRequestPackets() + theApp.glob_prefs->GetUpOverheadFileReqPackets()) * avgModifier[mx]));
d1317 1
a1317 1
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( (uint64) (theApp.uploadqueue->GetUpDataOverheadSourceExchange()+theApp.glob_prefs->GetUpOverheadSrcEx()) * avgModifier[mx]), CastItoIShort( (uint64) (theApp.uploadqueue->GetUpDataOverheadSourceExchangePackets()+theApp.glob_prefs->GetUpOverheadSrcExPackets()) * avgModifier[mx]));
d1320 1
a1320 1
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( (uint64) (theApp.uploadqueue->GetUpDataOverheadServer()+theApp.glob_prefs->GetUpOverheadServer()) * avgModifier[mx]), CastItoIShort( (uint64) (theApp.uploadqueue->GetUpDataOverheadServerPackets()+theApp.glob_prefs->GetUpOverheadServerPackets()) * avgModifier[mx]));
d1326 1
a1326 1
						theApp.downloadqueue->GetDownloadStats(myStats, myBigStats);
d1328 1
a1328 1
						cbuffer.Format("%s: %s",GetResString(IDS_STATS_DDATA),CastItoXBytes( (uint64) (theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded()) * avgModifier[mx] ));
d1334 1
a1334 1
								uint64 DownDataTotal = (uint64) theApp.glob_prefs->GetDownTotalClientData() * avgModifier[mx];
d1340 1
a1340 1
									if ((eClientTypes)j != SO_OLDEMULE)
d1342 3
a1344 3
										if ((eClientTypes)j == SO_EMULE)
											DownDataClient = (theApp.glob_prefs->GetCumDownData((eClientTypes)j)
															+ theApp.glob_prefs->GetCumDownData(SO_OLDEMULE))* avgModifier[mx];
d1346 1
a1346 1
											DownDataClient = theApp.glob_prefs->GetCumDownData((eClientTypes)j)* avgModifier[mx];
d1352 1
a1352 1
										cbuffer.Format( "%s: %s (%1.1f%%)" , GetClientNameString((eClientTypes)j), CastItoXBytes(DownDataClient) , percentClientTransferred);
d1360 3
a1362 3
								uint64	PortDataDefault =	(uint64) theApp.glob_prefs->GetCumDownDataPort_4662() * avgModifier[mx];
								uint64	PortDataOther =		(uint64) theApp.glob_prefs->GetCumDownDataPort_OTHER() * avgModifier[mx];
								uint64	PortDataTotal =		(uint64) theApp.glob_prefs->GetDownTotalPortData() * avgModifier[mx];
d1379 1
a1379 1
						cbuffer.Format("%s: %I64u", GetResString(IDS_STATS_COMPDL), (uint64) (theApp.glob_prefs->GetDownCompletedFiles() * avgModifier[mx]) );
d1382 2
a1383 2
						uint32	statGoodSessions = (uint32) (theApp.glob_prefs->GetDownC_SuccessfulSessions() + myStats[1]) * avgModifier[mx];
						uint32	statBadSessions = (uint32) theApp.glob_prefs->GetDownC_FailedSessions() * avgModifier[mx];
d1401 1
a1401 1
						cbuffer.Format( GetResString( IDS_STATS_GAINCOMP ) , CastItoXBytes( (uint64) (myBigStats[1] + theApp.glob_prefs->GetSavedFromCompression()) * avgModifier[mx] ) );
d1404 1
a1404 1
						cbuffer.Format( GetResString( IDS_STATS_LOSTCORRUPT ) , CastItoXBytes( (uint64) (myBigStats[0] + theApp.glob_prefs->GetLostFromCorruption()) * avgModifier[mx] ) );
d1407 1
a1407 1
						cbuffer.Format( GetResString( IDS_STATS_ICHSAVED ) , (uint32) ((myStats[14] + theApp.glob_prefs->GetPartsSavedByICH()) * avgModifier[mx]) );
d1410 2
a1411 2
						uint64 DownOHTotal = theApp.downloadqueue->GetDownDataOverheadFileRequest() + theApp.downloadqueue->GetDownDataOverheadSourceExchange() + theApp.downloadqueue->GetDownDataOverheadServer() + theApp.downloadqueue->GetDownDataOverheadOther();
						uint64 DownOHTotalPackets = theApp.downloadqueue->GetDownDataOverheadFileRequestPackets() + theApp.downloadqueue->GetDownDataOverheadSourceExchangePackets() + theApp.downloadqueue->GetDownDataOverheadServerPackets() + theApp.downloadqueue->GetDownDataOverheadOtherPackets();
d1413 1
a1413 1
						cbuffer.Format(GetResString(IDS_TOVERHEAD),CastItoXBytes( (uint64) (DownOHTotal + theApp.glob_prefs->GetDownOverheadTotal()) * avgModifier[mx]), CastItoIShort((uint64)(DownOHTotalPackets + theApp.glob_prefs->GetDownOverheadTotalPackets()) * avgModifier[mx]));
d1418 1
a1418 1
							cbuffer.Format(GetResString(IDS_FROVERHEAD), CastItoXBytes( (uint64)(theApp.downloadqueue->GetDownDataOverheadFileRequest() + theApp.glob_prefs->GetDownOverheadFileReq()) * avgModifier[mx]), CastItoIShort((uint64)(theApp.downloadqueue->GetDownDataOverheadFileRequestPackets() + theApp.glob_prefs->GetDownOverheadFileReqPackets()) * avgModifier[mx]));
d1421 1
a1421 1
							cbuffer.Format(GetResString(IDS_SSOVERHEAD), CastItoXBytes( (uint64)(theApp.downloadqueue->GetDownDataOverheadSourceExchange()+theApp.glob_prefs->GetDownOverheadSrcEx()) * avgModifier[mx]), CastItoIShort((uint64)(theApp.downloadqueue->GetDownDataOverheadSourceExchangePackets()+theApp.glob_prefs->GetDownOverheadSrcExPackets()) * avgModifier[mx]));
d1424 1
a1424 1
							cbuffer.Format(GetResString(IDS_SOVERHEAD), CastItoXBytes( (uint64)(theApp.downloadqueue->GetDownDataOverheadServer()+theApp.glob_prefs->GetDownOverheadServer()) * avgModifier[mx]), CastItoIShort((uint64)(theApp.downloadqueue->GetDownDataOverheadServerPackets()+theApp.glob_prefs->GetDownOverheadServerPackets()) * avgModifier[mx]));
d1449 1
a1449 1
		//theApp.clientlist->GetStatistics(totalclient, myStats, &clientVersionEDonkey, &clientVersionEDonkeyHybrid, &clientVersionEMule, &clientVersionLMule);
d1451 1
a1451 1
		theApp.clientlist->GetStatistics(totalclient,myStats, clientsPorts, &AllClients, totalMODs, &clientMODs);
d1505 1
a1505 1
						MOD_TypeName = theApp.clientlist->GetMODType(top_pos);
d1519 1
a1519 1
								cbuffer.Format("%s: %u", theApp.clientlist->GetMODType(top_pos), top_count);
d1539 1
a1539 1
				if ((eClientTypes)j != SO_OLDEMULE) 
d1541 1
a1541 1
					if ((eClientTypes)j == SO_EMULE)
d1546 1
a1546 1
					cbuffer.Format("%s: %i (%1.1f%%)",GetClientNameString((eClientTypes)j), clients, percentClients);
d1549 1
a1549 1
					switch ((eClientTypes)j)
d1596 1
a1596 1
										cbuffer.Format(_T("v%s: %i (%1.1f%%)"), GetClientVersionString((eClientTypes)j,topver), topcnt, (float)topcnt/clients*100);
d1631 2
a1632 2
		cbuffer.Format("%s: %u", GetResString(IDS_BANNED), theApp.uploadqueue->GetBanCount()); stattree.SetItemText(cligen[0], cbuffer);
		cbuffer.Format("%s: %u", GetResString(IDS_STATS_FILTEREDCLIENTS),theApp.stat_filteredclients); stattree.SetItemText(cligen[1], cbuffer);
d1638 1
a1638 1
	theApp.glob_prefs->SetRecordStructMembers();
d1646 1
a1646 1
		theApp.serverlist->GetStatus (servtotal, servfail, servuser, servfile, servtuser, servtfile, servocc);
d1660 1
a1660 1
		cbuffer.Format("%s: %i",GetResString(IDS_SF_DELCOUNT),theApp.serverlist->GetDeletedServerCount());stattree.SetItemText(srv[2], cbuffer);
d1668 1
a1668 1
		if(theApp.downloadqueue->GetUDPSearchStatus() == "")
d1673 1
a1673 1
			cbuffer.Format(GetResString(IDS_STATS_UDPSEARCH), theApp.downloadqueue->GetUDPSearchStatus());
d1680 1
a1680 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_SVRECWORKING), theApp.glob_prefs->GetSrvrsMostWorkingServers() );
d1683 1
a1683 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_SVRECUSERS), theApp.glob_prefs->GetSrvrsMostUsersOnline() );
d1686 1
a1686 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_SVRECFILES), theApp.glob_prefs->GetSrvrsMostFilesAvail() );
d1695 1
a1695 1
		cbuffer.Format(GetResString(IDS_SHAREDFILESCOUNT),theApp.sharedfiles->GetCount());
d1699 1
a1699 1
		uint64 allsize = theApp.sharedfiles->GetDatasize(bytesLargestFile); // Func returns total share size and sets pointeredd uint64 to largest single filesize
d1701 2
a1702 2
		if(theApp.sharedfiles->GetCount() != 0)
			cbuffer2.Format( "%s", CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount()));
d1719 1
a1719 1
			cbuffer.Format("%s: %u", GetResString(IDS_STATS_SHRECNUM), theApp.glob_prefs->GetSharedMostFilesShared() );
d1722 1
a1722 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_SHRECASIZE), CastItoXBytes(theApp.glob_prefs->GetSharedLargestAvgFileSize()) );
d1725 1
a1725 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_LARGESTFILE), CastItoXBytes(theApp.glob_prefs->GetSharedLargestFileSize()) );
d1728 1
a1728 1
			cbuffer.Format("%s: %s", GetResString(IDS_STATS_SHRECSIZE), CastItoXBytes(theApp.glob_prefs->GetSharedLargestShareSize()) );
d1754 1
a1754 1
	if (theApp.glob_prefs->GetGraphRatio()>1) myBuffer.Format(_T(" (1:%i)"),theApp.glob_prefs->GetGraphRatio());
d1757 1
a1757 1
	myBuffer.Format(_T(" (%u ")+ GetResString(IDS_MINS) + _T(")"),theApp.glob_prefs->GetStatsAverageMinutes());
d1969 1
a1969 1
	sTreeMask = theApp.glob_prefs->GetExpandedTreeItems();
d1990 1
a1990 1
	int iStatYGrids=int((theApp.glob_prefs->GetStatsMax()/10.0)+0.1)-1;
d1992 1
a1992 1
		iStatYGrids=int((theApp.glob_prefs->GetStatsMax()/50.0)+0.1)-1;
d1995 1
a1995 1
	m_Statistics.SetRanges(0, theApp.glob_prefs->GetStatsMax());
d2002 1
a2002 1
	if (!theApp.emuledlg->IsRunning()) return;
d2013 1
a2013 1
	int shownSecs = r.Width() * theApp.glob_prefs->GetTrafficOMeterInterval();
d2016 1
a2016 1
	if(theApp.glob_prefs->GetTrafficOMeterInterval()==0) 
d2081 2
a2082 2
		if (theApp.stat_transferStarttime ==0) return 0;
		DWORD running=(float)(GetTickCount()-theApp.stat_transferStarttime)/1000+.5;		//Cax2 - not really needed here, but the math is 'right' now!
d2084 1
a2084 1
		return (float)(theApp.stat_sessionReceivedBytes/1024) / running;
d2090 1
a2090 1
		return (theApp.stat_sessionReceivedBytes-downrateHistory.back())*.9765/(GetTickCount()-timeHistory.back());
d2104 1
a2104 1
		if (theApp.stat_transferStarttime==0) return 0;
d2106 1
a2106 1
		DWORD running=(float)(GetTickCount()-theApp.stat_transferStarttime)/1000+.5;		//Cax2 - stops the sudden session upload average 'jump' at the beginning.
d2109 1
a2109 1
		return (float)(theApp.stat_sessionSentBytes/1024) / running;
d2113 1
a2113 1
		return (theApp.stat_sessionSentBytes-uprateHistory.back())*.9765/(GetTickCount()-timeHistory.back());
d2127 2
a2128 2
			if (theApp.stat_transferStarttime == 0) return 0;            
			running=(GetTickCount()-theApp.stat_transferStarttime)/1000;
d2130 1
a2130 1
			return (float) (theApp.stat_sessionReceivedBytes/1024) / running;
d2133 4
a2136 4
			if (theApp.stat_transferStarttime == 0) return theApp.glob_prefs->GetConnAvgDownRate();
			running=(GetTickCount()-theApp.stat_transferStarttime)/1000;
			if (running<5) return theApp.glob_prefs->GetConnAvgDownRate();
			return (float) ((( (float) (theApp.stat_sessionReceivedBytes/1024) / running ) + theApp.glob_prefs->GetConnAvgDownRate() ) / 2 );
d2154 2
a2155 2
			if (theApp.stat_transferStarttime == 0) return 0;            
			running=(GetTickCount()-theApp.stat_transferStarttime)/1000;
d2157 1
a2157 1
			return (float) (theApp.stat_sessionSentBytes/1024) / running;
d2160 4
a2163 4
			if (theApp.stat_transferStarttime == 0) return theApp.glob_prefs->GetConnAvgUpRate();
			running=(GetTickCount()-theApp.stat_transferStarttime)/1000;
			if (running<5) return theApp.glob_prefs->GetConnAvgUpRate();
			return (float) ((( (float) (theApp.stat_sessionSentBytes/1024) / running ) + theApp.glob_prefs->GetConnAvgUpRate() ) / 2 );
d2183 1
a2183 1
	if (theApp.stat_transferStarttime==0) return;
d2189 1
a2189 1
	DWORD nUpdateTime = theApp.glob_prefs->GetStatsAverageMinutes()*60*100;		//A 10th of the average interval
d2192 2
a2193 2
	downrateHistory.push_front(theApp.stat_sessionReceivedBytes);
	uprateHistory.push_front(theApp.stat_sessionSentBytes);
d2215 1
a2215 1
	activeconnections = theApp.listensocket->GetOpenSockets(); // netwolf 07.05.03 (moved here from CStatisticsDlg::SetCurrentRate())
d2220 1
a2220 1
	if (peakconnections > theApp.glob_prefs->GetConnPeakConnections()) theApp.glob_prefs->Add2ConnPeakConnections(peakconnections);
d2223 1
a2223 1
	if( theApp.serverconnect->IsConnected())
d2242 1
a2242 1
	SpikeSize = theApp.listensocket->GetOpenSockets() - averageconnections ;
d2246 1
a2246 1
	float SpikeTolerance = 25*(float)theApp.glob_prefs->GetMaxConperFive()/(float)10;
d2255 1
a2255 1
	if (!theApp.emuledlg->IsRunning()) return;
d2284 4
a2287 4
	theApp.downloadqueue->GetDownloadStats(myRateStats, myBigStats);
	m_dPlotDataMore[0]=(activeconnections/theApp.glob_prefs->GetGraphRatio());//myRateStats[0]; // propstats Cax2
	m_dPlotDataMore[1]=theApp.uploadqueue->GetUploadQueueLength();
	m_dPlotDataMore[2]=0;//theApp.uploadqueue->GetWaitingUserCount();
d2292 1
a2292 1
	// webserver
d2296 2
a2297 2
	updown.connections = activeconnections;	//SyruS / theApp.glob_prefs->GetGraphRatio();
	theApp.webserver->AddStatsLine(updown);
d2308 16
a2323 16
	m_DownloadOMeter.SetBackgroundColor(theApp.glob_prefs->GetStatsColor(0));
	m_DownloadOMeter.SetGridColor(theApp.glob_prefs->GetStatsColor(1));
	m_DownloadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(4) ,0);
	m_DownloadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(3) ,1);
	m_DownloadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(2) ,2);
	m_UploadOMeter.SetBackgroundColor(theApp.glob_prefs->GetStatsColor(0));
	m_UploadOMeter.SetGridColor(theApp.glob_prefs->GetStatsColor(1));
	m_UploadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(7) ,0);
	m_UploadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(6) ,1);
	m_UploadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(5) ,2);
	m_Statistics.SetBackgroundColor(theApp.glob_prefs->GetStatsColor(0));
	m_Statistics.SetGridColor(theApp.glob_prefs->GetStatsColor(1));
	m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(8),0);
	m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(9),1);
	//m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(10),2);
	m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(10),3);
d2325 1
a2325 1
	if (oldRatio!= theApp.glob_prefs->GetGraphRatio())	//Cax2 - Resize the general connections...
d2327 2
a2328 2
		m_Statistics.ReSizePlot(0,(double)oldRatio/theApp.glob_prefs->GetGraphRatio());
		oldRatio=theApp.glob_prefs->GetGraphRatio();
d2424 1
a2424 1
CString CStatisticsDlg::GetUpEndReason(eEndTransferSession index)
@


1.68
log
@Added UDP Search to statistics.
@
text
@d483 1
a483 1
				uint64 ui64BytesTransfered = (myBigStats[2]-myBigStats[3]);
d486 2
a487 2
					fPercent = (float)((ui64BytesTransfered*100)/(myBigStats[2])); //kuchin
				cbuffer.Format( GetResString( IDS_DWTOT_TCS ) , CastItoXBytes(ui64BytesTransfered), fPercent );
d806 1
a806 1
				statGoodSessions = theApp.uploadqueue->GetSuccessfullUpCount(); // + theApp.uploadqueue->GetUploadQueueLength();
d824 1
a824 1
					// Successfull sessions
d952 1
a952 1
				statGoodSessions = theApp.uploadqueue->GetSuccessfullUpCount() + theApp.glob_prefs->GetUpSuccessfulSessions() + theApp.uploadqueue->GetUploadQueueLength();
d1283 1
a1283 1
						uint32 statGoodSessions = (uint32) (theApp.uploadqueue->GetSuccessfullUpCount() + theApp.glob_prefs->GetUpSuccessfulSessions() + theApp.uploadqueue->GetUploadQueueLength()) * avgModifier[mx];
d1807 1
a1807 1
					// successfull sessions
d2139 1
a2139 1
			// By BadWolf - Accurate datarate Calculation
d2146 1
a2146 1
			// END By BadWolf - Accurate datarate Calculation
d2166 1
a2166 1
			// By BadWolf - Accurate datarate Calculation
d2173 1
a2173 1
			// END By BadWolf - Accurate datarate Calculation
@


1.67
log
@Minor changes
@
text
@d1667 9
d1924 1
a1924 1
		for(int i = 0; i<6; i++) srv[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_servers);		// Servers Items
@


1.66
log
@More updates.
@
text
@d1765 1
a1765 1
	theSize.SetSize(0,18);
@


1.65
log
@Fixed Scheduler preferences and Statistics restore.
@
text
@d1131 1
a1131 1
		cbuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), theApp.glob_prefs->GetStatsLastResetStr(true));
d1751 1
a1751 4

	// Localize the new controls...
	myBuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), theApp.glob_prefs->GetStatsLastResetStr(true));
	GetDlgItem(IDC_STATIC_LASTRESET)->SetWindowText(myBuffer);
d1762 1
d1764 3
a1766 2
	thePoint = rectBn.BottomRight();
	stattree.DoMenu(thePoint);
a1768 1

@


1.64
log
@Fix for upload datarate on WS and removed an unneeded statistic tree title.
@
text
@d1492 1
a1492 1
						if(currtop<MOD_count && MOD_count<=lasttop )
d1495 2
a1496 2
							top_count =MOD_count;
							currtop=MOD_count;
d1581 1
a1581 1
										if(currtop<ver && ver<lasttop )
d1584 3
a1586 3
											topver=ver;
											topcnt=cnt;
											currtop=ver;
@


1.63
log
@More statistics fixes (+WS)
@
text
@d1462 1
a1462 1
		if (forceUpdate || stattree.IsExpanded(hclisoft)) 
d1908 2
a1909 2
			hclisoft = stattree.InsertItem(GetResString(IDS_STATS_CLIENT_SOFT_TYPE),hcliconnected);		// Client Software Section
				hclisoftMODs = stattree.InsertItem(GetResString(IDS_STATS_CLIENT_MODS),hclisoft);	// MODs Section
d1911 1
a1911 1
			for(int i = 0; i<(SO_LAST-1); i++) clisoft[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), hclisoft);
@


1.62
log
@New sockets - finally, can connect to server and even send/receive some opcodes. To be continued...
@
text
@d965 2
a966 1
					cbuffer.Format(GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,percentSessions);
d972 2
a973 1
					cbuffer.Format(GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,percentSessions);
d1292 2
a1293 1
							cbuffer.Format(GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,percentSessions);
d1299 2
a1300 1
							cbuffer.Format(GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,percentSessions);
@


1.61
log
@katsyonak Statistics changes.
@
text
@d277 1
d279 1
@


1.60
log
@Updates (Paused Progress Bar/Statistic)
@
text
@d477 3
d486 1
a486 1
				stattree.SetItemText( down_S[4] , cbuffer );
d489 1
a489 1
				stattree.SetItemText( down_S[5] , cbuffer );
d492 4
a495 1
				stattree.SetItemText( down_S[6] , cbuffer );
d506 1
a506 1
				stattree.SetItemText( down_S[7] , cbuffer );
d509 2
a510 2
				stattree.SetItemText( down_S[8] , cbuffer );
				if (forceUpdate || stattree.IsExpanded(down_S[8]))
d551 2
a552 2
				stattree.SetItemText( down_S[9] , cbuffer );
				if (forceUpdate || stattree.IsExpanded(down_S[9])) {
d574 1
a574 1
				stattree.SetItemText( down_S[10] , cbuffer );
d577 1
a577 1
				stattree.SetItemText( down_S[11] , cbuffer );
d580 1
a580 1
				stattree.SetItemText( down_S[12] , cbuffer );
d1819 1
a1819 1
		for(int i = 0; i<13; i++) down_S[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_down_session);
d1824 2
a1825 2
			for(int i = 0; i<STATS_DL_SOURCES_TYPE-3; i++) down_sources[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[8]);
			for(int i = 0; i<4; i++) down_ssessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[9]);
@


1.59
log
@1) extended Upload Session statistic
2) fix 100% load after connect
@
text
@d369 1
a369 1
	uint64	lostgainedStats[STATS_DL_DATA_INFO];
d416 1
a416 1
			theApp.downloadqueue->GetDownloadStats(myStats, lostgainedStats);
d474 27
d503 2
a504 2
				stattree.SetItemText( down_S[3] , cbuffer );
				if (forceUpdate || stattree.IsExpanded(down_S[3]))
d545 2
a546 2
				stattree.SetItemText( down_S[4] , cbuffer );
				if (forceUpdate || stattree.IsExpanded(down_S[4])) {
d567 2
a568 2
				cbuffer.Format( GetResString( IDS_STATS_GAINCOMP ) , CastItoXBytes( lostgainedStats[1] ) );
				stattree.SetItemText( down_S[5] , cbuffer );
d570 2
a571 2
				cbuffer.Format( GetResString( IDS_STATS_LOSTCORRUPT ) , CastItoXBytes( lostgainedStats[0] ) );
				stattree.SetItemText( down_S[6] , cbuffer );
d574 1
a574 1
				stattree.SetItemText( down_S[7] , cbuffer );
d684 1
a684 1
				cbuffer.Format( GetResString( IDS_STATS_GAINCOMP ) , CastItoXBytes( lostgainedStats[1] + theApp.glob_prefs->GetSavedFromCompression() ) );
d687 1
a687 1
				cbuffer.Format( GetResString( IDS_STATS_LOSTCORRUPT ) , CastItoXBytes( lostgainedStats[0] + theApp.glob_prefs->GetLostFromCorruption() ) );
d1314 1
a1314 1
						theApp.downloadqueue->GetDownloadStats(myStats, lostgainedStats);
d1389 1
a1389 1
						cbuffer.Format( GetResString( IDS_STATS_GAINCOMP ) , CastItoXBytes( (uint64) (lostgainedStats[1] + theApp.glob_prefs->GetSavedFromCompression()) * avgModifier[mx] ) );
d1392 1
a1392 1
						cbuffer.Format( GetResString( IDS_STATS_LOSTCORRUPT ) , CastItoXBytes( (uint64) (lostgainedStats[0] + theApp.glob_prefs->GetLostFromCorruption()) * avgModifier[mx] ) );
d1813 1
a1813 1
		for(int i = 0; i<8; i++) down_S[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), h_down_session);
d1818 2
a1819 2
			for(int i = 0; i<STATS_DL_SOURCES_TYPE-3; i++) down_sources[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[3]);
			for(int i = 0; i<4; i++) down_ssessions[i] = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING), down_S[4]);
d2242 1
a2242 1
	uint64	lostgainedStats[STATS_DL_DATA_INFO];
d2265 1
a2265 1
	theApp.downloadqueue->GetDownloadStats(myRateStats, lostgainedStats);
@


1.58
log
@1) fix with 100% load after connect to server
2) MOD are sorted now
@
text
@d771 1
a771 1
				statGoodSessions = theApp.uploadqueue->GetSuccessfullUpCount() + theApp.uploadqueue->GetUploadQueueLength();
d775 2
a776 1
				if (forceUpdate || stattree.IsExpanded(up_S[3])) {
d778 6
a783 3
					if (statGoodSessions>0) { // Blackholes are when God divided by 0
						percentSessions = (double) 100*statGoodSessions/(statGoodSessions+statBadSessions);
						cbuffer.Format("%s: %s", GetResString(IDS_STATS_AVGDATAULSES), CastItoXBytes((uint64) theApp.stat_sessionSentBytes / statGoodSessions) ); }
d786 2
a787 1
						cbuffer.Format( "%s: %s" , GetResString(IDS_STATS_AVGDATAULSES) , GetResString(IDS_FSTAT_WAITING) ); }
d789 2
a790 1
					cbuffer.Format(GetResString(IDS_STATS_SUCCUPCOUNT),statGoodSessions,percentSessions);
d792 14
d807 1
a807 4
					if (percentSessions != 0 && statBadSessions > 0) percentSessions = 100 - percentSessions; // There were some good sessions and bad ones...
					else if (percentSessions == 0 && statBadSessions > 0) percentSessions = 100; // There were bad sessions and no good ones, must be 100%
					else percentSessions = 0; // No sessions at all, or no bad ones.
					cbuffer.Format(GetResString(IDS_STATS_FAILUPCOUNT),statBadSessions,percentSessions);
d809 9
d1761 5
d2151 2
a2152 5
	//nUpdateTime *= 10; //Now we finally get the average interval expressed in ticks!
	//while (tickNow-timeHistory.back()>nUpdateTime)		//Cax2 - keep them in sync
	//eklmn: small speed optimization
	uint32 timeLimit  = tickNow -nUpdateTime*10; 
	while (timeLimit > timeHistory.back())	
d2376 23
@


1.57
log
@Preparing for new sockets
@
text
@d189 1
a189 1
	// eklmn: we don't need to repaint  meters here, cause we gonna do it at the end of the function
a276 2
	//RepaintMeters();

d367 1
d1088 1
a1088 1
			__int64 sessionRunTime = (__int64)((GetTickCount()-theApp.stat_starttime)/1000);
d1115 1
a1115 1
			__int64 totalRunTime = (__int64)((GetTickCount()-theApp.stat_starttime)/1000)+theApp.glob_prefs->GetConnRunTime();
d1399 5
a1403 1
			cbuffer.Format("%s: %u (%1.1f%%)", GetResString(IDS_STATS_CLIENT_MODS), totalMODs,(float)100*totalMODs/(myStats[SO_EMULE]+myStats[SO_OLDEMULE])); 
d1406 1
a1406 1
			if (stattree.ItemHasChildren(hclisoftMODs))
d1408 2
a1409 8
				HTREEITEM hNextItem;
				HTREEITEM hChildItem = stattree.GetChildItem(hclisoftMODs);
				while (hChildItem != NULL)
				{
					hNextItem = stattree.GetNextItem(hChildItem, TVGN_NEXT);
					stattree.DeleteItem(hChildItem);
					hChildItem = hNextItem;
				}
a1411 1
			uint32 i = 0;
d1413 1
a1418 1
				//for(int i=0; i<clientMODs.GetSize(); i++)
d1439 20
a1458 2
						cbuffer.Format("%s: %u", theApp.clientlist->GetMODType(top_pos), top_count);
						stattree.InsertItem(cbuffer, hclisoftMODs);
d1462 6
d1529 1
a1529 1
										cli_lastCount[j]++;
d1550 1
a1550 1
									cli_lastCount[j]++;
d1840 1
a1991 1
	//ShowInterval();
a1995 1
	// empty function
d2123 1
a2123 1
	uint64 timeLimit  = tickNow -nUpdateTime*10; 
d2256 1
a2256 1
	m_Statistics.Invalidate();
d2270 1
a2270 1
	
d2309 40
@


1.56
log
@Minor changes.
@
text
@d967 1
d981 1
d1031 1
d1034 1
@


1.55
log
@new statistic (khaos based)
@
text
@d85 1
a85 1
	imagelistStatTree.Create(16, 16, ILC_COLOR | ILC_MASK, 12, 0);
@


1.54
log
@unicode cleanup
@
text
@a33 423
bool g_bUseNewStyle = false;

typedef enum
{
	STATS_UNKNOWN = 0,
	STATS_TRANSFER = 100,
	STATS_TRANSFER_SESSIONRATIO = 101,
	STATS_TRANSFER_UPLOADS = 102,
	STATS_TRANSFER_UPLOADS_TRANSFERRED = 103,
	STATS_TRANSFER_UPLOADS_ACTIVE = 104,
	STATS_TRANSFER_UPLOADS_WAITING = 105,
	STATS_TRANSFER_UPLOADS_SUCCEEDED = 106,
	STATS_TRANSFER_UPLOADS_FAILED = 107,
	STATS_TRANSFER_UPLOADS_AVGTIME = 108,
	STATS_TRANSFER_DOWNLOADS = 200,
	STATS_TRANSFER_DOWNLOADS_TRANSFERRED = 201,
	STATS_TRANSFER_DOWNLOADS_SOURCES = 202,
	STATS_TRANSFER_DOWNLOADS_ACTIVE = 203,
	STATS_TRANSFER_DOWNLOADS_UDPSEARCH = 204,
	STATS_CONNECTION = 300,
	STATS_CONNECTION_AVGDOWNLOADRATE = 301,
	STATS_CONNECTION_AVGUPLOADRATE = 302,
	STATS_CONNECTION_MAXDOWNLOADRATEAVG = 303,
	STATS_CONNECTION_MAXDOWNLOADRATESESSION = 304,
	STATS_CONNECTION_RECONNECTED = 305,
	STATS_CONNECTION_SINCEFIRSTTRANSFER = 306,
	STATS_CONNECTION_CONNECTEDSINCE = 307,
	STATS_CONNECTION_ACTIVE = 308,
	STATS_CONNECTION_MAXTIME = 309,
	STATS_CONNECTION_AVERAGE = 310,
	STATS_CONNECTION_MAXIMUM = 311,
	STATS_CLIENTS = 400,
	STATS_CLIENTS_EMULE = 401,
	STATS_CLIENTS_EMULE_1 = 402,
	STATS_CLIENTS_EMULE_2 = 403,
	STATS_CLIENTS_EMULE_3 = 404,
	STATS_CLIENTS_CDONKEY = 405,
	//Cax2 - keep them in enum order...
	STATS_CLIENTS_EMULE_OTHER=406,
	//STATS_CLIENTS_CDONKEY_1 = 406,
	STATS_CLIENTS_CDONKEY_2 = 407,
	STATS_CLIENTS_CDONKEY_3 = 408,
	STATS_CLIENTS_EDONKEYHYBRID = 409,
	STATS_CLIENTS_EDONKEYHYBRID_1 = 410,
	STATS_CLIENTS_EDONKEYHYBRID_2 = 411,
	STATS_CLIENTS_EDONKEYHYBRID_3 = 412,
	STATS_CLIENTS_EDONKEY = 413,
	STATS_CLIENTS_EDONKEY_1 = 414,
	STATS_CLIENTS_EDONKEY_2 = 415,
	STATS_CLIENTS_EDONKEY_3 = 416,
	STATS_CLIENTS_OLDMLDONKEY = 417,
	STATS_CLIENTS_OLDMLDONKEY_1 = 418,
	STATS_CLIENTS_OLDMLDONKEY_2 = 419,
	STATS_CLIENTS_OLDMLDONKEY_3 = 420,

	STATS_CLIENTS_OLDEMULE = 421,
	STATS_CLIENTS_OLDEMULE_1 = 422,
	STATS_CLIENTS_OLDEMULE_2 = 423,
	STATS_CLIENTS_OLDEMULE_3 = 424,

	STATS_CLIENTS_SHAREAZA = 425,
	STATS_CLIENTS_SHAREAZA_1 = 426,
	STATS_CLIENTS_SHAREAZA_2 = 427,
	STATS_CLIENTS_SHAREAZA_3 = 428,

	STATS_CLIENTS_LMULE = 429,
	SSTATS_CLIENTS_LMULE_1 = 430,
	STATS_CLIENTS_LMULE_2 = 431,
	STATS_CLIENTS_LMULE_3 = 432,

	STATS_CLIENTS_UNKNOWN = 435,

	STATS_QUEUE = 500,
	STATS_QUEUE_TRANSFERRING = 501,
	STATS_QUEUE_INQUEUE = 502,
	STATS_QUEUE_ASKING = 503,
	STATS_QUEUE_CONNECTING = 504,
	STATS_QUEUE_THRUSERVER = 505,
	STATS_QUEUE_GOTHASH = 506,
	STATS_QUEUE_NONEEDEDPARTS = 507,
	STATS_QUEUE_TOOMANYCONS = 508,
	STATS_QUEUE_TWOLOWIDS = 509,
	STATS_QUEUE_BLOCKED = 510,
	STATS_QUEUE_PROBLEM = 511,
	STATS_QUEUE_UNKNOWN = 512,
	STATS_SERVERS = 600,
	STATS_SERVERS_WORKING = 601,
	STATS_SERVERS_BAD = 602,
	STATS_SERVERS_TOTAL = 603,
	STATS_SERVERS_DELETED = 604,
	STATS_SERVERS_WORKINGUSERS = 605,
	STATS_SERVERS_WORKINGFILES = 606,
	STATS_SERVERS_TOTALUSERS = 607,
	STATS_SERVERS_TOTALFILES = 608,
	STATS_SERVERS_ONSERVER = 609,

	STATS_SHAREDFILES = 700,
	STATS_SHAREDFILES_TOTAL = 701,
	STATS_SHAREDFILES_TOTALSIZE = 702,
	STATS_SHAREDFILES_AVGSIZE = 703,
	STATS_TOTALDOWN = 800,
	STATS_TOTALDOWN_TOTAL = 801,
	STATS_TOTALDOWN_TOTALSIZE = 802,
	STATS_TOTALDOWN_DOWNLOADED = 803,
	STATS_TOTALDOWN_LEFT = 804,
	STATS_TOTALDOWN_NEEDSPACE = 805,
	STATS_TOTALDOWN_SPACELEFT = 806
} StatsDataEntry;

CStatisticsData::~CStatisticsData()
{
	EMULE_TRY
	for (int i=0;i < m_DataList.GetCount();i++)
	{
		if ( m_DataList[i] )
		{
			delete m_DataList[i];
		}
	}
	m_DataList.RemoveAll();
	EMULE_CATCH
}

CStatisticsData::CDataEntry::CDataEntry(unsigned int nID, CString sTitle, CDataEntry* pParent)
{
	try
	{
		m_nID = nID;
		m_sTitle = sTitle;
		m_pParent = pParent;
		m_pTopItem = m_pSubItem = NULL;
		m_hItem = NULL;
		if(!pParent)
			m_nLevel = 0;
		else
			m_nLevel = pParent->m_nLevel + 1;
	}
	catch(...)
	{
		TRACE("Exception in CDataEntry constructor\n");
	}
}

COptionTreeItem* CStatisticsData::CDataEntry::GetItem()
{
	if(!m_nLevel)
		return m_pTopItem;
	else
		return (COptionTreeItem*)m_pSubItem;
}

CStatisticsData::CDataEntry* CStatisticsData::CDataEntry::GetParent(unsigned int nParentLevel)
{
	try
	{
		if(nParentLevel >= m_nLevel)
			return this;
		else
			return m_pParent->GetParent(nParentLevel);
	}
	catch(...)
	{
		TRACE("Exception in CDataEntry GetParent\n");
		return NULL;
	}
}

void CStatisticsData::CDataEntry::Expand(bool bExpand)
{
	try
	{
		if(!m_nLevel)
			m_pTopItem->Expand(bExpand);
		else
			m_pSubItem->Expand(bExpand);
	}
	catch(...)
	{
		TRACE("Exception in CDataEntry Expand\n");
	}
}

bool CStatisticsData::CDataEntry::IsExpanded()
{
	try
	{
		if(!m_nLevel)
			return m_pTopItem->IsExpanded();
		else
			return m_pSubItem->IsExpanded();
	}
	catch(...)
	{
		TRACE("Exception in CDataEntry Expand\n");
	}
	return false;
}

void CStatisticsData::AddEntry(unsigned int nID, CString sTitle, unsigned int nLevel)
{
	EMULE_TRY

	static CDataEntry* pLastData = NULL;

	CDataEntry* pData;
	if(nLevel == 0 || pLastData == NULL)
		pData = new CDataEntry(nID, sTitle, NULL);
	else
		pData = new CDataEntry(nID, sTitle, pLastData->GetParent(nLevel - 1));

	pLastData = pData;

	if(g_bUseNewStyle)
	{
		if(pData->m_nLevel == 0)
		{
			pData->m_pTopItem = m_ctrlStatsList.InsertItem(new COptionTreeItem);
			pData->m_pTopItem->SetLabelText(sTitle);
		}
		else
		{
			pData->m_pSubItem = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, pData->GetParent(nLevel - 1)->GetItem());
			pData->m_pSubItem->SetLabelText(sTitle);
			if(pData->m_pSubItem->CreateStaticItem(0))
				pData->m_pSubItem->SetTextColor(RGB(0,45,126));
		}
	}
	else
	{
		if(pData->m_nLevel == 0)
			pData->m_hItem = stattree.InsertItem(sTitle);
		else
			pData->m_hItem = stattree.InsertItem(sTitle, pData->GetParent(nLevel - 1)->m_hItem);
	}

	m_DataList.Add(pData);

	EMULE_CATCH2
}

CStatisticsData::CDataEntry* CStatisticsData::FindItem(unsigned int nID)
{
	EMULE_TRY

	for(int i = 0; i < m_DataList.GetCount(); i++)
	{
		if(m_DataList[i]->m_nID == nID)
			return m_DataList[i];
	}

	EMULE_CATCH2

	return NULL;
}

void CStatisticsData::SetTitle(unsigned int nID, CString sTitle)
{
	EMULE_TRY

	CDataEntry *pData = FindItem(nID);
	if(pData)
	{
		pData->m_sTitle = sTitle;
		if(g_bUseNewStyle)
			pData->GetItem()->SetLabelText(sTitle);
		else
			stattree.SetItemText(pData->m_hItem, pData->m_sTitle);
	}

	EMULE_CATCH2
}

void CStatisticsData::SetStatic(unsigned int nID, CString sStatic)
{
	EMULE_TRY

	CDataEntry *pData = FindItem(nID);
	if(pData)
	{
		pData->m_sValue = sStatic;
		if(g_bUseNewStyle)
			((COptionTreeItemStatic*)pData->GetItem())->SetStaticText(sStatic);
		else
			stattree.SetItemText(pData->m_hItem, pData->m_sTitle + pData->m_sValue);
	}

	EMULE_CATCH2
}

void CStatisticsData::Expand(unsigned int nID, bool bExpand)
{
	EMULE_TRY

	CDataEntry *pData = FindItem(nID);
	if(pData)
	{
		if(g_bUseNewStyle)
			pData->Expand(bExpand);
		else
			stattree.Expand(pData->m_hItem, bExpand ? TVE_EXPAND : TVE_COLLAPSE);
	}

	EMULE_CATCH2
}

bool CStatisticsData::IsExpanded(unsigned int nID)
{
	EMULE_TRY

	CDataEntry *pData = FindItem(nID);
	if(pData)
	{
		if(g_bUseNewStyle)
			return pData->IsExpanded();
		else
			return true;	// is there possibility to see when we're expanded?
	}

	EMULE_CATCH2

	return false;
}

void CStatisticsData::SetValue(unsigned int nID, CString sValue, bool bReverse)
{
	EMULE_TRY

	if(g_bUseNewStyle)
	{
		int iPos;
		if(bReverse)
			iPos = sValue.ReverseFind(':');
		else
			iPos = sValue.Find(':', 0);
		CString strValue = sValue.Right(sValue.GetLength()-iPos-1);
		CString strLabel = sValue.Left(iPos > 0 ? iPos : 0);
		if(strLabel.GetLength() > 0)
		{
			SetTitle(nID, strLabel);
			SetStatic(nID, strValue);
		}
		else
			SetTitle(nID, strValue);
	}
	else
		SetTitle(nID, sValue);

	EMULE_CATCH2
}

void CStatisticsData::SetRedraw(BOOL bRedraw)
{
	EMULE_TRY

	if(g_bUseNewStyle)
	{
		m_ctrlStatsList.SetRedraw(bRedraw); 
		if(bRedraw)
		{
			m_ctrlStatsList.UpdatedItems();
			m_ctrlStatsList.Invalidate();
		}
	}
	else
	{
		stattree.SetRedraw(bRedraw);
		if(bRedraw)
		{
			stattree.Invalidate();
		}
	}

	EMULE_CATCH2
}

HWND CStatisticsData::GetListHWND()
{
	if(g_bUseNewStyle)
		return m_ctrlStatsList.GetSafeHwnd(); 
	else
		return stattree.GetSafeHwnd();
}

void CStatisticsData::ExpandAllItems()
{
	EMULE_TRY

	if(g_bUseNewStyle)
		m_ctrlStatsList.ExpandAllItems();
	else
	{
		for(int i = 0; i < m_DataList.GetCount(); i++)
			Expand(m_DataList[i]->m_nID, true);
	}

	EMULE_CATCH2
}

CString CStatisticsData::ExportHTML()
{
	EMULE_TRY

	CString sRet;
	for(int i = 0; i < m_DataList.GetCount(); i++)
	{
		for(uint32 j = 0; j < m_DataList[i]->m_nLevel; j++)
			sRet += _T("&nbsp;&nbsp;&nbsp;");
		if(!m_DataList[i]->m_nLevel)
			sRet += _T("<b>");
		sRet += m_DataList[i]->m_sTitle;
		if(!m_DataList[i]->m_nLevel)
			sRet += _T("</b>");
		if(!m_DataList[i]->m_sValue.IsEmpty())
			sRet += _T(": ") + m_DataList[i]->m_sValue;
		sRet += _T("<br>");
	}
	return sRet;

	EMULE_CATCH2

	return _T("");
}

d39 1
a39 1
	: CResizableDialog(CStatisticsDlg::IDD, pParent), m_DownloadOMeter(3),m_Statistics(4),m_UploadOMeter(3)
a40 4
	EMULE_TRY

	m_bFirstShow = true;
	g_bUseNewStyle = !(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04);
a41 1
	EMULE_CATCH2
d46 4
a49 1
	//The List elements deleted automatically so no need to delete them here
d56 1
a56 1
	DDX_Control(pDX, IDC_STATTREE, m_Stats.stattree);
d64 1
d66 3
a68 1
	ON_WM_SIZE()
d80 2
d83 43
a125 1
	EnableWindow( FALSE );
a126 3
	// setup tree
	CreateStatsList();

d133 2
a134 4
	int iMaxDlGraph = theApp.glob_prefs->GetMaxGraphDownloadRate();
	iMaxDlGraph = int((iMaxDlGraph/10.0)+0.99)*10;
	int iMaxUlGraph = theApp.glob_prefs->GetMaxGraphUploadRate();
	iMaxUlGraph = int((iMaxUlGraph/4.0)+0.99)*4;
d188 3
a190 2
	oldRatio=theApp.glob_prefs->GetGraphRatio();	//Cax2 - Resize active connections line...
	RepaintMeters();
d197 1
a197 1

a199 2
	EnableWindow( TRUE );

d207 24
d232 1
a232 1
	AddAnchor(m_Stats.GetListHWND(), TOP_LEFT, BOTTOM_CENTER);
d276 10
a286 1
	ShowStatistics();
d294 6
a299 6
// v- eklmn: bugfix(00): resource cleanup due to CResizableDialog
void CStatisticsDlg::OnDestroy()
{
	CResizableDialog::OnDestroy();
}
// ^- eklmn: bugfix(00): resource cleanup due to CResizableDialog
d301 5
a305 3
void CStatisticsDlg::SetupLegend( int ResIdx, int ElmtIdx, int legendNr)
{
	EMULE_TRY
d307 5
a311 1
	CRect Rect;
d313 4
a316 15
	GetDlgItem( ResIdx )->GetWindowRect( Rect );
	ScreenToClient( Rect );
	
	if (legendNr==1){
		if (!m_Led1[ElmtIdx]) m_Led1[ElmtIdx].Create(WS_VISIBLE | WS_CHILD, Rect, this);
		m_Led1[ElmtIdx].SetBackgroundColor(m_DownloadOMeter.GetPlotColor(ElmtIdx));
		m_Led1[ElmtIdx].SetFrameColor(RGB(0x00, 0x00, 0x00));
	} else if (legendNr==2) {
		if (!m_Led2[ElmtIdx]) m_Led2[ElmtIdx].Create( WS_VISIBLE | WS_CHILD, Rect, this);
		m_Led2[ElmtIdx].SetBackgroundColor(m_UploadOMeter.GetPlotColor(ElmtIdx));
		m_Led2[ElmtIdx].SetFrameColor(RGB(0x00, 0x00, 0x00));
	} else if (legendNr==3){
		if (!m_Led3[ElmtIdx]) m_Led3[ElmtIdx].Create(WS_VISIBLE | WS_CHILD, Rect, this);
		m_Led3[ElmtIdx].SetBackgroundColor(m_Statistics.GetPlotColor(ElmtIdx));
		m_Led3[ElmtIdx].SetFrameColor(RGB(0x00, 0x00, 0x00));
d319 6
a324 2
	EMULE_CATCH
}
d326 4
a329 3
void CStatisticsDlg::RepaintMeters() 
{
	EMULE_TRY
d331 4
a334 16
	m_DownloadOMeter.SetBackgroundColor(theApp.glob_prefs->GetStatsColor(0));
	m_DownloadOMeter.SetGridColor(theApp.glob_prefs->GetStatsColor(1));
	m_DownloadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(4) ,0);
	m_DownloadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(3) ,1);
	m_DownloadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(2) ,2);
	m_UploadOMeter.SetBackgroundColor(theApp.glob_prefs->GetStatsColor(0));
	m_UploadOMeter.SetGridColor(theApp.glob_prefs->GetStatsColor(1));
	m_UploadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(7) ,0);
	m_UploadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(6) ,1);
	m_UploadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(5) ,2);
	m_Statistics.SetBackgroundColor(theApp.glob_prefs->GetStatsColor(0));
	m_Statistics.SetGridColor(theApp.glob_prefs->GetStatsColor(1));
	m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(8),0);
	m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(9),1);
	//m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(10),2);
	m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(10),3);
d336 4
a339 4
	if (oldRatio!=theApp.glob_prefs->GetGraphRatio())	//Cax2 - Resize the general connections...
	{
		m_Statistics.ReSizePlot(0,(double)oldRatio/theApp.glob_prefs->GetGraphRatio());
		oldRatio=theApp.glob_prefs->GetGraphRatio();
a340 14
	m_Statistics.Invalidate();
	SetupLegend( IDC_C0_2, 0 ,1);
	SetupLegend( IDC_C0_3, 1 ,1);
	SetupLegend( IDC_C0,   2 ,1);
	
	SetupLegend( IDC_C1_2, 0 ,2);
	SetupLegend( IDC_C1_3, 1 ,2);
	SetupLegend( IDC_C1,   2 ,2);
	
	SetupLegend( IDC_S0,   0 ,3);
	SetupLegend( IDC_S1,   1 ,3);
	//SetupLegend( IDC_S2, 2 ,3);
	SetupLegend( IDC_S3,   3 ,3);
	EnableWindow(TRUE);		//Cax2 show the updated graphs immediately!
d342 1094
a1435 2
	EMULE_CATCH
}
d1437 107
d1545 1
a1546 3
void CStatisticsDlg::SetCurrentRate(float uploadrate, float downloadrate) 
{
	EMULE_TRY
d1548 2
a1549 3
	double m_dPlotDataUp[ 3 ];
	double m_dPlotDataDown[ 3 ];
	int myRateStats[3] = {0};
d1551 83
a1633 3
	// current rate
	m_dPlotDataDown[2]=downloadrate;
	m_dPlotDataUp[2]=uploadrate;
d1635 1
a1635 5
	if (maxDown<downloadrate) maxDown=downloadrate;
	
	// averages
	m_dPlotDataDown[0]=	GetAvgDownloadRate(AVG_SESSION);
	m_dPlotDataUp[0]=	GetAvgUploadRate(AVG_SESSION);
d1637 1
a1637 2
	m_dPlotDataDown[1]=	GetAvgDownloadRate(AVG_TIME);
	m_dPlotDataUp[1]=	GetAvgUploadRate(AVG_TIME);
d1639 1
a1639 3
	// show
	m_DownloadOMeter.AppendPoints(m_dPlotDataDown);
	m_UploadOMeter.AppendPoints(m_dPlotDataUp);
d1641 5
d1647 7
a1653 1
	// get Partialfiles summary
d1655 7
a1661 5
	theApp.downloadqueue->GetDownloadStats(myRateStats);
	m_dPlotDataMore[0]=(activeconnections/theApp.glob_prefs->GetGraphRatio());//myRateStats[0]; // propstats Cax2
	m_dPlotDataMore[1]=theApp.uploadqueue->GetUploadQueueLength();
	m_dPlotDataMore[2]=0;//theApp.uploadqueue->GetWaitingUserCount();
	m_dPlotDataMore[3]=myRateStats[1];
d1663 3
a1665 1
	m_Statistics.AppendPoints(m_dPlotDataMore);
d1667 3
a1669 6
	// webserver
	UpDown updown;
	updown.upload = uploadrate;
	updown.download = downloadrate;
	updown.connections = activeconnections;	//SyruS / theApp.glob_prefs->GetGraphRatio();
	theApp.webserver->AddStatsLine(updown);
d1671 8
a1678 1
	EMULE_CATCH
d1680 2
d1683 1
a1683 1
void CStatisticsDlg::UpdateConnectionsStatus()
d1685 2
a1687 15
#ifdef OLD_SOCKETS_ENABLED
	activeconnections = theApp.listensocket->GetOpenSockets(); // netwolf 07.05.03 (moved here from CStatisticsDlg::SetCurrentRate())
#endif //OLD_SOCKETS_ENABLED
	if( peakconnections < activeconnections )
		peakconnections = activeconnections;
#ifdef OLD_SOCKETS_ENABLED
	if( theApp.serverconnect->IsConnected() ){
	totalconnectionchecks++;
	float percent;
	percent = (float)((float)(totalconnectionchecks-1)/(float)totalconnectionchecks);
	if( percent > .99 )
		percent = (float).99;
	averageconnections = (averageconnections*percent) + (float)((float)activeconnections*(float)(1-percent));
	}
#endif //OLD_SOCKETS_ENABLED
d1689 190
a1879 1
}
d1881 1
a1881 13
float CStatisticsDlg::GetMaxConperFiveModifier(){
	//This is a alpha test.. Will clean up for b version.
	float SpikeSize;
#ifdef OLD_SOCKETS_ENABLED
	SpikeSize = theApp.listensocket->GetOpenSockets() - averageconnections ;
#endif //OLD_SOCKETS_ENABLED
	if ( SpikeSize < 1 )
		return 1;
	float SpikeTolerance = 25*(float)theApp.glob_prefs->GetMaxConperFive()/(float)10;
	if ( SpikeSize > SpikeTolerance )
		return 0;
	float Modifier = (1-(SpikeSize/SpikeTolerance));
	return Modifier;
d1884 1
a1884 1
void CStatisticsDlg::RecordRate() 
a1886 2
	
	if (theApp.stat_transferStarttime==0) return;
d1888 4
a1891 14
	// Cax 2 - save every 10th of the statsaverageminutes
	// no need to be more accurate...
	DWORD tickNow=GetTickCount();
	DWORD nUpdateTime =theApp.glob_prefs->GetStatsAverageMinutes()*6000;		//A 10th of the average interval
	if (tickNow-timeHistory.front()<nUpdateTime) //too little time has passed since we updated the list last
		return;
	
	downrateHistory.push_front(theApp.stat_sessionReceivedBytes);
	uprateHistory.push_front(theApp.stat_sessionSentBytes);
	timeHistory.push_front(tickNow);
	
	// limit to maxmins 
	nUpdateTime *= 10; //Now we finally get the average interval expressed in ticks!
	while (tickNow-timeHistory.back()>nUpdateTime)		//Cax2 - keep them in sync
d1893 1
a1893 5
	{
		downrateHistory.pop_back();
		uprateHistory.pop_back();
		timeHistory.pop_back();
	}
d1898 1
a1898 1
void CStatisticsDlg::ShowStatistics() 
d1900 2
d1904 4
a1907 1
	m_Stats.SetRedraw(FALSE);
d1909 6
a1914 48
	CString buffer;
	CString buffer2;
	CString cbuffer;
	bool resize;
	DWORD running;
	int myStats[SO_LAST];
	int myRateStats[3];
	float DownAvgRate;

	uint64 ui64TotFileSize=0; 
	uint64 ui64TotBytesLeftToTransfer=0;
	uint64 ui64TotNeededSpace=0;

	resize = false;
	UpdateConnectionsStatus();
	theApp.downloadqueue->GetDownloadStats(myRateStats,ui64TotFileSize,ui64TotBytesLeftToTransfer,ui64TotNeededSpace);	// changed by InterCeptor (xChipx: download statistics) 11.11.02

	uint64 ui64BytesTransfered;
	uint64 t_FreeBytes=0;
	float fPercent = 0.0f;

	cbuffer.Format(GetResString(IDS_DWTOT_NR),myRateStats[2]); 
	m_Stats.SetValue(STATS_TOTALDOWN_TOTAL, cbuffer);

	buffer = CastItoXBytes(ui64TotFileSize); 
	cbuffer.Format(GetResString(IDS_DWTOT_TSD),buffer); 
	m_Stats.SetValue(STATS_TOTALDOWN_TOTALSIZE, cbuffer);

	ui64BytesTransfered = (ui64TotFileSize-ui64TotBytesLeftToTransfer);
	buffer = CastItoXBytes(ui64BytesTransfered); 
	if(ui64TotFileSize != 0)
	fPercent = (float)((ui64BytesTransfered*100)/(ui64TotFileSize)); //kuchin
	cbuffer.Format(GetResString(IDS_DWTOT_TCS),buffer,fPercent); 
	m_Stats.SetValue(STATS_TOTALDOWN_DOWNLOADED, cbuffer);

	buffer = CastItoXBytes(ui64TotBytesLeftToTransfer);
	cbuffer.Format(GetResString(IDS_DWTOT_TSL),buffer); 
	m_Stats.SetValue(STATS_TOTALDOWN_LEFT, cbuffer);

	buffer = CastItoXBytes(ui64TotNeededSpace); 
	cbuffer.Format(GetResString(IDS_DWTOT_TSN),buffer); 
	m_Stats.SetValue(STATS_TOTALDOWN_NEEDSPACE, cbuffer);

	t_FreeBytes = GetFreeDiskSpaceX(theApp.glob_prefs->GetTempDir().GetBuffer());
	buffer = CastItoXBytes(t_FreeBytes); 
	buffer2.Format(GetResString(IDS_DWTOT_FS),buffer);

	if(ui64TotNeededSpace > t_FreeBytes)
d1916 3
a1918 3
		buffer = CastItoXBytes(ui64TotNeededSpace - t_FreeBytes);
		cbuffer.Format(GetResString(IDS_NEEDFREEDISKSPACE),buffer2,buffer);
	}
d1920 4
a1923 27
		cbuffer.Format(_T("%s"),buffer2);
	m_Stats.SetValue(STATS_TOTALDOWN_SPACELEFT, cbuffer);

	buffer = CastItoXBytes(theApp.stat_sessionReceivedBytes);
	buffer2 = CastItoXBytes(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded());
	cbuffer.Format(GetResString(IDS_STATS_DDATA), buffer, buffer2);
	m_Stats.SetValue(STATS_TRANSFER_DOWNLOADS_TRANSFERRED, cbuffer);

	buffer = CastItoXBytes(theApp.stat_sessionSentBytes);
	buffer2 = CastItoXBytes(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded());
	cbuffer.Format(GetResString(IDS_STATS_UDATA), buffer, buffer2);
	m_Stats.SetValue(STATS_TRANSFER_UPLOADS_TRANSFERRED, cbuffer);

	if(theApp.stat_transferStarttime>0) 
	{
		cbuffer.Format(GetResString(IDS_STATS_AVGDL), GetAvgDownloadRate(AVG_SESSION));
		m_Stats.SetValue(STATS_CONNECTION_AVGDOWNLOADRATE, cbuffer);

		cbuffer.Format(GetResString(IDS_STATS_AVGUL), GetAvgUploadRate(AVG_SESSION));
		m_Stats.SetValue(STATS_CONNECTION_AVGUPLOADRATE, cbuffer);

		DownAvgRate=GetAvgDownloadRate(AVG_SESSION);
		if (maxDownavg<DownAvgRate) maxDownavg=DownAvgRate;
		cbuffer.Format(GetResString(IDS_STATS_MAXAVGDL),maxDownavg);
		m_Stats.SetValue(STATS_CONNECTION_MAXDOWNLOADRATEAVG, cbuffer);
		cbuffer.Format(GetResString(IDS_STATS_MAXDL),maxDown);
		m_Stats.SetValue(STATS_CONNECTION_MAXDOWNLOADRATESESSION, cbuffer);
d1926 2
a1927 2
	cbuffer.Format(GetResString(IDS_STATS_FOUNDSRC), myRateStats[0]);
	m_Stats.SetValue(STATS_TRANSFER_DOWNLOADS_SOURCES, cbuffer);
d1929 2
a1930 33
	cbuffer.Format(GetResString(IDS_STATS_ACTDL), myRateStats[1]);
	m_Stats.SetValue(STATS_TRANSFER_DOWNLOADS_ACTIVE, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_UDPSEARCH), theApp.downloadqueue->GetUDPSearchStatus());
	m_Stats.SetValue(STATS_TRANSFER_DOWNLOADS_UDPSEARCH, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_ACTUL), theApp.uploadqueue->GetUploadQueueLength());
	m_Stats.SetValue(STATS_TRANSFER_UPLOADS_ACTIVE, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_WAITINGUSERS), theApp.uploadqueue->GetWaitingUserCount());
	m_Stats.SetValue(STATS_TRANSFER_UPLOADS_WAITING, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_SUCCUPCOUNT), theApp.uploadqueue->GetSuccessfullUpCount());
	m_Stats.SetValue(STATS_TRANSFER_UPLOADS_SUCCEEDED, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_FAILUPCOUNT), theApp.uploadqueue->GetFailedUpCount());
	m_Stats.SetValue(STATS_TRANSFER_UPLOADS_FAILED, cbuffer);
	running=theApp.uploadqueue->GetAverageUpTime();
	buffer = CastSecondsToHM(running);
	cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME), buffer);
	m_Stats.SetValue(STATS_TRANSFER_UPLOADS_AVGTIME, cbuffer);

	if(theApp.stat_reconnects>0) 
		cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),theApp.stat_reconnects-1);
	else 
		cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),0);
	
	m_Stats.SetValue(STATS_CONNECTION_RECONNECTED, cbuffer);

	if(theApp.stat_transferStarttime==0) 
		cbuffer.Format(GetResString(IDS_STATS_WAITTRANSF)); 
	else 
	{
		running = (GetTickCount()-theApp.stat_transferStarttime) / 1000;
		buffer = CastSecondsToHM(running);
		cbuffer.Format(GetResString(IDS_TRANSFERTIME), buffer);
	}
	m_Stats.SetValue(STATS_CONNECTION_SINCEFIRSTTRANSFER, cbuffer);
d1932 3
a1934 9
	if(theApp.stat_serverConnectTime==0) 
		cbuffer.Format(GetResString(IDS_STATS_WAITCONN)); 
	else 
	{
		running=(GetTickCount()-theApp.stat_serverConnectTime)/1000;
		buffer = CastSecondsToHM(running);
		cbuffer.Format(GetResString(IDS_STATS_CONNECTEDSINCE),buffer);
	}
	m_Stats.SetValue(STATS_CONNECTION_CONNECTEDSINCE, cbuffer);
d1936 1
a1936 2
	// katsyonak 03.06.03: total up/down ratio - start
	if(theApp.stat_sessionReceivedBytes >0 && theApp.stat_sessionSentBytes >0)
d1938 6
a1943 4
		if(theApp.stat_sessionReceivedBytes<theApp.stat_sessionSentBytes) 
			buffer.Format(_T("%.2f : 1"),(float)theApp.stat_sessionSentBytes/theApp.stat_sessionReceivedBytes);
		else 
			buffer.Format(_T("1 : %.2f"),(float)theApp.stat_sessionReceivedBytes/theApp.stat_sessionSentBytes);
a1945 3
		buffer = "?";

	if((theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded()) >0 && (theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded()) >0)
d1947 6
a1952 4
		if((theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded()) < (theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded())) 
			buffer2.Format(_T("%.2f : 1"),(float)(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded())/(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded()));
		else 
			buffer2.Format(_T("1 : %.2f"),(float)(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded())/(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded()));
a1953 25
	else
		buffer2 = "?";
	m_Stats.SetTitle(STATS_TRANSFER_SESSIONRATIO, GetResString(IDS_STATS_RATIO));
	cbuffer.Format( _T("%s (%s)"), buffer, buffer2);
	m_Stats.SetStatic(STATS_TRANSFER_SESSIONRATIO, cbuffer);
	// katsyonak 03.06.03 total up/down ratio - end
		
	// shared files stats
	cbuffer.Format(GetResString(IDS_SHAREDFILESCOUNT),theApp.sharedfiles->GetCount());
	m_Stats.SetValue(STATS_SHAREDFILES_TOTAL, cbuffer);

	uint64 allsize=theApp.sharedfiles->GetDatasize();
	buffer = CastItoXBytes(allsize);

	cbuffer.Format(GetResString(IDS_SF_SIZE), buffer);
	m_Stats.SetValue(STATS_SHAREDFILES_TOTALSIZE, cbuffer);

	if(theApp.sharedfiles->GetCount() != 0)
		buffer = CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount());
	else 
	{
		buffer = "-";		
	}
	cbuffer.Format(GetResString(IDS_SF_AVERAGESIZE),buffer);
	m_Stats.SetValue(STATS_SHAREDFILES_AVGSIZE, cbuffer);
d1955 2
a1956 14
	// xrmb : statsclientstatus
	ClientsData AllClients;
	// get clientversion-counts

	uint32 totalclient;
	theApp.clientlist->GetStatistics(totalclient,myStats, &AllClients);
	totalclient -= myStats[SO_UNKNOWN];
	if( !totalclient )
		totalclient = 1;
	//Cax2 - not good... 3 different functions need to be kept in sync for this for() to work properly.
	for(int j = STATS_QUEUE_TRANSFERRING; j <= STATS_QUEUE_TRANSFERRING+DS_NONE-1; j++)	//Cax2 - removed unknown... it confused people!
	{
		int n = j - STATS_QUEUE_TRANSFERRING;
		cbuffer.Format(_T("%s: %i"), GetStatusDLQueueString((eDLQState)n), AllClients.m_pClients[SO_LAST][n]);
d1958 4
a1961 8
		m_Stats.SetValue(j, cbuffer);
	}

	// For all KNOWN clients types
	//Cax2 - hmmm, weird loop....
	uint32 iSoftTot;
	uint32 iSubTot;
	for ( j = 0; j < (uint32)SO_UNKNOWN ; j ++ )
d1963 3
a1965 105

		// Add client type //Cax2 - Exception! emules &  old emules lumped together in the stats now...
		iSoftTot=myStats[j]+((j==(int)SO_EMULE)?myStats[(int)SO_OLDEMULE]:0);
		if (j!=(int)SO_OLDEMULE)
		{
			cbuffer.Format(_T("%s: %i (%1.1f%%)"),GetClientNameString((eClientTypes)j),iSoftTot,(double)100*iSoftTot/totalclient);
			m_Stats.SetValue(STATS_CLIENTS + j*4 + 1, cbuffer);
		}

		//--- find top 3 client versions ---
		uint32	currtop=0, lasttop=0xFFFFFFFF;
		if (j!=(int)SO_CDONKEY && j!=(int)SO_MLDONKEY && j!=(int)SO_OLDEMULE && j!=(int)SO_SHAREAZA)	//Cax2 - these clients won't show subcats
		{
			iSubTot=0;
			for(int i=0; i<3; i++)
			{
				POSITION pos=AllClients.m_pClients[j].GetStartPosition();
				uint32	topver=0;
				uint32	topcnt=0;
				uint32	totcnt=0;
				uint32	ver;
				uint32	cnt;
				while(pos)
				{
					AllClients.m_pClients[j].GetNextAssoc(pos, ver, cnt);
					totcnt+=cnt;
					if(currtop<cnt && cnt<lasttop)
					{
						topver=ver;
						topcnt=cnt;
						currtop=cnt;
					}
				}
				lasttop=currtop;
				currtop=0;
				if(topcnt)
				{
					iSubTot+=topcnt;
					cbuffer.Format(_T("v%s: %i (%1.1f%%)"), GetClientVersionString((eClientTypes)j,topver), topcnt, (double)topcnt/totcnt*100);
				}
				else
					cbuffer.Format(GetResString(IDS_FSTAT_WAITING)+_T(": "));//Cax2 - clears the stats from old data...
				m_Stats.SetValue(STATS_CLIENTS + j*4 + i + 2, cbuffer); 
			}

			if (j==(int)SO_EMULE)
			{
				if (iSoftTot>iSubTot)		//Cax2 - show only if > 0...
					cbuffer.Format(_T("%s: %i (%1.1f%%)"),GetResString(IDS_STATS_UNKNOWNCLIENT),iSoftTot-iSubTot,(double)100*(iSoftTot-iSubTot)/iSoftTot);
				else
					cbuffer.Format(GetResString(IDS_FSTAT_WAITING)+_T(": "));//Cax2 - clears the stats from old data...
				m_Stats.SetValue(STATS_CLIENTS_EMULE_OTHER, cbuffer);
			}
		}
	}
	// UNKNOWN should be added separately because it does not have versions
	cbuffer.Format(_T("%s: %i(%1.1f%%)"),GetClientNameString(SO_UNKNOWN),myStats[SO_UNKNOWN],(double)100*myStats[SO_UNKNOWN]/(totalclient+myStats[SO_UNKNOWN]));
	m_Stats.SetValue(STATS_CLIENTS_UNKNOWN, cbuffer);
	
	// xrmb

	uint32 servtotal;
	uint32 servfail;
	uint32 servuser;
	uint32 servfile;
	uint32 servtuser;
	uint32 servtfile;
	float servocc;
	theApp.serverlist->GetStatus(servtotal, servfail, servuser, servfile, servtuser, servtfile, servocc);
	cbuffer.Format(GetResString(IDS_SF_WORKING)+_T(": %i"),servtotal-servfail);
	m_Stats.SetValue(STATS_SERVERS_WORKING, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_FAIL)+_T(": %i"),servfail);
	m_Stats.SetValue(STATS_SERVERS_BAD, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_TOTAL)+_T(": %i"),servtotal);
	m_Stats.SetValue(STATS_SERVERS_TOTAL, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_DELCOUNT)+_T(": %i"),theApp.serverlist->GetDeletedServerCount());
	m_Stats.SetValue(STATS_SERVERS_DELETED, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_WUSER)+_T(": %i"),servuser);
	m_Stats.SetValue(STATS_SERVERS_WORKINGUSERS, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_WFILE)+_T(": %i"),servfile);
	m_Stats.SetValue(STATS_SERVERS_WORKINGFILES, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_USER)+_T(": %i"),servtuser);
	m_Stats.SetValue(STATS_SERVERS_TOTALUSERS, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_FILE)+_T(": %i"),servtfile);
	m_Stats.SetValue(STATS_SERVERS_TOTALFILES, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_SRVOCC),servocc);
	m_Stats.SetValue(STATS_SERVERS_ONSERVER, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_ACTIVECON)+_T(": %i"),activeconnections);
	m_Stats.SetValue(STATS_CONNECTION_ACTIVE, cbuffer);

	uint32 m_itemp;
#ifdef OLD_SOCKETS_ENABLED
	m_itemp = theApp.listensocket->GetMaxConnectionReached();
#endif //OLD_SOCKETS_ENABLED
	if(m_itemp != m_ilastMaxConnReached)
	{
		COleDateTime time(COleDateTime::GetCurrentTime());
		cbuffer.Format(GetResString(IDS_SF_MAXCONLIMITREACHED)+_T(": %i : %s"),m_itemp,time.Format());
		m_Stats.SetValue(STATS_CONNECTION_MAXTIME, cbuffer);
		m_ilastMaxConnReached = m_itemp;
	}
	else if(m_itemp == 0)
	{
		cbuffer.Format(GetResString(IDS_SF_MAXCONLIMITREACHED)+_T(": %i"),m_itemp);
		m_Stats.SetValue(STATS_CONNECTION_MAXTIME, cbuffer);
d1967 2
a1968 12
#ifdef OLD_SOCKETS_ENABLED
	if(theApp.serverconnect->IsConnected())
	{
		cbuffer.Format(GetResString(IDS_SF_AVGCON)+_T(": %i"),(int)averageconnections);
		m_Stats.SetValue(STATS_CONNECTION_AVERAGE, cbuffer);
	}
	else
#endif //OLD_SOCKETS_ENABLED
	{
		cbuffer.Format(GetResString(IDS_STATS_WAITCONN));
		m_Stats.SetValue(STATS_CONNECTION_AVERAGE, cbuffer);
	}
d1970 3
a1972 6
	cbuffer.Format(GetResString(IDS_SF_PEAKCON)+_T(": %i"),peakconnections);
	m_Stats.SetValue(STATS_CONNECTION_MAXIMUM, cbuffer);
	
	m_Stats.SetRedraw(TRUE);

	EMULE_CATCH
d2002 2
a2003 1
	if (averageType==AVG_SESSION) {
d2021 28
a2048 3
void CStatisticsDlg::OnShowWindow(BOOL bShow,UINT nStatus)
{
	EMULE_TRY
d2050 24
a2073 4
	if(bShow && m_bFirstShow && g_bUseNewStyle)
	{
		m_bFirstShow = false;
		m_Stats.SetColumn(theApp.glob_prefs->GetStatsColumnWidth());
a2074 2

	EMULE_CATCH
d2076 2
d2079 1
a2079 1
void CStatisticsDlg::ShowInterval() 
d2082 2
d2085 1
a2085 1
	EnableWindow(FALSE);
d2087 4
a2090 2
	if(!m_DownloadOMeter.GetSafeHwnd() || !m_UploadOMeter.GetSafeHwnd())
		return;	
d2092 3
a2094 3
	CRect r;
	m_DownloadOMeter.GetPlotRect(r);
	int shownSecs = r.Width() * theApp.glob_prefs->GetTrafficOMeterInterval();
d2096 6
a2101 2
	
	if(theApp.glob_prefs->GetTrafficOMeterInterval()==0) 
d2103 3
a2105 8
		m_DownloadOMeter.SetXUnits(GetResString(IDS_STOPPED)); 
		m_UploadOMeter.SetXUnits(GetResString(IDS_STOPPED)); 
	} 
	else
	{		
		CString buffer = CastSecondsToHM(shownSecs);
		m_UploadOMeter.SetXUnits(buffer);
		m_DownloadOMeter.SetXUnits(buffer); 
a2107 3
	UpdateData(FALSE);
	EnableWindow(TRUE);

d2111 3
a2113 1
void CStatisticsDlg::SetARange(bool SetDownload,int maxValue)
d2116 11
a2126 2

	if (SetDownload) 
d2128 6
a2133 15
		int iMaxDlGraph = maxValue;
		iMaxDlGraph = int((iMaxDlGraph/10.0)+0.99)*10;
		m_DownloadOMeter.m_nYGrids=int(iMaxDlGraph/10)-1;
		m_DownloadOMeter.SetRange(0, iMaxDlGraph, 0);
		m_DownloadOMeter.SetRange(0, iMaxDlGraph, 1);
		m_DownloadOMeter.SetRange(0, iMaxDlGraph, 2);
	}
	else
	{
		int iMaxUlGraph = maxValue;
		iMaxUlGraph = int((iMaxUlGraph/4.0)+0.99)*4;
		m_UploadOMeter.m_nYGrids=int(iMaxUlGraph/2)-1;
		m_UploadOMeter.SetRange(0, iMaxUlGraph, 0);
		m_UploadOMeter.SetRange(0, iMaxUlGraph, 1);
		m_UploadOMeter.SetRange(0, iMaxUlGraph, 2);
d2135 1
d2140 17
a2156 1
void CStatisticsDlg::Localize()
d2158 2
d2162 32
a2193 7
	GetDlgItem(IDC_STATIC_D3)->SetWindowText(GetResString(IDS_ST_DOWNLOAD));
	GetDlgItem(IDC_STATIC_U)->SetWindowText(GetResString(IDS_ST_UPLOAD));
	GetDlgItem(IDC_STATIC_D)->SetWindowText(GetResString(IDS_ST_CURRENT).MakeLower());
	GetDlgItem(IDC_STATIC_U2)->SetWindowText(GetResString(IDS_ST_CURRENT).MakeLower());
	GetDlgItem(IDC_STATIC_D2)->SetWindowText(GetResString(IDS_ST_SESSION).MakeLower());
	GetDlgItem(IDC_STATIC_U3)->SetWindowText(GetResString(IDS_ST_SESSION).MakeLower());
	GetDlgItem(IDC_STATIC_A)->SetWindowText(GetResString(IDS_SP_ACTCON));
d2195 6
a2200 22
	GetDlgItem(IDC_STATIC_S2)->SetWindowText(GetResString(IDS_ST_ACTIVEDOWNLOAD).MakeLower());
	CString value;
	if (theApp.glob_prefs->GetGraphRatio()>1)
		value.Format(_T(" (1:%i)"),theApp.glob_prefs->GetGraphRatio());
	GetDlgItem(IDC_STATIC_S0)->SetWindowText(GetResString(IDS_PW_GENERAL).MakeLower()+value);
	GetDlgItem(IDC_STATIC_S1)->SetWindowText((LPCTSTR)GetResString(IDS_ST_ACTIVEUPLOAD).MakeLower());
	value.Format(_T(" (%u ")+ GetResString(IDS_MINS) + _T(")"),theApp.glob_prefs->GetStatsAverageMinutes());
	GetDlgItem(IDC_TIMEAVG1)->SetWindowText((LPCTSTR)GetResString(IDS_AVG).MakeLower() + value);
	GetDlgItem(IDC_TIMEAVG2)->SetWindowText((LPCTSTR)GetResString(IDS_AVG).MakeLower() + value);

	if(m_Stats.GetListHWND())
	{								
		m_Stats.SetTitle(STATS_TRANSFER, GetResString(IDS_FSTAT_TRANSFER));
		m_Stats.SetTitle(STATS_TRANSFER_UPLOADS, GetResString(IDS_TW_UPLOADS));
		m_Stats.SetTitle(STATS_TRANSFER_DOWNLOADS, GetResString(IDS_TW_DOWNLOADS));
		m_Stats.SetTitle(STATS_CONNECTION, GetResString(IDS_FSTAT_CONNECTION));
		m_Stats.SetTitle(STATS_CLIENTS, GetResString(IDS_CLIENTS));
		m_Stats.SetTitle(STATS_QUEUE, GetResString(IDS_QUEUE));
		m_Stats.SetTitle(STATS_SERVERS, GetResString(IDS_FSTAT_SERVERS));
		m_Stats.SetTitle(STATS_SHAREDFILES, GetResString(IDS_SHAREDFILES));
		m_Stats.SetTitle(STATS_TOTALDOWN, GetResString(IDS_DWTOT));
	}
d2205 1
a2205 1
void CStatisticsDlg::OnSize(UINT nType, int cx, int cy)
d2207 3
a2209 3
	CResizableDialog::OnSize(nType, cx, cy);
	ShowInterval();
}
d2211 16
a2226 3
void CStatisticsDlg::CreateStatsList()
{
	EMULE_TRY
d2228 1
a2228 1
	if(g_bUseNewStyle)
d2230 2
a2231 4
		CRect r;
		GetDlgItem(IDC_STATTREE)->GetWindowRect(r);
		ScreenToClient(r);
		m_Stats.CreateNewStyle(this, r);
d2233 14
a2246 6
	else
	{
		m_Stats.stattree.EnableWindow();
		m_Stats.stattree.ShowWindow(SW_SHOW);
	}
	m_Stats.SetRedraw(FALSE);
d2248 1
a2248 133
	m_Stats.AddEntry(STATS_TRANSFER, GetResString(IDS_FSTAT_TRANSFER), 0);
	m_Stats.AddEntry(STATS_TRANSFER_SESSIONRATIO, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_TRANSFER_UPLOADS, GetResString(IDS_TW_UPLOADS), 1);
	m_Stats.AddEntry(STATS_TRANSFER_UPLOADS_TRANSFERRED, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_TRANSFER_UPLOADS_ACTIVE, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_TRANSFER_UPLOADS_WAITING, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_TRANSFER_UPLOADS_SUCCEEDED, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_TRANSFER_UPLOADS_FAILED, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_TRANSFER_UPLOADS_AVGTIME, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_TRANSFER_DOWNLOADS, GetResString(IDS_TW_DOWNLOADS), 1);
	m_Stats.AddEntry(STATS_TRANSFER_DOWNLOADS_TRANSFERRED, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_TRANSFER_DOWNLOADS_SOURCES, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_TRANSFER_DOWNLOADS_ACTIVE, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_TRANSFER_DOWNLOADS_UDPSEARCH, GetResString(IDS_FSTAT_WAITING), 2);

	m_Stats.AddEntry(STATS_CONNECTION, GetResString(IDS_FSTAT_CONNECTION), 0);
	m_Stats.AddEntry(STATS_CONNECTION_AVGDOWNLOADRATE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_AVGUPLOADRATE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_MAXDOWNLOADRATEAVG, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_MAXDOWNLOADRATESESSION, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_RECONNECTED, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_SINCEFIRSTTRANSFER, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_CONNECTEDSINCE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_ACTIVE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_MAXTIME, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_AVERAGE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CONNECTION_MAXIMUM, GetResString(IDS_FSTAT_WAITING), 1);

	m_Stats.AddEntry(STATS_CLIENTS, GetResString(IDS_CLIENTS), 0);
	m_Stats.AddEntry(STATS_CLIENTS_EMULE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CLIENTS_EMULE_1, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_EMULE_2, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_EMULE_3, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_EMULE_OTHER, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_EDONKEYHYBRID, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CLIENTS_EDONKEYHYBRID_1, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_EDONKEYHYBRID_2, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_EDONKEYHYBRID_3, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_EDONKEY, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CLIENTS_EDONKEY_1, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_EDONKEY_2, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_EDONKEY_3, GetResString(IDS_FSTAT_WAITING), 2);
	//Cax2 - old emule stats integrated with emule now...
	//m_Stats.AddEntry(STATS_CLIENTS_OLDEMULE, GetResString(IDS_FSTAT_WAITING), 1);
	//Cax2 - no need to have 3 subcats for that!
	//m_Stats.AddEntry(STATS_CLIENTS_OLDEMULE_1, GetResString(IDS_FSTAT_WAITING), 2);
	//m_Stats.AddEntry(STATS_CLIENTS_OLDEMULE_2, GetResString(IDS_FSTAT_WAITING), 2);
	//m_Stats.AddEntry(STATS_CLIENTS_OLDEMULE_3, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_CDONKEY, GetResString(IDS_FSTAT_WAITING), 1);
	//Cax2 - no need to have 3 subcats for that!
	//m_Stats.AddEntry(STATS_CLIENTS_CDONKEY_1, GetResString(IDS_FSTAT_WAITING), 2);
	//m_Stats.AddEntry(STATS_CLIENTS_CDONKEY_2, GetResString(IDS_FSTAT_WAITING), 2);
	//m_Stats.AddEntry(STATS_CLIENTS_CDONKEY_3, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_OLDMLDONKEY, GetResString(IDS_FSTAT_WAITING), 1);
	//Cax2 - no need to have 3 subcats for that!
	//m_Stats.AddEntry(STATS_CLIENTS_OLDMLDONKEY_1, GetResString(IDS_FSTAT_WAITING), 2);
	//m_Stats.AddEntry(STATS_CLIENTS_OLDMLDONKEY_2, GetResString(IDS_FSTAT_WAITING), 2);
	//m_Stats.AddEntry(STATS_CLIENTS_OLDMLDONKEY_3, GetResString(IDS_FSTAT_WAITING), 2);

	m_Stats.AddEntry(STATS_CLIENTS_SHAREAZA, GetResString(IDS_FSTAT_WAITING), 1);

	m_Stats.AddEntry(STATS_CLIENTS_LMULE, GetResString(IDS_FSTAT_WAITING), 1);

	m_Stats.AddEntry(STATS_CLIENTS_UNKNOWN, GetResString(IDS_FSTAT_WAITING), 1);

	m_Stats.AddEntry(STATS_QUEUE, GetResString(IDS_QUEUE), 0);
	m_Stats.AddEntry(STATS_QUEUE_TRANSFERRING, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_INQUEUE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_ASKING, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_CONNECTING, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_THRUSERVER, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_GOTHASH, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_NONEEDEDPARTS, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_TOOMANYCONS, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_TWOLOWIDS, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_BLOCKED, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_QUEUE_PROBLEM, GetResString(IDS_FSTAT_WAITING), 1);
	//m_Stats.AddEntry(STATS_QUEUE_UNKNOWN, GetResString(IDS_FSTAT_WAITING), 1);
	
	m_Stats.AddEntry(STATS_SERVERS, GetResString(IDS_FSTAT_SERVERS), 0);
	m_Stats.AddEntry(STATS_SERVERS_WORKING, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SERVERS_BAD, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SERVERS_TOTAL, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SERVERS_DELETED, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SERVERS_WORKINGUSERS, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SERVERS_WORKINGFILES, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SERVERS_TOTALUSERS, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SERVERS_TOTALFILES, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SERVERS_ONSERVER, GetResString(IDS_FSTAT_WAITING), 1);

	m_Stats.AddEntry(STATS_SHAREDFILES, GetResString(IDS_SHAREDFILES), 0);
	m_Stats.AddEntry(STATS_SHAREDFILES_TOTAL, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SHAREDFILES_TOTALSIZE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_SHAREDFILES_AVGSIZE, GetResString(IDS_FSTAT_WAITING), 1);

	m_Stats.AddEntry(STATS_TOTALDOWN, GetResString(IDS_DWTOT), 0);
	m_Stats.AddEntry(STATS_TOTALDOWN_TOTAL, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_TOTALDOWN_TOTALSIZE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_TOTALDOWN_DOWNLOADED, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_TOTALDOWN_LEFT, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_TOTALDOWN_NEEDSPACE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_TOTALDOWN_SPACELEFT, GetResString(IDS_FSTAT_WAITING), 1);

	// first expand all, then close the ones we don't like :D
	m_Stats.ExpandAllItems();
	CString strExpanded = theApp.glob_prefs->GetStatsListExpanded();
	for(int i = 0; i < strExpanded.GetLength(); i++)
	{
		if(strExpanded.GetAt(i) == '0')		
		{
			switch(i)
			{
				case 0:	 m_Stats.Expand(STATS_TRANSFER, false);					break;
				case 1:  m_Stats.Expand(STATS_TRANSFER_UPLOADS, false);			break;
				case 2:  m_Stats.Expand(STATS_TRANSFER_DOWNLOADS, false);		break;
				case 3:	 m_Stats.Expand(STATS_CONNECTION, false);				break;
				case 4:  m_Stats.Expand(STATS_CLIENTS, false);					break;
				case 5:  m_Stats.Expand(STATS_CLIENTS_EMULE, false);			break;
				case 6:	 m_Stats.Expand(STATS_CLIENTS_EDONKEY, false);			break;
				case 7:  m_Stats.Expand(STATS_CLIENTS_EDONKEYHYBRID, false);	break;
				case 8:	 m_Stats.Expand(STATS_QUEUE, false);					break;
				case 9:	 m_Stats.Expand(STATS_SERVERS, false);					break;
				case 10: m_Stats.Expand(STATS_SHAREDFILES, false);				break;
				case 11: m_Stats.Expand(STATS_TOTALDOWN, false);				break;
				//case 12: m_Stats.Expand(STATS_CLIENTS_CDONKEY, false);			break;
				//case 13: m_Stats.Expand(STATS_CLIENTS_OLDMLDONKEY, false);		break;
				//case 14: m_Stats.Expand(STATS_CLIENTS_OLDEMULE, false);			break;
				default: break;
			}
		}
	}
	m_Stats.SetColumn(theApp.glob_prefs->GetStatsColumnWidth());
	m_Stats.SetRedraw(TRUE);
d2253 8
a2260 1
void CStatisticsDlg::UpdateActConScale()
d2264 1
a2264 4
	int iStatYGrids=int((theApp.glob_prefs->GetStatsMax()/10.0)+0.1)-1;
	if (iStatYGrids>10)
		iStatYGrids=int((theApp.glob_prefs->GetStatsMax()/50.0)+0.1)-1;
	m_Statistics.m_nYGrids=iStatYGrids;
d2266 15
a2280 32
	m_Statistics.SetRanges(0, theApp.glob_prefs->GetStatsMax());

	EMULE_CATCH
}
CString CStatisticsDlg::GetStatsListExpanded()
{	
	EMULE_TRY

	CString strExpanded;
	for(int i = 0; i < 12; i++)
	{
		bool bExpanded = false;
		switch(i)
		{
			case 0:	 bExpanded = m_Stats.IsExpanded(STATS_TRANSFER);				break;
			case 1:  bExpanded = m_Stats.IsExpanded(STATS_TRANSFER_UPLOADS);		break;
			case 2:  bExpanded = m_Stats.IsExpanded(STATS_TRANSFER_DOWNLOADS);		break;
			case 3:	 bExpanded = m_Stats.IsExpanded(STATS_CONNECTION);				break;
			case 4:  bExpanded = m_Stats.IsExpanded(STATS_CLIENTS);					break;
			case 5:  bExpanded = m_Stats.IsExpanded(STATS_CLIENTS_EMULE);			break;
			case 6:	 bExpanded = m_Stats.IsExpanded(STATS_CLIENTS_EDONKEY);			break;
			case 7:  bExpanded = m_Stats.IsExpanded(STATS_CLIENTS_EDONKEYHYBRID);	break;
			case 8:	 bExpanded = m_Stats.IsExpanded(STATS_QUEUE);					break;
			case 9:	 bExpanded = m_Stats.IsExpanded(STATS_SERVERS);					break;
			case 10: bExpanded = m_Stats.IsExpanded(STATS_SHAREDFILES);				break;
			case 11: bExpanded = m_Stats.IsExpanded(STATS_TOTALDOWN);				break;
			/*case 12: bExpanded = m_Stats.IsExpanded(STATS_CLIENTS_CDONKEY);			break;
			case 13: bExpanded = m_Stats.IsExpanded(STATS_CLIENTS_OLDMLDONKEY);		break;
			case 14: bExpanded = m_Stats.IsExpanded(STATS_CLIENTS_OLDEMULE);		break;*/
			default: break;
		}
		strExpanded += bExpanded ? '1' : '0';
a2281 2
	
	return strExpanded;
a2283 2

	return _T("");
@


1.53
log
@small bugfix for correct scaling the connectionsgraph in webserver ;) don't use scaleratio
@
text
@d562 1
a562 1
	m_Statistics.SetYUnits("") ;
d896 1
a896 1
		cbuffer.Format("%s",buffer2);
d976 1
a976 1
			buffer.Format("%.2f : 1",(float)theApp.stat_sessionSentBytes/theApp.stat_sessionReceivedBytes);
d978 1
a978 1
			buffer.Format("1 : %.2f",(float)theApp.stat_sessionReceivedBytes/theApp.stat_sessionSentBytes);
d986 1
a986 1
			buffer2.Format("%.2f : 1",(float)(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded())/(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded()));
d988 1
a988 1
			buffer2.Format("1 : %.2f",(float)(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded())/(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded()));
d993 1
a993 1
	cbuffer.Format( "%s (%s)", buffer, buffer2);
d1029 1
a1029 1
		cbuffer.Format("%s: %i", GetStatusDLQueueString((eDLQState)n), AllClients.m_pClients[SO_LAST][n]);
d1045 1
a1045 1
			cbuffer.Format("%s: %i (%1.1f%%)",GetClientNameString((eClientTypes)j),iSoftTot,(double)100*iSoftTot/totalclient);
d1078 1
a1078 1
					cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString((eClientTypes)j,topver), topcnt, (double)topcnt/totcnt*100);
d1081 1
a1081 1
					cbuffer.Format(GetResString(IDS_FSTAT_WAITING)+": ");//Cax2 - clears the stats from old data...
d1088 1
a1088 1
					cbuffer.Format("%s: %i (%1.1f%%)",GetResString(IDS_STATS_UNKNOWNCLIENT),iSoftTot-iSubTot,(double)100*(iSoftTot-iSubTot)/iSoftTot);
d1090 1
a1090 1
					cbuffer.Format(GetResString(IDS_FSTAT_WAITING)+": ");//Cax2 - clears the stats from old data...
d1096 1
a1096 1
	cbuffer.Format("%s: %i(%1.1f%%)",GetClientNameString(SO_UNKNOWN),myStats[SO_UNKNOWN],(double)100*myStats[SO_UNKNOWN]/(totalclient+myStats[SO_UNKNOWN]));
d1109 1
a1109 1
	cbuffer.Format(GetResString(IDS_SF_WORKING)+": %i",servtotal-servfail);
d1111 1
a1111 1
	cbuffer.Format(GetResString(IDS_SF_FAIL)+": %i",servfail);
d1113 1
a1113 1
	cbuffer.Format(GetResString(IDS_SF_TOTAL)+": %i",servtotal);
d1115 1
a1115 1
	cbuffer.Format(GetResString(IDS_SF_DELCOUNT)+": %i",theApp.serverlist->GetDeletedServerCount());
d1117 1
a1117 1
	cbuffer.Format(GetResString(IDS_SF_WUSER)+": %i",servuser);
d1119 1
a1119 1
	cbuffer.Format(GetResString(IDS_SF_WFILE)+": %i",servfile);
d1121 1
a1121 1
	cbuffer.Format(GetResString(IDS_SF_USER)+": %i",servtuser);
d1123 1
a1123 1
	cbuffer.Format(GetResString(IDS_SF_FILE)+": %i",servtfile);
d1127 1
a1127 1
	cbuffer.Format(GetResString(IDS_SF_ACTIVECON)+": %i",activeconnections);
d1137 1
a1137 1
		cbuffer.Format(GetResString(IDS_SF_MAXCONLIMITREACHED)+": %i : %s",m_itemp,time.Format());
d1143 1
a1143 1
		cbuffer.Format(GetResString(IDS_SF_MAXCONLIMITREACHED)+": %i",m_itemp);
d1149 1
a1149 1
		cbuffer.Format(GetResString(IDS_SF_AVGCON)+": %i",(int)averageconnections);
d1159 1
a1159 1
	cbuffer.Format(GetResString(IDS_SF_PEAKCON)+": %i",peakconnections);
d1298 1
a1298 1
		value.Format(" (1:%i)",theApp.glob_prefs->GetGraphRatio());
d1301 1
a1301 1
	value.Format(" (%u "+ GetResString(IDS_MINS) + ")",theApp.glob_prefs->GetStatsAverageMinutes());
d1529 1
a1529 1
	return "";
@


1.52
log
@Preparing for new sockets
@
text
@d764 1
a764 1
	updown.connections = activeconnections / theApp.glob_prefs->GetGraphRatio();
@


1.51
log
@Preparing for new sockets
@
text
@d778 1
d787 1
d794 1
d796 1
a796 1
	float SpikeSize = theApp.listensocket->GetOpenSockets() - averageconnections ;
d1130 1
d1132 1
a1132 1
	uint32 m_itemp = theApp.listensocket->GetMaxConnectionReached();
d1146 1
d1153 1
@


1.50
log
@webserver: connections graph
@
text
@d773 1
d775 1
d792 1
d794 1
d1127 1
d1129 1
@


1.49
log
@katsyonak: added total UL:DL ratio to statistics
@
text
@a731 6
	// kuchin
	UpDown updown;
	updown.upload = uploadrate;
	updown.download = downloadrate;
	theApp.webserver->AddStatsLine(updown);

d759 7
@


1.48
log
@small fix by Cax2
@
text
@d964 1
d966 1
a966 1
	{	
d968 1
a968 1
			cbuffer.Format("%.2f : 1",(float)theApp.stat_sessionSentBytes/theApp.stat_sessionReceivedBytes);
d970 4
a973 1
			cbuffer.Format("1 : %.2f",(float)theApp.stat_sessionReceivedBytes/theApp.stat_sessionSentBytes);
d975 6
a980 2
		m_Stats.SetTitle(STATS_TRANSFER_SESSIONRATIO, GetResString(IDS_STATS_RATIO));
		m_Stats.SetStatic(STATS_TRANSFER_SESSIONRATIO, cbuffer);
d982 6
@


1.47
log
@code cleanup
@
text
@d1175 1
a1175 1
		if (downrateHistory.empty()) return 0;
@


1.46
log
@Eklmn and BavarianSnail changes. see changelog+
@
text
@d835 2
a836 1
	char buffer[100];char buffer2[100];
d859 1
a859 1
	CastItoXBytes(ui64TotFileSize,buffer,100); 
d864 1
a864 1
	CastItoXBytes(ui64BytesTransfered,buffer,100); 
d870 1
a870 1
	CastItoXBytes(ui64TotBytesLeftToTransfer,buffer,100);
d874 1
a874 1
	CastItoXBytes(ui64TotNeededSpace,buffer,100); 
d879 2
a880 2
	CastItoXBytes(t_FreeBytes,buffer,100); 
	sprintf(buffer2,GetResString(IDS_DWTOT_FS),buffer);
d884 1
a884 1
		CastItoXBytes(ui64TotNeededSpace - t_FreeBytes,buffer,100);
d891 2
a892 2
	CastItoXBytes(theApp.stat_sessionReceivedBytes, buffer,100);
	CastItoXBytes(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded(),	buffer2,100);
d896 2
a897 2
	CastItoXBytes(theApp.stat_sessionSentBytes, buffer,100);
	CastItoXBytes(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded(), buffer2,100);
d933 1
a933 1
	CastSecondsToHM(running, buffer,100);
d949 1
a949 1
		CastSecondsToHM(running, buffer,100);
d959 1
a959 1
		CastSecondsToHM(running,buffer,100);
d980 1
a980 1
	CastItoXBytes(allsize,buffer,100);
d986 1
a986 1
		CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount(), buffer,100);
d989 1
a989 2
		buffer[0] = '-';
		buffer[1] = 0;
d1218 2
a1219 3
	{
		char buffer[100];
		CastSecondsToHM(shownSecs,buffer,100);
@


1.45
log
@Added lmule detection, better mldonkey detection and fixed bug 208
@
text
@d491 1
d644 7
@


1.44
log
@*** empty log message ***
@
text
@d99 4
d105 1
d129 1
d1095 2
d1099 1
a1099 2
	cbuffer.Format(GetResString(IDS_SF_SRVOCC),servocc);
	m_Stats.SetValue(STATS_CONNECTION_MAXTIME, cbuffer);
d1372 1
a1372 1

@


1.43
log
@shareaza identification.
@
text
@a742 1
	activeconnections = theApp.listensocket->GetOpenSockets();
d758 1
a758 1

@


1.42
log
@fixes by BavarianSnail/obaldin/kuchin. see changelog+
@
text
@d88 1
d93 8
a100 1
	STATS_CLIENTS_UNKNOWN = 425,
d1005 1
d1013 1
d1016 1
a1016 1
		if (j!=(int)SO_CDONKEY && j!=(int)SO_MLDONKEY && j!=(int)SO_OLDEMULE)	//Cax2 - these clients won't show subcats
d1049 1
d1363 5
@


1.41
log
@UDP Search status moved to statistic and added to resource strings
@
text
@d496 14
d515 3
a517 3
	m_DownloadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphDownloadRate()+4, 0);
	m_DownloadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphDownloadRate()+4, 1);
	m_DownloadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphDownloadRate()+4, 2);
d530 3
a532 3
	m_UploadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphUploadRate()+4, 0);
	m_UploadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphUploadRate()+4, 1);
	m_UploadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphUploadRate()+4, 2);
d1210 1
a1210 1
	if (SetDownload)
d1212 6
a1217 3
		m_DownloadOMeter.SetRange(0, maxValue+4, 0);
		m_DownloadOMeter.SetRange(0, maxValue+4, 1);
		m_DownloadOMeter.SetRange(0, maxValue+4, 2);
d1221 6
a1226 3
		m_UploadOMeter.SetRange(0, maxValue+4, 0);
		m_UploadOMeter.SetRange(0, maxValue+4, 1);
		m_UploadOMeter.SetRange(0, maxValue+4, 2);
d1429 5
@


1.40
log
@bugfix: sort column doesn't change when not in advanced sort mode. lower memory usage
@
text
@d52 1
d886 2
d1287 1
@


1.39
log
@Fixed timer wrap around.
@
text
@d769 7
a775 1
	// every second
d778 1
a778 1
	timeHistory.push_front(GetTickCount());
d781 3
a783 2
	DWORD nCutOff = GetTickCount() - theApp.glob_prefs->GetStatsAverageMinutes()*60000; //kuchin
	while (timeHistory.back() - nCutOff < 0)		//Cax2 - keep them in sync
d1109 1
a1109 1
		if (downrateHistory.size()<2) return 0;
d1111 3
a1113 2
		//Cax2 - we could use that formula... but it's faster if we compute that ratio beforehand
		return (downrateHistory.front()-downrateHistory.back())*.9765/(timeHistory.front()-timeHistory.back());
d1133 1
a1133 1
		if (downrateHistory.size()<2) return 0;
d1135 1
a1135 1
		return (uprateHistory.front()-uprateHistory.back())*.9765/(timeHistory.front()-timeHistory.back());
@


1.38
log
@Crash on exit workarounds
@
text
@d776 1
a776 1
	while (timeHistory.back() < nCutOff)		//Cax2 - keep them in sync
@


1.37
log
@finally fixed the average display!
@
text
@d130 1
d139 1
@


1.37.2.1
log
@27a partial merge
@
text
@d91 1
a91 2
	STATS_CLIENTS_LMULE = 425,
	STATS_CLIENTS_UNKNOWN = 426,
d741 2
a742 2
	if( percent > .99f )
		percent = .99f;
d754 1
a754 1
	float SpikeTolerance = 25.0f*(float)theApp.glob_prefs->GetMaxConperFive()/10.0f;
d757 1
a757 1
	float Modifier = (1.0f-(SpikeSize/SpikeTolerance));
d969 1
a969 1
	for ( j = 0; j < (uint32)SO_UNKNOWN ; j++ )
d980 1
a980 1
		if (j!=(int)SO_CDONKEY && j!=(int)SO_MLDONKEY && j!=(int)SO_OLDEMULE && j!=(int)SO_LMULE)	//Cax2 - these clients won't show subcats
a1301 1
	m_Stats.AddEntry(STATS_CLIENTS_LMULE, GetResString(IDS_FSTAT_WAITING), 1);
@


1.37.2.2
log
@27c
@
text
@a130 1
	EMULE_TRY
a138 1
	EMULE_CATCH
@


1.36
log
@bugfix: less resource usage, fixed bug #131
@
text
@d770 1
d773 2
a774 2
	int nAverageTime = (int)theApp.glob_prefs->GetStatsAverageMinutes()*60; //kuchin
	while ((int)downrateHistory.size()> nAverageTime)		//Cax2 - the two are in sync, no need for 2 while()s
d778 1
d1092 3
a1094 2
	
	if (averageType==AVG_SESSION) {
a1095 1

a1097 1

d1101 3
a1103 2
		
		return ((downrateHistory.front()-downrateHistory.back())/1024.0f)/(downrateHistory.size()-1);
d1123 3
a1125 3
		if (uprateHistory.size()<2) return 0;

		return ((uprateHistory.front()-uprateHistory.back())/1024.0f)/(uprateHistory.size()-1);
@


1.35
log
@minor bugfixes, plus bugfix for bug #34
@
text
@d773 5
a777 2
	while ((int)downrateHistory.size()> nAverageTime) downrateHistory.pop_back();
	while ((int)uprateHistory.size()> nAverageTime) uprateHistory.pop_back();
d1094 1
a1094 1
		DWORD running=(GetTickCount()-theApp.stat_transferStarttime)/1000;
d1099 1
a1099 1
		if (downrateHistory.size()==0) return 0;
d1101 1
a1101 1
		return (float)((float)((downrateHistory.front()-downrateHistory.back())/1024)/downrateHistory.size());
d1116 1
a1116 1
		DWORD running=(GetTickCount()-theApp.stat_transferStarttime)/1000;
d1121 1
a1121 1
		if (uprateHistory.size()==0) return 0;
d1123 1
a1123 1
		return (float)((float)((uprateHistory.front()-uprateHistory.back())/1024)/uprateHistory.size());
@


1.34
log
@bugfix: unknown clients in stats (bug #65)
@
text
@d70 3
a72 1
	STATS_CLIENTS_CDONKEY_1 = 406,
d962 2
d966 7
a972 3
		// Add client type
		cbuffer.Format("%s: %i (%1.1f%%)",GetClientNameString((eClientTypes)j),myStats[j],(double)100*myStats[j]/totalclient);
		m_Stats.SetValue(STATS_CLIENTS + j*4 + 1, cbuffer); 
d975 4
a978 2
		if (j!=(uint32)SO_CDONKEY||j!=(uint32)SO_MLDONKEY||j!=(uint32)SO_OLDEMULE)	//Cax2 - these clients won't show subcats
			for(uint32 i=0; i<3; i++)
d1000 2
d1003 1
d1008 9
d1288 1
d1297 2
a1298 1
	m_Stats.AddEntry(STATS_CLIENTS_OLDEMULE, GetResString(IDS_FSTAT_WAITING), 1);
@


1.33
log
@bugfix for bug #8, and now arrow combo displays properly, when disabled.
@
text
@d949 2
a950 2

	for(int j = STATS_QUEUE_TRANSFERRING; j <= STATS_QUEUE_UNKNOWN; j++)
d954 1
d1303 1
a1303 1
	m_Stats.AddEntry(STATS_QUEUE_UNKNOWN, GetResString(IDS_FSTAT_WAITING), 1);
@


1.32
log
@BUGFIX: 0000117
@
text
@d958 1
d966 2
a967 9
		for(uint32 i=0; i<3; i++)
		{
			POSITION pos=AllClients.m_pClients[j].GetStartPosition();
			uint32	topver=0;
			uint32	topcnt=0;
			uint32	totcnt=0;
			uint32	ver;
			uint32	cnt;
			while(pos)
d969 7
a975 3
				AllClients.m_pClients[j].GetNextAssoc(pos, ver, cnt);
				totcnt+=cnt;
				if(currtop<cnt && cnt<lasttop)
d977 8
a984 3
					topver=ver;
					topcnt=cnt;
					currtop=cnt;
d986 7
a993 8
			lasttop=currtop;
			currtop=0;
			if(topcnt)
				cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString((eClientTypes)j,topver), topcnt, (double)topcnt/totcnt*100);
			else
				cbuffer.Format(GetResString(IDS_FSTAT_WAITING));		
			m_Stats.SetValue(STATS_CLIENTS + j*4 + i + 2, cbuffer); 
		}
d995 1
a995 1
	// UNKNOWN should be added separetly because it does not have versions
a1264 4
	m_Stats.AddEntry(STATS_CLIENTS_CDONKEY, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CLIENTS_CDONKEY_1, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_CDONKEY_2, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_CDONKEY_3, GetResString(IDS_FSTAT_WAITING), 2);
d1273 10
d1284 4
a1287 7
	m_Stats.AddEntry(STATS_CLIENTS_OLDMLDONKEY_1, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_OLDMLDONKEY_2, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_OLDMLDONKEY_3, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_OLDEMULE, GetResString(IDS_FSTAT_WAITING), 1);
	m_Stats.AddEntry(STATS_CLIENTS_OLDEMULE_1, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_OLDEMULE_2, GetResString(IDS_FSTAT_WAITING), 2);
	m_Stats.AddEntry(STATS_CLIENTS_OLDEMULE_3, GetResString(IDS_FSTAT_WAITING), 2);
d1349 3
a1351 3
				case 12: m_Stats.Expand(STATS_CLIENTS_CDONKEY, false);			break;
				case 13: m_Stats.Expand(STATS_CLIENTS_OLDMLDONKEY, false);		break;
				case 14: m_Stats.Expand(STATS_CLIENTS_OLDEMULE, false);			break;
d1375 1
a1375 1
	for(int i = 0; i < 15; i++)
a1376 1
		//strExpanded += '1';		//Cax2 bugfix!
d1392 1
a1392 1
			case 12: bExpanded = m_Stats.IsExpanded(STATS_CLIENTS_CDONKEY);			break;
d1394 1
a1394 1
			case 14: bExpanded = m_Stats.IsExpanded(STATS_CLIENTS_OLDEMULE);		break;
@


1.31
log
@Small fix
@
text
@d832 1
a832 1
		cbuffer.Format("%s (you need to free %s!)",buffer2,buffer);
@


1.30
log
@Fix for memory leak problem
@
text
@d210 1
@


1.29
log
@bugfixes:remembers opened/closed stats, 2GB sort everywhere. version updated
@
text
@d126 11
d249 1
a249 1
	m_DataList.Add(*pData);
d260 2
a261 2
		if(m_DataList[i].m_nID == nID)
			return &m_DataList[i];
d406 1
a406 1
			Expand(m_DataList[i].m_nID, true);
d419 1
a419 1
		for(uint32 j = 0; j < m_DataList[i].m_nLevel; j++)
d421 1
a421 1
		if(!m_DataList[i].m_nLevel)
d423 2
a424 2
		sRet += m_DataList[i].m_sTitle;
		if(!m_DataList[i].m_nLevel)
d426 2
a427 2
		if(!m_DataList[i].m_sValue.IsEmpty())
			sRet += _T(": ") + m_DataList[i].m_sValue;
@


1.28
log
@bugfixes: sort in search window, unknown % in stats, dowload speed at startup updated search layout
@
text
@d1360 1
a1360 1
		strExpanded += '1';
@


1.27
log
@minor updates & bugfixes
@
text
@d982 1
a982 1
	cbuffer.Format("%s: %i(%1.1f%%)",GetClientNameString(SO_UNKNOWN),myStats[SO_UNKNOWN],(double)100*myStats[SO_UNKNOWN]/totalclient);
@


1.26
log
@minor graphic improvements. search bugfix
@
text
@a633 1
	m_DownloadOMeter.InvalidateCtrl(false);		//Cax2 show the updated graphs immediately!
a638 1
	m_DownloadOMeter.InvalidateCtrl(false);
d651 1
a651 2
	m_Statistics.InvalidateCtrl(false);

d664 1
@


1.25
log
@Rewrite of statistics tree + full export to webserver
@
text
@d408 1
a408 1
		for(int j = 0; j < m_DataList[i].m_nLevel; j++)
d634 1
d640 1
d648 1
a648 1
	if (oldRatio!=theApp.glob_prefs->GetGraphRatio())	//Cax2 - Resize active connections line...
d653 1
@


1.24
log
@official client renamed some variables
@
text
@d25 1
a25 1
#include "WebServer.h" // kuchin
d34 318
a351 1
// CStatisticsDlg dialog
d353 1
a353 3
IMPLEMENT_DYNAMIC(CStatisticsDlg, CDialog)
CStatisticsDlg::CStatisticsDlg(CWnd* pParent /*=NULL*/)
	: CResizableDialog(CStatisticsDlg::IDD, pParent), m_DownloadOMeter(3),m_Statistics(4),m_UploadOMeter(3)
d357 10
a366 20
	m_pTransferM		=
	m_pConnectionM		=
	m_pClientsM			=
	m_pQueueM			=
	m_pServerM			=
	m_pSharedFilesM		=
	m_pDownloadsTotalM	= NULL;

	int i,j;
	for(i = 0; i < 3; i++)
		m_pTransfer[i] = NULL;
	for(i = 0; i < 6; i++)
		m_pUpload[i] = NULL;
	for(i = 0; i < 9; i++)
		m_pDownload[i] = NULL;
	for(i = 0; i < 11; i++)
		m_pConnection[i] = NULL;
	for(i = 0; i < SO_LAST; i++)
        	m_pClients[i] = NULL;
	for(j = 0;j< SO_LAST;j++)
d368 2
a369 1
		for(i = 0; i < 3; i++)
d371 1
a371 1
			m_pClientVersions[j][i]	=	NULL;
d375 59
a433 8
	for(i = 0; i < DS_LAST; i++)
        	m_pQueue[i] = NULL;
	for(i = 0; i < 9; i++)
        	m_pServer[i] = NULL;
	for(i = 0; i < 3; i++)
        	m_pSharedFiles[i] = NULL;
	for(i = 0; i < 6; i++)
        	m_pDownloadsTotal[i] = NULL;
d436 1
a436 1
	m_bUseNewStyle = !(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04);
d450 1
a450 1
	DDX_Control(pDX, IDC_STATTREE, stattree);
d546 1
a546 4
	if(m_bUseNewStyle)
		AddAnchor(m_ctrlStatsList.m_hWnd, TOP_LEFT, BOTTOM_CENTER);
	else
		AddAnchor(stattree.m_hWnd, TOP_LEFT, BOTTOM_CENTER);
a710 3
	//for (int i=0;i<4;i++) if (m_dPlotDataMore[i]>theApp.glob_prefs->GetStatsMax()) {resize=true;theApp.glob_prefs->GetStatsMax()=(int)m_dPlotDataMore[i];}
	//if (resize) m_Statistics.SetRanges(0, theApp.glob_prefs->GetStatsMax()+15) ;
	 
a763 25
// temporary solution
void SetItemText(COptionTreeItemStatic *pTarget, CString strText, bool bReverse = false)
{
	EMULE_TRY

	int iPos;
	if(bReverse)
		iPos = strText.ReverseFind(':');
	else
		iPos = strText.Find(':', 0);

	CString strValue = strText.Right(strText.GetLength()-iPos-1);
	CString strLable = strText.Left(iPos > 0 ? iPos : 0);
	
	if(strLable.GetLength() > 0)
	{
		pTarget->SetStaticText(strValue);
		pTarget->SetLabelText(strLable);
	}
	else
		pTarget->SetLabelText(strValue);

	EMULE_CATCH
}

a765 8
	if(m_bUseNewStyle)
		ShowStatisticsNT();
	else
		ShowStatistics9X();
}

void CStatisticsDlg::ShowStatisticsNT() 
{
d768 1
a768 1
	m_ctrlStatsList.SetRedraw(FALSE);
a785 1
	// start added by InterCeptor (xChipx: download statistics) 11.11.02
d791 1
a791 1
	SetItemText(m_pDownloadsTotal[0], cbuffer);
d795 1
a795 1
	SetItemText(m_pDownloadsTotal[1], cbuffer);
d802 1
a802 1
	SetItemText(m_pDownloadsTotal[2], cbuffer);
d806 1
a806 1
	SetItemText(m_pDownloadsTotal[3], cbuffer);
d810 1
a810 1
	SetItemText(m_pDownloadsTotal[4], cbuffer);
d823 1
a823 1
	SetItemText(m_pDownloadsTotal[5], cbuffer);
d828 1
a828 1
	SetItemText(m_pDownload[0], cbuffer);
d833 1
a833 1
	SetItemText(m_pUpload[0], cbuffer);
d838 1
a838 1
		SetItemText(m_pConnection[0], cbuffer);
d841 1
a841 1
		SetItemText(m_pConnection[1], cbuffer);
d846 1
a846 1
		SetItemText(m_pConnection[2], cbuffer);
d848 1
a848 1
		SetItemText(m_pConnection[3], cbuffer);
d852 1
a852 1
	SetItemText(m_pDownload[1], cbuffer);
d855 1
a855 1
	SetItemText(m_pDownload[2], cbuffer);
d857 1
a857 1
	SetItemText(m_pUpload[1], cbuffer);
d859 1
a859 1
	SetItemText(m_pUpload[2], cbuffer);
d861 1
a861 1
	SetItemText(m_pUpload[3], cbuffer);
d863 1
a863 1
	SetItemText(m_pUpload[4], cbuffer);
d867 1
a867 1
	SetItemText(m_pUpload[5], cbuffer);
d874 1
a874 1
	SetItemText(m_pConnection[4], cbuffer);
d884 1
a884 1
	SetItemText(m_pConnection[5], cbuffer);
d894 1
a894 1
	SetItemText(m_pConnection[6], cbuffer);
a898 1
		{
a899 3
			m_pTransfer[0]->SetLabelText(GetResString(IDS_STATS_RATIO));
			m_pTransfer[0]->SetStaticText(cbuffer);
		} 
a900 1
		{
d902 4
a905 4
			m_pTransfer[0]->SetStaticText(cbuffer);
			m_pTransfer[0]->SetLabelText(GetResString(IDS_STATS_RATIO));
		}
		}
d909 1
a909 1
	SetItemText(m_pSharedFiles[0], cbuffer);
d915 1
a915 1
	SetItemText(m_pSharedFiles[1], cbuffer);
d925 1
a925 1
	SetItemText(m_pSharedFiles[2], cbuffer);
d937 1
a937 1
	for ( uint32 j = 0; j < (uint32)DS_LAST; j++ )
d939 3
a941 2
		cbuffer.Format("%s: %i", GetStatusDLQueueString((eDLQState)j), AllClients.m_pClients[SO_LAST][j]);
		SetItemText(m_pQueue[j], cbuffer);
d948 2
a949 2
		cbuffer.Format("%s: %i(%1.1f%%)",GetClientNameString((eClientTypes)j),myStats[j],(double)100*myStats[j]/totalclient);
		SetItemText(m_pClients[j], cbuffer);
d977 1
a977 1
			SetItemText(m_pClientVersions[j][i], cbuffer); 
d982 1
a982 1
	SetItemText(m_pClients[SO_UNKNOWN], cbuffer);
d995 1
a995 1
	SetItemText(m_pServer[0], cbuffer);
d997 1
a997 1
	SetItemText(m_pServer[1], cbuffer);
d999 1
a999 1
	SetItemText(m_pServer[2], cbuffer);
d1001 1
a1001 1
	SetItemText(m_pServer[3], cbuffer);
d1003 1
a1003 1
	SetItemText(m_pServer[4], cbuffer);
d1005 1
a1005 1
	SetItemText(m_pServer[5], cbuffer);
d1007 1
a1007 1
	SetItemText(m_pServer[6], cbuffer);
d1009 1
a1009 1
	SetItemText(m_pServer[7], cbuffer);
d1011 1
a1011 1
	SetItemText(m_pConnection[7], cbuffer);
d1013 1
a1013 1
	SetItemText(m_pServer[8], cbuffer);
d1017 1
a1017 1
		COleDateTime time(COleDateTime::GetCurrentTime()); // DonGato date-time localization
d1019 1
a1019 1
		SetItemText(m_pConnection[8], cbuffer);
d1025 1
a1025 1
		SetItemText(m_pConnection[8], cbuffer);
d1030 1
a1030 1
		SetItemText(m_pConnection[9], cbuffer);
d1035 1
a1035 1
		SetItemText(m_pConnection[9], cbuffer);
d1039 1
a1039 231
	SetItemText(m_pConnection[10], cbuffer);
	
	m_ctrlStatsList.SetRedraw(TRUE);
	m_ctrlStatsList.UpdatedItems();

	EMULE_CATCH
}

void CStatisticsDlg::ShowStatistics9X() 
{
	EMULE_TRY

	stattree.SetRedraw(FALSE);
	
	char buffer[100];char buffer2[100];
	CString cbuffer;
	bool resize;
	DWORD running;
	int myStats[SO_LAST];
	int myRateStats[3];
	float DownAvgRate;

	uint64 ui64TotFileSize=0; 
	uint64 ui64TotBytesLeftToTransfer=0;
	uint64 ui64TotNeededSpace=0;

	resize = false;
	UpdateConnectionsStatus();
	theApp.downloadqueue->GetDownloadStats(myRateStats,ui64TotFileSize,ui64TotBytesLeftToTransfer,ui64TotNeededSpace);	// changed by InterCeptor (xChipx: download statistics) 11.11.02

	// start added by InterCeptor (xChipx: download statistics) 11.11.02
	uint64 ui64BytesTransfered;
	uint64 t_FreeBytes=0;
	float fPercent = 0.0f;

	cbuffer.Format(GetResString(IDS_DWTOT_NR),myRateStats[2]); 
	stattree.SetItemText(hd0, cbuffer); 

	CastItoXBytes(ui64TotFileSize,buffer,100); 
	cbuffer.Format(GetResString(IDS_DWTOT_TSD),buffer); 
	stattree.SetItemText(hd1, cbuffer); 

	ui64BytesTransfered = (ui64TotFileSize-ui64TotBytesLeftToTransfer);
	CastItoXBytes(ui64BytesTransfered,buffer,100); 
	if(ui64TotFileSize != 0)
		fPercent = (float)((ui64BytesTransfered*100)/(ui64TotFileSize)); //kuchin
	cbuffer.Format(GetResString(IDS_DWTOT_TCS),buffer,fPercent); 
	stattree.SetItemText(hd2, cbuffer); 


	CastItoXBytes(ui64TotBytesLeftToTransfer,buffer,100);
	cbuffer.Format(GetResString(IDS_DWTOT_TSL),buffer); 
	stattree.SetItemText(hd3, cbuffer); 

	CastItoXBytes(ui64TotNeededSpace,buffer,100); 
	cbuffer.Format(GetResString(IDS_DWTOT_TSN),buffer); 
	stattree.SetItemText(hd4,cbuffer); 

	t_FreeBytes = GetFreeDiskSpaceX(theApp.glob_prefs->GetTempDir().GetBuffer());
	CastItoXBytes(t_FreeBytes,buffer,100); 
	sprintf(buffer2,GetResString(IDS_DWTOT_FS),buffer);

	if(ui64TotNeededSpace > t_FreeBytes)
	{
		CastItoXBytes(ui64TotNeededSpace - t_FreeBytes,buffer,100);
		cbuffer.Format("%s (you need to free %s!)",buffer2,buffer);
	}
	else
		cbuffer.Format("%s",buffer2);
	stattree.SetItemText(hd5,cbuffer);

	CastItoXBytes(theApp.stat_sessionReceivedBytes, buffer,100);
	CastItoXBytes(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded(),	buffer2,100);
	cbuffer.Format(GetResString(IDS_STATS_DDATA), buffer, buffer2);
	stattree.SetItemText(down1, cbuffer);

	CastItoXBytes(theApp.stat_sessionSentBytes, buffer,100);
	CastItoXBytes(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded(), buffer2,100);
	cbuffer.Format(GetResString(IDS_STATS_UDATA), buffer, buffer2);
	stattree.SetItemText(up1, cbuffer);

	if(theApp.stat_transferStarttime>0) 
	{
		cbuffer.Format(GetResString(IDS_STATS_AVGDL), GetAvgDownloadRate(AVG_SESSION));
		stattree.SetItemText(con1, cbuffer);
		
		cbuffer.Format(GetResString(IDS_STATS_AVGUL), GetAvgUploadRate(AVG_SESSION));
		stattree.SetItemText(con2, cbuffer);

		DownAvgRate = GetAvgDownloadRate(AVG_SESSION);
		if(maxDownavg < DownAvgRate) 
			maxDownavg = DownAvgRate;
		cbuffer.Format(GetResString(IDS_STATS_MAXAVGDL),maxDownavg);
		stattree.SetItemText(con3, cbuffer);
		
		cbuffer.Format(GetResString(IDS_STATS_MAXDL),maxDown);
		stattree.SetItemText(con4, cbuffer);
	}

	cbuffer.Format(GetResString(IDS_STATS_FOUNDSRC), myRateStats[0]);
	stattree.SetItemText(down2, cbuffer);

	cbuffer.Format(GetResString(IDS_STATS_ACTDL), myRateStats[1]);
	stattree.SetItemText(down3, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_ACTUL), theApp.uploadqueue->GetUploadQueueLength());
	stattree.SetItemText(up2, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_WAITINGUSERS), theApp.uploadqueue->GetWaitingUserCount());
	stattree.SetItemText(up3, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_SUCCUPCOUNT), theApp.uploadqueue->GetSuccessfullUpCount());
	stattree.SetItemText(up4, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_FAILUPCOUNT), theApp.uploadqueue->GetFailedUpCount());
	stattree.SetItemText(up5, cbuffer);
	running=theApp.uploadqueue->GetAverageUpTime();
	CastSecondsToHM(running, buffer,100);
	cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME), buffer);
	stattree.SetItemText(up6, cbuffer);

	if(theApp.stat_reconnects>0) 
		cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),theApp.stat_reconnects-1);
	else 
		cbuffer.Format(GetResString(IDS_STATS_RECONNECTS),0);
	stattree.SetItemText(con5, cbuffer);

	if(theApp.stat_transferStarttime==0) 
		cbuffer.Format(GetResString(IDS_STATS_WAITTRANSF)); 
	else 
	{
		running = (GetTickCount()-theApp.stat_transferStarttime) / 1000;
		CastSecondsToHM(running, buffer,100);
		cbuffer.Format(GetResString(IDS_TRANSFERTIME), buffer);
	}
	stattree.SetItemText(con6, cbuffer);

	if(theApp.stat_serverConnectTime==0) 
		cbuffer.Format(GetResString(IDS_STATS_WAITCONN)); 
	else 
	{
		running=(GetTickCount()-theApp.stat_serverConnectTime)/1000;
		CastSecondsToHM(running,buffer,100);
		cbuffer.Format(GetResString(IDS_STATS_CONNECTEDSINCE),buffer);
	}
	stattree.SetItemText(con7, cbuffer);

	if(theApp.stat_sessionReceivedBytes >0 && theApp.stat_sessionSentBytes >0)
	{	
		if(theApp.stat_sessionReceivedBytes<theApp.stat_sessionSentBytes) 
		{
			cbuffer.Format(GetResString(IDS_STATS_RATIO)+" %.2f : 1",(float)theApp.stat_sessionSentBytes/theApp.stat_sessionReceivedBytes);
			stattree.SetItemText(tran0, cbuffer);
		} 
		else 
		{
			cbuffer.Format(GetResString(IDS_STATS_RATIO)+" 1 : %.2f",(float)theApp.stat_sessionReceivedBytes/theApp.stat_sessionSentBytes);
			stattree.SetItemText(tran0, cbuffer);
		}
	}

	// shared files stats
	cbuffer.Format(GetResString(IDS_SHAREDFILESCOUNT),theApp.sharedfiles->GetCount());
	stattree.SetItemText(shar1, cbuffer);

	uint64 allsize=theApp.sharedfiles->GetDatasize();
	CastItoXBytes(allsize,buffer,100);

	cbuffer.Format(GetResString(IDS_SF_SIZE),buffer );
	stattree.SetItemText(shar2, cbuffer);

	if(theApp.sharedfiles->GetCount() != 0)
		CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount(), buffer,100);
	else 
	{
		buffer[0] = '-';
		buffer[1] = 0;
	}
	cbuffer.Format(GetResString(IDS_SF_AVERAGESIZE),buffer);
	stattree.SetItemText(shar3, cbuffer);

	//--- xrmb:statsclientstatus ---
	ClientsData	AllClients;
	uint32 totalclient;
	theApp.clientlist->GetStatistics(totalclient,myStats, &AllClients);
	totalclient -= myStats[SO_UNKNOWN];
	if( !totalclient )
		totalclient = 1;

	for ( uint32 j = 0; j < (uint32)DS_LAST; j++ )
	{
		cbuffer.Format("%s: %i", GetStatusDLQueueString((eDLQState)j),AllClients.m_pClients[SO_LAST][j]);		stattree.SetItemText(cls[j], cbuffer);
	}


	// For all KNOWN clients types
	for ( uint32 j = 0; j < (uint32)SO_UNKNOWN ; j ++ )
	{
		// Add client type
		cbuffer.Format("%s: %i(%1.1f%%)",GetClientNameString((eClientTypes)j),myStats[j],(double)100*myStats[j]/totalclient);stattree.SetItemText(cli[j], cbuffer);
		//--- find top 3 client versions ---
		uint32	currtop=0, lasttop=0xFFFFFFFF;
		for(uint32 i=0; i<3; i++)
		{
			POSITION pos=AllClients.m_pClients[j].GetStartPosition();
			uint32	topver=0;
			uint32	topcnt=0;
			uint32	totcnt=0;
			uint32	ver;
			uint32	cnt;
			while(pos)
			{
				AllClients.m_pClients[j].GetNextAssoc(pos, ver, cnt);
				totcnt+=cnt;
				if(currtop<cnt && cnt<lasttop)
				{
					topver=ver;
					topcnt=cnt;
					currtop=cnt;
				}
			}
			lasttop=currtop;
			currtop=0;
			if(topcnt)
				cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString((eClientTypes)j,topver), topcnt, (double)topcnt/totcnt*100);
			else
				cbuffer.Format(GetResString(IDS_FSTAT_WAITING));		
			stattree.SetItemText(cliv[j][i], cbuffer);
		}
	}
	// UNKNOWN should be added separetly because it does not have versions
	cbuffer.Format("%s: %i(%1.1f%%)",GetClientNameString(SO_UNKNOWN),myStats[SO_UNKNOWN],(double)100*myStats[SO_UNKNOWN]/totalclient);stattree.SetItemText(cli[SO_UNKNOWN], cbuffer);


	//--- :xrmb ---
d1041 1
a1041 56
	uint32 servtotal;
	uint32 servfail;
	uint32 servuser;
	uint32 servfile;
	uint32 servtuser;
	uint32 servtfile;
	float servocc;
	theApp.serverlist->GetStatus(servtotal, servfail, servuser, servfile, servtuser, servtfile, servocc);
	cbuffer.Format(GetResString(IDS_SF_WORKING)+": %i",servtotal-servfail);
	stattree.SetItemText(srv1, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_FAIL)+": %i",servfail);
	stattree.SetItemText(srv2, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_TOTAL)+": %i",servtotal);
	stattree.SetItemText(srv3, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_DELCOUNT)+": %i",theApp.serverlist->GetDeletedServerCount());
	stattree.SetItemText(srv4, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_WUSER)+": %i",servuser);
	stattree.SetItemText(srv5, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_WFILE)+": %i",servfile);
	stattree.SetItemText(srv6, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_USER)+": %i",servtuser);
	stattree.SetItemText(srv7, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_FILE)+": %i",servtfile);
	stattree.SetItemText(srv8, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_ACTIVECON)+": %i",activeconnections);
	stattree.SetItemText(con8, cbuffer);
	cbuffer.Format(GetResString(IDS_SF_SRVOCC),servocc);
	stattree.SetItemText(srv9, cbuffer);
	uint32 m_itemp = theApp.listensocket->GetMaxConnectionReached();
	if(m_itemp != m_ilastMaxConnReached)
	{
		COleDateTime time(COleDateTime::GetCurrentTime()); // DonGato date-time localization
		cbuffer.Format(GetResString(IDS_SF_MAXCONLIMITREACHED)+": %i : %s",m_itemp,time.Format());
		stattree.SetItemText(con9, cbuffer);
		m_ilastMaxConnReached = m_itemp;
	}
	else if( m_itemp == 0 )
	{
		cbuffer.Format(GetResString(IDS_SF_MAXCONLIMITREACHED)+": %i",m_itemp);
		stattree.SetItemText(con9, cbuffer);
	}

	if(theApp.serverconnect->IsConnected())
	{
		cbuffer.Format(GetResString(IDS_SF_AVGCON)+": %i",(int)averageconnections);
		stattree.SetItemText(con10, cbuffer);
	}	
	else
	{
		stattree.SetItemText(con10, GetResString(IDS_STATS_WAITCONN));
	}
	cbuffer.Format(GetResString(IDS_SF_PEAKCON)+": %i",peakconnections);
	stattree.SetItemText(con11, cbuffer);

	stattree.SetRedraw(TRUE);
	stattree.Invalidate();
d1094 1
a1094 1
	if(bShow && m_bFirstShow && m_bUseNewStyle)
d1097 1
a1097 1
		m_ctrlStatsList.SetColumn(theApp.glob_prefs->GetStatsColumnWidth());
a1173 1
	//GetDlgItem(IDC_STATIC_S3)->SetWindowText(GetResString(IDS_ST_WAITINGU));
d1178 1
a1178 1
	if(m_ctrlStatsList.GetSafeHwnd())	// if the wnd is there, the ptrs should exist too
d1180 9
a1188 8
		m_pTransferM->SetLabelText(GetResString(IDS_FSTAT_TRANSFER));
		m_pTransfer[1]->SetLabelText(GetResString(IDS_TW_UPLOADS));
		m_pTransfer[2]->SetLabelText(GetResString(IDS_TW_DOWNLOADS));
		m_pConnectionM->SetLabelText(GetResString(IDS_FSTAT_CONNECTION));
		m_pClientsM->SetLabelText(GetResString(IDS_CLIENTS));
		m_pServerM->SetLabelText(GetResString(IDS_FSTAT_SERVERS));
		m_pSharedFilesM->SetLabelText(GetResString(IDS_SHAREDFILES));
		m_pDownloadsTotalM->SetLabelText(GetResString(IDS_DWTOT));
a1201 8
	if(m_bUseNewStyle)
		CreateStatsListNT();
	else
		CreateStatsList9X();
}

void CStatisticsDlg::CreateStatsListNT()
{
d1204 1
a1204 79
	int i;
	int j;
	COLORREF crEntryTextColor = RGB(0,45,126);
	
	CRect r;
	GetDlgItem(IDC_STATTREE)->GetWindowRect(r);
	ScreenToClient(r);
	m_ctrlStatsList.Create(WS_VISIBLE | WS_CHILD | WS_BORDER | WS_TABSTOP |
							LVS_REPORT | LVS_ALIGNLEFT | LVS_SINGLESEL,
								r, this, OT_OPTIONS_SHADEEXPANDCOLUMN | OT_OPTIONS_SHADEROOTITEMS, rand());
	m_ctrlStatsList.SetRedraw(FALSE);
	
// TRANSFER:	
	m_pTransferM = m_ctrlStatsList.InsertItem(new COptionTreeItem);
	m_pTransferM->SetLabelText(GetResString(IDS_FSTAT_TRANSFER));
	
	m_pTransfer[0] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pTransferM);
	m_pTransfer[0]->SetLabelText(GetResString(IDS_FSTAT_WAITING));

	m_pTransfer[1] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pTransferM);
	m_pTransfer[1]->SetLabelText(GetResString(IDS_TW_UPLOADS));
	for(i = 0; i < sizeof(m_pUpload)/sizeof(COptionTreeItemStatic*); i++)
	{
		m_pUpload[i] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pTransfer[1]);
		m_pUpload[i]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
		if(m_pUpload[i]->CreateStaticItem(0))
			m_pUpload[i]->SetTextColor(crEntryTextColor);
	}
	
	m_pTransfer[2] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pTransferM);
	m_pTransfer[2]->SetLabelText(GetResString(IDS_TW_DOWNLOADS));
	for(i = 0; i < sizeof(m_pDownload)/sizeof(COptionTreeItemStatic*); i++)
	{
		m_pDownload[i] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pTransfer[2]);
		m_pDownload[i]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
		if(m_pDownload[i]->CreateStaticItem(0))
			m_pDownload[i]->SetTextColor(crEntryTextColor);
	}

// CONNECTION:
	m_pConnectionM = m_ctrlStatsList.InsertItem(new COptionTreeItem);
	m_pConnectionM->SetLabelText(GetResString(IDS_FSTAT_CONNECTION));
	for(i = 0; i < sizeof(m_pConnection)/sizeof(COptionTreeItemStatic*); i++)
	{
		m_pConnection[i] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pConnectionM);
		m_pConnection[i]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
		if(m_pConnection[i]->CreateStaticItem(0))
			m_pConnection[i]->SetTextColor(crEntryTextColor);
	}

// CLIENTS:
	m_pClientsM = m_ctrlStatsList.InsertItem(new COptionTreeItem);
	m_pClientsM->SetLabelText(GetResString(IDS_CLIENTS));
	for(i = 0; i < sizeof(m_pClients)/sizeof(COptionTreeItemStatic*)-1; i++)
	{
		m_pClients[i] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClientsM);
		m_pClients[i]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
		if(m_pClients[i]->CreateStaticItem(0))
		{
			m_pClients[i]->SetTextColor(crEntryTextColor);
		}
		for(j = 0; j < sizeof(m_pClientVersions[i])/sizeof(COptionTreeItemStatic*); j++) 
		{
			m_pClientVersions[i][j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[i]);
			m_pClientVersions[i][j]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
			if(m_pClientVersions[i][j]->CreateStaticItem(0))
			{
				m_pClientVersions[i][j]->SetTextColor(crEntryTextColor);
			}
		}
	}
	m_pClients[i] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClientsM);
	m_pClients[i]->SetLabelText(GetResString(IDS_FSTAT_WAITING));


// QUEUE:
	m_pQueueM = m_ctrlStatsList.InsertItem(new COptionTreeItem);
	m_pQueueM->SetLabelText(GetResString(IDS_QUEUE));
	for(i = 0; i < sizeof(m_pQueue)/sizeof(COptionTreeItemStatic*); i++)
d1206 4
a1209 4
		m_pQueue[i] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pQueueM);
		m_pQueue[i]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
		if(m_pQueue[i]->CreateStaticItem(0))
			m_pQueue[i]->SetTextColor(crEntryTextColor);
d1211 1
a1211 5

// SERVER:
	m_pServerM = m_ctrlStatsList.InsertItem(new COptionTreeItem);
	m_pServerM->SetLabelText(GetResString(IDS_FSTAT_SERVERS));
	for(i = 0; i < sizeof(m_pServer)/sizeof(COptionTreeItemStatic*); i++)
d1213 2
a1214 26
		m_pServer[i] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pServerM);
		m_pServer[i]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
		if(m_pServer[i]->CreateStaticItem(0))
			m_pServer[i]->SetTextColor(crEntryTextColor);
	}

// SHARED FILES:
	m_pSharedFilesM = m_ctrlStatsList.InsertItem(new COptionTreeItem);
	m_pSharedFilesM->SetLabelText(GetResString(IDS_SHAREDFILES));
	for(i = 0; i < sizeof(m_pSharedFiles)/sizeof(COptionTreeItemStatic*); i++)
	{
		m_pSharedFiles[i] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pSharedFilesM);
		m_pSharedFiles[i]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
		if(m_pSharedFiles[i]->CreateStaticItem(0))
			m_pSharedFiles[i]->SetTextColor(crEntryTextColor);
	}

// DOWNLOADS [TOTAL]:
	m_pDownloadsTotalM = m_ctrlStatsList.InsertItem(new COptionTreeItem);
	m_pDownloadsTotalM->SetLabelText(GetResString(IDS_DWTOT));
	for(i = 0; i < sizeof(m_pDownloadsTotal)/sizeof(COptionTreeItemStatic*); i++)
	{
		m_pDownloadsTotal[i] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pDownloadsTotalM);
		m_pDownloadsTotal[i]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
		if(m_pDownloadsTotal[i]->CreateStaticItem(0))
			m_pDownloadsTotal[i]->SetTextColor(crEntryTextColor);
d1216 93
d1311 1
a1311 1
	m_ctrlStatsList.ExpandAllItems();
d1319 15
a1333 15
				case 0:	 m_pTransferM->Expand(false);					break;
				case 1:  m_pTransfer[1]->Expand(false);					break;
				case 2:  m_pTransfer[2]->Expand(false);					break;
				case 3:	 m_pConnectionM->Expand(false);					break;
				case 4:  m_pClientsM->Expand(false);					break;
				case 5:  m_pClients[SO_EMULE]->Expand(false);			break;
				case 6:	 m_pClients[SO_EDONKEY]->Expand(false);			break;
				case 7:  m_pClients[SO_EDONKEYHYBRID]->Expand(false);	break;
				case 8:	 m_pQueueM->Expand(false);						break;
				case 9:	 m_pServerM->Expand(false);						break;
				case 10: m_pSharedFilesM->Expand(false);				break;
				case 11: m_pDownloadsTotalM->Expand(false);				break;
				case 12: m_pClients[SO_CDONKEY]->Expand(false);			break;
				case 13: m_pClients[SO_MLDONKEY]->Expand(false);		break;
				case 14: m_pClients[SO_OLDEMULE]->Expand(false);		break;
d1338 2
a1339 111
	m_ctrlStatsList.SetColumn(theApp.glob_prefs->GetStatsColumnWidth());
	m_ctrlStatsList.SetRedraw(TRUE);
	m_ctrlStatsList.Invalidate();

	EMULE_CATCH
}

void CStatisticsDlg::CreateStatsList9X()
{
	EMULE_TRY

	stattree.EnableWindow(TRUE);
	stattree.ShowWindow(SW_SHOW);
	stattree.SetRedraw(FALSE);

	// setup tree
	h_transfer= stattree.InsertItem(GetResString(IDS_FSTAT_TRANSFER));
	tran0= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_transfer);

	h_upload = stattree.InsertItem(GetResString(IDS_TW_UPLOADS), h_transfer);
	up1= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_upload);
	up2= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_upload);
	up3= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_upload);
	up4= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_upload);
	up5= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_upload);
	up6= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_upload);

	h_download = stattree.InsertItem(GetResString(IDS_TW_DOWNLOADS), h_transfer);
	down1= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_download);
	down2= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_download);
	down3= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_download);

	h_connection = stattree.InsertItem(GetResString(IDS_FSTAT_CONNECTION));
	con1= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con2= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con3= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con4= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con5= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con6= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con7= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con8= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con9= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con10= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	con11= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_connection);
	
	//--- xrmb:statsclientstatus ---
	h_clients = stattree.InsertItem(GetResString(IDS_CLIENTS));
	h_clientssoftware = stattree.InsertItem("software", h_clients);

	for ( int i= 0; i < SO_LAST-1 ; i++ )
	{
		cli[i]	=	stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientssoftware);
		for ( int j=0; j < 3; j++ )
		{
			cliv[i][j]	=	stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli[i]);
		}
	}
	// For Unknown client
	cli[i]	=	stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientssoftware);


	h_clientsstatus = stattree.InsertItem("download-queue overview", h_clients);
	for ( i = 0; i < DS_LAST; i++ )
	{
		cls[i]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientsstatus);
	}
	//--- :xrmb ---
	
	h_servers = stattree.InsertItem(GetResString(IDS_FSTAT_SERVERS));
	srv1= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_servers);
	srv2= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_servers);
	srv3= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_servers);
	srv4= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_servers);
	srv5= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_servers);
	srv6= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_servers);
	srv7= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_servers);
	srv8= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_servers);

	h_shared = stattree.InsertItem( GetResString(IDS_SHAREDFILES) );
	shar1= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_shared);
	shar2= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_shared);
	shar3= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_shared);

	h_xchipx= stattree.InsertItem( GetResString(IDS_DWTOT) );	//xChipx
	hd0 = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_xchipx); 
	hd1 = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_xchipx); 
	hd2 = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_xchipx); 
	hd3 = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_xchipx); 
	hd4 = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_xchipx); 
	hd5 = stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_xchipx); //new xChipx

	stattree.Expand(h_transfer,TVE_EXPAND);
	stattree.Expand(h_connection,TVE_EXPAND);
	stattree.Expand(h_clients,TVE_EXPAND);
	stattree.Expand(h_servers,TVE_EXPAND);
	stattree.Expand(h_shared ,TVE_EXPAND);
	stattree.Expand(h_upload,TVE_EXPAND);
	stattree.Expand(h_download,TVE_EXPAND);
	stattree.Expand(h_xchipx,TVE_EXPAND);	//xChipx

	// Clients
	for (int i = 0; i < SO_UNKNOWN  ; i++ )
	{
		stattree.Expand(cli[i],TVE_EXPAND);
	}

	stattree.Expand(h_clientssoftware,TVE_EXPAND);
	stattree.Expand(h_clientsstatus,TVE_EXPAND);

	stattree.SetRedraw(TRUE);
	stattree.Invalidate();
d1359 2
d1363 15
a1377 15
			case 0:	 strExpanded += m_pTransferM->IsExpanded() ? '1' : '0';						break;
			case 1:  strExpanded += m_pTransfer[1]->IsExpanded() ? '1' : '0';					break;
			case 2:  strExpanded += m_pTransfer[2]->IsExpanded() ? '1' : '0';					break;
			case 3:	 strExpanded += m_pConnectionM->IsExpanded() ? '1' : '0';					break;
			case 4:  strExpanded += m_pClientsM->IsExpanded() ? '1' : '0';						break;
			case 5:  strExpanded += m_pClients[SO_EMULE]->IsExpanded() ? '1' : '0';				break;
			case 6:	 strExpanded += m_pClients[SO_EDONKEY]->IsExpanded() ? '1' : '0';			break;
			case 7:	 strExpanded += m_pClients[SO_EDONKEYHYBRID]->IsExpanded() ? '1' : '0';		break;
			case 8:	 strExpanded += m_pQueueM->IsExpanded() ? '1' : '0';						break;
			case 9:	 strExpanded += m_pServerM->IsExpanded() ? '1' : '0';						break;
			case 10: strExpanded += m_pSharedFilesM->IsExpanded() ? '1' : '0';					break;
			case 11: strExpanded += m_pDownloadsTotalM->IsExpanded() ? '1' : '0';				break;
			case 12: strExpanded += m_pClients[SO_CDONKEY]->IsExpanded() ? '1' : '0';			break;
			case 13: strExpanded += m_pClients[SO_MLDONKEY]->IsExpanded() ? '1' : '0';			break;
			case 14: strExpanded += m_pClients[SO_OLDEMULE]->IsExpanded() ? '1' : '0';			break;
d1380 1
@


1.23
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d385 2
a386 3
	int test;
	test = theApp.listensocket->GetOpenSockets() - averageconnections ;
	if ( test < 1 )
d388 2
a389 2
	float test3 = 25*(float)theApp.glob_prefs->GetMaxConperFive()/(float)10;
	if ( (float)test > test3 )
d391 2
a392 2
	float test2 = (1-((float)test/test3));
	return test2;
@


1.22
log
@Chnages to position of controls on Search and SysTray.
@
text
@d27 7
@


1.21
log
@*** empty log message ***
@
text
@d31 1
a31 1
	: CResizableDialog(CStatisticsDlg::IDD, pParent) , m_DownloadOMeter( 3 ),m_Statistics(4),m_UploadOMeter(3)
d117 7
a123 7
	GetDlgItem(IDC_SCOPE_D)->GetWindowRect(rect) ;
	ScreenToClient(rect) ;
	m_DownloadOMeter.Create(WS_VISIBLE | WS_CHILD, rect, this) ; 
	m_DownloadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphDownloadRate()+4, 0) ;
	m_DownloadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphDownloadRate()+4, 1) ;
	m_DownloadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphDownloadRate()+4, 2) ;
	m_DownloadOMeter.SetYUnits(GetResString(IDS_KBYTESEC)) ;
d132 7
a138 7
	GetDlgItem(IDC_SCOPE_U)->GetWindowRect(rect) ;
	ScreenToClient(rect) ;
	m_UploadOMeter.Create(WS_VISIBLE | WS_CHILD, rect, this) ; 
	m_UploadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphUploadRate()+4, 0) ;
	m_UploadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphUploadRate()+4, 1) ;
	m_UploadOMeter.SetRange(0, theApp.glob_prefs->GetMaxGraphUploadRate()+4, 2) ;
	m_UploadOMeter.SetYUnits(GetResString(IDS_KBYTESEC)) ;
d248 3
a250 3
		if (!m_Led1[ ElmtIdx ]) m_Led1[ ElmtIdx ].Create( WS_VISIBLE | WS_CHILD, Rect, this );
		m_Led1[ ElmtIdx ].SetBackgroundColor( m_DownloadOMeter.GetPlotColor( ElmtIdx ) );
		m_Led1[ ElmtIdx ].SetFrameColor( RGB( 0x00, 0x00, 0x00 ) );
d252 3
a254 3
		if (!m_Led2[ ElmtIdx ]) m_Led2[ ElmtIdx ].Create( WS_VISIBLE | WS_CHILD, Rect, this );
		m_Led2[ ElmtIdx ].SetBackgroundColor( m_UploadOMeter.GetPlotColor( ElmtIdx ) );
		m_Led2[ ElmtIdx ].SetFrameColor( RGB( 0x00, 0x00, 0x00 ) );
d256 3
a258 3
		if (!m_Led3[ ElmtIdx ]) m_Led3[ ElmtIdx ].Create( WS_VISIBLE | WS_CHILD, Rect, this );
		m_Led3[ ElmtIdx ].SetBackgroundColor( m_Statistics.GetPlotColor( ElmtIdx ) );
		m_Led3[ ElmtIdx ].SetFrameColor( RGB( 0x00, 0x00, 0x00 ) );
d268 16
a283 16
	m_DownloadOMeter.SetBackgroundColor(theApp.glob_prefs->GetStatsColor(0)) ;
	m_DownloadOMeter.SetGridColor(theApp.glob_prefs->GetStatsColor(1)) ;
	m_DownloadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(4) ,0) ;
	m_DownloadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(3) ,1) ;
	m_DownloadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(2) ,2) ;
	m_UploadOMeter.SetBackgroundColor(theApp.glob_prefs->GetStatsColor(0)) ;
	m_UploadOMeter.SetGridColor(theApp.glob_prefs->GetStatsColor(1)) ;
	m_UploadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(7) ,0) ;
	m_UploadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(6) ,1) ;
	m_UploadOMeter.SetPlotColor( theApp.glob_prefs->GetStatsColor(5) ,2) ;
	m_Statistics.SetBackgroundColor(theApp.glob_prefs->GetStatsColor(0)) ;
	m_Statistics.SetGridColor(theApp.glob_prefs->GetStatsColor(1)) ;
	m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(8),0) ;
	m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(9),1) ;
	//m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(10),2) ;
	m_Statistics.SetPlotColor( theApp.glob_prefs->GetStatsColor(10),3) ;
d295 3
a297 3
	SetupLegend( IDC_C1_2, 0 ,2 );
	SetupLegend( IDC_C1_3, 1 ,2 );
	SetupLegend( IDC_C1,   2 ,2 );
d299 2
a300 2
	SetupLegend( IDC_S0, 0 ,3);
	SetupLegend( IDC_S1, 1 ,3);
d302 1
a302 1
	SetupLegend( IDC_S3, 3 ,3);
d1073 1
a1073 1
	EnableWindow( FALSE );
d1092 1
a1092 1
		m_UploadOMeter.SetXUnits(buffer );
d1097 1
a1097 1
	EnableWindow( TRUE );
d1106 2
a1107 1
	if (SetDownload) {
d1111 4
a1114 2
	}else{
		m_UploadOMeter.SetRange(0, maxValue+4, 0) ;
d1141 2
a1142 2
	value.Format(" (%u "+ GetResString(IDS_MINS) + ")",theApp.glob_prefs->GetStatsAverageMinutes() );
	GetDlgItem(IDC_TIMEAVG1)->SetWindowText((LPCTSTR)GetResString(IDS_AVG).MakeLower() + value );
d1306 13
a1318 13
				case 0:	 m_pTransferM->Expand(false);		break;
				case 1:  m_pTransfer[1]->Expand(false);		break;
				case 2:  m_pTransfer[2]->Expand(false);		break;
				case 3:	 m_pConnectionM->Expand(false);		break;
				case 4:  m_pClientsM->Expand(false);		break;
				case 5:  m_pClients[SO_EMULE]->Expand(false);		break;
				case 6:	 m_pClients[SO_EDONKEY]->Expand(false);		break;
				case 7:  m_pClients[SO_EDONKEYHYBRID]->Expand(false);		break;
				case 8:	 m_pQueueM->Expand(false);			break;
				case 9:	 m_pServerM->Expand(false);			break;
				case 10: m_pSharedFilesM->Expand(false);	break;
				case 11: m_pDownloadsTotalM->Expand(false);	break;
				case 12: m_pClients[SO_CDONKEY]->Expand(false);		break;
d1339 2
a1340 1
// setup tree
a1433 2


d1457 7
a1463 7
			case 0:	 strExpanded += m_pTransferM->IsExpanded() ? '1' : '0';			break;
			case 1:  strExpanded += m_pTransfer[1]->IsExpanded() ? '1' : '0';		break;
			case 2:  strExpanded += m_pTransfer[2]->IsExpanded() ? '1' : '0';		break;
			case 3:	 strExpanded += m_pConnectionM->IsExpanded() ? '1' : '0';		break;
			case 4:  strExpanded += m_pClientsM->IsExpanded() ? '1' : '0';			break;
			case 5:  strExpanded += m_pClients[SO_EMULE]->IsExpanded() ? '1' : '0';		break;
			case 6:	 strExpanded += m_pClients[SO_EDONKEY]->IsExpanded() ? '1' : '0';		break;
d1465 7
a1471 7
			case 8:	 strExpanded += m_pQueueM->IsExpanded() ? '1' : '0';			break;
			case 9:	 strExpanded += m_pServerM->IsExpanded() ? '1' : '0';			break;
			case 10: strExpanded += m_pSharedFilesM->IsExpanded() ? '1' : '0';		break;
			case 11: strExpanded += m_pDownloadsTotalM->IsExpanded() ? '1' : '0';	break;
			case 12: strExpanded += m_pClients[SO_CDONKEY]->IsExpanded() ? '1' : '0';		break;
			case 13: strExpanded += m_pClients[SO_MLDONKEY]->IsExpanded() ? '1' : '0';		break;
			case 14: strExpanded += m_pClients[SO_OLDEMULE]->IsExpanded() ? '1' : '0';		break;
@


1.20
log
@*** empty log message ***
@
text
@a617 23
	cbuffer.Format("eMule: %i(%1.1f%%)",myStats[SO_EMULE],(double)100*myStats[SO_EMULE]/totalclient);
	SetItemText(m_pClients[SO_EMULE], cbuffer);

	cbuffer.Format("CDonkey: %i(%1.1f%%)",myStats[SO_CDONKEY],(double)100*myStats[SO_CDONKEY]/totalclient);
	SetItemText(m_pClients[SO_CDONKEY], cbuffer);

	cbuffer.Format("eDonkeyHybrid: %i(%1.1f%%)",myStats[SO_EDONKEYHYBRID],(double)100*myStats[SO_EDONKEYHYBRID]/totalclient);
	SetItemText(m_pClients[SO_EDONKEYHYBRID], cbuffer);

	cbuffer.Format("eDonkey: %i(%1.1f%%)",myStats[SO_EDONKEY],(double)100*myStats[SO_EDONKEY]/totalclient);
	SetItemText(m_pClients[SO_EDONKEY], cbuffer);

	
	cbuffer.Format("Old MLDonkey: %i(%1.1f%%)",myStats[SO_MLDONKEY],(double)100*myStats[SO_MLDONKEY]/totalclient);
	SetItemText(m_pClients[SO_MLDONKEY], cbuffer);

	cbuffer.Format("Old eMule: %i(%1.1f%%)",myStats[SO_OLDEMULE],(double)100*myStats[SO_OLDEMULE]/totalclient);
	SetItemText(m_pClients[SO_OLDEMULE], cbuffer);

	cbuffer.Format(GetResString(IDS_STATS_UNKNOWNCLIENT),myStats[SO_UNKNOWN]);
	SetItemText(m_pClients[SO_UNKNOWN], cbuffer);
	

d628 3
d661 4
a664 1

a903 8
	cbuffer.Format("eMule: %i(%1.1f%%)",myStats[SO_EMULE],(double)100*myStats[SO_EMULE]/totalclient);stattree.SetItemText(cli[SO_EMULE], cbuffer);
	cbuffer.Format("CDonkey: %i(%1.1f%%)",myStats[SO_CDONKEY],(double)100*myStats[SO_CDONKEY]/totalclient);stattree.SetItemText(cli[SO_CDONKEY], cbuffer);
	cbuffer.Format("eDonkeyHybrid: %i(%1.1f%%)",myStats[SO_EDONKEYHYBRID],(double)100*myStats[SO_EDONKEYHYBRID]/totalclient);stattree.SetItemText(cli[SO_EDONKEYHYBRID], cbuffer);
	cbuffer.Format("eDonkey: %i(%1.1f%%)",(myStats[SO_EDONKEY]),(double)100*(myStats[SO_EDONKEY])/totalclient);stattree.SetItemText(cli[SO_EDONKEY], cbuffer);
	cbuffer.Format("mlDonkey: %i(%1.1f%%)",myStats[SO_MLDONKEY],(double)100*myStats[SO_MLDONKEY]/totalclient);stattree.SetItemText(cli[SO_MLDONKEY], cbuffer);
	cbuffer.Format("Old eMule: %i(%1.1f%%)",myStats[SO_OLDEMULE],(double)100*myStats[SO_OLDEMULE]/totalclient);stattree.SetItemText(cli[SO_OLDEMULE], cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_UNKNOWNCLIENT),myStats[SO_UNKNOWN]);stattree.SetItemText(cli[SO_UNKNOWN], cbuffer);

d914 2
d946 2
@


1.19
log
@*** empty log message ***
@
text
@d644 1
a644 1
		cbuffer.Format("%s: %i", GetStatusString((eQState)j), AllClients.m_pClients[SO_LAST][j]);
d929 5
a933 8
	//--- xrmb:statsclientstatus ---
	cbuffer.Format("%s: %i", GetResString(IDS_TRANSFERRING),		AllClients.m_pClients[SO_LAST][DS_DOWNLOADING]);		stattree.SetItemText(cls1, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_ONQUEUE),				AllClients.m_pClients[SO_LAST][DS_ONQUEUE]);			stattree.SetItemText(cls2, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_CONNECTING),			AllClients.m_pClients[SO_LAST][DS_CONNECTING]);		stattree.SetItemText(cls3, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_ASKING),				AllClients.m_pClients[SO_LAST][DS_CONNECTED]);		stattree.SetItemText(cls4, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_NONEEDEDPARTS),		AllClients.m_pClients[SO_LAST][DS_NONEEDEDPARTS]);	stattree.SetItemText(cls5, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_NOCONNECTLOW2LOW),	AllClients.m_pClients[SO_LAST][DS_LOWTOLOWIP]);		stattree.SetItemText(cls6, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_TOOMANYCONNS),		AllClients.m_pClients[SO_LAST][DS_TOOMANYCONNS]);		stattree.SetItemText(cls7, cbuffer);
d1404 4
a1407 7
	cls1= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientsstatus);
	cls2= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientsstatus);
	cls3= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientsstatus);
	cls4= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientsstatus);
	cls5= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientsstatus);
	cls6= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientsstatus);
	cls7= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientsstatus);
@


1.18
log
@Final client statistics changes
@
text
@d62 1
a62 1
	for(i = 0; i < 7; i++)
d79 1
d642 5
a646 15
	// xrmb : statsclientstatus
	cbuffer.Format("%s: %i", GetResString(IDS_TRANSFERRING), AllClients.m_pClients[SO_LAST][DS_DOWNLOADING]);
	SetItemText(m_pQueue[0], cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_ONQUEUE), AllClients.m_pClients[SO_LAST][DS_ONQUEUE]);
	SetItemText(m_pQueue[1], cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_CONNECTING), AllClients.m_pClients[SO_LAST][DS_CONNECTING]);
	SetItemText(m_pQueue[2], cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_ASKING), AllClients.m_pClients[SO_LAST][DS_CONNECTED]);
	SetItemText(m_pQueue[3], cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_NONEEDEDPARTS), AllClients.m_pClients[SO_LAST][DS_NONEEDEDPARTS]);
	SetItemText(m_pQueue[4], cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_NOCONNECTLOW2LOW), AllClients.m_pClients[SO_LAST][DS_LOWTOLOWIP]);
	SetItemText(m_pQueue[5], cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_TOOMANYCONNS), AllClients.m_pClients[SO_LAST][DS_TOOMANYCONNS]);
	SetItemText(m_pQueue[6], cbuffer);
d649 1
a649 1
	for ( uint32 j = 0; j < (uint32)SO_UNKNOWN ; j ++ )
@


1.17
log
@*** empty log message ***
@
text
@d43 1
a43 1
	int i;
d54 8
a61 12
	for(i = 0; i < 3; i++)
        	m_pClientVersion[i] = NULL;
	for(i = 0; i < 3; i++)
        	m_pClientVersionHybrid[i] = NULL;
	for(i = 0; i < 3; i++)
        	m_pClientVersionExt[i] = NULL;
	for(i = 0; i < 3; i++)
        	m_pClientVersionCDonkey[i] = NULL;
	for(i = 0; i < 3; i++)
        	m_pClientVersionMLDonkey[i] = NULL;
	for(i = 0; i < 3; i++)
        	m_pClientVersionOldEmule[i] = NULL;
d642 1
a642 1
	cbuffer.Format("%s: %i", GetResString(IDS_TRANSFERRING), AllClients.clientStatus[DS_DOWNLOADING]);
d644 1
a644 1
	cbuffer.Format("%s: %i", GetResString(IDS_ONQUEUE), AllClients.clientStatus[DS_ONQUEUE]);
d646 1
a646 1
	cbuffer.Format("%s: %i", GetResString(IDS_CONNECTING), AllClients.clientStatus[DS_CONNECTING]);
d648 1
a648 1
	cbuffer.Format("%s: %i", GetResString(IDS_ASKING), AllClients.clientStatus[DS_CONNECTED]);
d650 1
a650 1
	cbuffer.Format("%s: %i", GetResString(IDS_NONEEDEDPARTS), AllClients.clientStatus[DS_NONEEDEDPARTS]);
d652 1
a652 1
	cbuffer.Format("%s: %i", GetResString(IDS_NOCONNECTLOW2LOW), AllClients.clientStatus[DS_LOWTOLOWIP]);
d654 1
a654 1
	cbuffer.Format("%s: %i", GetResString(IDS_TOOMANYCONNS), AllClients.clientStatus[DS_TOOMANYCONNS]);
d657 6
a662 42
	//--- find top 3 eMule client versions ---
	uint32	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		POSITION pos=AllClients.clientVersionEMule.GetStartPosition();
		//pos=clientVersionEMule.GetStartPosition();
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;
		while(pos)
		{
			AllClients.clientVersionEMule.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_EMULE,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format(GetResString(IDS_FSTAT_WAITING));		
		SetItemText(m_pClientVersionExt[i], cbuffer);
	}

	//--- find top 3 CDonkey client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		POSITION pos=AllClients.clientVersionCDonkey.GetStartPosition();
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;
		while(pos)
d664 7
a670 3
			AllClients.clientVersionCDonkey.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
d672 8
a679 3
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
d681 7
a688 137
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_CDONKEY,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format(GetResString(IDS_FSTAT_WAITING));		
		SetItemText(m_pClientVersionCDonkey[i], cbuffer);
	}

	//--- find top 3 eDonkeyHybrid client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;

        POSITION pos;

        pos=AllClients.clientVersionEDonkeyHybrid.GetStartPosition();
		while(pos)
		{
			AllClients.clientVersionEDonkeyHybrid.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}

		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_EDONKEYHYBRID,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format(GetResString(IDS_FSTAT_WAITING));
		SetItemText(m_pClientVersionHybrid[i], cbuffer);
	}

	//--- find top 3 eDonkey client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;

        POSITION pos;
		pos=AllClients.clientVersionEDonkey.GetStartPosition();
		while(pos)
		{
			AllClients.clientVersionEDonkey.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_EDONKEY,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format(GetResString(IDS_FSTAT_WAITING));
		SetItemText(m_pClientVersion[i], cbuffer);
	}

	//--- find top 3 MLDonkey client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;

        POSITION pos;
		pos=AllClients.clientVersionMLDonkey.GetStartPosition();
		while(pos)
		{
			AllClients.clientVersionMLDonkey.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_MLDONKEY,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format(GetResString(IDS_FSTAT_WAITING));
		SetItemText(m_pClientVersionMLDonkey[i], cbuffer);
	}

	//--- find top 3 Old eMule client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;

        POSITION pos;
		pos=AllClients.clientVersionOldEMule.GetStartPosition();
		while(pos)
		{
			AllClients.clientVersionOldEMule.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_OLDEMULE,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format(GetResString(IDS_FSTAT_WAITING));
		SetItemText(m_pClientVersionOldEmule[i], cbuffer);
d939 7
a945 38
	cbuffer.Format("%s: %i", GetResString(IDS_TRANSFERRING),		AllClients.clientStatus[DS_DOWNLOADING]);		stattree.SetItemText(cls1, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_ONQUEUE),				AllClients.clientStatus[DS_ONQUEUE]);			stattree.SetItemText(cls2, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_CONNECTING),			AllClients.clientStatus[DS_CONNECTING]);		stattree.SetItemText(cls3, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_ASKING),				AllClients.clientStatus[DS_CONNECTED]);		stattree.SetItemText(cls4, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_NONEEDEDPARTS),		AllClients.clientStatus[DS_NONEEDEDPARTS]);	stattree.SetItemText(cls5, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_NOCONNECTLOW2LOW),	AllClients.clientStatus[DS_LOWTOLOWIP]);		stattree.SetItemText(cls6, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_TOOMANYCONNS),		AllClients.clientStatus[DS_TOOMANYCONNS]);		stattree.SetItemText(cls7, cbuffer);


	//--- find top 3 eMule client versions ---
	uint32	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		POSITION pos=AllClients.clientVersionEMule.GetStartPosition();
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;
		while(pos)
		{
			AllClients.clientVersionEMule.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_EMULE,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format("...");		
		stattree.SetItemText(cliv[SO_EMULE][i], cbuffer);
	}
d948 6
a953 11
	//--- find top 3 CDONKEY client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		POSITION pos=AllClients.clientVersionCDonkey.GetStartPosition();
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;
		while(pos)
d955 7
a961 3
			AllClients.clientVersionCDonkey.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
d963 8
a970 3
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
d972 7
a979 7
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_CDONKEY,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format("...");		
		stattree.SetItemText(cliv[SO_CDONKEY][i], cbuffer);
a982 128
	//--- find top 3 eDonkeyHybrid client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		POSITION pos;
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;

        pos=AllClients.clientVersionEDonkeyHybrid.GetStartPosition();
		while(pos)
		{
			AllClients.clientVersionEDonkeyHybrid.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_EDONKEYHYBRID,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format("...");
		stattree.SetItemText(cliv[SO_EDONKEYHYBRID][i], cbuffer);
	}

	//--- find top 3 eDonkey client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		POSITION pos;
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;

        pos=AllClients.clientVersionEDonkey.GetStartPosition();
		while(pos)
		{
			AllClients.clientVersionEDonkey.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_EDONKEY,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format("...");
		stattree.SetItemText(cliv[SO_EDONKEY][i], cbuffer);
	}

	//--- find top 3 MLDonkey client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		POSITION pos;
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;

        pos=AllClients.clientVersionMLDonkey.GetStartPosition();
		while(pos)
		{
			AllClients.clientVersionMLDonkey.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_MLDONKEY,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format("...");
		stattree.SetItemText(cliv[SO_MLDONKEY][i], cbuffer);
	}

	//--- find top 3 OldEmule client versions ---
	currtop=0, lasttop=0xFFFFFFFF;
	for(uint32 i=0; i<3; i++)
	{
		POSITION pos;
		uint32	topver=0;
		uint32	topcnt=0;
		uint32	totcnt=0;
		uint32	ver;
		uint32	cnt;

        pos=AllClients.clientVersionOldEMule.GetStartPosition();
		while(pos)
		{
			AllClients.clientVersionOldEMule.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
		lasttop=currtop;
		currtop=0;
		if(topcnt)
			cbuffer.Format("v%s: %i (%1.1f%%)", GetClientVersionString(SO_OLDEMULE,topver), topcnt, (double)topcnt/totcnt*100);
		else
			cbuffer.Format("...");
		stattree.SetItemText(cliv[SO_OLDEMULE][i], cbuffer);
	}

d1261 1
a1261 1
	for(i = 0; i < sizeof(m_pClients)/sizeof(COptionTreeItemStatic*); i++)
d1266 1
d1268 2
a1269 1
		switch(i)
d1271 3
a1273 2
		case SO_EMULE:
			for(j = 0; j < sizeof(m_pClientVersionExt)/sizeof(COptionTreeItemStatic*); j++)
d1275 1
a1275 4
				m_pClientVersionExt[j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[SO_EMULE]);
				m_pClientVersionExt[j]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
				if(m_pClientVersionExt[j]->CreateStaticItem(0))
					m_pClientVersionExt[j]->SetTextColor(crEntryTextColor);
d1277 1
a1277 47
			break;
		case SO_CDONKEY:
			for(j = 0; j < sizeof(m_pClientVersionCDonkey)/sizeof(COptionTreeItemStatic*); j++)
			{
				m_pClientVersionCDonkey[j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[SO_CDONKEY]);
				m_pClientVersionCDonkey[j]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
				if(m_pClientVersionCDonkey[j]->CreateStaticItem(0))
					m_pClientVersionCDonkey[j]->SetTextColor(crEntryTextColor);
			}
			break;
		case SO_EDONKEYHYBRID:
			for(j = 0; j < sizeof(m_pClientVersionHybrid)/sizeof(COptionTreeItemStatic*); j++)
			{
				m_pClientVersionHybrid[j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[SO_EDONKEYHYBRID]);
				m_pClientVersionHybrid[j]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
				if(m_pClientVersionHybrid[j]->CreateStaticItem(0))
					m_pClientVersionHybrid[j]->SetTextColor(crEntryTextColor);
			}
			break;
		case SO_EDONKEY:
			for(j = 0; j < sizeof(m_pClientVersion)/sizeof(COptionTreeItemStatic*); j++)
			{
				m_pClientVersion[j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[SO_EDONKEY]);
				m_pClientVersion[j]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
				if(m_pClientVersion[j]->CreateStaticItem(0))
					m_pClientVersion[j]->SetTextColor(crEntryTextColor);
			}
			break;
		case SO_MLDONKEY:
			for(j = 0; j < sizeof(m_pClientVersionMLDonkey)/sizeof(COptionTreeItemStatic*); j++)
			{
				m_pClientVersionMLDonkey[j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[SO_MLDONKEY]);
				m_pClientVersionMLDonkey[j]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
				if(m_pClientVersionMLDonkey[j]->CreateStaticItem(0))
					m_pClientVersionMLDonkey[j]->SetTextColor(crEntryTextColor);
			}
			break;
		case SO_OLDEMULE:
			for(j = 0; j < sizeof(m_pClientVersionOldEmule)/sizeof(COptionTreeItemStatic*); j++)
			{
				m_pClientVersionOldEmule[j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[SO_OLDEMULE]);
				m_pClientVersionOldEmule[j]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
				if(m_pClientVersionOldEmule[j]->CreateStaticItem(0))
					m_pClientVersionOldEmule[j]->SetTextColor(crEntryTextColor);
			}
			break;
		};
d1279 3
d1403 1
a1403 1
	for ( int i= 0; i < SO_LAST ; i++ )
d1408 1
a1408 4
			if ( i != SO_UNKNOWN )
			{
				cliv[i][j]	=	stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli[i]);
			}
d1411 2
d1456 7
a1462 4
	//--- xrmb: ---
	stattree.Expand(cli[SO_EMULE],TVE_EXPAND);
	stattree.Expand(cli[SO_EDONKEY],TVE_EXPAND);
	stattree.Expand(cli[SO_EDONKEYHYBRID],TVE_EXPAND);
d1465 1
a1465 1
	//--- :xrmb ---
@


1.16
log
@*** empty log message ***
@
text
@d76 1
a76 1
	m_bUseNewStyle = false;//!(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04);
@


1.15
log
@Statistics related changes
@
text
@d76 1
a76 1
	m_bUseNewStyle = !(LOBYTE(theApp.glob_prefs->GetWindowsVersion()) == 0x04);
@


1.14
log
@Further Statistics changes
@
text
@d1705 1
a1705 1
				case 10:	 m_pSharedFilesM->Expand(false);	break;
d1707 3
d1844 1
a1844 1
	for(int i = 0; i < 12; i++)
a1862 1
			case 15: strExpanded += m_pClients[SO_UNKNOWN]->IsExpanded() ? '1' : '0';		break;
@


1.13
log
@*** empty log message ***
@
text
@d686 1
a686 1
			cbuffer.Format("v0.%02X: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d716 1
a716 1
			cbuffer.Format("v0.%02X: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d750 1
a750 1
			cbuffer.Format("v%i: %i (%1.1f%%)", topver -1000, topcnt, (double)topcnt/totcnt*100);
d782 1
a782 1
			cbuffer.Format("v%i: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d814 1
a814 1
			cbuffer.Format("v%i: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d846 1
a846 1
			cbuffer.Format("v%i: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d1108 95
d1204 1
a1204 1
	uint32	currtop=0, lasttop=0xFFFFFFFF;
d1229 1
a1229 1
			cbuffer.Format("v%i: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d1235 1
a1235 1
	//--- find top 3 eDonkeyHybrid client versions ---
d1246 1
a1246 1
        pos=AllClients.clientVersionEDonkeyHybrid.GetStartPosition();
d1249 1
a1249 1
			AllClients.clientVersionEDonkeyHybrid.GetNextAssoc(pos, ver, cnt);
d1261 1
a1261 1
			cbuffer.Format("v%i: %i (%1.1f%%)", topver -1000, topcnt, (double)topcnt/totcnt*100);
d1264 1
a1264 1
		stattree.SetItemText(cliv[SO_EDONKEYHYBRID][i], cbuffer);
d1267 1
a1267 1
	//--- find top 3 eMule client versions ---
d1271 1
a1271 1
		POSITION pos=AllClients.clientVersionEMule.GetStartPosition();
d1277 2
d1281 1
a1281 1
			AllClients.clientVersionEMule.GetNextAssoc(pos, ver, cnt);
d1293 1
a1293 1
			cbuffer.Format("v0.%02X: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d1295 2
a1296 2
			cbuffer.Format("...");		
		stattree.SetItemText(cliv[SO_EMULE][i], cbuffer);
d1298 1
@


1.12
log
@Less parameters for GetStatistics()  function , first step before redesign
@
text
@d52 1
a52 1
	for(i = 0; i < 5; i++)
d60 6
d318 1
a318 1
	int myStats[6] = {0};
d347 2
a348 2
	theApp.downloadqueue->GetDownloadStats(myStats);
	m_dPlotDataMore[0]=(activeconnections/theApp.glob_prefs->GetGraphRatio());//myStats[0]; // propstats Cax2
d351 1
a351 1
	m_dPlotDataMore[3]=myStats[1];
d453 2
a454 1
	int myStats[6];
d463 1
a463 1
	theApp.downloadqueue->GetDownloadStats(myStats,ui64TotFileSize,ui64TotBytesLeftToTransfer,ui64TotNeededSpace);	// changed by InterCeptor (xChipx: download statistics) 11.11.02
d470 1
a470 1
	cbuffer.Format(GetResString(IDS_DWTOT_NR),myStats[2]); 
d531 1
a531 1
	cbuffer.Format(GetResString(IDS_STATS_FOUNDSRC), myStats[0]);
d534 1
a534 1
	cbuffer.Format(GetResString(IDS_STATS_ACTDL), myStats[1]);
d617 2
a618 2
/*	theApp.clientlist->GetStatistics(totalclient, myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEDonkeyHybrid,&clientVersionEMule);
	totalclient -= myStats[0];
d621 5
a625 4
	cbuffer.Format("eMule: %i(%1.1f%%)",myStats[2],(double)100*myStats[2]/totalclient);stattree.SetItemText(cli1, cbuffer);
	cbuffer.Format("eDonkeyHybrid: %i (%1.1f%%)",myStats[4],(double)100*myStats[4]/totalclient);stattree.SetItemText(cli2, cbuffer);
	cbuffer.Format("eDonkey: %i(%1.1f%%)",myStats[1],(double)100*myStats[1]/totalclient);stattree.SetItemText(cli2, cbuffer);
	cbuffer.Format("Old MLDonkey: %i(%1.1f%%)",myStats[3],(double)100*myStats[3]/totalclient);stattree.SetItemText(cli3, cbuffer);*/
d627 2
d630 2
d633 10
a642 16
	theApp.clientlist->GetStatistics(totalclient,myStats, &AllClients);
	totalclient -= myStats[0];
	if( !totalclient )
		totalclient = 1;
	cbuffer.Format("eMule: %i(%1.1f%%)",myStats[2],(double)100*myStats[2]/totalclient);
	SetItemText(m_pClients[0], cbuffer);
	cbuffer.Format("eDonkey: %i(%1.1f%%)",myStats[1],(double)100*myStats[1]/totalclient);
	SetItemText(m_pClients[1], cbuffer);
	// Maverick
	cbuffer.Format("Old MLDonkey: %i(%1.1f%%)",myStats[3],(double)100*myStats[3]/totalclient);
	SetItemText(m_pClients[2], cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_UNKNOWNCLIENT),myStats[0]);
	SetItemText(m_pClients[3], cbuffer);
	// END Maverick
	cbuffer.Format("eDonkeyHybrid: %i(%1.1f%%)",myStats[4],(double)100*myStats[4]/totalclient);
	SetItemText(m_pClients[4], cbuffer);
d661 1
a661 1
	//--- find top 3 eDonkey client versions ---
d665 2
d672 19
d692 10
a701 2
        POSITION pos;
		pos=AllClients.clientVersionEDonkey.GetStartPosition();
d704 1
a704 1
			AllClients.clientVersionEDonkey.GetNextAssoc(pos, ver, cnt);
d716 1
a716 1
			cbuffer.Format("v%i: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d718 2
a719 2
			cbuffer.Format(GetResString(IDS_FSTAT_WAITING));
		SetItemText(m_pClientVersion[i], cbuffer);
d756 65
a820 1
	//--- find top 3 eMule client versions ---
a823 2
		POSITION pos=AllClients.clientVersionEMule.GetStartPosition();
		//pos=clientVersionEMule.GetStartPosition();
d829 3
d834 1
a834 1
			AllClients.clientVersionEMule.GetNextAssoc(pos, ver, cnt);
d846 1
a846 1
			cbuffer.Format("v0.%02X: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d848 2
a849 2
			cbuffer.Format(GetResString(IDS_FSTAT_WAITING));		
		SetItemText(m_pClientVersionExt[i], cbuffer);
d851 1
d925 2
a926 1
	int myStats[6];
d935 1
a935 1
	theApp.downloadqueue->GetDownloadStats(myStats,ui64TotFileSize,ui64TotBytesLeftToTransfer,ui64TotNeededSpace);	// changed by InterCeptor (xChipx: download statistics) 11.11.02
d942 1
a942 1
	cbuffer.Format(GetResString(IDS_DWTOT_NR),myStats[2]); 
d1006 1
a1006 1
	cbuffer.Format(GetResString(IDS_STATS_FOUNDSRC), myStats[0]);
d1009 1
a1009 1
	cbuffer.Format(GetResString(IDS_STATS_ACTDL), myStats[1]);
d1088 1
a1088 1
	totalclient -= myStats[0];
d1091 7
a1097 7
	cbuffer.Format("eMule: %i(%1.1f%%)",myStats[2],(double)100*myStats[2]/totalclient);stattree.SetItemText(cli1, cbuffer);
	cbuffer.Format("eDonkey: %i(%1.1f%%)",(myStats[1]+myStats[4]),(double)100*(myStats[1]+myStats[4])/totalclient);stattree.SetItemText(cli2, cbuffer);
	//Maverick add MLDonkey Stats
	cbuffer.Format("mlDonkey: %i(%1.1f%%)",myStats[3],(double)100*myStats[3]/totalclient);stattree.SetItemText(cli3, cbuffer);
	//End Maverick
	cbuffer.Format("eDonkeyHybrid: %i(%1.1f%%)",myStats[4],(double)100*myStats[4]/totalclient);stattree.SetItemText(cli5, cbuffer);
	cbuffer.Format(GetResString(IDS_STATS_UNKNOWNCLIENT),myStats[0]);stattree.SetItemText(cli4, cbuffer);
d1137 1
a1137 1
		stattree.SetItemText(cliv[1][i], cbuffer);
d1169 1
a1169 1
		stattree.SetItemText(cliv[2][i], cbuffer);
d1199 1
a1199 1
		stattree.SetItemText(cliv[0][i], cbuffer);
d1485 1
a1485 1
		if(i == 0)
d1487 1
d1490 1
a1490 1
				m_pClientVersionExt[j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[0]);
d1495 20
a1514 3
		}
		else if(i == 1)
		{
d1517 1
a1517 1
				m_pClientVersion[j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[1]);
d1522 12
a1533 4
		}
		else if(i == 4)
		{
			for(j = 0; j < sizeof(m_pClientVersionHybrid)/sizeof(COptionTreeItemStatic*); j++)
d1535 4
a1538 4
				m_pClientVersionHybrid[j] = (COptionTreeItemStatic*)m_ctrlStatsList.InsertItem(new COptionTreeItemStatic, m_pClients[4]);
				m_pClientVersionHybrid[j]->SetLabelText(GetResString(IDS_FSTAT_WAITING));
				if(m_pClientVersionHybrid[j]->CreateStaticItem(0))
					m_pClientVersionHybrid[j]->SetTextColor(crEntryTextColor);
d1540 2
a1541 2
		}

d1602 3
a1604 3
				case 5:  m_pClients[0]->Expand(false);		break;
				case 6:	 m_pClients[1]->Expand(false);		break;
				case 7:  m_pClients[4]->Expand(false);		break;
d1660 12
a1671 14
	cli1= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientssoftware);
	cliv[0][0]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli1);
	cliv[0][1]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli1);
	cliv[0][2]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli1);
	cli2= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientssoftware);
	cliv[1][0]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli2);
	cliv[1][1]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli2);
	cliv[1][2]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli2);
	cli3= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientssoftware);
	cli4= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientssoftware); // Maverick
	cli5= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),h_clientssoftware); 
	cliv[2][0]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli5);
	cliv[2][1]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli5);
	cliv[2][2]= stattree.InsertItem(GetResString(IDS_FSTAT_WAITING),cli5);
d1716 3
a1718 2
	stattree.Expand(cli1,TVE_EXPAND);
	stattree.Expand(cli2,TVE_EXPAND);
d1752 3
a1754 3
			case 5:  strExpanded += m_pClients[0]->IsExpanded() ? '1' : '0';		break;
			case 6:	 strExpanded += m_pClients[1]->IsExpanded() ? '1' : '0';		break;
			case 7:	 strExpanded += m_pClients[4]->IsExpanded() ? '1' : '0';		break;
d1759 4
d1773 1
@


1.11
log
@look changes+
@
text
@d606 1
a606 5
	CMap<uint8, uint8, uint32, uint32> clientStatus;
	CMap<uint32, uint32, uint32, uint32> clientVersionEDonkey;
	CMap<uint32, uint32, uint32, uint32> clientVersionEDonkeyHybrid;
	CMap<uint8, uint8, uint32, uint32> clientVersionEMule;

d621 1
a621 1
	theApp.clientlist->GetStatistics(totalclient,myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEDonkeyHybrid,&clientVersionEMule);
d640 1
a640 1
	cbuffer.Format("%s: %i", GetResString(IDS_TRANSFERRING), clientStatus[DS_DOWNLOADING]);
d642 1
a642 1
	cbuffer.Format("%s: %i", GetResString(IDS_ONQUEUE), clientStatus[DS_ONQUEUE]);
d644 1
a644 1
	cbuffer.Format("%s: %i", GetResString(IDS_CONNECTING), clientStatus[DS_CONNECTING]);
d646 1
a646 1
	cbuffer.Format("%s: %i", GetResString(IDS_ASKING), clientStatus[DS_CONNECTED]);
d648 1
a648 1
	cbuffer.Format("%s: %i", GetResString(IDS_NONEEDEDPARTS), clientStatus[DS_NONEEDEDPARTS]);
d650 1
a650 1
	cbuffer.Format("%s: %i", GetResString(IDS_NOCONNECTLOW2LOW), clientStatus[DS_LOWTOLOWIP]);
d652 1
a652 1
	cbuffer.Format("%s: %i", GetResString(IDS_TOOMANYCONNS), clientStatus[DS_TOOMANYCONNS]);
d666 1
a666 1
		pos=clientVersionEDonkey.GetStartPosition();
d669 1
a669 1
			clientVersionEDonkey.GetNextAssoc(pos, ver, cnt);
d699 1
a699 1
        pos=clientVersionEDonkeyHybrid.GetStartPosition();
d702 1
a702 1
			clientVersionEDonkeyHybrid.GetNextAssoc(pos, ver, cnt);
d725 1
a725 1
		POSITION pos=clientVersionEMule.GetStartPosition();
d730 1
a730 1
		uint8	ver;
d734 1
a734 1
			clientVersionEMule.GetNextAssoc(pos, ver, cnt);
d983 1
a983 4
	CMap<uint8, uint8, uint32, uint32> clientStatus;
	CMap<uint32, uint32, uint32, uint32> clientVersionEDonkey;
	CMap<uint32, uint32, uint32, uint32> clientVersionEDonkeyHybrid;
	CMap<uint8, uint8, uint32, uint32> clientVersionEMule;
d985 1
a985 1
	theApp.clientlist->GetStatistics(totalclient,myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEDonkeyHybrid,&clientVersionEMule);
d998 7
a1004 7
	cbuffer.Format("%s: %i", GetResString(IDS_TRANSFERRING),		clientStatus[DS_DOWNLOADING]);		stattree.SetItemText(cls1, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_ONQUEUE),				clientStatus[DS_ONQUEUE]);			stattree.SetItemText(cls2, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_CONNECTING),			clientStatus[DS_CONNECTING]);		stattree.SetItemText(cls3, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_ASKING),				clientStatus[DS_CONNECTED]);		stattree.SetItemText(cls4, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_NONEEDEDPARTS),		clientStatus[DS_NONEEDEDPARTS]);	stattree.SetItemText(cls5, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_NOCONNECTLOW2LOW),	clientStatus[DS_LOWTOLOWIP]);		stattree.SetItemText(cls6, cbuffer);
	cbuffer.Format("%s: %i", GetResString(IDS_TOOMANYCONNS),		clientStatus[DS_TOOMANYCONNS]);		stattree.SetItemText(cls7, cbuffer);
d1017 1
a1017 1
        pos=clientVersionEDonkey.GetStartPosition();
d1020 1
a1020 1
			clientVersionEDonkey.GetNextAssoc(pos, ver, cnt);
d1049 1
a1049 1
        pos=clientVersionEDonkeyHybrid.GetStartPosition();
d1052 1
a1052 1
			clientVersionEDonkeyHybrid.GetNextAssoc(pos, ver, cnt);
d1074 1
a1074 2
		POSITION pos=clientVersionEMule.GetStartPosition();
		pos=clientVersionEMule.GetStartPosition();
d1078 1
a1078 1
		uint8	ver;
d1082 1
a1082 1
			clientVersionEMule.GetNextAssoc(pos, ver, cnt);
@


1.10
log
@*** empty log message ***
@
text
@d52 1
a52 1
	for(i = 0; i < 4; i++)
d57 2
a630 2
	cbuffer.Format("eDonkeyHybrid: %i(%1.1f%%)",myStats[4],(double)100*myStats[4]/totalclient);
	SetItemText(m_pClients[4], cbuffer);
d639 3
d682 20
d719 1
a719 1
			cbuffer.Format("v%i: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d722 1
a722 1
		SetItemText(m_pClientVersion[i], cbuffer);
d730 1
a730 1
		pos=clientVersionEMule.GetStartPosition();
d1001 1
d1036 19
d1071 1
a1071 1
			cbuffer.Format("v%i: %i (%1.1f%%)", topver, topcnt, (double)topcnt/totcnt*100);
d1074 1
a1074 1
		stattree.SetItemText(cliv[1][i], cbuffer);
d1411 11
d1484 5
a1488 4
				case 7:	 m_pQueueM->Expand(false);			break;
				case 8:	 m_pServerM->Expand(false);			break;
				case 9:	 m_pSharedFilesM->Expand(false);	break;
				case 10: m_pDownloadsTotalM->Expand(false);	break;
d1550 5
d1624 1
a1624 1
	for(int i = 0; i < 11; i++)
d1635 5
a1639 4
			case 7:	 strExpanded += m_pQueueM->IsExpanded() ? '1' : '0';			break;
			case 8:	 strExpanded += m_pServerM->IsExpanded() ? '1' : '0';			break;
			case 9:	 strExpanded += m_pSharedFilesM->IsExpanded() ? '1' : '0';		break;
			case 10: strExpanded += m_pDownloadsTotalM->IsExpanded() ? '1' : '0';	break;
@


1.9
log
@Hotfixes.
@
text
@d464 1
a464 1
	CastItoXBytes(ui64TotFileSize,buffer); 
d469 1
a469 1
	CastItoXBytes(ui64BytesTransfered,buffer); 
d475 1
a475 1
	CastItoXBytes(ui64TotBytesLeftToTransfer,buffer);
d479 1
a479 1
	CastItoXBytes(ui64TotNeededSpace,buffer); 
d484 1
a484 1
	CastItoXBytes(t_FreeBytes,buffer); 
d489 1
a489 1
		CastItoXBytes(ui64TotNeededSpace - t_FreeBytes,buffer);
d496 2
a497 2
	CastItoXBytes(theApp.stat_sessionReceivedBytes, buffer);
	CastItoXBytes(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded(),	buffer2);
d501 2
a502 2
	CastItoXBytes(theApp.stat_sessionSentBytes, buffer);
	CastItoXBytes(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded(), buffer2);
d536 1
a536 1
	CastSecondsToHM(running, buffer);
d552 1
a552 1
		CastSecondsToHM(running, buffer);
d562 1
a562 1
		CastSecondsToHM(running,buffer);
d588 1
a588 1
	CastItoXBytes(allsize,buffer);
d594 1
a594 1
		CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount(), buffer);
d824 1
a824 1
	CastItoXBytes(ui64TotFileSize,buffer); 
d829 1
a829 1
	CastItoXBytes(ui64BytesTransfered,buffer); 
d836 1
a836 1
	CastItoXBytes(ui64TotBytesLeftToTransfer,buffer);
d840 1
a840 1
	CastItoXBytes(ui64TotNeededSpace,buffer); 
d845 1
a845 1
	CastItoXBytes(t_FreeBytes,buffer); 
d850 1
a850 1
		CastItoXBytes(ui64TotNeededSpace - t_FreeBytes,buffer);
d857 2
a858 2
	CastItoXBytes(theApp.stat_sessionReceivedBytes, buffer);
	CastItoXBytes(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded(),	buffer2);
d862 2
a863 2
	CastItoXBytes(theApp.stat_sessionSentBytes, buffer);
	CastItoXBytes(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded(), buffer2);
d899 1
a899 1
	CastSecondsToHM(running, buffer);
d914 1
a914 1
		CastSecondsToHM(running, buffer);
d924 1
a924 1
		CastSecondsToHM(running,buffer);
d948 1
a948 1
	CastItoXBytes(allsize,buffer);
d954 1
a954 1
		CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount(), buffer);
d1205 1
a1205 1
		CastSecondsToHM(shownSecs,buffer);
@


1.8
log
@.26b port
@
text
@d441 1
a441 1
	char buffer2[100];
d464 2
a465 2
	
	cbuffer.Format(GetResString(IDS_DWTOT_TSD),CastItoXBytes(ui64TotFileSize) ); 
d469 1
a469 1
	
d472 1
a472 1
	cbuffer.Format(GetResString(IDS_DWTOT_TCS),CastItoXBytes(ui64BytesTransfered),fPercent); 
d475 2
a476 1
	cbuffer.Format(GetResString(IDS_DWTOT_TSL),CastItoXBytes(ui64TotBytesLeftToTransfer)); 
d479 2
a480 2
	
	cbuffer.Format(GetResString(IDS_DWTOT_TSN),CastItoXBytes(ui64TotNeededSpace)); 
d484 2
a485 1
	sprintf(buffer2,GetResString(IDS_DWTOT_FS),CastItoXBytes(t_FreeBytes));
d489 2
a490 1
		cbuffer.Format("%s (you need to free %s!)",buffer2,CastItoXBytes(ui64TotNeededSpace - t_FreeBytes));
d496 3
a498 1
	cbuffer.Format(GetResString(IDS_STATS_DDATA), CastItoXBytes(theApp.stat_sessionReceivedBytes), CastItoXBytes(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded()));
d500 4
a503 1
	cbuffer.Format(GetResString(IDS_STATS_UDATA), CastItoXBytes(theApp.stat_sessionSentBytes), CastItoXBytes(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded()));
d536 2
a537 1
	cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME), CastSecondsToHM(running));
d552 2
a553 1
		cbuffer.Format(GetResString(IDS_TRANSFERTIME),CastSecondsToHM(running));
d562 2
a563 1
		cbuffer.Format(GetResString(IDS_STATS_CONNECTEDSINCE),CastSecondsToHM(running));
d588 1
a588 1
	
d590 1
a590 1
	cbuffer.Format(GetResString(IDS_SF_SIZE), CastItoXBytes(allsize));
d594 1
a594 1
		cbuffer=CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount());
d596 5
a600 2
		cbuffer="-";
	cbuffer.Format(GetResString(IDS_SF_AVERAGESIZE),cbuffer);
d801 1
a801 1
	char buffer2[100];
d824 2
a825 2
	
	cbuffer.Format(GetResString(IDS_DWTOT_TSD),CastItoXBytes(ui64TotFileSize)); 
d829 1
a829 1
	
d832 1
a832 1
	cbuffer.Format(GetResString(IDS_DWTOT_TCS),CastItoXBytes(ui64BytesTransfered) ,fPercent); 
d836 2
a837 2
	
	cbuffer.Format(GetResString(IDS_DWTOT_TSL),CastItoXBytes(ui64TotBytesLeftToTransfer)); 
d840 2
a841 2
	
	cbuffer.Format(GetResString(IDS_DWTOT_TSN),CastItoXBytes(ui64TotNeededSpace)); 
d845 2
a846 2
	
	sprintf(buffer2,GetResString(IDS_DWTOT_FS),CastItoXBytes(t_FreeBytes));
d850 2
a851 2
		
		cbuffer.Format("%s (you need to free %s!)",buffer2,CastItoXBytes(ui64TotNeededSpace - t_FreeBytes));
d857 3
a859 1
	cbuffer.Format(GetResString(IDS_STATS_DDATA), CastItoXBytes(theApp.stat_sessionReceivedBytes), CastItoXBytes(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded()));
d861 4
a864 2
	
	cbuffer.Format(GetResString(IDS_STATS_UDATA), CastItoXBytes(theApp.stat_sessionSentBytes), CastItoXBytes(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded()));
d899 2
a900 1
	cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME),CastSecondsToHM(running));
d914 2
a915 1
		cbuffer.Format(GetResString(IDS_TRANSFERTIME), CastSecondsToHM(running));
d924 2
a925 1
		cbuffer.Format(GetResString(IDS_STATS_CONNECTEDSINCE),CastSecondsToHM(running));
d948 1
a948 1
	
d950 1
a950 1
	cbuffer.Format(GetResString(IDS_SF_SIZE),CastItoXBytes(allsize) );
d954 1
a954 1
		cbuffer=CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount());
d956 5
a960 2
		cbuffer="-";
	cbuffer.Format(GetResString(IDS_SF_AVERAGESIZE),cbuffer);
d1204 2
a1205 1
		CString buffer=CastSecondsToHM(shownSecs);
@


1.7
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@d441 1
a441 1
	char buffer[100];char buffer2[100];
d464 2
a465 2
	CastItoXBytes(ui64TotFileSize,buffer); 
	cbuffer.Format(GetResString(IDS_DWTOT_TSD),buffer); 
d469 1
a469 1
	CastItoXBytes(ui64BytesTransfered,buffer); 
d472 1
a472 1
	cbuffer.Format(GetResString(IDS_DWTOT_TCS),buffer,fPercent); 
d475 1
a475 2
	CastItoXBytes(ui64TotBytesLeftToTransfer,buffer);
	cbuffer.Format(GetResString(IDS_DWTOT_TSL),buffer); 
d478 2
a479 2
	CastItoXBytes(ui64TotNeededSpace,buffer); 
	cbuffer.Format(GetResString(IDS_DWTOT_TSN),buffer); 
d483 1
a483 2
	CastItoXBytes(t_FreeBytes,buffer); 
	sprintf(buffer2,GetResString(IDS_DWTOT_FS),buffer);
d487 1
a487 2
		CastItoXBytes(ui64TotNeededSpace - t_FreeBytes,buffer);
		cbuffer.Format("%s (you need to free %s!)",buffer2,buffer);
d493 1
a493 3
	CastItoXBytes(theApp.stat_sessionReceivedBytes, buffer);
	CastItoXBytes(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded(),	buffer2);
	cbuffer.Format(GetResString(IDS_STATS_DDATA), buffer, buffer2);
d495 1
a495 4

	CastItoXBytes(theApp.stat_sessionSentBytes, buffer);
	CastItoXBytes(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded(), buffer2);
	cbuffer.Format(GetResString(IDS_STATS_UDATA), buffer, buffer2);
d528 1
a528 2
	CastSecondsToHM(running, buffer);
	cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME), buffer);
d543 1
a543 2
		CastSecondsToHM(running, buffer);
		cbuffer.Format(GetResString(IDS_TRANSFERTIME), buffer);
d552 1
a552 2
		CastSecondsToHM(running,buffer);
		cbuffer.Format(GetResString(IDS_STATS_CONNECTEDSINCE),buffer);
d577 1
a577 1
	CastItoXBytes(allsize,buffer);
d579 1
a579 1
	cbuffer.Format(GetResString(IDS_SF_SIZE), buffer);
d583 1
a583 1
		CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount(), buffer);
d585 2
a586 5
	{
		buffer[0] = '-';
		buffer[1] = 0;
	}
	cbuffer.Format(GetResString(IDS_SF_AVERAGESIZE),buffer);
d787 1
a787 1
	char buffer[100];char buffer2[100];
d810 2
a811 2
	CastItoXBytes(ui64TotFileSize,buffer); 
	cbuffer.Format(GetResString(IDS_DWTOT_TSD),buffer); 
d815 1
a815 1
	CastItoXBytes(ui64BytesTransfered,buffer); 
d818 1
a818 1
	cbuffer.Format(GetResString(IDS_DWTOT_TCS),buffer,fPercent); 
d822 2
a823 2
	CastItoXBytes(ui64TotBytesLeftToTransfer,buffer);
	cbuffer.Format(GetResString(IDS_DWTOT_TSL),buffer); 
d826 2
a827 2
	CastItoXBytes(ui64TotNeededSpace,buffer); 
	cbuffer.Format(GetResString(IDS_DWTOT_TSN),buffer); 
d831 2
a832 2
	CastItoXBytes(t_FreeBytes,buffer); 
	sprintf(buffer2,GetResString(IDS_DWTOT_FS),buffer);
d836 2
a837 2
		CastItoXBytes(ui64TotNeededSpace - t_FreeBytes,buffer);
		cbuffer.Format("%s (you need to free %s!)",buffer2,buffer);
d843 1
a843 3
	CastItoXBytes(theApp.stat_sessionReceivedBytes, buffer);
	CastItoXBytes(theApp.stat_sessionReceivedBytes+theApp.glob_prefs->GetTotalDownloaded(),	buffer2);
	cbuffer.Format(GetResString(IDS_STATS_DDATA), buffer, buffer2);
d845 2
a846 4

	CastItoXBytes(theApp.stat_sessionSentBytes, buffer);
	CastItoXBytes(theApp.stat_sessionSentBytes+theApp.glob_prefs->GetTotalUploaded(), buffer2);
	cbuffer.Format(GetResString(IDS_STATS_UDATA), buffer, buffer2);
d881 1
a881 2
	CastSecondsToHM(running, buffer);
	cbuffer.Format(GetResString(IDS_STATS_AVEUPTIME), buffer);
d895 1
a895 2
		CastSecondsToHM(running, buffer);
		cbuffer.Format(GetResString(IDS_TRANSFERTIME), buffer);
d904 1
a904 2
		CastSecondsToHM(running,buffer);
		cbuffer.Format(GetResString(IDS_STATS_CONNECTEDSINCE),buffer);
d927 1
a927 1
	CastItoXBytes(allsize,buffer);
d929 1
a929 1
	cbuffer.Format(GetResString(IDS_SF_SIZE),buffer );
d933 1
a933 1
		CastItoXBytes((uint64)allsize/theApp.sharedfiles->GetCount(), buffer);
d935 2
a936 5
	{
		buffer[0] = '-';
		buffer[1] = 0;
	}
	cbuffer.Format(GetResString(IDS_SF_AVERAGESIZE),buffer);
d1180 1
a1180 2
		char buffer[100];
		CastSecondsToHM(shownSecs,buffer);
@


1.6
log
@Unnesesary call to GetStatistics removed , code rearranged a bit to put breakpoints easily .
@
text
@d371 13
a659 2
		POSITION pos=clientVersionEDonkey.GetStartPosition();
		pos=clientVersionEDonkey.GetStartPosition();
d665 3
d679 14
d974 1
a974 1
	cbuffer.Format("eDonkey: %i(%1.1f%%)",myStats[1],(double)100*myStats[1]/totalclient);stattree.SetItemText(cli2, cbuffer);
d993 1
a993 2
		POSITION pos=clientVersionEDonkey.GetStartPosition();
		pos=clientVersionEDonkey.GetStartPosition();
d999 2
d1004 13
@


1.5
log
@Statistics for Hybrid client fixed
@
text
@d599 1
a599 1
	theApp.clientlist->GetStatistics(totalclient, myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEDonkeyHybrid,&clientVersionEMule);
d606 1
a606 1
	cbuffer.Format("Old MLDonkey: %i(%1.1f%%)",myStats[3],(double)100*myStats[3]/totalclient);stattree.SetItemText(cli3, cbuffer);
@


1.4
log
@Hybrid client and CDonkey detection
@
text
@d604 1
d616 2
@


1.3
log
@*** empty log message ***
@
text
@d592 2
a593 1
	CMap<uint8, uint8, uint32, uint32> clientVersionEDonkey;
d599 1
a599 1
	theApp.clientlist->GetStatistics(totalclient, myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEMule);
d609 1
a609 1
	theApp.clientlist->GetStatistics(totalclient,myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEMule);
d649 1
a649 1
		uint8	ver;
d934 2
a935 1
	CMap<uint8, uint8, uint32, uint32> clientVersionEDonkey;
d938 1
a938 1
	theApp.clientlist->GetStatistics(totalclient,myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEMule);
d967 1
a967 1
		uint8	ver;
@


1.3.4.1
log
@initial upgrade to .26
@
text
@a370 13
float CStatisticsDlg::GetMaxConperFiveModifier(){
	//This is a alpha test.. Will clean up for b version.
	int test;
	test = theApp.listensocket->GetOpenSockets() - averageconnections ;
	if ( test < 1 )
		return 1;
	float test3 = 25*(float)theApp.glob_prefs->GetMaxConperFive()/(float)10;
	if ( (float)test > test3 )
		return 0;
	float test2 = (1-((float)test/test3));
	return test2;
}

d592 2
a593 2
	CMap<uint32, uint32, uint32, uint32> clientVersionEDonkey;
	CMap<uint32, uint32, uint32, uint32> clientVersionEMule;
d648 1
a648 1
		uint32	ver;
d679 1
a679 1
		uint32	ver;
d933 2
a934 2
	CMap<uint32, uint32, uint32, uint32> clientVersionEDonkey;
	CMap<uint32, uint32, uint32, uint32> clientVersionEMule;
d965 1
a965 1
		uint32	ver;
d996 1
a996 1
		uint32	ver;
@


1.3.4.2
log
@fixed versions in statistics
@
text
@d606 1
a606 2
	CMap<uint32, uint32, uint32, uint32> clientVersionEDonkeyHybrid;
	CMap<uint8, uint8, uint32, uint32> clientVersionEMule;
d611 1
a611 2

	theApp.clientlist->GetStatistics(totalclient, myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEDonkeyHybrid, &clientVersionEMule);
d616 1
a616 1
	cbuffer.Format("eDonkey: %i(%1.1f%%)",(myStats[1]+myStats[4]),(double)100*(myStats[1]+myStats[4])/totalclient);stattree.SetItemText(cli2, cbuffer);
d621 1
a621 1
	theApp.clientlist->GetStatistics(totalclient,myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEDonkeyHybrid, &clientVersionEMule);
d627 1
a627 1
	cbuffer.Format("eDonkey: %i(%1.1f%%)",(myStats[1]+myStats[4]),(double)100*(myStats[1]+myStats[4])/totalclient);
d656 2
a662 3

        POSITION pos;
		pos=clientVersionEDonkey.GetStartPosition();
d674 1
a674 15

        pos=clientVersionEDonkeyHybrid.GetStartPosition();
		while(pos)
		{
			clientVersionEDonkeyHybrid.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}

        lasttop=currtop;
d692 1
a692 1
		uint8	ver;
d947 1
a947 2
	CMap<uint32, uint32, uint32, uint32> clientVersionEDonkeyHybrid;
	CMap<uint8, uint8, uint32, uint32> clientVersionEMule;
d949 1
a949 1
	theApp.clientlist->GetStatistics(totalclient,myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEDonkeyHybrid, &clientVersionEMule);
d954 1
a954 1
	cbuffer.Format("eDonkey: %i(%1.1f%%)",(myStats[1]+myStats[4]),(double)100*(myStats[1]+myStats[4])/totalclient);stattree.SetItemText(cli2, cbuffer);
d973 2
a974 1
		POSITION pos;
a979 2

        pos=clientVersionEDonkey.GetStartPosition();
a990 13

        pos=clientVersionEDonkeyHybrid.GetStartPosition();
		while(pos)
		{
			clientVersionEDonkeyHybrid.GetNextAssoc(pos, ver, cnt);
			totcnt+=cnt;
			if(currtop<cnt && cnt<lasttop)
			{
				topver=ver;
				topcnt=cnt;
				currtop=cnt;
			}
		}
d1009 1
a1009 1
		uint8	ver;
@


1.3.2.1
log
@updating this branch...
@
text
@@


1.2
log
@final port to .25b!
@
text
@d33 2
d70 1
d96 3
a98 1
BOOL CStatisticsDlg::OnInitDialog(){
d227 4
d233 4
a236 1
void CStatisticsDlg::SetupLegend( int ResIdx, int ElmtIdx, int legendNr){
d255 2
d261 2
d298 2
d304 4
a307 1
void CStatisticsDlg::SetCurrentRate(float uploadrate, float downloadrate) {
d349 2
d353 4
a356 1
void CStatisticsDlg::UpdateConnectionsStatus(){
d367 2
d371 3
a373 1
void CStatisticsDlg::RecordRate() {
d382 3
a384 2
	while ((int)downrateHistory.size()>(int)( theApp.glob_prefs->GetStatsAverageMinutes()*60)) downrateHistory.pop_back();
	while ((int)uprateHistory.size()>(int)( theApp.glob_prefs->GetStatsAverageMinutes()*60)) uprateHistory.pop_back();
d386 1
d392 2
d410 2
d424 2
d759 2
d765 2
d1075 2
d1079 3
a1081 1
float CStatisticsDlg::GetAvgDownloadRate(int averageType) {
d1095 4
d1101 4
a1104 1
float CStatisticsDlg::GetAvgUploadRate(int averageType) {
d1118 3
d1125 2
d1132 2
d1136 4
a1139 1
void CStatisticsDlg::ShowInterval() {
d1165 2
d1169 4
a1172 1
void CStatisticsDlg::SetARange(bool SetDownload,int maxValue){
d1182 2
d1186 4
a1189 1
void CStatisticsDlg::Localize(){
d1220 2
d1240 2
d1394 2
d1400 2
d1500 2
d1506 2
d1509 2
d1514 2
d1537 4
@


1.1
log
@*** empty log message ***
@
text
@d558 17
a574 2
	theApp.clientlist->GetStatistics(myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEMule);
	cbuffer.Format("eMule: %i",myStats[2]);
d576 1
a576 1
	cbuffer.Format("eDonkey: %i",myStats[1]);
d579 1
a579 1
	cbuffer.Format("MLDonkey: %i",myStats[3]);
d893 7
a899 6
	//--- :xrmb ---

// get clientversion-counts
	theApp.clientlist->GetStatistics(myStats, &clientStatus, &clientVersionEDonkey, &clientVersionEMule);
	cbuffer.Format("eMule: %i",myStats[2]);stattree.SetItemText(cli1, cbuffer);
	cbuffer.Format("eDonkey: %i",myStats[1]);stattree.SetItemText(cli2, cbuffer);
d901 1
a901 1
	cbuffer.Format("mlDonkey: %i",myStats[3]);stattree.SetItemText(cli3, cbuffer);
@

