head	1.90;
access;
symbols
	PublicRelease_1_2e:1.89
	Interim_Release_1-2e_RC1:1.89
	PublicRelease_1_2d:1.86
	Interim_Release_1-2d_RC1:1.86
	Interim_Release_1-2d_beta1:1.84
	PublicRelease_1_2c:1.81
	Interim_Release_1-2c_RC1:1.81
	Interim_Release_1-2c_beta1:1.78
	PublicRelease_1_2b:1.78
	Interim_Release_1-2b_RC1:1.78
	PublicRelease_1_2a:1.78
	Interim_Release_1-2a_RC1:1.76
	Interim_Release_1-2a_beta2:1.73
	Interim_Release_1-2a_beta1:1.72
	PublicRelease_1_2:1.70
	Interim_Release_1-2_RC1:1.70
	Interim_Release_1-2_beta1:1.70
	PublicRelease_1_1g:1.69
	Interim_Release_1-1g_RC3:1.69
	Interim_Release_1-1g_RC2:1.69
	Interim_Release_1-1g_RC1:1.69
	Interim_Release_1-1g_beta2:1.66
	Interim_Release_1-1g_beta1:1.66
	PublicRelease_1_1f:1.66
	Interim_Release_1-1f_RC1:1.66
	PublicRelease_1_1e:1.66
	Interim_Release_1-1e_RC2:1.66
	Interim_Release_1-1e_RC1:1.65
	Interim_Release_1-1e_beta1:1.62
	PublicRelease_1_1d:1.55
	Interim_Release_1-1d_RC1:1.55
	PublicRelease_1_1c:1.55
	Interim_Release_1-1c_RC1:1.55
	Interim_Release_1-1c_beta2:1.55
	Interim_Release_1-1c_beta1:1.55
	PublicRelease_1_1b:1.55
	Interim_Release_1-1b_RC1:1.55
	PublicRelease_1_1a:1.55
	Interim_Release_1-1a_RC2:1.55
	Interim_Release_1-1a_RC1:1.55
	Interim_Release_1-1a_beta2:1.55
	Interim_Release_1-1a_beta1:1.55
	PublicRelease_1_1:1.55
	Interim_Release_1-1_beta1:1.55
	PublicRelease_1o:1.55
	Interim_Release_1o_RC1:1.55
	Interim_Release_1o_beta1:1.55
	PublicRelease_1n:1.55
	Interim_Release_1n_RC2:1.55
	Interim_Release_1n_RC1:1.55
	Interim_Release_1n_beta2:1.55
	Interim_Release_1n_beta1:1.51
	PublicRelease_1m:1.45
	Interim_Release_1m_beta1:1.45
	PublicRelease_1l:1.42
	Interim_Release_1l_RC3:1.42
	Interim_Release_1l_RC2:1.42
	Interim_Release_1l_RC1:1.41
	Interim_Release_1l_beta2:1.41
	Interim_Release_1l_beta1:1.41
	PublicRelease_1k:1.37
	Interim_Release_1k_RC4:1.37
	Interim_1k_RC3:1.37
	Interim_1k_RC2:1.36
	Interim_Release_1k_RC1:1.36
	Interim_Release_1k_beta5:1.36
	Intrerim_Release_1k_beta4:1.36
	Interim_Release_1k_beta1:1.34
	PublicRelease_1j:1.31
	Interim_Release_1J_RC3:1.31
	Interim_Release_1j_RC3:1.31
	Interim_Release_1j_RC2:1.31
	Interim_Release_1j_RC1:1.31
	Interim_Release_1j_beta2:1.31
	Interim_Release_1j_beta1:1.31
	PublicRelease_1i:1.27
	Interim_Release_1i_RC6:1.27
	Interim_Release_1i_RC3:1.26
	Interim_Release_1i_RC2:1.26
	Interim_Release_1i_RC1:1.26
	Interim_Release_1i_beta3:1.26
	Interim_Release_1i_beta2:1.26
	Interim_Release_1i_beta1:1.24
	PublicRelease_1h:1.21
	Interim_Release_1h_rc2:1.21
	Interim_Release_1h_RC1:1.21
	Interim_Release_1h_beta2:1.21
	Interim_Release_1h_beta1_now:1.20
	Interim_Release_1h_beta1:1.20
	PublicRelease_1g:1.20
	Interim_Release_1g_RC6_Final:1.20
	Interim_Release_1g_RC6:1.20
	Interim_Release_1g_RC5:1.20
	Interim_Release_1g_RC4:1.19
	Interim_Release_1g_RC3:1.19
	Interim_Release_1g_beta2:1.16
	Interim_Release_1g_beta1:1.15
	Interim_Release_1f_RC4:1.14
	Interim_Release_1f_RC3:1.14
	Interim_Release_1f_RC2:1.13
	Interim_Release_1f_RC:1.12
	Interim_Release_1f_beta2:1.12
	Interim_Release_1f_beta1:1.11
	PublicRelease_1e:1.10
	Interim_Release_1e_RC2:1.10
	Interim_Release_1e_RC:1.10
	Interim_Release_1e_beta3:1.10
	Interim_Release_1e_beta2:1.10
	Interim_Release_1e_beta2_before_kuchin:1.10
	Interim_Release_1e_beta1:1.10
	PublicRelease_1c:1.10
	featurestest:1.10.0.4
	Interim_Release_1c_RC:1.10
	Interim_Release_1c_beta2:1.10
	Interim_Release_1c_beta1:1.10
	threaded_downloadqueue:1.10.0.2
	PublicRelease_1b:1.9
	Interim_Release_1b_beta2:1.9
	Interim_Release_1b_beta1:1.9
	proxydeadlake:1.9.0.4
	PublicRelease_1a:1.9
	Interim_Release_1a_beta2:1.9
	BerkeleyDb:1.9.0.2
	Interim_Release_1a_beta1:1.9
	PublicRelease_1:1.9
	goldfish:1.9
	eMulePlus_1_RC2:1.8
	eMulePlus_26b_1RC1:1.8
	PreRelease_26b_i0e:1.8
	before_26d_merge:1.7
	Interim_Release_26b_i0d:1.6
	Interim_Release_26b_i0c:1.6
	Interim_Release_26b_i0b:1.6
	Interim_Release_26b_i0a:1.6
	systraydlg:1.3.0.6
	plus26based:1.3.0.4
	Interim_Release_25b_i0b:1.3
	Proxy_Dev:1.3
	Interim_Release_25b_i0a:1.3.2.1
	proxytest:1.3.2.1.0.2
	official_sockets:1.3.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.90
date	2010.05.13.04.48.49;	author aw3;	state Exp;
branches;
next	1.89;

1.89
date	2009.01.04.05.30.59;	author aw3;	state Exp;
branches;
next	1.88;

1.88
date	2008.11.12.03.52.08;	author aw3;	state Exp;
branches;
next	1.87;

1.87
date	2008.07.01.04.40.48;	author aw3;	state Exp;
branches;
next	1.86;

1.86
date	2008.03.09.19.18.51;	author aw3;	state Exp;
branches;
next	1.85;

1.85
date	2008.03.08.21.56.27;	author eklmn;	state Exp;
branches;
next	1.84;

1.84
date	2008.02.05.06.03.05;	author aw3;	state Exp;
branches;
next	1.83;

1.83
date	2007.12.14.21.11.17;	author kush_eplus;	state Exp;
branches;
next	1.82;

1.82
date	2007.11.18.04.55.45;	author aw3;	state Exp;
branches;
next	1.81;

1.81
date	2007.08.08.01.43.28;	author aw3;	state Exp;
branches;
next	1.80;

1.80
date	2007.07.08.22.31.18;	author kush_eplus;	state Exp;
branches;
next	1.79;

1.79
date	2007.07.07.04.07.37;	author aw3;	state Exp;
branches;
next	1.78;

1.78
date	2006.10.08.13.54.36;	author kush_eplus;	state Exp;
branches;
next	1.77;

1.77
date	2006.10.06.20.25.44;	author kush_eplus;	state Exp;
branches;
next	1.76;

1.76
date	2006.09.08.22.56.56;	author kush_eplus;	state Exp;
branches;
next	1.75;

1.75
date	2006.07.02.15.48.02;	author kush_eplus;	state Exp;
branches;
next	1.74;

1.74
date	2006.06.25.10.54.24;	author kush_eplus;	state Exp;
branches;
next	1.73;

1.73
date	2006.06.04.14.28.11;	author kush_eplus;	state Exp;
branches;
next	1.72;

1.72
date	2006.04.09.15.18.10;	author kush_eplus;	state Exp;
branches;
next	1.71;

1.71
date	2006.03.25.12.17.53;	author kush_eplus;	state Exp;
branches;
next	1.70;

1.70
date	2006.01.06.20.05.54;	author kush_eplus;	state Exp;
branches;
next	1.69;

1.69
date	2005.11.28.03.11.13;	author aw3;	state Exp;
branches;
next	1.68;

1.68
date	2005.11.27.22.11.47;	author eklmn;	state Exp;
branches;
next	1.67;

1.67
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.66;

1.66
date	2005.07.04.23.07.16;	author katsyonak;	state Exp;
branches;
next	1.65;

1.65
date	2005.06.18.01.02.45;	author aw3;	state Exp;
branches;
next	1.64;

1.64
date	2005.06.14.11.14.34;	author katsyonak;	state Exp;
branches;
next	1.63;

1.63
date	2005.06.11.00.40.35;	author katsyonak;	state Exp;
branches;
next	1.62;

1.62
date	2005.05.15.09.02.50;	author katsyonak;	state Exp;
branches;
next	1.61;

1.61
date	2005.05.01.22.01.30;	author katsyonak;	state Exp;
branches;
next	1.60;

1.60
date	2005.04.21.03.44.45;	author katsyonak;	state Exp;
branches;
next	1.59;

1.59
date	2005.04.14.13.27.55;	author katsyonak;	state Exp;
branches;
next	1.58;

1.58
date	2005.04.12.16.56.34;	author dongato;	state Exp;
branches;
next	1.57;

1.57
date	2005.04.11.01.15.34;	author aw3;	state Exp;
branches;
next	1.56;

1.56
date	2005.04.10.22.54.20;	author katsyonak;	state Exp;
branches;
next	1.55;

1.55
date	2004.07.29.02.13.01;	author katsyonak;	state Exp;
branches;
next	1.54;

1.54
date	2004.07.27.23.08.44;	author katsyonak;	state Exp;
branches;
next	1.53;

1.53
date	2004.07.27.15.19.39;	author katsyonak;	state Exp;
branches;
next	1.52;

1.52
date	2004.07.20.12.49.58;	author katsyonak;	state Exp;
branches;
next	1.51;

1.51
date	2004.07.19.12.54.56;	author katsyonak;	state Exp;
branches;
next	1.50;

1.50
date	2004.07.18.19.57.42;	author katsyonak;	state Exp;
branches;
next	1.49;

1.49
date	2004.07.14.21.07.54;	author katsyonak;	state Exp;
branches;
next	1.48;

1.48
date	2004.07.13.16.29.32;	author katsyonak;	state Exp;
branches;
next	1.47;

1.47
date	2004.07.13.12.55.38;	author katsyonak;	state Exp;
branches;
next	1.46;

1.46
date	2004.07.06.16.46.02;	author katsyonak;	state Exp;
branches;
next	1.45;

1.45
date	2004.06.22.03.23.14;	author katsyonak;	state Exp;
branches;
next	1.44;

1.44
date	2004.06.22.02.21.30;	author katsyonak;	state Exp;
branches;
next	1.43;

1.43
date	2004.06.21.23.11.19;	author katsyonak;	state Exp;
branches;
next	1.42;

1.42
date	2004.06.02.02.58.16;	author katsyonak;	state Exp;
branches;
next	1.41;

1.41
date	2004.04.30.09.06.13;	author katsyonak;	state Exp;
branches;
next	1.40;

1.40
date	2004.04.18.19.26.33;	author katsyonak;	state Exp;
branches;
next	1.39;

1.39
date	2004.04.13.01.01.35;	author katsyonak;	state Exp;
branches;
next	1.38;

1.38
date	2004.04.12.18.08.15;	author katsyonak;	state Exp;
branches;
next	1.37;

1.37
date	2004.04.04.13.19.48;	author syrus77;	state Exp;
branches;
next	1.36;

1.36
date	2004.03.13.05.33.36;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2004.03.09.02.17.37;	author katsyonak;	state Exp;
branches;
next	1.34;

1.34
date	2004.02.17.22.02.51;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2004.02.12.04.52.07;	author katsyonak;	state Exp;
branches;
next	1.32;

1.32
date	2004.02.08.21.10.51;	author katsyonak;	state Exp;
branches;
next	1.31;

1.31
date	2003.12.24.01.21.13;	author katsyonak;	state Exp;
branches;
next	1.30;

1.30
date	2003.12.23.19.03.21;	author katsyonak;	state Exp;
branches;
next	1.29;

1.29
date	2003.12.23.15.35.17;	author katsyonak;	state Exp;
branches;
next	1.28;

1.28
date	2003.12.18.13.35.30;	author katsyonak;	state Exp;
branches;
next	1.27;

1.27
date	2003.11.26.11.21.08;	author katsyonak;	state Exp;
branches;
next	1.26;

1.26
date	2003.10.20.13.19.59;	author morevit;	state Exp;
branches;
next	1.25;

1.25
date	2003.10.05.17.53.56;	author morevit;	state Exp;
branches;
next	1.24;

1.24
date	2003.09.27.14.59.38;	author dongato;	state Exp;
branches;
next	1.23;

1.23
date	2003.09.22.16.26.20;	author morevit;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.20.15.39.30;	author morevit;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.23.16.28.38;	author bond006;	state Exp;
branches;
next	1.20;

1.20
date	2003.07.09.16.14.21;	author netwolf1;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.19.16.48.04;	author partyckip;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.15.09.10.04;	author partyckip;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.10.09.36.45;	author kuchin;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.08.07.36.57;	author partyckip;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.26.22.14.03;	author partyckip;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.20.20.46.27;	author netwolf1;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.13.17.59.38;	author lord_kiron;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.08.17.08.25;	author netwolf1;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.30.17.26.16;	author lord_kiron;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.14.16.24.18;	author partyckip;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2003.02.20.14.29.01;	author dongato;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.17.19.17.11;	author dongato;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.16.22.01.46;	author lord_kiron;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.10.09.12.54;	author obaldin;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.09.22.04.26;	author obaldin;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.09.18.39.41;	author kuchin;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.24.22.07.48;	author maverick65;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2003.01.22.17.50.34;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.18;	author cax2;	state Exp;
branches;
next	;

1.3.2.1
date	2003.01.28.16.54.11;	author cax2;	state Exp;
branches;
next	;

1.3.4.1
date	2003.02.05.01.58.41;	author obaldin;	state Exp;
branches;
next	;

1.10.4.1
date	2003.03.23.06.22.02;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.90
log
@Added an option to bind to specific network interface (from original) {Zom}.
@
text
@//this file is part of eMule
//Copyright (C)2002-2007 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

//A lot of documentation for the IRC protocol within this code came
//directly from http://www.irchelp.org/irchelp/rfc/rfc2812.txt
//Much of it may never be used, but it's here just in case..

#include "stdafx.h"
#include "IrcMain.h"
#include "IrcSocket.h"
#include "emule.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

#define EP_IRC_VERSION		_T("ePlus") CURRENT_VERSION_LONG Irc_Version

CIrcMain::CIrcMain(void)
{
	m_pIrcSocket = NULL;
	m_pWndIRC = 0;
}

CIrcMain::~CIrcMain(void)
{
}

void CIrcMain::PreParseMessage(const char *pcBuf, int iLen)
{
	CString	strMessage;
	int		iIdx;

	m_strPreParseBufA.Append(pcBuf, iLen);
	for (;;)
	{
		if ((iIdx = m_strPreParseBufA.Find('\n')) < 0)
			break;
		if (((iLen = iIdx) != 0) && (m_strPreParseBufA.GetString()[iLen - 1] == '\r'))
			iLen--;
		MB2Str(cfUTF8, &strMessage, m_strPreParseBufA.GetString(), iLen);
		ParseMessage(strMessage);
		m_strPreParseBufA.Delete(0, iIdx + 1);
	}
}

void CIrcMain::ParseMessage(CString strRawMessage)
{
	if (strRawMessage.GetLength() < 6)
	{
		// TODO : We probably should disconnect here as I don't know of anything that should
		// come from the server this small
		return;
	}

	if (strRawMessage.Left(6) == _T("PING :"))
	{
		// If the server pinged us, we must pong back or get disconnected
		// Anything after the ":" must be sent back or it will fail
		m_pIrcSocket->SendString(_T("PONG ") + strRawMessage.Mid(6));
		m_pWndIRC->AddMessage(_T(""), _T(""), RGB(0, 147, 0), _T("PING?/PONG"));
		return;
	}

	CString	strSource, strCommand, strTarget, strTarget2, strMessage, strTemp;
	int		iSourceIndex, iCommandIndex, iTargetIndex, iMessageIndex, iTarget2Index, iCommand;

	// Check if there is a source which always ends with a "!"
	// Messages without a source is usually a server message
	iSourceIndex = strRawMessage.Find(_T('!'));
	if (strRawMessage.Left(1) == _T(":"))
	{
		// If the message starts with a ":", the first space must be the beginning of the command
		// Although, it seems some servers are miscofigured
		iCommandIndex = strRawMessage.Find(_T(' '));
	}
	else
	{
		// If the message doesn't start with a ":", the first word is the command
		iCommandIndex = 0;
	}
	// The second space is the beginning of the target or message
	iTargetIndex = strRawMessage.Find(_T(' '), iCommandIndex + 1);
	if (iTargetIndex < 0)
	{
		AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("SMIRC Error: Received a message with no target or message."));
		return;
	}
	// This will pull out the command
	if (iCommandIndex == 0)
	{
		// Command is the first word. Strange as I don't see this in any standard
		strCommand = strRawMessage.Mid(iCommandIndex, iTargetIndex - iCommandIndex);
	}
	else
	{
		// Command is where it should be
		strCommand = strRawMessage.Mid(iCommandIndex + 1, iTargetIndex - iCommandIndex - 1);
	}
	if (iSourceIndex < iCommandIndex && iSourceIndex > 0)
	{
		// Get source and IP of source
		strSource = strRawMessage.Mid(1, iSourceIndex - 1);
		iMessageIndex = strRawMessage.Find(_T(' '), iTargetIndex + 1);
		if (iMessageIndex > iSourceIndex)
		{
			// Get target and message
			strTarget = strRawMessage.Mid(iTargetIndex + 1, iMessageIndex - iTargetIndex - 1);
			strMessage = strRawMessage.Mid(iMessageIndex);
		}
		else
		{
			//Get target
			strTarget = strRawMessage.Mid(iTargetIndex + 1, strRawMessage.GetLength() - iTargetIndex - 1);
		}
		// I'm not sure why some messages have different formats, but this cleans them up
		if (strTarget[0] == _T(':'))
			strTarget = strTarget.Mid(1);
		if (strMessage[0] == _T(':'))
			strMessage = strMessage.Mid(1);
		if (strTarget.Left(2) == _T(" :"))
			strTarget = strTarget.Mid(2);
		if (strMessage.Left(2) == _T(" :"))
			strMessage = strMessage.Mid(2);
	}
	else
	{
		if (iCommandIndex != 0)
		{
			// Get source
			strSource = strRawMessage.Mid(1, iCommandIndex - 1);
		}
		strMessage = strRawMessage.Mid(iTargetIndex + 1);
	}
	if (strCommand == _T("PRIVMSG"))
	{
		if (strTarget[0] == _T('#'))
		{
			// Belongs to a channel
			if (strMessage[0] == _T('\x01'))
			{
				// This is a special message. Find out what kind.
				if (strMessage.GetLength() < 4)
				{
					AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("SMIRC Error: Received Invalid special channel message."));
					return;
				}
				strMessage = strMessage.Mid(1, strMessage.GetLength() - 2);
				if (strMessage.Left(6) == _T("ACTION"))
				{
					// Channel Action
					if (strMessage.GetLength() < 8)
					{
						AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("SMIRC Error: Received Invalid channel action."));
						return;
					}
					m_pWndIRC->AddMessageF(strTarget, _T(""), RGB(156, 0, 156), _T("* %s %s"), strSource, strMessage.Mid(7));
					return;
				}
				if (strMessage.Left(7) == _T("VERSION"))
				{
					// Get client version
					m_pWndIRC->AddMessageF(_T(""), _T(""), RGB(255, 0, 0), _T("* [%s] VERSION"), strSource);
					strTemp.Format(_T("NOTICE %s :\001VERSION ") EP_IRC_VERSION _T("\001"), strSource);
					m_pIrcSocket->SendString(strTemp);
					return;
				}
			}
			else
			{
			//	This is a normal channel message
				m_pWndIRC->AddMessage(strTarget, strSource, CLR_DEFAULT, strMessage);
				return;
			}
		}
		else
		{
			// Private Message
			if (strMessage[0] == _T('\x01'))
			{
				// Special message
				if (strMessage.GetLength() < 4)
				{
					AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("SMIRC Error: Received Invalid special private message."));
					return;
				}
				strMessage = strMessage.Mid(1, strMessage.GetLength() - 2);
				if (strMessage.Left(6) == _T("ACTION"))
				{
					// Action
					if (strMessage.GetLength() < 8)
					{
						AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("SMIRC Error: Received Invalid private action."));
						return;
					}
					m_pWndIRC->AddMessageF(strSource, _T(""), RGB(0, 147, 0), _T("* %s %s"), strSource, strMessage.Mid(7));
					return;
				}
				if (strMessage.Left(7) == _T("VERSION"))
				{
					// Get client version
					m_pWndIRC->AddMessageF(_T(""), _T(""), RGB(255, 0, 0), _T("* [%s] VERSION"), strSource);
					strTemp.Format(_T("NOTICE %s :\001VERSION ") EP_IRC_VERSION _T("\001"), strSource);
					m_pIrcSocket->SendString(strTemp);
				}
				return;
			}
			else
			{
				m_pWndIRC->AddMessage(strSource, strSource, CLR_DEFAULT, strMessage);
				return;
			}
		}
	}
	if (strCommand == _T("JOIN"))
	{
		// Channel join
		if (strSource == m_strNick)
		{
			// This was you. So for it to add a new channel
			m_pWndIRC->AddMessageF(strTarget, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_HASJOINED), strSource, strTarget);
			return;
		}
		if (!g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
			m_pWndIRC->AddMessageF(strTarget, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_HASJOINED), strSource, strTarget);
		// Add new nick to your channel
		m_pWndIRC->m_ctlNickList.NewNick(strTarget, strSource);
		return;
	}
	if (strCommand == _T("PART"))
	{
		// Part message
		if (strSource == m_strNick)
		{
			// This was you, so remove channel
			m_pWndIRC->RemoveChannel(strTarget);
			return;
		}
		// Remove nick from your channel
		m_pWndIRC->m_ctlNickList.RemoveNick(strTarget, strSource);
		if (!g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
		{
			strMessage.Trim();
			strTemp.Format(GetResString(IDS_IRC_HASPARTED), strSource, strTarget, strMessage);
			if (strMessage.IsEmpty())
				strTemp.Truncate(strTemp.GetLength() - 3);
			else
				strTemp.Insert(strTemp.GetLength() - 1, _T('\x0F'));
			m_pWndIRC->AddMessage(strTarget, _T(""), RGB(51, 102, 255), strTemp);
		}
		return;
	}
	if (strCommand == _T("TOPIC"))
	{
		// Topic was set, update it
		m_pWndIRC->SetTitle(strTarget, strMessage);
		return;
	}
	if (strCommand == _T("QUIT"))
	{
		// This user left the network. Remove from all Channels
		m_pWndIRC->m_ctlNickList.DeleteNickInAll(strSource, strMessage);
		return;
	}
	if (strCommand == _T("NICK"))
	{
		// Someone changed a nick
		if (strSource == m_strNick)
		{
			// It was you. Update
			m_strNick = strTarget;
		}
		// Update new nick in all channles
		m_pWndIRC->ChangeAllNick(strSource, strTarget);
		return;
	}
	if (strCommand == _T("KICK"))
	{
		// Someone was kicked from a channel
		iTarget2Index = strMessage.Find(_T(':'));
		if (iTarget2Index > 0)
		{
			strTarget2 = strMessage.Mid(1, iTarget2Index - 2);
			strMessage = strMessage.Mid(iTarget2Index + 1);
		}
		strMessage.Trim();
		strTemp.Format(GetResString(IDS_IRC_WASKICKEDBY), strTarget2, strSource, strMessage);
		if (strMessage.IsEmpty())
			strTemp.Truncate(strTemp.GetLength() - 3);
		else
			strTemp.Insert(strTemp.GetLength() - 1, _T('\x0F'));
		if (strTarget2 == m_strNick)
		{
			// It was you!
			m_pWndIRC->RemoveChannel(strTarget);
			m_pWndIRC->AddMessage(_T(""), _T(""), RGB(252, 127, 0), strTemp);
			return;
		}
		// Remove nick from your channel
		m_pWndIRC->m_ctlNickList.RemoveNick(strTarget, strTarget2);
		if (!g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
			m_pWndIRC->AddMessage(strTarget, _T(""), RGB(252, 127, 0), strTemp);
		return;
	}
	if (strCommand == _T("MODE"))
	{
		if (!strTarget.IsEmpty())
		{
			iCommandIndex = strMessage.Find(_T(' '), 1);
			if (iCommandIndex < 2)
			{
				AddLogLine(LOG_FL_DBG | LOG_RGB_ERROR, _T("SMIRC Error: Received Invalid Mode change."));
				return;
			}
			strCommand = strMessage.Mid(1, iCommandIndex - 1);
			strTarget2 = strMessage.Mid(iCommandIndex + 1);
			m_pWndIRC->m_ctlNickList.ParseChangeMode(strTarget, strSource, strCommand, strTarget2);
		}
		else
		{
			// The server just set a server user mode that relates to no channels!
			// Atm, we do not handle these modes.
		}
		return;
	}
	if (strCommand == _T("NOTICE"))
	{
		// Receive notice
		m_pWndIRC->NoticeMessage(strSource, strMessage);
		return;
	}

	if (strCommand.GetLength() == 3
		&& strCommand[0] >= _T('0') && strCommand[0] <= _T('9')
		&& strCommand[1] >= _T('0') && strCommand[1] <= _T('9')
		&& strCommand[2] >= _T('0') && strCommand[2] <= _T('9'))
	{
		iCommand = _tstoi(strCommand);

		if (iCommand == 1) // RPL_WELCOME
		{
			m_pWndIRC->SetLoggedIn(true);
			if (g_App.m_pPrefs->GetIRCListOnConnect())
				m_pIrcSocket->SendString(_T("list"));
			ParsePerform();
		}
		else if (iCommand == 275 || (iCommand >= 307 && iCommand <= 320) || iCommand == 369  || iCommand == 378
			|| iCommand == 401 || iCommand == 406) // RPL_WHOIS*/RPL_WHOWAS*
		{
			int	iNameIndex = strMessage.Find(_T(' '), m_strNick.GetLength() + 1);

			if (iNameIndex > -1 && iNameIndex + 1 < strMessage.GetLength())
			{
				if (strMessage[iNameIndex + 1] == _T(':'))
					strMessage.Delete(iNameIndex + 1, 1);
				switch (iCommand)
				{
					case 311: // RPL_WHOISUSER
					{
						strMessage.Insert(iNameIndex, _T(" is"));
						iNameIndex = strMessage.Find(_T(' '), iNameIndex + 4);
						if (iNameIndex > -1)
							strMessage.SetAt(iNameIndex, _T('@@'));
						break;
					}
					case 312: // RPL_WHOISSERVER
					{
						strMessage.Insert(iNameIndex, _T(" using"));
						break;
					}
					case 317: // RPL_WHOISIDLE
					{
						int	iTimeIndex = strMessage.Find(_T(' '), iNameIndex + 1);

						if (iTimeIndex != -1)
						{
							int		iTimeIndexEnd = strMessage.Find(_T(' '), iTimeIndex + 1);
							CString	strIdleTime = ::CastSecondsToHM(_tstoi(strMessage.Mid(iNameIndex + 1, iTimeIndex - iNameIndex - 1)));
							CTime	ctTime((iTimeIndexEnd > -1) ? _tstoi(strMessage.Mid(iTimeIndex + 1, iTimeIndexEnd - iTimeIndex - 1)) : 0);

							strMessage.Truncate(iNameIndex + 1);
							strMessage.AppendFormat(_T("has been idle %s"), strIdleTime);

							if (ctTime != 0)
							{
								SYSTEMTIME	st;

								ctTime.GetAsSystemTime(st);

								COleDateTime	odtTime(st);

								strMessage.AppendFormat(_T(", signed on %s"), odtTime.Format(_T("%c")));
							}
						}
						break;
					}
					case 319: // RPL_WHOISCHANNELS
					{
						strMessage.Insert(iNameIndex, _T(" on"));
						break;
					}
				}
			}

			m_pWndIRC->NoticeMessage(_T(""), strMessage);
			return;
		}
		else if (iCommand == 321) // RPL_LISTSTART
		{
			m_pWndIRC->ResetServerChannelList();
			return;
		}
		else if (iCommand == 322) // RPL_LIST
		{
			CString	strChanName, strChanNum, strChanDesc;
			int		iChanNameIndex, iChanNumIndex, iChanDescIndex;

			iChanNameIndex = strMessage.Find(_T(' '));
			iChanNumIndex = strMessage.Find(_T(' '), iChanNameIndex + 1);
			iChanDescIndex = strMessage.Find(_T(" :"), iChanNumIndex + 1);
			strChanName = strMessage.Mid(iChanNameIndex + 1, iChanNumIndex - iChanNameIndex - 1);
			strChanNum = strMessage.Mid(iChanNumIndex + 1, iChanDescIndex - iChanNumIndex - 1);
			if (iChanDescIndex > 0)
				strChanDesc = strMessage.Mid(iChanDescIndex + 2);
			m_pWndIRC->AddChannelToList(strChanName, strChanNum, strChanDesc);
			return;
		}
		else if (iCommand == 332) // RPL_TOPIC
		{
			int	iChannelIndex = strMessage.Find(_T(' '));

			if (iChannelIndex > -1)
			{
				int	iTopicIndex = strMessage.Find(_T(" :"), iChannelIndex + 1);

				if (iTopicIndex > -1)
				{
					strTarget2 = strMessage.Mid(iChannelIndex + 1, iTopicIndex - iChannelIndex - 1);
					strMessage = strMessage.Mid(iTopicIndex + 2);
					m_pWndIRC->AddMessageF(strTarget2, _T(""), RGB(0, 147, 0), _T("* Channel Title: %s"), strMessage);
					m_pWndIRC->SetTitle(strTarget2, strMessage);
				}
			}
			return;
		}
		else if (iCommand == 333) // RPL_TOPICWHOTIME
		{
			int	iChannelIndex = strMessage.Find(_T('#'));

			if (iChannelIndex > -1)
			{
				int	iNameIndex = strMessage.Find(_T(' '), iChannelIndex + 1);

				if (iNameIndex > -1)
				{
					int		iTimeIndex = strMessage.Find(_T(' '), iNameIndex + 1);
					CTime	ctTime((iTimeIndex > -1) ? _tstoi(strMessage.Mid(iTimeIndex + 1, strMessage.GetLength() - iTimeIndex - 1)) : 0);

					strTarget2 = strMessage.Mid(iChannelIndex, iNameIndex - iChannelIndex);

					if (ctTime != 0 && iTimeIndex > -1)
					{
						SYSTEMTIME	st;

						ctTime.GetAsSystemTime(st);

						COleDateTime	odtTime(st);

						strMessage = strMessage.Mid(iNameIndex, iTimeIndex - iNameIndex + 1);
						strMessage.AppendFormat(_T("on %s"), odtTime.Format(_T("%c")));
					}
					else
						strMessage = strMessage.Mid(iNameIndex);

					strMessage.Insert(0, _T("* Set by"));
					m_pWndIRC->AddMessage(strTarget2, _T(""), RGB(0, 147, 0), strMessage);
				}
			}
			return;
		}
		else if (iCommand == 353) // RPL_NAMREPLY
		{
			int		iGetNickChannelIndex, iGetNickIndex, iCount = 0;
			CString	strGetNickChannel, strGetNick;

			VERIFY ( (iGetNickChannelIndex = strRawMessage.Find(_T(' '), iTargetIndex + 1)) != (-1) );
			iGetNickChannelIndex = strRawMessage.Find(_T(' '), iTargetIndex + 1);
			iGetNickIndex = strRawMessage.Find(_T(' '), iGetNickChannelIndex + 3);
			strGetNickChannel = strRawMessage.Mid(iGetNickChannelIndex + 2, iGetNickIndex - iGetNickChannelIndex - 2);
			iGetNickChannelIndex = strRawMessage.Find(_T(':'), iGetNickChannelIndex);
			iGetNickIndex = strRawMessage.Find(_T(' '), iGetNickChannelIndex);

			while (iGetNickIndex > 0)
			{
				iCount++;
				strGetNick = strRawMessage.Mid(iGetNickChannelIndex + 1, iGetNickIndex - iGetNickChannelIndex - 1);
				iGetNickChannelIndex = iGetNickIndex;
				m_pWndIRC->m_ctlNickList.NewNick(strGetNickChannel, strGetNick);
				iGetNickIndex = strRawMessage.Find(_T(' '), iGetNickChannelIndex + 1);
			}
			return;
		}
		else if (iCommand == 433) // ERR_NICKNAMEINUSE
		{
			if (!m_pWndIRC->GetLoggedIn())
				Disconnect();
			m_pWndIRC->AddMessage(_T(""), _T(""), RGB(252, 127, 0), GetResString(IDS_IRC_NICKUSED));
			return;
		}
	}

	m_pWndIRC->AddMessage(_T(""), _T(""), CLR_DEFAULT, strMessage);
}

void CIrcMain::SendLogin()
{
	m_pIrcSocket->SendString(m_strUser);
	m_pIrcSocket->SendString(_T("NICK ") + m_strNick);
}

void CIrcMain::ParsePerform()
{
	CString	strRawPerform;

	if (g_App.m_pPrefs->GetIrcUsePerform())
		strRawPerform += g_App.m_pPrefs->GetIrcPerformString();

	if (g_App.m_pPrefs->GetIRCServer().MakeLower() == _T("irc.emuleplus.info"))
	{
		const TCHAR	*pcChannel = NULL;

		strRawPerform += _T("|/join #emule+");

		switch (g_App.m_pPrefs->GetLanguageID())
		{
			case MAKELANGID(LANG_CROATIAN, SUBLANG_DEFAULT):
				pcChannel = _T("croatian");
				break;
			case MAKELANGID(LANG_CZECH, SUBLANG_DEFAULT):
				pcChannel = _T("czech");
				break;
			case MAKELANGID(LANG_DANISH, SUBLANG_DEFAULT):
				pcChannel = _T("danish");
				break;
			case MAKELANGID(LANG_ENGLISH, SUBLANG_DEFAULT):
				pcChannel = _T("english");
				break;
			case MAKELANGID(LANG_FINNISH, SUBLANG_DEFAULT):
				pcChannel = _T("finnish");
				break;
			case MAKELANGID(LANG_FRENCH, SUBLANG_DEFAULT):
				pcChannel = _T("french");
				break;
			case MAKELANGID(LANG_GERMAN, SUBLANG_DEFAULT):
				pcChannel = _T("german");
				break;
			case MAKELANGID(LANG_HEBREW, SUBLANG_DEFAULT):
				pcChannel = _T("israel");
				break;
			case MAKELANGID(LANG_ITALIAN, SUBLANG_DEFAULT):
				pcChannel = _T("italian");
				break;
			case MAKELANGID(LANG_LITHUANIAN, SUBLANG_DEFAULT):
				pcChannel = _T("lithuanian");
				break;
			case MAKELANGID(LANG_DUTCH, SUBLANG_DEFAULT):
				pcChannel = _T("netherlands");
				break;
			case MAKELANGID(LANG_POLISH, SUBLANG_DEFAULT):
				pcChannel = _T("polish");
				break;
			case MAKELANGID(LANG_PORTUGUESE, SUBLANG_PORTUGUESE):
			case MAKELANGID(LANG_PORTUGUESE, SUBLANG_PORTUGUESE_BRAZILIAN):
				pcChannel = _T("portuguese");
				break;
			case MAKELANGID(LANG_ROMANIAN, SUBLANG_DEFAULT):
				pcChannel = _T("romanian");
				break;
			case MAKELANGID(LANG_RUSSIAN, SUBLANG_DEFAULT):
				pcChannel = _T("russian");
				break;
			case MAKELANGID(LANG_SPANISH, SUBLANG_DEFAULT):
				pcChannel = _T("spanish");
				break;
			case MAKELANGID(LANG_TURKISH, SUBLANG_DEFAULT):
				pcChannel = _T("turkish");
				break;
			case MAKELANGID(LANG_UKRAINIAN, SUBLANG_DEFAULT):
				pcChannel = _T("ukrainian");
				break;
			case MAKELANGID(LANG_SERBIAN, SUBLANG_SERBIAN_LATIN):
				pcChannel = _T("serbian");
		}

		if (pcChannel != NULL)
		{
			strRawPerform += _T("|/join #emule+");
			strRawPerform += pcChannel;
		}
	}

	if (strRawPerform.IsEmpty())
		return;

	int		iIndex = 0;
	CString	strNextPerform;

	while (strRawPerform.Find(_T('|')) != -1)
	{
		iIndex = strRawPerform.Find(_T('|'));
		strNextPerform = strRawPerform.Left(iIndex);
		strNextPerform.TrimLeft(_T(' '));
		if (strNextPerform[0] == _T('/'))
			strNextPerform = strNextPerform.Mid(1);
		if (strNextPerform.Left(3) == _T("msg"))
			strNextPerform = _T("PRIVMSG") + strNextPerform.Mid(3);
		if ((strNextPerform.Left(16)).CompareNoCase(_T("PRIVMSG nickserv")) == 0)
			strNextPerform = _T("ns") + strNextPerform.Mid(16);
		if ((strNextPerform.Left(16)).CompareNoCase(_T("PRIVMSG chanserv")) == 0)
			strNextPerform = _T("cs") + strNextPerform.Mid(16);
		m_pIrcSocket->SendString(strNextPerform);
		strRawPerform = strRawPerform.Mid(iIndex + 1);
	}
	if (!strRawPerform.IsEmpty())
	{
		strRawPerform.TrimLeft(_T(' '));
		if (strRawPerform[0] == _T('/'))
			strRawPerform = strRawPerform.Mid(1);
		if (strRawPerform.Left(3) == _T("msg"))
			strRawPerform = _T("PRIVMSG") + strRawPerform.Mid(3);
		if ((strRawPerform.Left(16)).CompareNoCase(_T("PRIVMSG nickserv")) == 0)
			strRawPerform = _T("ns") + strRawPerform.Mid(16);
		if ((strRawPerform.Left(16)).CompareNoCase(_T("PRIVMSG chanserv")) == 0)
			strRawPerform = _T("cs") + strRawPerform.Mid(16);
		if (!strRawPerform.IsEmpty())
			m_pIrcSocket->SendString(strRawPerform);
	}
}

void CIrcMain::Connect()
{
	uint32	dwHash = 0;

//	Robert Jenkins One-at-a-time hashing algorithm
	for (int i = 0; i < 16; i++)
	{
		dwHash += g_App.m_pPrefs->GetUserHash()[i];
		dwHash += (dwHash << 10);
		dwHash ^= (dwHash >> 6);
	}
	dwHash += (dwHash << 3);
	dwHash ^= (dwHash >> 11);
	dwHash += (dwHash << 15);

	m_pIrcSocket = new CIrcSocket(this);
	m_strNick = g_App.m_pPrefs->GetIRCNick();
	m_strNick.Remove(_T('.'));
	m_strNick.Remove(_T(' '));
	m_strNick.Remove(_T(':'));
	m_strNick.Remove(_T('/'));
	m_strNick.Remove(_T('@@'));
	if (m_strNick.GetLength() > 20)
		m_strNick.Truncate(20);
	m_strUser.Format(_T("USER e%08X 8 * :") EP_IRC_VERSION, dwHash);
	m_pIrcSocket->Create(0, SOCK_STREAM, FD_READ | FD_WRITE | FD_OOB | FD_ACCEPT | FD_CONNECT | FD_CLOSE, g_App.m_pPrefs->GetBindAddrA());
	m_pIrcSocket->Connect();
	m_pWndIRC->SetConnectStatus(IRC_CONNECTING);
}

void CIrcMain::Disconnect(bool bIsShuttingDown)
{
	m_pIrcSocket->Close();
	if (m_pIrcSocket != NULL)
		delete m_pIrcSocket;
	m_pIrcSocket = NULL;
	if (!bIsShuttingDown)
		m_pWndIRC->SetConnectStatus(IRC_DISCONNECTED);
}

void CIrcMain::SetConnectStatus(bool bStatus)
{
	m_pWndIRC->SetConnectStatus(bStatus ? IRC_CONNECTED : IRC_DISCONNECTED);
}

int CIrcMain::SendString(const CString &strSend)
{
	return m_pIrcSocket->SendString(strSend);
}
@


1.89
log
@Simplified IRC log message formatting (to avoid potential issues with % char);
Faster interfaces for IRC message logging.
@
text
@d681 1
a681 1
	m_pIrcSocket->Create();
@


1.88
log
@Simplified logging system implementation.
@
text
@a79 2
	// I temp replace % with \x04 as it will mess up sending this string with parameters later
	strRawMessage.Replace(_T('%'), _T('\x04'));
d81 1
a81 1
	CString	strSource, strSourceIP, strCommand, strTarget, strTarget2, strMessage, strTemp;
a119 1
		strSourceIP = strRawMessage.Mid(iSourceIndex + 1, iCommandIndex - iSourceIndex - 1);
d173 1
a173 1
					m_pWndIRC->AddMessage(strTarget, _T(""), RGB(156, 0, 156), _T("* %s %s"), strSource, strMessage.Mid(7));
d179 1
a179 1
					m_pWndIRC->AddMessage(_T(""), _T(""), RGB(255, 0, 0), _T("* [%s] VERSION"), strSource);
d212 1
a212 1
					m_pWndIRC->AddMessage(strSource, _T(""), RGB(0, 147, 0), _T("* %s %s"), strSource, strMessage.Mid(7));
d218 1
a218 1
					m_pWndIRC->AddMessage(_T(""), _T(""), RGB(255, 0, 0), _T("* [%s] VERSION"), strSource);
d237 1
a237 1
			m_pWndIRC->AddMessage(strTarget, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_HASJOINED), strSource, strTarget);
d241 1
a241 1
			m_pWndIRC->AddMessage(strTarget, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_HASJOINED), strSource, strTarget);
a331 1
			strCommand.Replace(_T('\x04'), _T('%'));
d456 1
a456 2
					m_pWndIRC->AddMessage(strTarget2, _T(""), RGB(0, 147, 0), _T("* Channel Title: %s"), strMessage);
					strMessage.Replace(_T('\x04'), _T('%'));
a507 1
			strRawMessage.Replace(_T('\x04'), _T('%'));
@


1.87
log
@Split IRC user list into separate source files.
@
text
@d104 1
a104 1
		AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received a message with no target or message."));
d164 1
a164 1
					AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid special channel message."));
d173 1
a173 1
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid channel action."));
d203 1
a203 1
					AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid special private message."));
d212 1
a212 1
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid private action."));
d331 1
a331 1
				AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid Mode change."));
@


1.86
log
@String processing optimization; Formatting.
@
text
@d246 1
a246 1
		m_pWndIRC->NewNick(strTarget, strSource);
d259 1
a259 1
		m_pWndIRC->RemoveNick(strTarget, strSource);
d281 1
a281 1
		m_pWndIRC->DeleteNickInAll(strSource, strMessage);
d319 1
a319 1
		m_pWndIRC->RemoveNick(strTarget, strTarget2);
d337 1
a337 1
			m_pWndIRC->ParseChangeMode(strTarget, strSource, strCommand, strTarget2);
d520 1
a520 1
				m_pWndIRC->NewNick(strGetNickChannel, strGetNick);
@


1.85
log
@add minimal unicode support for IRC, i.e. allow client to read UTF8 encoded messages
@
text
@d1 3
d18 4
d33 2
d48 1
d50 2
a51 5
	strPreParseBufferA.Append(pcBuf, iLen);

	int	iIndex = strPreParseBufferA.Find('\n');

	while (iIndex != -1)
d53 5
a57 3
		MB2Str(cfUTF8, &strMessage, strPreParseBufferA.Left(iIndex));
		strMessage.Remove(_T('\n'));
		strMessage.Remove(_T('\r'));
d59 1
a59 2
		strPreParseBufferA = strPreParseBufferA.Mid(iIndex + 1);
		iIndex = strPreParseBufferA.Find('\n');
d183 1
a183 2
					strVersion = _T("ePlus") CURRENT_VERSION_LONG Irc_Version;
					strTemp.Format(_T("NOTICE %s :\001VERSION %s\001"), strSource, strVersion);
d222 1
a222 2
					strVersion = _T("ePlus") CURRENT_VERSION_LONG Irc_Version;
					strTemp.Format(_T("NOTICE %s :\001VERSION %s\001"), strSource, strVersion);
d237 1
a237 1
		if (strSource == strNick)
d252 1
a252 1
		if (strSource == strNick)
d287 1
a287 1
		if (strSource == strNick)
d290 1
a290 1
			strNick = strTarget;
d311 1
a311 1
		if (strTarget2 == strNick)
d370 1
a370 1
			int	iNameIndex = strMessage.Find(_T(' '), strNick.GetLength() + 1);
d539 2
a540 2
	m_pIrcSocket->SendString(strUser);
	m_pIrcSocket->SendString(_T("NICK ") + strNick);
d678 9
a686 10
	strNick = g_App.m_pPrefs->GetIRCNick();
	strNick.Remove(_T('.'));
	strNick.Remove(_T(' '));
	strNick.Remove(_T(':'));
	strNick.Remove(_T('/'));
	strNick.Remove(_T('@@'));
	if (strNick.GetLength() > 20)
		strNick.Truncate(20);
	strVersion = _T("ePlus") CURRENT_VERSION_LONG Irc_Version;
	strUser.Format(_T("USER e%08X 8 * :%s"), dwHash, strVersion);
@


1.84
log
@Faster string processing; Reduced H-file dependency; Removed useless pragma pack 1.
@
text
@a29 1
	strPreParseBuffer.Empty();
d36 1
a36 1
void CIrcMain::PreParseMessage(CString strBuffer)
d40 1
a40 1
	strPreParseBuffer += strBuffer;
d42 1
a42 1
	int	iIndex = strPreParseBuffer.Find(_T('\n'));
d46 1
a46 1
		strMessage = strPreParseBuffer.Left(iIndex);
d50 2
a51 2
		strPreParseBuffer = strPreParseBuffer.Mid(iIndex + 1);
		iIndex = strPreParseBuffer.Find(_T('\n'));
@


1.83
log
@Remove unused but active code that can be used to retrieve IP and port of users through IRC {Bruno}
@
text
@d17 1
d703 1
a703 1
int CIrcMain::SendString(CString strSend)
d706 1
a706 1
}@


1.82
log
@More robust IRC ident {KerneL}; Suppressed compiler warnings.
@
text
@a17 2
#include "server.h"
#include "ED2KLink.h"
a24 1

a29 2
	srand((unsigned)time(NULL));
	SetVerify();
d38 1
a38 1
	CString			strMessage;
d42 1
a42 1
	int				iIndex = strPreParseBuffer.Find(_T('\n'));
d44 1
a44 1
	while(iIndex != -1)
a54 67
//extern void URLDecode(CString& result, const char* buff);

/*void CIrcMain::ProcessLink(const CString& ed2kLink)
{
	try {
		CString			strLink;

		strLink = URLDecode(ed2kLink);

		CED2KLink		*pLink = CED2KLink::CreateLinkFromUrl(strLink);

		_ASSERT( pLink !=0 );
		switch (pLink->GetKind())
		{
			case CED2KLink::kFile:
			{
				CED2KFileLink		*pFileLink = pLink->GetFileLink();

				_ASSERT(pFileLink !=0);
				g_App.m_pDownloadQueue->AddFileLinkToDownload(pFileLink);
			}
			break;
			case CED2KLink::kServerList:
			{
				CED2KServerListLink		*pListLink = pLink->GetServerListLink();

				_ASSERT( pListLink !=0 );

				CString			strAddress = pListLink->GetAddress();

				if (!strAddress.IsEmpty())
					g_App.m_pMDlg->m_wndServer.UpdateServerMetFromURL(strAddress);
			}
			break;
			case CED2KLink::kServer:
			{
				CString				strDefName;
				CED2KServerLink		*pSrvLink = pLink->GetServerLink();

				_ASSERT( pSrvLink !=0 );

				CServer				*pSrv = new CServer(pSrvLink->GetPort(),pSrvLink->GetIP());	//netwolf 07.05.03 support non-ip ed2k server link

				_ASSERT( pSrv !=0 );
				pSrvLink->GetDefaultName(strDefName);
				pSrv->SetListName(strDefName.GetBuffer());

				// Barry - Default all new irc servers to high priority
				if (g_App.m_pPrefs->GetManualHighPrio())
					pSrv->SetPreference(CServer::SERVERPRIORITY_HIGH);

				if (!g_App.m_pMDlg->m_wndServer.m_ctlServerList.AddServer(pSrv, true))
					delete pSrv;
				else
					AddLogLine(true, GetResString(IDS_SERVERADDED), pSrv->GetListName());
			}
			break;
			default:
				break;
		}
		delete pLink;
	} catch(...) {
		OUTPUT_DEBUG_TRACE();
		AddLogLine(true, RGB_LOG_WARNING + GetResString(IDS_LINKNOTADDED));
	}
}*/

d75 2
a76 2
	CString		strSource, strSourceIP, strCommand, strTarget, strTarget2, strMessage, strTemp;
	int			iSourceIndex, iCommandIndex, iTargetIndex, iMessageIndex, iTarget2Index, iCommand;
a218 181
				if (strMessage.Left(9) == _T("RQSFRIEND"))
				{
					// eMule user requested to add you as friend
					if (strMessage.GetLength() < 10)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend request."));
						return;
					}
					strMessage = strMessage.Mid(9);

					int				iIndex1 = strMessage.Find(_T('|'));

					if (iIndex1 == -1 || iIndex1 == strMessage.GetLength())
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend request."));
						return;
					}

					int				iIndex2 = strMessage.Find(_T('|'), iIndex1 + 1);

					if (iIndex2 == -1 || iIndex1 > iIndex2)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend request."));
						return;
					}

					// Adds a little protection
					CString			strVerify = strMessage.Mid(iIndex1 + 1, iIndex2 - iIndex1 - 1);
#ifdef OLD_SOCKETS_ENABLED
					CString			strIP = _T("0.0.0.0"), strPort = _T("0");
					uint32			iClientID = 0;

					if (g_App.m_pServerConnect->IsConnected())
					{
						CServer	*pCurServer = g_App.m_pServerConnect->GetCurrentServer();

						// Tell them what server we are on for possibel lowID support later
						strIP.Format(_T("%i"), pCurServer->GetIP());
						strPort.Format(_T("%i"), pCurServer->GetPort());
						if (!g_App.m_pServerConnect->IsLowID())
							iClientID = g_App.m_pServerConnect->GetClientID();
					}
					// Create our response
					strTemp.Format(_T("PRIVMSG %s :\001REPFRIEND ePlus%s%s|%s|%i:%i|%s:%s|%s|\001"), strSource, (CString)CURRENT_VERSION_LONG, (CString)Irc_Version, strVerify, iClientID, g_App.m_pPrefs->GetListenPort(), strIP, strPort, HashToString(g_App.m_pPrefs->GetUserHash()));
					m_pIrcSocket->SendString(strTemp);
#endif //OLD_SOCKETS_ENABLED
					strTemp.Format(_T("%s %s"), strSource, GetResString(IDS_IRC_ADDASFRIEND));
					if (!g_App.m_pPrefs->GetIrcIgnoreEmuleProtoInfoMessage())
						m_pWndIRC->NoticeMessage(_T("*EmuleProto*"), strTemp);
					return;
				}
				if (strMessage.Left(9) == _T("REPFRIEND"))
				{
					if (strMessage.GetLength() < 10)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend reply."));
						return;
					}

					strMessage = strMessage.Mid(9);

					int				iIndex1 = strMessage.Find(_T('|'));

					if (iIndex1 == -1 || iIndex1 == strMessage.GetLength())
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend reply."));
						return;
					}

					int				iIndex2 = strMessage.Find(_T('|'), iIndex1 + 1);

					if (iIndex2 == -1 || iIndex1 > iIndex2)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend reply."));
						return;
					}

					CString			strVerify = strMessage.Mid(iIndex1 + 1, iIndex2 - iIndex1 - 1);

					// Make sure we requested this!
					if (iVerify != static_cast<uint32>(_tstoi(strVerify)))
						return;

					// Pick a new random verify
					SetVerify();
					iIndex1 = strMessage.Find(_T(':'), iIndex2 + 1);
					if (iIndex1 == -1 || iIndex2 > iIndex1)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend reply."));
						return;
					}

					uint32			iNewClientID = _tstoi(strMessage.Mid(iIndex2 + 1, iIndex1 - iIndex2 -1));

					iIndex2 = strMessage.Find(_T('|'), iIndex1 + 1);
					if (iIndex2 == -1 || iIndex1 >= iIndex2)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend reply."));
						return;
					}

					uint32			iNewClientPort = _tstoi(strMessage.Mid(iIndex1 + 1, iIndex2 - iIndex1 -1));

					iIndex1 = strMessage.Find(_T(':'), iIndex2 + 1);
					if (iIndex1 == -1 || iIndex2 >= iIndex1)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend reply."));
						return;
					}

//					uint32			iNewClientServerIP = _tstoi(strMessage.Mid(iIndex2 + 1, iIndex1 - iIndex2 -1));

					iIndex2 = strMessage.Find(_T('|'), iIndex1 + 1);
					if (iIndex2 == -1 || iIndex1 >= iIndex2)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend reply."));
						return;
					}

//					uint32			iNewClientServerPort = _tstoi(strMessage.Mid(iIndex1 + 1, iIndex2 - iIndex1 -1));

					iIndex1 = strMessage.Find(_T('|'), iIndex2 + 1);
					if (iIndex1 == -1 || iIndex2 >= iIndex1)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend reply."));
						return;
					}

					CString	strHash = strMessage.Mid(iIndex2 + 1, iIndex1 - iIndex2 -1);
					byte	abyteClientHash[16];

					if (md4cmp0(StringToHash(strHash, abyteClientHash)) == 0)
					{
						AddDebugLogLine(RGB_LOG_ERROR_TXT _T("SMIRC Error: Received Invalid friend reply."));
						return;
					}

					g_App.m_pFriendList->AddFriend(abyteClientHash, 0, iNewClientID, iNewClientPort, 0, strSource, 1);
					return;
				}
				if (strMessage.Left(8) == _T("SENDLINK"))
				{
					// Needs more coding (Mainly security) before releasing.

					//if (!g_App.m_pPrefs->GetIrcAcceptLinks())
					//{
						if (!g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
							m_pWndIRC->NoticeMessage(_T("*EmuleProto*"), strSource + _T(" attempted to send you a file."));
						return;
					//}
					/*
					strMessage = strMessage.Mid(8);
					int index1, index2;
					index1 = strMessage.Find("|");
					if (index1 == -1 || index1 == strMessage.GetLength())
						return;
					index2 = strMessage.Find("|", index1+1);
					if (index2 == -1 || index1 > index2)
						return;
					CString hash = strMessage.Mid(index1+1, index2-index1-1);
					uchar userid[16];
					if (hash.GetLength()!=32 || !DecodeBase16(hash.GetBuffer(),hash.GetLength(),userid,ARRSIZE(userid)))
							return;
					CString RecieveString, build;
					if (!g_App.friendlist->SearchFriend(userid, 0, 0))
					{
						if (!g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
							m_pwndIRC->NoticeMessage("*EmuleProto*", _T("Someone attempt to send you a file but wasn't a friend. If you wanted to accept the file, disable From friends only in the preferences."));
						return;
					}
					RecieveString = strMessage.Mid(index2+1);
					if (!RecieveString.IsEmpty())
					{
						build.Format(GetResString(IDS_IRC_RECIEVEDLINK), strSource, RecieveString);
						if (!g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
							m_pwndIRC->NoticeMessage("*EmuleProto*", build);
						ProcessLink(RecieveString);
					}
					return;
					*/
				}
d364 1
a364 1
			int				iNameIndex = strMessage.Find(_T(' '), strNick.GetLength() + 1);
d387 1
a387 1
						int				iTimeIndex = strMessage.Find(_T(' '), iNameIndex + 1);
d391 3
a393 3
							int			iTimeIndexEnd = strMessage.Find(_T(' '), iTimeIndex + 1);
							CString		strIdleTime = ::CastSecondsToHM(_tstoi(strMessage.Mid(iNameIndex + 1, iTimeIndex - iNameIndex - 1)));
							CTime		ctTime((iTimeIndexEnd > -1) ? _tstoi(strMessage.Mid(iTimeIndex + 1, iTimeIndexEnd - iTimeIndex - 1)) : 0);
d400 1
a400 1
								SYSTEMTIME		st;
d429 2
a430 2
			CString			strChanName, strChanNum, strChanDesc;
			int				iChanNameIndex, iChanNumIndex, iChanDescIndex;
d444 1
a444 1
			int			iChannelIndex = strMessage.Find(_T(' '));
d448 1
a448 1
				int			iTopicIndex = strMessage.Find(_T(" :"), iChannelIndex + 1);
d463 1
a463 1
			int			iChannelIndex = strMessage.Find(_T('#'));
d467 1
a467 1
				int			iNameIndex = strMessage.Find(_T(' '), iChannelIndex + 1);
d471 2
a472 2
					int			iTimeIndex = strMessage.Find(_T(' '), iNameIndex + 1);
					CTime		ctTime((iTimeIndex > -1) ? _tstoi(strMessage.Mid(iTimeIndex + 1, strMessage.GetLength() - iTimeIndex - 1)) : 0);
d478 1
a478 1
						SYSTEMTIME		st;
d498 2
a499 2
			int				iGetNickChannelIndex, iGetNickIndex, iCount = 0;
			CString			strGetNickChannel, strGetNick;
d509 1
a509 1
			while(iGetNickIndex > 0)
d539 1
a539 1
	CString			strRawPerform;
d621 2
a622 2
	int				iIndex = 0;
	CString			strNextPerform;
@


1.81
log
@IRC autojoin to Serbian channel.
@
text
@d371 1
a371 1
					if (iVerify != _tstoi(strVerify))
d401 1
a401 1
					uint32			iNewClientServerIP = _tstoi(strMessage.Mid(iIndex2 + 1, iIndex1 - iIndex2 -1));
d410 1
a410 1
					uint32			iNewClientServerPort = _tstoi(strMessage.Mid(iIndex1 + 1, iIndex2 - iIndex1 -1));
d911 1
a911 2
	CString			strIdent;
	uint32			iIdent = 0;
d913 1
d916 8
a923 5
		iIdent += g_App.m_pPrefs->GetUserHash()[i] * g_App.m_pPrefs->GetUserHash()[15 - i];
	}
	strIdent.Format(_T("e%u"), iIdent);
	if (strIdent.GetLength() > 8)
		strIdent.Truncate(8);
d934 1
a934 1
	strUser.Format(_T("USER %s 8 * :%s"), strIdent, strVersion);
@


1.80
log
@fix time disappearing at midnight
@
text
@d860 2
@


1.79
log
@Reduced #include depedency.
@
text
@d659 1
a659 1
								strMessage.AppendFormat(_T(", signed on %s"), odtTime.Format());
d738 1
a738 1
						strMessage.AppendFormat(_T("on %s"), odtTime.Format());
@


1.78
log
@Added finnish localised help chan {Cerberus}
@
text
@d18 1
@


1.77
log
@Added croatian and czech localised help chans {Cerberus}
@
text
@d816 3
@


1.76
log
@Added turkish localised help chan {MadMaxAdsl}; sorted foreign chans code
@
text
@d804 6
@


1.75
log
@fix for socket connection request with every IRC connect button click {Vladimir (SV)}
@
text
@d804 3
a809 3
			case MAKELANGID(LANG_DANISH, SUBLANG_DEFAULT):
				pcChannel = _T("danish");
				break;
d822 3
d835 3
d844 2
a845 5
			case MAKELANGID(LANG_ROMANIAN, SUBLANG_DEFAULT):
				pcChannel = _T("romanian");
				break;
			case MAKELANGID(LANG_LITHUANIAN, SUBLANG_DEFAULT):
				pcChannel = _T("lithuanian");
@


1.74
log
@added ukrainian and lithuanian chans to autojoin list {Punk, Glitz}
@
text
@d919 1
d929 1
a929 1
		m_pWndIRC->SetConnectStatus(false);
d932 1
a932 1
void CIrcMain::SetConnectStatus(bool bConnected)
d934 1
a934 1
	m_pWndIRC->SetConnectStatus(bConnected);
@


1.73
log
@added #emule+romanian chan to autojoin feature {Cerberus}
@
text
@d841 6
@


1.72
log
@UNICODE preparations
@
text
@d838 3
@


1.71
log
@add #emule+english chan to auto join; minor formatting
@
text
@d254 1
a254 1
                // This is a normal channel message
d418 2
a419 1
					CString			strHash = strMessage.Mid(iIndex2 + 1, iIndex1 - iIndex2 -1);
d421 1
a421 3
					uchar			userid[16];

					if (strHash.GetLength() != 32 || !DecodeBase16(strHash.GetBuffer(), strHash.GetLength(), userid, ARRSIZE(userid)))
d427 1
a427 1
					g_App.m_pFriendList->AddFriend(userid, 0, iNewClientID, iNewClientPort, 0, strSource, 1);
d656 1
a656 1
								COleDateTime    odtTime(st);
d734 1
a734 1
						COleDateTime    odtTime(st);
@


1.70
log
@UNICODE preparation (first shot)
@
text
@d15 2
a16 2
#include "StdAfx.h"
#include "ircmain.h"
d805 3
@


1.69
log
@Renaming in comments.
@
text
@d30 1
a30 1
	m_pWndIRC = 0; 
d83 1
a83 1
				CED2KServerListLink		*pListLink = pLink->GetServerListLink(); 
d85 1
a85 1
				_ASSERT( pListLink !=0 ); 
d87 1
a87 1
				CString			strAddress = pListLink->GetAddress(); 
d110 2
a111 2
				if (!g_App.m_pMDlg->m_wndServer.m_ctlServerList.AddServer(pSrv, true)) 
					delete pSrv; 
d246 1
a246 1
					strVersion = CString("ePlus" CURRENT_VERSION_LONG Irc_Version);
d286 1
a286 1
					strVersion = CString("ePlus" CURRENT_VERSION_LONG Irc_Version);
d599 2
a600 2
	
	if (strCommand.GetLength() == 3 
d619 1
a619 1
			if (iNameIndex > -1 && iNameIndex + 1 < strMessage.GetLength()) 
d641 1
a641 1
						
d913 1
a913 1
	if (m_pIrcSocket != NULL) 
@


1.68
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d78 1
a78 1
				g_eMuleApp.m_pDownloadQueue->AddFileLinkToDownload(pFileLink);
d90 1
a90 1
					g_eMuleApp.m_pdlgEmule->m_wndServer.UpdateServerMetFromURL(strAddress);
d107 1
a107 1
				if (g_eMuleApp.m_pGlobPrefs->GetManualHighPrio())
d110 1
a110 1
				if (!g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.AddServer(pSrv, true)) 
d435 1
a435 1
					//if (!g_eMuleApp.m_pGlobPrefs->GetIrcAcceptLinks())
d455 1
a455 1
					if (!g_eMuleApp.friendlist->SearchFriend(userid, 0, 0))
d457 1
a457 1
						if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
d465 1
a465 1
						if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
a537 1
//			m_pwenIRC->SetNick(strNick);
@


1.67
log
@renamed 3 variables
@
text
@d333 1
a333 1
					strTemp.Format(_T("PRIVMSG %s :\001REPFRIEND ePlus%s%s|%s|%i:%i|%s:%s|%s|\001"), strSource, (CString)CURRENT_VERSION_LONG, (CString)Irc_Version, strVerify, iClientID, g_App.g_pPrefs->GetListenPort(), strIP, strPort, HashToString(g_App.g_pPrefs->GetUserHash()));
d337 1
a337 1
					if (!g_App.g_pPrefs->GetIrcIgnoreEmuleProtoInfoMessage())
d437 1
a437 1
						if (!g_App.g_pPrefs->GetIrcIgnoreInfoMessage())
d490 1
a490 1
		if (!g_App.g_pPrefs->GetIrcIgnoreInfoMessage())
d507 1
a507 1
		if (!g_App.g_pPrefs->GetIrcIgnoreInfoMessage())
d568 1
a568 1
		if (!g_App.g_pPrefs->GetIrcIgnoreInfoMessage())
d611 1
a611 1
			if (g_App.g_pPrefs->GetIRCListOnConnect())
d795 2
a796 2
	if (g_App.g_pPrefs->GetIrcUsePerform())
		strRawPerform += g_App.g_pPrefs->GetIrcPerformString();
d798 1
a798 1
	if (g_App.g_pPrefs->GetIRCServer().MakeLower() == _T("irc.emuleplus.info"))
d804 1
a804 1
		switch (g_App.g_pPrefs->GetLanguageID())
d891 1
a891 1
		iIdent += g_App.g_pPrefs->GetUserHash()[i] * g_App.g_pPrefs->GetUserHash()[15 - i];
d897 1
a897 1
	strNick = g_App.g_pPrefs->GetIRCNick();
@


1.66
log
@Changed IRC server to irc.emuleplus.info.
@
text
@d322 1
a322 1
					if (g_eMuleApp.m_pServerConnect->IsConnected())
d324 1
a324 1
						CServer	*pCurServer = g_eMuleApp.m_pServerConnect->GetCurrentServer();
d329 2
a330 2
						if (!g_eMuleApp.m_pServerConnect->IsLowID())
							iClientID = g_eMuleApp.m_pServerConnect->GetClientID();
d333 1
a333 1
					strTemp.Format(_T("PRIVMSG %s :\001REPFRIEND ePlus%s%s|%s|%i:%i|%s:%s|%s|\001"), strSource, (CString)CURRENT_VERSION_LONG, (CString)Irc_Version, strVerify, iClientID, g_eMuleApp.m_pGlobPrefs->GetListenPort(), strIP, strPort, HashToString(g_eMuleApp.m_pGlobPrefs->GetUserHash()));
d337 1
a337 1
					if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreEmuleProtoInfoMessage())
d428 1
a428 1
					g_eMuleApp.m_pFriendList->AddFriend(userid, 0, iNewClientID, iNewClientPort, 0, strSource, 1);
d437 1
a437 1
						if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
d490 1
a490 1
		if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
d507 1
a507 1
		if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
d568 1
a568 1
		if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
d611 1
a611 1
			if (g_eMuleApp.m_pGlobPrefs->GetIRCListOnConnect())
d795 2
a796 2
	if (g_eMuleApp.m_pGlobPrefs->GetIrcUsePerform())
		strRawPerform += g_eMuleApp.m_pGlobPrefs->GetIrcPerformString();
d798 1
a798 1
	if (g_eMuleApp.m_pGlobPrefs->GetIRCServer().MakeLower() == _T("irc.emuleplus.info"))
d804 1
a804 1
		switch (g_eMuleApp.m_pGlobPrefs->GetLanguageID())
d891 1
a891 1
		iIdent += g_eMuleApp.m_pGlobPrefs->GetUserHash()[i] * g_eMuleApp.m_pGlobPrefs->GetUserHash()[15 - i];
d897 1
a897 1
	strNick = g_eMuleApp.m_pGlobPrefs->GetIRCNick();
@


1.65
log
@Optimized GetCurrentServer() calls (cache value for consecutive usage).
@
text
@d798 1
a798 1
	if (g_eMuleApp.m_pGlobPrefs->GetIRCServer().Left(13).MakeLower() == _T("irc.irc-gate."))
@


1.64
log
@Autojoin #emule+netherlands channel {Madmax75adsl}.
@
text
@d324 2
d327 2
a328 2
						strIP.Format(_T("%i"), g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetIP());
						strPort.Format(_T("%i"), g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetPort());
@


1.63
log
@IRC server changed to irc.irc-gate.com {Madmax75adsl}.
@
text
@d819 3
@


1.62
log
@Autojoin #emule+portuguese channel {Madmax75adsl}.
@
text
@d796 1
a796 1
	if (g_eMuleApp.m_pGlobPrefs->GetIRCServer().Left(11).MakeLower() == _T("irc.redirc."))
@


1.61
log
@Changed IRC server to irc.redirc.com {Madmax75adsl}.
@
text
@d822 4
@


1.60
log
@#emule+english = #emule+.
@
text
@d796 1
a796 1
	if (g_eMuleApp.m_pGlobPrefs->GetIRCServer().Left(13).MakeLower() == _T("irc.freshirc."))
@


1.59
log
@Moved IRC VERSION messages to the status log.
@
text
@a803 3
			case MAKELANGID(LANG_ENGLISH, SUBLANG_DEFAULT):
				pcChannel = _T("english");
				break;
@


1.58
log
@Added some more langauges to auto-join in IRC
@
text
@d245 1
a245 1
					m_pWndIRC->AddMessage(strTarget, _T(""), RGB(255, 0, 0), _T("* [%s] VERSION"), strSource);
d285 1
a285 1
					m_pWndIRC->AddMessage(strSource, _T(""), RGB(255, 0, 0), _T("* [%s] VERSION"), strSource);
@


1.57
log
@Minor optimization of the previously added feature.
@
text
@d804 15
@


1.56
log
@IRC autojoin to #emule+ and eMule localized language channel if supported.
@
text
@d791 1
a791 1
	CString			strRawPerform, strChannel;
d798 2
d804 12
a815 12
		case MAKELANGID(LANG_ITALIAN, SUBLANG_DEFAULT):
			strChannel = _T("italian");
			break;
		case MAKELANGID(LANG_POLISH, SUBLANG_DEFAULT):
			strChannel = _T("polish");
			break;
		case MAKELANGID(LANG_RUSSIAN, SUBLANG_DEFAULT):
			strChannel = _T("russian");
			break;
		case MAKELANGID(LANG_SPANISH, SUBLANG_DEFAULT):
			strChannel = _T("spanish");
			break;
d818 1
a818 1
		if (!strChannel.IsEmpty())
d821 1
a821 1
			strRawPerform += strChannel;
@


1.55
log
@Added an option in IRC to send Bold, Underline & Colored messages.
Small optimization in IRC and some minor changes/fixes.
@
text
@d791 1
a791 1
	CString			strRawPerform;
a792 2
//	if (g_eMuleApp.m_pGlobPrefs->GetIrcHelpChannel())
//		strRawPerform = "/" + GetResString(IDS_IRC_HELPCHANNELPERFORM) + "|";
d796 27
@


1.54
log
@Minor correction in channel title.
@
text
@d143 2
a144 2
	// I temp replace % with \004 as it will mess up sending this string with parameters later
	strRawMessage.Replace(_T('%'), _T('\004'));
d222 1
a222 1
			if (strMessage[0] == _T('\001'))
d255 1
a255 1
				m_pWndIRC->AddMessage(strTarget, strSource, 0x1000000, strMessage);
d262 1
a262 1
			if (strMessage[0] == _T('\001'))
d474 1
a474 1
				m_pWndIRC->AddMessage(strSource, strSource, 0x1000000, strMessage);
d512 1
a512 1
				strTemp.Insert(strTemp.GetLength() - 1, _T('\017'));
d556 1
a556 1
			strTemp.Insert(strTemp.GetLength() - 1, _T('\017'));
d581 1
a581 1
			strCommand.Replace(_T('\004'), _T('%'));
d707 1
a707 1
					strMessage.Replace(_T('\004'), _T('%'));
d759 1
a759 1
			strRawMessage.Replace(_T('\004'), _T('%'));
d780 1
a780 1
	m_pWndIRC->AddMessage(_T(""), _T(""), 0x1000000, strMessage);
@


1.53
log
@Minor fix in channel description & topic.
@
text
@d706 2
a708 1
					m_pWndIRC->AddMessage(strTarget2, _T(""), RGB(0, 147, 0), _T("* Channel Title: %s"), strMessage);
@


1.52
log
@changes/fixes
@
text
@d686 1
a686 1
			iChanDescIndex = strMessage.Find(_T(' '), iChanNumIndex + 1);
d690 1
a690 5
			{
				iChanDescIndex = strMessage.Find(_T(' '), iChanDescIndex + 1);
				if (iChanDescIndex > 0)
					strChanDesc = strMessage.Mid(iChanDescIndex);
			}
d696 1
a696 1
			int			iChannelIndex = strMessage.Find(_T('#'));
d700 1
a700 1
				int			iTopicIndex = strMessage.Find(_T(':'), iChannelIndex + 1);
d704 2
a705 2
					strTarget2 = strMessage.Mid(iChannelIndex, iTopicIndex - iChannelIndex - 1);
					strMessage = strMessage.Mid(iTopicIndex + 1);
@


1.51
log
@some code from official
@
text
@d613 2
a614 1
		else if (iCommand == 275 || (iCommand >= 307 && iCommand <= 320) || iCommand == 378) // RPL_WHOIS*
d618 1
a618 1
			if (iNameIndex >= 0 && iNameIndex + 1 < strMessage.GetLength()) 
d628 1
a628 1
						if (iNameIndex >= 0)
d645 1
a645 1
							CTime		ctTime((iTimeIndexEnd == -1) ? 0 : _tstoi(strMessage.Mid(iTimeIndex, iTimeIndexEnd - iTimeIndex - 1)) * 10);
d700 49
a748 4
			strTarget2 = strMessage.Mid(strMessage.Find(_T('#')), strMessage.Find(_T(':')) - strMessage.Find(_T('#')) -1);
			strMessage = strMessage.Mid(strMessage.Find(_T(':')) + 1);
			m_pWndIRC->SetTitle(strTarget2, strMessage);
			m_pWndIRC->AddMessage(strTarget2, _T(""), RGB(0, 147, 0), _T("* Channel Title: %s"), strMessage);
@


1.50
log
@minor changes
@
text
@d128 7
d137 2
d143 1
d149 2
d152 12
a163 1
	iCommandIndex = strRawMessage.Find(_T(' '));
d165 16
a180 2
	strCommand = strRawMessage.Mid(iCommandIndex + 1, iTargetIndex - iCommandIndex - 1);

d183 1
d189 1
d194 2
d197 2
d210 5
a214 1
		strSource = strRawMessage.Mid(1, iCommandIndex - 1);
d221 1
d224 6
d233 7
a239 1
					m_pWndIRC->AddMessage(strTarget, _T(""), RGB(156, 0, 156), _T("* %s%s"), strSource, strMessage.Mid(6));
d244 1
d254 2
a255 1
                m_pWndIRC->AddMessage(strTarget, strSource, 0x1000000, strMessage);
d261 1
d264 6
d273 7
a279 1
					m_pWndIRC->AddMessage(strSource, _T(""), RGB(0, 147, 0), _T("* %s%s"), strSource, strMessage.Mid(6));
d284 1
d292 6
d303 2
d306 1
d311 2
d314 1
d316 1
d324 1
d330 1
d339 1
a339 1
				if (strMessage.Left(8) == _T("SENDLINK"))
d341 1
a341 23
//Needs more coding (Mainly security) before releasing.

					//if (!g_eMuleApp.m_pGlobPrefs->GetIrcAcceptLinks())
					//{
						if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
							m_pWndIRC->NoticeMessage(_T("*EmuleProto*"), strSource + _T(" attempted to send you a file."));
						return;
					//}
					/*
					strMessage = strMessage.Mid(8);
					int index1, index2;
					index1 = strMessage.Find("|");
					if (index1 == -1 || index1 == strMessage.GetLength())
						return;
					index2 = strMessage.Find("|", index1+1);
					if (index2 == -1 || index1 > index2)
						return;
					CString hash = strMessage.Mid(index1+1, index2-index1-1);
					uchar userid[16];
					if (hash.GetLength()!=32 || !DecodeBase16(hash.GetBuffer(),hash.GetLength(),userid,ARRSIZE(userid)))
							return;
					CString RecieveString, build;
					if (!g_eMuleApp.friendlist->SearchFriend(userid, 0, 0))
d343 1
a343 2
						if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
							m_pwndIRC->NoticeMessage("*EmuleProto*", _T("Someone attempt to send you a file but wasn't a friend. If you wanted to accept the file, disable From friends only in the preferences."));
d346 1
a346 13
					RecieveString = strMessage.Mid(index2+1);
					if (!RecieveString.IsEmpty())
					{
						build.Format(GetResString(IDS_IRC_RECIEVEDLINK), strSource, RecieveString);
						if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
							m_pwndIRC->NoticeMessage("*EmuleProto*", build);
						ProcessLink(RecieveString);
					}
					return;
					*/
				}
				if (strMessage.Left(9) == _T("REPFRIEND"))
				{
d352 2
d355 1
d360 2
d363 1
d367 1
d371 1
d375 2
d378 1
d384 2
d387 1
d393 2
d396 1
d402 2
d405 1
d411 2
d414 1
d421 2
d424 1
d427 42
d481 1
d484 1
d490 1
d496 1
d499 1
d503 1
d519 1
d525 1
d531 1
d534 1
d538 1
d544 1
d559 1
d564 1
d572 18
a589 5
		iCommandIndex = strMessage.Find(_T(' '), 1);
		strCommand = strMessage.Mid(1, iCommandIndex - 1);
		strCommand.Replace(_T('\004'), _T('%'));
		strTarget2 = strMessage.Mid(iCommandIndex + 1);
		m_pWndIRC->ParseChangeMode(strTarget, strSource, strCommand, strTarget2);
d594 1
@


1.49
log
@minor changes
@
text
@d377 2
a378 4
			CString			strMessage2 = strMessage, strLine;

			strMessage2.Trim();
			strLine.Format(GetResString(IDS_IRC_HASPARTED), strSource, strTarget, strMessage2);
d380 4
a383 2
				strLine.Truncate(strLine.GetLength() - 3);
			m_pWndIRC->AddMessage(strTarget, _T(""), RGB(51, 102, 255), strLine);
d415 6
d424 1
a424 1
			m_pWndIRC->AddMessage(_T(""), _T(""), RGB(252, 127, 0), GetResString(IDS_IRC_WASKICKEDBY), strTarget2, strSource, strMessage);
d429 1
a429 1
			m_pWndIRC->AddMessage(strTarget, _T(""), RGB(252, 127, 0), GetResString(IDS_IRC_WASKICKEDBY), strTarget2, strSource, strMessage);
@


1.48
log
@minor change
@
text
@d442 3
a444 3
		&& strCommand.GetAt(0) >= 48 && strCommand.GetAt(0) <= 58
		&& strCommand.GetAt(1) >= 48 && strCommand.GetAt(1) <= 58
		&& strCommand.GetAt(2) >= 48 && strCommand.GetAt(2) <= 58)
d461 1
a461 1
				if (strMessage.GetAt(iNameIndex + 1) == _T(':'))
d468 3
@


1.47
log
@some changes
@
text
@d455 1
a455 1
		else if ((iCommand >= 307 && iCommand <= 320) || iCommand == 378) // RPL_WHOIS*
@


1.46
log
@Color coded IRC channel list description;
Added "WhoIs" context menu to IRC nick list;
Added "Refresh" context menu to IRC channel list.
@
text
@d634 2
a635 2
	CString			iIdent;
	uint32			iIdent_int = 0;
d639 1
a639 1
		iIdent_int += g_eMuleApp.m_pGlobPrefs->GetUserHash()[i] * g_eMuleApp.m_pGlobPrefs->GetUserHash()[15 - i];
d641 3
a643 3
	iIdent.Format(_T("e%u"), iIdent_int);
	if (iIdent.GetLength() > 8)
		iIdent.Truncate(8);
d654 1
a654 1
	strUser = _T("USER ") + iIdent + _T(" 8 * :") + strVersion;
@


1.45
log
@minor change
@
text
@d137 1
a137 1
	int			iSourceIndex, iCommandIndex, iTargetIndex, iMessageIndex, iTarget2Index;
a386 1

a391 1

a396 1

a406 1

d440 5
a444 1
	if (strCommand == _T("001"))
d446 1
a446 5
		m_pWndIRC->SetLoggedIn(true);
		if (g_eMuleApp.m_pGlobPrefs->GetIRCListOnConnect())
			m_pIrcSocket->SendString(_T("list"));
		ParsePerform();
	}
d448 10
a457 5
	if (strCommand == _T("321"))
	{
		m_pWndIRC->ResetServerChannelList();
		return;
	}
d459 49
a507 4
	if (strCommand == _T("322"))
	{
		CString			strChanName, strChanNum, strChanDesc;
		int				iChanNameIndex, iChanNumIndex, iChanDescIndex;
d509 4
a512 6
		iChanNameIndex = strMessage.Find(_T(' '));
		iChanNumIndex = strMessage.Find(_T(' '), iChanNameIndex + 1);
		iChanDescIndex = strMessage.Find(_T(' '), iChanNumIndex + 1);
		strChanName = strMessage.Mid(iChanNameIndex + 1, iChanNumIndex - iChanNameIndex - 1);
		strChanNum = strMessage.Mid(iChanNumIndex + 1, iChanDescIndex - iChanNumIndex - 1);
		if (iChanDescIndex > 0)
d514 13
a526 1
			iChanDescIndex = strMessage.Find(_T(' '), iChanDescIndex + 1);
d528 15
a542 1
				strChanDesc = strMessage.Mid(iChanDescIndex);
d544 12
a555 15
		m_pWndIRC->AddChannelToList(strChanName, strChanNum, strChanDesc);
		return;
	}
	if (strCommand == _T("332"))
	{
		strTarget2 = strMessage.Mid(strMessage.Find(_T('#')), strMessage.Find(_T(':')) - strMessage.Find(_T('#')) -1);
		strMessage = strMessage.Mid(strMessage.Find(_T(':')) + 1);
		m_pWndIRC->SetTitle(strTarget2, strMessage);
		m_pWndIRC->AddMessage(strTarget2, _T(""), RGB(0, 147, 0), _T("* Channel Title: %s"), strMessage);
		return;
	}
	if (strCommand == _T("353"))
	{
		int				iGetNickChannelIndex, iGetNickIndex, iCount = 0;
		CString			strGetNickChannel, strGetNick;
d557 16
a572 15
		VERIFY ( (iGetNickChannelIndex = strRawMessage.Find(_T(' '), iTargetIndex + 1)) != (-1) );
		iGetNickChannelIndex = strRawMessage.Find(_T(' '), iTargetIndex + 1);
		iGetNickIndex = strRawMessage.Find(_T(' '), iGetNickChannelIndex + 3);
		strGetNickChannel = strRawMessage.Mid(iGetNickChannelIndex + 2, iGetNickIndex - iGetNickChannelIndex - 2);
		iGetNickChannelIndex = strRawMessage.Find(_T(':'), iGetNickChannelIndex);
		iGetNickIndex = strRawMessage.Find(_T(' '), iGetNickChannelIndex);
		strRawMessage.Replace(_T('\004'), _T('%'));
		
		while(iGetNickIndex > 0)
		{
			iCount++;
			strGetNick = strRawMessage.Mid(iGetNickChannelIndex + 1, iGetNickIndex - iGetNickChannelIndex - 1);
			iGetNickChannelIndex = iGetNickIndex;
			m_pWndIRC->NewNick(strGetNickChannel, strGetNick);
			iGetNickIndex = strRawMessage.Find(_T(' '), iGetNickChannelIndex + 1);
a573 8
		return;
	}
	if (strCommand == _T("433"))
	{
		if (!m_pWndIRC->GetLoggedIn())
			Disconnect();
		m_pWndIRC->AddMessage(_T(""), _T(""), RGB(252, 127, 0), GetResString(IDS_IRC_NICKUSED));
		return;
d575 1
@


1.44
log
@formatting / name changes
@
text
@d383 1
a383 1
			m_pWndIRC->AddMessage(strTarget, _T(""), RGB(0, 0, 255), strLine);
@


1.43
log
@some more changes
@
text
@d29 4
a32 4
    ircsocket = NULL;
	m_pwndIRC = 0; 
	preParseBuffer = _T("");
	srand( (unsigned)time( NULL ) );
d40 1
a40 1
void CIrcMain::PreParseMessage( CString buffer )
d42 14
a55 11
	CString rawMessage;
	preParseBuffer += buffer;
	int test = preParseBuffer.Find(_T('\n'));
	while( test != -1 )
	{
		rawMessage = preParseBuffer.Left(test);
		rawMessage.Remove(_T('\n'));
		rawMessage.Remove(_T('\r'));
		ParseMessage( rawMessage );
		preParseBuffer = preParseBuffer.Mid(test+1);
		test = preParseBuffer.Find(_T('\n'));
d61 1
a61 1
void CIrcMain::ProcessLink(const CString& ed2kLink )
d64 6
a69 3
		CString link;
		link=URLDecode(ed2kLink);
		CED2KLink* pLink = CED2KLink::CreateLinkFromUrl(link);
d73 1
a73 1
		case CED2KLink::kFile:
d75 2
a76 1
				CED2KFileLink* pFileLink = pLink->GetFileLink();
d81 1
a81 1
		case CED2KLink::kServerList:
d83 2
a84 1
				CED2KServerListLink* pListLink = pLink->GetServerListLink(); 
d86 4
a89 2
				CString strAddress = pListLink->GetAddress(); 
				if(strAddress.GetLength() != 0)
d93 1
a93 1
		case CED2KLink::kServer:
d95 3
a97 2
				CString defName;
				CED2KServerLink* pSrvLink = pLink->GetServerLink();
d99 3
a101 1
				CServer* pSrv = new CServer(pSrvLink->GetPort(),pSrvLink->GetIP());	//netwolf 07.05.03 support non-ip ed2k server link
d103 2
a104 2
				pSrvLink->GetDefaultName(defName);
				pSrv->SetListName(defName.GetBuffer());
d107 1
a107 1
				if( g_eMuleApp.m_pGlobPrefs->GetManualHighPrio() )
d110 1
a110 1
				if (!g_eMuleApp.m_pdlgEmule->m_wndServer.m_ctlServerList.AddServer(pSrv,true)) 
d116 2
a117 2
		default:
			break;
d124 1
a124 1
}
d126 1
a126 1
void CIrcMain::ParseMessage( CString rawMessage )
d128 1
a128 1
	if( rawMessage.Left(6) == _T("PING :") )
d130 2
a131 2
		ircsocket->SendString(_T("PONG ") + rawMessage.Right(rawMessage.GetLength()-6));
		m_pwndIRC->AddMessage(_T(""), _T(""), RGB(0, 147, 0), _T("PING?/PONG") );
d134 19
a152 30
	rawMessage.Replace(_T('%'), _T('\004'));
	CString source, sourceIp, command, target, target2, message;
	int sourceIndex = -1;
	int commandIndex = -1;
	int targetIndex = -1;
	int target2Index = -1;
	int messageIndex = -1;

	sourceIndex = rawMessage.Find( _T('!') );
	commandIndex = rawMessage.Find( _T(' ') );
	targetIndex = rawMessage.Find( _T(' '), commandIndex + 1);
	command = rawMessage.Mid( commandIndex + 1, targetIndex - commandIndex - 1);

	if( sourceIndex < commandIndex && sourceIndex > 0)
	{
		source = rawMessage.Mid( 1, sourceIndex - 1);
		sourceIp = rawMessage.Mid( sourceIndex + 1, commandIndex - sourceIndex - 1);
		messageIndex = rawMessage.Find( _T(' '), targetIndex + 1);
		if( messageIndex > sourceIndex )
		{
			target = rawMessage.Mid( targetIndex + 1, messageIndex - targetIndex - 1);
			message = rawMessage.Mid( messageIndex );
			if( target.Left(1) == _T(":") )
				target = target.Mid(1);
			if( message.Left(1) == _T(":") )
				message = message.Mid(1);
			if( target.Left(2) == _T(" :") )
				target = target.Mid(2);
			if( message.Left(2) == _T(" :") )
				message = message.Mid(2);
d155 9
a163 11
		{
			target = rawMessage.Mid( targetIndex + 1, rawMessage.GetLength() - targetIndex - 1);
			if( target.Left(1) == _T(":") )
				target = target.Mid(1);
			if( message.Left(1) == _T(":") )
				message = message.Mid(1);
			if( target.Left(2) == _T(" :") )
				target = target.Mid(2);
			if( message.Left(2) == _T(" :") )
				message = message.Mid(2);
		}
d167 2
a168 2
		source = rawMessage.Mid( 1, commandIndex - 1);
		message = rawMessage.Mid( targetIndex + 1);
d170 1
a170 1
	if( command == _T("PRIVMSG") )
d172 1
a172 1
		if ( target.Left(1) == _T("#") )
d174 1
a174 1
			if( message.Left(1) == _T("\001") )
d176 2
a177 2
				message = message.Mid( 1, message.GetLength() - 2);
				if( message.Left(6) == _T("ACTION") )
d179 1
a179 1
					m_pwndIRC->AddMessage(target, _T(""), RGB(156, 0, 156), _T("* %s%s"), source, message.Mid(6));
d182 1
a182 1
				if( message.Left(7) == _T("VERSION"))
d184 4
a187 7
					m_pwndIRC->AddMessage(target, _T(""), RGB(255, 0, 0), _T("* [%s] VERSION"), source);
					version = CString("ePlus" CURRENT_VERSION_LONG Irc_Version);

					CString build;

					build.Format( _T("NOTICE %s :\001VERSION %s\001"), source, version );
					ircsocket->SendString( build );
d193 1
a193 1
                m_pwndIRC->AddMessage(target, source, 0x1000000, message);
d199 1
a199 1
			if( message.Left(1) == _T("\001") )
d201 2
a202 2
				message = message.Mid(1, message.GetLength() -2);
				if( message.Left(6) == _T("ACTION"))
d204 1
a204 1
					m_pwndIRC->AddMessage(source, _T(""), RGB(0, 147, 0), _T("* %s%s"), source, message.Mid(6));
d207 1
a207 1
				if( message.Left(7) == _T("VERSION"))
d209 4
a212 5
					m_pwndIRC->AddMessage(source, _T(""), RGB(255, 0, 0), _T("* [%s] VERSION"), source);
					version = CString("ePlus" CURRENT_VERSION_LONG Irc_Version);
					CString build;
					build.Format( _T("NOTICE %s :\001VERSION %s\001"), source, version );
					ircsocket->SendString( build );
d214 1
a214 1
				if( message.Left(9) == _T("RQSFRIEND") )
d216 5
a220 3
					message = message.Mid(9);
					int index1 = message.Find(_T('|'));
					if( index1 == -1 || index1 == message.GetLength() )
d222 4
a225 2
					int index2 = message.Find(_T('|'), index1 + 1);
					if( index2 == -1 || index1 > index2 )
d227 2
a228 2
					CString sverify = message.Mid(index1+1, index2 - index1 - 1);
					CString build;
d230 12
a241 11
					CString sip = _T("0.0.0.0");
					if( g_eMuleApp.m_pServerConnect->IsConnected() )
						sip.Format( _T("%i"), g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetIP());
					CString sport = _T("0");
					if( g_eMuleApp.m_pServerConnect->IsConnected() )
						sport.Format( _T("%i"), g_eMuleApp.m_pServerConnect->GetCurrentServer()->GetPort());
					uint32 clientId = 0;
					if( g_eMuleApp.m_pServerConnect->IsConnected() )
						if( !g_eMuleApp.m_pServerConnect->IsLowID() )
							clientId = g_eMuleApp.m_pServerConnect->GetClientID();
					build.Format( _T("PRIVMSG %s :\001REPFRIEND ePlus%s%s|%s|%i:%i|%s:%s|%s|\001"), source, (CString)CURRENT_VERSION_LONG, (CString)Irc_Version, sverify, clientId, g_eMuleApp.m_pGlobPrefs->GetListenPort(), sip, sport, HashToString(g_eMuleApp.m_pGlobPrefs->GetUserHash()));
d243 3
a245 4
					ircsocket->SendString( build );
					build.Format( _T("%s %s"), source, GetResString(IDS_IRC_ADDASFRIEND));
					if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreEmuleProtoInfoMessage() )
						m_pwndIRC->NoticeMessage( _T("*EmuleProto*"), build );
d248 1
a248 1
				if( message.Left(8) == _T("SENDLINK") )
d252 1
a252 1
					//if ( !g_eMuleApp.m_pGlobPrefs->GetIrcAcceptLinks() )
d254 2
a255 2
						if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
							m_pwndIRC->NoticeMessage( _T("*EmuleProto*"), source + _T(" attempted to send you a file."));
d258 2
a259 1
					/*message = message.Mid(8);
d261 2
a262 2
					index1 = message.Find( "|" );
					if( index1 == -1 || index1 == message.GetLength() )
d264 2
a265 2
					index2 = message.Find( "|", index1+1 );
					if( index2 == -1 || index1 > index2 )
d267 1
a267 1
					CString hash = message.Mid(index1+1, index2-index1-1);
d272 1
a272 1
					if(!g_eMuleApp.friendlist->SearchFriend(userid, 0, 0))
d274 2
a275 2
						if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
							m_pwndIRC->NoticeMessage( "*EmuleProto*", _T("Someone attempt to send you a file but wasn't a friend. If you wanted to accept the file, disable From friends only in the preferences."));
d278 2
a279 2
					RecieveString = message.Mid( index2+1 );
					if( !RecieveString.IsEmpty() )
d281 4
a284 4
						build.Format( GetResString(IDS_IRC_RECIEVEDLINK), source, RecieveString );
						if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
							m_pwndIRC->NoticeMessage( "*EmuleProto*", build );
						ProcessLink( RecieveString );
d286 2
a287 1
					return;*/
d289 1
a289 1
				if( message.Left(9) == _T("REPFRIEND") )
d291 5
a295 3
					message = message.Mid(9);
					int index1 = message.Find(_T('|'));
					if( index1 == -1 || index1 == message.GetLength() )
d297 4
a300 2
					int index2 = message.Find(_T('|'), index1 + 1);
					if( index2 == -1 || index1 > index2 )
d302 4
a305 2
					CString sverify = message.Mid(index1+1, index2-index1-1);
					if( verify != _tstoi(sverify))
d307 1
d309 8
a316 2
					index1 = message.Find(_T(':'), index2 + 1);
					if( index1 == -1 || index2 > index1 )
d318 11
a328 15
					uint32 newClientID = _tstoi(message.Mid( index2 + 1, index1 - index2 -1));
					index2 = message.Find( _T('|'), index1+1 );
					if( index2 == -1 || index1 >= index2 )
						return;
					uint32 newClientPort = _tstoi(message.Mid( index1 + 1, index2 - index1 -1));
					index1 = message.Find( _T(':'), index2+1);
					if( index1 == -1 || index2 >= index1 )
						return;
					uint32 newClientServerIP = _tstoi(message.Mid( index2 + 1, index1 - index2 -1));
					index2 = message.Find( _T('|'), index1+1);
					if( index2 == -1 || index1 >= index2 )
						return;
					uint32 newClientServerPort = _tstoi(message.Mid( index1 + 1, index2 - index1 -1));
					index1 = message.Find( _T('|'), index2+1);
					if( index1 == -1 || index2 >= index1 )
d330 12
a341 3
					CString hash = message.Mid( index2 + 1, index1 - index2 -1);
					uchar userid[16];
					if (hash.GetLength()!=32 || !DecodeBase16(hash.GetBuffer(),hash.GetLength(),userid,ARRSIZE(userid)))
d343 2
a344 1
					g_eMuleApp.m_pFriendList->AddFriend( userid, 0, newClientID, newClientPort, 0, source, 1);
d350 1
a350 1
				m_pwndIRC->AddMessage(source, source, 0x1000000, message);
d355 1
a355 1
	if( command == _T("JOIN") )
d357 1
a357 1
		if (source == nick)
d359 1
a359 1
			m_pwndIRC->AddMessage(target, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_HASJOINED), source, target);
d363 2
a364 2
			m_pwndIRC->AddMessage(target, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_HASJOINED), source, target);
		m_pwndIRC->NewNick(target, source);
d367 1
a367 1
	if( command == _T("PART") )
d369 1
a369 1
		if (source == nick)
d371 1
a371 1
			m_pwndIRC->RemoveChannel(target);
d374 2
a375 2
		m_pwndIRC->RemoveNick(target, source);
		if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
d377 1
a377 1
			CString strMessage = message, strLine;
d379 3
a381 3
			strMessage.Trim();
			strLine.Format(GetResString(IDS_IRC_HASPARTED), source, target, strMessage);
			if (strMessage.GetLength() == 0)
d383 1
a383 1
			m_pwndIRC->AddMessage(target, _T(""), RGB(0, 0, 255), strLine);
d388 1
a388 1
	if( command == _T("TOPIC") )
d390 1
a390 1
		m_pwndIRC->SetTitle(target, message);
d394 1
a394 1
	if( command == _T("QUIT") )
d396 1
a396 1
		m_pwndIRC->DeleteNickInAll( source, message );
d400 1
a400 1
	if( command == _T("NICK") )
d402 1
a402 1
		if( source == nick )
d404 2
a405 2
			nick = target;
//			m_pwenIRC->SetNick( nick );
d407 1
a407 1
		m_pwndIRC->ChangeAllNick( source, target );
d411 1
a411 1
	if( command == _T("KICK") )
d413 2
a414 2
		target2Index = message.Find(_T(':'));
		if( target2Index > 0 )
d416 2
a417 2
			target2 = message.Mid(1, target2Index - 2);
			message = message.Mid(target2Index + 1);
d419 1
a419 1
		if( target2 == nick )
d421 2
a422 2
			m_pwndIRC->RemoveChannel(target);
			m_pwndIRC->AddMessage(_T(""), _T(""), RGB(252, 127, 0), GetResString(IDS_IRC_WASKICKEDBY), target2, source, message);
d425 3
a427 3
		m_pwndIRC->RemoveNick(target, target2);
		if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
			m_pwndIRC->AddMessage(target, _T(""), RGB(252, 127, 0), GetResString(IDS_IRC_WASKICKEDBY), target2, source, message);
d430 1
a430 1
	if( command == _T("MODE") )
d432 5
a436 5
		commandIndex = message.Find( _T(' '), 1 );
		command = message.Mid( 1, commandIndex - 1 );
		command.Replace(_T('\004'), _T('%'));
		target2 = message.Mid( commandIndex + 1 );
		m_pwndIRC->ParseChangeMode(target, source, command, target2);
d439 1
a439 1
	if( command == _T("NOTICE"))
d441 1
a441 1
		m_pwndIRC->NoticeMessage(source, message);
d444 1
a444 1
	if( command == _T("001") )
d446 3
a448 3
		m_pwndIRC->SetLoggedIn( true );
		if( g_eMuleApp.m_pGlobPrefs->GetIRCListOnConnect() )
			ircsocket->SendString(_T("list"));
d452 1
a452 1
	if( command == _T("321") )
d454 1
a454 1
		m_pwndIRC->ResetServerChannelList();
d458 1
a458 1
	if( command == _T("322") )
d460 9
a468 8
		CString chanName, chanNum, chanDesc;
		int chanNameIndex, chanNumIndex, chanDescIndex;
		chanNameIndex = message.Find( _T(' ') );
		chanNumIndex = message.Find( _T(' '), chanNameIndex + 1 );
		chanDescIndex = message.Find( _T(' '), chanNumIndex + 1);
		chanName = message.Mid( chanNameIndex + 1,  chanNumIndex - chanNameIndex - 1 );
		chanNum = message.Mid( chanNumIndex + 1, chanDescIndex - chanNumIndex - 1 );
		if( chanDescIndex > 0 )
d470 3
a472 5
			chanDescIndex = message.Find( _T(' '), chanDescIndex+1 );
			if( chanDescIndex > 0)
				chanDesc = message.Mid( chanDescIndex );
			else
				chanDesc.Empty();
d474 1
a474 1
		m_pwndIRC->AddChannelToList( chanName, chanNum, chanDesc );
d477 1
a477 1
	if( command == _T("332") )
d479 4
a482 4
		target2 = message.Mid( message.Find( _T('#') ), message.Find( _T(':') )-message.Find( _T('#') ) -1 );
		message = message.Mid( message.Find(_T(':')) + 1);
		m_pwndIRC->SetTitle(target2, message);
		m_pwndIRC->AddMessage(target2, _T(""), RGB(0, 147, 0), _T("* Channel Title: %s"), message);
d485 1
a485 1
	if( command == _T("353") )
d487 12
a498 13
		int getNickChannelIndex = -1;
		CString getNickChannel;
		int getNickIndex = 1;
		CString getNick;
		int count = 0;
		VERIFY ( (getNickChannelIndex = rawMessage.Find(_T(' '), targetIndex + 1)) != (-1) );
		getNickChannelIndex = rawMessage.Find(_T(' '), targetIndex + 1);
		getNickIndex = rawMessage.Find( _T(' '), getNickChannelIndex + 3);
		getNickChannel = rawMessage.Mid( getNickChannelIndex + 2, getNickIndex - getNickChannelIndex - 2);
		getNickChannelIndex = rawMessage.Find( _T(':'), getNickChannelIndex );
		getNickIndex = rawMessage.Find( _T(' '), getNickChannelIndex);
		rawMessage.Replace(_T('\004'), _T('%'));
		while( getNickIndex > 0 )
d500 5
a504 5
			count ++;
			getNick = rawMessage.Mid( getNickChannelIndex + 1, getNickIndex - getNickChannelIndex - 1);
			getNickChannelIndex = getNickIndex;
			m_pwndIRC->NewNick( getNickChannel, getNick );
			getNickIndex = rawMessage.Find( _T(' '), getNickChannelIndex + 1 );
d508 1
a508 1
	if( command == _T("433") )
d510 1
a510 1
		if( !m_pwndIRC->GetLoggedIn() )
d512 1
a512 1
		m_pwndIRC->AddMessage(_T(""), _T(""), RGB(252, 127, 0), GetResString(IDS_IRC_NICKUSED));
d515 1
a515 1
	m_pwndIRC->AddMessage(_T(""), _T(""), 0x1000000, message);
d520 2
a521 2
	ircsocket->SendString(user);
	ircsocket->SendString(_T("NICK ") + nick);
d526 4
a529 3
	CString rawPerform;
//	if(g_eMuleApp.m_pGlobPrefs->GetIrcHelpChannel())
//		rawPerform = "/" + GetResString(IDS_IRC_HELPCHANNELPERFORM) + "|";
d531 3
a533 2
		rawPerform += g_eMuleApp.m_pGlobPrefs->GetIrcPerformString();
	if (rawPerform.IsEmpty())
d535 33
a567 31
	int index = 0;
	CString nextPerform;
	while (rawPerform.Find(_T('|')) != -1)
	{
		index = rawPerform.Find(_T('|'));
		nextPerform = rawPerform.Left(index);
		nextPerform.TrimLeft(_T(' '));
		if (nextPerform.Left(1) == _T('/'))
			nextPerform = nextPerform.Mid(1);
		if (nextPerform.Left(3) == _T("msg"))
			nextPerform = _T("PRIVMSG") + nextPerform.Mid(3);
		if ((nextPerform.Left(16)).CompareNoCase( _T("PRIVMSG nickserv")) == 0)
			nextPerform = _T("ns") + nextPerform.Mid(16);
		if ((nextPerform.Left(16)).CompareNoCase( _T("PRIVMSG chanserv")) == 0)
			nextPerform = _T("cs") + nextPerform.Mid(16);
		ircsocket->SendString(nextPerform);
		rawPerform = rawPerform.Mid(index + 1);
	}
	if (!rawPerform.IsEmpty())
	{
		rawPerform.TrimLeft(_T(' '));
		if (rawPerform.Left(1) == _T('/'))
			rawPerform = rawPerform.Mid(1);
		if (rawPerform.Left(3) == _T("msg"))
			rawPerform = _T("PRIVMSG") + rawPerform.Mid(3);
		if ((rawPerform.Left(16)).CompareNoCase( _T("PRIVMSG nickserv")) == 0)
			rawPerform = _T("ns") + rawPerform.Mid(16);
		if ((rawPerform.Left(16)).CompareNoCase( _T("PRIVMSG chanserv")) == 0)
			rawPerform = _T("cs") + rawPerform.Mid(16);
		if (!rawPerform.IsEmpty())
			ircsocket->SendString(rawPerform);
d573 23
a595 21
	CString ident;
	uint32 ident_int = 0;
	for( int i = 0; i < 16; i++)
	{
		ident_int += g_eMuleApp.m_pGlobPrefs->GetUserHash()[i] * g_eMuleApp.m_pGlobPrefs->GetUserHash()[15-i];
	}
	ident.Format(_T("e%u"), ident_int);
	if( ident.GetLength() > 8 )
		ident.Truncate(8);
	ircsocket = new CIrcSocket(this);
	nick = (CString)g_eMuleApp.m_pGlobPrefs->GetIRCNick();
	nick.Remove(_T('.'));
	nick.Remove(_T(' '));
	nick.Remove(_T(':'));
	nick.Remove(_T('/'));
	nick.Remove(_T('@@'));
	nick = nick.Left(20);
	version = _T("ePlus") CURRENT_VERSION_LONG Irc_Version;
	user = _T("USER ") + ident + _T(" 8 * :") + version;
	ircsocket->Create();
	ircsocket->Connect();
d598 1
a598 1
void CIrcMain::Disconnect(bool isshuttingdown)
d600 6
a605 6
	ircsocket->Close();
	if (ircsocket) 
		delete ircsocket;
	ircsocket = NULL;
	if( !isshuttingdown )
		m_pwndIRC->SetConnectStatus(false);
d608 1
a608 1
void CIrcMain::SetConnectStatus( bool bConnected )
d610 1
a610 1
	m_pwndIRC->SetConnectStatus( bConnected );
d613 1
a613 1
int CIrcMain::SendString( CString send )
d615 1
a615 1
	return ircsocket->SendString(send);
@


1.42
log
@Small fix
@
text
@d117 2
a118 2
		ircsocket->SendString( _T("PONG ") + rawMessage.Right(rawMessage.GetLength()-6) );
		m_pwndIRC->AddStatus(  _T("PING?/PONG") );
d179 1
a179 1
					m_pwndIRC->AddMessage(target, _T(""), _T("* %s%s"), source, message.Mid(6));
d184 3
a186 1
					version = _T("ePlus") + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version;
d188 1
d196 1
a196 1
                m_pwndIRC->AddMessage( target, source, message);
d207 1
a207 1
					m_pwndIRC->AddMessage(source, _T(""), _T("* %s%s"), source, message.Mid(6));
d212 2
a213 1
					version = _T("ePlus") + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version;
d227 1
a227 1
					CString sverify = message.Mid(index1+1, index2-index1-1);
d329 1
a329 1
				m_pwndIRC->AddMessage( source, source, message);
d336 1
a336 1
		if( source == nick )
d338 1
a338 1
			m_pwndIRC->AddMessage(target, _T(""), GetResString(IDS_IRC_HASJOINED), source, target);
d341 2
a342 2
		if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
			m_pwndIRC->AddMessage(target, _T(""), GetResString(IDS_IRC_HASJOINED), source, target);
d348 1
a348 2
		CString test = nick;
		if ( source == nick )
d350 1
a350 1
			m_pwndIRC->RemoveChannel( target );
d353 1
a353 1
		m_pwndIRC->RemoveNick( target, source );
d356 2
a357 1
			CString strMessage = message;
a358 1
			CString strLine;
d362 1
a362 1
			m_pwndIRC->AddMessage(target, _T(""), strLine);
d369 1
a369 1
		m_pwndIRC->SetTitle( target, message );
d395 2
a396 2
			target2 = message.Mid( 1, target2Index - 2);
			message = message.Mid( target2Index + 1 );
d400 2
a401 2
			m_pwndIRC->RemoveChannel( target );
			m_pwndIRC->AddStatus(  GetResString(IDS_IRC_WASKICKEDBY), target2, source, message );
d404 1
a404 1
		m_pwndIRC->RemoveNick( target, target2 );
d406 1
a406 1
			m_pwndIRC->AddMessage(target, _T(""), GetResString(IDS_IRC_WASKICKEDBY), target2, source, message);
d415 1
a415 1
		m_pwndIRC->ParseChangeMode( target, source, command, target2 );
d420 1
a420 1
		m_pwndIRC->NoticeMessage( source, message );
d462 1
a462 1
		m_pwndIRC->AddMessage(target2, _T(""), _T("* Channel Title: %s"), message);
d493 1
a493 1
		m_pwndIRC->AddStatus(  GetResString(IDS_IRC_NICKUSED));
d496 1
a496 1
	m_pwndIRC->AddStatus( message );
@


1.41
log
@better string processing
@
text
@d179 1
a179 1
					m_pwndIRC->AddInfoMessage( target, _T("* %s%s"), source, message.Mid(6) );
d204 1
a204 1
					m_pwndIRC->AddInfoMessage( source, _T("* %s%s"), source, message.Mid(6) );
d334 1
a334 1
			m_pwndIRC->AddInfoMessage( target, GetResString(IDS_IRC_HASJOINED), source, target );
d338 2
a339 2
			m_pwndIRC->AddInfoMessage( target, GetResString(IDS_IRC_HASJOINED), source, target );
		m_pwndIRC->NewNick( target, source );
d359 1
a359 1
			m_pwndIRC->AddInfoMessage(target, strLine);
d403 1
a403 1
			m_pwndIRC->AddInfoMessage( target, GetResString(IDS_IRC_WASKICKEDBY), target2, source, message );
d458 2
a459 2
		m_pwndIRC->SetTitle( target2, message );
		m_pwndIRC->AddInfoMessage( target2, _T("* Channel Title: %s"), message );
@


1.40
log
@formatting + a more correct output of status messages
@
text
@d449 1
a449 1
				chanDesc = _T("");
d507 1
a507 1
	if(g_eMuleApp.m_pGlobPrefs->GetIrcUsePerform())
d509 1
a509 1
	if(rawPerform == _T("") )
d513 1
a513 1
	while( rawPerform.Find(_T('|')) != -1 )
d516 1
a516 1
		nextPerform = rawPerform.Left( index );
d518 1
a518 1
		if( nextPerform.Left(1) == _T('/'))
d522 1
a522 1
		if( (nextPerform.Left(16)).CompareNoCase( _T("PRIVMSG nickserv")  )== 0)
d524 1
a524 1
		if( (nextPerform.Left(16)).CompareNoCase( _T("PRIVMSG chanserv") )== 0)
d526 2
a527 2
		ircsocket->SendString( nextPerform );
		rawPerform = rawPerform.Mid( index+1 );
d529 1
a529 1
	if( !rawPerform.IsEmpty() )
d532 1
a532 1
		if( rawPerform.Left(1) == _T('/') )
d536 1
a536 1
		if( (rawPerform.Left(16)).CompareNoCase( _T("PRIVMSG nickserv")  )== 0)
d538 1
a538 1
		if( (rawPerform.Left(16)).CompareNoCase( _T("PRIVMSG chanserv") )== 0)
d540 2
a541 2
		if( !rawPerform.IsEmpty() )
			ircsocket->SendString( rawPerform );
@


1.39
log
@Some string processing improvements (thx Aw3)
@
text
@d31 1
a31 1
	preParseBuffer = "";
d44 1
a44 1
	int test = preParseBuffer.Find('\n');
d115 1
a115 1
	if( rawMessage.Left(6) == "PING :" )
d122 1
a122 1
	CString source;
a123 2
	CString sourceIp;
	CString command;
a124 1
	CString target;
a125 1
	CString target2;
a126 1
	CString message;
d129 3
a131 3
	sourceIndex = rawMessage.Find( '!' );
	commandIndex = rawMessage.Find( ' ' );
	targetIndex = rawMessage.Find( ' ', commandIndex + 1);
d138 1
a138 1
		messageIndex = rawMessage.Find( ' ', targetIndex + 1);
d143 1
a143 1
			if( target.Left(1) == ":" )
d145 1
a145 1
			if( message.Left(1) == ":" )
d147 1
a147 1
			if( target.Left(2) == " :" )
d149 1
a149 1
			if( message.Left(2) == " :" )
d155 1
a155 1
			if( target.Left(1) == ":" )
d157 1
a157 1
			if( message.Left(1) == ":" )
d159 1
a159 1
			if( target.Left(2) == " :" )
d161 1
a161 1
			if( message.Left(2) == " :" )
d170 1
a170 1
	if( command == "PRIVMSG" )
d172 1
a172 1
		if ( target.Left(1) == "#" )
d174 1
a174 1
			if( message.Left(1) == "\001" )
d177 1
a177 1
				if( message.Left(6) == "ACTION" )
d182 1
a182 1
				if( message.Left(7) == "VERSION")
d199 1
a199 1
			if( message.Left(1) == "\001" )
d202 1
a202 1
				if( message.Left(6) == "ACTION")
d207 1
a207 1
				if( message.Left(7) == "VERSION")
d214 1
a214 1
				if( message.Left(9) == "RQSFRIEND" )
d244 1
a244 1
				if( message.Left(8) == "SENDLINK" )
d283 1
a283 1
				if( message.Left(9) == "REPFRIEND" )
d300 1
a300 1
					index2 = message.Find( '|', index1+1 );
d304 1
a304 1
					index1 = message.Find( ':', index2+1);
d308 1
a308 1
					index2 = message.Find( '|', index1+1);
d312 1
a312 1
					index1 = message.Find( '|', index2+1);
d330 1
a330 1
	if( command == "JOIN" )
d335 1
a335 1
		return;
d342 1
a342 1
	if( command == "PART" )
d364 1
a364 1
	if( command == "TOPIC" )
d370 1
a370 1
	if( command == "QUIT" )
d376 1
a376 1
	if( command == "NICK" )
d387 1
a387 1
	if( command == "KICK" )
d389 1
a389 1
		target2Index = message.Find(':');
d406 1
a406 1
	if( command == "MODE" )
d408 1
a408 1
		commandIndex = message.Find( ' ', 1 );
d415 1
a415 1
	if( command == "NOTICE")
d420 1
a420 1
	if( command == "001" )
d428 1
a428 1
	if( command == "321" )
d434 1
a434 1
	if( command == "322")
d438 3
a440 3
		chanNameIndex = message.Find( ' ' );
		chanNumIndex = message.Find( ' ', chanNameIndex + 1 );
		chanDescIndex = message.Find( ' ', chanNumIndex + 1);
d445 1
a445 1
			chanDescIndex = message.Find( ' ', chanDescIndex+1 );
d449 1
a449 1
				chanDesc = "";
d454 1
a454 1
	if( command == "332" )
d456 2
a457 2
		target2 = message.Mid( message.Find( '#' ), message.Find( ':' )-message.Find( '#' ) -1 );
		message = message.Mid( message.Find(':') + 1);
d462 1
a462 1
	if( command == "353" )
d469 3
a471 3
		VERIFY ( (getNickChannelIndex = rawMessage.Find(' ', targetIndex + 1)) != (-1) );
		getNickChannelIndex = rawMessage.Find(' ', targetIndex + 1);
		getNickIndex = rawMessage.Find( ' ', getNickChannelIndex + 3);
d473 2
a474 2
		getNickChannelIndex = rawMessage.Find( ':', getNickChannelIndex );
		getNickIndex = rawMessage.Find( ' ', getNickChannelIndex);
d482 1
a482 1
			getNickIndex = rawMessage.Find( ' ', getNickChannelIndex + 1 );
d486 1
a486 1
	if( command == "433" )
d499 1
a499 2
	CString temp = _T("NICK ") + nick;
	ircsocket->SendString(temp);
d553 1
a553 1
	ident.Format("e%u", ident_int);
@


1.38
log
@Minor corrections; Removed unrequired initialization of CString members
@
text
@d359 1
a359 2
			strMessage.TrimLeft(_T(' '));
			strMessage.TrimRight(_T(' '));
d363 1
a363 1
				strLine = strLine.Left(strLine.GetLength() - 3);
d515 1
a515 1
	if(rawPerform == "" )
d519 1
a519 1
	while( rawPerform.Find('|') != -1 )
d521 1
a521 1
		index = rawPerform.Find( '|' );
d523 2
a524 2
		nextPerform.TrimLeft( ' ' );
		if( nextPerform.Left(1) == '/' )
d526 2
a527 2
		if (nextPerform.Left(3) == "msg")
			nextPerform = CString("PRIVMSG") + nextPerform.Mid(3);
d529 1
a529 1
			nextPerform = CString("ns") + nextPerform.Mid(16);
d531 1
a531 1
			nextPerform = CString("cs") + nextPerform.Mid(16);
d537 2
a538 2
		rawPerform.TrimLeft( ' ' );
		if( rawPerform.Left(1) == '/' )
d541 1
a541 1
			rawPerform = CString("PRIVMSG") + rawPerform.Mid(3);
d543 1
a543 1
			rawPerform = CString("ns") + rawPerform.Mid(16);
d545 1
a545 1
			rawPerform = CString("cs") + rawPerform.Mid(16);
@


1.37
log
@fixed security exploit in IRC module and Web server (from official) [katsyonak]
@
text
@d122 1
a122 1
	CString source = _T("");
d124 2
a125 2
	CString sourceIp = _T("");
	CString command = _T("");
d127 1
a127 1
	CString target = _T("");
d129 1
a129 1
	CString target2 = _T("");
d131 1
a131 1
	CString message = _T("");
d357 10
a366 1
			m_pwndIRC->AddInfoMessage( target, GetResString(IDS_IRC_HASPARTED), source, target, message );
d511 1
a511 1
	CString rawPerform = "";
@


1.36
log
@Improved string processing
@
text
@d219 1
a219 1
				if( message.Left(9) == "REQSFRIEND" )
d269 2
a270 1
					DecodeBase16(hash.GetBuffer(),hash.GetLength(),userid);
d322 2
a323 1
					DecodeBase16(hash.GetBuffer(),hash.GetLength(),userid);
@


1.35
log
@KuSh fix for sorting completing files when 'Show paused and stopped files last' is enabled ; Updated default IRC server to 'irc.freshirc.com' ; Show attempted file send source on IRC.
@
text
@d48 2
a49 2
		rawMessage.Replace( _T("\n"), _T(""));
		rawMessage.Replace( _T("\r"), _T(""));
d52 1
a52 1
		test = preParseBuffer.Find(_T("\n"));
d121 1
a121 1
	rawMessage.Replace( _T("%"), _T("\004") );
d222 1
a222 1
					int index1 = message.Find( _T("|") );
d225 1
a225 1
					int index2 = message.Find( _T("|"), index1+1 );
d290 1
a290 1
					int index1 = message.Find( _T("|") );
d293 1
a293 1
					int index2 = message.Find( _T("|"), index1+1 );
d300 1
a300 1
					index1 = message.Find( ":", index2+1);
d405 1
a405 1
		command.Replace( _T("\004"), _T("%") );
d470 1
a470 1
		rawMessage.Replace( _T("\004"), _T("%") );
d554 5
a558 5
	nick.Replace(_T("."), _T(""));
	nick.Replace(_T(" "), _T(""));
	nick.Replace(_T(":"), _T(""));
	nick.Replace(_T("/"), _T(""));
	nick.Replace(_T("@@"), _T(""));
d560 1
a560 1
	version = _T("ePlus") + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version;
@


1.34
log
@Improved hash to string conversion
@
text
@d256 1
a256 1
							m_pwndIRC->NoticeMessage( _T("*EmuleProto*"), _T("Someone attempted to send you a file."));
@


1.33
log
@minor change
@
text
@d241 1
a241 1
					build.Format( _T("PRIVMSG %s :\001REPFRIEND ePlus%s%s|%s|%i:%i|%s:%s|%s|\001"), source, (CString)CURRENT_VERSION_LONG, (CString)Irc_Version, sverify, clientId, g_eMuleApp.m_pGlobPrefs->GetListenPort(), sip, sport, EncodeBase16((const unsigned char*)g_eMuleApp.m_pGlobPrefs->GetUserHash(), 16));
@


1.32
log
@minor change
@
text
@d560 1
a560 1
	version = _T("eMule") + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version;
@


1.31
log
@Added RGB_LOG_ERROR, RGB_LOG_WARNING, RGB_LOG_NOTICE, RGB_LOG_DIMMED & RGB_LOG_SUCCESS for easier changing of log colors
@
text
@d189 1
a189 1
					version = _T("eMule") + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version;
d214 1
a214 1
					version = _T("eMule") + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version;
d241 1
a241 1
					build.Format( _T("PRIVMSG %s :\001REPFRIEND eMule%s%s|%s|%i:%i|%s:%s|%s|\001"), source, (CString)CURRENT_VERSION_LONG, (CString)Irc_Version, sverify, clientId, g_eMuleApp.m_pGlobPrefs->GetListenPort(), sip, sport, EncodeBase16((const unsigned char*)g_eMuleApp.m_pGlobPrefs->GetUserHash(), 16));
@


1.30
log
@Changed to predefined colors  - thx DoubleT ;-)
@
text
@d109 1
a109 1
		AddLogLine(true, RGB_LIGHT_ORANGE + GetResString(IDS_LINKNOTADDED));
@


1.29
log
@Added some colors to the logs...
@
text
@d100 1
a100 1
					AddLogLine(true,GetResString(IDS_SERVERADDED), pSrv->GetListName());
d109 1
a109 1
		AddLogLine(true, _T("<COLOR=255,102,0>") + GetResString(IDS_LINKNOTADDED));
@


1.28
log
@Converted IRC/Messages to Rich Edit  (added copy text to clipboard & save logs with colors as RTF)
@
text
@d109 1
a109 1
		AddLogLine(true, IDS_LINKNOTADDED);
@


1.27
log
@updated IRC code to official v0.30c
@
text
@d30 1
a30 1
	m_pwndIRC = 0; // i_a 
d40 2
a41 1
void CIrcMain::PreParseMessage( CString buffer ){
d45 2
a46 1
	while( test != -1 ){
d58 2
a59 1
void CIrcMain::ProcessLink(const CString& ed2kLink ) {
d65 2
a66 1
		switch (pLink->GetKind()) {
d113 4
a116 2
void CIrcMain::ParseMessage( CString rawMessage ){
	if( rawMessage.Left(6) == "PING :" )	{
d139 2
a140 1
	if( sourceIndex < commandIndex && sourceIndex > 0)	{
d144 2
a145 1
		if( messageIndex > sourceIndex ){
d157 2
a158 1
		else{
d160 8
a167 8
				if( target.Left(1) == ":" )
					target = target.Mid(1);
				if( message.Left(1) == ":" )
					message = message.Mid(1);
				if( target.Left(2) == " :" )
					target = target.Mid(2);
				if( message.Left(2) == " :" )
					message = message.Mid(2);
d170 2
a171 1
	else{
d175 6
a180 3
	if( command == "PRIVMSG" ){
		if ( target.Left(1) == "#" ){
			if( message.Left(1) == "\001" ){
d182 2
a183 1
				if( message.Left(6) == "ACTION" ){
d187 2
a188 1
				if( message.Left(7) == "VERSION"){
d196 2
a197 2
			
			else{
d202 4
a205 2
		else{
			if( message.Left(1) == "\001" ){
d207 2
a208 1
				if( message.Left(6) == "ACTION"){
d212 2
a213 1
				if( message.Left(7) == "VERSION"){
d219 2
a220 1
				if( message.Left(9) == "REQSFRIEND" ){
d249 2
a250 1
				if( message.Left(8) == "SENDLINK" ){
d253 3
a255 2
					//if ( !g_eMuleApp.m_pGlobPrefs->GetIrcAcceptLinks() ){
						if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() ){
a256 1
						}
d271 3
a273 2
					if(!g_eMuleApp.friendlist->SearchFriend(userid, 0, 0)){
						if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() ){
a274 1
						}
d278 2
a279 1
					if( !RecieveString.IsEmpty() ){
d287 2
a288 1
				if( message.Left(9) == "REPFRIEND" ){
d326 2
a327 1
			else{
d333 4
a336 2
	if( command == "JOIN" ){
		if( source == nick ){
a343 1

d345 2
a346 1
	if( command == "PART" ){
d348 2
a349 1
		if ( source == nick ){
d359 2
a360 1
	if( command == "TOPIC" ){
d365 2
a366 1
	if( command == "QUIT" ){
d371 4
a374 2
	if( command == "NICK" ){
		if( source == nick ){
d382 2
a383 1
	if( command == "KICK" ){
d385 2
a386 1
		if( target2Index > 0 ){
d390 2
a391 1
		if( target2 == nick ){
d401 2
a402 1
	if( command == "MODE" ){
d410 2
a411 1
	if( command == "NOTICE"){
d415 2
a416 1
	if( command == "001" ){
d423 2
a424 1
	if( command == "321" ){
d429 2
a430 1
	if( command == "322"){
d438 2
a439 1
		if( chanDescIndex > 0 ){
d449 2
a450 1
	if( command == "332" ){
d457 2
a458 1
	if( command == "353" ){
d471 2
a472 1
		while( getNickIndex > 0 ){
d481 2
a482 1
	if( command == "433" ){
d491 2
a492 1
void CIrcMain::SendLogin(){
d498 2
a499 1
void CIrcMain::ParsePerform(){
d509 2
a510 1
	while( rawPerform.Find('|') != -1 ){
d518 1
a518 1
		if( (nextPerform.Left(16)).CompareNoCase( _T("PRIVMSG nickserv")  )== 0){
d520 1
a520 2
		}
		if( (nextPerform.Left(16)).CompareNoCase( _T("PRIVMSG chanserv") )== 0){
a521 1
		}
d525 2
a526 1
	if( !rawPerform.IsEmpty() ){
d532 1
a532 1
		if( (rawPerform.Left(16)).CompareNoCase( _T("PRIVMSG nickserv")  )== 0){
d534 1
a534 2
		}
		if( (rawPerform.Left(16)).CompareNoCase( _T("PRIVMSG chanserv") )== 0){
a535 1
		}
d541 2
a542 1
void CIrcMain::Connect(){
d545 2
a546 1
	for( int i = 0; i < 16; i++){
d566 2
a567 1
void CIrcMain::Disconnect(bool isshuttingdown){
d576 2
a577 1
void CIrcMain::SetConnectStatus( bool bConnected ){
d581 2
a582 1
int CIrcMain::SendString( CString send ){
@


1.26
log
@Formatting, comments, and name changes.
... and a few bug fixes.
@
text
@a39 2
//extern void URLDecode(CString& result, const char* buff);

d54 2
d110 2
a111 2
	if( rawMessage.Left(6) == "PING :" ){
		ircsocket->SendString( _T("PONG ") + rawMessage.Right(8) );
d133 1
a133 1
	if( sourceIndex < commandIndex && sourceIndex > 0){
d211 2
a212 6
					if( g_eMuleApp.m_pServerConnect->IsConnected() ){
						CString clientId;
						clientId.Format( _T("%i"), g_eMuleApp.m_pServerConnect->GetClientID());
						CString clientPort;
						clientPort.Format( _T("%i"), g_eMuleApp.m_pGlobPrefs->GetListenPort()); //Maverick
						CString sip;
d214 2
a215 1
						CString sport;
d217 5
a221 6
						CString send = _T("eMule") + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version + _T("|") + sverify + _T("|") + clientId + _T(":") + clientPort + _T("|") + sip + _T(":") + sport + _T("|");
						build.Format( _T("PRIVMSG %s :\001RSPFRIEND %s\001"), source, send );
					}
					else{
						build.Format( _T("PRIVMSG %s :\001REPFRIEND %s\001"), source, version );
					}
d231 8
a238 1
/*					message = message.Mid(8);
d246 3
a248 5
					CString sverify = message.Mid(index1+1, index2-index1-1);
					if( verify != _tstoi(sverify))
						return;
					if ( !g_eMuleApp.m_pGlobPrefs->GetIrcAcceptLinks() )
						return;
d250 3
a252 7
					if( message.Find( '|' ) != -1 ){
						RecieveString = message.Mid( message.Find('|')+1 );
						if( !RecieveString.IsEmpty() ){
							build.Format( GetResString(IDS_IRC_RECIEVEDLINK), source, RecieveString );
							if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
								m_pwndIRC->NoticeMessage( "*EmuleProto*", build );
							ProcessLink( RecieveString );
d254 8
d263 1
a263 1
*/					return;
d277 23
a299 28
					if( message.Find( '|' ) != -1 ){
						index1 = message.Find( '|' );
						index2 = message.Find( '|', index1+1 );
						if( index1 >= index2 )
							return;
						sverify = message.Mid( index1 + 1, index2-index1-1 );
						CString temp = message.Mid( index1 + 1, index2-index1-1 );
						index1 = message.Find( ':', index2+1);
						if( index2 >= index1 )
							return;
						uint32 newClientID = _tstoi(message.Mid( index2 + 1, index1 - index2 -1));
						index2 = message.Find( '|', index1+1);
						if( index1 >= index2 || newClientID < 0x1000000 )
							return;
						uint32 newClientPort = _tstoi(message.Mid( index1 + 1, index2 - index1 -1));
						index1 = message.Find( ':', index2+1);
						if( index2 >= index1 )
							return;
					//	uint32 newClientServerIP = _tstoi(message.Mid( index2 + 1, index1 - index2 -1));
						index2 = message.Find( '|', index1+1);
						if( index1 >= index2 )
							return;
					//	uint32 newClientServerPort = _tstoi(message.Mid( index1 + 1, index2 - index1 -1));
						CString newClientFullIp;
						newClientFullIp.Format(_T("%i.%i.%i.%i"),(uint8)newClientID,(uint8)(newClientID>>8),(uint8)(newClientID>>16),(uint8)(newClientID>>24));
						g_eMuleApp.m_pFriendList->AddFriend( NULL, 0, newClientID, newClientPort, 0, source, 0);
					}
					return;
d301 1
d383 1
a383 2
		if( g_eMuleApp.m_pGlobPrefs->GetIrcUsePerform() )
			ParsePerform();
d454 7
a460 1
	CString rawPerform = g_eMuleApp.m_pGlobPrefs->GetIrcPerformString();
a498 1
	CString ident_temp;
d500 2
a501 3
	ident_temp.Format("%s", g_eMuleApp.m_pGlobPrefs->GetUserHash());
	for( int i = 0; i < ident_temp.GetLength(); i++){
		ident_int = ident_temp[i];
d504 2
a521 1
    //MAverick
a524 1
    // END Maverick
@


1.25
log
@Formatting, comments, and name changes.
@
text
@d284 1
a284 1
						if( index1 >= index2 || newClientID < 16777216 )
@


1.24
log
@Updated Chat & IRC code. Workaround for bug #0000322
@
text
@d91 1
a91 1
					pSrv->SetPreference(CServer::ePR_HIGH);
d93 1
a93 1
				if (!g_eMuleApp.m_pdlgEmule->m_wndServer.serverlistctrl.AddServer(pSrv,true)) 
@


1.23
log
@Formatting, comments, and name changes.
@
text
@d33 1
d40 2
d57 4
a60 2
	try {		
		CED2KLink* pLink = CED2KLink::CreateLinkFromUrl(URLDecode(ed2kLink));
a271 1
					int counter = 0;
d510 1
@


1.22
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d520 2
a521 2
void CIrcMain::SetConnectStatus( bool connected ){
	m_pwndIRC->SetConnectStatus( connected );
@


1.21
log
@fixed security issues
@
text
@d62 1
a62 1
				theApp.downloadqueue->AddFileLinkToDownload(pFileLink);
d71 1
a71 1
					theApp.emuledlg->serverwnd.UpdateServerMetFromURL(strAddress);
d85 1
a85 1
				if( theApp.glob_prefs->GetManualHighPrio() )
d88 1
a88 1
				if (!theApp.emuledlg->serverwnd.serverlistctrl.AddServer(pSrv,true)) 
d206 1
a206 1
					if( theApp.serverconnect->IsConnected() ){
d208 1
a208 1
						clientId.Format( _T("%i"), theApp.serverconnect->GetClientID());
d210 1
a210 1
						clientPort.Format( _T("%i"), theApp.glob_prefs->GetListenPort()); //Maverick
d212 1
a212 1
						sip.Format( _T("%i"), theApp.serverconnect->GetCurrentServer()->GetIP());
d214 1
a214 1
						sport.Format( _T("%i"), theApp.serverconnect->GetCurrentServer()->GetPort());
d224 1
a224 1
					if( !theApp.glob_prefs->GetIrcIgnoreEmuleProtoInfoMessage() )
d241 1
a241 1
					if ( !theApp.glob_prefs->GetIrcAcceptLinks() )
d248 1
a248 1
							if( !theApp.glob_prefs->GetIrcIgnoreInfoMessage() )
d293 1
a293 1
						theApp.friendlist->AddFriend( NULL, 0, newClientID, newClientPort, 0, source, 0);
d309 1
a309 1
		if( !theApp.glob_prefs->GetIrcIgnoreInfoMessage() )
d322 1
a322 1
		if( !theApp.glob_prefs->GetIrcIgnoreInfoMessage() )
d358 1
a358 1
		if( !theApp.glob_prefs->GetIrcIgnoreInfoMessage() )
d376 1
a376 1
		if( theApp.glob_prefs->GetIRCListOnConnect() )
d378 1
a378 1
		if( theApp.glob_prefs->GetIrcUsePerform() )
d450 1
a450 1
	CString rawPerform = theApp.glob_prefs->GetIrcPerformString();
d491 1
a491 1
	ident_temp.Format("%s", theApp.glob_prefs->GetUserHash());
d497 1
a497 1
	nick = (CString)theApp.glob_prefs->GetIRCNick();
@


1.20
log
@minor changes
@
text
@d90 2
a91 1
				else AddLogLine(true,GetResString(IDS_SERVERADDED)+CString(pSrv->GetListName()));
@


1.19
log
@unicode cleanup
@
text
@d487 8
d504 1
a504 1
	user = _T("USER ") + nick + _T(" 8 * :") + version;
@


1.18
log
@unicode cleanup
@
text
@d45 2
a46 2
		rawMessage.Replace( "\n", "" );
		rawMessage.Replace( "\r", "" );
d49 1
a49 1
		test = preParseBuffer.Find("\n");
d105 2
a106 2
		ircsocket->SendString( "PONG " + rawMessage.Right(8) );
		m_pwndIRC->AddStatus(  "PING?/PONG" );
d109 2
a110 2
	rawMessage.Replace( "%", "\004" );
	CString source = "";
d112 2
a113 2
	CString sourceIp = "";
	CString command = "";
d115 1
a115 1
	CString target = "";
d117 1
a117 1
	CString target2 = "";
d119 1
a119 1
	CString message = "";
d164 1
a164 1
					m_pwndIRC->AddInfoMessage( target, "* %s%s", source, message.Mid(6) );
d168 1
a168 1
					version = "eMule" + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version;
d170 1
a170 1
					build.Format( "NOTICE %s :\001VERSION %s\001", source, version );
d185 1
a185 1
					m_pwndIRC->AddInfoMessage( source, "* %s%s", source, message.Mid(6) );
d189 1
a189 1
					version = "eMule" + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version;
d191 1
a191 1
					build.Format( "NOTICE %s :\001VERSION %s\001", source, version );
d196 1
a196 1
					int index1 = message.Find( "|" );
d199 1
a199 1
					int index2 = message.Find( "|", index1+1 );
d207 1
a207 1
						clientId.Format( "%i", theApp.serverconnect->GetClientID());
d209 1
a209 1
						clientPort.Format( "%i", theApp.glob_prefs->GetListenPort()); //Maverick
d211 1
a211 1
						sip.Format( "%i", theApp.serverconnect->GetCurrentServer()->GetIP());
d213 3
a215 3
						sport.Format( "%i", theApp.serverconnect->GetCurrentServer()->GetPort());
						CString send = "eMule" + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version + "|" + sverify + "|" + clientId + ":" + clientPort + "|" + sip + ":" + sport + "|";
						build.Format( "PRIVMSG %s :\001RSPFRIEND %s\001", source, send );
d218 1
a218 1
						build.Format( "PRIVMSG %s :\001REPFRIEND %s\001", source, version );
d222 1
a222 1
					build.Format( "%s %s", source, GetResString(IDS_IRC_ADDASFRIEND));
d224 1
a224 1
						m_pwndIRC->NoticeMessage( "*EmuleProto*", build );
d256 1
a256 1
					int index1 = message.Find( "|" );
d259 1
a259 1
					int index2 = message.Find( "|", index1+1 );
d291 1
a291 1
						newClientFullIp.Format("%i.%i.%i.%i",(uint8)newClientID,(uint8)(newClientID>>8),(uint8)(newClientID>>16),(uint8)(newClientID>>24));
d364 1
a364 1
		command.Replace( "\004", "%" );
d376 1
a376 1
			ircsocket->SendString("list");
d408 1
a408 1
		m_pwndIRC->AddInfoMessage( target2, "* Channel Title: %s", message );
d423 1
a423 1
		rawMessage.Replace( "\004", "%" );
d444 1
a444 1
	CString temp = "NICK " + nick;
d460 1
a460 1
		if( (nextPerform.Left(16)).CompareNoCase( "PRIVMSG nickserv"  )== 0){
d463 1
a463 1
		if( (nextPerform.Left(16)).CompareNoCase( "PRIVMSG chanserv" )== 0){
d473 1
a473 1
		if (rawPerform.Left(3) == "msg")
d475 1
a475 1
		if( (rawPerform.Left(16)).CompareNoCase( "PRIVMSG nickserv"  )== 0){
d478 1
a478 1
		if( (rawPerform.Left(16)).CompareNoCase( "PRIVMSG chanserv" )== 0){
d489 5
a493 5
	nick.Replace(".", "");
	nick.Replace(" ", "");
	nick.Replace(":", "");
	nick.Replace("/", "");
	nick.Replace("@@", "");
d495 2
a496 2
	version = "eMule" + (CString)CURRENT_VERSION_LONG + (CString)Irc_Version;
	user = "USER " + nick + " 8 * :" + version;
@


1.17
log
@Preparing for new sockets
@
text
@d238 1
a238 1
					if( verify != atoi(sverify))
d263 1
a263 1
					if( verify != atoi(sverify))
d277 1
a277 1
						uint32 newClientID = atoi(message.Mid( index2 + 1, index1 - index2 -1));
d281 1
a281 1
						uint32 newClientPort = atoi(message.Mid( index1 + 1, index2 - index1 -1));
d285 1
a285 1
					//	uint32 newClientServerIP = atoi(message.Mid( index2 + 1, index1 - index2 -1));
d289 1
a289 1
					//	uint32 newClientServerPort = atoi(message.Mid( index1 + 1, index2 - index1 -1));
@


1.16
log
@converted to new logger methods
@
text
@d204 1
d220 1
@


1.15
log
@switch to one URLDecode function
@
text
@d99 1
a99 1
		AddLogLine(true, GetResString(IDS_LINKNOTADDED));
@


1.14
log
@minor fixes and improvements
@
text
@d53 3
a55 7
extern void URLDecode(CString& result, const char* buff);

void CIrcMain::ProcessLink( CString ed2kLink ) {
	try {
		CString link;
		URLDecode(link,(const char*)ed2kLink.GetBuffer());
		CED2KLink* pLink = CED2KLink::CreateLinkFromUrl(link);
@


1.13
log
@Some code housekeeping changes
@
text
@a116 1
	int sourceIpIndex = -1;
d287 1
a287 1
						uint32 newClientServerIP = atoi(message.Mid( index2 + 1, index1 - index2 -1));
d291 1
a291 1
						uint32 newClientServerPort = atoi(message.Mid( index1 + 1, index2 - index1 -1));
@


1.12
log
@*** empty log message ***
@
text
@d90 1
a90 1
					pSrv->SetPreference(PR_HIGH);
@


1.11
log
@fixed small memory leak and assertion
@
text
@d83 1
a83 3
				in_addr host;
				host.S_un.S_addr = pSrvLink->GetIP();
				CServer* pSrv = new CServer(pSrvLink->GetPort(),inet_ntoa(host));
@


1.10
log
@converted to new logging method
@
text
@a501 1
	ircsocket->Create();
@


1.10.4.1
log
@27a partial merge
@
text
@d111 1
a111 1
		ircsocket->SendString( "PONG " + rawMessage.Right(rawMessage.GetLength()-6) );
@


1.9
log
@Code clean up and double check wit official code.
@
text
@d96 1
a96 1
				else theApp.emuledlg->AddLogLine(true,GetResString(IDS_SERVERADDED)+CString(pSrv->GetListName()));
d105 1
a105 1
		theApp.emuledlg->AddLogLine(true, GetResString(IDS_LINKNOTADDED));
@


1.8
log
@Little fixes and Static Servers additions from 26d
@
text
@a36 4
    /*
	if (ircsocket) 
		delete ircsocket;
    */
@


1.7
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d96 1
a96 1
					pSrv->SetPreference(SRV_PR_HIGH);
@


1.6
log
@Flat bar fix
@
text
@d20 7
@


1.5
log
@merge with a branch fixes
@
text
@d22 1
d30 1
d33 1
@


1.4
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@a22 1
	ircsocket = new CIrcSocket(this);
d486 1
d496 1
a496 1
	//ircsocket->Create();
@


1.3
log
@updated to .25b codebase
@
text
@d30 2
a31 1
	delete ircsocket;
d500 1
a500 1
void CIrcMain::Disconnect(){
d507 2
a508 1
	m_pwndIRC->SetConnectStatus(false);
@


1.3.4.1
log
@initial upgrade to .26
@
text
@d23 1
d30 1
a485 1
	ircsocket = new CIrcSocket(this);
d495 1
a495 1
	ircsocket->Create();
d499 1
a499 1
void CIrcMain::Disconnect(bool isshuttingdown){
d501 6
a506 3
	delete ircsocket;
	if( !isshuttingdown )
		m_pwndIRC->SetConnectStatus(false);
@


1.3.2.1
log
@updating this branch...
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d83 5
@


1.1
log
@*** empty log message ***
@
text
@d204 1
a204 1
						clientPort.Format( "%i", theApp.glob_prefs->GetPort());
d490 1
a490 1
	ircsocket->Create();
d496 5
@

