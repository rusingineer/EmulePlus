head	1.31;
access;
symbols
	PublicRelease_1_2e:1.31
	Interim_Release_1-2e_RC1:1.31
	PublicRelease_1_2d:1.30
	Interim_Release_1-2d_RC1:1.30
	Interim_Release_1-2d_beta1:1.30
	PublicRelease_1_2c:1.29
	Interim_Release_1-2c_RC1:1.29
	Interim_Release_1-2c_beta1:1.29
	PublicRelease_1_2b:1.29
	Interim_Release_1-2b_RC1:1.29
	PublicRelease_1_2a:1.29
	Interim_Release_1-2a_RC1:1.27
	Interim_Release_1-2a_beta2:1.27
	Interim_Release_1-2a_beta1:1.27
	PublicRelease_1_2:1.27
	Interim_Release_1-2_RC1:1.27
	Interim_Release_1-2_beta1:1.27
	PublicRelease_1_1g:1.27
	Interim_Release_1-1g_RC3:1.27
	Interim_Release_1-1g_RC2:1.27
	Interim_Release_1-1g_RC1:1.27
	Interim_Release_1-1g_beta2:1.25
	Interim_Release_1-1g_beta1:1.25
	PublicRelease_1_1f:1.25
	Interim_Release_1-1f_RC1:1.25
	PublicRelease_1_1e:1.25
	Interim_Release_1-1e_RC2:1.25
	Interim_Release_1-1e_RC1:1.25
	Interim_Release_1-1e_beta1:1.25
	PublicRelease_1_1d:1.25
	Interim_Release_1-1d_RC1:1.25
	PublicRelease_1_1c:1.25
	Interim_Release_1-1c_RC1:1.25
	Interim_Release_1-1c_beta2:1.25
	Interim_Release_1-1c_beta1:1.25
	PublicRelease_1_1b:1.25
	Interim_Release_1-1b_RC1:1.25
	PublicRelease_1_1a:1.25
	Interim_Release_1-1a_RC2:1.25
	Interim_Release_1-1a_RC1:1.25
	Interim_Release_1-1a_beta2:1.25
	Interim_Release_1-1a_beta1:1.25
	PublicRelease_1_1:1.24
	Interim_Release_1-1_beta1:1.24
	PublicRelease_1o:1.22
	Interim_Release_1o_RC1:1.22
	Interim_Release_1o_beta1:1.22
	PublicRelease_1n:1.22
	Interim_Release_1n_RC2:1.22
	Interim_Release_1n_RC1:1.21
	Interim_Release_1n_beta2:1.21
	Interim_Release_1n_beta1:1.21
	PublicRelease_1m:1.20
	Interim_Release_1m_beta1:1.20
	PublicRelease_1l:1.20
	Interim_Release_1l_RC3:1.20
	Interim_Release_1l_RC2:1.20
	Interim_Release_1l_RC1:1.20
	Interim_Release_1l_beta2:1.20
	Interim_Release_1l_beta1:1.20
	PublicRelease_1k:1.19
	Interim_Release_1k_RC4:1.19
	Interim_1k_RC3:1.19
	Interim_1k_RC2:1.19
	Interim_Release_1k_RC1:1.19
	Interim_Release_1k_beta5:1.18
	Intrerim_Release_1k_beta4:1.18
	Interim_Release_1k_beta1:1.16
	PublicRelease_1j:1.15
	Interim_Release_1J_RC3:1.15
	Interim_Release_1j_RC3:1.15
	Interim_Release_1j_RC2:1.15
	Interim_Release_1j_RC1:1.15
	Interim_Release_1j_beta2:1.15
	Interim_Release_1j_beta1:1.15
	PublicRelease_1i:1.15
	Interim_Release_1i_RC6:1.15
	Interim_Release_1i_RC3:1.15
	Interim_Release_1i_RC2:1.15
	Interim_Release_1i_RC1:1.14
	Interim_Release_1i_beta3:1.14
	Interim_Release_1i_beta2:1.14
	Interim_Release_1i_beta1:1.13
	PublicRelease_1h:1.8
	Interim_Release_1h_rc2:1.8
	Interim_Release_1h_RC1:1.8
	Interim_Release_1h_beta2:1.2;
locks; strict;
comment	@// @;


1.31
date	2008.11.03.05.45.23;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2007.12.16.21.37.59;	author aw3;	state Exp;
branches;
next	1.29;

1.29
date	2006.10.02.00.59.46;	author aw3;	state Exp;
branches;
next	1.28;

1.28
date	2006.09.22.02.10.47;	author aw3;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.27.22.11.47;	author eklmn;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.27.20.31.04;	author eklmn;	state Exp;
branches;
next	1.25;

1.25
date	2004.10.23.11.01.09;	author dongato;	state Exp;
branches;
next	1.24;

1.24
date	2004.10.08.15.46.47;	author dongato;	state Exp;
branches;
next	1.23;

1.23
date	2004.10.08.03.28.31;	author dongato;	state Exp;
branches;
next	1.22;

1.22
date	2004.09.07.19.54.26;	author aw3;	state Exp;
branches;
next	1.21;

1.21
date	2004.07.06.16.02.21;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2004.04.15.17.07.57;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.26.21.03.21;	author aw3;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.13.05.36.53;	author aw3;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.27.01.25.09;	author kush_eplus;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.05.19.28.08;	author kush_eplus;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.07.20.02.05;	author dongato;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.15.03.51.44;	author morevit;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.25.01.09.10;	author dongato;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.23.16.52.49;	author morevit;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.22.00.17.22;	author morevit;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.20.15.39.30;	author morevit;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.19.00.13.36;	author morevit;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.10.01.35.53;	author dongato;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.07.19.21.08;	author dongato;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.07.12.51.12;	author dongato;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.07.05.20.38;	author dongato;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.06.02.19.22;	author dongato;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.06.00.04.21;	author dongato;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.23.13.10.55;	author forcha;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.23.00.20.51;	author forcha;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Reduced H-file dependency.
@
text
@//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "CatDialog.h"
#include "Preferences.h"
#include "SharedFileList.h"
#include "otherfunctions.h"
#include "AddBuddy.h"

IMPLEMENT_DYNAMIC(CCatDialog, CDialog)
CCatDialog::CCatDialog(int index)
	: CDialog(CCatDialog::IDD, 0)
{
	m_pCat = CCat::GetCatByIndex(index);
	if (m_pCat == NULL)
		return;
}

BOOL CCatDialog::OnInitDialog()
{
	CDialog::OnInitDialog();

	Localize();
	UpdateData();

	AddBuddy(GetDlgItem(IDC_INCOMING)->m_hWnd, GetDlgItem(IDC_BROWSE)->m_hWnd, BDS_RIGHT);
	AddBuddy(GetDlgItem(IDC_TEMP)->m_hWnd, GetDlgItem(IDC_BROWSE_TEMP)->m_hWnd, BDS_RIGHT);

	return true;
}

void CCatDialog::UpdateData()
{
	SetDlgItemText(IDC_TITLE, m_pCat->GetTitle());
	SetDlgItemText(IDC_INCOMING, m_pCat->GetPath());
	SetDlgItemText(IDC_TEMP, m_pCat->GetTempPath());
	SetDlgItemText(IDC_COMMENT, m_pCat->GetComment());

	m_dwNewColor = m_pCat->GetColor();
	m_ctlColor.SetColor(m_dwNewColor);

	SetDlgItemText(IDC_AUTOCATEXT, m_pCat->GetAutoCatExt());

	m_cmbPriority.SetCurSel(m_pCat->GetPriority());
}

CCatDialog::~CCatDialog()
{
}

void CCatDialog::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_CATCOLOR, m_ctlColor);
	DDX_Control(pDX, IDC_PRIOCOMBO, m_cmbPriority);
}


BEGIN_MESSAGE_MAP(CCatDialog, CDialog)
	ON_BN_CLICKED(IDC_BROWSE, OnBnClickedBrowse)
	ON_BN_CLICKED(IDC_BROWSE_TEMP, OnBnClickedBrowseTemp)
	ON_BN_CLICKED(IDOK, OnBnClickedOk)
	ON_MESSAGE(CPN_SELENDOK, OnSelChange) //CPN_SELCHANGE
END_MESSAGE_MAP()

// CCatDialog message handlers

void CCatDialog::Localize()
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_STATIC_TITLE, IDS_TITLE },
		{ IDC_STATIC_COMMENT, IDS_COMMENT },
		{ IDCANCEL, IDS_CANCEL },
		{ IDC_STATIC_COLOR, IDS_COLOR },
		{ IDC_STATIC_PRIO, IDS_STARTPRIO },
		{ IDC_STATIC_AUTOCAT, IDS_AUTOCAT_LABEL },
		{ IDOK, IDS_OK_BUTTON }
	};
	static const uint16 s_auResList[] =
	{
		IDS_PRIOLOW, IDS_PRIONORMAL, IDS_PRIOHIGH, IDS_PRIOAUTO
	};

	CString strBuffer = GetResString(IDS_PW_INCOMING);

	strBuffer.Remove(_T(':'));
	SetDlgItemText(IDC_STATIC_INCOMING, strBuffer);

	GetResString(&strBuffer, IDS_PW_TEMP);
	strBuffer.Remove(_T(':'));
	SetDlgItemText(IDC_STATIC_TEMP, strBuffer);

	for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
	{
		GetResString(&strBuffer, static_cast<UINT>(s_auResTbl[i][1]));
		SetDlgItemText(s_auResTbl[i][0], strBuffer);
	}

	m_ctlColor.CustomText = GetResString(IDS_COL_MORECOLORS);
	m_ctlColor.DefaultText = GetResString(IDS_DEFAULT);
	m_ctlColor.SetDefaultColor(NULL);

	GetResString(&strBuffer, IDS_CAT_EDIT);
	SetWindowText(strBuffer);

	while (m_cmbPriority.GetCount() > 0)
		m_cmbPriority.DeleteString(0);
	m_cmbPriority.AddString(_T(""));	// Don't change
	for (uint32 i = 0; i < ARRSIZE(s_auResList); i++)
	{
		GetResString(&strBuffer, static_cast<UINT>(s_auResList[i]));
		m_cmbPriority.AddString(strBuffer);
	}
	m_cmbPriority.SetCurSel(m_pCat->GetPriority());
}

void CCatDialog::OnBnClickedBrowse()
{
	CString	strDir;

	GetDlgItemText(IDC_INCOMING, strDir);

	CString strNewPath = BrowseFolder(GetSafeHwnd(), GetResString(IDS_SELECTOUTPUTDIR), strDir);

	if (strNewPath != strDir)
		SetDlgItemText(IDC_INCOMING, strNewPath);
}

void CCatDialog::OnBnClickedBrowseTemp()
{
	CString	strDir;

	GetDlgItemText(IDC_TEMP, strDir);

	CString strNewPath = BrowseFolder(GetSafeHwnd(), GetResString(IDS_SELECT_TEMPDIR), strDir);

	if (strNewPath != strDir)
		SetDlgItemText(IDC_TEMP, strNewPath);
}

void CCatDialog::OnBnClickedOk()
{
	CString	strOldPath = m_pCat->GetPath();

	TCHAR		strPath[MAX_PATH];
	TCHAR		strTempPath[MAX_PATH];

	GetDlgItemText(IDC_TITLE, m_pCat->m_strTitle);
	if (m_pCat->m_strTitle.GetLength() > 64)
		m_pCat->m_strTitle.Truncate(64);

	if (GetDlgItem(IDC_INCOMING)->GetWindowTextLength() > 2)
	{
		GetDlgItemText(IDC_INCOMING, strPath, MAX_PATH);

		::MakeFolderName(strPath);
		m_pCat->m_strSavePath = strPath;

		if (!g_App.m_pPrefs->IsShareableDirectory(m_pCat->GetPath()))
		{
			_tcscpy(strPath,g_App.m_pPrefs->GetIncomingDir());
			::MakeFolderName(strPath);
			m_pCat->m_strSavePath = strPath;
		}

		CString	strNewPath = m_pCat->GetPath();

	//	Create all required directories
		CreateAllDirectories(&strNewPath);

		if (strNewPath.CompareNoCase(strOldPath) != 0)
		{
			if (g_App.m_pPrefs->SharedDirListCheckAndAdd(m_pCat->GetPath(), true))
			{
			//	New path was added to the list, scan for files
				g_App.m_pSharedFilesList->Reload();
			}
		}
	}

	if (GetDlgItem(IDC_TEMP)->GetWindowTextLength() > 2)
	{
		GetDlgItemText(IDC_TEMP, strTempPath, MAX_PATH);

		::MakeFolderName(strTempPath);
		m_pCat->m_strTempPath = strTempPath;
	}

	GetDlgItemText(IDC_COMMENT, m_pCat->m_strComment);

	m_pCat->m_crColor = m_dwNewColor;
	m_pCat->m_iPriority = static_cast<byte>(m_cmbPriority.GetCurSel());

	GetDlgItemText(IDC_AUTOCATEXT, m_pCat->m_strAutoCatExt);

	g_App.m_pMDlg->m_wndTransfer.m_ctlDownloadList.Invalidate();

	OnOK();
}

LONG CCatDialog::OnSelChange(UINT lParam, LONG wParam)
{
	NOPRM(wParam);
	if (lParam == CLR_DEFAULT)
		m_dwNewColor = 0;
	else
		m_dwNewColor = m_ctlColor.GetColor();

	return TRUE;
}
@


1.30
log
@Suppressed level 4 warnings; Formatting.
@
text
@d2 1
a2 1
//created by Ornis
a17 2
// CatDialog.cpp : implementation file

d19 1
a19 1
#include "eMule.h"
d22 1
a25 2
// CCatDialog dialog

@


1.29
log
@Corrected introduced string issue in the dropdown priority list.
@
text
@d113 1
a113 1
	for (uint32 i = 0; i < ELEMENT_COUNT(s_auResTbl); i++)
d129 1
a129 1
	for (uint32 i = 0; i < ELEMENT_COUNT(s_auResList); i++)
d212 1
a212 1
	m_pCat->m_iPriority = m_cmbPriority.GetCurSel();
d223 1
@


1.28
log
@Fixed OK button localization in the Category Dialog {BouRock};
Improved string processing.
@
text
@d101 1
a101 1
		IDS_DONTCHANGE, IDS_PRIOLOW, IDS_PRIONORMAL, IDS_PRIOHIGH, IDS_PRIOAUTO
d128 1
@


1.27
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d89 1
a89 1
	static const int s_aiResTbl[][2] =
d96 6
a101 1
		{ IDC_STATIC_AUTOCAT, IDS_AUTOCAT_LABEL }
d109 1
a109 2
	strBuffer = GetResString(IDS_PW_TEMP);

d113 5
a117 2
	for (uint32 i = 0; i < ELEMENT_COUNT(s_aiResTbl); i++)
		SetDlgItemText(s_aiResTbl[i][0], GetResString(static_cast<UINT>(s_aiResTbl[i][1])));
d123 2
a124 1
	SetWindowText(GetResString(IDS_CAT_EDIT));
d128 5
a132 5
	m_cmbPriority.AddString(GetResString(IDS_DONTCHANGE));
	m_cmbPriority.AddString(GetResString(IDS_PRIOLOW));
	m_cmbPriority.AddString(GetResString(IDS_PRIONORMAL));
	m_cmbPriority.AddString(GetResString(IDS_PRIOHIGH));
	m_cmbPriority.AddString(GetResString(IDS_PRIOAUTO));
@


1.26
log
@renamed 3 variables
@
text
@d170 1
a170 1
		if (!g_App.g_pPrefs->IsShareableDirectory(m_pCat->GetPath()))
d172 1
a172 1
			_tcscpy(strPath,g_App.g_pPrefs->GetIncomingDir());
d184 1
a184 1
			if (g_App.g_pPrefs->SharedDirListCheckAndAdd(m_pCat->GetPath(), true))
@


1.25
log
@Fixed some untranslated strings
@
text
@d170 1
a170 1
		if (!g_eMuleApp.m_pGlobPrefs->IsShareableDirectory(m_pCat->GetPath()))
d172 1
a172 1
			_tcscpy(strPath,g_eMuleApp.m_pGlobPrefs->GetIncomingDir());
d184 1
a184 1
			if (g_eMuleApp.m_pGlobPrefs->SharedDirListCheckAndAdd(m_pCat->GetPath(), true))
d187 1
a187 1
				g_eMuleApp.m_pSharedFilesList->Reload();
d207 1
a207 1
	g_eMuleApp.m_pdlgEmule->m_wndTransfer.m_ctlDownloadList.Invalidate();
@


1.24
log
@More fixes for temp_dir_cat
@
text
@d107 1
a107 1
	SetDlgItemText(IDC_TEMP, strBuffer);
@


1.23
log
@Customizable temporary directory for categories
@
text
@a154 1
	CString	strOldTempPath = m_pCat->GetTempPath();
d196 1
a196 1
		::MakeFolderName(strPath);
a197 2

		CString	strNewTempPath = m_pCat->GetTempPath();
@


1.22
log
@Fixed directory creating [reported by Cheesy].
@
text
@d46 1
d55 1
d80 1
d104 5
a129 6
//	TCHAR buffer[MAX_PATH] = {0};
//	GetDlgItemText(IDC_INCOMING, buffer, ARRSIZE(buffer));
//	if(SelectDir(GetSafeHwnd(), buffer,GetResString(IDS_SELECTOUTPUTDIR)))
//		CString newpath = BrowseFolder(g_eMuleApp.m_pdlgEmule->m_hWnd,GetResString(IDS_SELECTOUTPUTDIR),dir);
//	GetDlgItem(IDC_INCOMING)->SetWindowText(buffer);

d140 12
d155 1
d158 1
d193 10
@


1.21
log
@Removed incorrectly used _T().
@
text
@a160 2
		if (!PathFileExists(m_pCat->GetPath()))
			::CreateDirectory(m_pCat->GetPath(), 0);
d164 3
@


1.20
log
@Fixed shared directory list corruption caused by asynchronous access (bug #502);
Fixed shared directory list processing to eliminate double list entries (that can be caused by case sensitive compares, by the bug on file completion after file destination change, or by initial shareddir.dat values).
@
text
@d104 2
a105 2
	m_ctlColor.CustomText = _T(GetResString(IDS_COL_MORECOLORS));
	m_ctlColor.DefaultText = _T(GetResString(IDS_DEFAULT));
@


1.19
log
@Fixed category name assignment when a user makes it empty; minor improvements
@
text
@a150 1
		//m_pCat->m_strSavePath = strPath;
d168 1
a168 16
			CString	strCatPath = m_pCat->GetPath();
			bool	bFoundDir = false;

			if (strCatPath.GetLength() != 3)
				strCatPath += _T("\\");

			for (POSITION pos = g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetHeadPosition(); pos != NULL; )
			{
				if (g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetNext(pos) == strCatPath)
				{
					bFoundDir = true;
					break;
				}
			}

			if (!bFoundDir)
d170 1
a170 1
				g_eMuleApp.m_pGlobPrefs->m_sharedDirList.AddTail(strCatPath);
@


1.18
log
@Improved string processing; unified localization
@
text
@d52 3
a54 5
	GetDlgItem(IDC_TITLE)->SetWindowText(m_pCat->GetTitle());

	GetDlgItem(IDC_INCOMING)->SetWindowText(m_pCat->GetPath());

	GetDlgItem(IDC_COMMENT)->SetWindowText(m_pCat->GetComment());
d59 1
a59 1
	GetDlgItem(IDC_AUTOCATEXT)->SetWindowText(m_pCat->GetAutoCatExt());
d86 1
a86 1
	static const int aiResTbl[][2] =
d99 1
a99 1
	GetDlgItem(IDC_STATIC_INCOMING)->SetWindowText(strBuffer);
d101 2
a102 2
	for (uint32 i = 0; i < ELEMENT_COUNT(aiResTbl); i++)
		GetDlgItem(aiResTbl[i][0])->SetWindowText(GetResString(static_cast<UINT>(aiResTbl[i][1])));
d135 1
a135 1
		GetDlgItem(IDC_INCOMING)->SetWindowText(strNewPath);
a141 1
	TCHAR		strTitle[64];
a142 1
	TCHAR		strComment[255];
d144 3
a146 3
	if (GetDlgItem(IDC_TITLE)->GetWindowTextLength() > 0)
		GetDlgItem(IDC_TITLE)->GetWindowText(strTitle, 64);
	m_pCat->m_strTitle = strTitle;
d150 1
a150 1
		GetDlgItem(IDC_INCOMING)->GetWindowText(strPath,MAX_PATH);
d192 1
a192 2
	GetDlgItem(IDC_COMMENT)->GetWindowText(strComment, 255);
	m_pCat->m_strComment = strComment;
d197 1
a197 4
	TCHAR		strAutoCatExt[255];

	GetDlgItem(IDC_AUTOCATEXT)->GetWindowText(strAutoCatExt, 255);
	m_pCat->m_strAutoCatExt = strAutoCatExt;
@


1.17
log
@list processing and other optimizations
@
text
@d88 9
a96 1
	CString strBuffer;
d98 1
a98 1
	GetDlgItem(IDC_STATIC_TITLE)->SetWindowText(GetResString(IDS_TITLE));
d100 1
a100 2
	strBuffer.Format(_T("%s"), GetResString(IDS_PW_INCOMING));
	strBuffer.Replace(_T(":"), _T(""));
d102 3
a104 5
	GetDlgItem(IDC_STATIC_COMMENT)->SetWindowText(GetResString(IDS_COMMENT));
	GetDlgItem(IDCANCEL)->SetWindowText(GetResString(IDS_CANCEL));
	GetDlgItem(IDC_STATIC_COLOR)->SetWindowText(GetResString(IDS_COLOR));
	GetDlgItem(IDC_STATIC_PRIO)->SetWindowText(GetResString(IDS_STARTPRIO));
	GetDlgItem(IDC_STATIC_AUTOCAT)->SetWindowText(GetResString(IDS_AUTOCAT_LABEL));
@


1.16
log
@optimisation of the file processing + some formatting, comments and deletions of spaces and tabs at end of lines
@
text
@d52 1
a52 1
	CString buffer;
d54 1
a54 2
	buffer.Format("%s",m_pCat->GetTitle());
	GetDlgItem(IDC_TITLE)->SetWindowText(buffer);
d56 1
a56 7
	buffer.Format("%s",m_pCat->GetPath());
	GetDlgItem(IDC_INCOMING)->SetWindowText(buffer);

	buffer.Format("%s",m_pCat->GetComment());
	GetDlgItem(IDC_COMMENT)->SetWindowText(buffer);

	COLORREF	selcolor = m_pCat->GetColor();
d59 1
a59 1
	m_ctlColor.SetColor(selcolor);
d61 1
a61 2
	buffer.Format("%s",m_pCat->GetAutoCatExt());
	GetDlgItem(IDC_AUTOCATEXT)->SetWindowText(buffer);
d88 1
a88 1
	CString buffer;
d92 3
a94 3
	buffer.Format("%s", GetResString(IDS_PW_INCOMING));
	buffer.Replace(":", "");
	GetDlgItem(IDC_STATIC_INCOMING)->SetWindowText(buffer);
d107 2
a108 1
	while (m_cmbPriority.GetCount()>0) m_cmbPriority.DeleteString(0);
d125 3
a127 2
	CString dir;
	GetDlgItemText(IDC_INCOMING, dir);
d129 1
a129 1
	CString newpath = BrowseFolder(GetSafeHwnd(),GetResString(IDS_SELECTOUTPUTDIR),dir);
d131 2
a132 2
	if(newpath!=dir)
		GetDlgItem(IDC_INCOMING)->SetWindowText(newpath);
d137 1
a137 1
	CString oldpath=CString(m_pCat->GetPath());
d143 2
a144 2
	if (GetDlgItem(IDC_TITLE)->GetWindowTextLength()>0)
		GetDlgItem(IDC_TITLE)->GetWindowText(strTitle,64);
d147 1
a147 1
	if (GetDlgItem(IDC_INCOMING)->GetWindowTextLength()>2)
d162 1
a162 1
			::CreateDirectory(m_pCat->GetPath(),0);
d164 1
a164 1
		CString newpath = m_pCat->GetPath();
d166 1
a166 1
		if (newpath.CompareNoCase(oldpath)!=0)
d168 2
a169 2
			CString strCatPath = m_pCat->GetPath();
			bool founddir = false;
d172 1
a172 1
				strCatPath = strCatPath + _T("\\");
d174 3
a176 2
			for (POSITION pos = g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetHeadPosition();pos != 0;g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetNext(pos))
				if (g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetAt(pos) == strCatPath)
d178 1
a178 1
					founddir = true;
d181 1
d183 1
a183 1
			if(!founddir)
d191 1
a191 1
	GetDlgItem(IDC_COMMENT)->GetWindowText(strComment,255);
d199 1
a199 1
	GetDlgItem(IDC_AUTOCATEXT)->GetWindowText(strAutoCatExt,255);
d209 2
a210 2
	if (lParam==CLR_DEFAULT)
		m_dwNewColor=0;
@


1.15
log
@Fix for root dirs on Categories.
@
text
@d97 1
a97 1
	
d125 1
a125 1
{	
d129 2
a130 2
//	CString newpath = BrowseFolder(g_eMuleApp.m_pdlgEmule->m_hWnd,GetResString(IDS_SELECTOUTPUTDIR),dir);
//		GetDlgItem(IDC_INCOMING)->SetWindowText(buffer);
d214 1
a214 1
		m_dwNewColor=0;		
d217 1
a217 1
	
@


1.14
log
@DownloadListCtrl rewrite.
Changed Category ID types to an enumeration.
More async update work.
The usual formatting, comments, and name changes.
@
text
@d174 1
d176 4
a179 1
			
d181 1
a181 1
				if (g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetAt(pos) == (m_pCat->GetPath() + _T("\\")))
d187 5
a191 5
				if(!founddir)
				{
					g_eMuleApp.m_pGlobPrefs->m_sharedDirList.AddTail(m_pCat->GetPath() + _T("\\"));
					g_eMuleApp.m_pSharedFilesList->Reload();
				}
@


1.13
log
@Empy Incoming dir for category fix, Official fix [Katsyonak], WS templates updated for file status icons.
@
text
@d202 1
a202 1
	g_eMuleApp.m_pdlgEmule->m_wndTransfer.m_wndDownloadList.Invalidate();
@


1.12
log
@Category rewrite with predefined status/media type categories.
@
text
@d154 1
d156 1
a156 7
//	m_pCat->m_strSavePath = strPath;

	GetDlgItem(IDC_COMMENT)->GetWindowText(strComment,255);
	m_pCat->m_strComment = strComment;

	::MakeFolderName(strPath);
	m_pCat->m_strSavePath = strPath;
a157 3
	if (!g_eMuleApp.m_pGlobPrefs->IsShareableDirectory(m_pCat->GetPath()))
	{
		_tcscpy(strPath,g_eMuleApp.m_pGlobPrefs->GetIncomingDir());
d160 29
a189 2
	if (!PathFileExists(m_pCat->GetPath()))
		::CreateDirectory(m_pCat->GetPath(),0);
d191 2
a192 19
	CString newpath = m_pCat->GetPath();

	if (newpath.CompareNoCase(oldpath)!=0)
	{
		bool founddir = false;
		
		for (POSITION pos = g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetHeadPosition();pos != 0;g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetNext(pos))
			if (g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetAt(pos) == (m_pCat->GetPath() + _T("\\")))
			{
				founddir = true;
				break;
			}

			if(!founddir)
			{
				g_eMuleApp.m_pGlobPrefs->m_sharedDirList.AddTail(m_pCat->GetPath() + _T("\\"));
				g_eMuleApp.m_pSharedFilesList->Reload();
			}
	}
@


1.11
log
@A little more method factoring, a few name changes, no (intended) logic changes.
@
text
@d33 3
a35 2
	m_myCat=g_eMuleApp.m_pGlobPrefs->GetCategory(index);
	if (m_myCat==NULL) return;
d54 1
a54 1
	buffer.Format("%s",m_myCat->title);
d57 1
a57 1
	buffer.Format("%s",m_myCat->incomingpath);
d60 1
a60 1
	buffer.Format("%s",m_myCat->comment);
d63 3
a65 2
	COLORREF selcolor=m_myCat->color;
	newcolor=m_myCat->color;
d68 1
a68 1
	buffer.Format("%s",m_myCat->autocat);
d71 1
a71 1
	m_prio.SetCurSel(m_myCat->prio);
d82 1
a82 1
	DDX_Control(pDX, IDC_PRIOCOMBO, m_prio);
d115 7
a121 7
	while (m_prio.GetCount()>0) m_prio.DeleteString(0);
	m_prio.AddString(GetResString(IDS_DONTCHANGE));
	m_prio.AddString(GetResString(IDS_PRIOLOW));
	m_prio.AddString(GetResString(IDS_PRIONORMAL));
	m_prio.AddString(GetResString(IDS_PRIOHIGH));
	m_prio.AddString(GetResString(IDS_PRIOAUTO));
	m_prio.SetCurSel(m_myCat->prio);
d143 5
a147 1
	CString oldpath=CString(m_myCat->incomingpath);
d150 2
a151 1
		GetDlgItem(IDC_TITLE)->GetWindowText(m_myCat->title,64);
d154 5
a158 1
		GetDlgItem(IDC_INCOMING)->GetWindowText(m_myCat->incomingpath,MAX_PATH);
d160 2
a161 1
	GetDlgItem(IDC_COMMENT)->GetWindowText(m_myCat->comment,255);
d163 1
a163 2
	MakeFolderName(m_myCat->incomingpath);
	if (!g_eMuleApp.m_pGlobPrefs->IsShareableDirectory(m_myCat->incomingpath))
d165 3
a167 2
		_snprintf(m_myCat->incomingpath, ARRSIZE(m_myCat->incomingpath), g_eMuleApp.m_pGlobPrefs->GetIncomingDir());
		MakeFolderName(m_myCat->incomingpath);
d169 2
a170 1
	if (!PathFileExists(m_myCat->incomingpath)) ::CreateDirectory(m_myCat->incomingpath,0);
d172 1
a172 1
	CString newpath = CString(m_myCat->incomingpath);
d179 1
a179 1
			if (g_eMuleApp.m_pGlobPrefs->m_sharedDirList.GetAt(pos) == (CString(m_myCat->incomingpath) + "\\"))
d187 1
a187 1
				g_eMuleApp.m_pGlobPrefs->m_sharedDirList.AddTail((CString(m_myCat->incomingpath) + "\\"));
d192 7
a198 3
	m_myCat->color=newcolor;
	m_myCat->prio=m_prio.GetCurSel();
	GetDlgItem(IDC_AUTOCATEXT)->GetWindowText(m_myCat->autocat,255);
d208 1
a208 1
		newcolor=0;		
d210 1
a210 1
		newcolor=m_ctlColor.GetColor();
@


1.10
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d165 2
a166 2
		for (POSITION pos = g_eMuleApp.m_pGlobPrefs->shareddir_list.GetHeadPosition();pos != 0;g_eMuleApp.m_pGlobPrefs->shareddir_list.GetNext(pos))
			if (g_eMuleApp.m_pGlobPrefs->shareddir_list.GetAt(pos) == (CString(m_myCat->incomingpath) + "\\"))
d174 1
a174 1
				g_eMuleApp.m_pGlobPrefs->shareddir_list.AddTail((CString(m_myCat->incomingpath) + "\\"));
@


1.9
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@d33 1
a33 1
	m_myCat=theApp.glob_prefs->GetCategory(index);
d127 1
a127 1
//	CString newpath = BrowseFolder(theApp.emuledlg->m_hWnd,GetResString(IDS_SELECTOUTPUTDIR),dir);
d152 1
a152 1
	if (!theApp.glob_prefs->IsShareableDirectory(m_myCat->incomingpath))
d154 1
a154 1
		_snprintf(m_myCat->incomingpath, ARRSIZE(m_myCat->incomingpath), theApp.glob_prefs->GetIncomingDir());
d165 2
a166 2
		for (POSITION pos = theApp.glob_prefs->shareddir_list.GetHeadPosition();pos != 0;theApp.glob_prefs->shareddir_list.GetNext(pos))
			if (theApp.glob_prefs->shareddir_list.GetAt(pos) == (CString(m_myCat->incomingpath) + "\\"))
d174 2
a175 2
				theApp.glob_prefs->shareddir_list.AddTail((CString(m_myCat->incomingpath) + "\\"));
				theApp.sharedfiles->Reload();
d183 1
a183 1
	theApp.emuledlg->transferwnd.m_wndDownloadList.Invalidate();
@


1.8
log
@Added again fix for filters, reverted a change in Shared Files and changed the browse dialog for categories (now it should support network drives).
@
text
@d151 1
a151 1
	MakeFoldername(m_myCat->incomingpath);
d155 1
a155 1
		MakeFoldername(m_myCat->incomingpath);
@


1.7
log
@Updated templates and improved GetOutputDir
@
text
@d124 13
a136 4
	TCHAR buffer[MAX_PATH] = {0};
	GetDlgItemText(IDC_INCOMING, buffer, ARRSIZE(buffer));
	if(SelectDir(GetSafeHwnd(), buffer,GetResString(IDS_SELECTOUTPUTDIR)))
		GetDlgItem(IDC_INCOMING)->SetWindowText(buffer);
@


1.6
log
@Fixed minor display/string issues
@
text
@d150 3
a152 1
	if (CString(m_myCat->incomingpath).CompareNoCase(oldpath)!=0)
d154 14
a167 2
		theApp.glob_prefs->shareddir_list.AddTail(CString(m_myCat->incomingpath));
		theApp.sharedfiles->Reload();
@


1.5
log
@Fixes regarding Category directory handling
@
text
@d94 2
d97 4
a100 1
	GetDlgItem(IDC_STATIC_INCOMING)->SetWindowText(GetResString(IDS_PW_INCOMING));
d126 1
a126 1
	if(SelectDir(GetSafeHwnd(), buffer,GetResString(IDS_SELECT_INCOMINGDIR)))
@


1.4
log
@Removed DoubleClick option (now is default).
Added cancel for Categories Dialog (now no more ? cats after cancel)
@
text
@d146 2
d149 1
@


1.3
log
@Fixed autocategory (and crashes)
@
text
@d37 2
a38 1
BOOL CCatDialog::OnInitDialog(){
d49 2
a50 1
void CCatDialog::UpdateData(){
d66 2
a67 2
	// HoaX_69: AutoCat
	GetDlgItem(IDC_AUTOCATEXT)->SetWindowText(m_myCat->autocat);
a89 1

d92 2
a93 1
void CCatDialog::Localize(){
d129 6
a134 2
	if (GetDlgItem(IDC_TITLE)->GetWindowTextLength()>0) GetDlgItem(IDC_TITLE)->GetWindowText(m_myCat->title,64);
	if (GetDlgItem(IDC_INCOMING)->GetWindowTextLength()>2) GetDlgItem(IDC_INCOMING)->GetWindowText(m_myCat->incomingpath,MAX_PATH);
d138 2
a139 1
	if (!theApp.glob_prefs->IsShareableDirectory(m_myCat->incomingpath)){
@


1.2
log
@bugfix
@
text
@d143 1
a143 1
	GetDlgItem(IDC_AUTOCATEXT)->GetWindowText(m_myCat->autocat.GetBuffer() ,255);
@


1.1
log
@*** empty log message ***
@
text
@d25 1
d43 2
d104 1
a104 1
	SetWindowText(GetResString(IDS_EDITCAT));
@

