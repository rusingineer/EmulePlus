head	1.9;
access;
symbols
	PublicRelease_1_2e:1.9
	Interim_Release_1-2e_RC1:1.9
	PublicRelease_1_2d:1.9
	Interim_Release_1-2d_RC1:1.9
	Interim_Release_1-2d_beta1:1.9
	PublicRelease_1_2c:1.7
	Interim_Release_1-2c_RC1:1.7
	Interim_Release_1-2c_beta1:1.6
	PublicRelease_1_2b:1.6
	Interim_Release_1-2b_RC1:1.6
	PublicRelease_1_2a:1.6
	Interim_Release_1-2a_RC1:1.6
	Interim_Release_1-2a_beta2:1.6
	Interim_Release_1-2a_beta1:1.6
	PublicRelease_1_2:1.6
	Interim_Release_1-2_RC1:1.6
	Interim_Release_1-2_beta1:1.6
	PublicRelease_1_1g:1.5
	Interim_Release_1-1g_RC3:1.5
	Interim_Release_1-1g_RC2:1.5
	Interim_Release_1-1g_RC1:1.5
	Interim_Release_1-1g_beta2:1.5
	Interim_Release_1-1g_beta1:1.4
	PublicRelease_1_1f:1.4
	Interim_Release_1-1f_RC1:1.4
	PublicRelease_1_1e:1.4
	Interim_Release_1-1e_RC2:1.4
	Interim_Release_1-1e_RC1:1.4
	Interim_Release_1-1e_beta1:1.4
	PublicRelease_1_1d:1.4
	Interim_Release_1-1d_RC1:1.4
	PublicRelease_1_1c:1.4
	Interim_Release_1-1c_RC1:1.4
	Interim_Release_1-1c_beta2:1.4
	Interim_Release_1-1c_beta1:1.4
	PublicRelease_1_1b:1.4
	Interim_Release_1-1b_RC1:1.4
	PublicRelease_1_1a:1.4
	Interim_Release_1-1a_RC2:1.4
	Interim_Release_1-1a_RC1:1.4
	Interim_Release_1-1a_beta2:1.4
	Interim_Release_1-1a_beta1:1.4
	PublicRelease_1_1:1.4
	Interim_Release_1-1_beta1:1.4
	PublicRelease_1o:1.4
	Interim_Release_1o_RC1:1.4
	Interim_Release_1o_beta1:1.4
	PublicRelease_1n:1.4
	Interim_Release_1n_RC2:1.4
	Interim_Release_1n_RC1:1.4
	Interim_Release_1n_beta2:1.3
	Interim_Release_1n_beta1:1.3
	PublicRelease_1m:1.3
	Interim_Release_1m_beta1:1.3
	PublicRelease_1l:1.2
	Interim_Release_1l_RC3:1.2
	Interim_Release_1l_RC2:1.2
	Interim_Release_1l_RC1:1.2
	Interim_Release_1l_beta2:1.1;
locks; strict;
comment	@// @;


1.9
date	2008.02.03.03.58.56;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.31.18.18.56;	author fuxie-dk;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.02.23.14.14;	author kush_eplus;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.31.06.07.48;	author aw3;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.27.17.58.55;	author aw3;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.23.22.44.02;	author syrus77;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.19.05.34.24;	author aw3;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.22.13.53.38;	author dongato;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.12.17.47.53;	author dongato;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Optimized dialog regarding required memory and speed;
Removed old not used localization;
Suppressed compiler warnings; Formatting.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "PPgSources.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNAMIC(CPPgSources, CPropertyPage)
CPPgSources::CPPgSources()
	: CPropertyPage(CPPgSources::IDD)
	, m_bAutoSrcEnabled(FALSE)
	, m_dwMinAutoSrcPerFile(0)
	, m_dwMaxAutoSrcPerFile(0)
	, m_dwMaxAutoSrcTotal(0)
	, m_dwMaxAutoXchgSources(0)
	, m_bDisableXS(FALSE)
	, m_bEnableXSUpTo(FALSE)
{
}

CPPgSources::~CPPgSources()
{
}

void CPPgSources::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Check(pDX, IDC_AUTOSRC_ENABLED, m_bAutoSrcEnabled);
	DDX_Check(pDX, IDC_DISABLE_XS, m_bDisableXS);
	DDX_Check(pDX, IDC_ENABLE_XSUPTO, m_bEnableXSUpTo);
	DDX_Text(pDX, IDC_MAXSOURCEPERFILE, m_strMaxSrcPerFile);
	DDX_Text(pDX, IDC_AUTOSRC_MIN_PER_FILE, m_dwMinAutoSrcPerFile);
	DDX_Text(pDX, IDC_AUTOSRC_MAX_PER_FILE, m_dwMaxAutoSrcPerFile);
	DDX_Text(pDX, IDC_AUTOSRC_MAXTOTAL, m_dwMaxAutoSrcTotal);
	DDX_Text(pDX, IDC_AUTOSRC_SE_UPTO, m_dwMaxAutoXchgSources);
	DDX_Text(pDX, IDC_XSUPTO, m_strXsUpTo);
}

BEGIN_MESSAGE_MAP(CPPgSources, CPropertyPage)
	ON_EN_CHANGE(IDC_MAXSOURCEPERFILE, OnSettingsChange)
	ON_EN_KILLFOCUS(IDC_MAXSOURCEPERFILE, OnSourcesChange)
	ON_BN_CLICKED(IDC_AUTOSRC_ENABLED, OnBnClickedAutoSources)
	ON_BN_CLICKED(IDC_DISABLE_XS, OnBnClickedDisableXS)
	ON_EN_CHANGE(IDC_AUTOSRC_MIN_PER_FILE, OnSettingsChange)
	ON_EN_CHANGE(IDC_AUTOSRC_MAX_PER_FILE, OnSettingsChange)
	ON_EN_CHANGE(IDC_AUTOSRC_MAXTOTAL, OnSettingsChange)
	ON_EN_CHANGE(IDC_AUTOSRC_SE_UPTO, OnSettingsChange)
	ON_BN_CLICKED(IDC_ENABLE_XSUPTO, OnBnClickedDisableXSUpTo)
	ON_EN_CHANGE(IDC_XSUPTO, OnSettingsChange)
END_MESSAGE_MAP()

BOOL CPPgSources::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	LoadSettings();
	Localize();

	return TRUE;
}

void CPPgSources::LoadSettings(void)
{
	m_strMaxSrcPerFile.Format(_T("%u"), m_pPrefs->GetMaxSourcePerFile());

	m_bAutoSrcEnabled = m_pPrefs->IsAutoSourcesEnabled();
	m_dwMinAutoSrcPerFile = m_pPrefs->GetMinAutoSourcesPerFile();
	m_dwMaxAutoSrcPerFile = m_pPrefs->GetMaxAutoSourcesPerFile();
	m_dwMaxAutoSrcTotal = m_pPrefs->GetMaxAutoSourcesTotal();
	m_dwMaxAutoXchgSources = m_pPrefs->GetMaxAutoExchangeSources();

	m_bDisableXS = m_pPrefs->IsDisabledXS();
	m_bEnableXSUpTo = m_pPrefs->DisableXSUpTo();
	m_strXsUpTo.Format(_T("%u"), m_pPrefs->XSUpTo());

	UpdateData(FALSE);

	OnBnClickedAutoSources();

	SetModified(FALSE);
}

BOOL CPPgSources::OnApply()
{
	if(m_bModified)
	{
		int	iVal, iMax;

		UpdateData(TRUE);

		m_pPrefs->SetMaxSourcePerFile(_tstoi(m_strMaxSrcPerFile));
		m_pPrefs->SetAutoSourcesEnabled(B2b(m_bAutoSrcEnabled));
		m_pPrefs->SetMinAutoSourcesPerFile(m_dwMinAutoSrcPerFile);
		m_pPrefs->SetMaxAutoSourcesPerFile(m_dwMaxAutoSrcPerFile);
		m_pPrefs->SetMaxAutoSourcesTotal(m_dwMaxAutoSrcTotal);
		m_pPrefs->SetMaxAutoExchangeSources(m_dwMaxAutoXchgSources);

		m_pPrefs->SetDisabledXS(B2b(m_bDisableXS));
		m_pPrefs->SetDisableXSUpTo(B2b(m_bEnableXSUpTo));

		if ((iVal = _tstoi(m_strXsUpTo)) > (iMax = m_pPrefs->GetMaxSourcePerFileSoft()))
			m_strXsUpTo.Format(_T("%u"), iVal = iMax);
		m_pPrefs->SetXSUpTo(iVal);

		UpdateData(FALSE);
		SetModified(FALSE);
	}
	return CPropertyPage::OnApply();
}

void CPPgSources::Localize(void)
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_AUTOSRC_ENABLED, IDS_ENABLED },
		{ IDC_DISABLE_XS, IDS_DISABLE_XS },
		{ IDC_ENABLE_XSUPTO, IDS_ENABLE_XSUPTO },
		{ IDC_AUTOSRC_GRP_LBL, IDS_AUTOSRC_GRP_LBL },
		{ IDC_AUTOSRC_FROM_LBL, IDS_AUTOSRC_FROM_LBL },
		{ IDC_AUTOSRC_TO_LBL, IDS_AUTOSRC_TO_LBL },
		{ IDC_AUTOSRC_MAXTOTAL_LBL, IDS_AUTOSRC_MAXTOTAL_LBL },
		{ IDC_AUTOSRC_SE_UPTO_LBL, IDS_AUTOSRC_SE_UPTO_LBL },
		{ IDC_MAXSRC_LBL, IDS_PW_MAXSOURCES },
		{ IDC_XSSOURCES, IDS_SOURCES_PF_FILES }
	};

	if (::IsWindow(m_hWnd))
	{
		CString	strRes;

		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl[i][1]));
			SetDlgItemText(s_auResTbl[i][0], strRes);
		}
	}
}

void CPPgSources::OnSourcesChange()
{
	UpdateData(TRUE);

	uint32	dwNum = _tstoi(m_strMaxSrcPerFile);

	if (dwNum < PREF_MIN_MAXFILESRC)
		dwNum = PREF_MIN_MAXFILESRC;
	if (dwNum > PREF_MAX_MAXFILESRC)
		dwNum = PREF_MAX_MAXFILESRC;
	if (dwNum != m_pPrefs->GetMaxSourcePerFile())
	{
		m_strMaxSrcPerFile.Format(_T("%u"), dwNum);
		UpdateData(FALSE);
	}
}

void CPPgSources::OnBnClickedAutoSources()
{
	OnBnClickedDisableXS();

	GetDlgItem(IDC_AUTOSRC_MIN_PER_FILE)->EnableWindow(m_bAutoSrcEnabled);
	GetDlgItem(IDC_AUTOSRC_MAX_PER_FILE)->EnableWindow(m_bAutoSrcEnabled);
	GetDlgItem(IDC_AUTOSRC_MAXTOTAL)->EnableWindow(m_bAutoSrcEnabled);
	GetDlgItem(IDC_AUTOSRC_SE_UPTO)->EnableWindow(m_bAutoSrcEnabled);
	GetDlgItem(IDC_MAXSOURCEPERFILE)->EnableWindow(!m_bAutoSrcEnabled);

	SetModified();
}

void CPPgSources::OnBnClickedDisableXS()
{
	UpdateData(TRUE);

	GetDlgItem(IDC_ENABLE_XSUPTO)->EnableWindow(!m_bDisableXS && !m_bAutoSrcEnabled);
	GetDlgItem(IDC_XSUPTO)->EnableWindow(!m_bDisableXS && m_bEnableXSUpTo && !m_bAutoSrcEnabled);
	SetModified();
}

void CPPgSources::OnBnClickedDisableXSUpTo()
{
	UpdateData(TRUE);
	GetDlgItem(IDC_XSUPTO)->EnableWindow(m_bEnableXSUpTo);

	SetModified();
}
@


1.8
log
@Suppressed compiler warnings [Aw3].
@
text
@d1 1
a1 1
// PPgSources.cpp : implementation file
d3 13
a26 2
// CPPgSources dialog

d30 7
a36 7
	, autoSourcesEnabled(FALSE)
	, minAutoSourcesPerFile(0)
	, maxAutoSourcesPerFile(0)
	, maxAutoSourcesTotal(0)
	, maxAutoExchangeSources(0)
	, disableXS(FALSE)
	, enableXSUpTo(FALSE)
d47 9
a55 25
	DDX_Check(pDX, IDC_AUTOSRC_ENABLED, autoSourcesEnabled);
	DDX_Check(pDX, IDC_DISABLE_XS, disableXS);
	DDX_Check(pDX, IDC_ENABLE_XSUPTO, enableXSUpTo);
	DDX_Control(pDX, IDC_MAXSOURCEPERFILE, maxSourcePerFileEdit);
	DDX_Control(pDX, IDC_AUTOSRC_ENABLED, autoSourcesEnabledCheck);
	DDX_Control(pDX, IDC_AUTOSRC_MIN_PER_FILE, minAutoSourcesPerFileEdit);
	DDX_Control(pDX, IDC_AUTOSRC_MAX_PER_FILE, maxAutoSourcesPerFileEdit);
	DDX_Control(pDX, IDC_AUTOSRC_MAXTOTAL, maxAutoSourcesTotalEdit);
	DDX_Control(pDX, IDC_AUTOSRC_SE_UPTO, maxAutoExchangeSourcesEdit);
	DDX_Control(pDX, IDC_DISABLE_XS, disableXsCheck);
	DDX_Control(pDX, IDC_ENABLE_XSUPTO, enableXsUpToCheck);
	DDX_Control(pDX, IDC_XSUPTO, xsUpToEdit);
	DDX_Text(pDX, IDC_MAXSOURCEPERFILE, maxSourcePerFile);
	DDX_Text(pDX, IDC_MAXSRC_LBL, maxSrcDesc);
	DDX_Text(pDX, IDC_AUTOSRC_MIN_PER_FILE, minAutoSourcesPerFile);
	DDX_Text(pDX, IDC_AUTOSRC_MAX_PER_FILE, maxAutoSourcesPerFile);
	DDX_Text(pDX, IDC_AUTOSRC_MAXTOTAL, maxAutoSourcesTotal);
	DDX_Text(pDX, IDC_AUTOSRC_SE_UPTO, maxAutoExchangeSources);
	DDX_Text(pDX, IDC_AUTOSRC_GRP_LBL, autosrcLblGrp);
	DDX_Text(pDX, IDC_AUTOSRC_FROM_LBL, autosrcLblFrom);
	DDX_Text(pDX, IDC_AUTOSRC_TO_LBL, autosrcLblTo);
	DDX_Text(pDX, IDC_AUTOSRC_MAXTOTAL_LBL, autosrcLblMaxtotal);
	DDX_Text(pDX, IDC_AUTOSRC_SE_UPTO_LBL, autosrcLblSeUpto);
	DDX_Text(pDX, IDC_XSSOURCES, xsSourcesDesc);
	DDX_Text(pDX, IDC_XSUPTO, xsUpTo);
d83 11
a93 14
	if(m_pPrefs->GetMaxSourcePerFile() == 0xFFFF)
		maxSourcePerFile = _T("99999");
	else
		maxSourcePerFile.Format(_T("%d"), m_pPrefs->GetMaxSourcePerFile());

	autoSourcesEnabled = m_pPrefs->IsAutoSourcesEnabled();
	minAutoSourcesPerFile = m_pPrefs->GetMinAutoSourcesPerFile();
	maxAutoSourcesPerFile = m_pPrefs->GetMaxAutoSourcesPerFile();
	maxAutoSourcesTotal = m_pPrefs->GetMaxAutoSourcesTotal();
	maxAutoExchangeSources = m_pPrefs->GetMaxAutoExchangeSources();

	disableXS = m_pPrefs->IsDisabledXS();
	enableXSUpTo = m_pPrefs->DisableXSUpTo();
	xsUpTo.Format(_T("%d"), m_pPrefs->XSUpTo());
a97 1
	OnBnClickedDisableXS();
d110 6
a115 14
		if(!maxSourcePerFile.IsEmpty())
		{
			iVal = _tstoi(maxSourcePerFile);
			m_pPrefs->SetMaxSourcePerFile((iVal != 0) ? iVal : 10);
		}

		m_pPrefs->SetAutoSourcesEnabled(B2b(autoSourcesEnabled));
		m_pPrefs->SetMinAutoSourcesPerFile(minAutoSourcesPerFile);
		m_pPrefs->SetMaxAutoSourcesPerFile(maxAutoSourcesPerFile);
		m_pPrefs->SetMaxAutoSourcesTotal(maxAutoSourcesTotal);
		m_pPrefs->SetMaxAutoExchangeSources(maxAutoExchangeSources);

		m_pPrefs->SetDisabledXS(B2b(disableXS));
		m_pPrefs->SetDisableXSUpTo(B2b(enableXSUpTo));
d117 2
a118 2
		if ((iVal = _tstoi(xsUpTo)) > (iMax = m_pPrefs->GetMaxSourcePerFileSoft()))
			xsUpTo.Format(_T("%u"), iVal = iMax);
d120 2
d132 1
a132 1
	if(::IsWindow(m_hWnd))
d134 11
a144 12
		SetWindowText(GetResString(IDS_DL_SOURCES));
		autoSourcesEnabledCheck.SetWindowText(GetResString(IDS_ENABLED));
		disableXsCheck.SetWindowText(GetResString(IDS_DISABLE_XS));
		enableXsUpToCheck.SetWindowText(GetResString(IDS_ENABLE_XSUPTO));

		GetResString(&autosrcLblGrp, IDS_AUTOSRC_GRP_LBL);
		GetResString(&autosrcLblFrom, IDS_AUTOSRC_FROM_LBL);
		GetResString(&autosrcLblTo, IDS_AUTOSRC_TO_LBL);
		GetResString(&autosrcLblMaxtotal, IDS_AUTOSRC_MAXTOTAL_LBL);
		GetResString(&autosrcLblSeUpto, IDS_AUTOSRC_SE_UPTO_LBL);
		GetResString(&maxSrcDesc, IDS_PW_MAXSOURCES);
		GetResString(&xsSourcesDesc, IDS_SOURCES_PF_FILES);
d146 9
a154 1
		UpdateData(FALSE);
d162 7
a168 2
	uint32	num = 10;
	if (!maxSourcePerFile.IsEmpty())
d170 1
a170 7
		num = _tstoi(maxSourcePerFile) & 0xFFFF;
		if (num < 10)
			num = 10;
	}
	if (num != m_pPrefs->GetMaxSourcePerFile())
	{
		maxSourcePerFile.Format(_T("%u"), num);
d177 1
a177 1
	UpdateData(TRUE);
d179 5
a183 7
	minAutoSourcesPerFileEdit.EnableWindow(autoSourcesEnabled);
	maxAutoSourcesPerFileEdit.EnableWindow(autoSourcesEnabled);
	maxAutoSourcesTotalEdit.EnableWindow(autoSourcesEnabled);
	maxAutoExchangeSourcesEdit.EnableWindow(autoSourcesEnabled);
	maxSourcePerFileEdit.EnableWindow(!autoSourcesEnabled);
	enableXsUpToCheck.EnableWindow(!autoSourcesEnabled && !disableXS);
	xsUpToEdit.EnableWindow(enableXSUpTo && !autoSourcesEnabled && !disableXS);
d192 2
a193 10
	if (disableXS)
	{
		enableXsUpToCheck.EnableWindow(!disableXS && !autoSourcesEnabled);
		xsUpToEdit.EnableWindow(!disableXS && !autoSourcesEnabled);
	}
	else
	{
		enableXsUpToCheck.EnableWindow(!disableXS && !autoSourcesEnabled);
		xsUpToEdit.EnableWindow(enableXSUpTo && !autoSourcesEnabled);
	}
d200 1
a200 1
	xsUpToEdit.EnableWindow(enableXSUpTo && !autoSourcesEnabled);
@


1.7
log
@Removed unneeded CString initializations.
@
text
@d125 1
a125 1
		m_pPrefs->SetAutoSourcesEnabled(autoSourcesEnabled);
d131 2
a132 2
		m_pPrefs->SetDisabledXS(disableXS);
		m_pPrefs->SetDisableXSUpTo(enableXSUpTo);
d170 2
a171 2
	uint16 num = 10;
	if(!maxSourcePerFile.IsEmpty())
d173 1
a173 1
		num = _tstoi(maxSourcePerFile);
d179 1
a179 1
		maxSourcePerFile.Format(_T("%u"),num);
@


1.6
log
@Minor optimization of calls.
@
text
@a18 2
	, maxSourcePerFile(_T(""))
	, maxSrcDesc(_T(""))
a23 5
	, autosrcLblGrp(_T(""))
	, autosrcLblFrom(_T(""))
	, autosrcLblTo(_T(""))
	, autosrcLblMaxtotal(_T(""))
	, autosrcLblSeUpto(_T(""))
a25 2
	, xsUpTo(_T(""))
	, xsSourcesDesc(_T(""))
@


1.5
log
@Removed "Drop sources with highest queue ranking".
@
text
@d124 2
d130 2
a131 2
			int mspf = _tstoi(maxSourcePerFile);
			m_pPrefs->SetMaxSourcePerFile( (mspf != 0) ? mspf : 10);
d143 2
a144 7
		int xs = _tstoi(xsUpTo);

		if (xs > m_pPrefs->GetMaxSourcePerFileSoft())
		{
			xs = m_pPrefs->GetMaxSourcePerFileSoft();
			xsUpTo.Format(_T("%d"), xs);
		}
d146 1
a146 1
		m_pPrefs->SetXSUpTo(xs);
@


1.4
log
@simplified code and removed some unneeded checks, added dynamic droplimit, added not to drop queuefull until asked twice, added preferences option with import of old ini parameter
@
text
@a32 1
	, enableDropHighestQR(FALSE)
a47 1
	DDX_Check(pDX, IDC_ENABLE_DROPHIGHESTQR, enableDropHighestQR);
a56 1
	DDX_Control(pDX, IDC_ENABLE_DROPHIGHESTQR, enableDropHighestQRCheck);
a82 1
	ON_BN_CLICKED(IDC_ENABLE_DROPHIGHESTQR, OnSettingsChange)
a110 1
	enableDropHighestQR = m_pPrefs->GetDropHighestQREnabled();
a149 1
		m_pPrefs->SetDropHighestQREnabled(enableDropHighestQR);
a164 1
		enableDropHighestQRCheck.SetWindowText(GetResString(IDS_DROP_HIGHEST_QR));
@


1.3
log
@Improved preferences localization.
@
text
@d33 1
d49 1
d59 1
d86 1
d115 1
d155 1
d171 1
@


1.2
log
@Minor fix...
@
text
@d166 7
a172 7
		autosrcLblGrp		= GetResString(IDS_AUTOSRC_GRP_LBL);
		autosrcLblFrom		= GetResString(IDS_AUTOSRC_FROM_LBL);
		autosrcLblTo		= GetResString(IDS_AUTOSRC_TO_LBL);
		autosrcLblMaxtotal	= GetResString(IDS_AUTOSRC_MAXTOTAL_LBL);
		autosrcLblSeUpto	= GetResString(IDS_AUTOSRC_SE_UPTO_LBL);
		maxSrcDesc 			= GetResString(IDS_PW_MAXSOURCES);
		xsSourcesDesc 		= GetResString(IDS_SOURCES_PF_FILES);
@


1.1
log
@Reorganized preferences
@
text
@d205 2
d217 2
a218 2
		enableXsUpToCheck.EnableWindow(!disableXS);
		xsUpToEdit.EnableWindow(!disableXS);
d222 2
a223 2
		enableXsUpToCheck.EnableWindow(!disableXS);
		xsUpToEdit.EnableWindow(enableXSUpTo && !m_pPrefs->IsAutoSourcesEnabled());
d231 1
a231 1
	xsUpToEdit.EnableWindow(enableXSUpTo && !m_pPrefs->IsAutoSourcesEnabled());
@

