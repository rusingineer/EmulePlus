head	1.5;
access;
symbols
	PublicRelease_1_2e:1.5
	Interim_Release_1-2e_RC1:1.5
	PublicRelease_1_2d:1.5
	Interim_Release_1-2d_RC1:1.5
	Interim_Release_1-2d_beta1:1.5
	PublicRelease_1_2c:1.5
	Interim_Release_1-2c_RC1:1.5
	Interim_Release_1-2c_beta1:1.3
	PublicRelease_1_2b:1.3
	Interim_Release_1-2b_RC1:1.3
	PublicRelease_1_2a:1.3
	Interim_Release_1-2a_RC1:1.3
	Interim_Release_1-2a_beta2:1.3
	Interim_Release_1-2a_beta1:1.3
	PublicRelease_1_2:1.3
	Interim_Release_1-2_RC1:1.3
	Interim_Release_1-2_beta1:1.3
	PublicRelease_1_1g:1.2
	Interim_Release_1-1g_RC3:1.2
	Interim_Release_1-1g_RC2:1.2
	Interim_Release_1-1g_RC1:1.2
	Interim_Release_1-1g_beta2:1.2
	Interim_Release_1-1g_beta1:1.2
	PublicRelease_1_1f:1.2
	Interim_Release_1-1f_RC1:1.2
	PublicRelease_1_1e:1.2
	Interim_Release_1-1e_RC2:1.2
	Interim_Release_1-1e_RC1:1.2
	Interim_Release_1-1e_beta1:1.2
	PublicRelease_1_1d:1.2
	Interim_Release_1-1d_RC1:1.2
	PublicRelease_1_1c:1.2
	Interim_Release_1-1c_RC1:1.2
	Interim_Release_1-1c_beta2:1.2
	Interim_Release_1-1c_beta1:1.2
	PublicRelease_1_1b:1.2
	Interim_Release_1-1b_RC1:1.2
	PublicRelease_1_1a:1.2
	Interim_Release_1-1a_RC2:1.2
	Interim_Release_1-1a_RC1:1.2
	Interim_Release_1-1a_beta2:1.2
	Interim_Release_1-1a_beta1:1.2
	PublicRelease_1_1:1.2
	Interim_Release_1-1_beta1:1.2
	PublicRelease_1o:1.2
	Interim_Release_1o_RC1:1.2
	Interim_Release_1o_beta1:1.2
	PublicRelease_1n:1.2
	Interim_Release_1n_RC2:1.2
	Interim_Release_1n_RC1:1.2
	Interim_Release_1n_beta2:1.2
	Interim_Release_1n_beta1:1.2
	PublicRelease_1m:1.2
	Interim_Release_1m_beta1:1.2
	PublicRelease_1l:1.2
	Interim_Release_1l_RC3:1.2
	Interim_Release_1l_RC2:1.2
	Interim_Release_1l_RC1:1.2
	Interim_Release_1l_beta2:1.2
	Interim_Release_1l_beta1:1.2
	PublicRelease_1k:1.2
	Interim_Release_1k_RC4:1.2
	Interim_1k_RC3:1.2
	Interim_1k_RC2:1.2
	Interim_Release_1k_RC1:1.2
	Interim_Release_1k_beta5:1.2
	Intrerim_Release_1k_beta4:1.2
	Interim_Release_1k_beta1:1.2
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.2
	PublicRelease_1i:1.2
	Interim_Release_1i_RC6:1.2
	Interim_Release_1i_RC3:1.2
	Interim_Release_1i_RC2:1.2
	Interim_Release_1i_RC1:1.2
	Interim_Release_1i_beta3:1.2
	Interim_Release_1i_beta2:1.2
	Interim_Release_1i_beta1:1.2
	PublicRelease_1h:1.2
	Interim_Release_1h_rc2:1.2
	Interim_Release_1h_RC1:1.2
	Interim_Release_1h_beta2:1.2
	Interim_Release_1h_beta1_now:1.2
	Interim_Release_1h_beta1:1.2
	PublicRelease_1g:1.2
	Interim_Release_1g_RC6_Final:1.2
	Interim_Release_1g_RC6:1.2
	Interim_Release_1g_RC5:1.2
	Interim_Release_1g_RC4:1.2
	Interim_Release_1g_RC3:1.2
	Interim_Release_1g_beta2:1.1
	Interim_Release_1g_beta1:1.1
	Interim_Release_1f_RC4:1.1
	Interim_Release_1f_RC3:1.1
	Interim_Release_1f_RC2:1.1
	Interim_Release_1f_RC:1.1
	Interim_Release_1f_beta2:1.1
	Interim_Release_1f_beta1:1.1
	PublicRelease_1e:1.1
	Interim_Release_1e_RC2:1.1
	Interim_Release_1e_RC:1.1
	Interim_Release_1e_beta3:1.1
	Interim_Release_1e_beta2:1.1
	Interim_Release_1e_beta2_before_kuchin:1.1
	Interim_Release_1e_beta1:1.1
	PublicRelease_1c:1.1
	featurestest:1.1.0.16
	Interim_Release_1c_RC:1.1
	Interim_Release_1c_beta2:1.1
	Interim_Release_1c_beta1:1.1
	threaded_downloadqueue:1.1.0.14
	PublicRelease_1b:1.1
	Interim_Release_1b_beta2:1.1
	Interim_Release_1b_beta1:1.1
	proxydeadlake:1.1.0.12
	PublicRelease_1a:1.1
	Interim_Release_1a_beta2:1.1
	BerkeleyDb:1.1.0.10
	Interim_Release_1a_beta1:1.1
	PublicRelease_1:1.1
	goldfish:1.1
	eMulePlus_1_RC2:1.1
	eMulePlus_26b_1RC1:1.1
	PreRelease_26b_i0e:1.1
	before_26d_merge:1.1
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2007.04.08.22.30.01;	author aw3;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.03.18.55.17;	author kush_eplus;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.25.05.21.29;	author aw3;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.15.09.10.05;	author partyckip;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.24;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.32;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Fixed recently introduced issues.
@
text
@//
//	Class:		CThemeHelperST
//
//	Compiler:	Visual C++
//	Tested on:	Visual C++ 6.0
//
//	Version:	See GetVersionC() or GetVersionI()
//
//	Created:	09/January/2002
//	Updated:	31/October/2002
//
//	Author:		Davide Calabro'		davide_calabro@@yahoo.com
//									http://www.softechsoftware.it
//
//	Note:		Based on the CVisualStylesXP code 
//				published by David Yuheng Zhao (yuheng_zhao@@yahoo.com)
//
//	Disclaimer
//	----------
//	THIS SOFTWARE AND THE ACCOMPANYING FILES ARE DISTRIBUTED "AS IS" AND WITHOUT
//	ANY WARRANTIES WHETHER EXPRESSED OR IMPLIED. NO REPONSIBILITIES FOR POSSIBLE
//	DAMAGES OR EVEN FUNCTIONALITY CAN BE TAKEN. THE USER MUST ASSUME THE ENTIRE
//	RISK OF USING THIS SOFTWARE.
//
//	Terms of use
//	------------
//	THIS SOFTWARE IS FREE FOR PERSONAL USE OR FREEWARE APPLICATIONS.
//	IF YOU USE THIS SOFTWARE IN COMMERCIAL OR SHAREWARE APPLICATIONS YOU
//	ARE GENTLY ASKED TO DONATE 5$ (FIVE U.S. DOLLARS) TO THE AUTHOR:
//
//		Davide Calabro'
//		P.O. Box 65
//		21019 Somma Lombardo (VA)
//		Italy
//
#pragma once

#include <uxtheme.h>
#include <tmschema.h>

class CThemeHelperST
{
public:
	CThemeHelperST();
	virtual ~CThemeHelperST();

	HTHEME	OpenThemeData(HWND hwnd, LPCWSTR pszClassList);
	HRESULT	CloseThemeData(HTHEME hTheme);
	HRESULT	DrawThemeBackground(HTHEME hTheme, HWND hWnd, HDC hdc, int iPartId, int iStateId,
		const RECT *pRect, const RECT *pClipRect);
	HRESULT	DrawThemeText(HTHEME hTheme, HDC hdc, int iPartId, int iStateId,
		LPCWSTR pszText, int iCharCount, DWORD dwTextFlags, DWORD dwTextFlags2, const RECT *pRect);
	BOOL	IsThemeActive();
	BOOL	IsAppThemed();
	HRESULT	GetCurrentThemeName(LPWSTR pszThemeFileName, int cchMaxNameChars, 
		LPWSTR pszColorBuff, int cchMaxColorChars, LPWSTR pszSizeBuff, int cchMaxSizeChars);
	HRESULT	GetThemeTextExtent(HTHEME hTheme, HDC hdc, int iPartId, int iStateId,
		LPCWSTR pszText, int iCharCount, DWORD dwTextFlags, LPCRECT pBoundingRect, LPRECT pExtentRect);

private:
	HMODULE	m_hDll;

	typedef HTHEME (WINAPI *PFNOPENTHEMEDATA)(HWND, LPCWSTR);
	static HTHEME WINAPI OpenThemeDataFail(HWND, LPCWSTR) { return NULL; }

	typedef HRESULT (WINAPI *PFNCLOSETHEMEDATA)(HTHEME);
	static HRESULT WINAPI CloseThemeDataFail(HTHEME) { return E_FAIL; }

	typedef HRESULT (WINAPI *PFNDRAWTHEMEBACKGROUND)(HTHEME, HDC, int, int, const RECT*,  const RECT*);
	static HRESULT WINAPI DrawThemeBackgroundFail(HTHEME, HDC, int, int, const RECT*, const RECT*) { return E_FAIL; }

	typedef HRESULT (WINAPI *PFNDRAWTHEMETEXT)(HTHEME, HDC, int, int, LPCWSTR, int, DWORD, DWORD, const RECT*);
	static HRESULT WINAPI DrawThemeTextFail(HTHEME, HDC, int, int, LPCWSTR, int, DWORD, DWORD, const RECT*) { return E_FAIL; }

	typedef BOOL (WINAPI *PFNISTHEMEACTIVE)();
	static BOOL WINAPI IsThemeActiveFail() { return FALSE; }

	typedef BOOL (WINAPI *PFNISAPPTHEMED)();
	static BOOL WINAPI IsAppThemedFail() { return FALSE; }

	typedef HRESULT (WINAPI *PFNGETCURRENTTHEMENAME)(LPWSTR, int, LPWSTR, int, LPWSTR, int);
	static HRESULT WINAPI GetCurrentThemeNameFail(LPWSTR, int, LPWSTR, int, LPWSTR, int) { return E_FAIL; }

	typedef HRESULT (WINAPI *PFNDRAWTHEMEPARENTBACKGROUND)(HWND, HDC, RECT*);
	static HRESULT WINAPI DrawThemeParentBackgroundFail(HWND, HDC, RECT*) { return E_FAIL; }

	typedef HRESULT (WINAPI *PFNGETTHEMETEXTEXTENT)(HTHEME, HDC, int, int, LPCWSTR, int, DWORD, LPCRECT, LPRECT);
	static HRESULT WINAPI GetThemeTextExtentFail(HTHEME, HDC, int, int, LPCWSTR, int, DWORD, LPCRECT, LPRECT) { return E_FAIL; }

	PFNOPENTHEMEDATA				m_pfnOpenThemeData;
	PFNCLOSETHEMEDATA				m_pfnCloseThemeData;
	PFNDRAWTHEMEBACKGROUND			m_pfnDrawThemeBackground;
	PFNDRAWTHEMETEXT				m_pfnDrawThemeText;
	PFNISTHEMEACTIVE				m_pfnIsThemeActive;
	PFNISAPPTHEMED					m_pfnIsAppThemed;
	PFNGETCURRENTTHEMENAME			m_pfnGetCurrentThemeName;
	PFNDRAWTHEMEPARENTBACKGROUND	m_pfnDrawThemeParentBackground;
	PFNGETTHEMETEXTEXTENT			m_pfnGetThemeTextExtent;
};
@


1.4
log
@Merged theme code into ThemeHelperST, remove VisualStylesXP;
uxtheme.dll load optimization;
Some updates from original and code cleanup
@
text
@d41 1
a41 1
class CThemeHelperST  
d57 1
a57 1
	HRESULT GetThemeTextExtent(HTHEME hTheme, HDC hdc, int iPartId, int iStateId,
d63 2
a64 2
	typedef	HTHEME(__stdcall *PFNOPENTHEMEDATA)(HWND, LPCWSTR);
	static HTHEME OpenThemeDataFail(HWND, LPCWSTR) { return NULL; }
d66 2
a67 2
	typedef	HRESULT (__stdcall *PFNCLOSETHEMEDATA)(HTHEME);
	static HRESULT CloseThemeDataFail(HTHEME) { return E_FAIL; }
d69 2
a70 2
	typedef	HRESULT (__stdcall *PFNDRAWTHEMEBACKGROUND)(HTHEME, HDC, int, int, const RECT*,  const RECT*);
	static HRESULT DrawThemeBackgroundFail(HTHEME, HDC, int, int, const RECT*, const RECT*) { return E_FAIL; }
d72 2
a73 2
	typedef	HRESULT (__stdcall *PFNDRAWTHEMETEXT)(HTHEME, HDC, int, int, LPCWSTR, int, DWORD, DWORD, const RECT*);
	static HRESULT DrawThemeTextFail(HTHEME, HDC, int, int, LPCWSTR, int, DWORD, DWORD, const RECT*) { return E_FAIL; }
d75 2
a76 2
	typedef	BOOL (__stdcall *PFNISTHEMEACTIVE)();
	static BOOL	IsThemeActiveFail() { return FALSE; }
d78 2
a79 2
	typedef	BOOL (__stdcall *PFNISAPPTHEMED)();
	static BOOL IsAppThemedFail() { return FALSE; }
d81 2
a82 2
	typedef	HRESULT (__stdcall *PFNGETCURRENTTHEMENAME)(LPWSTR, int, LPWSTR, int, LPWSTR, int);
	static HRESULT GetCurrentThemeNameFail(LPWSTR, int, LPWSTR, int, LPWSTR, int) { return E_FAIL; }
d84 2
a85 2
	typedef	HRESULT (__stdcall *PFNDRAWTHEMEPARENTBACKGROUND)(HWND, HDC, RECT*);
	static HRESULT DrawThemeParentBackgroundFail(HWND, HDC, RECT*) { return E_FAIL; }
d87 2
a88 2
	typedef	HRESULT (__stdcall *PFNGETTHEMETEXTEXTENT)(HTHEME, HDC, int, int, LPCWSTR, int, DWORD, LPCRECT, LPRECT);
	static HRESULT GetThemeTextExtentFail(HTHEME, HDC, int, int, LPCWSTR, int, DWORD, LPCRECT, LPRECT) { return E_FAIL; }
@


1.3
log
@Unicode improvements.
@
text
@a35 4
#ifndef _THEMEHELPERST_H_
#define _THEMEHELPERST_H_

#if _MSC_VER > 1000
a36 1
#endif // _MSC_VER > 1000
d38 2
a39 3
#ifndef	HTHEME
#define	HTHEME	HANDLE
#endif
d47 15
a61 6
	HTHEME OpenThemeData(HWND hwnd, LPCWSTR pszClassList);
	HRESULT CloseThemeData(HTHEME hTheme);
	HRESULT DrawThemeBackground(HTHEME hTheme, HWND hWnd, HDC hdc, int iPartId, int iStateId, const RECT* pRect, const RECT* pClipRect);
	HRESULT DrawThemeText(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwTextFlags, DWORD dwTextFlags2, const RECT* pRect);
	BOOL IsThemeActive();
	BOOL IsAppThemed();
d63 2
a64 2
	static short GetVersionI()		{return 11;}
	static LPCTSTR GetVersionC()	{return (LPCTSTR)_T("1.1");}
d66 2
a67 2
private:
	LPVOID GetProc(LPCSTR szProc, LPVOID pfnFail);
d69 2
a70 2
	typedef HTHEME(__stdcall *PFNOPENTHEMEDATA)(HWND hwnd, LPCWSTR pszClassList);
	static HTHEME __stdcall OpenThemeDataFail(HWND, LPCWSTR)	{return NULL;}
d72 2
a73 2
	typedef HRESULT(__stdcall *PFNCLOSETHEMEDATA)(HTHEME hTheme);
	static HRESULT __stdcall CloseThemeDataFail(HTHEME)	{return E_FAIL;}
d75 2
a76 2
	typedef HRESULT(__stdcall *PFNDRAWTHEMEBACKGROUND)(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, const RECT* pRect,  const RECT* pClipRect);
	static HRESULT __stdcall DrawThemeBackgroundFail(HTHEME, HDC, int, int, const RECT*, const RECT*)	{return E_FAIL;}
d78 2
a79 1
	typedef HRESULT(__stdcall *PFNDRAWTHEMEPARENTBACKGROUND)(HWND hWnd, HDC hdc, RECT* pRect);
d81 2
a82 2
	typedef HRESULT (__stdcall *PFNDRAWTHEMETEXT)(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwTextFlags, DWORD dwTextFlags2, const RECT* pRect);
	static HRESULT __stdcall DrawThemeTextFail(HTHEME, HDC, int, int, LPCWSTR, int, DWORD, DWORD, const RECT*)	{return E_FAIL;}
d84 2
a85 2
	typedef BOOL(__stdcall *PFNISAPPTHEMED)();
	static BOOL __stdcall IsAppThemedFail()	{return FALSE;}
d87 2
a88 2
	typedef BOOL (__stdcall *PFNISTHEMEACTIVE)();
	static BOOL __stdcall IsThemeActiveFail()	{return FALSE;}
d90 9
a98 1
	HMODULE		m_hDll;
a99 2

#endif 
@


1.2
log
@unicode cleanup
@
text
@d64 1
a64 1
	LPVOID GetProc(LPCTSTR szProc, LPVOID pfnFail);
@


1.1
log
@*** empty log message ***
@
text
@d64 1
a64 1
	LPVOID GetProc(LPCSTR szProc, LPVOID pfnFail);
@


1.1.4.1
log
@updating this branch...
@
text
@@

