head	1.3;
access;
symbols
	PublicRelease_1_2e:1.3
	Interim_Release_1-2e_RC1:1.3
	PublicRelease_1_2d:1.2
	Interim_Release_1-2d_RC1:1.2
	Interim_Release_1-2d_beta1:1.2
	PublicRelease_1_2c:1.1
	Interim_Release_1-2c_RC1:1.1
	Interim_Release_1-2c_beta1:1.1
	PublicRelease_1_2b:1.1
	Interim_Release_1-2b_RC1:1.1
	PublicRelease_1_2a:1.1
	Interim_Release_1-2a_RC1:1.1
	Interim_Release_1-2a_beta2:1.1
	Interim_Release_1-2a_beta1:1.1
	PublicRelease_1_2:1.1
	Interim_Release_1-2_RC1:1.1
	Interim_Release_1-2_beta1:1.1
	PublicRelease_1_1g:1.1
	Interim_Release_1-1g_RC3:1.1
	Interim_Release_1-1g_RC2:1.1
	Interim_Release_1-1g_RC1:1.1
	Interim_Release_1-1g_beta2:1.1
	Interim_Release_1-1g_beta1:1.1
	PublicRelease_1_1f:1.1
	Interim_Release_1-1f_RC1:1.1
	PublicRelease_1_1e:1.1
	Interim_Release_1-1e_RC2:1.1
	Interim_Release_1-1e_RC1:1.1
	Interim_Release_1-1e_beta1:1.1
	PublicRelease_1_1d:1.1
	Interim_Release_1-1d_RC1:1.1
	PublicRelease_1_1c:1.1
	Interim_Release_1-1c_RC1:1.1
	Interim_Release_1-1c_beta2:1.1
	Interim_Release_1-1c_beta1:1.1
	PublicRelease_1_1b:1.1
	Interim_Release_1-1b_RC1:1.1
	PublicRelease_1_1a:1.1
	Interim_Release_1-1a_RC2:1.1
	Interim_Release_1-1a_RC1:1.1
	Interim_Release_1-1a_beta2:1.1
	Interim_Release_1-1a_beta1:1.1
	PublicRelease_1_1:1.1
	Interim_Release_1-1_beta1:1.1
	PublicRelease_1o:1.1
	Interim_Release_1o_RC1:1.1
	Interim_Release_1o_beta1:1.1
	PublicRelease_1n:1.1
	Interim_Release_1n_RC2:1.1
	Interim_Release_1n_RC1:1.1
	PublicRelease_1m:1.1
	Interim_Release_1m_beta1:1.1
	PublicRelease_1l:1.1
	Interim_Release_1l_RC3:1.1
	Interim_Release_1l_RC2:1.1
	Interim_Release_1l_RC1:1.1
	Interim_Release_1l_beta2:1.1
	Interim_Release_1l_beta1:1.1
	PublicRelease_1k:1.1
	Interim_Release_1k_RC4:1.1
	Interim_1k_RC3:1.1
	Interim_1k_RC2:1.1
	Interim_Release_1k_RC1:1.1
	Interim_Release_1k_beta5:1.1
	Intrerim_Release_1k_beta4:1.1
	Interim_Release_1k_beta1:1.1
	PublicRelease_1j:1.1
	Interim_Release_1J_RC3:1.1
	Interim_Release_1j_RC3:1.1
	Interim_Release_1j_RC2:1.1
	Interim_Release_1j_RC1:1.1
	Interim_Release_1j_beta2:1.1
	Interim_Release_1j_beta1:1.1
	PublicRelease_1i:1.1
	Interim_Release_1i_RC6:1.1
	Interim_Release_1i_RC3:1.1
	Interim_Release_1i_RC2:1.1
	Interim_Release_1i_RC1:1.1
	Interim_Release_1i_beta3:1.1
	Interim_Release_1i_beta2:1.1
	Interim_Release_1i_beta1:1.1
	PublicRelease_1h:1.1
	Interim_Release_1h_rc2:1.1
	Interim_Release_1h_RC1:1.1
	Interim_Release_1h_beta2:1.1
	Interim_Release_1h_beta1_now:1.1
	Interim_Release_1h_beta1:1.1
	PublicRelease_1g:1.1
	Interim_Release_1g_RC6_Final:1.1
	Interim_Release_1g_RC6:1.1
	Interim_Release_1g_RC5:1.1
	Interim_Release_1g_RC4:1.1
	Interim_Release_1g_RC3:1.1
	Interim_Release_1g_beta2:1.1
	Interim_Release_1g_beta1:1.1
	Interim_Release_1f_RC4:1.1
	Interim_Release_1f_RC3:1.1
	Interim_Release_1f_RC2:1.1
	Interim_Release_1f_RC:1.1
	Interim_Release_1f_beta2:1.1
	Interim_Release_1f_beta1:1.1
	PublicRelease_1e:1.1
	Interim_Release_1e_RC2:1.1
	Interim_Release_1e_RC:1.1
	Interim_Release_1e_beta3:1.1
	Interim_Release_1e_beta2:1.1
	Interim_Release_1e_beta2_before_kuchin:1.1
	Interim_Release_1e_beta1:1.1
	PublicRelease_1c:1.1
	featurestest:1.1.0.16
	Interim_Release_1c_RC:1.1
	Interim_Release_1c_beta2:1.1
	Interim_Release_1c_beta1:1.1
	threaded_downloadqueue:1.1.0.14
	PublicRelease_1b:1.1
	Interim_Release_1b_beta2:1.1
	Interim_Release_1b_beta1:1.1
	proxydeadlake:1.1.0.12
	PublicRelease_1a:1.1
	Interim_Release_1a_beta2:1.1
	BerkeleyDb:1.1.0.10
	Interim_Release_1a_beta1:1.1
	PublicRelease_1:1.1
	goldfish:1.1
	eMulePlus_1_RC2:1.1
	eMulePlus_26b_1RC1:1.1
	PreRelease_26b_i0e:1.1
	before_26d_merge:1.1
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.3
date	2008.07.14.04.43.59;	author aw3;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.20.04.35.53;	author aw3;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.34.01;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.17.32.55;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Reduced H-file dependency.
@
text
@// COptionTree
//
// License
// -------
// This code is provided "as is" with no expressed or implied warranty.
// 
// You may use this code in a commercial product with or without acknowledgement.
// However you may not sell this code or any modification of this code, this includes 
// commercial libraries and anything else for profit.
//
// I would appreciate a notification of any bugs or bug fixes to help the control grow.
//
// History:
// --------
//	See License.txt for full history information.
//
//
// Copyright (c) 1999-2002 
// ComputerSmarts.net 
// mattrmiller@@computersmarts.net

#include "stdafx.h"
#include "OptionTreeInfo.h"
#include "OptionTree.h"
#include "OptionTreeDef.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// COptionTreeInfo

COptionTreeInfo::COptionTreeInfo()
{
	// Initialize variables
	m_otOption = NULL;
}

COptionTreeInfo::~COptionTreeInfo()
{
}


BEGIN_MESSAGE_MAP(COptionTreeInfo, CStatic)
	//{{AFX_MSG_MAP(COptionTreeInfo)
	ON_WM_PAINT()
	ON_WM_ERASEBKGND()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// COptionTreeInfo message handlers

void COptionTreeInfo::OnPaint() 
{
	// Make sure option is valid
	if (m_otOption == NULL)
	{
		return;
	}

	// Declare variables
	CPaintDC dc(this);
	CRect rcClient, rcText, rcOrgClient;
	CDC* pDCMem = new CDC;
	CBitmap bpMem;
	CBitmap *bmOld;
	CBrush brBack, *brOldBrush;
	COptionTreeItem *otiItem;
	COLORREF crOld;
	int nOldBack;
	HGDIOBJ hOld;
	CString strLabel, strInfo;

	// Get client rectangle
	GetClientRect(rcClient);
	rcOrgClient = rcClient;

	// Create pens and brushes
	brBack.CreateSolidBrush(GetSysColor(COLOR_BTNFACE));

	// Create DC
	pDCMem->CreateCompatibleDC(&dc);

	// Create bitmap
	bpMem.CreateCompatibleBitmap(&dc, rcClient.Width(), rcClient.Height());

	// Select bitmap
	bmOld = pDCMem->SelectObject(&bpMem);

	// Select brush
	brOldBrush = pDCMem->SelectObject(&brBack);

	// Paint the rectangle
	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.Width(), rcClient.Height(), PATCOPY);

	// Draw the edge
	pDCMem->DrawEdge(&rcClient, BDR_SUNKENOUTER, BF_RECT);
	
	// Deflate client rectangle
	rcClient.DeflateRect(4, 4);

	// Get the focused item
	otiItem = m_otOption->GetFocusedItem();

	// Set the text color
	if (m_otOption->IsWindowEnabled() == FALSE)
	{
		crOld = pDCMem->SetTextColor(GetSysColor(COLOR_GRAYTEXT));
	}
	else
	{
		crOld = pDCMem->SetTextColor(GetSysColor(COLOR_BTNTEXT));
	}

	// Set the background mode
	nOldBack = pDCMem->SetBkMode(TRANSPARENT);

	// See if we have a focused item and get text
	// -- Default text
	if (otiItem == NULL)
	{
		if (m_otOption->GetDefInfoTextNoSel() == TRUE)
		{
			strLabel = OT_DEFLABEL;
			strInfo = OT_DEFINFO;
		}
	}
	// -- Items text
	else
	{
		strLabel = otiItem->GetLabelText();
		strInfo = otiItem->GetInfoText();
	}

	// Select the bold font
	hOld = pDCMem->SelectObject(m_otOption->GetBoldFont());

	// Calculate label rectangle
	rcText = rcClient;

	// Draw label
	pDCMem->DrawText(strLabel, &rcText, DT_SINGLELINE | DT_CALCRECT);
	pDCMem->DrawText(strLabel, &rcText, DT_SINGLELINE);
	
	// Select normal font
	pDCMem->SelectObject(m_otOption->GetNormalFont());

	// Calculate label rectangle
	rcText.top = rcText.bottom;
	rcText.bottom = rcClient.bottom;
	rcText.right = rcClient.right;

	// Draw info
	pDCMem->DrawText(strInfo, &rcText, DT_WORDBREAK);

	// Copy to screen
	dc.BitBlt(0, 0, rcOrgClient.Width(), rcOrgClient.Height(), pDCMem, 0, 0, SRCCOPY);

	// Restore the old GDI objects
	pDCMem->SelectObject(hOld);
	pDCMem->SelectObject(bmOld);
	pDCMem->SelectObject(brOldBrush);
	pDCMem->SetTextColor(crOld);
	pDCMem->SetBkMode(nOldBack);

	// Delete objects
	if (brBack.GetSafeHandle() != NULL)
	{
		brBack.DeleteObject();
	}
	if (pDCMem->GetSafeHdc() != NULL)
	{
		pDCMem->DeleteDC();
	}
	delete pDCMem;
	if (bpMem.GetSafeHandle() != NULL)
	{
		bpMem.DeleteObject();
	}
}

void COptionTreeInfo::SetOptionsOwner(COptionTree *otOption)
{
	// Save pointer
	m_otOption = otOption;
}


BOOL COptionTreeInfo::OnEraseBkgnd(CDC* pDC) 
{
	NOPRM(pDC);
	return FALSE;
}
@


1.2
log
@Suppressed compiler warnings.
@
text
@d25 1
@


1.1
log
@*** empty log message ***
@
text
@a23 2

// Added Headers
d194 1
a194 1
	// Ha, Ha
@


1.1.4.1
log
@updating this branch...
@
text
@@

