head	1.10;
access;
symbols
	PublicRelease_1_2e:1.10
	Interim_Release_1-2e_RC1:1.10
	PublicRelease_1_2d:1.10
	Interim_Release_1-2d_RC1:1.10
	Interim_Release_1-2d_beta1:1.9
	PublicRelease_1_2c:1.8
	Interim_Release_1-2c_RC1:1.8
	Interim_Release_1-2c_beta1:1.8
	PublicRelease_1_2b:1.8
	Interim_Release_1-2b_RC1:1.8
	PublicRelease_1_2a:1.6
	Interim_Release_1-2a_RC1:1.6
	Interim_Release_1-2a_beta2:1.6
	Interim_Release_1-2a_beta1:1.6
	PublicRelease_1_2:1.6
	Interim_Release_1-2_RC1:1.6
	Interim_Release_1-2_beta1:1.6
	PublicRelease_1_1g:1.6
	Interim_Release_1-1g_RC3:1.6
	Interim_Release_1-1g_RC2:1.6
	Interim_Release_1-1g_RC1:1.6
	Interim_Release_1-1g_beta2:1.6
	Interim_Release_1-1g_beta1:1.6
	PublicRelease_1_1f:1.6
	Interim_Release_1-1f_RC1:1.6
	PublicRelease_1_1e:1.6
	Interim_Release_1-1e_RC2:1.6
	Interim_Release_1-1e_RC1:1.6
	Interim_Release_1-1e_beta1:1.6
	PublicRelease_1_1d:1.6
	Interim_Release_1-1d_RC1:1.6
	PublicRelease_1_1c:1.6
	Interim_Release_1-1c_RC1:1.6
	Interim_Release_1-1c_beta2:1.6
	Interim_Release_1-1c_beta1:1.6
	PublicRelease_1_1b:1.4
	Interim_Release_1-1b_RC1:1.4
	PublicRelease_1_1a:1.4
	Interim_Release_1-1a_RC2:1.4
	Interim_Release_1-1a_RC1:1.4
	Interim_Release_1-1a_beta2:1.4
	Interim_Release_1-1a_beta1:1.4
	PublicRelease_1_1:1.4
	Interim_Release_1-1_beta1:1.4
	PublicRelease_1o:1.4
	Interim_Release_1o_RC1:1.4
	Interim_Release_1o_beta1:1.4
	PublicRelease_1n:1.4
	Interim_Release_1n_RC2:1.4
	Interim_Release_1n_RC1:1.4
	Interim_Release_1n_beta2:1.4
	Interim_Release_1n_beta1:1.4
	PublicRelease_1m:1.4
	Interim_Release_1m_beta1:1.4
	PublicRelease_1l:1.4
	Interim_Release_1l_RC3:1.4
	Interim_Release_1l_RC2:1.4
	Interim_Release_1l_RC1:1.4
	Interim_Release_1l_beta2:1.4
	Interim_Release_1l_beta1:1.4
	PublicRelease_1k:1.3
	Interim_Release_1k_RC4:1.3
	Interim_1k_RC3:1.3
	Interim_1k_RC2:1.3
	Interim_Release_1k_RC1:1.2
	Interim_Release_1k_beta5:1.2
	Intrerim_Release_1k_beta4:1.2
	Interim_Release_1k_beta1:1.2
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.2
	PublicRelease_1i:1.2
	Interim_Release_1i_RC6:1.2
	Interim_Release_1i_RC3:1.2
	Interim_Release_1i_RC2:1.2
	Interim_Release_1i_RC1:1.2
	Interim_Release_1i_beta3:1.2
	Interim_Release_1i_beta2:1.2;
locks; strict;
comment	@ * @;


1.10
date	2008.03.03.05.24.04;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.12.23.52.20;	author fuxie-dk;	state Exp;
branches;
next	1.8;

1.8
date	2006.12.17.18.58.01;	author eklmn;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.17.11.13.18;	author eklmn;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.19.10.48.08;	author dongato;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.16.12.02.00;	author dongato;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.12.18.59.01;	author dongato;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.30.15.55.02;	author eklmn;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.15.10.24.20;	author morevit;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.15.03.52.26;	author morevit;	state Exp;
branches;
next	;


desc
@@


1.10
log
@H-file reorganization.
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MOREVIT - Note: The functionality in this class should really be integrated into the download queue class,
//		but it's tough enough separating it out of the list control without modifying two classes at once.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#pragma once

#include "Loggable.h"
#include "MuleCtrlItem.h"
#include "Category.h"

#pragma warning(push)
#pragma warning(disable:4702) // unreachable code
#include <map>
#include <hash_map>
#include <vector>
#pragma warning(pop)

using namespace std;
#ifndef VS2002
	using namespace stdext;
#endif

class CPartFile;
class CUpDownClient;

class CDownloadList : public CLoggable
{
public:
	friend class CDownloadListCtrl;

	typedef vector<CPartFile*>					PartFileVector;

protected:
	CDownloadListCtrl						   *m_pctlDownloadList;

	typedef map<CPartFile*, CPartFileDLItem*>	PartFileMap;
	typedef PartFileMap::iterator				PFIter;
	typedef pair<PFIter,PFIter>					PFRange;
	typedef const pair<PFIter,bool>				FileInserted;

	typedef hash_multimap<CUpDownClient*, CSourceDLItem*>		SourceMap;
	typedef SourceMap::iterator					SourceIter;
	typedef pair<SourceIter,SourceIter>			SourceRange;
	typedef const pair<SourceIter,bool>			SourceInserted;

	typedef vector<CPartFileDLItem*>			PartFileItemVector;
	typedef vector<CSourceDLItem*>				SourceItemVector;

	PartFileMap									m_mapFiles;
	SourceMap									m_mapSources;	// non-ownership - source items owned by part items
	PartFileItemVector						   *m_pvecDirtyFiles;
	SourceItemVector						   *m_pvecDirtySources;

public:
						CDownloadList();
					   ~CDownloadList();

	void				SetDownloadListCtrl(CDownloadListCtrl *pctlList) { m_pctlDownloadList = pctlList; }
	void				AddFile(CPartFile *pPartFile);
	void				RemoveFile(CPartFile *pPartFile);
	void				UpdateFile(CPartFile *pPartFile);
	void				RemoveAllFiles();
	void				AddDirtyFile(CPartFileDLItem *pFileItem);
	PartFileItemVector *GetDirtyFiles();
	void				AddDirtySource(CSourceDLItem *pSourceItem);
	SourceItemVector   *GetDirtySources();
	void				AddSource(CPartFile *pParentFile,CUpDownClient *pSource,bool bSourceNotAvailable);
	void				RemoveSource(CUpDownClient *pSource,CPartFile *pParentFile = NULL);
	void				UpdateSource(CUpDownClient *pSource,CPartFile *pParentFile = NULL);
	PartFileVector	   *GetFiles();
	PartFileItemVector *GetFileItems();

	bool				IsValidIterator(const PFIter &itFile) { return itFile != m_mapFiles.end(); }
	bool				IsValidIterator(const SourceIter &itSource) { return itSource != m_mapSources.end(); }
	CPartFileDLItem	   *GetFileItem(const PFIter &itFile) { return itFile->second; }
	CSourceDLItem	   *GetSourceItem(const SourceIter &itSource) { return itSource->second; }
	PFIter				FindFileItem(CPartFile *pPartFile) {	return(m_mapFiles.find(pPartFile)); }
	SourceRange			FindSourceItems(CUpDownClient *pSource);
	SourceItemVector   *GetSourceItems(CUpDownClient *pSource = NULL);
	FileInserted		InsertFileItem(CPartFile *pPartFile, CPartFileDLItem *pFileItem)
							{ return m_mapFiles.insert(make_pair(pPartFile, pFileItem)); }
	SourceIter			InsertSourceItem(CUpDownClient *pSource,CSourceDLItem *pSourceItem)
							{ return m_mapSources.insert(make_pair(pSource, pSourceItem)); }
	void				RemoveSourceItem(CSourceDLItem *pSourceItem);
	void				ClearCompleted(EnumCategories eCategoryID = CAT_NONE); // CAT_NONE means use GUI current cat.
	void				ClearCompleted(CPartFile *pPartFile);
	void				ClearCompleted(const uchar *pFileHash = NULL);
	CString				GetPartFilesStatusString();
};
@


1.9
log
@Suppressed compiler warnings [KuSh/Aw3].
@
text
@d35 2
a37 2
#include <vector>
#include <hash_map>
@


1.8
log
@corrected my changes to follow coding guidelines (thanks Aw3)
@
text
@d32 2
d35 1
@


1.7
log
@speed optimization (don't create a copy of iterator )
@
text
@d91 4
a94 4
	bool				IsValidIterator(const PFIter& itFile) { return itFile != m_mapFiles.end(); }
	bool				IsValidIterator(const SourceIter& itSource) { return itSource != m_mapSources.end(); }
	CPartFileDLItem	   *GetFileItem(const PFIter& itFile) { return itFile->second; }
	CSourceDLItem	   *GetSourceItem(const SourceIter& itSource) { return itSource->second; }
@


1.6
log
@Moved new function to proper place
@
text
@d91 4
a94 4
	bool				IsValidIterator(PFIter itFile) { return itFile != m_mapFiles.end(); }
	bool				IsValidIterator(SourceIter itSource) { return itSource != m_mapSources.end(); }
	CPartFileDLItem	   *GetFileItem(PFIter itFile) { return itFile->second; }
	CSourceDLItem	   *GetSourceItem(SourceIter itSource) { return itSource->second; }
@


1.5
log
@Forces saving sources during client close
@
text
@a105 1
	void				SaveAllSLSFiles();
@


1.4
log
@Modified Clear Completed
@
text
@d60 1
a60 1
	typedef SourceMap::iterator								SourceIter;
d106 1
@


1.3
log
@optimization(fix) for file completion
@
text
@d104 1
d107 1
a107 1
};@


1.2
log
@A number of robustification changes.
@
text
@d34 1
d37 3
d59 2
a60 2
	typedef multimap<CUpDownClient*, CSourceDLItem*>	SourceMap;
	typedef SourceMap::iterator					SourceIter;
@


1.1
log
@DownloadListCtrl rewrite.
Changed Category ID types to an enumeration.
More async update work.
The usual formatting, comments, and name changes.
@
text
@d98 1
@

