head	1.39;
access;
symbols
	PublicRelease_1_2e:1.37
	Interim_Release_1-2e_RC1:1.37
	PublicRelease_1_2d:1.37
	Interim_Release_1-2d_RC1:1.37
	Interim_Release_1-2d_beta1:1.37
	PublicRelease_1_2c:1.37
	Interim_Release_1-2c_RC1:1.37
	Interim_Release_1-2c_beta1:1.35
	PublicRelease_1_2b:1.35
	Interim_Release_1-2b_RC1:1.35
	PublicRelease_1_2a:1.35
	Interim_Release_1-2a_RC1:1.35
	Interim_Release_1-2a_beta2:1.35
	Interim_Release_1-2a_beta1:1.35
	PublicRelease_1_2:1.34
	Interim_Release_1-2_RC1:1.34
	Interim_Release_1-2_beta1:1.34
	PublicRelease_1_1g:1.34
	Interim_Release_1-1g_RC3:1.34
	Interim_Release_1-1g_RC2:1.34
	Interim_Release_1-1g_RC1:1.34
	Interim_Release_1-1g_beta2:1.34
	Interim_Release_1-1g_beta1:1.34
	PublicRelease_1_1f:1.33
	Interim_Release_1-1f_RC1:1.33
	PublicRelease_1_1e:1.33
	Interim_Release_1-1e_RC2:1.33
	Interim_Release_1-1e_RC1:1.33
	Interim_Release_1-1e_beta1:1.33
	PublicRelease_1_1d:1.33
	Interim_Release_1-1d_RC1:1.33
	PublicRelease_1_1c:1.33
	Interim_Release_1-1c_RC1:1.33
	Interim_Release_1-1c_beta2:1.33
	Interim_Release_1-1c_beta1:1.33
	PublicRelease_1_1b:1.33
	Interim_Release_1-1b_RC1:1.33
	PublicRelease_1_1a:1.33
	Interim_Release_1-1a_RC2:1.33
	Interim_Release_1-1a_RC1:1.32
	Interim_Release_1-1a_beta2:1.32
	Interim_Release_1-1a_beta1:1.32
	PublicRelease_1_1:1.32
	Interim_Release_1-1_beta1:1.32
	PublicRelease_1o:1.32
	Interim_Release_1o_RC1:1.32
	Interim_Release_1o_beta1:1.32
	PublicRelease_1n:1.32
	Interim_Release_1n_RC2:1.32
	Interim_Release_1n_RC1:1.32
	Interim_Release_1n_beta2:1.32
	Interim_Release_1n_beta1:1.32
	PublicRelease_1m:1.32
	Interim_Release_1m_beta1:1.32
	PublicRelease_1l:1.32
	Interim_Release_1l_RC3:1.32
	Interim_Release_1l_RC2:1.32
	Interim_Release_1l_RC1:1.31
	Interim_Release_1l_beta2:1.30
	Interim_Release_1l_beta1:1.30
	PublicRelease_1k:1.30
	Interim_Release_1k_RC4:1.30
	Interim_1k_RC3:1.30
	Interim_1k_RC2:1.30
	Interim_Release_1k_RC1:1.30
	Interim_Release_1k_beta5:1.30
	Intrerim_Release_1k_beta4:1.30
	Interim_Release_1k_beta1:1.30
	PublicRelease_1j:1.27
	Interim_Release_1J_RC3:1.26
	Interim_Release_1j_RC3:1.26
	Interim_Release_1j_RC2:1.26
	Interim_Release_1j_RC1:1.26
	Interim_Release_1j_beta2:1.26
	Interim_Release_1j_beta1:1.26
	PublicRelease_1i:1.25
	Interim_Release_1i_RC6:1.25
	Interim_Release_1i_RC3:1.25
	Interim_Release_1i_RC2:1.25
	Interim_Release_1i_RC1:1.25
	Interim_Release_1i_beta3:1.25
	Interim_Release_1i_beta2:1.25
	Interim_Release_1i_beta1:1.21
	PublicRelease_1h:1.20
	Interim_Release_1h_rc2:1.20
	Interim_Release_1h_RC1:1.20
	Interim_Release_1h_beta2:1.18
	Interim_Release_1h_beta1_now:1.18
	Interim_Release_1h_beta1:1.18
	PublicRelease_1g:1.18
	Interim_Release_1g_RC6_Final:1.18
	Interim_Release_1g_RC6:1.17
	Interim_Release_1g_RC5:1.17
	Interim_Release_1g_RC4:1.17
	Interim_Release_1g_RC3:1.16
	Interim_Release_1g_beta2:1.12
	Interim_Release_1g_beta1:1.12
	Interim_Release_1f_RC4:1.11
	Interim_Release_1f_RC3:1.11
	Interim_Release_1f_RC2:1.11
	Interim_Release_1f_RC:1.11
	Interim_Release_1f_beta2:1.11
	Interim_Release_1f_beta1:1.10
	PublicRelease_1e:1.9
	Interim_Release_1e_RC2:1.9
	Interim_Release_1e_RC:1.9
	Interim_Release_1e_beta3:1.9
	Interim_Release_1e_beta2:1.9
	Interim_Release_1e_beta2_before_kuchin:1.8
	Interim_Release_1e_beta1:1.8
	PublicRelease_1c:1.8
	featurestest:1.8.0.2
	Interim_Release_1c_RC:1.8
	Interim_Release_1c_beta2:1.7
	Interim_Release_1c_beta1:1.7
	threaded_downloadqueue:1.7.0.2
	PublicRelease_1b:1.6
	Interim_Release_1b_beta2:1.6
	Interim_Release_1b_beta1:1.6
	proxydeadlake:1.5.0.4
	PublicRelease_1a:1.5
	Interim_Release_1a_beta2:1.5
	BerkeleyDb:1.5.0.2
	Interim_Release_1a_beta1:1.5
	PublicRelease_1:1.5
	goldfish:1.5
	eMulePlus_1_RC2:1.5
	eMulePlus_26b_1RC1:1.5
	PreRelease_26b_i0e:1.5
	before_26d_merge:1.4
	Interim_Release_26b_i0d:1.4
	Interim_Release_26b_i0c:1.4
	Interim_Release_26b_i0b:1.4
	Interim_Release_26b_i0a:1.4
	systraydlg:1.4.0.4
	plus26based:1.4.0.2
	Interim_Release_25b_i0b:1.4
	Proxy_Dev:1.3
	Interim_Release_25b_i0a:1.3.2.3
	proxytest:1.3.2.2.0.2
	official_sockets:1.3.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.39
date	2009.12.11.06.32.15;	author aw3;	state Exp;
branches;
next	1.38;

1.38
date	2009.11.03.02.21.05;	author aw3;	state Exp;
branches;
next	1.37;

1.37
date	2007.07.14.20.34.57;	author aw3;	state Exp;
branches;
next	1.36;

1.36
date	2007.07.01.05.33.19;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2006.03.26.21.08.29;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2005.08.04.03.32.51;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2004.12.08.19.34.38;	author aw3;	state Exp;
branches;
next	1.32;

1.32
date	2004.05.27.08.42.19;	author dongato;	state Exp;
branches;
next	1.31;

1.31
date	2004.05.26.16.21.06;	author kuchin;	state Exp;
branches;
next	1.30;

1.30
date	2004.02.15.11.55.58;	author morevit;	state Exp;
branches;
next	1.29;

1.29
date	2004.02.05.00.00.07;	author kush_eplus;	state Exp;
branches;
next	1.28;

1.28
date	2004.01.31.12.17.08;	author morevit;	state Exp;
branches;
next	1.27;

1.27
date	2004.01.25.22.55.17;	author kush_eplus;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.18.21.52.47;	author dongato;	state Exp;
branches;
next	1.25;

1.25
date	2003.10.24.01.21.20;	author morevit;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.20.13.20.02;	author morevit;	state Exp;
branches;
next	1.23;

1.23
date	2003.10.08.01.53.33;	author morevit;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.05.17.53.56;	author morevit;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.22.16.43.19;	author morevit;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.11.10.04.10;	author dongato;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.11.02.36.43;	author dongato;	state Exp;
branches;
next	1.18;

1.18
date	2003.07.20.12.11.24;	author eklmn;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.04.16.18.05;	author eklmn;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.24.18.06.07;	author eklmn;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.16.10.42.14;	author kuchin;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.15.09.10.05;	author partyckip;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.10.09.36.49;	author kuchin;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.30.20.35.20;	author partyckip;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.08.23.20.03;	author partyckip;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.04.11.51.21;	author partyckip;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.22.12.41.52;	author kuchin;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.21.18.48.52;	author kuchin;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.14.15.57.17;	author partyckip;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.28.18.43.59;	author dongato;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.17.06.50.29;	author obaldin;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2003.02.02.10.47.20;	author cax2;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.23.12.49.07;	author cax2;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2003.01.22.17.11.05;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.25;	author cax2;	state Exp;
branches;
next	;

1.3.2.1
date	2003.01.28.14.55.47;	author obaldin;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2003.01.28.22.27.11;	author maverick65;	state Exp;
branches
	1.3.2.2.2.1;
next	1.3.2.3;

1.3.2.3
date	2003.01.29.10.36.29;	author cax2;	state Exp;
branches;
next	;

1.3.2.2.2.1
date	2003.01.28.23.51.15;	author maverick65;	state Exp;
branches;
next	;

1.5.2.1
date	2003.03.01.20.59.38;	author obaldin;	state Exp;
branches;
next	;

1.5.4.1
date	2003.02.28.10.48.31;	author dongato;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Encryption preparations.
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

// Client to Server communication
#pragma once

#include "Loggable.h"

#define CS_RETRYCONNECTTIME  30 // seconds

#ifdef OLD_SOCKETS_ENABLED

class CServerList;
class CUDPSocket;
class CServerSocket;
class CServer;
class Packet;

class CServerConnect : public CLoggable
{
public:
					CServerConnect();
					~CServerConnect();
	void			ConnectionFailed(CServerSocket* sender);
	void			ConnectionEstablished(CServerSocket* sender);

	void			ConnectToAnyServer(uint32 iStartIndex = 0xFFFFFFFF, bool bPrioSort = true, bool bIsAuto = true, bool bNoCrypt = false);
	void			ConnectToServer(CServer *pSrv, bool bNoCrypt);
	void			StopConnectionTry();
	static			VOID CALLBACK RetryConnectCallback(HWND hWnd, UINT nMsg, UINT nId, DWORD dwTime);
	static			VOID CALLBACK CheckInternetCallback(HWND hWnd, UINT nMsg, UINT nId, DWORD dwTime);

	void			CheckForTimeout();
	void			DestroySocket(CServerSocket* pSck);	// safe socket closure and destruction
	bool			SendPacket(Packet *pPacket, bool bDelPkt = true, CServerSocket *pSrvSocket = NULL);
	bool			SendUDPPacket(Packet *pPacket, CServer *pHostSrv, bool bDelPkt, uint16 uSpecPort = 0, byte *pbyteRawPkt = NULL, uint32 dwLen = 0);
	bool			Disconnect();
	bool			IsConnecting() const		{ return m_bConnecting; }
	bool			IsConnected() const			{ return m_bConnected; }
	bool			IsICCActive() const			{ return ((m_iCheckTimerID != 0) || (m_hICCThread != 0)); }
	uint32			GetClientID() const			{ return m_dwClientID; }
	CServer*		GetCurrentServer();
	CServer*		GetConnectingServer();	// Server status in WebServer
	bool			IsLowID()					{ return (m_dwClientID < 0x1000000); }
	void			SetClientID(uint32 newid);
	bool			IsLocalServer(uint32 dwIP, uint16 uPort);
	void			TryAnotherConnectionRequest();
	void			InitLocalIP();
	uint32			GetLocalIP() const			{ return m_dwLocalIP; }
	void			KeepConnectionAlive();
	bool			AwaitingTestFromIP(uint32 dwIP) const;
	bool			IsConnectedObfuscated() const;

private:
	bool			IsAliveURL(const CString &strURL);
	static void		IsAliveURLThread(void *pCtx);

private:
	bool			m_bConnecting;
	bool			m_bConnected;
	bool			m_bTryObfuscated;
	byte			m_byteNumConnAttempts;
	CServer			*m_pConnectedServerSocket;
	uint32			m_iLastServerListStartPos;
	CServerSocket	*m_pConnectedSocket;
	CUDPSocket		*m_pUDPSocket;
	UINT			m_iRetryTimerID;
	UINT			m_iCheckTimerID;
	uint32			m_dwLocalIP;
	uint32			m_dwClientID;
	HANDLE			m_hICCThread;

	CTypedPtrList<CPtrList, CServerSocket *> m_openSocketList;	// list of currently opened sockets
	CMap<ULONG, ULONG, CServerSocket*, CServerSocket*> m_mapConnectionAttempts;	// Map of connect times to server sockets
};
#endif //OLD_SOCKETS_ENABLED
@


1.38
log
@Encryption preparations.
@
text
@d66 1
a66 5
#ifdef _CRYPT_READY
	bool			IsConnectedObfuscated() const	{ return (m_pConnectedSocket != NULL) && (m_pConnectedSocket->IsObfusicating()); }
#else
	bool			IsConnectedObfuscated() const	{ return false; }
#endif
@


1.37
log
@Encryption preparations.
@
text
@d65 1
@


1.36
log
@Encryption preparations; Code clean-up and simplification;
Removed local CServerList pointer.
@
text
@d41 1
a41 1
	void			ConnectToAnyServer(uint32 iStartIndex = 0xFFFFFFFF, bool bPrioritySort=true, bool bIsAuto=true);
d49 2
a50 2
	bool			SendPacket(Packet *pPacket,bool bDelPacket = true, CServerSocket *pServerSocket = NULL);
	bool			SendUDPPacket(Packet* packet,CServer* host, bool delpacket = false );
d52 4
a55 4
	bool			IsConnecting() const		{return m_bConnecting;}
	bool			IsConnected() const			{return m_bConnected;}
	bool			IsICCActive() const			{return ((m_iCheckTimerID != 0) || (m_hICCThread != 0));}
	uint32			GetClientID() const			{return m_dwClientID;}
d58 1
a58 1
	bool			IsLowID()					{return (m_dwClientID < 0x1000000);}
d60 1
a60 1
	bool			IsLocalServer(uint32 dwIP, uint16 nPort);
d63 1
a63 1
	uint32			GetLocalIP()				{return m_dwLocalIP;}
d65 5
@


1.35
log
@Reduced H-file dependency.
@
text
@d36 1
a36 1
					CServerConnect(CServerList* in_serverlist);
d42 1
a42 1
	void			ConnectToServer(CServer &server);
d73 3
a75 2
	short			m_iNumConnectionAttempts;
	CServer		   *m_pConnectedServerSocket;
d77 2
a78 3
	CServerSocket  *m_pConnectedSocket;
	CServerList	   *m_pUsedServerList;
	CUDPSocket	   *m_pUDPSocket;
d86 1
a86 1
	CMap<ULONG ,ULONG&,CServerSocket*,CServerSocket*> m_mapConnectionAttempts;	// Map of connect times to server sockets
a87 1

@


1.34
log
@Slightly cleaned a mess of including one H-file into another;
Global preferences reference instead of local pointer.
@
text
@a18 1

a20 2
#include "types.h"
#include "packets.h"
d31 1
d67 2
a68 2
	bool			IsAliveURL(LPCTSTR sURL);
	static void		IsAliveURLThread(void *);
@


1.33
log
@Fixed cancelling of Internet Connection Check {DoubleT}
(before after failed Internet connection check pressing Cancel button initiated
a new server connection instead of cancelling any activity);
Removed unused class members.
@
text
@a22 1
#include "server.h"
a23 6
#include "ServerListCtrl.h"
#include "Preferences.h"
#include "server.h"
#include "serverlist.h"
#include "preferences.h"
#include "serversocket.h"
d30 1
d32 2
d35 2
a36 1
class CServerConnect : public CLoggable{
d38 1
a38 1
					CServerConnect(CServerList* in_serverlist, CPreferences* in_prefs);
a77 1
	CPreferences   *m_pPrefs;
@


1.32
log
@Fix for ICC keep trying after disconnect because of thread usage
@
text
@a45 1
	//void			ConnectToAnyServer() {ConnectToAnyServer(m_pUsedServerList->GetServerPostion(),true,true);}
d49 2
a50 2
	static  		VOID CALLBACK RetryConnectCallback(HWND hWnd, UINT nMsg, UINT nId, DWORD dwTime);
	static  		VOID CALLBACK CheckInternetCallback(HWND hWnd, UINT nMsg, UINT nId, DWORD dwTime);
d57 6
a62 5
	bool			IsConnecting()				{return m_bConnecting;}
	bool			IsConnected()				{return m_bConnected;}
	uint32			GetClientID()				{return m_dwClientID;}
	CServer* 		GetCurrentServer();
	CServer* 		GetConnectingServer();	// Purity (Server status in WebServer)
a66 2
	bool			IsAliveURL(LPCTSTR sURL);
	static void		IsAliveURLThread(void *);
d72 4
d78 1
a78 1
	byte			m_iMaxSimultaneousConnects;	//*UNUSED* - TO BE DELETED
d80 1
a80 1
	uint32 			m_iLastServerListStartPos;
a86 1
	short			m_iNumConnectionAttempts;
d89 1
a89 2
	byte			m_iNumPendingConnects;		//*UNUSED* - TO BE DELETED
	HANDLE 			m_hICCThread;
@


1.31
log
@Internet connection check fix - GUI is not freezing anymore
@
text
@d89 1
@


1.30
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d68 1
@


1.29
log
@Formatting, name changes and deleting spaces and tabs at end of lines
@
text
@d75 1
a75 1
	int8			m_iMaxSimultaneousConnects;	//*UNUSED* - TO BE DELETED
d87 1
a87 1
	uint8			m_iNumPendingConnects;		//*UNUSED* - TO BE DELETED
@


1.28
log
@Formatting, comments, and name changes.
@
text
@d45 1
a45 1
	
@


1.27
log
@typo correction + prevent from connect to the same server every time
@
text
@d46 1
a46 1
	//void			ConnectToAnyServer() {ConnectToAnyServer(m_pUsedServerList->GetServerPosition(),true,true);}
@


1.26
log
@Keep-Alive for server connections
@
text
@d46 1
a46 1
	//void			ConnectToAnyServer() {ConnectToAnyServer(m_pUsedServerList->GetServerPostion(),true,true);}
@


1.25
log
@Formatting, comments, and name changes.
@
text
@d70 1
@


1.24
log
@Formatting, comments, and name changes.
... and a few bug fixes.
@
text
@d48 1
a48 1
	void			ConnectToServer(CServer& toconnect);
@


1.23
log
@Formatting, comments, and name changes.
Created distinct tag classes and typed enumerations for tags, opcodes, and protocols.
@
text
@d63 1
a63 1
	bool			IsLowID()					{return (m_dwClientID < 16777216);}
@


1.22
log
@Formatting, comments, and name changes.
@
text
@d55 1
a55 1
	bool			SendPacket(Packet* packet,bool delpacket = true, CServerSocket* to = 0);
d60 1
a60 1
	uint32			GetClientID()				{return m_iClientID;}
d63 1
a63 1
	bool			IsLowID()					{return (m_iClientID < 16777216);}
d69 1
a69 1
	uint32			GetLocalIP()				{return m_iLocalIP;}
d81 2
a82 2
	UINT			m_idRetryTimer;
	UINT			m_idCheckTimer;
d84 2
a85 2
	uint32			m_iLocalIP;
	uint32			m_iClientID;
@


1.21
log
@Formatting, comments, and name changes.
@
text
@a32 11
#define CS_FATALERROR	-5
#define CS_DISCONNECTED	-4
#define CS_SERVERDEAD	-3
#define	CS_ERROR		-2
#define CS_SERVERFULL	-1
#define	CS_NOTCONNECTED	0
#define	CS_CONNECTING	1
#define	CS_CONNECTED	2
#define	CS_WAITFORLOGIN	3
#define CS_WAITFORPROXYLISTENING 4 // deadlake PROXYSUPPORT

d47 1
a47 1
	void			ConnectToAnyServer(uint32 startAt = 0xFFFFFFFF, bool prioSort=true, bool isAuto=true);
d75 1
a75 1
	CServer		   *m_pConnectedServerSocket;		// Purity (Server status in WebServer)
d88 2
a89 2
	CTypedPtrList<CPtrList, CServerSocket *> m_lstOpenSockets;	// list of currently opened sockets
	CMap<ULONG ,ULONG&,CServerSocket*,CServerSocket*> connectionattemps;
@


1.20
log
@Server connection minor changes & update to Light Template
@
text
@d52 2
a53 2
	CServerConnect(CServerList* in_serverlist, CPreferences* in_prefs);
	~CServerConnect();
d57 1
a57 1
	//void			ConnectToAnyServer() {ConnectToAnyServer(used_list->GetServerPostion(),true,true);}
d69 3
a71 3
	bool			IsConnecting()				{return connecting;}
	bool			IsConnected()				{return connected;}
	uint32			GetClientID()				{return clientid;}
d74 1
a74 3
	uint32			clientid;
	uint8			pendingConnects;
	bool			IsLowID()					{return (clientid < 16777216);}
d77 1
a77 1
	void			TryAnotherConnectionrequest();
d80 1
a80 1
	uint32			GetLocalIP()				{return m_nLocalIP;}
d83 9
a91 9
	bool			connecting;
	bool			connected;
	int8			max_simcons;
	CServer* 		ConnectingToServer;		// Purity (Server status in WebServer)
	uint32 			lastStartAt;
	CPreferences*	app_prefs;
	CServerSocket*	connectedsocket;
	CServerList*	used_list;
	CUDPSocket*		udpsocket;
d94 4
a97 2
	short			m_nConnectionAttempts;
	uint32			m_nLocalIP;
@


1.19
log
@First step of ICC (Internet Connection Check) configuration. Only in ini for now.
@
text
@d59 1
a59 1
	void			ConnectToServer(CServer& toconnect, bool multiconnect=false);
a79 1
	bool			IsSingleConnect()			{return singleconnecting;}
a85 1
	bool			singleconnecting;
@


1.18
log
@futher change of ConnectToAnyServer()
@
text
@d54 2
a55 2
	void	ConnectionFailed(CServerSocket* sender);
	void	ConnectionEstablished(CServerSocket* sender);
d57 6
a62 6
	//void	ConnectToAnyServer() {ConnectToAnyServer(used_list->GetServerPostion(),true,true);}
	void	ConnectToAnyServer(uint32 startAt = 0xFFFFFFFF, bool prioSort=true, bool isAuto=true);
	void	ConnectToServer(CServer& toconnect, bool multiconnect=false);
	void	StopConnectionTry();
	static  VOID CALLBACK RetryConnectCallback(HWND hWnd, UINT nMsg, UINT nId, DWORD dwTime);
	static  VOID CALLBACK CheckInternetCallback(HWND hWnd, UINT nMsg, UINT nId, DWORD dwTime);
d64 20
a83 20
	void	CheckForTimeout();
	void	DestroySocket(CServerSocket* pSck);	// safe socket closure and destruction
	bool	SendPacket(Packet* packet,bool delpacket = true, CServerSocket* to = 0);
	bool	SendUDPPacket(Packet* packet,CServer* host, bool delpacket = false );
	bool	Disconnect();
	bool	IsConnecting()	{return connecting;}
	bool	IsConnected()	{return connected;}
	uint32	GetClientID()		{return clientid;}
	CServer*	GetCurrentServer();
	CServer* GetConnectingServer();	//purity (Server status in WebServer)
	uint32	clientid;
	uint8	pendingConnects;
	bool	IsLowID()		{return (clientid < 16777216);}
	void	SetClientID(uint32 newid);
	bool	IsLocalServer(uint32 dwIP, uint16 nPort);
	void	TryAnotherConnectionrequest();
	bool	IsSingleConnect()	{return singleconnecting;}
	bool	IsAliveURL(LPCTSTR sURL);
	void		InitLocalIP();
	uint32	GetLocalIP()		{return m_nLocalIP;}
d86 6
a91 6
	bool	connecting;
	bool	singleconnecting;
	bool	connected;
	int8	max_simcons;
	CServer* ConnectingToServer;	//purity (Server status in WebServer)
	uint32 lastStartAt;
a95 1
	CTypedPtrList<CPtrList, CServerSocket *>		m_lstOpenSockets;	// list of currently opened sockets
d99 1
a99 2
	
	uint32	m_nLocalIP;
d101 1
@


1.17
log
@merge CloseSocket & DestroySocket (LowID problem)
@
text
@d57 2
a58 2
	void	ConnectToAnyServer() {ConnectToAnyServer(0,true,true);}
	void	ConnectToAnyServer(uint32 startAt,bool prioSort=false,bool isAuto=true);
@


1.16
log
@added InitLocalIP fuction....
@
text
@a64 1
	void	CloseSocket(CServerSocket* pSck);
@


1.15
log
@Purity's webserver enhancements
@
text
@d83 2
d101 2
@


1.14
log
@unicode cleanup
@
text
@d74 1
d89 1
@


1.13
log
@Preparing for new sockets
@
text
@d81 1
a81 1
	bool	IsAliveURL(LPCSTR sURL);
@


1.12
log
@code cleanup
@
text
@d46 2
d99 3
a101 1
};@


1.11
log
@code cleanup
@
text
@d57 1
a57 1
	void	ConnectToServer(CServer* toconnect, bool multiconnect=false);
@


1.10
log
@converted to better collection type
@
text
@d63 1
@


1.9
log
@Upgrade to 0.28a
@
text
@d90 1
a90 1
	CPtrList		m_lstOpenSockets;	// list of currently opened sockets
@


1.8
log
@Check if internet connection is down
@
text
@d42 2
a43 1
#define CS_WAITFORPROXYLISTENING 4 // deadlake / Maverick
@


1.7
log
@converted to new logging method
@
text
@d59 1
d77 1
d91 2
@


1.6
log
@Proxy Support (deadlake)
@
text
@d31 1
d47 1
a47 1
class CServerConnect{
@


1.5
log
@upgrade to 26d, fixes, extended reask, more upload parts seen, more crash fixes
@
text
@d41 1
@


1.5.2.1
log
@keeping in sync with the main cvs line
@
text
@a40 1
#define CS_WAITFORPROXYLISTENING 4 // deadlake / Maverick
@


1.5.4.1
log
@Proxy support fixes from deadlake.
@
text
@a40 1
#define CS_WAITFORPROXYLISTENING 4 // deadlake / Maverick
@


1.4
log
@Merge from official sockets
@
text
@d73 1
@


1.3
log
@port to .25 b codebase...
@
text
@a40 1
#define CS_WAITFORPROXYLISTENING 4 // Maverick
d63 2
a64 2
	bool	IsConnecting()		{return connecting;}
	bool	IsConnected()		{return connected;}
d66 1
a66 1
	CServer* GetCurrentServer();
a72 1
	void	ListenPortEstablishedCallback(); // Maverick
d75 8
a82 8
	bool			connecting;
	bool			singleconnecting;
	bool			connected;
	int8			max_simcons;
	uint32 			lastStartAt;
	CPreferences*		app_prefs;
	CServerSocket*		connectedsocket;
	CServerList*		used_list;
d85 1
a85 2
	UINT   			m_idRetryTimer;
	CServerSocket*	m_ListenRequestSender;  // Maverick
@


1.3.2.1
log
@official sockets
@
text
@d41 1
d64 2
a65 2
	bool	IsConnecting()	{return connecting;}
	bool	IsConnected()	{return connected;}
d67 1
a67 1
	CServer*	GetCurrentServer();
d74 1
d77 8
a84 8
	bool	connecting;
	bool	singleconnecting;
	bool	connected;
	int8	max_simcons;
	uint32 lastStartAt;
	CPreferences*	app_prefs;
	CServerSocket*	connectedsocket;
	CServerList*	used_list;
d87 2
a88 1
	UINT			m_idRetryTimer;
@


1.3.2.2
log
@Merges from main thread
@
text
@d63 2
a64 2
	bool	IsConnecting()		{return connecting;}
	bool	IsConnected()		{return connected;}
d66 1
a66 1
	CServer* GetCurrentServer();
d75 8
a82 8
	bool			connecting;
	bool			singleconnecting;
	bool			connected;
	int8			max_simcons;
	uint32 			lastStartAt;
	CPreferences*		app_prefs;
	CServerSocket*		connectedsocket;
	CServerList*		used_list;
d85 1
a85 1
	UINT   			m_idRetryTimer;
@


1.3.2.3
log
@Restored obaldin's version. NO MERGE on these files!!!!!!!
@
text
@d63 2
a64 2
	bool	IsConnecting()	{return connecting;}
	bool	IsConnected()	{return connected;}
d66 1
a66 1
	CServer*	GetCurrentServer();
d75 8
a82 8
	bool	connecting;
	bool	singleconnecting;
	bool	connected;
	int8	max_simcons;
	uint32 lastStartAt;
	CPreferences*	app_prefs;
	CServerSocket*	connectedsocket;
	CServerList*	used_list;
d85 1
a85 1
	UINT			m_idRetryTimer;
@


1.3.2.2.2.1
log
@Merged Proxy code
@
text
@a40 1
#define CS_WAITFORPROXYLISTENING 4 // Maverick
a72 1
	void	ListenPortEstablishedCallback(); // Maverick
a85 1
	CServerSocket*	m_ListenRequestSender;  // Maverick
@


1.2
log
@*** empty log message ***
@
text
@d53 2
a54 2
	void	ConnectToAnyServer() {ConnectToAnyServer(0,true);}
	void	ConnectToAnyServer(uint32 startAt,bool prioSort=false);
@


1.1
log
@*** empty log message ***
@
text
@d41 1
d74 1
d88 1
@

