head	1.227;
access;
symbols
	PublicRelease_1_2e:1.224
	Interim_Release_1-2e_RC1:1.224
	PublicRelease_1_2d:1.219
	Interim_Release_1-2d_RC1:1.219
	Interim_Release_1-2d_beta1:1.213
	PublicRelease_1_2c:1.210
	Interim_Release_1-2c_RC1:1.210
	Interim_Release_1-2c_beta1:1.208
	PublicRelease_1_2b:1.206
	Interim_Release_1-2b_RC1:1.206
	PublicRelease_1_2a:1.204
	Interim_Release_1-2a_RC1:1.203
	Interim_Release_1-2a_beta2:1.200
	Interim_Release_1-2a_beta1:1.198
	PublicRelease_1_2:1.194
	Interim_Release_1-2_RC1:1.193
	Interim_Release_1-2_beta1:1.191
	PublicRelease_1_1g:1.189
	Interim_Release_1-1g_RC3:1.189
	Interim_Release_1-1g_RC2:1.189
	Interim_Release_1-1g_RC1:1.189
	Interim_Release_1-1g_beta2:1.187
	Interim_Release_1-1g_beta1:1.186
	PublicRelease_1_1f:1.182
	Interim_Release_1-1f_RC1:1.182
	PublicRelease_1_1e:1.182
	Interim_Release_1-1e_RC2:1.181
	Interim_Release_1-1e_RC1:1.181
	Interim_Release_1-1e_beta1:1.180
	PublicRelease_1_1d:1.174
	Interim_Release_1-1d_RC1:1.174
	PublicRelease_1_1c:1.172
	Interim_Release_1-1c_RC1:1.171
	Interim_Release_1-1c_beta2:1.169
	Interim_Release_1-1c_beta1:1.169
	PublicRelease_1_1b:1.165
	Interim_Release_1-1b_RC1:1.164
	PublicRelease_1_1a:1.163
	Interim_Release_1-1a_RC2:1.163
	Interim_Release_1-1a_RC1:1.162
	Interim_Release_1-1a_beta2:1.162
	Interim_Release_1-1a_beta1:1.161
	PublicRelease_1_1:1.160
	Interim_Release_1-1_beta1:1.160
	PublicRelease_1o:1.158
	Interim_Release_1o_RC1:1.158
	Interim_Release_1o_beta1:1.158
	PublicRelease_1n:1.158
	Interim_Release_1n_RC2:1.158
	Interim_Release_1n_RC1:1.158
	Interim_Release_1n_beta2:1.157
	Interim_Release_1n_beta1:1.153
	PublicRelease_1m:1.146
	Interim_Release_1m_beta1:1.145
	PublicRelease_1l:1.142
	Interim_Release_1l_RC3:1.142
	Interim_Release_1l_RC2:1.142
	Interim_Release_1l_RC1:1.141
	Interim_Release_1l_beta2:1.141
	Interim_Release_1l_beta1:1.134
	PublicRelease_1k:1.129
	Interim_Release_1k_RC4:1.127
	Interim_1k_RC3:1.125
	Interim_1k_RC2:1.124
	Interim_Release_1k_RC1:1.122
	Interim_Release_1k_beta5:1.119
	Intrerim_Release_1k_beta4:1.119
	Interim_Release_1k_beta1:1.116
	PublicRelease_1j:1.97
	Interim_Release_1J_RC3:1.97
	Interim_Release_1j_RC3:1.97
	Interim_Release_1j_RC2:1.96
	Interim_Release_1j_RC1:1.96
	Interim_Release_1j_beta2:1.96
	Interim_Release_1j_beta1:1.94
	PublicRelease_1i:1.92
	Interim_Release_1i_RC6:1.92
	Interim_Release_1i_RC3:1.88
	Interim_Release_1i_RC2:1.88
	Interim_Release_1i_RC1:1.86
	Interim_Release_1i_beta3:1.85
	Interim_Release_1i_beta2:1.82
	Interim_Release_1i_beta1:1.74
	PublicRelease_1h:1.65
	Interim_Release_1h_rc2:1.65
	Interim_Release_1h_RC1:1.63
	Interim_Release_1h_beta2:1.60
	Interim_Release_1h_beta1_now:1.59
	Interim_Release_1h_beta1:1.59
	PublicRelease_1g:1.54
	Interim_Release_1g_RC6_Final:1.54
	Interim_Release_1g_RC6:1.54
	Interim_Release_1g_RC5:1.54
	Interim_Release_1g_RC4:1.54
	Interim_Release_1g_RC3:1.51
	Interim_Release_1g_beta2:1.45
	Interim_Release_1g_beta1:1.45
	Interim_Release_1f_RC4:1.42
	Interim_Release_1f_RC3:1.41
	Interim_Release_1f_RC2:1.37
	Interim_Release_1f_RC:1.37
	Interim_Release_1f_beta2:1.37
	Interim_Release_1f_beta1:1.37
	PublicRelease_1e:1.37
	Interim_Release_1e_RC2:1.37
	Interim_Release_1e_RC:1.37
	Interim_Release_1e_beta3:1.37
	Interim_Release_1e_beta2:1.37
	Interim_Release_1e_beta2_before_kuchin:1.37
	Interim_Release_1e_beta1:1.37
	PublicRelease_1c:1.32
	featurestest:1.32.0.2
	Interim_Release_1c_RC:1.30
	Interim_Release_1c_beta2:1.29
	Interim_Release_1c_beta1:1.27
	threaded_downloadqueue:1.24.0.2
	PublicRelease_1b:1.17
	Interim_Release_1b_beta2:1.14
	Interim_Release_1b_beta1:1.11
	proxydeadlake:1.9.0.2
	PublicRelease_1a:1.8
	Interim_Release_1a_beta2:1.7
	BerkeleyDb:1.7.0.2
	Interim_Release_1a_beta1:1.7
	PublicRelease_1:1.5
	goldfish:1.5
	eMulePlus_1_RC2:1.5
	eMulePlus_26b_1RC1:1.4
	PreRelease_26b_i0e:1.4
	before_26d_merge:1.4
	Interim_Release_26b_i0d:1.3
	Interim_Release_26b_i0c:1.3
	Interim_Release_26b_i0b:1.3
	Interim_Release_26b_i0a:1.3
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.227
date	2010.08.02.02.45.38;	author aw3;	state Exp;
branches;
next	1.226;

1.226
date	2009.10.29.03.25.48;	author aw3;	state Exp;
branches;
next	1.225;

1.225
date	2009.05.14.03.14.15;	author aw3;	state Exp;
branches;
next	1.224;

1.224
date	2008.11.07.05.29.23;	author aw3;	state Exp;
branches;
next	1.223;

1.223
date	2008.11.03.05.45.23;	author aw3;	state Exp;
branches;
next	1.222;

1.222
date	2008.09.29.04.36.01;	author aw3;	state Exp;
branches;
next	1.221;

1.221
date	2008.09.02.02.44.27;	author aw3;	state Exp;
branches;
next	1.220;

1.220
date	2008.07.03.01.53.15;	author aw3;	state Exp;
branches;
next	1.219;

1.219
date	2008.04.05.20.22.50;	author eklmn;	state Exp;
branches;
next	1.218;

1.218
date	2008.04.05.09.49.09;	author eklmn;	state Exp;
branches;
next	1.217;

1.217
date	2008.03.10.02.17.41;	author aw3;	state Exp;
branches;
next	1.216;

1.216
date	2008.03.03.05.19.15;	author aw3;	state Exp;
branches;
next	1.215;

1.215
date	2008.02.25.04.34.10;	author aw3;	state Exp;
branches;
next	1.214;

1.214
date	2008.02.23.15.11.13;	author kush_eplus;	state Exp;
branches;
next	1.213;

1.213
date	2007.12.29.05.48.24;	author aw3;	state Exp;
branches;
next	1.212;

1.212
date	2007.12.01.11.17.51;	author eklmn;	state Exp;
branches;
next	1.211;

1.211
date	2007.10.24.19.09.36;	author fuxie-dk;	state Exp;
branches;
next	1.210;

1.210
date	2007.07.08.00.15.48;	author aw3;	state Exp;
branches;
next	1.209;

1.209
date	2007.03.19.19.14.59;	author kush_eplus;	state Exp;
branches;
next	1.208;

1.208
date	2007.02.25.05.26.37;	author aw3;	state Exp;
branches;
next	1.207;

1.207
date	2007.02.14.14.21.48;	author aw3;	state Exp;
branches;
next	1.206;

1.206
date	2006.12.17.18.53.20;	author eklmn;	state Exp;
branches;
next	1.205;

1.205
date	2006.12.17.11.20.37;	author eklmn;	state Exp;
branches;
next	1.204;

1.204
date	2006.09.29.04.06.53;	author aw3;	state Exp;
branches;
next	1.203;

1.203
date	2006.07.24.12.55.20;	author aw3;	state Exp;
branches;
next	1.202;

1.202
date	2006.07.13.03.56.33;	author aw3;	state Exp;
branches;
next	1.201;

1.201
date	2006.07.12.17.40.42;	author kush_eplus;	state Exp;
branches;
next	1.200;

1.200
date	2006.05.22.03.45.00;	author aw3;	state Exp;
branches;
next	1.199;

1.199
date	2006.05.13.01.30.02;	author aw3;	state Exp;
branches;
next	1.198;

1.198
date	2006.04.23.04.06.57;	author aw3;	state Exp;
branches;
next	1.197;

1.197
date	2006.04.22.21.58.08;	author aw3;	state Exp;
branches;
next	1.196;

1.196
date	2006.03.18.16.21.13;	author aw3;	state Exp;
branches;
next	1.195;

1.195
date	2006.03.04.04.31.20;	author aw3;	state Exp;
branches;
next	1.194;

1.194
date	2006.03.02.13.18.07;	author aw3;	state Exp;
branches;
next	1.193;

1.193
date	2006.02.14.03.53.51;	author aw3;	state Exp;
branches;
next	1.192;

1.192
date	2006.02.05.03.50.38;	author aw3;	state Exp;
branches;
next	1.191;

1.191
date	2006.01.29.00.42.39;	author aw3;	state Exp;
branches;
next	1.190;

1.190
date	2006.01.06.20.05.54;	author kush_eplus;	state Exp;
branches;
next	1.189;

1.189
date	2005.11.27.22.11.50;	author eklmn;	state Exp;
branches;
next	1.188;

1.188
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.187;

1.187
date	2005.10.23.23.38.33;	author aw3;	state Exp;
branches;
next	1.186;

1.186
date	2005.08.22.01.35.41;	author aw3;	state Exp;
branches;
next	1.185;

1.185
date	2005.08.14.16.14.52;	author aw3;	state Exp;
branches;
next	1.184;

1.184
date	2005.08.11.03.53.00;	author aw3;	state Exp;
branches;
next	1.183;

1.183
date	2005.08.06.17.58.07;	author aw3;	state Exp;
branches;
next	1.182;

1.182
date	2005.07.12.00.29.20;	author aw3;	state Exp;
branches;
next	1.181;

1.181
date	2005.06.11.14.38.37;	author aw3;	state Exp;
branches;
next	1.180;

1.180
date	2005.06.06.04.42.40;	author aw3;	state Exp;
branches;
next	1.179;

1.179
date	2005.05.23.20.55.15;	author aw3;	state Exp;
branches;
next	1.178;

1.178
date	2005.05.23.19.42.44;	author aw3;	state Exp;
branches;
next	1.177;

1.177
date	2005.05.21.20.17.23;	author aw3;	state Exp;
branches;
next	1.176;

1.176
date	2005.05.09.02.31.59;	author aw3;	state Exp;
branches;
next	1.175;

1.175
date	2005.03.30.04.21.22;	author aw3;	state Exp;
branches;
next	1.174;

1.174
date	2005.03.06.22.13.31;	author aw3;	state Exp;
branches;
next	1.173;

1.173
date	2005.03.02.03.55.00;	author aw3;	state Exp;
branches;
next	1.172;

1.172
date	2005.02.25.04.39.37;	author aw3;	state Exp;
branches;
next	1.171;

1.171
date	2005.02.23.12.32.51;	author aw3;	state Exp;
branches;
next	1.170;

1.170
date	2005.02.22.22.25.31;	author netwolf1;	state Exp;
branches;
next	1.169;

1.169
date	2005.01.23.13.59.19;	author aw3;	state Exp;
branches;
next	1.168;

1.168
date	2005.01.19.21.10.51;	author netwolf1;	state Exp;
branches;
next	1.167;

1.167
date	2005.01.16.00.34.59;	author netwolf1;	state Exp;
branches;
next	1.166;

1.166
date	2005.01.07.22.28.56;	author netwolf1;	state Exp;
branches;
next	1.165;

1.165
date	2004.12.23.18.33.03;	author aw3;	state Exp;
branches;
next	1.164;

1.164
date	2004.12.16.21.06.23;	author aw3;	state Exp;
branches;
next	1.163;

1.163
date	2004.11.29.16.57.01;	author aw3;	state Exp;
branches;
next	1.162;

1.162
date	2004.11.20.07.16.07;	author eklmn;	state Exp;
branches;
next	1.161;

1.161
date	2004.10.26.21.14.16;	author aw3;	state Exp;
branches;
next	1.160;

1.160
date	2004.10.18.04.41.38;	author aw3;	state Exp;
branches;
next	1.159;

1.159
date	2004.09.30.19.09.31;	author aw3;	state Exp;
branches;
next	1.158;

1.158
date	2004.08.10.12.43.39;	author eklmn;	state Exp;
branches;
next	1.157;

1.157
date	2004.08.06.17.00.46;	author eklmn;	state Exp;
branches;
next	1.156;

1.156
date	2004.08.04.04.17.05;	author aw3;	state Exp;
branches;
next	1.155;

1.155
date	2004.07.25.03.42.20;	author aw3;	state Exp;
branches;
next	1.154;

1.154
date	2004.07.22.23.46.04;	author aw3;	state Exp;
branches;
next	1.153;

1.153
date	2004.07.05.23.23.42;	author dongato;	state Exp;
branches;
next	1.152;

1.152
date	2004.07.05.04.10.13;	author aw3;	state Exp;
branches;
next	1.151;

1.151
date	2004.07.05.03.42.08;	author katsyonak;	state Exp;
branches;
next	1.150;

1.150
date	2004.07.04.23.33.15;	author dongato;	state Exp;
branches;
next	1.149;

1.149
date	2004.07.04.18.25.25;	author katsyonak;	state Exp;
branches;
next	1.148;

1.148
date	2004.07.04.16.03.05;	author katsyonak;	state Exp;
branches;
next	1.147;

1.147
date	2004.07.04.14.42.16;	author katsyonak;	state Exp;
branches;
next	1.146;

1.146
date	2004.06.23.17.17.06;	author dropf;	state Exp;
branches;
next	1.145;

1.145
date	2004.06.21.12.23.53;	author dongato;	state Exp;
branches;
next	1.144;

1.144
date	2004.06.18.20.04.46;	author aw3;	state Exp;
branches;
next	1.143;

1.143
date	2004.06.17.12.32.11;	author netwolf1;	state Exp;
branches;
next	1.142;

1.142
date	2004.06.02.21.06.36;	author aw3;	state Exp;
branches;
next	1.141;

1.141
date	2004.05.19.16.03.23;	author netwolf1;	state Exp;
branches;
next	1.140;

1.140
date	2004.05.19.10.14.33;	author netwolf1;	state Exp;
branches;
next	1.139;

1.139
date	2004.05.14.23.59.19;	author aw3;	state Exp;
branches;
next	1.138;

1.138
date	2004.05.13.03.30.38;	author kush_eplus;	state Exp;
branches;
next	1.137;

1.137
date	2004.05.12.08.30.32;	author netwolf1;	state Exp;
branches;
next	1.136;

1.136
date	2004.05.12.00.39.24;	author aw3;	state Exp;
branches;
next	1.135;

1.135
date	2004.05.07.21.54.36;	author aw3;	state Exp;
branches;
next	1.134;

1.134
date	2004.05.05.17.17.43;	author netwolf1;	state Exp;
branches;
next	1.133;

1.133
date	2004.04.29.17.06.48;	author dongato;	state Exp;
branches;
next	1.132;

1.132
date	2004.04.29.10.58.41;	author netwolf1;	state Exp;
branches;
next	1.131;

1.131
date	2004.04.16.20.52.48;	author aw3;	state Exp;
branches;
next	1.130;

1.130
date	2004.04.16.08.37.01;	author dongato;	state Exp;
branches;
next	1.129;

1.129
date	2004.04.08.13.45.10;	author aw3;	state Exp;
branches;
next	1.128;

1.128
date	2004.04.08.00.26.41;	author aw3;	state Exp;
branches;
next	1.127;

1.127
date	2004.04.07.10.22.58;	author eklmn;	state Exp;
branches;
next	1.126;

1.126
date	2004.04.07.00.02.30;	author aw3;	state Exp;
branches;
next	1.125;

1.125
date	2004.04.04.08.30.11;	author eklmn;	state Exp;
branches;
next	1.124;

1.124
date	2004.03.31.08.05.09;	author eklmn;	state Exp;
branches;
next	1.123;

1.123
date	2004.03.30.19.21.33;	author aw3;	state Exp;
branches;
next	1.122;

1.122
date	2004.03.28.07.01.15;	author dongato;	state Exp;
branches;
next	1.121;

1.121
date	2004.03.26.23.16.59;	author aw3;	state Exp;
branches;
next	1.120;

1.120
date	2004.03.25.20.29.37;	author aw3;	state Exp;
branches;
next	1.119;

1.119
date	2004.03.18.18.03.15;	author eklmn;	state Exp;
branches;
next	1.118;

1.118
date	2004.03.12.06.26.12;	author aw3;	state Exp;
branches;
next	1.117;

1.117
date	2004.02.23.03.32.29;	author aw3;	state Exp;
branches;
next	1.116;

1.116
date	2004.02.18.23.20.55;	author kush_eplus;	state Exp;
branches;
next	1.115;

1.115
date	2004.02.18.13.48.45;	author kush_eplus;	state Exp;
branches;
next	1.114;

1.114
date	2004.02.16.23.22.39;	author aw3;	state Exp;
branches;
next	1.113;

1.113
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.112;

1.112
date	2004.02.14.21.35.25;	author kush_eplus;	state Exp;
branches;
next	1.111;

1.111
date	2004.02.13.16.13.35;	author netwolf1;	state Exp;
branches;
next	1.110;

1.110
date	2004.02.11.23.32.38;	author aw3;	state Exp;
branches;
next	1.109;

1.109
date	2004.02.10.02.12.03;	author netwolf1;	state Exp;
branches;
next	1.108;

1.108
date	2004.02.10.00.04.43;	author netwolf1;	state Exp;
branches;
next	1.107;

1.107
date	2004.02.09.16.39.50;	author kush_eplus;	state Exp;
branches;
next	1.106;

1.106
date	2004.02.09.02.31.48;	author netwolf1;	state Exp;
branches;
next	1.105;

1.105
date	2004.02.08.00.09.06;	author eklmn;	state Exp;
branches;
next	1.104;

1.104
date	2004.02.07.00.50.45;	author netwolf1;	state Exp;
branches;
next	1.103;

1.103
date	2004.02.06.17.47.01;	author netwolf1;	state Exp;
branches;
next	1.102;

1.102
date	2004.02.05.00.00.02;	author kush_eplus;	state Exp;
branches;
next	1.101;

1.101
date	2004.02.04.19.06.00;	author morevit;	state Exp;
branches;
next	1.100;

1.100
date	2004.02.04.13.40.58;	author kush_eplus;	state Exp;
branches;
next	1.99;

1.99
date	2004.02.03.22.53.58;	author netwolf1;	state Exp;
branches;
next	1.98;

1.98
date	2004.01.31.12.17.08;	author morevit;	state Exp;
branches;
next	1.97;

1.97
date	2004.01.22.01.23.35;	author dongato;	state Exp;
branches;
next	1.96;

1.96
date	2004.01.05.23.17.17;	author dongato;	state Exp;
branches;
next	1.95;

1.95
date	2004.01.05.21.38.36;	author dongato;	state Exp;
branches;
next	1.94;

1.94
date	2003.12.23.19.03.21;	author katsyonak;	state Exp;
branches;
next	1.93;

1.93
date	2003.12.16.07.30.02;	author dongato;	state Exp;
branches;
next	1.92;

1.92
date	2003.11.30.17.52.44;	author eklmn;	state Exp;
branches;
next	1.91;

1.91
date	2003.11.23.15.09.48;	author katsyonak;	state Exp;
branches;
next	1.90;

1.90
date	2003.11.21.20.24.58;	author eklmn;	state Exp;
branches;
next	1.89;

1.89
date	2003.11.20.20.07.24;	author katsyonak;	state Exp;
branches;
next	1.88;

1.88
date	2003.11.11.21.36.56;	author dropf;	state Exp;
branches;
next	1.87;

1.87
date	2003.11.09.15.53.17;	author kuchin;	state Exp;
branches;
next	1.86;

1.86
date	2003.11.04.18.16.28;	author eklmn;	state Exp;
branches;
next	1.85;

1.85
date	2003.10.30.02.44.37;	author morevit;	state Exp;
branches;
next	1.84;

1.84
date	2003.10.29.22.13.33;	author dropf;	state Exp;
branches;
next	1.83;

1.83
date	2003.10.26.14.02.42;	author morevit;	state Exp;
branches;
next	1.82;

1.82
date	2003.10.21.18.02.22;	author dongato;	state Exp;
branches;
next	1.81;

1.81
date	2003.10.21.02.16.52;	author morevit;	state Exp;
branches;
next	1.80;

1.80
date	2003.10.13.15.14.32;	author morevit;	state Exp;
branches;
next	1.79;

1.79
date	2003.10.09.16.17.11;	author eklmn;	state Exp;
branches;
next	1.78;

1.78
date	2003.10.08.15.39.48;	author morevit;	state Exp;
branches;
next	1.77;

1.77
date	2003.10.08.12.59.40;	author morevit;	state Exp;
branches;
next	1.76;

1.76
date	2003.10.08.01.53.33;	author morevit;	state Exp;
branches;
next	1.75;

1.75
date	2003.10.06.21.57.05;	author puritynn666;	state Exp;
branches;
next	1.74;

1.74
date	2003.10.04.22.22.05;	author morevit;	state Exp;
branches;
next	1.73;

1.73
date	2003.10.03.13.04.36;	author morevit;	state Exp;
branches;
next	1.72;

1.72
date	2003.10.02.18.29.51;	author dongato;	state Exp;
branches;
next	1.71;

1.71
date	2003.09.24.17.47.25;	author morevit;	state Exp;
branches;
next	1.70;

1.70
date	2003.09.23.20.26.30;	author dongato;	state Exp;
branches;
next	1.69;

1.69
date	2003.09.22.00.17.22;	author morevit;	state Exp;
branches;
next	1.68;

1.68
date	2003.09.21.22.05.17;	author morevit;	state Exp;
branches;
next	1.67;

1.67
date	2003.09.20.15.39.32;	author morevit;	state Exp;
branches;
next	1.66;

1.66
date	2003.09.19.00.13.38;	author morevit;	state Exp;
branches;
next	1.65;

1.65
date	2003.09.14.20.29.42;	author kuchin;	state Exp;
branches;
next	1.64;

1.64
date	2003.09.14.13.48.42;	author dongato;	state Exp;
branches;
next	1.63;

1.63
date	2003.09.10.01.35.53;	author dongato;	state Exp;
branches;
next	1.62;

1.62
date	2003.09.09.21.36.02;	author dongato;	state Exp;
branches;
next	1.61;

1.61
date	2003.09.06.13.27.57;	author dongato;	state Exp;
branches;
next	1.60;

1.60
date	2003.09.02.12.37.25;	author dongato;	state Exp;
branches;
next	1.59;

1.59
date	2003.08.04.21.24.38;	author zegzav;	state Exp;
branches;
next	1.58;

1.58
date	2003.07.30.15.03.43;	author dongato;	state Exp;
branches;
next	1.57;

1.57
date	2003.07.29.09.09.04;	author dongato;	state Exp;
branches;
next	1.56;

1.56
date	2003.07.28.23.13.42;	author moosetea;	state Exp;
branches;
next	1.55;

1.55
date	2003.07.26.11.27.01;	author zegzav;	state Exp;
branches;
next	1.54;

1.54
date	2003.07.08.08.10.23;	author netwolf1;	state Exp;
branches;
next	1.53;

1.53
date	2003.07.07.21.04.44;	author syrus77;	state Exp;
branches;
next	1.52;

1.52
date	2003.07.06.03.10.26;	author dongato;	state Exp;
branches;
next	1.51;

1.51
date	2003.06.29.20.45.07;	author eklmn;	state Exp;
branches;
next	1.50;

1.50
date	2003.06.27.18.53.23;	author eklmn;	state Exp;
branches;
next	1.49;

1.49
date	2003.06.25.18.32.05;	author eklmn;	state Exp;
branches;
next	1.48;

1.48
date	2003.06.15.13.41.14;	author partyckip;	state Exp;
branches;
next	1.47;

1.47
date	2003.06.11.18.27.12;	author eklmn;	state Exp;
branches;
next	1.46;

1.46
date	2003.06.10.09.36.47;	author kuchin;	state Exp;
branches;
next	1.45;

1.45
date	2003.06.01.09.28.05;	author partyckip;	state Exp;
branches;
next	1.44;

1.44
date	2003.05.31.08.50.55;	author partyckip;	state Exp;
branches;
next	1.43;

1.43
date	2003.05.30.21.26.59;	author partyckip;	state Exp;
branches;
next	1.42;

1.42
date	2003.05.24.22.02.45;	author netwolf1;	state Exp;
branches;
next	1.41;

1.41
date	2003.05.22.14.18.29;	author netwolf1;	state Exp;
branches;
next	1.40;

1.40
date	2003.05.22.13.12.23;	author obaldin;	state Exp;
branches;
next	1.39;

1.39
date	2003.05.20.16.30.41;	author netwolf1;	state Exp;
branches;
next	1.38;

1.38
date	2003.05.18.13.29.14;	author kuchin;	state Exp;
branches;
next	1.37;

1.37
date	2003.04.11.21.58.03;	author obaldin;	state Exp;
branches;
next	1.36;

1.36
date	2003.04.07.16.49.53;	author kuchin;	state Exp;
branches;
next	1.35;

1.35
date	2003.04.01.22.49.15;	author dongato;	state Exp;
branches;
next	1.34;

1.34
date	2003.03.29.05.08.44;	author recdvst;	state Exp;
branches;
next	1.33;

1.33
date	2003.03.27.11.04.32;	author recdvst;	state Exp;
branches;
next	1.32;

1.32
date	2003.03.22.19.08.36;	author partyckip;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2003.03.22.18.42.11;	author recdvst;	state Exp;
branches;
next	1.30;

1.30
date	2003.03.21.09.43.37;	author recdvst;	state Exp;
branches;
next	1.29;

1.29
date	2003.03.16.01.53.07;	author dongato;	state Exp;
branches;
next	1.28;

1.28
date	2003.03.15.19.50.54;	author dongato;	state Exp;
branches;
next	1.27;

1.27
date	2003.03.15.16.35.57;	author cax2;	state Exp;
branches;
next	1.26;

1.26
date	2003.03.15.12.04.21;	author dongato;	state Exp;
branches;
next	1.25;

1.25
date	2003.03.15.03.35.02;	author dongato;	state Exp;
branches;
next	1.24;

1.24
date	2003.03.14.16.24.21;	author partyckip;	state Exp;
branches;
next	1.23;

1.23
date	2003.03.13.09.52.35;	author recdvst;	state Exp;
branches;
next	1.22;

1.22
date	2003.03.13.09.49.17;	author recdvst;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.12.23.17.37;	author cax2;	state Exp;
branches;
next	1.20;

1.20
date	2003.03.12.17.33.15;	author obaldin;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.12.12.09.01;	author recdvst;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.11.18.32.26;	author obaldin;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.09.17.05.37;	author kuchin;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.09.16.21.46;	author obaldin;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.09.09.55.53;	author obaldin;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.08.19.27.12;	author dongato;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.08.17.33.32;	author dongato;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.08.12.09.42;	author recdvst;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.02.11.04.18;	author dongato;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.01.14.46.56;	author dongato;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.28.00.53.24;	author dongato;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.27.16.01.04;	author dongato;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.24.10.54.00;	author recdvst;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2003.02.22.14.20.54;	author dongato;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.20.00.34.17;	author dongato;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.16.22.01.48;	author lord_kiron;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.10.19.24.50;	author cax2;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.09.18.39.42;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.23;	author cax2;	state Exp;
branches
	1.1.4.1
	1.1.6.1;
next	;

1.1.4.1
date	2003.01.28.16.54.26;	author cax2;	state Exp;
branches;
next	;

1.1.6.1
date	2003.02.05.01.58.42;	author obaldin;	state Exp;
branches;
next	;

1.7.2.1
date	2003.02.28.22.44.56;	author obaldin;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2003.03.01.20.59.36;	author obaldin;	state Exp;
branches;
next	;

1.32.2.1
date	2003.03.23.06.22.02;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.227
log
@Fixed wrong information displayed in the shared files list after file parts were expanded then collapsed and then Display Part Traffic option was disabled;
Allow expanding file to see parts in the shared files list when Display Part Traffic option is disabled, as displaying part completion status and enabling/disabling parts for uploading have nothing to do with Part Traffic;
Update expanded file in shared file list on Shift/Ctrl-Shift + double-click on a file (these key combinations expand file list to show uploaded parts when list is already expanded, update it on consecutive special double-click instead of collapsing it).
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "SharedFilesCtrl.h"
#include "ShellContextMenu.h"
#include "SharedFileList.h"
#include "otherfunctions.h"
#include "CommentDialog.h"
#include "TitleMenu.h"
#include "MemDC.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

#define sortcmp(a, b) ((a)==(b))?0: (((a)<(b))?-1:1)

#define GrayIt(gray, color) gray?(0x444444+0x010101*((GetRValue(color)*30+GetGValue(color)*59+GetBValue(color)*11)/0xFF)):color

IMPLEMENT_DYNAMIC(CSharedFilesCtrl, CMuleListCtrl)

BEGIN_MESSAGE_MAP(CSharedFilesCtrl, CMuleListCtrl)
	ON_WM_CONTEXTMENU()
	ON_NOTIFY_REFLECT(LVN_COLUMNCLICK, OnColumnClick)
	ON_NOTIFY_REFLECT(NM_DBLCLK, OnDoubleClick)
	ON_NOTIFY_REFLECT(NM_CLICK, OnNMClick)
	ON_NOTIFY_REFLECT(LVN_GETDISPINFO, OnGetDispInfo)
END_MESSAGE_MAP()

bool	CSharedFilesCtrl::m_sortParts = false;
uint32	CSharedFilesCtrl::m_p2p[5];

CSharedFilesCtrl::CSharedFilesCtrl() : m_pSCM(NULL)
{
	EMULE_TRY

	m_statusWidth = -1;

	SetColoring(0);
	SetDisplay(0, false);

	SetGeneralPurposeFind(true);

	m_allYaKnow = false;

//	Fast priority converter, needed because priorities are messed up a little bit
	m_p2p[PR_VERYLOW]	= 0 << 2;
	m_p2p[PR_LOW]		= 1 << 2;
	m_p2p[PR_NORMAL]	= 2 << 2;
	m_p2p[PR_HIGH]		= 3 << 2;
	m_p2p[PR_RELEASE]	= 4 << 2;

	EMULE_CATCH
}

CSharedFilesCtrl::~CSharedFilesCtrl()
{
	delete m_pSCM;
}

void CSharedFilesCtrl::Init()
{
	static const int s_aiDoubleLevelCols[] = {
		SFLCOL_REQUESTS,	SFLCOL_ACCEPTED,	SFLCOL_TRANSFERRED,
		SFLCOL_PARTTRAFFIC,	SFLCOL_UPLOADS,		SFLCOL_COMPLETESRC
	};
	static const uint16 s_auIconResID[] =
	{
		IDI_RATING_NO,
		IDI_RATING_FAKE,
		IDI_RATING_POOR,
		IDI_RATING_GOOD,
		IDI_RATING_FAIR,
		IDI_RATING_EXCELLENT,
		IDI_RATING_NONE
	};
	static const uint16 s_auColHdr[][2] =
	{
		{ LVCFMT_LEFT,  250 },	//SFLCOL_FILENAME
		{ LVCFMT_RIGHT, 100 },	//SFLCOL_FILESIZE
		{ LVCFMT_LEFT,   50 },	//SFLCOL_TYPE
		{ LVCFMT_LEFT,   70 },	//SFLCOL_PRIORITY
		{ LVCFMT_LEFT,  100 },	//SFLCOL_PERMISSION
		{ LVCFMT_LEFT,  220 },	//SFLCOL_FILEHASH
		{ LVCFMT_LEFT,  100 },	//SFLCOL_REQUESTS
		{ LVCFMT_LEFT,  100 },	//SFLCOL_ACCEPTED
		{ LVCFMT_LEFT,  120 },	//SFLCOL_TRANSFERRED
		{ LVCFMT_LEFT,  120 },	//SFLCOL_PARTTRAFFIC
		{ LVCFMT_LEFT,  120 },	//SFLCOL_UPLOADS
		{ LVCFMT_LEFT,  100 },	//SFLCOL_COMPLETESRC
		{ LVCFMT_LEFT,  150 }	//SFLCOL_FOLDER
	};

	EMULE_TRY

	SetColoring(g_App.m_pPrefs->GetUpbarColor());
	SetDisplay(g_App.m_pPrefs->GetUpbarStyle(), false);

	//--- that seems to be the way to make taller item :) (i hate mfc... honestly i don't understand mfc :) ---
	CImageList ilDummyImageList;
	ilDummyImageList.Create(1, 17, ILC_COLOR, 1, 1);
	SetImageList(&ilDummyImageList, LVSIL_SMALL);
	ilDummyImageList.Detach();

	SetExtendedStyle(LVS_EX_FULLROWSELECT);
	ModifyStyle(LVS_SINGLESEL, 0);

	//--- in the official emule source the is a unlogical value at the end (for me :) ---
	for (unsigned ui = 0; ui < ARRSIZE(s_auColHdr); ui++)
		InsertColumn(ui, _T(""), static_cast<int>(s_auColHdr[ui][0]), static_cast<int>(s_auColHdr[ui][1]));

	m_imageList.Create(16, 16, g_App.m_iDfltImageListColorFlags | ILC_MASK, ARRSIZE(s_auIconResID), 0);
	m_imageList.SetBkColor(CLR_NONE);
	FillImgLstWith16x16Icons(&m_imageList, s_auIconResID, ARRSIZE(s_auIconResID));

	LoadSettings(CPreferences::TABLE_SHARED);
	SetSortProcedure(SortProc);
	SetDoubleLayerSort(s_aiDoubleLevelCols, ARRSIZE(s_aiDoubleLevelCols));
	if (g_App.m_pPrefs->DoUseSort())
		SortInit(g_App.m_pPrefs->GetFileSortCol());
	else
		SortInit(g_App.m_pPrefs->GetColumnSortCode(CPreferences::TABLE_SHARED));

	EMULE_CATCH
}

void CSharedFilesCtrl::Localize()
{
	static const uint16 s_auResTbl[] =
	{
		IDS_DL_FILENAME,	//SFLCOL_FILENAME
		IDS_DL_SIZE,		//SFLCOL_FILESIZE
		IDS_TYPE,			//SFLCOL_TYPE
		IDS_PRIORITY,		//SFLCOL_PRIORITY
		IDS_PERMISSION,		//SFLCOL_PERMISSION
		IDS_FILEHASH,		//SFLCOL_FILEHASH
		IDS_SF_REQUESTS,	//SFLCOL_REQUESTS
		IDS_SF_ACCEPTS,		//SFLCOL_ACCEPTED
		IDS_SF_TRANSFERRED,	//SFLCOL_TRANSFERRED
		IDS_SF_PARTTRAFFIC,	//SFLCOL_PARTTRAFFIC
		IDS_SF_COLUPLOADS,	//SFLCOL_UPLOADS
		IDS_SF_COMPLETESRC,	//SFLCOL_COMPLETESRC
		IDS_SF_FOLDER		//SFLCOL_FOLDER
	};

	EMULE_TRY

	if (GetSafeHwnd())
	{
		CHeaderCtrl	*pHeaderCtrl = GetHeaderCtrl();
		CString		strRes;
		HDITEM		hdi;

		hdi.mask = HDI_TEXT;

		for (unsigned ui = 0; ui < ARRSIZE(s_auResTbl); ui++)
		{
			::GetResString(&strRes, static_cast<UINT>(s_auResTbl[ui]));
			hdi.pszText = const_cast<LPTSTR>(strRes.GetString());
			pHeaderCtrl->SetItem(static_cast<int>(ui), &hdi);
		}

	//	Don't update empty list, also it avoids unrequired update on startup,
	//	which can cause problems because this method is called inside dialog initialization
		if (GetItemCount())
		{
		// Localization
			if(m_allYaKnow)
				ShowKnownList();
			else
				ShowFileList(g_App.m_pSharedFilesList);
		}
		else
		{
			ShowFilesCount();
			g_App.m_pMDlg->m_wndSharedFiles.SetDlgItemText( IDC_BN_SWITCHALLKNOWN,
				GetResString((m_allYaKnow) ? IDS_SF_SHOWALLSF : IDS_SF_SHOWALLKF) );
		}
	}

	EMULE_CATCH
}

void CSharedFilesCtrl::ShowFileList(CSharedFileList* in_sflist)
{
	EMULE_TRY

	SetRedraw(FALSE);

	DeleteAllItems();
	CCKey bufKey;
	CKnownFile* cur_file;
	for(POSITION pos = in_sflist->m_mapSharedFiles.GetStartPosition(); pos != NULL;)
	{
		in_sflist->m_mapSharedFiles.GetNextAssoc(pos, bufKey, cur_file);
		ShowFile(cur_file, false);
	}

	m_allYaKnow = false;

	ShowFilesCount();
	g_App.m_pMDlg->m_wndSharedFiles.SetDlgItemText(IDC_BN_SWITCHALLKNOWN, GetResString(IDS_SF_SHOWALLKF));

	SetRedraw(TRUE);

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSharedFilesCtrl::ShowKnownList()
{
	EMULE_TRY

	CKnownFileList* list=g_App.m_pKnownFilesList;

	SetRedraw(FALSE);

	DeleteAllItems();

	uint32 records = list->GetCount();

	m_allYaKnow = true;

	for (uint32 i = 0; i < records; i++)
	{
		CKnownFile* pKnownFile = list->ElementAt(i);

		if (pKnownFile != NULL)
			ShowFile(pKnownFile, false);
	}
	ShowFilesCount();
	g_App.m_pMDlg->m_wndSharedFiles.SetDlgItemText(IDC_BN_SWITCHALLKNOWN, GetResString(IDS_SF_SHOWALLSF));

	SetRedraw(TRUE);

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSharedFilesCtrl::UpdateFile(CKnownFile *pSharedFile, uint32 itemnr, bool resort)
{
	TCHAR	acHashStr[MAX_HASHSTR_SIZE];

	if (!g_App.m_pMDlg->IsRunning() || (pSharedFile == NULL))
		return;

	EMULE_TRY

//	Disable list sorting, position will be updated either by 'resort' or by last SetItemText()
	SetSortProcedure(NULL);

	SetItemText(itemnr, SFLCOL_FILESIZE, CastItoXBytes(pSharedFile->GetFileSize()));
	SetItemText(itemnr, SFLCOL_TYPE, pSharedFile->GetFileTypeString());
	SetItemText(itemnr, SFLCOL_PRIORITY, pSharedFile->GetKnownFilePriorityString());
	SetItemText(itemnr, SFLCOL_PERMISSION, pSharedFile->GetPermissionString());
	SetItemText(itemnr, SFLCOL_FILEHASH, md4str(pSharedFile->GetFileHash(), acHashStr));

	const TCHAR	*pcTmp;
	POSITION	pos;
	CString	strBuffer;
	uint64	a = pSharedFile->statistic.GetRequests();
	uint64	b = pSharedFile->statistic.GetAllTimeRequests();
	bool	bPartFile;
	uint16	uPart;

	if (a != 0 || b != 0)
	{
		strBuffer.Format(_T("%I64u (%I64u)"), a, b);
		pcTmp = strBuffer.GetString();
	}
	else
		pcTmp = _T("");
	SetItemText(itemnr, SFLCOL_REQUESTS, pcTmp);

	a = pSharedFile->statistic.GetAccepts();
	b = pSharedFile->statistic.GetAllTimeAccepts();
	if (a != 0 || b != 0)
	{
		strBuffer.Format(_T("%I64u (%I64u)"), a, b);
		pcTmp = strBuffer.GetString();
	}
	else
		pcTmp = _T("");
	SetItemText(itemnr, SFLCOL_ACCEPTED, pcTmp);

	a = pSharedFile->statistic.GetTransferred();
	b = pSharedFile->statistic.GetAllTimeTransferred();
	if (a != 0 || b != 0)
	{
		strBuffer.Format(_T("%s (%s)"), CastItoXBytes(a), CastItoXBytes(b));
		pcTmp = strBuffer.GetString();
	}
	else
		pcTmp = _T("");
	SetItemText(itemnr, SFLCOL_TRANSFERRED, pcTmp);

	//--- upload column text, or no text if 0 ---
	a = pSharedFile->GetFileSize();
	b = pSharedFile->statistic.GetAllTimeTransferred();

	double	dCompRel = pSharedFile->statistic.GetCompleteReleases();

	if (a != 0 && (dCompRel + b != 0.0))
	{
		strBuffer.Format(_T("%0.2f (%0.2f)"), dCompRel, (double)b/a);
		pcTmp = strBuffer.GetString();
	}
	else
		pcTmp = _T("");
	SetItemText(itemnr, SFLCOL_UPLOADS, pcTmp);

	SetItemText(itemnr, SFLCOL_FOLDER, pSharedFile->GetPath());

	//--- kids/parts open? ---
	sfl_itemdata* itemdataParent=(sfl_itemdata*)GetItemData(itemnr);
	if (itemdataParent->isOpen && (itemdataParent->parts != 0))
	{	//	Update all parts
		uint16 part = 0;

		bPartFile = pSharedFile->IsPartFile();
		pos = GetItemDataPos(itemnr + 1);
		do
		{
			int				iSubItemIdx = itemnr + 1 + part;
			sfl_itemdata	*itemdata = reinterpret_cast<sfl_itemdata*>(GetItemDataByPos(pos, iSubItemIdx));

			uPart = itemdata->part;
			if (pSharedFile->IsPartShared(uPart))
				pcTmp = _T("");
			else
			{
				GetResString(&strBuffer, IDS_HIDDEN);
				pcTmp = strBuffer.GetString();
			}
			SetItemText(iSubItemIdx, SFLCOL_PRIORITY, pcTmp);

			//--- column size (completed part?) ---
			if (bPartFile && !reinterpret_cast<CPartFile*>(pSharedFile)->IsPartComplete(uPart))
				pcTmp = _T("");
			else
				pcTmp = _T("*");
			SetItemText(iSubItemIdx, SFLCOL_FILESIZE, pcTmp);

			if (!g_App.m_pPrefs->DoUsePT())
			{
				SetItemText(iSubItemIdx, SFLCOL_ACCEPTED, _T(""));
				SetItemText(iSubItemIdx, SFLCOL_TRANSFERRED, _T(""));
				SetItemText(iSubItemIdx, SFLCOL_UPLOADS, _T(""));
				continue;
			}

			//--- column accepted ---
			uint32	as = pSharedFile->statistic.GetPartAccepted(uPart, true);
			uint32	a = pSharedFile->statistic.GetPartAccepted(uPart, false);
			if (as != 0 || a != 0)
			{
				strBuffer.Format(_T("%u (%u)"), as, a);
				pcTmp = strBuffer.GetString();
			}
			else
				pcTmp = _T("");
			SetItemText(iSubItemIdx, SFLCOL_ACCEPTED, pcTmp);

			//--- column transferred ---
			uint32 ts = pSharedFile->GetPartTraffic(uPart, true);
			uint32 t = pSharedFile->GetPartTraffic(uPart);
			if (ts != 0 || t != 0)
			{
				strBuffer.Format(_T("%s (%s)"), CastItoXBytes(ts), CastItoXBytes(t));
				pcTmp = strBuffer.GetString();
			}
			else
				pcTmp = _T("");
			SetItemText(iSubItemIdx, SFLCOL_TRANSFERRED, pcTmp);

			//--- column complete releases ---
			double	dCompPartRel = pSharedFile->statistic.GetCompletePartReleases(uPart);
			if (ts != 0 || dCompPartRel != 0.0)
			{
				strBuffer.Format(_T("%0.2f (%0.2f)"), dCompPartRel, (double)t/pSharedFile->GetPartSize(uPart));
				pcTmp = strBuffer.GetString();
			}
			else
				pcTmp = _T("");
			SetItemText(iSubItemIdx, SFLCOL_UPLOADS, pcTmp);
		} while (++part < itemdataParent->parts);
	}

	if (pSharedFile->IsPartFile())
	{
		strBuffer.Format(_T("%u"), ((CPartFile*)pSharedFile)->GetCompleteSourcesCount());
	}
	else
	{
		uint16 nCompleteSourcesCountLo, nCompleteSourcesCountHi;
		pSharedFile->GetCompleteSourcesRange(&nCompleteSourcesCountLo, &nCompleteSourcesCountHi);
		if (nCompleteSourcesCountLo == 0)
		{
			if (nCompleteSourcesCountHi == 0)
				strBuffer = _T("");
			else
				strBuffer.Format(_T("< %u"), nCompleteSourcesCountHi);
		}
		else if (nCompleteSourcesCountLo == nCompleteSourcesCountHi)
			strBuffer.Format(_T("%u"), nCompleteSourcesCountLo);
		else
			strBuffer.Format(_T("%u - %u"), nCompleteSourcesCountLo, nCompleteSourcesCountHi);
	}
	SetSortProcedure(SortProc);	//	Enable list sorting
	SetItemText(itemnr, SFLCOL_COMPLETESRC, strBuffer);

	//--- good time for a resort ---

	//	MOREVIT - Ok, a little kludgy but this should prevent resorts during extended selection
	//		causing the selection to be cleared.
	bool	isShift = GetAsyncKeyState(VK_SHIFT) < 0;

	if (resort && !isShift)
		SortItems(SortProc, m_dwParamSort);

	EMULE_CATCH
}

void CSharedFilesCtrl::AddFile(CKnownFile *file)
{
	ShowFile(file);
	ShowFilesCount();
}

void CSharedFilesCtrl::ShowFile(CKnownFile* file, bool resort)
{
	ShowFile(file, GetItemCount(), resort);
}

void CSharedFilesCtrl::ShowFile(CKnownFile* file, uint32 itemnr, bool resort)
{
	EMULE_TRY

	if(file == NULL)
		return;

	sfl_itemdata	*itemdata = new sfl_itemdata;

	itemdata->isFile = true;
	itemdata->isOpen = false;
	itemdata->knownFile = file;
	itemdata->part = 0;
	itemdata->parts = 0;

	itemnr=InsertItem(LVIF_TEXT|LVIF_PARAM, itemnr, LPSTR_TEXTCALLBACK, 0, 0, 0, (LPARAM)itemdata);
	UpdateFile(file, itemnr, resort);

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSharedFilesCtrl::RemoveFile(CKnownFile *toRemove)
{
	EMULE_TRY

	if(toRemove == NULL)
		return;

	sfl_itemdata*	itemdata;
	for (int nItem = 0; nItem < GetItemCount(); nItem++)
	{
		itemdata = (sfl_itemdata*)GetItemData(nItem);
		if (itemdata->isFile && itemdata->knownFile == toRemove)
		{
			//--- delete all part-childs ---
			if(itemdata->isOpen)
			{
				for (uint16 part = 0; part < itemdata->parts; part++)
				{
					sfl_itemdata	*itemdataPart=(sfl_itemdata*)GetItemData(nItem+1);

					if (itemdataPart->isFile)
						break;
					DeleteItem(nItem+1);
					delete itemdataPart;
				}
			}

			DeleteItem(nItem);
			delete itemdata;
		}
	}
	ShowFilesCount();

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CSharedFilesCtrl::DeleteAllItems()
{
	BOOL			bResult = FALSE;
	sfl_itemdata	*pItem;
	POSITION		pos;
	int				iIdx;

	EMULE_TRY

	for (iIdx = 0, pos = GetItemDataHeadPos(); pos != NULL; iIdx++)
	{
		pItem = reinterpret_cast<sfl_itemdata*>(GetItemDataByPos(pos, iIdx));
		delete pItem;
	}
	bResult = CListCtrl::DeleteAllItems();

	EMULE_CATCH

	return bResult;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSharedFilesCtrl::OnContextMenu(CWnd *pWnd, CPoint point)
{
	NOPRM(pWnd);
	EMULE_TRY

	delete m_pSCM;
	m_pSCM = NULL;

	sfl_itemdata	*itemdata;
	UINT			uFlag;
	CTitleMenu		SharedFilesMenu;
	CMenu			menuPriority, PermMenu, ed2kMenu, ShellContextMenu, menuWeb;

	SharedFilesMenu.CreatePopupMenu();
	SharedFilesMenu.AddMenuTitle(GetResString((m_allYaKnow) ? IDS_KNOWNFILES : IDS_SHAREDFILES));

	int				iSel = GetSelectionMark();

	if (iSel != -1)
		itemdata = reinterpret_cast<sfl_itemdata*>(GetItemData(iSel));

	UINT		dwSelectedCnt = GetSelectedCount();
	bool		bJustOne = (dwSelectedCnt == 1);
	bool		bNone = (dwSelectedCnt == 0);

	if (!bNone)
	{
		if (itemdata->isFile)
		{
		//	Add priority switcher
			menuPriority.CreateMenu();

			bool		bTmpFlag = (bJustOne && !itemdata->knownFile->IsULAutoPrioritized());
			bool		bIsJumpStart = (itemdata->knownFile->GetJumpstartEnabled());

			menuPriority.AppendMenu( MF_STRING |
				((bTmpFlag && itemdata->knownFile->GetULPriority() == PR_VERYLOW) ? MF_CHECKED : MF_UNCHECKED),
				MP_PRIOVERYLOW, GetResString(IDS_PRIOVERYLOW) );
			menuPriority.AppendMenu( MF_STRING |
				((bTmpFlag && itemdata->knownFile->GetULPriority() == PR_LOW) ? MF_CHECKED : MF_UNCHECKED),
				MP_PRIOLOW, GetResString(IDS_PRIOLOW) );
			menuPriority.AppendMenu( MF_STRING |
				((bTmpFlag && itemdata->knownFile->GetULPriority() == PR_NORMAL) ? MF_CHECKED : MF_UNCHECKED),
				MP_PRIONORMAL, GetResString(IDS_PRIONORMAL) );
			menuPriority.AppendMenu( MF_STRING |
				((bTmpFlag && itemdata->knownFile->GetULPriority() == PR_HIGH) ? MF_CHECKED : MF_UNCHECKED),
				MP_PRIOHIGH, GetResString(IDS_PRIOHIGH) );
			menuPriority.AppendMenu( MF_STRING |
				((bTmpFlag && itemdata->knownFile->GetULPriority() == PR_RELEASE) ? MF_CHECKED : MF_UNCHECKED),
				MP_PRIORELEASE, GetResString(IDS_PRIORELEASE) );
			menuPriority.AppendMenu( MF_STRING |
				((bJustOne && itemdata->knownFile->IsULAutoPrioritized()) ? MF_CHECKED : MF_UNCHECKED),
				MP_PRIOAUTO, GetResString(IDS_PRIOAUTO) );

			if ( ( !itemdata->knownFile->IsPartFile() && !m_allYaKnow &&
				((itemdata->knownFile->GetFileSize() > PARTSIZE) || bIsJumpStart) ) ||	//don't allow to enable JumpStart for small files
				(bIsJumpStart && m_allYaKnow) )
			{
				menuPriority.AppendMenu(MF_SEPARATOR);
				menuPriority.AppendMenu(MF_STRING | (bIsJumpStart ? MF_CHECKED : MF_UNCHECKED), MP_JUMPSTART, _T("JumpStart"));
			}
			SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP|MF_ENABLED,(UINT_PTR)menuPriority.m_hMenu, GetResString(IDS_PRIORITY));

		//	add permission switcher
			PermMenu.CreateMenu();
			PermMenu.AppendMenu(MF_STRING | 
				((bJustOne && itemdata->knownFile->GetPermissions() == PERM_NOONE) ? MF_CHECKED : MF_UNCHECKED),
				MP_PERMNONE, GetResString(IDS_HIDDEN));
			PermMenu.AppendMenu(MF_STRING | 
				((bJustOne && itemdata->knownFile->GetPermissions() == PERM_FRIENDS) ? MF_CHECKED : MF_UNCHECKED),
				MP_PERMFRIENDS, GetResString(IDS_FSTATUS_FRIENDSONLY));
			PermMenu.AppendMenu(MF_STRING | 
				((bJustOne && itemdata->knownFile->GetPermissions() == PERM_ALL) ? MF_CHECKED : MF_UNCHECKED),
				MP_PERMALL, GetResString(IDS_FSTATUS_PUBLIC));

			SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)PermMenu.m_hMenu, GetResString(IDS_PERMISSION));
			SharedFilesMenu.AppendMenu(MF_SEPARATOR);

			if (m_allYaKnow == false)
			{
				ShellContextMenu.CreateMenu();
				uFlag = MF_STRING | MF_GRAYED;
				if (bJustOne && !itemdata->knownFile->IsPartFile())
				{
					uFlag &= ~MF_GRAYED;

					CString	strBuffer = ConcatFullPath(itemdata->knownFile->GetPath(), itemdata->knownFile->GetFileName());

					m_pSCM = new CShellContextMenu(m_hWnd, strBuffer);
					m_pSCM->SetMenu(&ShellContextMenu);
				}
				SharedFilesMenu.AppendMenu(uFlag | MF_POPUP, (UINT_PTR)ShellContextMenu.m_hMenu, GetResString(IDS_SHELLCONTEXT));
				SharedFilesMenu.AppendMenu( MF_STRING |
					((itemdata->knownFile->IsPartFile() || !(bJustOne)) ? MF_GRAYED : MF_ENABLED),
					MP_OPENFOLDER, GetStringFromShortcutCode(IDS_OPENFOLDER, SCUT_FILE_OPENDIR, SSP_TAB_PREFIX) );

				SharedFilesMenu.AppendMenu( MF_STRING |
					((itemdata->knownFile->IsPartFile() || !g_App.m_pPrefs->IsAVEnabled() || (g_App.m_pPrefs->GetAVPath().IsEmpty())) ? MF_GRAYED : MF_ENABLED),
					MP_AV_SCAN, GetResString(IDS_AV_SCAN));
			}
			SharedFilesMenu.AppendMenu( MF_STRING |
				((bJustOne) ? MF_ENABLED : MF_GRAYED) |
				((itemdata->knownFile->GetFileComment().IsEmpty()) ? MF_UNCHECKED : MF_CHECKED),
				MP_CMT, GetStringFromShortcutCode(IDS_EDIT_FILE_COMMENT, SCUT_FILE_EDITCOMMENTS, SSP_TAB_PREFIX) );
		}
		else
		{
			uFlag = MF_STRING | (itemdata->knownFile->IsPartFile() ? MF_GRAYED : MF_ENABLED);

			SharedFilesMenu.AppendMenu(uFlag, MP_SFL_PARTON, GetResString(IDS_SF_PARTON));
			SharedFilesMenu.AppendMenu(uFlag, MP_SFL_PARTHIDDEN, GetResString(IDS_SF_PARTHIDDEN));
		}

		SharedFilesMenu.AppendMenu(MF_SEPARATOR);
		SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARALLSTATS, GetResString(IDS_SF_RESETALLSTATS));
		SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARSTATS, GetResString(IDS_SF_RESETSESSTATS));

		SharedFilesMenu.AppendMenu(MF_SEPARATOR);

	//	Delete is possible only for a known file
		if (m_allYaKnow && itemdata->isFile)
		{
			SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_DELKNOWN, GetResString(IDS_SF_DELETE));
			SharedFilesMenu.AppendMenu(MF_SEPARATOR);
		}
	}

	if(m_allYaKnow)
	{
		SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_MERGEKNOWN, GetResString(IDS_SF_MERGE));
		SharedFilesMenu.AppendMenu(MF_SEPARATOR);
		SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_ALLYAKNOW, GetResString(IDS_SF_SHOWALLSF));
	}
	else
		SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_ALLYAKNOW, GetResString(IDS_SF_SHOWALLKF));

	if (!bNone)
	{
		SharedFilesMenu.AppendMenu(MF_SEPARATOR);

	//	ED2K link can't be obtained for a part only for a file
		if (itemdata->isFile)
		{
			ed2kMenu.CreateMenu();
			ed2kMenu.AppendMenu(MF_STRING, MP_GETED2KLINK, GetStringFromShortcutCode(IDS_DL_LINK1, SCUT_LINK, SSP_TAB_PREFIX));
			ed2kMenu.AppendMenu(MF_STRING, MP_GETHTMLED2KLINK, GetStringFromShortcutCode(IDS_DL_LINK2, SCUT_LINK_HTML, SSP_TAB_PREFIX));
			ed2kMenu.AppendMenu(MF_STRING, MP_GETSOURCEED2KLINK, GetStringFromShortcutCode(IDS_CREATESOURCELINK, SCUT_LINK_SOURCE, SSP_TAB_PREFIX));
			ed2kMenu.AppendMenu(MF_STRING, MP_GETHASH, GetStringFromShortcutCode(IDS_COPYHASH, SCUT_LINK_HASH, SSP_TAB_PREFIX));
			SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP|MF_ENABLED, (UINT_PTR)ed2kMenu.m_hMenu, GetResString(IDS_ED2KLINKFIX));
		}

		menuWeb.CreateMenu();
		uFlag = ((UpdateURLMenu(menuWeb) == 0) ? MF_GRAYED : MF_STRING) | (bJustOne ? MF_ENABLED : MF_GRAYED);
		SharedFilesMenu.AppendMenu(uFlag | MF_POPUP, (UINT_PTR)menuWeb.m_hMenu, GetResString(IDS_WEBSERVICES));
	}

	SharedFilesMenu.TrackPopupMenuEx(TPM_LEFTALIGN |TPM_RIGHTBUTTON,point.x,point.y,this, NULL);

	if (m_pSCM != NULL)
		m_pSCM->CleanUp();

//	Menu objects are destroyed in their destructor

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CSharedFilesCtrl::OnWndMsg(UINT iMessage, WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	BOOL		bHandled = FALSE;

	EMULE_TRY

	switch (iMessage)
	{
		case WM_SFL_UPDATEITEM:
		{
			CKnownFile		*pKnownFile = reinterpret_cast<CKnownFile*>(lParam);
			bool			bResort = B2b(wParam);

			if (pKnownFile == NULL)	//	Special request to redraw all items without actual update
				RedrawItems(0, GetItemCount());
			else
				UpdateItem(pKnownFile, bResort);
			bHandled = TRUE;
			break;
		}
	}

	EMULE_CATCH

	if (!bHandled)
		bHandled = CMuleListCtrl::OnWndMsg(iMessage, wParam, lParam, pResult);

	return bHandled;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CSharedFilesCtrl::OnCommand(WPARAM wParam, LPARAM lParam)
{
	NOPRM(lParam);
	EMULE_TRY

//	Commands which don't depend on selection
	switch (wParam)
	{
		case MP_SFL_ALLYAKNOW:
		{
			if(m_allYaKnow)
				ShowFileList(g_App.m_pSharedFilesList);
			else
				ShowKnownList();
			return true;
		}
		case MP_SFL_MERGEKNOWN:
		{
			SetRedraw(FALSE);
			g_App.m_pKnownFilesList->merge();
			ShowKnownList();
			SetRedraw(TRUE);
			return true;
		}
	}

	int iSel = GetSelectionMark();
	if (iSel == -1)
		return false;

	sfl_itemdata   *itemdata = (sfl_itemdata*)GetItemData(iSel);
	CKnownFile	   *file = itemdata->knownFile;

	if (wParam >= MP_WEBURL && wParam <= MP_WEBURL + 64)
	{
		RunURL(file, g_App.m_strWebServiceURLArray.GetAt(wParam - MP_WEBURL));
		return true;
	}

//	Multiple selections
	CString							strBuffer;
	UINT							selectedCount = GetSelectedCount();
	CTypedPtrList<CPtrList,CKnownFile*>	selectedList;
	POSITION						pos = GetFirstSelectedItemPosition();

	while (pos)
	{
		iSel = GetNextSelectedItem(pos);

		itemdata = reinterpret_cast<sfl_itemdata*>(GetItemData(iSel));

		//--- file selection? ---
		if (itemdata && itemdata->isFile)
		{
			selectedList.AddTail(itemdata->knownFile);
		}
	}

	switch (wParam)
	{
		case MP_GETED2KLINK:
			while (!selectedList.IsEmpty())
			{
				strBuffer += selectedList.RemoveHead()->CreateED2kLink();
				if (!selectedList.IsEmpty())
					strBuffer += _T("\r\n");
			}
			g_App.CopyTextToClipboard(strBuffer);
			break;

		case MP_GETHTMLED2KLINK:
			while (!selectedList.IsEmpty())
			{
				strBuffer += selectedList.RemoveHead()->CreateHTMLED2kLink();
				if(!selectedList.IsEmpty())
					strBuffer += _T("\r\n");
			}
			g_App.CopyTextToClipboard(strBuffer);
			break;

		case MP_GETSOURCEED2KLINK:
			while (!selectedList.IsEmpty())
			{
				CKnownFile	*pKnownFile = selectedList.RemoveHead();

				strBuffer += pKnownFile->GetSharedFile() ? pKnownFile->CreateED2kSourceLink() : pKnownFile->CreateED2kLink();
				if(!selectedList.IsEmpty())
					strBuffer += _T("\r\n");
			}
			g_App.CopyTextToClipboard(strBuffer);
			break;

		case MP_GETHASH:
			while (!selectedList.IsEmpty())
			{
				strBuffer += HashToString(selectedList.RemoveHead()->GetFileHash());
				if (!selectedList.IsEmpty())
					strBuffer += _T("\r\n");
			}
			g_App.CopyTextToClipboard(strBuffer);
			break;

		case MP_OPENFOLDER:
			ShellOpenFile(file->GetPath());
			break;

		case MP_AV_SCAN:
			strBuffer = g_App.m_pPrefs->GetAVParams();
			while (!selectedList.IsEmpty())
			{
				CKnownFile	*pKnownFile = selectedList.RemoveHead();

				if (!pKnownFile->IsPartFile())
				{
					strBuffer += _T(" \"");
					strBuffer += ConcatFullPath(pKnownFile->GetPath(), pKnownFile->GetFileName());
					strBuffer += _T('\"');
				}
			}
			ShellExecute(NULL, _T("open"), g_App.m_pPrefs->GetAVPath(), strBuffer, NULL, SW_SHOW);
			break;

		case MP_CMT:
		{
			if(selectedCount > 1)
				break;
			CCommentDialog dialog(file);

			if ((dialog.DoModal() == IDOK) && g_App.m_pPrefs->ShowRatingIcons())
				UpdateItem(file, false);	// Update file rating icon
			break;
		}
		case MP_SFL_DELKNOWN:
			while (!selectedList.IsEmpty())
			{
				CKnownFile		*pKnownFile = selectedList.RemoveHead();

			//	Try to clear file from download list if it's where as complete file not to crash
			//	during download list update, because file object will be destroyed now.
				g_App.m_pDownloadList->ClearCompleted(pKnownFile->GetFileHash());

				g_App.m_pSharedFilesList->RemoveFile(pKnownFile);
			}
			break;

		case MP_SFL_CLEARSTATS:
		case MP_SFL_CLEARALLSTATS:
		{
			//--- TODO: ask if really erase ---

			bool			all = (wParam == MP_SFL_CLEARALLSTATS);
			CKnownFile	   *lastfile = NULL;

			POSITION		pos = GetFirstSelectedItemPosition();

			while (pos)
			{
				iSel = GetNextSelectedItem(pos);

				itemdata = (sfl_itemdata*)GetItemData(iSel);
				file = itemdata->knownFile;

				//--- file selection? ---
				if (itemdata->isFile)
					itemdata->knownFile->statistic.resetStats(all);
				//--- part selection ---
				else
					itemdata->knownFile->statistic.resetPartTraffic(itemdata->part, all);

				if (file != lastfile)
				{
					if (lastfile)
						UpdateItem(lastfile, false);
					lastfile = file;
				}
			}

			if (lastfile)
				UpdateItem(lastfile, true);
			RedrawItems(0, GetItemCount());
			break;
		}
		case MP_PRIOVERYLOW:
		case MP_PRIOLOW:
		case MP_PRIONORMAL:
		case MP_PRIOHIGH:
		case MP_PRIORELEASE:
		case MP_PRIOAUTO:
		{
			POSITION	pos = GetFirstSelectedItemPosition();

			while (pos != NULL)
			{
				iSel = this->GetNextSelectedItem(pos);

				itemdata = (sfl_itemdata*)GetItemData(iSel);
				file = itemdata->knownFile;

				//--- is there a part in selection? ---
				if (itemdata->isFile)
				{
					file->SetAutoULPriority(false);

					switch (wParam)
					{
						default:
						case MP_PRIOVERYLOW:
							file->SetULPriority(PR_VERYLOW);
							break;

						case MP_PRIOLOW:
							file->SetULPriority(PR_LOW);
							break;

						case MP_PRIONORMAL:
							file->SetULPriority(PR_NORMAL);
							break;

						case MP_PRIOHIGH:
							file->SetULPriority(PR_HIGH);
							break;

						case MP_PRIORELEASE:
							file->SetULPriority(PR_RELEASE);
							break;

						case MP_PRIOAUTO:
							file->SetAutoULPriority(true);
							file->UpdateUploadAutoPriority();
							break;
					}
					SetItemText(iSel, SFLCOL_PRIORITY, file->GetKnownFilePriorityString());
				}
			}
			break;
		}
		case MP_SFL_PARTON:
		case MP_SFL_PARTHIDDEN:
		{
			POSITION	pos = GetFirstSelectedItemPosition();
			bool			bIsItemsUpdated = false;

			while (pos)
			{
				iSel = GetNextSelectedItem(pos);

				itemdata = reinterpret_cast<sfl_itemdata*>(GetItemData(iSel));
				if (itemdata)
				{
					file = itemdata->knownFile;
					if (itemdata->isFile == false)
					{
						if (file->IsPartFile() == false)
						{
							switch(wParam)
							{
								case MP_SFL_PARTON:
									file->SharePart(itemdata->part);
									SetItemText(iSel, SFLCOL_PRIORITY, _T(""));
									bIsItemsUpdated = true;
									break;

								case MP_SFL_PARTHIDDEN:
									file->UnsharePart(itemdata->part);
									GetResString(&strBuffer, IDS_HIDDEN);
									SetItemText(iSel, SFLCOL_PRIORITY, strBuffer);
									bIsItemsUpdated = true;
									break;
							}
						}
					}
				}
			}

			if (bIsItemsUpdated)
				RedrawItems(0, GetItemCount());	// Update part traffic status bars
			break;
		}
		case MP_PERMNONE:
		case MP_PERMFRIENDS:
		case MP_PERMALL:
		{
			POSITION	pos = GetFirstSelectedItemPosition();

			while (pos != NULL)
			{
				iSel = this->GetNextSelectedItem(pos);

				itemdata = (sfl_itemdata*)GetItemData(iSel);
				if (itemdata->isFile)
				{
					file = itemdata->knownFile;
					switch (wParam)
					{
						case MP_PERMNONE:
							file->SetPermissions(PERM_NOONE);
							break;

						case MP_PERMFRIENDS:
							file->SetPermissions(PERM_FRIENDS);
							break;

						case MP_PERMALL:
							file->SetPermissions(PERM_ALL);
							break;
					}
					SetItemText(iSel, SFLCOL_PERMISSION, file->GetPermissionString());
				}
			}
			break;
		}
		case MP_JUMPSTART:
		{
			BOOL alreadyasked = FALSE;
			BOOL alreadynotified = FALSE;
			INT msgyes = 0;
			POSITION pos = GetFirstSelectedItemPosition();
			while(pos != NULL)
			{
				iSel = this->GetNextSelectedItem(pos);

				itemdata=reinterpret_cast<sfl_itemdata*>(GetItemData(iSel));
				file=itemdata->knownFile;

				//--- is there a part in selection? ---
				if(itemdata->isFile && !itemdata->knownFile->IsPartFile())
				{
					if(file->GetJumpstartEnabled())
					{
						if(alreadyasked != TRUE)
						{
							GetResString(&strBuffer, IDS_JS_DISABLE);
							msgyes = AfxMessageBox(strBuffer, MB_YESNO|MB_ICONEXCLAMATION|MB_DEFBUTTON2);
							alreadyasked = TRUE;
						}

						if(msgyes == IDYES)
						{
							file->SetJumpstartEnabled(false);
							SetItemText(iSel, SFLCOL_PRIORITY, file->GetKnownFilePriorityString());
						}
					}
					else if (file->GetFileSize() > PARTSIZE)	//don't allow to enable JumpStart for small files
					{
						if (file->IsJsComplete())
						{
							if (alreadynotified != TRUE)
							{
								GetResString(&strBuffer, IDS_JS_COMPLETE);
								AfxMessageBox(strBuffer, MB_OK | MB_ICONSTOP);
								alreadynotified = TRUE;
							}
						}
						else
						{
							file->SetJumpstartEnabled(true);
							SetItemText(iSel, SFLCOL_PRIORITY, file->GetKnownFilePriorityString());
						}
					}
				}
			}
			break;
		}
		default:
		{
			if ((m_pSCM != NULL) && m_pSCM->IsMenuCommand(wParam))
				m_pSCM->InvokeCommand(wParam, file);
			break;
		}
	}

	return true;

	EMULE_CATCH

	return false;
}

void CSharedFilesCtrl::OnColumnClick(NMHDR *pNMHDR, LRESULT *pResult)
{
	m_sortParts = (GetAsyncKeyState(VK_SHIFT) < 0);

	CMuleListCtrl::OnLvnColumnClick(pNMHDR, pResult);
}

int CSharedFilesCtrl::SortProc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort)
{
	if (lParam1 == NULL || lParam2 == NULL)
		return 0;

	EMULE_TRY

	sfl_itemdata	*item1 = reinterpret_cast<sfl_itemdata*>(lParam1);
	sfl_itemdata	*item2 = reinterpret_cast<sfl_itemdata*>(lParam2);
	CKnownFile		*knownfile1 = item1->knownFile;
	CKnownFile		*knownfile2 = item2->knownFile;

	if (knownfile1 == NULL || knownfile2 == NULL)
		return 0;

	uint32	dwVal1, dwVal2;
	double	d1, d2;
	int		iCompare = 0;
	int		iSortColumn = (lParamSort & MLC_COLUMNMASK);
	int		iSortAltFlag = (lParamSort & MLC_SORTALT);
	int		iSortMod = ((lParamSort & MLC_SORTDESC) == 0) ? 1 : -1;

	//--- some parts to compare? and from same file ---
	if (item1->isFile == false && item2->isFile == false && item1->knownFile == item2->knownFile)
	{
		//--- shiftkey down ---
		if (m_sortParts && g_App.m_pPrefs->DoUsePT())
		{
			switch(iSortColumn)
			{
				case SFLCOL_TRANSFERRED:
					if (iSortAltFlag == 0)
					{
						dwVal1 = knownfile1->GetPartTraffic(item1->part, true);
						dwVal2 = knownfile2->GetPartTraffic(item2->part, true);

						if ((dwVal1 != 0) || (dwVal2 != 0))
						{
							if (dwVal1 == 0)
								iCompare = -1;
							else if(dwVal2 == 0)
								iCompare = 1;
							else
								iCompare = sortcmp(dwVal1, dwVal2);
							break;
						}
					}

					dwVal1 = knownfile1->GetPartTraffic(item1->part);
					dwVal2 = knownfile2->GetPartTraffic(item2->part);

					if (dwVal1 == 0)
						iCompare = (dwVal2 == 0) ? (item1->part - item2->part) : -1;
					else if (dwVal2 == 0)
						iCompare = 1;
					else
						iCompare = sortcmp(dwVal1, dwVal2);
					break;

				case SFLCOL_ACCEPTED:
					if (iSortAltFlag == 0)
					{
						dwVal1 = knownfile1->statistic.GetPartAccepted(item1->part, true);
						dwVal2 = knownfile2->statistic.GetPartAccepted(item2->part, true);

						if ((dwVal1 != 0) || (dwVal2 != 0))
						{
							if (dwVal1 == 0)
								iCompare = -1;
							else if(dwVal2 == 0)
								iCompare = 1;
							else
								iCompare = sortcmp(dwVal1, dwVal2);
							break;
						}
					}

					dwVal1 = knownfile1->statistic.GetPartAccepted(item1->part, false);
					dwVal2 = knownfile2->statistic.GetPartAccepted(item2->part, false);

					if (dwVal1 == 0)
						iCompare = (dwVal2 == 0) ? (item1->part - item2->part) : -1;
					else if (dwVal2 == 0)
						iCompare = 1;
					else
						iCompare = sortcmp(dwVal1, dwVal2);
					break;

				case SFLCOL_PARTTRAFFIC:
				case SFLCOL_UPLOADS:
					if (iSortAltFlag == 0)
					{
						iCompare = sortcmp(knownfile1->statistic.GetCompletePartReleases(item1->part),
									    knownfile2->statistic.GetCompletePartReleases(item2->part));
					}
					else
					{
						d1 = (double)knownfile1->GetPartTraffic(item1->part) / knownfile1->GetPartSize(item1->part);
						d2 = (double)knownfile2->GetPartTraffic(item2->part) / knownfile2->GetPartSize(item2->part);
						iCompare = sortcmp(d1, d2);
					}
					break;

				default:
					iCompare = item1->part - item2->part;
			}
		}
		else	//--- no shift key down, no sorting ---
		{
			iCompare = item1->part - item2->part;
			iSortMod = 1;		//	sort always in ascending order
		}
	}
	else	//--- some other compare ---
	{
		for (;;)
		{
			switch (iSortColumn)
			{
				case SFLCOL_FILENAME:
					iCompare = knownfile1->CmpFileNames(knownfile2->GetFileName());
					break;

				case SFLCOL_FILESIZE:
					iCompare = CompareInt64(knownfile1->GetFileSize(), knownfile2->GetFileSize());
					break;

				case SFLCOL_TYPE:
					iCompare = knownfile1->CmpFileTypes(knownfile2->GetFileType());
					if (iCompare == 0)
					{
						iSortMod = 1;		//sort always in ascending order
						if ((iCompare = knownfile1->GetFileExtension().Compare(knownfile2->GetFileExtension())) == 0)
						{
							iSortColumn = SFLCOL_FILENAME;
							continue;
						}
					}
					break;

				case SFLCOL_PRIORITY:
					dwVal1 = m_p2p[knownfile1->GetULPriority()] | (knownfile1->GetJumpstartEnabled() ? 2 : 0) | (knownfile1->IsULAutoPrioritized() ? 1 : 0);
					dwVal2 = m_p2p[knownfile2->GetULPriority()] | (knownfile2->GetJumpstartEnabled() ? 2 : 0) | (knownfile2->IsULAutoPrioritized() ? 1 : 0);
					iCompare = dwVal1 - dwVal2;

					if (iCompare == 0)
					{
						iSortColumn = SFLCOL_FILENAME;
						iSortMod = 1;		//sort always in ascending order
						continue;
					}
					break;

				case SFLCOL_PERMISSION:
					iCompare = knownfile1->GetPermissions() - knownfile2->GetPermissions();
					break;

				case SFLCOL_FILEHASH:
					iCompare = memcmp(knownfile1->GetFileHash(), knownfile2->GetFileHash(), 16);
					break;

				case SFLCOL_REQUESTS:
					if (iSortAltFlag == 0)
					{
						iCompare = sortcmp(knownfile1->statistic.GetRequests(), knownfile2->statistic.GetRequests());
						if (iCompare != 0)
							break;
					}
					iCompare = sortcmp(knownfile1->statistic.GetAllTimeRequests(), knownfile2->statistic.GetAllTimeRequests());
					break;

				case SFLCOL_ACCEPTED:
					if (iSortAltFlag == 0)
					{
						iCompare = sortcmp(knownfile1->statistic.GetAccepts(), knownfile2->statistic.GetAccepts());
						if (iCompare != 0)
							break;
					}
					iCompare = sortcmp(knownfile1->statistic.GetAllTimeAccepts(), knownfile2->statistic.GetAllTimeAccepts());
					break;

				case SFLCOL_TRANSFERRED:
					if (iSortAltFlag == 0)
					{
						iCompare = sortcmp(knownfile1->statistic.GetTransferred(), knownfile2->statistic.GetTransferred());
						if (iCompare != 0)
							break;
					}
					iCompare = sortcmp(knownfile1->statistic.GetAllTimeTransferred(), knownfile2->statistic.GetAllTimeTransferred());
					break;

				case SFLCOL_COMPLETESRC:
					d1 = CompleteSourcesCmpValue(knownfile1, (iSortAltFlag != 0));
					d2 = CompleteSourcesCmpValue(knownfile2, (iSortAltFlag != 0));
					iCompare = sortcmp(d1, d2);
					break;

				case SFLCOL_PARTTRAFFIC:
				case SFLCOL_UPLOADS:
					if (iSortAltFlag == 0)
					{
						iCompare = sortcmp(knownfile1->statistic.GetCompleteReleases(), knownfile2->statistic.GetCompleteReleases());
						if (iCompare != 0)
							break;
					}

					d1 = (double)knownfile1->statistic.GetAllTimeTransferred() / knownfile1->GetFileSize();
					d2 = (double)knownfile2->statistic.GetAllTimeTransferred() / knownfile2->GetFileSize();
					iCompare = sortcmp(d1, d2);
					break;

				case SFLCOL_FOLDER:
					iCompare = _tcsicmp(knownfile1->GetPath(), knownfile2->GetPath());
					if (iCompare == 0)
					{
						iSortColumn = SFLCOL_FILENAME;
						iSortMod = 1;		//sort always in ascending order
						continue;
					}
					break;
			}
			break;
		}
	}

	return iCompare * iSortMod;

	EMULE_CATCH

	return 0;
}

void CSharedFilesCtrl::UpdateItem(CKnownFile *toupdate, bool resort)
{
	if (!::IsWindow(m_hWnd) || (toupdate == NULL))
		return;

	EMULE_TRY

	sfl_itemdata	*pItem;
	int				iIdx;
	POSITION		pos;

//	Disable list sorting to preserve list positions
	SetSortProcedure(NULL);

	for (iIdx = 0, pos = GetItemDataHeadPos(); pos != NULL; iIdx++)
	{
		pItem = reinterpret_cast<sfl_itemdata*>(GetItemDataByPos(pos, iIdx));
		if ((pItem->knownFile == toupdate) && pItem->isFile)
		{
			SetSortProcedure(SortProc);	//	Enable list sorting

			UpdateFile(toupdate, iIdx, resort);
			Update(iIdx);
			return;
		}
	}
	SetSortProcedure(SortProc);	//	Enable list sorting

	EMULE_CATCH
}

void CSharedFilesCtrl::DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct)
{
	EMULE_TRY

	if (!lpDrawItemStruct->itemData)
		return;

	sfl_itemdata*	itemdata=(sfl_itemdata*)lpDrawItemStruct->itemData;
	CKnownFile*		file=itemdata->knownFile;
	CDC* odc = CDC::FromHandle(lpDrawItemStruct->hDC);
	int iODC = odc->SaveDC();
	UINT			iCalcFlag = (DT_SINGLELINE | DT_VCENTER | DT_NOPREFIX | DT_END_ELLIPSIS);
	COLORREF		crBk, crWinBk;

	if (IsRightToLeftLanguage())
		iCalcFlag |= DT_RTLREADING;

	crWinBk = crBk = GetBkColor();
	if (lpDrawItemStruct->itemState & ODS_SELECTED)
		crBk = (GetFocus() == this) ? m_crHighlight : m_crNoHighlight;

	CMemDC dc(odc, &lpDrawItemStruct->rcItem, crWinBk, crBk);
	int iDC = dc.SaveDC();
	CFont	*oldFont = dc->SelectObject(GetFont());

	if(m_allYaKnow)
	{
		if(file->GetSharedFile() == false)
			dc->SetTextColor(::GetSysColor(COLOR_GRAYTEXT));
		else
			dc->SetTextColor(::GetSysColor(COLOR_WINDOWTEXT));
	}
	else
	{
		int	iSysColor = COLOR_WINDOWTEXT;

		if (file->IsPartFile())
			iSysColor = COLOR_GRAYTEXT;
		else if (file->GetJumpstartEnabled())
			iSysColor = COLOR_HIGHLIGHT;

		dc->SetTextColor(::GetSysColor(iSysColor));
	}

	RECT cur_rec;

	cur_rec = lpDrawItemStruct->rcItem;

	CHeaderCtrl *pHeaderCtrl = GetHeaderCtrl();
	int iCount = pHeaderCtrl->GetItemCount();
	int iImage;

	//--- all 0.. columns ---
	for(int c = 0; c < iCount; c++)
	{
		//--- get real column, may its moved ---
		int cc = pHeaderCtrl->OrderToIndex(c);

		//--- if the column is hidden, dont do anything ---
		if(IsColumnHidden(cc))
			continue;

 		if(cc)
			cur_rec.left = cur_rec.right;
		cur_rec.right = cur_rec.left + CListCtrl::GetColumnWidth(cc);
		cur_rec.left += 4;

		//--- is it a file? ---
		if(itemdata->isFile)
		{
			switch(cc)
			{
				case SFLCOL_FILENAME:

					// File Type
					if (g_App.m_pPrefs->ShowFileTypeIcon())
					{
						iImage = g_App.GetFileTypeSystemImageIdx(file->GetFileName());
						if (g_App.GetSystemImageList() != NULL)
							::ImageList_Draw(g_App.GetSystemImageList(), iImage, dc->GetSafeHdc(), cur_rec.left, cur_rec.top + 1, ILD_TRANSPARENT);
						cur_rec.left += 19;
					}
					// File Rating
					if (g_App.m_pPrefs->ShowRatingIcons())
					{
						int	iImgIdx = file->GetFileRating();

						if (file->GetFileComment().IsEmpty() && (iImgIdx == PF_RATING_NONE))
							iImgIdx = 6;
						m_imageList.Draw(dc, iImgIdx, CPoint(cur_rec.left - 4, cur_rec.top + 2), ILD_TRANSPARENT);

						cur_rec.left += 10;
					}

				case SFLCOL_TYPE:
				case SFLCOL_PRIORITY:
				case SFLCOL_PERMISSION:
				case SFLCOL_FILEHASH:
				case SFLCOL_REQUESTS:
				case SFLCOL_COMPLETESRC:
				case SFLCOL_ACCEPTED:
				case SFLCOL_TRANSFERRED:
				case SFLCOL_UPLOADS:
				case SFLCOL_FOLDER:
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), &cur_rec, DT_LEFT | iCalcFlag);
					break;

				case SFLCOL_FILESIZE:
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), &cur_rec, DT_RIGHT | iCalcFlag);
					break;

				case SFLCOL_PARTTRAFFIC:	//--- part traffic ---
					if (g_App.m_pPrefs->DoUsePT())
					{
						cur_rec.bottom--;
						cur_rec.top++;

						// added
						int iWidth = cur_rec.right - cur_rec.left-4;
						int iHeight = cur_rec.bottom - cur_rec.top;

						if (iWidth > 0)
						{
							//--- old bar draw ---
							cdcStatus.CreateCompatibleDC(&dc);

							//--- the bar is not initalized yet? ---
							if (status == (HBITMAP)NULL)
							{
								status.CreateCompatibleBitmap(&dc, iWidth, iHeight);
								m_statusWidth=iWidth;
							}
							else
							{
								//--- the we do it this way ---
								if(iWidth!=m_statusWidth)
								{
									status.DeleteObject();
									status.CreateCompatibleBitmap(&dc, iWidth, iHeight);
									m_statusWidth=iWidth;
								}
							}

							CBitmap *oldBitmap=cdcStatus.SelectObject(&status);

							RECT rec_status;
							rec_status.left = 0;
							rec_status.top = 0;
							rec_status.bottom = iHeight;
							rec_status.right = iWidth;
							if(DrawStatusBarFile(&cdcStatus, &rec_status, file->statistic))
								dc->BitBlt(cur_rec.left, cur_rec.top, iWidth, iHeight,  &cdcStatus, 0, 0, SRCCOPY);

							cdcStatus.SelectObject(oldBitmap);

							cdcStatus.DeleteDC();
						}

						//added end
						cur_rec.bottom++;
						cur_rec.top--;
					}
					break;
			}
		}

		//--- it is a part of a file ---
		else
		{
			switch(cc)
			{
				case SFLCOL_FILENAME:
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), &cur_rec, DT_RIGHT | iCalcFlag);
					break;

				case SFLCOL_FILESIZE:
				case SFLCOL_PRIORITY:
				case SFLCOL_ACCEPTED:
				case SFLCOL_TRANSFERRED:
				case SFLCOL_UPLOADS:
				case SFLCOL_COMPLETESRC:
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), &cur_rec, /*DT_RIGHT*/DT_LEFT | iCalcFlag);
					break;

				case SFLCOL_PARTTRAFFIC:	//--- part traffic ---
					if (g_App.m_pPrefs->DoUsePT())
					{
						cur_rec.bottom--;
						cur_rec.top++;

						int iWidth = cur_rec.right - cur_rec.left-4;
						int iHeight = cur_rec.bottom - cur_rec.top;

						if (iWidth > 0)
						{
							//--- old bar draw ---
							cdcStatus.CreateCompatibleDC(&dc);

							//--- the bar is not initalized yet? ---
							if (status == (HBITMAP)NULL)
							{
								status.CreateCompatibleBitmap(&dc, iWidth, iHeight);
								m_statusWidth=iWidth;
							}
							else
							{
								//--- the we do it this way ---
								if (iWidth != m_statusWidth)
								{
									status.DeleteObject();
									status.CreateCompatibleBitmap(&dc, iWidth, iHeight);
									m_statusWidth=iWidth;
								}
							}
							CBitmap *oldBitmap=cdcStatus.SelectObject(&status);

							RECT rec_status;
							rec_status.left = 0;
							rec_status.top = 0;
							rec_status.bottom = iHeight;
							rec_status.right = iWidth;
							if (DrawStatusBarPart(&cdcStatus, &rec_status, file->statistic, itemdata->part))
								dc->BitBlt(cur_rec.left, cur_rec.top, iWidth, iHeight, &cdcStatus, 0, 0, SRCCOPY);

							cdcStatus.SelectObject(oldBitmap);

							cdcStatus.DeleteDC();
						}

						cur_rec.bottom++;
						cur_rec.top--;
					}
					break;
			}
		}
	}

	//--- draw rectangle around selected item ---
	if(lpDrawItemStruct->itemState & ODS_FOCUS)
	{
		RECT	rOutline = lpDrawItemStruct->rcItem;
		CBrush	FrmBrush((GetFocus() == this) ? m_crFocusLine : m_crNoFocusLine);

		rOutline.left++;
		rOutline.right--;
		dc->FrameRect(&rOutline, &FrmBrush);
	}

	dc->SelectObject(oldFont);
	dc.RestoreDC(iDC);
	odc->RestoreDC(iODC);

	EMULE_CATCH
}

bool CSharedFilesCtrl::DrawStatusBarFile(CDC* dc, RECT* rect, const CFileStatistic& statistic)
{
	EMULE_TRY

	int	available, use;
	available=use=(rect->right-rect->left+1);
	uint64	fs = statistic.fileParent->GetFileSize();
	double	dFileSz = static_cast<double>(fs);
	if(fs < PARTSIZE)
		use = max(1, static_cast<uint32>(available * (dFileSz / PARTSZ32)));

	RECT		r = *rect;
	COLORREF	crOldBckColor;

	crOldBckColor = dc->SetBkColor(RGB(0x00, 0x00, 0x00));	// save background color
	if (available == use)
		dc->ExtTextOut(0, 0, ETO_OPAQUE, &r, NULL, 0, NULL);	// fast fill with black
	else
	{
		r.right = r.left+use;
		dc->ExtTextOut(0, 0, ETO_OPAQUE, &r, NULL, 0, NULL);	// fast fill with black

		r.left = r.right;
		r.right = available;
		dc->FillSolidRect(&r, RGB(0xCC, 0xCC, 0xCC));	// fast fill with grey
	}
	dc->SetBkColor(crOldBckColor);	// restore previuos background color

	double bpp = dFileSz / use;

	//--- traffigram? ---
	if(m_trafficgram)
	{
		if ((statistic.GetAllTimeTransferred() == 0) || (statistic.partTraffic == NULL))
			return true;

		TraffiGram(dc, rect, statistic, use, bpp);
	}
	//--- old boring bar style :) ---
	else
	{
		COLORREF	colr;
		uint32	t;	// traffic
		CPen	*pOldPen, pen;
		double	dTmp, dInvBpp = 1.0 / bpp;
		bool	boh;

		for(int x = 0; x < use; x++)
		{
			dTmp = x * bpp;
			boh = !statistic.fileParent->IsPartShared(static_cast<uint32>(dTmp / PARTSZ32));

			//--- draw alltime parttraffic bar? ---
			t = statistic.fileParent->GetTrafficPart(static_cast<uint64>(dTmp), static_cast<uint64>(dTmp + bpp));
			if (t || boh)
			{
				colr = (GetTrafficColor)(t * dInvBpp);
				pen.CreatePen(PS_SOLID, 0, GrayIt(boh, colr));
				pOldPen = dc->SelectObject(&pen);
				dc->MoveTo(x, 0);
				dc->LineTo(x, m_display_atpte);
				dc->SelectObject(pOldPen);	// set previous object to make pen pointer always correct in GDI object
				pen.DeleteObject();
			}

			if (m_display_atbte)	//	Draw alltime blocktraffic bar?
			{
				t = statistic.fileParent->GetTrafficBlock(static_cast<uint64>(dTmp), static_cast<uint64>(dTmp + bpp));
				if (t || boh)
				{
					colr = (GetTrafficColor)(t * dInvBpp);
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, colr));
					pOldPen = dc->SelectObject(&pen);
					dc->MoveTo(x, m_display_atbts);
					dc->LineTo(x, m_display_atbte);
					dc->SelectObject(pOldPen);	// set previous object to make pen pointer always correct in GDI object
					pen.DeleteObject();
				}

				if (m_display_sbte)	//	Draw session blocktraffic bar?
				{
					t = statistic.fileParent->GetTrafficBlock(static_cast<uint64>(dTmp), static_cast<uint64>(dTmp + bpp), true);
					if (t || boh)
					{
						colr = (GetTrafficColor)(t * dInvBpp);
						pen.CreatePen(PS_SOLID, 0, GrayIt(boh, colr));
						pOldPen = dc->SelectObject(&pen);
						dc->MoveTo(x, m_display_sbts);
						dc->LineTo(x, m_display_sbte);
						dc->SelectObject(pOldPen);	// set previous object to make pen pointer always correct in GDI object
						pen.DeleteObject();
					}
				}
			}
		}
	}

	return true;

	EMULE_CATCH

	return false;
}

bool CSharedFilesCtrl::DrawStatusBarPart(CDC* dc, RECT* rect, const CFileStatistic& statistic, uint16 part)
{
	EMULE_TRY

	uint32		ps = statistic.fileParent->GetPartSize(part);
	RECT		r = *rect;
	COLORREF	crOldBckColor;
	int			use = max(1, (int)((int)(rect->right - rect->left + 1) * (double)ps / PARTSZ32));

	crOldBckColor = dc->SetBkColor(RGB(0x00, 0x00, 0x00));	// save background color
	if (ps != PARTSZ32)
	{
		r.right = r.left + use;
		dc->ExtTextOut(0, 0, ETO_OPAQUE, &r, NULL, 0, NULL);	// fast fill with black

		r.left = r.right;
		r.right = rect->right;
		dc->FillSolidRect(&r, RGB(0xCC, 0xCC, 0xCC));	// fast fill with grey
	}
	else
		dc->ExtTextOut(0, 0, ETO_OPAQUE, &r, NULL, 0, NULL);	// fast fill with black

	if ((statistic.partTraffic != NULL) && (statistic.partTraffic[part] != 0))
	{
		uint64	qwStart = static_cast<uint64>(part) * PARTSIZE;
		double	bpp = (double)ps / use;

		//--- traffigram? ---
		if(m_trafficgram)
			TraffiGram(dc, rect, statistic, use, bpp, qwStart);
		else	//	old boring bar style :)
		{
			COLORREF	colr;
			CPen	*pOldPen, pen;
			bool	bHidden = !statistic.fileParent->IsPartShared(part);
			uint32	t;
			double	dTmp, dInvBpp = 1.0 / bpp;

			//--- draw alltime parttraffic bar? ---
			t = statistic.fileParent->GetPartTraffic(part);
			if (t || bHidden)
			{
				r.top = 0;
				r.bottom = m_display_atpte;
				r.left = rect->left;
				r.right = rect->left+use;
				colr = (GetTrafficColor)(static_cast<double>(t) / ps);
				dc->FillSolidRect(&r, GrayIt(bHidden, colr));
				r.bottom = rect->bottom;
			}

			if (m_display_atbte)	//	Draw alltime blocktraffic bar?
			{
				for(int x = 0; x < use; x++)
				{
					dTmp = x * bpp;
					t = statistic.fileParent->GetTrafficBlock(qwStart + static_cast<uint64>(dTmp), qwStart + static_cast<uint64>(dTmp + bpp));
					if (t || bHidden)
					{
						colr = (GetTrafficColor)(t * dInvBpp);
						pen.CreatePen(PS_SOLID, 0, GrayIt(bHidden, colr));
						pOldPen = dc->SelectObject(&pen);
						dc->MoveTo(x, m_display_atbts);
						dc->LineTo(x, m_display_atbte);
						dc->SelectObject(pOldPen);	// set previous object to make pen pointer always correct in GDI object
						pen.DeleteObject();
					}

					if (m_display_sbte)	//	Draw session blocktraffic bar?
					{
						t = statistic.fileParent->GetTrafficBlock(qwStart + static_cast<uint64>(dTmp), qwStart + static_cast<uint64>(dTmp + bpp), true);
						if (t || bHidden)
						{
							colr = (GetTrafficColor)(t * dInvBpp);
							pen.CreatePen(PS_SOLID, 0, GrayIt(bHidden, colr));
							pOldPen = dc->SelectObject(&pen);
							dc->MoveTo(x, m_display_sbts);
							dc->LineTo(x, m_display_sbte);
							dc->SelectObject(pOldPen);	// set previous object to make pen pointer always correct in GDI object
							pen.DeleteObject();
						}
					}
				}
			}
		}
	}
	dc->SetBkColor(crOldBckColor);	// restore previuos background color

	return true;

	EMULE_CATCH

	return false;
}

void CSharedFilesCtrl::OnDoubleClick(NMHDR* pNMHDR, LRESULT* pResult)
{
	EMULE_TRY

	NMITEMACTIVATE *i = (NMITEMACTIVATE*)pNMHDR;
	unsigned	uiParts;

	*pResult = 0;

	if(i->iItem == -1)
		return;

	//--- if shift+dblclk hide all no traffic parts ---
	bool	onlyWithTraffic = (i->uKeyFlags & LVKF_SHIFT) != 0;
	bool	onlyWithSessionTraffic = ((i->uKeyFlags & (LVKF_SHIFT | LVKF_CONTROL)) == (LVKF_SHIFT | LVKF_CONTROL));

	//--- get data from double clicked item ---
	sfl_itemdata	*itemdataParent = (sfl_itemdata*)GetItemData(i->iItem);
	CKnownFile		*file = itemdataParent->knownFile;

	//--- is it a file? ---
	if (itemdataParent->isFile == false)
	{
		switch(i->iSubItem)
		{
			case SFLCOL_PRIORITY:
			//	No blocking and hiding for partfiles
				if(file->IsPartFile())
					break;

				if (file->IsPartShared(itemdataParent->part))
					file->UnsharePart(itemdataParent->part);
				else
					file->SharePart(itemdataParent->part);

				UpdateItem(file, false);
				break;
		}
		return;
	}

	//--- toggle open ---
	itemdataParent->isOpen = !itemdataParent->isOpen;

	//--- is this file already open? ---
	//!!! ATTN I toggled isOpen already... you will not understand why I did this :) ---
	if (!itemdataParent->isOpen)
	{
		if ((uiParts = itemdataParent->parts) != 0)
		{
			SetRedraw(false);

			do	//--- delete all part-childs ---
			{
				sfl_itemdata *itemdata = (sfl_itemdata*)GetItemData(i->iItem + 1);
				if (itemdata->isFile)
					break;
				DeleteItem(i->iItem + 1);
				delete itemdata;
			} while (--uiParts != 0);

			SetRedraw(true);

			itemdataParent->parts = 0;
		//	For the consecutive request of the special expand update the part list with new information
			if (onlyWithTraffic && g_App.m_pPrefs->DoUsePT())
				itemdataParent->isOpen = true;
		}
	}
	if (itemdataParent->isOpen)	//--- it is not open ---
	{
		if (file->GetPartCount() > 1)
		{
			CString	buffer;

			SetRedraw(false);

			uiParts = 0;
			for(uint16 part = 0; part < file->GetPartCount(); part++)
			{
				//--- no traffic items? ---
				if(onlyWithTraffic && file->GetPartTraffic(part, onlyWithSessionTraffic) == 0)
					continue;

				uiParts++;

				sfl_itemdata	*itemdata = new sfl_itemdata;
				itemdata->isFile = false;
				itemdata->isOpen = false;
				itemdata->knownFile = file;
				itemdata->part = part;
				itemdata->parts = 0;

				buffer.Format(_T("%u"), part);
				InsertItem(LVIF_TEXT|LVIF_PARAM, i->iItem + uiParts, buffer, 0, 0, 0, (LPARAM)itemdata);
			}

			itemdataParent->parts = static_cast<uint16>(uiParts);

			//--- no parts added? then we can close it ---
			if (uiParts == 0)
				itemdataParent->isOpen = false;

			//--- ok, that's why I toggled the isOpen before :) ---
			UpdateFile(file, i->iItem);

			SetRedraw(true);
		}
	}

	EMULE_CATCH
}

void CSharedFilesCtrl::OnNMClick(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR);
	EMULE_TRY

	*pResult = 0;

	POSITION		posSelClient = GetFirstSelectedItemPosition();

	if (posSelClient == NULL)
		return;

	int				iItemIndex = GetNextSelectedItem(posSelClient);
	sfl_itemdata	*pItemDataParent = (sfl_itemdata*)GetItemData(iItemIndex);

	if (pItemDataParent == NULL)
		return;

	CKnownFile		*pKnownFile = pItemDataParent->knownFile;

	if (pKnownFile == NULL)
		return;

	g_App.m_pMDlg->m_wndSharedFiles.ShowDetails(pKnownFile);

	if (g_App.m_pPrefs->ShowRatingIcons())
	{
		DWORD		dwPos = GetMessagePos();
		CPoint		pt((int)(short)LOWORD(dwPos), (int)(short)HIWORD(dwPos));
		CRect		rRect;

		ScreenToClient(&pt);
		GetItemRect(iItemIndex, &rRect, LVIR_BOUNDS);
		if (rRect.PtInRect(pt))
		{
			if (g_App.m_pPrefs->ShowFileTypeIcon())
				rRect.left += 19;

			CRect		rTestedArea(rRect.left + 3, rRect.top + 2, rRect.left + 11, rRect.top + 16);

			if (rTestedArea.PtInRect(pt))
			{
				CCommentDialog dialog(pKnownFile);

				if (dialog.DoModal() == IDOK)
					UpdateItem(pKnownFile, false);	// Update file rating icon
			}
		}
	}

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSharedFilesCtrl::OnNMDividerDoubleClick(NMHEADER *pHeader)
{
	int		iWidth, iColumn = pHeader->iItem;

	SetRedraw(false);
	CMuleListCtrl::OnNMDividerDoubleClick(pHeader);
	if ((iColumn == SFLCOL_FILENAME) && (g_App.m_pPrefs->ShowRatingIcons() || g_App.m_pPrefs->ShowFileTypeIcon()))
	{
	//	Base class sets max width for a label, adjusting according to used icons
		iWidth = GetColumnWidth(iColumn);
		if (g_App.m_pPrefs->ShowFileTypeIcon())
			iWidth += 19;
		if (g_App.m_pPrefs->ShowRatingIcons())
			iWidth += 10;
		SetColumnWidth(iColumn, iWidth);
	}
	SetRedraw(true);
}

static COLORREF GetTrafficColor0(double f)	/// rainbow (exp)
{
	//--- COLORING MODE 1 --- RAINBOW ---
	//--- 0..1   black to red ---
	if(f<1)
		return RGB((BYTE)(255*f), 0, 0);

	//--- 1..3   red to yellow ---
	if(f<3)
		return RGB(255, (byte)(255*(f-1)/2.0), 0);

	//--- 3..6   yellow to green ---
	if(f<6)
		return RGB((byte)(255*((6-f)/3.0)), 255, 0);

	//--- 6..10   green to cyan ---
	if(f<10)
		return RGB(0, 255, (byte)(255*((f-6)/4.0)));

	//--- 10..15   cyan to blue ---
	if(f<15)
		return RGB(0, (byte)(255*((15-f)/5.0)), 255);

	//--- 15..21   blue to pink ---
	if(f<21)
		return RGB((byte)(255*((f-15)/6.0)), 0, 255);

	//--- 21..28   pink to white ---
	if(f<28)
		return RGB(255, (byte)(255*((28-f)/7.0)), 255);

	return RGB(255, 255, 255);
}

static COLORREF GetTrafficColor1(double f)	/// rainbow (lin)
{
	//--- COLORING MODE 1 --- RAINBOW ---
	//--- 0..1   black to red ---
	if(f<1)
		return RGB((BYTE)(255*f), 0, 0);

	//--- 1..2   red to yellow ---
	if(f<2)
		return RGB(255, (byte)(255*(f-1)), 0);

	//--- 2..3   yellow to green ---
	if(f<3)
		return RGB((byte)(255*((3-f))), 255, 0);

	//--- 3..4   green to cyan ---
	if(f<4)
		return RGB(0, 255, (byte)(255*((f-3))));

	//--- 4..5   cyan to blue ---
	if(f<5)
		return RGB(0, (byte)(255*((5-f))), 255);

	//--- 5..6   blue to pink ---
	if(f<6)
		return RGB((byte)(255*((f-5))), 0, 255);

	//--- 6..7   pink to white ---
	if(f<7)
		return RGB(255, (byte)(255*((7-f))), 255);

	return RGB(255, 255, 255);
}

static COLORREF GetTrafficColor2(double f)	/// blue
{
	//--- COLORING MODE 2 --- like in download ---
	return RGB(0, (210-(22*(f-1)) < 0)? 0:210-(22*(f-1)), 255);
}

static COLORREF GetTrafficColor3(double f)	/// pink
{
	//--- girlie mode ---
	return RGB(255, 0, (210-(22*(f-1)) < 0)? 0:210-(22*(f-1)));
}

void CSharedFilesCtrl::SetColoring(byte mode)
{
	switch (mode)
	{
		case 0:
		default:
			GetTrafficColor = GetTrafficColor0;
			break;

		case 1:
			GetTrafficColor = GetTrafficColor1;
			break;

		case 2:
			GetTrafficColor = GetTrafficColor2;
			break;

		case 3:
			GetTrafficColor = GetTrafficColor3;
			break;
	}
}

void CSharedFilesCtrl::SetDisplay(byte mode, bool redraw)
{
	EMULE_TRY

	m_display=mode;

	//--- should be 17 pixel high, i hope that never changes, but i try to save cpu where i can ---

	switch(m_display)
	{
	case 1:
		m_display_atpte	= 4;
		m_display_atbts	= 5;
		m_display_atbte	= 16;
		m_display_sbts	= 0;
		m_display_sbte	= 0;
		m_trafficgram	= false;
		break;

	case 2:
		m_display_atpte	= 4;
		m_display_atbts	= 5;
		m_display_atbte	= 11;
		m_display_sbts	= 12;
		m_display_sbte	= 16;
		m_trafficgram	= false;
		break;

	case 3:	// traffigram
		m_trafficgram=true;
		break;

	case 0:
	default:
		m_display_atpte	= 16;
		m_display_atbts	= 0;
		m_display_atbte	= 0;
		m_display_sbts	= 0;
		m_display_sbte	= 0;

		m_trafficgram	= false;
	}

	if(redraw)
		RedrawItems(0, GetItemCount());

	EMULE_CATCH
}

void CSharedFilesCtrl::TraffiGram(CDC* dc, RECT* rect, const CFileStatistic& statistic, int use, double &bpp, uint64 qwStart)
{
	EMULE_TRY

	std::vector<uint32>	adwBlocks(use);	// Cache traffic block statistics
	uint32	t, tt = 0;
	double	dTmp;

	for (int x = 0; x < use; x++)	//	Find highest value
	{
		dTmp = x * bpp;
		t = statistic.fileParent->GetTrafficBlock( qwStart + static_cast<uint64>(dTmp),
			qwStart + static_cast<uint64>(dTmp + bpp) );
		adwBlocks[x] = t;
		tt = max(tt, t);
	}

	int h=rect->bottom-rect->top+1;	// height
	int	lh=0;		// last height
	int	ch=0;		// current height
	uint32	lt=0;	// last traffic
	uint32	tph=tt/h;	// traffic per height pixel
	double	dInvBpp = 1.0 / bpp;
	double	dHdivTT = static_cast<double>(h) / static_cast<double>(tt);

	for (int x = 0; x < use; x++)
	{
		t = adwBlocks[x];
		ch = h - static_cast<int>(dHdivTT * static_cast<double>(t) + 0.5);
		if(t)
			dc->SetPixel(x, ch, (GetTrafficColor)(t * dInvBpp));

		//--- fill space between last and now ---
		if(x && lh!=ch)
		{
			int	d = (lh > ch) ? -1 : 1;
			int	iLmt = abs(lh - ch) / 2 + 1;

			for (int i = 1; i < iLmt; i++)
			{
				dc->SetPixel(x-1,	lh+i*d, (GetTrafficColor)((tt - tph * (lh+i*d)) * dInvBpp));
				dc->SetPixel(x,		ch-i*d, (GetTrafficColor)((tt - tph * (ch-i*d)) * dInvBpp));
			}
		}
		lh=ch;
		lt=t;
	}

	EMULE_CATCH
}

void CSharedFilesCtrl::ShowFilesCount()
{
	CString	strCounter;
	uint32	dwCnt;

	if (!m_allYaKnow)
	{
		GetResString(&strCounter, IDS_SHAREDFILES);
		if ((dwCnt = g_App.m_pSharedFilesList->GetWaitingForHashCount()) != 0)
			strCounter.AppendFormat(GetResString(IDS_STILLTOHASH), GetItemCount(), dwCnt);
		else
			strCounter.AppendFormat(_T(" (%u)"), GetItemCount());
	}
	else
		strCounter.Format(_T("%s (%u)"), GetResString(IDS_KNOWNFILES), GetItemCount());
	g_App.m_pMDlg->m_wndSharedFiles.SetDlgItemText(IDC_TRAFFIC_TEXT, strCounter);
}

double CSharedFilesCtrl::CompleteSourcesCmpValue(CKnownFile* item, bool second)
{
	uint16 nCountLo, nCountHi;
	bool bPartFile= item->IsPartFile();

	if (bPartFile)
		((CPartFile*)item)->GetCompleteSourcesRange(&nCountLo, &nCountHi);
	else
		item->GetCompleteSourcesRange(&nCountLo, &nCountHi);

	return ((nCountLo == 0) ? ((nCountHi == 0) ? ((bPartFile) ? 2.0 : 0.0) : (2.0 - (1.0 / static_cast<double>(nCountHi)))) : (second) ? static_cast<double>(nCountHi) + 3.0 - (1.0 / static_cast<double>(nCountLo)) : static_cast<double>(nCountLo) + 3.0 - (1.0 / static_cast<double>(nCountHi)));
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSharedFilesCtrl::OnGetDispInfo(NMHDR *pNMHDR, LRESULT *pResult)
{
	EMULE_TRY
	NMLVDISPINFO *pDispInfo = reinterpret_cast<NMLVDISPINFO*>(pNMHDR);

	if (g_App.m_pMDlg->IsRunning())
	{
		// Although we have an owner drawn listview control we store the text for the primary item in the listview, to be
		// capable of quick searching those items via the keyboard. Because our listview items may change their contents,
		// we do this via a text callback function. The listview control will send us the LVN_DISPINFO notification if
		// it needs to know the contents of the primary item.
		//
		// But, the listview control sends this notification all the time, even if we do not search for an item. At least
		// this notification is only sent for the visible items and not for all items in the list. Though, because this
		// function is invoked *very* often, no *NOT* put any time consuming code here in.

		if (pDispInfo->item.mask & (LVIF_TEXT | LVIF_PARAM))
		{
			sfl_itemdata* pData = reinterpret_cast<sfl_itemdata*>(pDispInfo->item.lParam);
			if(pData)
			{
				const CKnownFile* pFile = pData->knownFile;
				if (pFile != NULL)
				{
					switch (pDispInfo->item.iSubItem)
					{
						case SFLCOL_FILENAME:
							if (pDispInfo->item.cchTextMax > 0)
							{
								int		iSz = pDispInfo->item.cchTextMax;
								TCHAR	*pcBuf = pDispInfo->item.pszText;

								if (!m_allYaKnow && !pFile->GetPublishedED2K())
								{
								//	Mark shared files which should be published on the server
									*pcBuf++ = _T('*');
									iSz--;
								}
								_tcsncpy(pcBuf, pFile->GetFileName(), iSz);
								pDispInfo->item.pszText[pDispInfo->item.cchTextMax-1] = _T('\0');
							}
							break;
						default:
							// shouldn't happen
							pDispInfo->item.pszText[0] = _T('\0');
							break;
					}
				}
			}
		}
	}
	*pResult = 0;
	EMULE_CATCH
}

BOOL CSharedFilesCtrl::PreTranslateMessage(MSG *pMsg)
{
	if ((pMsg->message == WM_KEYDOWN) || (pMsg->message == WM_SYSKEYDOWN))
	{
		int iMessage = 0;
		POSITION posSelClient = GetFirstSelectedItemPosition();

		if (posSelClient != NULL)
		{
			bool	bJustOne = (GetSelectedCount() == 1);
			short	nCode = GetCodeFromPressedKeys(pMsg);

			if (nCode == g_App.m_pPrefs->GetShortcutCode(SCUT_FILE_OPENDIR))
			{
				sfl_itemdata *pItemData = reinterpret_cast<sfl_itemdata*>(GetItemData(GetNextSelectedItem(posSelClient)));

				if (!pItemData->knownFile->IsPartFile() && bJustOne)
					iMessage = MP_OPENFOLDER;
			}
			else if (nCode == g_App.m_pPrefs->GetShortcutCode(SCUT_FILE_EDITCOMMENTS))
			{
				if (bJustOne)
					iMessage = MP_CMT;
			}
			else if (nCode == g_App.m_pPrefs->GetShortcutCode(SCUT_LINK))
				iMessage = MP_GETED2KLINK;
			else if (nCode == g_App.m_pPrefs->GetShortcutCode(SCUT_LINK_HTML))
				iMessage = MP_GETHTMLED2KLINK;
			else if (nCode == g_App.m_pPrefs->GetShortcutCode(SCUT_LINK_SOURCE))
				iMessage = MP_GETSOURCEED2KLINK;
			else if (nCode == g_App.m_pPrefs->GetShortcutCode(SCUT_LINK_HASH))
				iMessage = MP_GETHASH;

			if (iMessage > 0)
			{
				PostMessage(WM_COMMAND, iMessage);
				return TRUE;
			}
		}
	}
	else if (pMsg->message == WM_MBUTTONUP)
	{
		POINT point;

		::GetCursorPos(&point);

		CPoint p = point;

		ScreenToClient(&p);

		int it = HitTest(p);

		if (it == -1)
			return false;

		sfl_itemdata   *itemdata = reinterpret_cast<sfl_itemdata*>(GetItemData(it));
		CKnownFile	   *pFile = itemdata->knownFile;

		if (pFile != NULL)
		{
			CCommentDialog dialog(pFile);

			if ((dialog.DoModal() == IDOK) && g_App.m_pPrefs->ShowRatingIcons())
				UpdateItem(pFile, false);	// Update file rating icon
		}
		return true;
	}

	return CMuleListCtrl::PreTranslateMessage(pMsg);
}
@


1.226
log
@As shared files list uses quite some CPU resources, use faster hash to string conversion.
@
text
@d332 4
a335 3
	if(itemdataParent->isOpen)
	{
	//	Update all parts
d338 1
a338 1
		for (uint16 part = 0; part < itemdataParent->parts; part++)
d360 8
d402 1
a402 1
		}
d1831 4
a1834 1
	NMITEMACTIVATE *i=(NMITEMACTIVATE*)pNMHDR;
d1853 1
a1853 1
			//	No blocking and hidding for partfiles
d1869 1
a1869 1
	itemdataParent->isOpen=!itemdataParent->isOpen;
d1872 2
a1873 2
	//!!! ATTN i toggled isOpen already... you will not understand why I did this :) ---
	if(itemdataParent->isOpen==false)
d1875 12
a1886 1
		SetRedraw(false);
d1888 6
a1893 8
		//--- delete all part-childs ---
		for(uint16 part = 0; part < itemdataParent->parts; part++)
		{
			sfl_itemdata *itemdata = (sfl_itemdata*)GetItemData(i->iItem + 1);
			if (itemdata->isFile)
				break;
			DeleteItem(i->iItem + 1);
			delete itemdata;
a1894 2

		SetRedraw(true);
d1896 1
a1896 2
	//--- it is not open ---
	else
d1898 1
a1898 1
		if(g_App.m_pPrefs->DoUsePT() && file->GetPartCount()>1)
a1900 1
			uint16	parts=0;
d1904 2
a1905 1
			for(uint16 part=0; part<file->GetPartCount(); part++)
d1907 2
a1908 2
				//--- no no traffic items? ---
				if(onlyWithTraffic && file->GetPartTraffic(part, onlyWithSessionTraffic)==0)
d1911 1
a1911 1
				parts++;
d1921 1
a1921 1
				InsertItem(LVIF_TEXT|LVIF_PARAM, i->iItem+parts, buffer, 0, 0, 0, (LPARAM)itemdata);
d1924 1
a1924 1
			itemdataParent->parts=parts;
d1927 2
a1928 2
			if(parts==0)
				itemdataParent->isOpen=false;
d1930 1
a1930 1
			//--- ok, thats why i toggled the isOpen before :) ---
a1936 2
	*pResult=0;

@


1.225
log
@Save sorting directions for all GUI lists; Unified list sort initialization and click processing;
Simplified list arrow configuration interface; Unified list column definitions.
@
text
@d258 2
d272 1
a272 1
	SetItemText(itemnr, SFLCOL_FILEHASH, HashToString(pSharedFile->GetFileHash()));
@


1.224
log
@Fixed auto-resize for the first column of the shared files and search lists;
Slightly more efficient GetColumnWidth to speed up list drawing.
@
text
@a50 9
static const int s_aiDoubleLevelCols[][2] = {
	{ SFL_COLUMN_REQUESTS,		SFL_ALT_REQUESTS },
	{ SFL_COLUMN_ACCEPTED,		SFL_ALT_ACCEPTED },
	{ SFL_COLUMN_TRANSFERRED,	SFL_ALT_TRANSFERRED },
	{ SFL_COLUMN_PARTTRAFFIC,	SFL_ALT_PARTTRAFFIC },
	{ SFL_COLUMN_UPLOADS,		SFL_ALT_UPLOADS },
	{ SFL_COLUMN_COMPLETESRC,	SFL_ALT_COMPLETESRC }
};

a63 10
	memset(&m_bSortAscending, true, sizeof(m_bSortAscending));
	m_bSortAscending[SFL_COLUMN_FILESIZE] = false;
	m_bSortAscending[SFL_COLUMN_PRIORITY] = false;
	m_bSortAscending[SFL_COLUMN_REQUESTS] = false;
	m_bSortAscending[SFL_COLUMN_ACCEPTED] = false;
	m_bSortAscending[SFL_COLUMN_TRANSFERRED] = false;
	m_bSortAscending[SFL_COLUMN_PARTTRAFFIC] = false;
	m_bSortAscending[SFL_COLUMN_UPLOADS] = false;
	m_bSortAscending[SFL_COLUMN_COMPLETESRC] = false;

d81 4
d97 13
a109 13
		{ LVCFMT_LEFT,  250 },	//SFL_COLUMN_FILENAME
		{ LVCFMT_RIGHT, 100 },	//SFL_COLUMN_FILESIZE
		{ LVCFMT_LEFT,   50 },	//SFL_COLUMN_TYPE
		{ LVCFMT_LEFT,   70 },	//SFL_COLUMN_PRIORITY
		{ LVCFMT_LEFT,  100 },	//SFL_COLUMN_PERMISSION
		{ LVCFMT_LEFT,  220 },	//SFL_COLUMN_FILEID
		{ LVCFMT_LEFT,  100 },	//SFL_COLUMN_REQUESTS
		{ LVCFMT_LEFT,  100 },	//SFL_COLUMN_ACCEPTED
		{ LVCFMT_LEFT,  120 },	//SFL_COLUMN_TRANSFERRED
		{ LVCFMT_LEFT,  120 },	//SFL_COLUMN_PARTTRAFFIC
		{ LVCFMT_LEFT,  120 },	//SFL_COLUMN_UPLOADS
		{ LVCFMT_LEFT,  100 },	//SFL_COLUMN_COMPLETESRC
		{ LVCFMT_LEFT,  150 }	//SFL_COLUMN_FOLDER
d135 2
a136 1

a137 1
	{
a138 1
	}
d140 1
a140 7
	{
		uint32		dwSortCode = g_App.m_pPrefs->GetColumnSortItem(CPreferences::TABLE_SHARED);

		dwSortCode |= g_App.m_pPrefs->GetColumnSortAscending(CPreferences::TABLE_SHARED) ? MLC_SORTASC : MLC_SORTDESC;

		SortInit(dwSortCode);
	}
a144 32
void CSharedFilesCtrl::SortInit(int iSortCode)
{
	int		iSortColumn = (iSortCode & MLC_COLUMNMASK);			// The sort column
	bool	bSortAscending = (iSortCode & MLC_SORTDESC) == 0;	// The sort order
	int		iSortAltFlag = (iSortCode & MLC_SORTALT);			// The alternate sort
	unsigned	ui;

	for (ui = 0; ui < ARRSIZE(s_aiDoubleLevelCols); ui++)
	{
		if (iSortColumn == s_aiDoubleLevelCols[ui][0])
			break;
	}
	if (ui == ARRSIZE(s_aiDoubleLevelCols))
		iSortAltFlag = 0;

	m_bSortAscending[iSortColumn] = bSortAscending;

	for (ui = 0; ui < ARRSIZE(s_aiDoubleLevelCols); ui++)
	{
		if (iSortColumn == s_aiDoubleLevelCols[ui][0])
		{
			m_bSortAscending[s_aiDoubleLevelCols[ui][1]] = (iSortAltFlag == 0);
			break;
		}
	}
	if (iSortAltFlag == 0)
		SetSortArrow(iSortColumn, bSortAscending);
	else
		SetSortArrow(iSortColumn, (bSortAscending) ? arrowDoubleUp : arrowDoubleDown);
	SortItems(SortProc, iSortCode);
}

d149 13
a161 13
		IDS_DL_FILENAME,	//SFL_COLUMN_FILENAME
		IDS_DL_SIZE,		//SFL_COLUMN_FILESIZE
		IDS_TYPE,			//SFL_COLUMN_TYPE
		IDS_PRIORITY,		//SFL_COLUMN_PRIORITY
		IDS_PERMISSION,		//SFL_COLUMN_PERMISSION
		IDS_FILEHASH,		//SFL_COLUMN_FILEID
		IDS_SF_REQUESTS,	//SFL_COLUMN_REQUESTS
		IDS_SF_ACCEPTS,		//SFL_COLUMN_ACCEPTED
		IDS_SF_TRANSFERRED,	//SFL_COLUMN_TRANSFERRED
		IDS_SF_PARTTRAFFIC,	//SFL_COLUMN_PARTTRAFFIC
		IDS_SF_COLUPLOADS,	//SFL_COLUMN_UPLOADS
		IDS_SF_COMPLETESRC,	//SFL_COLUMN_COMPLETESRC
		IDS_SF_FOLDER		//SFL_COLUMN_FOLDER
d266 5
a270 5
	SetItemText(itemnr, SFL_COLUMN_FILESIZE, CastItoXBytes(pSharedFile->GetFileSize()));
	SetItemText(itemnr, SFL_COLUMN_TYPE, pSharedFile->GetFileTypeString());
	SetItemText(itemnr, SFL_COLUMN_PRIORITY, pSharedFile->GetKnownFilePriorityString());
	SetItemText(itemnr, SFL_COLUMN_PERMISSION, pSharedFile->GetPermissionString());
	SetItemText(itemnr, SFL_COLUMN_FILEID, HashToString(pSharedFile->GetFileHash()));
d287 1
a287 1
	SetItemText(itemnr, SFL_COLUMN_REQUESTS, pcTmp);
d298 1
a298 1
	SetItemText(itemnr, SFL_COLUMN_ACCEPTED, pcTmp);
d309 1
a309 1
	SetItemText(itemnr, SFL_COLUMN_TRANSFERRED, pcTmp);
d324 1
a324 1
	SetItemText(itemnr, SFL_COLUMN_UPLOADS, pcTmp);
d326 1
a326 1
	SetItemText(itemnr, SFL_COLUMN_FOLDER, pSharedFile->GetPath());
d348 1
a348 1
			SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, pcTmp);
d355 1
a355 1
			SetItemText(iSubItemIdx, SFL_COLUMN_FILESIZE, pcTmp);
d367 1
a367 1
			SetItemText(iSubItemIdx, SFL_COLUMN_ACCEPTED, pcTmp);
d379 1
a379 1
			SetItemText(iSubItemIdx, SFL_COLUMN_TRANSFERRED, pcTmp);
d390 1
a390 1
			SetItemText(iSubItemIdx, SFL_COLUMN_UPLOADS, pcTmp);
d415 1
a415 1
	SetItemText(itemnr, SFL_COLUMN_COMPLETESRC, strBuffer);
d945 1
a945 1
					SetItemText(iSel, SFL_COLUMN_PRIORITY, file->GetKnownFilePriorityString());
d972 1
a972 1
									SetItemText(iSel, SFL_COLUMN_PRIORITY, _T(""));
d979 1
a979 1
									SetItemText(iSel, SFL_COLUMN_PRIORITY, strBuffer);
d1020 1
a1020 1
					SetItemText(iSel, SFL_COLUMN_PERMISSION, file->GetPermissionString());
d1053 1
a1053 1
							SetItemText(iSel, SFL_COLUMN_PRIORITY, file->GetKnownFilePriorityString());
d1070 1
a1070 1
							SetItemText(iSel, SFL_COLUMN_PRIORITY, file->GetKnownFilePriorityString());
a1093 24
	NM_LISTVIEW	*pNMListView = reinterpret_cast<NM_LISTVIEW*>(pNMHDR);
	int			iFlags = 0, iSubItem = pNMListView->iSubItem;
	bool		bSortOrder = m_bSortAscending[iSubItem];

//	For the double level columns, toggle the Alt column flag when the arrow is facing up
	for (unsigned ui = 0; ui < ARRSIZE(s_aiDoubleLevelCols); ui++)
	{
		if (iSubItem == s_aiDoubleLevelCols[ui][0])
		{
			if ((static_cast<int>(m_dwParamSort & MLC_COLUMNMASK) == iSubItem) && bSortOrder)
				m_bSortAscending[s_aiDoubleLevelCols[ui][1]] = !m_bSortAscending[s_aiDoubleLevelCols[ui][1]];
			iFlags = m_bSortAscending[s_aiDoubleLevelCols[ui][1]] ? 0 : MLC_SORTALT;
			break;
		}
	}

// Reverse sorting direction for the same column and keep the same if column was changed
	if (static_cast<int>(m_dwParamSort & MLC_COLUMNMASK) == iSubItem)
		m_bSortAscending[iSubItem] = bSortOrder = !bSortOrder;

	if (iFlags == 0)
		SetSortArrow(iSubItem, bSortOrder);
	else
		SetSortArrow(iSubItem, (bSortOrder) ? arrowDoubleUp : arrowDoubleDown);
a1094 1
	SortItems(SortProc, iSubItem | iFlags | ((bSortOrder) ? MLC_SORTASC : MLC_SORTDESC));
d1096 1
a1096 4
	g_App.m_pPrefs->SetColumnSortItem(CPreferences::TABLE_SHARED, iSubItem | iFlags);	// Allow to save alternate criterion
	g_App.m_pPrefs->SetColumnSortAscending(CPreferences::TABLE_SHARED, bSortOrder);

	*pResult = 0;
d1129 1
a1129 1
				case SFL_COLUMN_TRANSFERRED:
d1158 1
a1158 1
				case SFL_COLUMN_ACCEPTED:
d1187 2
a1188 2
				case SFL_COLUMN_PARTTRAFFIC:
				case SFL_COLUMN_UPLOADS:
d1218 1
a1218 1
				case SFL_COLUMN_FILENAME:
d1222 1
a1222 1
				case SFL_COLUMN_FILESIZE:
d1226 1
a1226 1
				case SFL_COLUMN_TYPE:
d1233 1
a1233 1
							iSortColumn = SFL_COLUMN_FILENAME;
d1239 1
a1239 1
				case SFL_COLUMN_PRIORITY:
d1246 1
a1246 1
						iSortColumn = SFL_COLUMN_FILENAME;
d1252 1
a1252 1
				case SFL_COLUMN_PERMISSION:
d1256 1
a1256 1
				case SFL_COLUMN_FILEID:
d1260 1
a1260 1
				case SFL_COLUMN_REQUESTS:
d1270 1
a1270 1
				case SFL_COLUMN_ACCEPTED:
d1280 1
a1280 1
				case SFL_COLUMN_TRANSFERRED:
d1290 1
a1290 1
				case SFL_COLUMN_COMPLETESRC:
d1296 2
a1297 2
				case SFL_COLUMN_PARTTRAFFIC:
				case SFL_COLUMN_UPLOADS:
d1310 1
a1310 1
				case SFL_COLUMN_FOLDER:
d1314 1
a1314 1
						iSortColumn = SFL_COLUMN_FILENAME;
d1434 1
a1434 1
				case SFL_COLUMN_FILENAME:
d1456 10
a1465 10
				case SFL_COLUMN_TYPE:
				case SFL_COLUMN_PRIORITY:
				case SFL_COLUMN_PERMISSION:
				case SFL_COLUMN_FILEID:
				case SFL_COLUMN_REQUESTS:
				case SFL_COLUMN_COMPLETESRC:
				case SFL_COLUMN_ACCEPTED:
				case SFL_COLUMN_TRANSFERRED:
				case SFL_COLUMN_UPLOADS:
				case SFL_COLUMN_FOLDER:
d1469 1
a1469 1
				case SFL_COLUMN_FILESIZE:
d1473 1
a1473 1
				case SFL_COLUMN_PARTTRAFFIC:	//--- part traffic ---
d1533 1
a1533 1
				case SFL_COLUMN_FILENAME:
d1537 6
a1542 6
				case SFL_COLUMN_FILESIZE:
				case SFL_COLUMN_PRIORITY:
				case SFL_COLUMN_ACCEPTED:
				case SFL_COLUMN_TRANSFERRED:
				case SFL_COLUMN_UPLOADS:
				case SFL_COLUMN_COMPLETESRC:
d1546 1
a1546 1
				case SFL_COLUMN_PARTTRAFFIC:	//--- part traffic ---
d1838 1
a1838 1
			case SFL_COLUMN_PRIORITY:
d1981 1
a1981 1
	if ((iColumn == SFL_COLUMN_FILENAME) && (g_App.m_pPrefs->ShowRatingIcons() || g_App.m_pPrefs->ShowFileTypeIcon()))
d2254 1
a2254 1
						case SFL_COLUMN_FILENAME:
@


1.223
log
@Reduced H-file dependency.
@
text
@d1508 1
a1508 1
		cur_rec.right = cur_rec.left + GetColumnWidth(cc);
d2056 19
@


1.222
log
@Some local functions were made static; Removed unrequired checks around delete operators;
Removed incorrect & to obtain function pointers; Formatting.
@
text
@d21 2
@


1.221
log
@Constant replaced with the name.
@
text
@d93 1
a93 2
	if (m_pSCM)
		delete m_pSCM;
d561 1
a561 2
		if (pItem != NULL)
			delete pItem;
d575 2
a576 5
	if (m_pSCM)
	{
		delete m_pSCM;
		m_pSCM = NULL;
	}
d728 1
a728 2
	if (m_pSCM)
	{
a729 1
	}
d1131 2
a1132 3
			if(m_pSCM)
				if(m_pSCM->IsMenuCommand(wParam))
					m_pSCM->InvokeCommand(wParam, file);
d1753 1
a1753 1
				colr = GetTrafficColor(t * dInvBpp);
d1767 1
a1767 1
					colr = GetTrafficColor(t * dInvBpp);
d1781 1
a1781 1
						colr = GetTrafficColor(t * dInvBpp);
d1847 1
a1847 1
				colr = GetTrafficColor(static_cast<double>(t) / ps);
d1860 1
a1860 1
						colr = GetTrafficColor(t * dInvBpp);
d1874 1
a1874 1
							colr = GetTrafficColor(t * dInvBpp);
d2055 80
d2141 1
a2141 1
			GetTrafficColor = &GetTrafficColor0;
d2145 1
a2145 1
			GetTrafficColor = &GetTrafficColor1;
d2149 1
a2149 1
			GetTrafficColor = &GetTrafficColor2;
d2153 1
a2153 1
			GetTrafficColor = &GetTrafficColor3;
d2237 1
a2237 1
			dc->SetPixel(x, ch, GetTrafficColor(t * dInvBpp));
d2247 2
a2248 2
				dc->SetPixel(x-1,	lh+i*d, GetTrafficColor((tt - tph * (lh+i*d)) * dInvBpp));
				dc->SetPixel(x,		ch-i*d, GetTrafficColor((tt - tph * (ch-i*d)) * dInvBpp));
a2257 80
COLORREF GetTrafficColor0(double f)
{
	//--- COLORING MODE 1 --- RAINBOW ---
	//--- 0..1   black to red ---
	if(f<1)
		return RGB((BYTE)(255*f), 0, 0);

	//--- 1..3   red to yellow ---
	if(f<3)
		return RGB(255, (byte)(255*(f-1)/2.0), 0);

	//--- 3..6   yellow to green ---
	if(f<6)
		return RGB((byte)(255*((6-f)/3.0)), 255, 0);

	//--- 6..10   green to cyan ---
	if(f<10)
		return RGB(0, 255, (byte)(255*((f-6)/4.0)));

	//--- 10..15   cyan to blue ---
	if(f<15)
		return RGB(0, (byte)(255*((15-f)/5.0)), 255);

	//--- 15..21   blue to pink ---
	if(f<21)
		return RGB((byte)(255*((f-15)/6.0)), 0, 255);

	//--- 21..28   pink to white ---
	if(f<28)
		return RGB(255, (byte)(255*((28-f)/7.0)), 255);

	return RGB(255, 255, 255);
}

COLORREF GetTrafficColor1(double f)
{
	//--- COLORING MODE 1 --- RAINBOW ---
	//--- 0..1   black to red ---
	if(f<1)
		return RGB((BYTE)(255*f), 0, 0);

	//--- 1..2   red to yellow ---
	if(f<2)
		return RGB(255, (byte)(255*(f-1)), 0);

	//--- 2..3   yellow to green ---
	if(f<3)
		return RGB((byte)(255*((3-f))), 255, 0);

	//--- 3..4   green to cyan ---
	if(f<4)
		return RGB(0, 255, (byte)(255*((f-3))));

	//--- 4..5   cyan to blue ---
	if(f<5)
		return RGB(0, (byte)(255*((5-f))), 255);

	//--- 5..6   blue to pink ---
	if(f<6)
		return RGB((byte)(255*((f-5))), 0, 255);

	//--- 6..7   pink to white ---
	if(f<7)
		return RGB(255, (byte)(255*((7-f))), 255);

	return RGB(255, 255, 255);
}

COLORREF GetTrafficColor2(double f)
{
	//--- COLORING MODE 2 --- like in download ---
	return RGB(0, (210-(22*(f-1)) < 0)? 0:210-(22*(f-1)), 255);
}

COLORREF GetTrafficColor3(double f)
{
	//--- girlie mode ---
	return RGB(255, 0, (210-(22*(f-1)) < 0)? 0:210-(22*(f-1)));
}

@


1.220
log
@Use file extension as the 2nd criteria while sorting by file type (1: file type, 2: extension, 3: file name) {muleteer};
Use file name as the 2nd criteria for shared files sorting by Priority and Folder.
@
text
@d2323 1
a2323 1
						case 0:
@


1.219
log
@rolled back last changes.
@
text
@d1302 1
a1302 1
		switch(iSortColumn)
d1304 9
a1312 3
			case SFL_COLUMN_FILENAME:
				iCompare = knownfile1->CmpFileNames(knownfile2->GetFileName());
				break;
d1314 12
a1325 3
			case SFL_COLUMN_FILESIZE:
				iCompare = CompareInt64(knownfile1->GetFileSize(), knownfile2->GetFileSize());
				break;
d1327 4
a1330 3
			case SFL_COLUMN_TYPE:
				iCompare = knownfile1->CmpFileTypes(knownfile2->GetFileType());
				break;
d1332 7
a1338 5
			case SFL_COLUMN_PRIORITY:
				dwVal1 = m_p2p[knownfile1->GetULPriority()] | (knownfile1->GetJumpstartEnabled() ? 2 : 0) | (knownfile1->IsULAutoPrioritized() ? 1 : 0);
				dwVal2 = m_p2p[knownfile2->GetULPriority()] | (knownfile2->GetJumpstartEnabled() ? 2 : 0) | (knownfile2->IsULAutoPrioritized() ? 1 : 0);
				iCompare = dwVal1 - dwVal2;
				break;
d1340 3
a1342 3
			case SFL_COLUMN_PERMISSION:
				iCompare = knownfile1->GetPermissions() - knownfile2->GetPermissions();
				break;
d1344 3
a1346 3
			case SFL_COLUMN_FILEID:
				iCompare = memcmp(knownfile1->GetFileHash(), knownfile2->GetFileHash(), 16);
				break;
d1348 9
a1356 9
			case SFL_COLUMN_REQUESTS:
				if (iSortAltFlag == 0)
				{
					iCompare = sortcmp(knownfile1->statistic.GetRequests(), knownfile2->statistic.GetRequests());
					if (iCompare != 0)
						break;
				}
				iCompare = sortcmp(knownfile1->statistic.GetAllTimeRequests(), knownfile2->statistic.GetAllTimeRequests());
				break;
d1358 9
a1366 9
			case SFL_COLUMN_ACCEPTED:
				if (iSortAltFlag == 0)
				{
					iCompare = sortcmp(knownfile1->statistic.GetAccepts(), knownfile2->statistic.GetAccepts());
					if (iCompare != 0)
						break;
				}
				iCompare = sortcmp(knownfile1->statistic.GetAllTimeAccepts(), knownfile2->statistic.GetAllTimeAccepts());
				break;
d1368 9
a1376 9
			case SFL_COLUMN_TRANSFERRED:
				if (iSortAltFlag == 0)
				{
					iCompare = sortcmp(knownfile1->statistic.GetTransferred(), knownfile2->statistic.GetTransferred());
					if (iCompare != 0)
						break;
				}
				iCompare = sortcmp(knownfile1->statistic.GetAllTimeTransferred(), knownfile2->statistic.GetAllTimeTransferred());
				break;
d1378 5
a1382 5
			case SFL_COLUMN_COMPLETESRC:
				d1 = CompleteSourcesCmpValue(knownfile1, (iSortAltFlag != 0));
				d2 = CompleteSourcesCmpValue(knownfile2, (iSortAltFlag != 0));
				iCompare = sortcmp(d1, d2);
				break;
d1384 8
a1391 8
			case SFL_COLUMN_PARTTRAFFIC:
			case SFL_COLUMN_UPLOADS:
				if (iSortAltFlag == 0)
				{
					iCompare = sortcmp(knownfile1->statistic.GetCompleteReleases(), knownfile2->statistic.GetCompleteReleases());
					if (iCompare != 0)
						break;
				}
d1393 4
a1396 4
				d1 = (double)knownfile1->statistic.GetAllTimeTransferred() / knownfile1->GetFileSize();
				d2 = (double)knownfile2->statistic.GetAllTimeTransferred() / knownfile2->GetFileSize();
				iCompare = sortcmp(d1, d2);
				break;
d1398 11
a1408 3
			case SFL_COLUMN_FOLDER:
				iCompare = _tcsicmp(knownfile1->GetPath(), knownfile2->GetPath());
				break;
@


1.218
log
@changed the handlig of embedded GUI list header
@
text
@a143 2
	InitHeader();

d221 1
d231 1
a231 1
			m_pHeaderCtrl->SetItem(static_cast<int>(ui), &hdi);
d1472 2
a1473 1
	int iCount = m_pHeaderCtrl->GetItemCount();
d1480 1
a1480 1
		int cc = m_pHeaderCtrl->OrderToIndex(c);
@


1.217
log
@Fixed background color wasn't always restored while drawing part traffic bar.
@
text
@d144 2
a222 1
		CHeaderCtrl	*pHeaderCtrl = GetHeaderCtrl();
d232 1
a232 1
			pHeaderCtrl->SetItem(static_cast<int>(ui), &hdi);
d1473 1
a1473 2
	CHeaderCtrl *pHeaderCtrl = GetHeaderCtrl();
	int iCount = pHeaderCtrl->GetItemCount();
d1480 1
a1480 1
		int cc = pHeaderCtrl->OrderToIndex(c);
@


1.216
log
@GetKnownFilePriorityString() functionality moved to knownfile class.
@
text
@d1805 4
a1808 2
	if(statistic.partTraffic==NULL || statistic.partTraffic[part]==0)
		return true;
d1810 4
a1813 17
	uint64	qwStart = static_cast<uint64>(part) * PARTSIZE;
	double	bpp = (double)ps / use;

	//--- traffigram? ---
	if(m_trafficgram)
		TraffiGram(dc, rect, statistic, use, bpp, qwStart);
	else	//	old boring bar style :)
	{
		COLORREF	colr;
		CPen	*pOldPen, pen;
		bool	bHidden = !statistic.fileParent->IsPartShared(part);
		uint32	t;
		double	dTmp, dInvBpp = 1.0 / bpp;

		//--- draw alltime parttraffic bar? ---
		t = statistic.fileParent->GetPartTraffic(part);
		if (t || bHidden)
d1815 18
a1832 8
			r.top = 0;
			r.bottom = m_display_atpte;
			r.left = rect->left;
			r.right = rect->left+use;
			colr = GetTrafficColor(static_cast<double>(t) / ps);
			dc->FillSolidRect(&r, GrayIt(bHidden, colr));
			r.bottom = rect->bottom;
		}
d1834 1
a1834 3
		if (m_display_atbte)	//	Draw alltime blocktraffic bar?
		{
			for(int x = 0; x < use; x++)
d1836 1
a1836 3
				dTmp = x * bpp;
				t = statistic.fileParent->GetTrafficBlock(qwStart + static_cast<uint64>(dTmp), qwStart + static_cast<uint64>(dTmp + bpp));
				if (t || bHidden)
d1838 2
a1839 12
					colr = GetTrafficColor(t * dInvBpp);
					pen.CreatePen(PS_SOLID, 0, GrayIt(bHidden, colr));
					pOldPen = dc->SelectObject(&pen);
					dc->MoveTo(x, m_display_atbts);
					dc->LineTo(x, m_display_atbte);
					dc->SelectObject(pOldPen);	// set previous object to make pen pointer always correct in GDI object
					pen.DeleteObject();
				}

				if (m_display_sbte)	//	Draw session blocktraffic bar?
				{
					t = statistic.fileParent->GetTrafficBlock(qwStart + static_cast<uint64>(dTmp), qwStart + static_cast<uint64>(dTmp + bpp), true);
d1845 2
a1846 2
						dc->MoveTo(x, m_display_sbts);
						dc->LineTo(x, m_display_sbte);
d1850 15
@


1.215
log
@Suppressed compiler warning.
@
text
@d309 1
a309 1
void CSharedFilesCtrl::UpdateFile(CKnownFile* pSharedFile, uint32 itemnr, bool resort)
d321 1
a321 1
	SetItemText(itemnr, SFL_COLUMN_PRIORITY, GetKnownFilePriorityString(pSharedFile));
d1004 1
a1004 1
					SetItemText(iSel, SFL_COLUMN_PRIORITY, GetKnownFilePriorityString(file));
d1112 1
a1112 1
							SetItemText(iSel, SFL_COLUMN_PRIORITY, GetKnownFilePriorityString(file));
d1129 1
a1129 1
							SetItemText(iSel, SFL_COLUMN_PRIORITY, GetKnownFilePriorityString(file));
@


1.214
log
@Fix priority sorting (thanks Aw3);
Suppressed as much compiler warnings I could.
@
text
@d754 1
a754 1
			bool			bResort = static_cast<bool>(wParam);
a1316 1
			{
d1321 1
a1321 1
			}
@


1.213
log
@Optimized string shortcut representation.
@
text
@a0 3
//--- xrmb:parttraffic ---
//--- there are so many changes in here, maybe its easier to exchange the whole file ---

d46 2
a47 3
//--- static members ---
byte	CSharedFilesCtrl::m_p2p[8];
bool	CSharedFilesCtrl::m_sortParts=false;
d81 6
a86 8
	//--- fast prio 2 prio converter, need because the prios are messed up a little bit ---
	m_p2p[PR_VERYLOW]	= 0;
	m_p2p[PR_LOW]		= 1;
	m_p2p[PR_NORMAL]	= 2;
	m_p2p[PR_HIGH]		= 3;
	m_p2p[PR_RELEASE]	= 4;
	m_p2p[PR_AUTO]		= 5;
	m_p2p[PR_JUMPSTART]	= 6;
d1317 4
a1320 1
				iCompare = m_p2p[knownfile1->GetULPriority()] - m_p2p[knownfile2->GetULPriority()];
d1322 1
a1322 1

d1730 1
a1730 1
			boh = !statistic.fileParent->IsPartShared(dTmp / PARTSZ32);
d1733 1
a1733 1
			t = statistic.fileParent->GetTrafficPart(dTmp, dTmp + bpp);
d1747 1
a1747 1
				t = statistic.fileParent->GetTrafficBlock(dTmp, dTmp + bpp);
d1761 1
a1761 1
					t = statistic.fileParent->GetTrafficBlock(dTmp, dTmp + bpp, true);
d1889 2
a1890 2
	bool	onlyWithTraffic=i->uKeyFlags & LVKF_SHIFT;
	bool	onlyWithSessionTraffic=i->uKeyFlags & LVKF_SHIFT && i->uKeyFlags & LVKF_CONTROL;
@


1.212
log
@removed the set of ODA_SELECT action on item drawing
@
text
@d675 1
a675 1
					MP_OPENFOLDER, GetResString(IDS_OPENFOLDER) + GetStringFromShortcutCode(SCUT_FILE_OPENDIR, SSP_TAB_PREFIX) );
d684 1
a684 1
				MP_CMT, GetResString(IDS_EDIT_FILE_COMMENT) + GetStringFromShortcutCode(SCUT_FILE_EDITCOMMENTS, SSP_TAB_PREFIX) );
d725 5
a729 5
			ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1) + GetStringFromShortcutCode(SCUT_LINK, SSP_TAB_PREFIX));
			ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2) + GetStringFromShortcutCode(SCUT_LINK_HTML, SSP_TAB_PREFIX));
			ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK) + GetStringFromShortcutCode(SCUT_LINK_SOURCE, SSP_TAB_PREFIX));
			ed2kMenu.AppendMenu(MF_STRING, MP_GETHASH, GetResString(IDS_COPYHASH) + GetStringFromShortcutCode(SCUT_LINK_HASH, SSP_TAB_PREFIX));
			SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP|MF_ENABLED,(UINT_PTR)ed2kMenu.m_hMenu, GetResString(IDS_ED2KLINKFIX));
@


1.211
log
@Suppressed level 4 warnings; Formatting [Aw3].
@
text
@d1446 1
a1446 1
	if((lpDrawItemStruct->itemAction | ODA_SELECT) && (lpDrawItemStruct->itemState & ODS_SELECTED))
@


1.210
log
@Optimized DrawText -- no need recalculate string length.
@
text
@d147 1
a147 1
	for (unsigned ui = 0; ui < ELEMENT_COUNT(s_auColHdr); ui++)
d150 1
a150 1
	m_imageList.Create(16, 16, g_App.m_iDfltImageListColorFlags | ILC_MASK, ELEMENT_COUNT(s_auIconResID), 0);
d152 1
a152 1
	FillImgLstWith16x16Icons(&m_imageList, s_auIconResID, ELEMENT_COUNT(s_auIconResID));
d179 1
a179 1
	for (ui = 0; ui < ELEMENT_COUNT(s_aiDoubleLevelCols); ui++)
d184 1
a184 1
	if (ui == ELEMENT_COUNT(s_aiDoubleLevelCols))
d189 1
a189 1
	for (ui = 0; ui < ELEMENT_COUNT(s_aiDoubleLevelCols); ui++)
d233 1
a233 1
		for (unsigned ui = 0; ui < ELEMENT_COUNT(s_auResTbl); ui++)
d578 1
a578 1
void CSharedFilesCtrl::OnContextMenu(CWnd* pWnd, CPoint point)
d580 1
d781 1
d1165 1
a1165 1
	for (unsigned ui = 0; ui < ELEMENT_COUNT(s_aiDoubleLevelCols); ui++)
d1169 1
a1169 1
			if (((m_dwParamSort & MLC_COLUMNMASK) == iSubItem) && bSortOrder)
d1177 1
a1177 1
	if ((m_dwParamSort & MLC_COLUMNMASK) == iSubItem)
d1669 1
d1673 1
a1673 1
		dc->FrameRect(&rOutline, &CBrush((GetFocus() == this) ? m_crFocusLine : m_crNoFocusLine));
d1990 1
@


1.209
log
@fix multimonitor control positionning and mouse click handling
@
text
@d1530 1
a1530 1
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, DT_LEFT | iCalcFlag);
d1534 1
a1534 1
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, DT_RIGHT | iCalcFlag);
d1598 1
a1598 1
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, DT_RIGHT | iCalcFlag);
d1607 1
a1607 1
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, /*DT_RIGHT*/DT_LEFT | iCalcFlag);
@


1.208
log
@Faster shared list clean-up (on closure and while switching between known and shared lists).
@
text
@d2012 1
a2012 1
		CPoint		pt(LOWORD(dwPos), HIWORD(dwPos));
@


1.207
log
@Fixed Shared Files List slow down while publishing a lot of files {Zom};
Significantly faster list item update (especially for the long list).
@
text
@d558 4
a561 1
	BOOL bResult = FALSE;
d565 1
a565 2
	sfl_itemdata *itemdata;
	for (int i = GetItemCount(); i > 0; i--)
d567 3
a569 3
		itemdata = (sfl_itemdata *)GetItemData(i - 1);
		if(itemdata)
			delete itemdata;
@


1.206
log
@corrected my changes according coding guidelines
@
text
@d746 1
a746 1
BOOL CSharedFilesCtrl::OnWndMsg(UINT iMessage,WPARAM wParam, LPARAM lParam, LRESULT *pResult)
d759 4
a762 1
			UpdateItem(pKnownFile, bResort);
d1400 8
a1407 2
	sfl_itemdata*	itemdata;
	for(int i=0; i<GetItemCount(); i++)
d1409 2
a1410 2
		itemdata=(sfl_itemdata*)GetItemData(i);
		if(itemdata->isFile && itemdata->knownFile==toupdate)
d1412 4
a1415 2
			UpdateFile(toupdate, i, resort);
			Update(i);
d1419 1
d2229 1
a2229 1
	return RGB(0, (210-(22*(f-1)) <  0)? 0:210-(22*(f-1)), 255);
d2235 1
a2235 1
	return RGB(255, 0, (210-(22*(f-1)) <  0)? 0:210-(22*(f-1)));
@


1.205
log
@fixed collision of variable names
@
text
@d374 1
a374 1
	double	dblCompRel = pSharedFile->statistic.GetCompleteReleases();
d376 1
a376 1
	if (a != 0 && (dblCompRel + b != 0.0))
d378 1
a378 1
		strBuffer.Format(_T("%0.2f (%0.2f)"), dblCompRel, (double)b/a);
d410 1
a410 1
			if (bPartFile && !dynamic_cast<CPartFile*>(pSharedFile)->IsPartComplete(uPart))
d441 2
a442 2
			double	dblCompPartRel = pSharedFile->statistic.GetCompletePartReleases(uPart);
			if (ts != 0 || dblCompPartRel != 0.0)
d444 1
a444 1
				strBuffer.Format(_T("%0.2f (%0.2f)"), dblCompPartRel, (double)t/pSharedFile->GetPartSize(uPart));
@


1.204
log
@A possible solution for faster shared file list handling while expanding a large file {Fuxie - DK}.
@
text
@d374 1
a374 1
	double	cr = pSharedFile->statistic.GetCompleteReleases();
d376 1
a376 1
	if (a != 0 && (cr + b != 0.0))
d378 1
a378 1
		strBuffer.Format(_T("%0.2f (%0.2f)"), cr, (double)b/a);
d410 1
a410 1
			if (bPartFile && !((CPartFile*)pSharedFile)->IsPartComplete(uPart))
d441 2
a442 2
			double	cr = pSharedFile->statistic.GetCompletePartReleases(uPart);
			if (ts != 0 || cr != 0.0)
d444 1
a444 1
				strBuffer.Format(_T("%0.2f (%0.2f)"), cr, (double)t/pSharedFile->GetPartSize(uPart));
d819 1
a819 1
		int	iSel = GetNextSelectedItem(pos);
d929 1
a929 1
				int	iSel = GetNextSelectedItem(pos);
d965 1
a965 1
				int	iSel = this->GetNextSelectedItem(pos);
d1016 1
a1016 1
				int	iSel = GetNextSelectedItem(pos);
d1058 1
a1058 1
				int	iSel = this->GetNextSelectedItem(pos);
d1091 1
a1091 1
				int		iSel = this->GetNextSelectedItem(pos);
@


1.203
log
@Large file size support preparations;
Speeded up drawing of Part Traffic status bar.
@
text
@d322 3
d331 2
d336 2
d340 1
d342 2
d345 2
a346 2
		strBuffer = _T("");
	SetItemText(itemnr, SFL_COLUMN_REQUESTS, strBuffer);
d351 1
d353 2
d356 2
a357 2
		strBuffer = _T("");
	SetItemText(itemnr, SFL_COLUMN_ACCEPTED, strBuffer);
d364 1
d367 2
a368 2
		strBuffer = _T("");
	SetItemText(itemnr, SFL_COLUMN_TRANSFERRED, strBuffer);
d377 1
d379 2
d382 2
a383 2
		strBuffer = _T("");
	SetItemText(itemnr, SFL_COLUMN_UPLOADS, strBuffer);
d391 4
a394 2
		//--- update all parts ---
		for (uint16 part=0; part < itemdataParent->parts; part++)
d397 1
a397 1
			sfl_itemdata	*itemdata=(sfl_itemdata*)GetItemData(iSubItemIdx);
d399 3
a401 2
			if (pSharedFile->IsPartShared(itemdata->part))
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, _T(""));
d405 1
a405 1
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, strBuffer);
d407 1
d410 2
a411 2
			if (pSharedFile->IsPartFile() && !((CPartFile*)pSharedFile)->IsPartComplete(itemdata->part))
				SetItemText(iSubItemIdx, SFL_COLUMN_FILESIZE, _T(""));
d413 2
a414 1
				SetItemText(iSubItemIdx, SFL_COLUMN_FILESIZE, _T("*"));
d417 2
a418 2
			uint32	as = pSharedFile->statistic.GetPartAccepted(itemdata->part, true);
			uint32	a = pSharedFile->statistic.GetPartAccepted(itemdata->part, false);
d422 1
a422 1
				SetItemText(iSubItemIdx, SFL_COLUMN_ACCEPTED, strBuffer);
d425 2
a426 1
				SetItemText(iSubItemIdx, SFL_COLUMN_ACCEPTED, _T(""));
d429 2
a430 2
			uint32 ts = pSharedFile->GetPartTraffic(itemdata->part, true);
			uint32 t = pSharedFile->GetPartTraffic(itemdata->part);
d434 1
a434 1
				SetItemText(iSubItemIdx, SFL_COLUMN_TRANSFERRED, strBuffer);
d437 2
a438 1
				SetItemText(iSubItemIdx, SFL_COLUMN_TRANSFERRED, _T(""));
d441 1
a441 1
			double	cr = pSharedFile->statistic.GetCompletePartReleases(itemdata->part);
d444 2
a445 2
				strBuffer.Format(_T("%0.2f (%0.2f)"), cr, (double)t/pSharedFile->GetPartSize(itemdata->part));
				SetItemText(iSubItemIdx, SFL_COLUMN_UPLOADS, strBuffer);
d448 2
a449 1
				SetItemText(iSubItemIdx, SFL_COLUMN_UPLOADS, _T(""));
d473 1
a1952 2
			SetRedraw(true);

d1961 2
@


1.202
log
@Simplified code.
@
text
@a34 3
//--- minimum repaint time for a trafficbar (ms) ---
#define SFL_BARUPDATE 1000

d1282 1
a1282 1
				iCompare = sortcmp(knownfile1->GetFileSize(), knownfile2->GetFileSize());
d1332 2
a1333 10
				if (iSortAltFlag == 0)
				{
					d1 = CompleteSourcesCmpValue(knownfile1, false);
					d2 = CompleteSourcesCmpValue(knownfile2, false);
				}
				else
				{
					d1 = CompleteSourcesCmpValue(knownfile1, true);
					d2 = CompleteSourcesCmpValue(knownfile2, true);
				}
d1681 1
d1684 2
d1689 2
a1690 1
			bool	boh = !statistic.fileParent->IsPartShared(x * bpp / PARTSZ32);
d1693 2
a1694 1
			if(m_display_atpte)
d1696 7
a1702 10
				t=statistic.fileParent->GetTrafficPart(x*bpp, (x+1)*bpp);
				if (t || boh)
				{
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
					pOldPen = dc->SelectObject(&pen);
					dc->MoveTo(x, m_display_atpts);
					dc->LineTo(x, m_display_atpte);
					dc->SelectObject(pOldPen);	// set previous object to make pen pointer always correct in GDI object
					pen.DeleteObject();
				}
d1705 1
a1705 2
			//--- draw alltime blocktraffic bar? ---
			if(m_display_atbte)
d1707 1
a1707 1
				t=statistic.fileParent->GetTrafficBlock(x*bpp, (x+1)*bpp);
d1710 2
a1711 1
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
a1717 1
			}
d1719 1
a1719 5
			//--- draw session blocktraffic bar? ---
			if(m_display_sbte)
			{
				t=statistic.fileParent->GetTrafficBlock(x*bpp, (x+1)*bpp, true);
				if (t || boh)
d1721 11
a1731 6
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
					pOldPen = dc->SelectObject(&pen);
					dc->MoveTo(x, m_display_sbts);
					dc->LineTo(x, m_display_sbte);
					dc->SelectObject(pOldPen);	// set previous object to make pen pointer always correct in GDI object
					pen.DeleteObject();
d1751 1
a1751 1
	int			use = max(1, (int)(rect->right - rect->left + 1)*((double)ps / PARTSZ32));
d1769 2
a1770 2
	uint32 start=part*PARTSIZE;
	double bpp=(double)ps/use;
d1774 2
d1777 1
a1777 5
		TraffiGram(dc, rect, statistic, use, bpp, start);
	}
	//--- old boring bar style :) ---
	else
	{
d1780 2
a1781 1
		uint32 t;
d1784 2
a1785 1
		if(m_display_atpte)
d1787 7
a1793 10
			t=statistic.fileParent->GetPartTraffic(part);
			if (t || bHidden)
			{
				r.top = m_display_atpts;
				r.bottom = m_display_atpte;
				r.left = rect->left;
				r.right = rect->left+use;
				dc->FillSolidRect(&r, GrayIt(bHidden, GetTrafficColor(static_cast<double>(t) / ps)));
				r.bottom = rect->bottom;
			}
d1796 1
a1796 1
		for(int x = 0; x < use; x++)
d1798 1
a1798 2
			//--- draw alltime blocktraffic bar? ---
			if(m_display_atbte)
d1800 2
a1801 1
				t=statistic.fileParent->GetTrafficBlock(start+x*bpp, start+(x+1)*bpp);
d1804 2
a1805 1
					pen.CreatePen(PS_SOLID, 0, GrayIt(bHidden, GetTrafficColor(t / bpp)));
a1811 1
			}
d1813 1
a1813 5
			//--- draw session blocktraffic bar? ---
			if(m_display_sbte)
			{
				t=statistic.fileParent->GetTrafficBlock(start+x*bpp, start+(x+1)*bpp, true);
				if (t || bHidden)
d1815 11
a1825 6
					pen.CreatePen(PS_SOLID, 0, GrayIt(bHidden, GetTrafficColor(t / bpp)));
					pOldPen = dc->SelectObject(&pen);
					dc->MoveTo(x, m_display_sbts);
					dc->LineTo(x, m_display_sbte);
					dc->SelectObject(pOldPen);	// set previous object to make pen pointer always correct in GDI object
					pen.DeleteObject();
a1897 1

d1923 1
a1923 1
				buffer.Format(_T("%i"), part);
d1999 1
a1999 3
	EMULE_TRY

	switch(mode)
d2001 4
a2004 3
	case 0:
		GetTrafficColor=&GetTrafficColor0;
		break;
d2006 3
a2008 3
	case 1:
		GetTrafficColor=&GetTrafficColor1;
		break;
d2010 3
a2012 3
	case 2:
		GetTrafficColor=&GetTrafficColor2;
		break;
d2014 3
a2016 6
	case 3:
		GetTrafficColor=&GetTrafficColor3;
		break;

	default:
		GetTrafficColor=&GetTrafficColor0;
a2017 2

	EMULE_CATCH
a2030 1
		m_display_atpts	= 0;
a2039 1
		m_display_atpts	= 0;
a2053 1
		m_display_atpts	= 0;
d2069 1
a2069 1
void CSharedFilesCtrl::TraffiGram(CDC* dc, RECT* rect, const CFileStatistic& statistic, int use, double bpp, uint32 start)
d2073 5
a2077 3
	uint32 tt=0;
	//--- needs highest value! ---
	for(int x=0; x<use; x++)
d2079 5
a2083 1
		tt=max(tt, statistic.fileParent->GetTrafficBlock(start+x*bpp, start+(x+1)*bpp));
d2091 4
a2094 2
	uint32	t;
	for(int x=0; x<use; x++)
d2096 2
a2097 2
		t=statistic.fileParent->GetTrafficBlock(start+x*bpp, start+(x+1)*bpp);
		ch=h-static_cast<int>(h*static_cast<double>(t)/tt+0.5);
d2099 1
a2099 1
			dc->SetPixel(x, ch, GetTrafficColor(t/bpp));
d2104 2
a2105 3
			int d=1;
			if(lh>ch)
				d=-1;
d2107 1
a2107 1
			for(int i=1; i<abs(lh-ch)/2+1; i++)
d2109 2
a2110 2
				dc->SetPixel(x-1,	lh+i*d, GetTrafficColor((tt-tph*(lh+i*d))/bpp));
				dc->SetPixel(x,		ch-i*d, GetTrafficColor((tt-tph*(ch-i*d))/bpp));
a2112 1

@


1.201
log
@UNICODE preparations; optimizations; formattings.
@
text
@a705 2
		int	iURLCnt;

d707 1
a707 2
		UpdateURLMenu(menuWeb, &iURLCnt);
		uFlag = ((iURLCnt == 0) ? MF_GRAYED : MF_STRING) | (bJustOne ? MF_ENABLED : MF_GRAYED);
@


1.200
log
@Large file size support preparations.
@
text
@d706 1
a706 1
		int		counter;
d709 3
a711 3
		UpdateURLMenu(menuWeb,counter);
		uFlag = ((counter == 0) ? MF_GRAYED : MF_STRING) | (bJustOne ? MF_ENABLED : MF_GRAYED);
		SharedFilesMenu.AppendMenu(uFlag|MF_POPUP,(UINT_PTR)menuWeb.m_hMenu, GetResString(IDS_WEBSERVICES));
@


1.199
log
@Simplified and speeded up code to display '*' for file parts in the Shared Files list.
@
text
@d1660 4
a1663 3
	uint32	fs=statistic.fileParent->GetFileSize();
	if(fs<PARTSIZE)
		use = max(1, available * ((double)fs / PARTSZ32));
d1682 1
a1682 1
	double bpp=(double)fs/use;
@


1.198
log
@Reduced H-file dependency.
@
text
@d392 1
a392 1
			if (pSharedFile->IsPartFile() && (((CPartFile*)pSharedFile)->GetRemainingBlocksInPart(itemdata->part) != 0))
@


1.197
log
@Large file size support preparations.
@
text
@d26 2
@


1.196
log
@Faster collapsing of parts list in the shared files list; Formatting.
@
text
@d1660 1
a1660 1
		use=max(1, available*((double)fs/PARTSIZE));
d1697 1
a1697 1
			bool	boh = !statistic.fileParent->IsPartShared(x*bpp/PARTSIZE);
d1757 1
a1757 2
	uint32 ps=statistic.fileParent->GetPartSize(part);

d1760 1
a1760 2

	int use=max(1, (int)(rect->right - rect->left + 1)*((double)ps/PARTSIZE));
d1763 1
a1763 1
	if (ps != PARTSIZE)
@


1.195
log
@Corrected minor localization issue created by the previous fix.
@
text
@d503 1
a503 1
	for(int nItem=0; nItem<GetItemCount(); nItem++)
d505 2
a506 2
		itemdata=(sfl_itemdata*)GetItemData(nItem);
		if(itemdata->isFile && itemdata->knownFile==toRemove)
d511 1
a511 1
				for(uint16 part=0; part<itemdata->parts; part++)
a516 1
					SetItemData(nItem+1, NULL);
d518 1
a518 1
					if(itemdataPart) delete itemdataPart;
a521 1
			SetItemData(nItem, NULL);
d523 1
a523 1
			if(itemdata) delete itemdata;
d538 1
a538 1
	for(int i=GetItemCount(); i>0; i--)
d540 1
a540 1
		itemdata=(sfl_itemdata *)GetItemData(i-1);
d1900 1
a1900 1
		for(uint16 part=0; part<itemdataParent->parts; part++)
d1902 1
a1902 1
			sfl_itemdata *itemdata=(sfl_itemdata*)GetItemData(i->iItem+1);
d1905 2
a1906 4
			SetItemData(i->iItem+1, NULL);
			DeleteItem(i->iItem+1);
			if(itemdata)
				delete itemdata;
d1930 6
a1935 6
				sfl_itemdata	*itemdata=new sfl_itemdata;
				itemdata->isFile=false;
				itemdata->isOpen=false;
				itemdata->knownFile=file;
				itemdata->part=part;
				itemdata->parts=0;
@


1.194
log
@Fixed startup (mostly Win98) when some windows were not available {semental/morrismatto}
-- as a result slightly faster startup;
Faster switching between the Known and Shared Files lists in the shared files view.
@
text
@d251 6
@


1.193
log
@Corrected image list processing.
@
text
@d241 10
a250 5
	// Localization
		if(m_allYaKnow)
			ShowKnownList();
		else
			ShowFileList(g_App.m_pSharedFilesList);
d291 1
a291 1
	uint32 records=list->GetCount();
d295 1
a295 1
	for(uint32 i=0; i < records; i++)
d298 2
a299 2
		if (pKnownFile)
		{
a300 1
		}
a536 2
		SetItemData(i-1, NULL);
		//DeleteItem(i-1);
d734 1
a734 1
			bHandled = true;
@


1.192
log
@Removed not required image list cleanups (list is cleaned automatically in its destructor).
@
text
@d142 1
@


1.191
log
@Avoid creating a link with sources for unshared files {Vladimir (SV)};
Removed the whole shared files list redraw when chunk hidden status was changed by double-click;
Corrected rating icon update when edit shortcut was pressed on selected chunk;
Don't redraw rating icon when rating/comment wasn't changed;
Improved string processing.
@
text
@a101 2

	m_imageList.DeleteImageList();
@


1.190
log
@UNICODE preparation (first shot)
@
text
@d373 1
a373 1
				  SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, _T(""));
d375 4
a378 1
				  SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_HIDDEN));
d431 1
a431 1
				strBuffer= _T("");
d826 1
a826 3
		{
#ifdef OLD_SOCKETS_ENABLED
			if (g_App.m_pServerConnect->IsConnected() || !g_App.m_pServerConnect->IsLowID())
d828 5
a832 7
				while (!selectedList.IsEmpty())
				{
					strBuffer += selectedList.RemoveHead()->CreateED2kSourceLink();
					if(!selectedList.IsEmpty())
						strBuffer += _T("\r\n");
				}
				g_App.CopyTextToClipboard(strBuffer);
d834 1
a834 3
			else
#endif //OLD_SOCKETS_ENABLED
				AfxMessageBox(GetResString(IDS_SOURCELINKFAILED));
d836 1
a836 1
		}
d872 3
a874 1
			dialog.DoModal();
d1009 2
a1010 1
									SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_HIDDEN));
d1020 1
a1020 1
				RedrawItems(0, GetItemCount());
d1076 2
a1077 1
							msgyes = AfxMessageBox(GetResString(IDS_JS_DISABLE), MB_YESNO|MB_ICONEXCLAMATION|MB_DEFBUTTON2);
d1093 2
a1094 1
								AfxMessageBox(GetResString(IDS_JS_COMPLETE), MB_OK|MB_ICONSTOP);
d1371 1
a1371 1
void CSharedFilesCtrl::UpdateItem(CKnownFile* toupdate, bool resort)
d1861 2
a1862 1
	sfl_itemdata	*itemdataParent=(sfl_itemdata*)GetItemData(i->iItem);
d1865 1
a1865 1
	if(itemdataParent->isFile==false)
d1871 1
a1871 1
				if(itemdataParent->knownFile->IsPartFile())
d1874 2
a1875 2
				if (itemdataParent->knownFile->IsPartShared(itemdataParent->part))
					itemdataParent->knownFile->UnsharePart(itemdataParent->part);
d1877 1
a1877 1
					itemdataParent->knownFile->SharePart(itemdataParent->part);
d1879 1
a1879 1
				UpdateItem(itemdataParent->knownFile);
a1884 2
	CKnownFile	*file=itemdataParent->knownFile;

d1998 3
a2000 1
				dialog.DoModal();
d2250 2
a2251 1
	if (g_App.m_pMDlg->IsRunning()){
d2261 2
a2262 1
		if (pDispInfo->item.mask & (LVIF_TEXT | LVIF_PARAM)){
d2267 4
a2270 2
				if (pFile != NULL){
					switch (pDispInfo->item.iSubItem){
d2361 3
a2363 2
			dialog.DoModal();
			UpdateItem(pFile, false);
@


1.189
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d238 1
a238 1
			hdi.pszText = (LPSTR)strRes.GetString();
d867 1
a867 1
			ShellExecute(NULL, "open", g_App.m_pPrefs->GetAVPath(), strBuffer, NULL, SW_SHOW);
@


1.188
log
@renamed 3 variables
@
text
@d137 2
a138 2
	SetColoring(g_App.g_pPrefs->GetUpbarColor());
	SetDisplay(g_App.g_pPrefs->GetUpbarStyle(), false);
d158 1
a158 1
	if (g_App.g_pPrefs->DoUseSort())
d160 1
a160 1
		SortInit(g_App.g_pPrefs->GetFileSortCol());
d164 1
a164 1
		uint32		dwSortCode = g_App.g_pPrefs->GetColumnSortItem(CPreferences::TABLE_SHARED);
d166 1
a166 1
		dwSortCode |= g_App.g_pPrefs->GetColumnSortAscending(CPreferences::TABLE_SHARED) ? MLC_SORTASC : MLC_SORTDESC;
d642 1
a642 1
					((itemdata->knownFile->IsPartFile() || !g_App.g_pPrefs->IsAVEnabled() || (g_App.g_pPrefs->GetAVPath().IsEmpty())) ? MF_GRAYED : MF_ENABLED),
d855 1
a855 1
			strBuffer = g_App.g_pPrefs->GetAVParams();
d867 1
a867 1
			ShellExecute(NULL, "open", g_App.g_pPrefs->GetAVPath(), strBuffer, NULL, SW_SHOW);
d1151 2
a1152 2
	g_App.g_pPrefs->SetColumnSortItem(CPreferences::TABLE_SHARED, iSubItem | iFlags);	// Allow to save alternate criterion
	g_App.g_pPrefs->SetColumnSortAscending(CPreferences::TABLE_SHARED, bSortOrder);
d1183 1
a1183 1
		if (m_sortParts && g_App.g_pPrefs->DoUsePT())
d1466 1
a1466 1
					if (g_App.g_pPrefs->ShowFileTypeIcon())
d1474 1
a1474 1
					if (g_App.g_pPrefs->ShowRatingIcons())
d1503 1
a1503 1
					if (g_App.g_pPrefs->DoUsePT())
d1576 1
a1576 1
					if (g_App.g_pPrefs->DoUsePT())
d1911 1
a1911 1
		if(g_App.g_pPrefs->DoUsePT() && file->GetPartCount()>1)
d1979 1
a1979 1
	if (g_App.g_pPrefs->ShowRatingIcons())
d1989 1
a1989 1
			if (g_App.g_pPrefs->ShowFileTypeIcon())
d2305 1
a2305 1
			if (nCode == g_App.g_pPrefs->GetShortcutCode(SCUT_FILE_OPENDIR))
d2312 1
a2312 1
			else if (nCode == g_App.g_pPrefs->GetShortcutCode(SCUT_FILE_EDITCOMMENTS))
d2317 1
a2317 1
			else if (nCode == g_App.g_pPrefs->GetShortcutCode(SCUT_LINK))
d2319 1
a2319 1
			else if (nCode == g_App.g_pPrefs->GetShortcutCode(SCUT_LINK_HTML))
d2321 1
a2321 1
			else if (nCode == g_App.g_pPrefs->GetShortcutCode(SCUT_LINK_SOURCE))
d2323 1
a2323 1
			else if (nCode == g_App.g_pPrefs->GetShortcutCode(SCUT_LINK_HASH))
@


1.187
log
@Removed Fake check/report context menu items.
@
text
@d137 2
a138 2
	SetColoring(g_eMuleApp.m_pGlobPrefs->GetUpbarColor());
	SetDisplay(g_eMuleApp.m_pGlobPrefs->GetUpbarStyle(), false);
d152 1
a152 1
	m_imageList.Create(16, 16, g_eMuleApp.m_iDfltImageListColorFlags | ILC_MASK, ELEMENT_COUNT(s_auIconResID), 0);
d158 1
a158 1
	if (g_eMuleApp.m_pGlobPrefs->DoUseSort())
d160 1
a160 1
		SortInit(g_eMuleApp.m_pGlobPrefs->GetFileSortCol());
d164 1
a164 1
		uint32		dwSortCode = g_eMuleApp.m_pGlobPrefs->GetColumnSortItem(CPreferences::TABLE_SHARED);
d166 1
a166 1
		dwSortCode |= g_eMuleApp.m_pGlobPrefs->GetColumnSortAscending(CPreferences::TABLE_SHARED) ? MLC_SORTASC : MLC_SORTDESC;
d246 1
a246 1
			ShowFileList(g_eMuleApp.m_pSharedFilesList);
d270 1
a270 1
	g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.SetDlgItemText(IDC_BN_SWITCHALLKNOWN, GetResString(IDS_SF_SHOWALLKF));
d281 1
a281 1
	CKnownFileList* list=g_eMuleApp.m_pKnownFilesList;
d300 1
a300 1
	g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.SetDlgItemText(IDC_BN_SWITCHALLKNOWN, GetResString(IDS_SF_SHOWALLSF));
d309 1
a309 1
	if (!g_eMuleApp.m_pdlgEmule->IsRunning() || (pSharedFile == NULL))
d642 1
a642 1
					((itemdata->knownFile->IsPartFile() || !g_eMuleApp.m_pGlobPrefs->IsAVEnabled() || (g_eMuleApp.m_pGlobPrefs->GetAVPath().IsEmpty())) ? MF_GRAYED : MF_ENABLED),
d753 1
a753 1
				ShowFileList(g_eMuleApp.m_pSharedFilesList);
d761 1
a761 1
			g_eMuleApp.m_pKnownFilesList->merge();
d777 1
a777 1
		RunURL(file, g_eMuleApp.m_strWebServiceURLArray.GetAt(wParam - MP_WEBURL));
d809 1
a809 1
			g_eMuleApp.CopyTextToClipboard(strBuffer);
d819 1
a819 1
			g_eMuleApp.CopyTextToClipboard(strBuffer);
d825 1
a825 1
			if (g_eMuleApp.m_pServerConnect->IsConnected() || !g_eMuleApp.m_pServerConnect->IsLowID())
d833 1
a833 1
				g_eMuleApp.CopyTextToClipboard(strBuffer);
d847 1
a847 1
			g_eMuleApp.CopyTextToClipboard(strBuffer);
d855 1
a855 1
			strBuffer = g_eMuleApp.m_pGlobPrefs->GetAVParams();
d867 1
a867 1
			ShellExecute(NULL, "open", g_eMuleApp.m_pGlobPrefs->GetAVPath(), strBuffer, NULL, SW_SHOW);
d885 1
a885 1
				g_eMuleApp.m_pDownloadList->ClearCompleted(pKnownFile->GetFileHash());
d887 1
a887 1
				g_eMuleApp.m_pSharedFilesList->RemoveFile(pKnownFile);
d1151 2
a1152 2
	g_eMuleApp.m_pGlobPrefs->SetColumnSortItem(CPreferences::TABLE_SHARED, iSubItem | iFlags);	// Allow to save alternate criterion
	g_eMuleApp.m_pGlobPrefs->SetColumnSortAscending(CPreferences::TABLE_SHARED, bSortOrder);
d1183 1
a1183 1
		if (m_sortParts && g_eMuleApp.m_pGlobPrefs->DoUsePT())
d1466 1
a1466 1
					if (g_eMuleApp.m_pGlobPrefs->ShowFileTypeIcon())
d1468 3
a1470 3
						iImage = g_eMuleApp.GetFileTypeSystemImageIdx(file->GetFileName());
						if (g_eMuleApp.GetSystemImageList() != NULL)
							::ImageList_Draw(g_eMuleApp.GetSystemImageList(), iImage, dc->GetSafeHdc(), cur_rec.left, cur_rec.top + 1, ILD_TRANSPARENT);
d1474 1
a1474 1
					if (g_eMuleApp.m_pGlobPrefs->ShowRatingIcons())
d1503 1
a1503 1
					if (g_eMuleApp.m_pGlobPrefs->DoUsePT())
d1576 1
a1576 1
					if (g_eMuleApp.m_pGlobPrefs->DoUsePT())
d1911 1
a1911 1
		if(g_eMuleApp.m_pGlobPrefs->DoUsePT() && file->GetPartCount()>1)
d1977 1
a1977 1
	g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.ShowDetails(pKnownFile);
d1979 1
a1979 1
	if (g_eMuleApp.m_pGlobPrefs->ShowRatingIcons())
d1989 1
a1989 1
			if (g_eMuleApp.m_pGlobPrefs->ShowFileTypeIcon())
d2219 1
a2219 1
		if ((dwCnt = g_eMuleApp.m_pSharedFilesList->GetWaitingForHashCount()) != 0)
d2226 1
a2226 1
	g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.SetDlgItemText(IDC_TRAFFIC_TEXT, strCounter);
d2247 1
a2247 1
	if (g_eMuleApp.m_pdlgEmule->IsRunning()){
d2305 1
a2305 1
			if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(SCUT_FILE_OPENDIR))
d2312 1
a2312 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(SCUT_FILE_EDITCOMMENTS))
d2317 1
a2317 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(SCUT_LINK))
d2319 1
a2319 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(SCUT_LINK_HTML))
d2321 1
a2321 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(SCUT_LINK_SOURCE))
d2323 1
a2323 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(SCUT_LINK_HASH))
@


1.186
log
@IDS_SHAREDFILES substitutes IDS_SF_FILES and IDS_TREE_SHARE.
@
text
@a648 1
			SharedFilesMenu.AppendMenu(MF_STRING | ((bJustOne) ? MF_ENABLED : MF_GRAYED), MP_FAKE_REPORT, GetResString(IDS_FAKE_REPORT));
a849 18
		case MP_FAKE_REPORT:
		{
		/*
		//	KuSh: this code seems very strange, why breaking after the while and before doing the entire job ? ...
			if (selectedCount > 1)
			{
				POSITION	pos = this->GetFirstSelectedItemPosition();

				while (pos != NULL)
				{
					file = (CKnownFile*)this->GetItemData(GetNextSelectedItem(pos));
				}
				break;
			}
		*/
			RunURL(file, _T("http://donkeyfakes.gambri.net/report.php?link=ed2k://|file|#filename|#filesize|#hashid|/"));
			break;
		}
@


1.185
log
@Changed context menu string "Change this file comment" -> "Edit file comment".
@
text
@d2237 1
a2237 1
		GetResString(&strCounter, IDS_SF_FILES);
@


1.184
log
@Copy file hash to clipboard (context menu and shortcut) {DoubleT};
Selected item array is substituted with list; Formatting.
@
text
@d648 1
a648 1
				MP_CMT, GetResString(IDS_CMT_ADD) + GetStringFromShortcutCode(SCUT_FILE_EDITCOMMENTS, SSP_TAB_PREFIX) );
@


1.183
log
@Separate GetFileTypeString for search type;
Faster sorting compare for file type columns.
@
text
@d693 1
d785 1
a785 1
	CArray<CKnownFile*,CKnownFile*>	selectedList;
d797 1
a797 1
			selectedList.Add(itemdata->knownFile);
a803 1
		{
d806 1
a806 2
				strBuffer += selectedList.ElementAt(0)->CreateED2kLink();
				selectedList.RemoveAt(0);
d812 1
a812 1
		}
a813 1
		{
d816 1
a816 2
				strBuffer += selectedList.ElementAt(0)->CreateHTMLED2kLink();
				selectedList.RemoveAt(0);
d822 1
a822 1
		}
d830 1
a830 2
					strBuffer += selectedList.ElementAt(0)->CreateED2kSourceLink();
					selectedList.RemoveAt(0);
d841 10
a869 1
		{
d872 1
a872 1
		}
a873 1
		{
d877 3
a879 1
				if (!selectedList.ElementAt(0)->IsPartFile())
d882 1
a882 1
					strBuffer += ConcatFullPath(selectedList.ElementAt(0)->GetPath(), selectedList.ElementAt(0)->GetFileName());
a884 1
				selectedList.RemoveAt(0);
d888 1
a888 1
		}
a897 2
		{
			//--- TODO: ask if really delete ---
d900 1
a900 1
				CKnownFile		*pKnownFile = selectedList.ElementAt(0);
a906 1
				selectedList.RemoveAt(0);
d909 1
a909 1
		}
a2336 1
			{
a2337 1
			}
a2338 1
			{
a2339 1
			}
a2340 1
			{
d2342 2
a2343 1
			}
@


1.182
log
@Rolled back some of faster part traffic drawing optimization made in revision 1.176,
as it caused some problems for nVidia drivers (thanks DonGato).
@
text
@d315 1
a315 1
	SetItemText(itemnr, SFL_COLUMN_TYPE, pSharedFile->GetFileTypeString(true));
d1300 1
a1300 2
				//	As all types are predefined it's safe to use case sensitive compare to speed up
				iCompare = _tcscmp(knownfile1->GetFileTypeString(true), knownfile2->GetFileTypeString(true));
@


1.181
log
@Unified and regrouped shortcuts.
@
text
@d1704 1
a1704 1
		CPen	*pOldPen = dc->GetCurrentPen();
d1716 2
a1717 2
					CPen pen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
					dc->SelectObject(&pen);
d1720 2
d1731 2
a1732 2
					CPen pen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
					dc->SelectObject(&pen);
d1735 2
d1746 2
a1747 2
					CPen pen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
					dc->SelectObject(&pen);
d1750 2
a1754 1
		dc->SelectObject(pOldPen);	// restore the previous pen
d1802 1
a1802 1
		CPen	*pOldPen = dc->GetCurrentPen();
d1829 2
a1830 2
					CPen pen(PS_SOLID, 0, GrayIt(bHidden, GetTrafficColor(t / bpp)));
					dc->SelectObject(&pen);
d1833 2
d1844 2
a1845 2
					CPen pen(PS_SOLID, 0, GrayIt(bHidden, GetTrafficColor(t / bpp)));
					dc->SelectObject(&pen);
d1848 2
a1852 1
		dc->SelectObject(pOldPen);	// restore the previous pen
@


1.180
log
@Fixed shared files hashing issues when hashing stopped {Juokelis/GMGMGM/taltamir};
Removed locking of Reload button;
Mark in the list files which should be published on the server.
@
text
@d639 1
a639 1
					MP_OPENFOLDER, GetResString(IDS_OPENFOLDER) + GetStringFromShortcutCode(IndexShOpenFolder, SSP_TAB_PREFIX) );
d648 1
a648 1
				MP_CMT, GetResString(IDS_CMT_ADD) + GetStringFromShortcutCode(IndexShComments, SSP_TAB_PREFIX) );
d690 3
a692 3
			ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1) + GetStringFromShortcutCode(IndexShED2KLink, SSP_TAB_PREFIX));
			ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2) + GetStringFromShortcutCode(IndexShED2kLinkHtml, SSP_TAB_PREFIX));
			ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK) + GetStringFromShortcutCode(IndexShED2kLinkSource, SSP_TAB_PREFIX));
d2315 1
a2315 1
			if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShOpenFolder))
d2322 1
a2322 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShComments))
d2327 1
a2327 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2KLink))
d2331 1
a2331 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkHtml))
d2335 1
a2335 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkSource))
@


1.179
log
@Better interface to access private variables.
@
text
@d146 1
a146 1
	ModifyStyle(LVS_SINGLESEL,0);
a243 1
		{
a244 1
		}
a245 1
		{
a246 1
		}
d729 1
a729 1
			UpdateItem(pKnownFile,bResort);
d738 1
a738 3
	{
		bHandled = CMuleListCtrl::OnWndMsg(iMessage,wParam,lParam,pResult);
	}
d2223 2
a2224 1
	CString strCounter;
d2229 2
a2230 2
		if (g_eMuleApp.m_pSharedFilesList->GetWaitingForHashCount() != 0)
			strCounter.AppendFormat(GetResString(IDS_STILLTOHASH), GetItemCount(), g_eMuleApp.m_pdlgEmule->m_iFilesToBeHashed);
a2236 3

	if (g_eMuleApp.m_pSharedFilesList->GetWaitingForHashCount() == 0)
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.GetDlgItem(IDC_RELOADSHAREDFILES)->EnableWindow(true);
d2275 12
a2286 2
							if (pDispInfo->item.cchTextMax > 0){
								_tcsncpy(pDispInfo->item.pszText, pFile->GetFileName(), pDispInfo->item.cchTextMax);
@


1.178
log
@Formatting.
@
text
@d2234 1
a2234 1
		if (!g_eMuleApp.m_pSharedFilesList->m_waitingForHashList.IsEmpty())
d2243 1
a2243 2
	if (g_eMuleApp.m_pSharedFilesList->m_waitingForHashList.IsEmpty())
	{
a2244 1
	}
@


1.177
log
@Unified and slightly faster way to draw list cursor;
Corrected multiple selection cursor.
@
text
@d559 2
a560 6
	CTitleMenu		m_SharedFilesMenu;
	CMenu			m_menuPriority;
	CMenu			m_PermMenu;
	CMenu			m_ed2kMenu;
	CMenu			m_ShellContextMenu;
	CMenu			m_menuWeb;
d562 2
a563 2
	m_SharedFilesMenu.CreatePopupMenu();
	m_SharedFilesMenu.AddMenuTitle(GetResString((m_allYaKnow) ? IDS_KNOWNFILES : IDS_SHAREDFILES));
d579 1
a579 1
			m_menuPriority.CreateMenu();
d584 1
a584 1
			m_menuPriority.AppendMenu( MF_STRING |
d587 1
a587 1
			m_menuPriority.AppendMenu( MF_STRING |
d590 1
a590 1
			m_menuPriority.AppendMenu( MF_STRING |
d593 1
a593 1
			m_menuPriority.AppendMenu( MF_STRING |
d596 1
a596 1
			m_menuPriority.AppendMenu( MF_STRING |
d599 1
a599 1
			m_menuPriority.AppendMenu( MF_STRING |
d607 2
a608 2
				m_menuPriority.AppendMenu(MF_SEPARATOR);
				m_menuPriority.AppendMenu(MF_STRING | (bIsJumpStart ? MF_CHECKED : MF_UNCHECKED), MP_JUMPSTART, _T("JumpStart"));
d610 1
a610 1
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP|MF_ENABLED,(UINT_PTR)m_menuPriority.m_hMenu, GetResString(IDS_PRIORITY));
d613 2
a614 2
			m_PermMenu.CreateMenu();
			m_PermMenu.AppendMenu(MF_STRING | 
d617 1
a617 1
			m_PermMenu.AppendMenu(MF_STRING | 
d620 1
a620 1
			m_PermMenu.AppendMenu(MF_STRING | 
d624 2
a625 2
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PermMenu.m_hMenu, GetResString(IDS_PERMISSION));
			m_SharedFilesMenu.AppendMenu(MF_SEPARATOR);
d629 1
a629 1
				m_ShellContextMenu.CreateMenu();
d638 1
a638 1
					m_pSCM->SetMenu(&m_ShellContextMenu);
d640 2
a641 2
				m_SharedFilesMenu.AppendMenu(uFlag | MF_POPUP, (UINT_PTR)m_ShellContextMenu.m_hMenu, GetResString(IDS_SHELLCONTEXT));
				m_SharedFilesMenu.AppendMenu( MF_STRING |
d645 1
a645 1
				m_SharedFilesMenu.AppendMenu( MF_STRING |
d649 1
a649 1
			m_SharedFilesMenu.AppendMenu( MF_STRING |
d653 1
a653 1
			m_SharedFilesMenu.AppendMenu(MF_STRING | ((bJustOne) ? MF_ENABLED : MF_GRAYED), MP_FAKE_REPORT, GetResString(IDS_FAKE_REPORT));
d659 2
a660 2
			m_SharedFilesMenu.AppendMenu(uFlag, MP_SFL_PARTON, GetResString(IDS_SF_PARTON));
			m_SharedFilesMenu.AppendMenu(uFlag, MP_SFL_PARTHIDDEN, GetResString(IDS_SF_PARTHIDDEN));
d663 3
a665 3
		m_SharedFilesMenu.AppendMenu(MF_SEPARATOR);
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARALLSTATS, GetResString(IDS_SF_RESETALLSTATS));
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARSTATS, GetResString(IDS_SF_RESETSESSTATS));
d667 1
a667 1
		m_SharedFilesMenu.AppendMenu(MF_SEPARATOR);
d672 2
a673 2
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_DELKNOWN, GetResString(IDS_SF_DELETE));
			m_SharedFilesMenu.AppendMenu(MF_SEPARATOR);
d679 3
a681 3
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_MERGEKNOWN, GetResString(IDS_SF_MERGE));
		m_SharedFilesMenu.AppendMenu(MF_SEPARATOR);
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_ALLYAKNOW, GetResString(IDS_SF_SHOWALLSF));
d684 1
a684 1
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_ALLYAKNOW, GetResString(IDS_SF_SHOWALLKF));
d688 1
a688 1
		m_SharedFilesMenu.AppendMenu(MF_SEPARATOR);
d693 5
a697 5
			m_ed2kMenu.CreateMenu();
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1) + GetStringFromShortcutCode(IndexShED2KLink, SSP_TAB_PREFIX));
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2) + GetStringFromShortcutCode(IndexShED2kLinkHtml, SSP_TAB_PREFIX));
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK) + GetStringFromShortcutCode(IndexShED2kLinkSource, SSP_TAB_PREFIX));
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP|MF_ENABLED,(UINT_PTR)m_ed2kMenu.m_hMenu, GetResString(IDS_ED2KLINKFIX));
d702 2
a703 2
		m_menuWeb.CreateMenu();
		UpdateURLMenu(m_menuWeb,counter);
d705 1
a705 1
		m_SharedFilesMenu.AppendMenu(uFlag|MF_POPUP,(UINT_PTR)m_menuWeb.m_hMenu, GetResString(IDS_WEBSERVICES));
d708 1
a708 1
	m_SharedFilesMenu.TrackPopupMenuEx(TPM_LEFTALIGN |TPM_RIGHTBUTTON,point.x,point.y,this, NULL);
@


1.176
log
@Faster part traffic drawing; Faster drawing of some list elements;
Corrected shared list cursor to be exactly the same like in other lists.
@
text
@d1431 1
d1436 3
a1438 7
	if((lpDrawItemStruct->itemAction | ODA_SELECT) &&
		(lpDrawItemStruct->itemState & ODS_SELECTED))
	{
		odc->SetBkColor((GetFocus() == this) ? m_crHighlight : m_crNoHighlight);
	}
	else
		odc->SetBkColor(GetBkColor());
d1440 1
a1440 1
	CMemDC dc(odc, &CRect(lpDrawItemStruct->rcItem));
d1442 1
a1442 1
	CFont	*oldFont=dc->SelectObject(GetFont());
d1659 1
a1659 1
		RECT	focus_rec = lpDrawItemStruct->rcItem;
d1661 3
a1663 4
		dc->FrameRect(&focus_rec, &CBrush(GetBkColor()));
		focus_rec.left++;
		focus_rec.right--;
		dc->FrameRect(&focus_rec, &CBrush((GetFocus() == this) ? m_crFocusLine : m_crNoFocusLine));
@


1.175
log
@Faster sorting compare for type columns.
@
text
@d391 1
d393 2
d396 1
a396 2
				strBuffer = _T("");
			SetItemText(iSubItemIdx, SFL_COLUMN_ACCEPTED, strBuffer);
d404 1
d407 1
a407 2
				strBuffer = _T("");
			SetItemText(iSubItemIdx, SFL_COLUMN_TRANSFERRED, strBuffer);
d412 1
d414 2
d417 1
a417 2
				strBuffer = _T("");
			SetItemText(iSubItemIdx, SFL_COLUMN_UPLOADS, strBuffer);
d1438 1
a1438 4
		if(GetFocus()==this)
			odc->SetBkColor(m_crHighlight);
		else
			odc->SetBkColor(m_crNoHighlight);
d1662 6
a1667 20
		RECT focus_rec;
		focus_rec.top    = lpDrawItemStruct->rcItem.top;
		focus_rec.bottom = lpDrawItemStruct->rcItem.bottom;
		focus_rec.left   = lpDrawItemStruct->rcItem.left + 1;
		focus_rec.right  = lpDrawItemStruct->rcItem.right - 1;
		if(GetFocus()==this)
		{
			brush.CreateSolidBrush(m_crFocusLine);
			m_pOldBrush = dc->SelectObject(&brush);
			dc->FrameRect(&focus_rec, &brush);
			dc->SelectObject(m_pOldBrush);
		}
		else
		{
			m_pOldBrush = dc->SelectObject(&brush);
			brush.CreateSolidBrush(m_crNoFocusLine);
			dc->FrameRect(&focus_rec, &brush);
			dc->SelectObject(m_pOldBrush);
		}
		brush.DeleteObject();
d1687 6
a1692 12
	RECT r;
	r.top=rect->top;
	r.bottom=rect->bottom;
	r.left=rect->left;
	r.right=rect->right;

	if(available==use)
	{
		brush.CreateSolidBrush(RGB(0x00, 0x00, 0x00));
		dc->FillRect(rect, &brush);
		brush.DeleteObject();
	}
d1695 6
a1700 14
		r.right=r.left+use;
		brush.CreateSolidBrush(RGB(0x00, 0x00, 0x00));
		m_pOldBrush = dc->SelectObject(&brush);
		dc->FillRect(&r, &brush);
		dc->SelectObject(m_pOldBrush);
		brush.DeleteObject();

		r.left=r.right;
		r.right=available;
		brush.CreateSolidBrush(RGB(0xCC, 0xCC, 0xCC));
		m_pOldBrush = dc->SelectObject(&brush);
		dc->FillRect(&r, &brush);
		dc->SelectObject(m_pOldBrush);
		brush.DeleteObject();
d1702 1
d1718 1
d1730 2
a1731 2
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
					CPen *pOldPen = dc->SelectObject(&pen);
a1733 2
					dc->SelectObject(pOldPen);
					pen.DeleteObject();
d1743 2
a1744 2
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
					CPen *pOldPen = dc->SelectObject(&pen);
a1746 2
					dc->SelectObject(pOldPen);		// FoRcHa
					pen.DeleteObject();
d1756 2
a1757 2
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
					CPen *pOldPen = dc->SelectObject(&pen);
a1759 2
					dc->SelectObject(pOldPen);		// FoRcHa
					pen.DeleteObject();
d1763 1
d1779 2
a1780 5
	RECT r;
	r.top=rect->top;
	r.bottom=rect->bottom;
	r.left=rect->left;
	r.right=rect->right;
d1784 2
a1785 1
	if(ps!=PARTSIZE)
d1787 6
a1792 14
		r.right=r.left+use;
		brush.CreateSolidBrush(RGB(0x00, 0x00, 0x00));
		m_pOldBrush = dc->SelectObject(&brush);
		dc->FillRect(&r, &brush);
		dc->SelectObject(m_pOldBrush);
		brush.DeleteObject();

		r.left=r.right;
		r.right=rect->right;
		brush.CreateSolidBrush(RGB(0xCC, 0xCC, 0xCC));
		m_pOldBrush = dc->SelectObject(&brush);
		dc->FillRect(&r, &brush);
		dc->SelectObject(m_pOldBrush);
		brush.DeleteObject();
d1795 1
a1795 7
	{
		brush.CreateSolidBrush(RGB(0x00, 0x00, 0x00));
		m_pOldBrush = dc->SelectObject(&brush);
		dc->FillRect(rect, &brush);
		dc->SelectObject(m_pOldBrush);
		brush.DeleteObject();
	}
a1807 1

d1811 1
d1821 6
a1826 10
				r.top=m_display_atpts;
				r.bottom=m_display_atpte;
				r.left=rect->left;
				r.right=rect->left+use;
				brush.CreateSolidBrush(GrayIt(bHidden, GetTrafficColor(static_cast<double>(t) / ps)));
				m_pOldBrush = dc->SelectObject(&brush);
				dc->FillRect(&r, &brush);
				dc->SelectObject(m_pOldBrush);
				brush.DeleteObject();
				r.bottom=rect->bottom;
d1838 2
a1839 2
					pen.CreatePen(PS_SOLID, 0, GrayIt(bHidden, GetTrafficColor(t / bpp)));
					CPen *pOldPen = dc->SelectObject(&pen);
a1841 2
					dc->SelectObject(pOldPen);		// FoRcHa
					pen.DeleteObject();
d1851 2
a1852 2
					pen.CreatePen(PS_SOLID, 0, GrayIt(bHidden, GetTrafficColor(t / bpp)));
					CPen *pOldPen = dc->SelectObject(&pen);
a1854 2
					dc->SelectObject(pOldPen);		// FoRcHa
					pen.DeleteObject();
d1858 1
d1860 1
d1891 3
a1893 4
				{
					//--- no blocking and hidding for partfiles! ---
					if(itemdataParent->knownFile->IsPartFile())
						break;
d1895 4
a1898 4
					if (itemdataParent->knownFile->IsPartShared(itemdataParent->part))
						itemdataParent->knownFile->UnsharePart(itemdataParent->part);
					else
						itemdataParent->knownFile->SharePart(itemdataParent->part);
d1900 1
a1900 2
					UpdateItem(itemdataParent->knownFile);
				}
@


1.174
log
@Rewritten shared files list sorting to make it according to other lists;
Fixed sorting arrow in shared files list when second sorting level is used by default;
Added possibility to sort parts by Accepted Requests in the shared files list;
Saving of second sorting level for shared files list when default sorting settings're not in use;
Faster shared files list sorting by some criteria.
@
text
@d1306 2
a1307 1
				iCompare = _tcsicmp(knownfile1->GetFileTypeString(true), knownfile2->GetFileTypeString(true));
@


1.173
log
@Dim hidden part on part traffic progress bar {DopeFish}.
@
text
@d54 9
d76 9
a84 11
	m_listSorter.init(SFL_NUMCOLUMNS);

	m_listSorter.item(SFL_COLUMN_FILESIZE)->set(1, true);
	m_listSorter.item(SFL_COLUMN_PRIORITY)->set(1, true);
	m_listSorter.item(SFL_COLUMN_REQUESTS)->set(2, true);
	m_listSorter.item(SFL_COLUMN_ACCEPTED)->set(2, true);
	m_listSorter.item(SFL_COLUMN_TRANSFERRED)->set(2, true);
	m_listSorter.item(SFL_COLUMN_PARTTRAFFIC)->set(2, true);
	m_listSorter.item(SFL_COLUMN_UPLOADS)->set(2, true);
	m_listSorter.item(SFL_COLUMN_COMPLETESRC)->set(2,true);
	m_listSorter.item(SFL_COLUMN_FOLDER)->set(1,true);
d176 12
a187 1
	EMULE_TRY
d189 1
a189 12
//get the sort column
	int		iSortColumn = (iSortCode & MLC_COLUMNMASK);
//get sort order
	bool	bSortAscending = (iSortCode & MLC_SORTDESC) == 0;
// check alternative order
	bool	bSortAlt = (iSortCode & MLC_SORTALT) != 0;

	SetSortArrow(iSortColumn, bSortAscending);
	m_listSorter.clicked(iSortColumn);
	m_listSorter.item(iSortColumn)->sortIt(bSortAlt ? 2:1, bSortAscending);
//	AddLogLine(true, "sort column %i, direction %s, level %i bSortDesc is: %i", m_listSorter.selected(), m_listSorter.dir()?"ascending":"descending", m_listSorter.level(),bReverse);
	SortItems(SortProc, (LPARAM)&m_listSorter);
d191 13
a203 1
	EMULE_CATCH
d437 1
a437 1
	SetItemText(itemnr,SFL_COLUMN_COMPLETESRC,strBuffer);
d446 1
a446 1
		SortItems(SortProc, (LPARAM)&m_listSorter);
d504 1
a504 1
						break;	//Cax2 14/01/03	bugfix
d1145 1
a1145 1
void CSharedFilesCtrl::OnColumnClick( NMHDR* pNMHDR, LRESULT* pResult)
d1147 19
a1165 1
	EMULE_TRY
d1167 6
a1172 3
	NMLISTVIEW* pNMListView = (NMLISTVIEW*)pNMHDR;
	m_listSorter.clicked(pNMListView->iSubItem);
	SetSortArrow(pNMListView->iSubItem, m_listSorter.arrow());
d1174 2
a1175 1
	m_sortParts=GetAsyncKeyState(VK_SHIFT) < 0;
a1176 3
	SortItems(SortProc, (LPARAM)&m_listSorter);
	g_eMuleApp.m_pGlobPrefs->SetColumnSortItem(CPreferences::TABLE_SHARED, pNMListView->iSubItem);
	g_eMuleApp.m_pGlobPrefs->SetColumnSortAscending(CPreferences::TABLE_SHARED, m_listSorter.dir());
a1177 2

	EMULE_CATCH
d1182 1
a1182 2
	//--- it happens :( ---
	if (lParam1 == NULL || lParam2 == NULL || lParamSort == NULL)
d1187 4
a1190 18
	CListCtrlSorter*	listSorter=(CListCtrlSorter*)lParamSort;
	int					tmp;
	sfl_itemdata*		item1;
	sfl_itemdata*		item2;

	if (listSorter->dir())
	{
		item1 = (sfl_itemdata*)lParam1;
		item2 = (sfl_itemdata*)lParam2;
	}
	else
	{
		item1 = (sfl_itemdata*)lParam2;
		item2 = (sfl_itemdata*)lParam1;
	}

	CKnownFile* knownfile1=item1->knownFile;
	CKnownFile* knownfile2=item2->knownFile;
a1191 1
	//--- it happens :( ---
d1195 7
d1206 1
a1206 1
		if (g_eMuleApp.m_pGlobPrefs->DoUsePT() && m_sortParts)		//Cax2 bugfix 09/01/03
d1208 1
a1208 1
			switch(listSorter->level())
d1210 2
a1211 2
				case 1:
					switch(listSorter->selected())
d1213 2
a1214 4
						case SFL_COLUMN_TRANSFERRED:
							{
								uint32 pt1=knownfile1->GetPartTraffic(item1->part, true);
								uint32 pt2=knownfile2->GetPartTraffic(item2->part, true);
d1216 8
a1223 25
								if(pt1==0 && pt2==0)
								{
									pt1=knownfile1->GetPartTraffic(item1->part);
									pt2=knownfile2->GetPartTraffic(item2->part);

									if(pt1==0 && pt2==0)
										return sortcmp(item1->part, item2->part);

									if(pt1==0)
										return listSorter->dir()?1:-1;

									if(pt2==0)
										return listSorter->dir()?-1:1;

									return sortcmp(pt1, pt2);
								}

								if(pt1==0)
									return listSorter->dir()?1:-1;

								if(pt2==0)
									return listSorter->dir()?-1:1;

								return sortcmp(pt1, pt2);
							}
d1225 2
d1228 2
a1229 5
						case SFL_COLUMN_PARTTRAFFIC:
						case SFL_COLUMN_UPLOADS:
							return sortcmp(knownfile1->statistic.GetCompletePartReleases(item1->part),
								       knownfile2->statistic.GetCompletePartReleases(item2->part));
							break;
d1231 6
a1236 3
						default:
							return sortcmp(item1->part, item2->part);
					}
d1239 2
a1240 2
				case 2:
					switch(listSorter->selected())
d1242 2
a1243 4
						case SFL_COLUMN_TRANSFERRED:
							{
								uint32 pt1=knownfile1->GetPartTraffic(item1->part);
								uint32 pt2=knownfile2->GetPartTraffic(item2->part);
d1245 8
a1252 11
								if(pt1==0 && pt2==0)
									return sortcmp(item1->part, item2->part);

								if(pt1==0)
									return listSorter->dir()?1:-1;

								if(pt2==0)
									return listSorter->dir()?-1:1;

								return sortcmp(pt1, pt2);
							}
d1254 2
d1257 2
a1258 5
						case SFL_COLUMN_PARTTRAFFIC:
						case SFL_COLUMN_UPLOADS:
							{
								double d1=(double)knownfile1->GetPartTraffic(item1->part)/knownfile1->GetPartSize(item1->part);
								double d2=(double)knownfile2->GetPartTraffic(item2->part)/knownfile2->GetPartSize(item2->part);
d1260 7
a1266 2
								return sortcmp(d1, d2);
							}
d1268 12
a1279 2
						default:
								return sortcmp(item1->part, item2->part);
d1282 3
d1287 1
a1287 3

		//--- no shift key down, no sorting ---
		else
d1289 2
a1290 4
			if(listSorter->dir())
				return sortcmp(item1->part, item2->part);
			else
				return sortcmp(item2->part, item1->part);
d1293 1
a1293 3

	//--- some other compare ---
	else
d1295 1
a1295 1
		switch(listSorter->level())
d1297 3
a1299 5
			case 1:
				switch(listSorter->selected())
				{
					case SFL_COLUMN_FILENAME:
						return _tcsicmp(knownfile1->GetFileName(), knownfile2->GetFileName());
d1301 3
a1303 2
					case SFL_COLUMN_FILESIZE:
						return sortcmp(knownfile1->GetFileSize(), knownfile2->GetFileSize());
d1305 3
a1307 2
					case SFL_COLUMN_TYPE:
						return _tcsicmp(knownfile1->GetFileTypeString(true), knownfile2->GetFileTypeString(true));
d1309 3
a1311 2
					case SFL_COLUMN_PRIORITY:
						return sortcmp(m_p2p[knownfile1->GetULPriority()], m_p2p[knownfile2->GetULPriority()]);
d1313 3
a1315 2
					case SFL_COLUMN_PERMISSION:
						return sortcmp(knownfile1->GetPermissions(), knownfile2->GetPermissions());
d1317 3
a1319 2
					case SFL_COLUMN_FILEID:
						return memcmp(knownfile1->GetFileHash(), knownfile2->GetFileHash(), 16);
d1321 9
a1329 3
					case SFL_COLUMN_REQUESTS:
						tmp=sortcmp(knownfile1->statistic.GetRequests(), knownfile2->statistic.GetRequests());
						return (tmp!=0)?tmp:sortcmp(knownfile1->statistic.GetAllTimeRequests(), knownfile2->statistic.GetAllTimeRequests());
d1331 9
a1339 3
					case SFL_COLUMN_ACCEPTED:
						tmp=sortcmp(knownfile1->statistic.GetAccepts(), knownfile2->statistic.GetAccepts());
						return (tmp!=0)?tmp:sortcmp(knownfile1->statistic.GetAllTimeAccepts(), knownfile2->statistic.GetAllTimeAccepts());
d1341 9
a1349 3
					case SFL_COLUMN_TRANSFERRED:
						tmp=sortcmp(knownfile1->statistic.GetTransferred(), knownfile2->statistic.GetTransferred());
						return (tmp!=0)?tmp:sortcmp(knownfile1->statistic.GetAllTimeTransferred(), knownfile2->statistic.GetAllTimeTransferred());
d1351 10
a1360 20
					case SFL_COLUMN_COMPLETESRC:
						{
							double f1= CompleteSourcesCmpValue(knownfile1, false);
							double f2= CompleteSourcesCmpValue(knownfile2, false);
							return sortcmp(f1, f2);
						}
					case SFL_COLUMN_PARTTRAFFIC:
					case SFL_COLUMN_UPLOADS:
						{
							tmp=sortcmp(knownfile1->statistic.GetCompleteReleases(), knownfile2->statistic.GetCompleteReleases());
							if (tmp!=0) return tmp;

							double d1=(double)knownfile1->statistic.GetAllTimeTransferred()/knownfile1->GetFileSize();
							double d2=(double)knownfile2->statistic.GetAllTimeTransferred()/knownfile2->GetFileSize();
							return sortcmp(d1, d2);
						}
					case SFL_COLUMN_FOLDER:
						{
							return sortcmp(knownfile1->GetPath(), knownfile2->GetPath());
						}
d1362 2
d1365 3
a1367 2
			case 2:
				switch(listSorter->selected())
d1369 4
a1372 2
					case SFL_COLUMN_REQUESTS:
						return sortcmp(knownfile1->statistic.GetAllTimeRequests(), knownfile2->statistic.GetAllTimeRequests());
d1374 4
a1377 2
					case SFL_COLUMN_ACCEPTED:
						return sortcmp(knownfile1->statistic.GetAllTimeAccepts(), knownfile2->statistic.GetAllTimeAccepts());
d1379 3
a1381 19
					case SFL_COLUMN_TRANSFERRED:
						return sortcmp(knownfile1->statistic.GetAllTimeTransferred(), knownfile2->statistic.GetAllTimeTransferred());

					case SFL_COLUMN_COMPLETESRC:
						{
							double f1= CompleteSourcesCmpValue(knownfile1, true);
							double f2= CompleteSourcesCmpValue(knownfile2, true);
							return sortcmp(f1, f2);
						}

					case SFL_COLUMN_PARTTRAFFIC:
					case SFL_COLUMN_UPLOADS:
						{
							double d1=(double)knownfile1->statistic.GetAllTimeTransferred()/knownfile1->GetFileSize();
							double d2=(double)knownfile2->statistic.GetAllTimeTransferred()/knownfile2->GetFileSize();

							return sortcmp(d1, d2);
						}
				}
d1385 2
d1974 2
a1975 1
			if (itemdata->isFile) break;	//Cax2 14/01/03	bugfix
d1978 2
a1979 1
			if(itemdata) delete itemdata;
@


1.172
log
@Removed unused code called "offered files to server".
@
text
@d1837 1
d1844 1
a1844 1
			if(t)
d1850 1
a1850 1
				brush.CreateSolidBrush(GetTrafficColor(static_cast<double>(t)/ps));
d1865 1
a1865 1
				if(t)
d1867 1
a1867 1
					pen.CreatePen(PS_SOLID, 0, GetTrafficColor(t/bpp));
d1880 1
a1880 1
				if(t)
d1882 1
a1882 1
					pen.CreatePen(PS_SOLID, 0, GetTrafficColor(t/bpp));
@


1.171
log
@Minor improvement for the previous change.
@
text
@a32 2
// #define _SHOW_UNOFFERED_FILES_

d294 1
a294 1
	if (!g_eMuleApp.m_pdlgEmule->IsRunning())
a298 3
	if (pSharedFile == NULL)
		return;

d372 1
a372 1
				strBuffer.Format(_T("%i (%i)"), as, a);
a708 6
		case WM_SFL_UPDATEOFFEREDITEMS:
		{
			UpdateOfferedItems();
			bHandled = true;
			break;
		}
a1145 2
	EMULE_TRY

d1150 2
d1173 1
a1173 1
	        	return 0;
d1374 1
a1374 1
	if (!::IsWindow(m_hWnd))
a1378 3
	if(toupdate == NULL)
		return;

d1405 1
a1405 1
	UINT			iCalcFlag = (DT_SINGLELINE|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS);
d1434 1
a1434 7
	#ifdef _SHOW_UNOFFERED_FILES_
		if ((!file->GetOfferedToServer()) && (g_eMuleApp.m_pServerConnect->IsConnected()))
			dc->SetTextColor(RGB(224,32,32));
		else
		{
	#endif
			int	iSysColor = COLOR_WINDOWTEXT;
d1436 4
a1439 4
			if (file->IsPartFile())
				iSysColor = COLOR_GRAYTEXT;
			else if (file->GetJumpstartEnabled())
				iSysColor = COLOR_HIGHLIGHT;
d1441 1
a1441 4
			dc->SetTextColor(::GetSysColor(iSysColor));
	#ifdef _SHOW_UNOFFERED_FILES_
		}
	#endif
d1858 1
a1858 1
		for(int x=0; x<use; x++)
a2299 12
void CSharedFilesCtrl::UpdateOfferedItems()
{
	EMULE_TRY

#ifdef _SHOW_UNOFFERED_FILES_
	if (GetItemCount())
		RedrawItems(0, GetItemCount()-1);
#endif

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@


1.170
log
@Middle mouse click opens comment dialog (in Shared files window).
@
text
@d2420 1
a2420 1
	if (pMsg->message == WM_MBUTTONUP)
a2435 1

d2440 3
a2442 3
					CCommentDialog dialog(pFile);
					dialog.DoModal();
					UpdateItem(pFile, false);
@


1.169
log
@Unified display of file permission and upload file priority;
Removed displaying of the file folder for every file part.
@
text
@d2420 27
@


1.168
log
@Don't use 32 bit color resources if OS/comctl32.dll doesn't support it and some other minor changes/optimizations.
@
text
@d306 3
a308 42

	uint32	dwResId;

	if (pSharedFile->IsULAutoPrioritized())
	{
		switch (pSharedFile->GetULPriority())
		{
			case PR_LOW:
				dwResId = IDS_PRIOAUTOLOW;
				break;
			case PR_NORMAL:
				dwResId = IDS_PRIOAUTONORMAL;
				break;
			case PR_HIGH:
				dwResId = IDS_PRIOAUTOHIGH;
				break;
			case PR_RELEASE:
				dwResId = IDS_PRIOAUTORELEASE;
				break;
		}
	}
	else
	{
		switch (pSharedFile->GetULPriority())
		{
			case PR_VERYLOW:
				dwResId = IDS_PRIOVERYLOW;
				break;
			case PR_LOW:
				dwResId = IDS_PRIOLOW;
				break;
			case PR_NORMAL:
				dwResId = IDS_PRIONORMAL;
				break;
			case PR_HIGH:
				dwResId = IDS_PRIOHIGH;
				break;
			case PR_RELEASE:
				dwResId = IDS_PRIORELEASE;
				break;
		}
	}
a310 20

	if (pSharedFile->GetJumpstartEnabled())
	{
		strBuffer.Format(_T("JumpStart[%s]"), GetResString(dwResId));
	}
	else
	{
		GetResString(&strBuffer, dwResId);
	}
	SetItemText(itemnr, SFL_COLUMN_PRIORITY, strBuffer);

	if (pSharedFile->GetPermissions() == PERM_NOONE)
		SetItemText(itemnr,SFL_COLUMN_PERMISSION, GetResString(IDS_HIDDEN));
	else if (pSharedFile->GetPermissions() == PERM_FRIENDS)
		SetItemText(itemnr,SFL_COLUMN_PERMISSION, GetResString(IDS_FSTATUS_FRIENDSONLY));
	else
		SetItemText(itemnr,SFL_COLUMN_PERMISSION, GetResString(IDS_FSTATUS_PUBLIC));

	SetItemText(itemnr, SFL_COLUMN_FILEID, HashToString(pSharedFile->GetFileHash()));

a399 3

			//--- column folders ---
			SetItemText(iSubItemIdx, SFL_COLUMN_FOLDER, pSharedFile->GetPath());
d601 1
a601 1
				((bJustOne && itemdata->knownFile->GetPermissions() ==  PERM_NOONE) ? MF_CHECKED : MF_UNCHECKED),
d604 1
a604 1
				((bJustOne && itemdata->knownFile->GetPermissions() ==  PERM_FRIENDS) ? MF_CHECKED : MF_UNCHECKED),
d607 1
a607 1
				((bJustOne && itemdata->knownFile->GetPermissions() ==  PERM_ALL) ? MF_CHECKED : MF_UNCHECKED),
a783 1
	uint32							dwResId;
a968 1
							dwResId = IDS_PRIOVERYLOW;
a972 1
							dwResId = IDS_PRIOLOW;
a976 1
							dwResId = IDS_PRIONORMAL;
a980 1
							dwResId = IDS_PRIOHIGH;
a984 1
							dwResId = IDS_PRIORELEASE;
a989 16
							switch(file->GetULPriority())
							{
								case PR_RELEASE:
									dwResId = IDS_PRIOAUTORELEASE;
									break;
								case PR_HIGH:
									dwResId = IDS_PRIOAUTOHIGH;
									break;
								case PR_NORMAL:
									dwResId = IDS_PRIOAUTONORMAL;
									break;
								default:
								case PR_LOW:
									dwResId = IDS_PRIOAUTOLOW;
									break;
							}
d992 1
a992 5
					if (file->GetJumpstartEnabled())
						strBuffer.Format(_T("JumpStart[%s]"), GetResString(dwResId));
					else
						GetResString(&strBuffer, dwResId);
					SetItemText(iSel, SFL_COLUMN_PRIORITY, strBuffer);
a1048 3

				file = itemdata->knownFile;

d1051 1
a1054 1
						{
a1055 1
							SetItemText(iSel,SFL_COLUMN_PERMISSION,GetResString(IDS_HIDDEN));
d1057 1
a1057 1
						}
a1058 1
						{
a1059 1
							SetItemText(iSel,SFL_COLUMN_PERMISSION,GetResString(IDS_FSTATUS_FRIENDSONLY));
d1061 1
a1061 1
						}
a1062 1
						{
a1063 1
							SetItemText(iSel,SFL_COLUMN_PERMISSION,GetResString(IDS_FSTATUS_PUBLIC));
a1064 1
						}
d1066 1
d1098 1
a1098 20
							switch(file->GetULPriority())
							{
								default:
								case PR_VERYLOW:
									dwResId = IDS_PRIOVERYLOW;
									break;
								case PR_LOW:
									dwResId = (file->IsULAutoPrioritized()) ? IDS_PRIOAUTOLOW : IDS_PRIOLOW;
									break;
								case PR_NORMAL:
									dwResId = (file->IsULAutoPrioritized()) ? IDS_PRIOAUTONORMAL : IDS_PRIONORMAL;
									break;
								case PR_HIGH:
									dwResId = (file->IsULAutoPrioritized()) ? IDS_PRIOAUTOHIGH : IDS_PRIOHIGH;
									break;
								case PR_RELEASE:
									dwResId = (file->IsULAutoPrioritized()) ? IDS_PRIOAUTORELEASE : IDS_PRIORELEASE;
									break;
							}
							SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(dwResId));
d1114 1
a1114 21
							switch(file->GetULPriority())
							{
								default:
								case PR_VERYLOW:
									dwResId = IDS_PRIOVERYLOW;
									break;
								case PR_LOW:
									dwResId = (file->IsULAutoPrioritized()) ? IDS_PRIOAUTOLOW : IDS_PRIOLOW;
									break;
								case PR_NORMAL:
									dwResId = (file->IsULAutoPrioritized()) ? IDS_PRIOAUTONORMAL : IDS_PRIONORMAL;
									break;
								case PR_HIGH:
									dwResId = (file->IsULAutoPrioritized()) ? IDS_PRIOAUTOHIGH : IDS_PRIOHIGH;
									break;
								case PR_RELEASE:
									dwResId = (file->IsULAutoPrioritized()) ? IDS_PRIOAUTORELEASE : IDS_PRIORELEASE;
									break;
							}
							strBuffer.Format(_T("JumpStart[%s]"), GetResString(dwResId));
							SetItemText(iSel, SFL_COLUMN_PRIORITY, strBuffer);
a1603 1
				case SFL_COLUMN_FOLDER:
@


1.167
log
@Add sources possibly received from global search (official).
Added missing translations in case countryflag.dll / ip-to-country.cvs is not found.
Notifier informs if a new version is available (not annoying, but still more likely
 to be noticed than just a log line).
Added 'Folder' column to Shared files window.
Prevent adding install/working dirs (\Webserver, \Db...) to Shared files.
+ some other minor changes/fixes.
@
text
@d147 1
a147 1
	m_imageList.Create(16, 16, ILC_COLOR32 | ILC_MASK, ELEMENT_COUNT(s_auIconResID), 0);
@


1.166
log
@Enabled shared files view permission settings (all, friends only, noone).
(have been reminded of this forgotten column when I saw it in tooltips :))
@
text
@d79 1
d126 2
a127 1
		{ LVCFMT_LEFT,  100 }	//SFL_COLUMN_COMPLETESRC
d204 2
a205 1
		IDS_SF_COMPLETESRC	//SFL_COLUMN_COMPLETESRC
d409 2
a431 25
		/*
			switch(pSharedFile->GetPartPriority(itemdata->part))
			{
			  case PR_VERYLOW:
				  SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOVERYLOW));
				  break;

			  case PR_LOW:
				  SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOLOW));
				  break;

			  case PR_NORMAL:
				  SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIONORMAL));
				  break;

			  case PR_HIGH:
				  SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOHIGH));
				  break;

			  case PR_RELEASE:
				  SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIORELEASE));
				  break;
			}
		*/

d460 2
a461 2
			//--- redraw bar ---
			//itemdata->repaintBar=true;
d1464 1
a1464 1
							return sortcmp(f1, f2);	// netwolf: complete sources (zegzav )
d1475 6
a1480 1
						}					}
d1498 1
a1498 1
							return sortcmp(f1, f2);	// netwolf: complete sources (zegzav )
a1627 1
		//--- 0..8 are the emule classic columns ---
d1661 1
a1726 1
			//--- 0..8 are the emule classic columns ---
d1739 1
@


1.165
log
@Fixed hidden part drawing on part traffic bar when there was no transfer of the part {DoubleT}.
@
text
@a357 1
/*
d359 1
a359 1
		SetItemText(itemnr,SFL_COLUMN_PERMISSION,"Hidden");
d361 1
a361 1
		SetItemText(itemnr,SFL_COLUMN_PERMISSION,"Friends Only");
d363 1
a363 2
		SetItemText(itemnr,SFL_COLUMN_PERMISSION,"Public Shared");
*/
a364 1
	SetItemText(itemnr, SFL_COLUMN_PERMISSION, GetResString(IDS_FSTATUS_PUBLIC));
d682 9
a690 3
			m_PermMenu.AppendMenu(MF_STRING, MP_PERMNONE, GetResString(IDS_FSTATUS_LOCKED));
			m_PermMenu.AppendMenu(MF_STRING, MP_PERMFRIENDS, GetResString(IDS_FSTATUS_FRIENDSONLY));
			m_PermMenu.AppendMenu(MF_STRING, MP_PERMALL, GetResString(IDS_FSTATUS_PUBLIC));
d692 1
a692 2
		//	todo enable when it works
		//	m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PermMenu.m_hMenu, (LPCTSTR)"Permissions");
a1145 1
	/*
a1146 10
		{
			if (((CPartFile*)file)->IsPartFile())
				AfxMessageBox(GetResString(IDS_ERR_NOPRIMCHANGE));
			else
			{
				file->SetPermissions(PERM_NOONE);
				SetItemText(iSel,SFL_COLUMN_PERMISSION,GetResString(IDS_HIDDEN));
			}
			break;
		}
d1148 1
d1150 3
a1152 3
			if (((CPartFile*)file)->IsPartFile())
				AfxMessageBox(GetResString(IDS_ERR_NOPRIMCHANGE));
			else
d1154 30
a1183 2
				file->SetPermissions(PERM_FRIENDS);
				SetItemText(iSel,SFL_COLUMN_PERMISSION,GetResString(IDS_FSTATUS_FRIENDSONLY));
a1186 7
		case MP_PERMALL:
		{
			file->SetPermissions(PERM_ALL);
			SetItemText(iSel, SFL_COLUMN_PERMISSION, GetResString(IDS_FSTATUS_PUBLIC));
			break;
		}
	*/
@


1.164
log
@Simplified way to display list labels with count.
@
text
@a1869 3
	if(statistic.GetAllTimeTransferred()==0 || statistic.partTraffic==NULL)
		return true;

d1875 3
a1879 1

d1893 1
a1893 1
				if(t)
d1908 1
a1908 1
				if(t)
d1923 1
a1923 1
				if(t)
@


1.163
log
@JumpStart was allowed for small files causing malfunction.
@
text
@d2431 1
a2431 1
	if (m_allYaKnow == false)
d2433 1
d2435 1
a2435 3
		{
			strCounter.Format(GetResString(IDS_STILLTOHASH), GetItemCount(), g_eMuleApp.m_pdlgEmule->m_iFilesToBeHashed);
		}
d2437 1
a2437 4
		{
			strCounter.Format(_T(" (%u)"),GetItemCount());
		}
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.SetDlgItemText(IDC_TRAFFIC_TEXT, GetResString(IDS_SF_FILES) + strCounter);
a2439 1
	{
d2441 1
a2441 2
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.SetDlgItemText(IDC_TRAFFIC_TEXT, strCounter);
	}
@


1.162
log
@changes in part control; hidden & blocked statuses are merged
@
text
@d674 3
a676 1
			if ((!itemdata->knownFile->IsPartFile() && m_allYaKnow == false) || (bIsJumpStart && m_allYaKnow))
d1223 1
a1223 1
					else
d1886 1
a1886 1
		for(int x=0; x<use; x++)
a1887 1
			//bool	boh=statistic.fileParent->GetPartStatus(x*bpp/PARTSIZE) != PR_PART_ON;
d1900 1
a1900 1
					dc->SelectObject(pOldPen);		// FoRcHa
@


1.161
log
@Faster image lists icon loading; reduced memory usage.
@
text
@d419 1
a419 4
			//--- xrmb:partprio ---
			switch(pSharedFile->GetPartStatus(itemdata->part))
			{
			  case PR_PART_ON:
d421 1
a421 2
				  break;
			  case PR_PART_HIDDEN:
a422 5
				  break;
			  case PR_PART_OFF:
				  SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_SF_BLOCKED));
				  break;
			}
a724 1
			m_SharedFilesMenu.AppendMenu(uFlag, MP_SFL_PARTOFF, GetResString(IDS_SF_PARTOFF));
d868 1
a868 1
		itemdata = (sfl_itemdata*)GetItemData(iSel);
d871 1
a871 1
		if (itemdata->isFile)
a1101 1
		case MP_SFL_PARTOFF:
a1103 16
			byte	setTo;
			switch(wParam)
			{
				case MP_SFL_PARTON:
					setTo=PR_PART_ON;
					break;

				case MP_SFL_PARTOFF:
					setTo=PR_PART_OFF;
					break;

				case MP_SFL_PARTHIDDEN:
					setTo=PR_PART_HIDDEN;
					break;
			}

d1105 1
d1111 2
a1112 3
				itemdata = (sfl_itemdata*)GetItemData(iSel);
				file = itemdata->knownFile;
				if (itemdata->isFile == false)
d1114 2
a1115 1
					if (file->IsPartFile() == false)
d1117 1
a1117 2
						file->SetPartStatus(itemdata->part, setTo);
						switch(setTo)
d1119 14
a1132 11
							case PR_PART_ON:
								SetItemText(iSel, SFL_COLUMN_PRIORITY, _T(""));
								break;

							case PR_PART_OFF:
								SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_SF_BLOCKED));
								break;

							case PR_PART_HIDDEN:
								SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_HIDDEN));
								break;
d1137 3
a1139 1
			RedrawItems(0, GetItemCount());
d1182 1
a1182 1
				itemdata=(sfl_itemdata*)GetItemData(iSel);
a1535 2
			RedrawItems(i,i);

d1886 2
a1887 1
			bool	boh=statistic.fileParent->GetPartStatus(x*bpp/PARTSIZE)!=PR_PART_ON;
d2087 5
a2091 15
					int setTo=MP_SFL_PARTON;
					switch(itemdataParent->knownFile->GetPartStatus(itemdataParent->part))
					{
						case PR_PART_ON:
							setTo=PR_PART_HIDDEN;
							break;
						case PR_PART_HIDDEN:
							setTo=PR_PART_OFF;
							break;
						case PR_PART_OFF:
						default:
							setTo=PR_PART_ON;
							break;
					}
					itemdataParent->knownFile->SetPartStatus(itemdataParent->part, setTo);
@


1.160
log
@Unified GUI strings for "file hash" (removed duplicate,
new full form is "File Hash" instead of "FileID").
@
text
@d145 1
a145 1
	m_imageList.Create(16,16,ILC_COLOR32|ILC_MASK,0,10);
@


1.159
log
@Preferences storage reorganization and minor optimization.
@
text
@d196 1
a196 1
		IDS_FILEID,			//SFL_COLUMN_FILEID
@


1.158
log
@1) statistic for file priority
2) optimization in category processing
@
text
@a37 16
enum
{
	SFL_COLUMN_FILENAME=0,
	SFL_COLUMN_FILESIZE,
	SFL_COLUMN_TYPE,
	SFL_COLUMN_PRIORITY,
	SFL_COLUMN_PERMISSION,
	SFL_COLUMN_FILEID,
	SFL_COLUMN_REQUESTS,
	SFL_COLUMN_ACCEPTED,
	SFL_COLUMN_TRANSFERRED,
	SFL_COLUMN_PARTTRAFFIC,
	SFL_COLUMN_UPLOADS,
	SFL_COLUMN_COMPLETESRC
};

d69 1
a69 1
	m_listSorter.init(12);
@


1.157
log
@SSWQ
@
text
@d318 1
a318 1
	SetItemText(itemnr, SFL_COLUMN_TYPE, pSharedFile->GetFileType(true));
d1480 1
a1480 1
						return _tcsicmp(knownfile1->GetFileType(true), knownfile2->GetFileType(true));
@


1.156
log
@Faster shortcuts handling.
@
text
@d322 1
a322 1
	if (pSharedFile->IsAutoPrioritized())
d324 1
a324 1
		switch (pSharedFile->GetPriority())
d342 1
a342 1
		switch (pSharedFile->GetPriority())
d677 1
a677 1
			bool		bTmpFlag = (bJustOne && !itemdata->knownFile->IsAutoPrioritized());
d681 1
a681 1
				((bTmpFlag && itemdata->knownFile->GetPriority() == PR_VERYLOW) ? MF_CHECKED : MF_UNCHECKED),
d684 1
a684 1
				((bTmpFlag && itemdata->knownFile->GetPriority() == PR_LOW) ? MF_CHECKED : MF_UNCHECKED),
d687 1
a687 1
				((bTmpFlag && itemdata->knownFile->GetPriority() == PR_NORMAL) ? MF_CHECKED : MF_UNCHECKED),
d690 1
a690 1
				((bTmpFlag && itemdata->knownFile->GetPriority() == PR_HIGH) ? MF_CHECKED : MF_UNCHECKED),
d693 1
a693 1
				((bTmpFlag && itemdata->knownFile->GetPriority() == PR_RELEASE) ? MF_CHECKED : MF_UNCHECKED),
d696 1
a696 1
				((bJustOne && itemdata->knownFile->IsAutoPrioritized()) ? MF_CHECKED : MF_UNCHECKED),
d1067 1
a1067 1
					file->SetAutoPriority(false);
d1073 1
a1073 1
							file->SetPriority(PR_VERYLOW);
d1078 1
a1078 1
							file->SetPriority(PR_LOW);
d1083 1
a1083 1
							file->SetPriority(PR_NORMAL);
d1088 1
a1088 1
							file->SetPriority(PR_HIGH);
d1093 1
a1093 1
							file->SetPriority(PR_RELEASE);
d1098 1
a1098 1
							file->SetAutoPriority(true);
d1100 1
a1100 1
							switch(file->GetPriority())
d1237 1
a1237 1
							switch(file->GetPriority())
d1244 1
a1244 1
									dwResId = (file->IsAutoPrioritized()) ? IDS_PRIOAUTOLOW : IDS_PRIOLOW;
d1247 1
a1247 1
									dwResId = (file->IsAutoPrioritized()) ? IDS_PRIOAUTONORMAL : IDS_PRIONORMAL;
d1250 1
a1250 1
									dwResId = (file->IsAutoPrioritized()) ? IDS_PRIOAUTOHIGH : IDS_PRIOHIGH;
d1253 1
a1253 1
									dwResId = (file->IsAutoPrioritized()) ? IDS_PRIOAUTORELEASE : IDS_PRIORELEASE;
d1272 1
a1272 1
							switch(file->GetPriority())
d1279 1
a1279 1
									dwResId = (file->IsAutoPrioritized()) ? IDS_PRIOAUTOLOW : IDS_PRIOLOW;
d1282 1
a1282 1
									dwResId = (file->IsAutoPrioritized()) ? IDS_PRIOAUTONORMAL : IDS_PRIONORMAL;
d1285 1
a1285 1
									dwResId = (file->IsAutoPrioritized()) ? IDS_PRIOAUTOHIGH : IDS_PRIOHIGH;
d1288 1
a1288 1
									dwResId = (file->IsAutoPrioritized()) ? IDS_PRIOAUTORELEASE : IDS_PRIORELEASE;
d1483 1
a1483 1
						return sortcmp(m_p2p[knownfile1->GetPriority()], m_p2p[knownfile2->GetPriority()]);
@


1.155
log
@Improved string processing.
@
text
@d732 1
a732 1
					MP_OPENFOLDER, GetResString(IDS_OPENFOLDER) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShOpenFolder),SSP_TAB_PREFIX) );
d741 1
a741 1
				MP_CMT, GetResString(IDS_CMT_ADD) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShComments),SSP_TAB_PREFIX) );
d784 3
a786 3
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2KLink),SSP_TAB_PREFIX));
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkHtml),SSP_TAB_PREFIX));
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkSource),SSP_TAB_PREFIX));
d849 1
d2569 1
a2569 1
BOOL CSharedFilesCtrl::PreTranslateMessage(MSG* pMsg)
d2571 1
a2571 1
	if (pMsg->message == WM_KEYDOWN || pMsg->message == WM_SYSKEYDOWN)
a2573 2
		short nCode = GetCodeFromPressedKeys(pMsg);
		bool bJustOne  = (GetSelectedCount() == 1);
d2578 2
a2579 1
			sfl_itemdata *pItemData = reinterpret_cast<sfl_itemdata*>(GetItemData(GetNextSelectedItem(posSelClient)));
d2581 1
a2581 2
			if ( nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShOpenFolder) &&
				 !(pItemData->knownFile->IsPartFile()) && bJustOne )
d2583 4
a2586 1
				iMessage = MP_OPENFOLDER;
d2588 1
a2588 1
			else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShComments) && bJustOne)
d2590 2
a2591 1
				iMessage = MP_CMT;
@


1.154
log
@Unified list column creature;
Set list column labels only in one place to avoid future incorrections.
@
text
@d887 1
d1070 1
d1073 1
a1073 4
							if (file->GetJumpstartEnabled())
								strBuffer.Format(_T("JumpStart[%s]"), GetResString(IDS_PRIOVERYLOW));
							else
								strBuffer.Format(_T("%s"),GetResString(IDS_PRIOVERYLOW));
d1075 1
d1078 1
a1078 4
							if (file->GetJumpstartEnabled())
								strBuffer.Format(_T("JumpStart[%s]"), GetResString(IDS_PRIOLOW));
							else
								strBuffer.Format(_T("%s"),GetResString(IDS_PRIOLOW));
d1083 1
a1083 4
							if (file->GetJumpstartEnabled())
								strBuffer.Format(_T("JumpStart[%s]"), GetResString(IDS_PRIONORMAL));
							else
								strBuffer.Format(_T("%s"),GetResString(IDS_PRIONORMAL));
d1088 1
a1088 4
							if (file->GetJumpstartEnabled())
								strBuffer.Format(_T("JumpStart[%s]"), GetResString(IDS_PRIOHIGH));
							else
								strBuffer.Format(_T("%s"),GetResString(IDS_PRIOHIGH));
d1093 1
a1093 4
							if (file->GetJumpstartEnabled())
								strBuffer.Format(_T("JumpStart[%s]"), GetResString(IDS_PRIORELEASE));
							else
								strBuffer.Format(_T("%s"),GetResString(IDS_PRIORELEASE));
d1102 1
a1102 4
									if (file->GetJumpstartEnabled())
										strBuffer.Format(_T("JumpStart[%s]"), GetResString(IDS_PRIOAUTORELEASE));
									else
										strBuffer.Format(_T("%s"),GetResString(IDS_PRIOAUTORELEASE));
a1103 1

d1105 1
a1105 4
									if (file->GetJumpstartEnabled())
										strBuffer.Format(_T("JumpStart[%s]"), GetResString(IDS_PRIOAUTOHIGH));
									else
										strBuffer.Format(_T("%s"),GetResString(IDS_PRIOAUTOHIGH));
a1106 1

d1108 1
a1108 4
									if (file->GetJumpstartEnabled())
										strBuffer.Format(_T("JumpStart[%s]"), GetResString(IDS_PRIOAUTONORMAL));
									else
										strBuffer.Format(_T("%s"),GetResString(IDS_PRIOAUTONORMAL));
d1110 1
d1112 1
a1112 4
									if (file->GetJumpstartEnabled())
										strBuffer.Format(_T("JumpStart[%s]"), GetResString(IDS_PRIOAUTOLOW));
									else
										strBuffer.Format(_T("%s"),GetResString(IDS_PRIOAUTOLOW));
d1117 4
a1120 1

a1216 1
				uint32	dwResId;
@


1.153
log
@Some changes...
@
text
@d128 15
d158 2
a159 12
	InsertColumn(SFL_COLUMN_FILENAME, GetResString(IDS_DL_FILENAME), LVCFMT_LEFT, 250);
	InsertColumn(SFL_COLUMN_FILESIZE, GetResString(IDS_DL_SIZE), LVCFMT_RIGHT, 100);
	InsertColumn(SFL_COLUMN_TYPE, GetResString(IDS_TYPE), LVCFMT_LEFT, 50);
	InsertColumn(SFL_COLUMN_PRIORITY, GetResString(IDS_PRIORITY), LVCFMT_LEFT, 70);
	InsertColumn(SFL_COLUMN_PERMISSION, GetResString(IDS_PERMISSION), LVCFMT_LEFT, 100);
	InsertColumn(SFL_COLUMN_FILEID,	GetResString(IDS_FILEID), LVCFMT_LEFT, 220);
	InsertColumn(SFL_COLUMN_REQUESTS, GetResString(IDS_SF_REQUESTS), LVCFMT_LEFT, 100);
	InsertColumn(SFL_COLUMN_ACCEPTED, GetResString(IDS_SF_ACCEPTS),	LVCFMT_LEFT, 100);
	InsertColumn(SFL_COLUMN_TRANSFERRED, GetResString(IDS_SF_TRANSFERRED), LVCFMT_LEFT, 120);
	InsertColumn(SFL_COLUMN_COMPLETESRC, GetResString(IDS_SF_COMPLETESRC), LVCFMT_LEFT, 100);
	InsertColumn(SFL_COLUMN_PARTTRAFFIC,GetResString(IDS_SF_PARTTRAFFIC),LVCFMT_LEFT, 120);
	InsertColumn(SFL_COLUMN_UPLOADS,GetResString(IDS_SF_COLUPLOADS),LVCFMT_LEFT, 120);
@


1.152
log
@Minor improvement of rating icon drawing.
@
text
@d1699 1
a1699 1
					if (!g_eMuleApp.m_pGlobPrefs->GetDisableRatingIcons())
d2260 1
a2260 1
	if (!g_eMuleApp.m_pGlobPrefs->GetDisableRatingIcons())
@


1.151
log
@minor fix
@
text
@d1701 5
a1705 6
						if (!file->GetFileComment().IsEmpty())
							m_imageList.Draw(dc, file->GetFileRating(), CPoint(cur_rec.left - 4, cur_rec.top + 2), ILD_TRANSPARENT);
						else if (file->GetFileRating() != PF_RATING_NONE)
							m_imageList.Draw(dc, file->GetFileRating(), CPoint(cur_rec.left - 4, cur_rec.top + 2), ILD_TRANSPARENT);
						else
							m_imageList.Draw(dc, 6, CPoint(cur_rec.left - 4, cur_rec.top + 2), ILD_TRANSPARENT);
@


1.150
log
@Removed JumpStart localization (IDS_PRIOJUMPSTART) and changed Comments/Rating code on Shared Files.
@
text
@d2243 1
a2243 8
	if (g_eMuleApp.m_pGlobPrefs->GetDisableRatingIcons())
		return;

	DWORD		dwPos = GetMessagePos();
	CPoint		pt(LOWORD(dwPos), HIWORD(dwPos));
	POSITION	posSelClient = GetFirstSelectedItemPosition();

	ScreenToClient(&pt);
d2248 2
a2249 2
	int			iItemIndex = GetNextSelectedItem(posSelClient);
	CRect		rRect;
d2251 2
a2252 1
	GetItemRect(iItemIndex, &rRect, LVIR_BOUNDS);
d2254 1
a2254 3
	if (rRect.PtInRect(pt))
	{
		sfl_itemdata		*pItemDataParent = (sfl_itemdata*)GetItemData(iItemIndex);
d2256 2
a2257 2
		if (pItemDataParent == NULL)
			return;
d2259 1
a2259 2
		if (g_eMuleApp.m_pGlobPrefs->ShowFileTypeIcon())
			rRect.left += 19;
d2261 12
a2272 1
		CRect		rTestedArea(rRect.left + 3, rRect.top + 2, rRect.left + 11, rRect.top + 16);
d2274 1
a2274 3
		if (rTestedArea.PtInRect(pt))
		{
			CKnownFile	*pKnownFile = pItemDataParent->knownFile;
d2276 1
a2276 1
			if (pKnownFile != NULL)
@


1.149
log
@minor change
@
text
@d125 2
a126 1
		IDI_RATING_EXCELLENT
d361 1
a361 1
		strBuffer.Format(_T("%s[%s]"), GetResString(IDS_PRIOJUMPSTART), GetResString(dwResId));
d697 1
a697 1
				m_menuPriority.AppendMenu(MF_STRING | (bIsJumpStart ? MF_CHECKED : MF_UNCHECKED), MP_JUMPSTART, _T("Jumpstart"));
d1067 1
a1067 1
								strBuffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOVERYLOW));
d1074 1
a1074 1
								strBuffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOLOW));
d1082 1
a1082 1
								strBuffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIONORMAL));
d1090 1
a1090 1
								strBuffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOHIGH));
d1098 1
a1098 1
								strBuffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIORELEASE));
d1110 1
a1110 1
										strBuffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTORELEASE));
d1117 1
a1117 1
										strBuffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTOHIGH));
d1124 1
a1124 1
										strBuffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTONORMAL));
d1130 1
a1130 1
										strBuffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTOLOW));
d1308 1
a1308 1
							strBuffer.Format(_T("%s[%s]"), GetResString(IDS_PRIOJUMPSTART), GetResString(dwResId));
d1703 5
d2276 1
a2276 1
			if (pKnownFile != NULL && !pKnownFile->GetFileComment().IsEmpty())
@


1.148
log
@small correction
@
text
@d1695 1
a1695 1
						cur_rec.left += 16 + 3;
d1701 2
a1702 2
							m_imageList.Draw(dc, file->GetFileRating(), CPoint(cur_rec.left - 3, cur_rec.top + 2), ILD_TRANSPARENT);
						cur_rec.left += 11;
d2264 1
a2264 1
		CRect		rTestedArea(rRect.left + 4, rRect.top + 2, rRect.left + 12, rRect.top + 16);
@


1.147
log
@Added clickable own rating icon in shared files list
@
text
@d110 1
a110 1
	if(m_pSCM)
d112 2
@


1.146
log
@Now Report Fake and Check Fake both work correctly with Mozilla/Firefox, updated fakecheck links in webservices.dat
@
text
@d64 1
d116 10
d153 4
d175 1
a175 1
void CSharedFilesCtrl::SortInit(int iSortCode) // Cax2 sortdlg
d1688 1
a1688 1
					if(g_eMuleApp.m_pGlobPrefs->ShowFileTypeIcon())
d1692 1
a1692 1
							::ImageList_Draw(g_eMuleApp.GetSystemImageList(), iImage, dc->GetSafeHdc(), cur_rec.left, cur_rec.top, ILD_TRANSPARENT);
d1695 7
d1708 1
a1708 1
				case SFL_COLUMN_COMPLETESRC: //netwolf: complete sources
d1789 1
a1789 1
				case SFL_COLUMN_COMPLETESRC: // netwolf: complete sources (zegzav )
d1794 1
a1794 1
					if (g_eMuleApp.m_pGlobPrefs->DoUsePT())	//Cax2 05/01/03
d1857 1
a1857 1
			m_pOldBrush = dc->SelectObject(&brush);		//eklmn: select a new brush
d1859 1
a1859 1
			dc->SelectObject(m_pOldBrush);	//eklmn: recover an old brush
d1863 1
a1863 1
			m_pOldBrush = dc->SelectObject(&brush);		//eklmn: select a new brush
d1866 1
a1866 1
			dc->SelectObject(m_pOldBrush);	//eklmn: recover an old brush
d2185 1
a2185 1
		if(g_eMuleApp.m_pGlobPrefs->DoUsePT() && file->GetPartCount()>1)	//Cax2 05/01/03
d2229 50
@


1.145
log
@Allow to remove from JumpStart a file that was removed from share
@
text
@d719 1
a719 1
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_FAKE_REPORT,GetResString(IDS_FAKE_REPORT)); //FakeCheck
d938 1
a938 1
			ShellExecute(NULL, NULL, "http://donkeyfakes.gambri.net/report.php?link="+file->CreateED2kLink(), NULL, g_eMuleApp.m_pGlobPrefs->GetAppDir(), SW_SHOWDEFAULT);
@


1.144
log
@Faster list header localizations.
@
text
@d655 1
d676 1
a676 1
			if (!itemdata->knownFile->IsPartFile() && (m_allYaKnow == false))
d679 1
a679 3
				m_menuPriority.AppendMenu( MF_STRING |
					((itemdata->knownFile->GetJumpstartEnabled()) ? MF_CHECKED : MF_UNCHECKED),
					MP_JUMPSTART, _T("Jumpstart") );
@


1.143
log
@Updated URLs for fake check/report.
@
text
@d51 1
a51 1
	SFL_COLUMN_COMPLETESRC,
d182 16
d202 4
a205 2
		CHeaderCtrl* pHeaderCtrl = GetHeaderCtrl();
		HDITEM hdi;
a206 1
		CString strRes;
d208 6
a213 59
		strRes = GetResString(IDS_DL_FILENAME);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_FILENAME, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_DL_SIZE);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_FILESIZE, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_TYPE);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_TYPE, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_PRIORITY);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_PRIORITY, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_PERMISSION);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_PERMISSION, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_FILEID);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_FILEID, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_SF_REQUESTS);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_REQUESTS, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_SF_ACCEPTS);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_ACCEPTED, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_SF_TRANSFERRED);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_TRANSFERRED, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_SF_COMPLETESRC);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_COMPLETESRC, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_SF_PARTTRAFFIC);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_PARTTRAFFIC, &hdi);
		strRes.ReleaseBuffer();

		strRes = GetResString(IDS_SF_COLUPLOADS);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_UPLOADS, &hdi);
		strRes.ReleaseBuffer();
d215 1
a215 1
		// Localization
d347 1
a347 1
		strBuffer = GetResString(dwResId);
@


1.142
log
@Provide parameters and then file names for antivirus applications should be more compatible.
@
text
@d975 1
a975 1
			ShellExecute(NULL, NULL, "http://donkeyfakes.gambri.net/report/index.php?link2="+file->CreateED2kLink(), NULL, g_eMuleApp.m_pGlobPrefs->GetAppDir(), SW_SHOWDEFAULT);
@


1.141
log
@Fixed bugs with AV-support; reverted unneeded changes, removed redundant try/catch (thanks to Aw3 !)
@
text
@d985 1
d990 2
a992 2
					strBuffer += ConcatFullPath(selectedList.ElementAt(0)->GetPath(), selectedList.ElementAt(0)->GetFileName());
					strBuffer += _T("\" ");
a995 1
			strBuffer += g_eMuleApp.m_pGlobPrefs->GetAVParams();
@


1.140
log
@minor changes, fixes and improvements
@
text
@d987 6
a992 2
				strBuffer += ConcatFullPath(selectedList.ElementAt(0)->GetPath(), selectedList.ElementAt(0)->GetFileName());
				strBuffer += _T(' ');
@


1.139
log
@Improved string processing.
@
text
@d322 3
@


1.138
log
@optimization and formatting
@
text
@a981 2
			CString	strBuffer;

d984 2
a985 1
				strBuffer += ConcatFullPath(selectedList.ElementAt(0)->GetPath(), selectedList.ElementAt(0)->GetFileName()) + _T(" ");
@


1.137
log
@Support for external antivirus program + removed SUI preferences + minor changes
@
text
@d320 1
a320 1
void CSharedFilesCtrl::UpdateFile(CKnownFile* file, uint32 itemnr, bool resort)
d324 1
a324 1
	if(file == NULL)
d327 2
a328 2
	//--- like everywhere else i replace the columnumbers ---
	CString buffer, sPriority;
d330 1
a330 2
	SetItemText(itemnr,SFL_COLUMN_FILESIZE,CastItoXBytes(file->GetFileSize()));
	SetItemText(itemnr,SFL_COLUMN_TYPE,file->GetFileType(true));
d332 1
a332 1
	if (file->IsAutoPrioritized())
d334 15
a348 8
		if (file->GetPriority() == PR_LOW)
			sPriority = GetResString(IDS_PRIOAUTOLOW);
		else if (file->GetPriority() == PR_NORMAL)
			sPriority = GetResString(IDS_PRIOAUTONORMAL);
		else if (file->GetPriority() == PR_HIGH)
			sPriority = GetResString(IDS_PRIOAUTOHIGH);
		else if (file->GetPriority() == PR_RELEASE)
			sPriority = GetResString(IDS_PRIOAUTORELEASE);
d352 25
a376 10
		if (file->GetPriority() == PR_VERYLOW)
			sPriority = GetResString(IDS_PRIOVERYLOW);
		else if (file->GetPriority() == PR_LOW)
			sPriority = GetResString(IDS_PRIOLOW);
		else if (file->GetPriority() == PR_NORMAL)
			sPriority = GetResString(IDS_PRIONORMAL);
		else if (file->GetPriority() == PR_HIGH)
			sPriority = GetResString(IDS_PRIOHIGH);
		else if (file->GetPriority() == PR_RELEASE)
			sPriority = GetResString(IDS_PRIORELEASE);
d378 1
a378 1
	if (file->GetJumpstartEnabled())
d380 1
a380 2
		buffer.Format(_T("%s[%s]"), GetResString(IDS_PRIOJUMPSTART),sPriority);
		sPriority = buffer;
d382 1
a382 1
	SetItemText(itemnr,SFL_COLUMN_PRIORITY, sPriority);
d384 2
a385 1
	/*if (file->GetPermissions() == PERM_NOONE)
d387 1
a387 1
	else if (file->GetPermissions() == PERM_FRIENDS)
d390 11
a400 8
		SetItemText(itemnr,SFL_COLUMN_PERMISSION,"Public Shared");*/
	SetItemText(itemnr,SFL_COLUMN_PERMISSION,GetResString(IDS_FSTATUS_PUBLIC));
	SetItemText(itemnr,SFL_COLUMN_FILEID, HashToString(file->GetFileHash()));

	uint64 a=file->statistic.GetRequests();			//katsyonak - 4GB bugfix
	uint64 b=file->statistic.GetAllTimeRequests();
	if(a || b)
		buffer.Format(_T("%I64u (%I64u)"), a, b);	//Cax2 - display bugfix
d402 2
a403 2
		buffer = _T("");
	SetItemText(itemnr, SFL_COLUMN_REQUESTS, buffer);
d405 4
a408 4
	a=file->statistic.GetAccepts();
	b=file->statistic.GetAllTimeAccepts();
	if(a || b)
		buffer.Format(_T("%I64u (%I64u)"), a, b);	//Cax2 - display bugfix
d410 2
a411 2
		buffer = _T("");
	SetItemText(itemnr, SFL_COLUMN_ACCEPTED, buffer);
d413 3
a415 3
	a=file->statistic.GetTransferred();
	b=file->statistic.GetAllTimeTransferred();
	if(a || b)
d417 1
a417 1
		buffer.Format(_T("%s (%s)"), CastItoXBytes(a), CastItoXBytes(b));
d420 2
a421 2
		buffer = _T("");
	SetItemText(itemnr, SFL_COLUMN_TRANSFERRED, buffer);
d424 7
a430 5
	a=file->GetFileSize();
	b=file->statistic.GetAllTimeTransferred();
	double	cr=file->statistic.GetCompleteReleases();
	if(a && cr+b!=0.0 )
		buffer.Format(_T("%0.2f (%0.2f)"), cr, (double)b/a);
d432 2
a433 2
		buffer = _T("");
	SetItemText(itemnr,SFL_COLUMN_UPLOADS,buffer);
d446 1
a446 1
			switch(file->GetPartStatus(itemdata->part))
d448 9
a456 11
			case PR_PART_ON:
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, _T(""));
				break;

			case PR_PART_HIDDEN:
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_HIDDEN));
				break;

			case PR_PART_OFF:
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_SF_BLOCKED));
				break;
d460 1
a460 1
			if (file->IsPartFile() && (((CPartFile*)file)->GetRemainingBlocksInPart(itemdata->part) != 0))
d465 2
a466 2
			/*
			switch(file->GetPartPriority(itemdata->part))
d468 19
a486 19
			case PR_VERYLOW:
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOVERYLOW));
				break;

			case PR_LOW:
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOLOW));
				break;

			case PR_NORMAL:
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIONORMAL));
				break;

			case PR_HIGH:
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOHIGH));
				break;

			case PR_RELEASE:
				SetItemText(iSubItemIdx, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIORELEASE));
				break;
d488 1
a488 1
			*/
d491 4
a494 4
			uint32	as=file->statistic.GetPartAccepted(itemdata->part, true);
			uint32	a=file->statistic.GetPartAccepted(itemdata->part, false);
			if(as || a)
				buffer.Format(_T("%i (%i)"), as, a);
d496 2
a497 2
				buffer = _T("");
			SetItemText(iSubItemIdx, SFL_COLUMN_ACCEPTED, buffer);
d500 3
a502 3
			uint32 ts=file->GetPartTraffic(itemdata->part, true);
			uint32 t=file->GetPartTraffic(itemdata->part);
			if(ts || t)
d504 1
a504 1
				buffer.Format(_T("%s (%s)"), CastItoXBytes(ts), CastItoXBytes(t));
d507 2
a508 2
				buffer = _T("");
			SetItemText(iSubItemIdx, SFL_COLUMN_TRANSFERRED, buffer);
d511 3
a513 3
			double	cr=file->statistic.GetCompletePartReleases(itemdata->part);
			if(ts || cr!=0.0)
				buffer.Format(_T("%0.2f (%0.2f)"), cr, (double)t/file->GetPartSize(itemdata->part));
d515 2
a516 2
				buffer = _T("");
			SetItemText(iSubItemIdx, SFL_COLUMN_UPLOADS, buffer);
d523 1
a523 1
	if (file->IsPartFile())
d525 1
a525 1
		buffer.Format(_T("%u"), ((CPartFile*)file)->GetCompleteSourcesCount());
d530 1
a530 1
		file->GetCompleteSourcesRange(&nCompleteSourcesCountLo, &nCompleteSourcesCountHi);
d534 1
a534 1
				buffer= _T("");
d536 1
a536 1
				buffer.Format(_T("< %u"), nCompleteSourcesCountHi);
d539 1
a539 1
			buffer.Format(_T("%u"), nCompleteSourcesCountLo);
d541 1
a541 1
			buffer.Format(_T("%u - %u"), nCompleteSourcesCountLo, nCompleteSourcesCountHi);
d543 1
a543 1
	SetItemText(itemnr,SFL_COLUMN_COMPLETESRC,buffer);
d639 1
a639 1
		if(itemdata) 
@


1.136
log
@Allow void context menu (when nothing is selected);
Disable ED2K link submenu for file parts;
Remove Delete File from file part context menu;
Removed Delete File and Statistics Reset from void menu,
because they can be applied only to selected items;
Improved string processing.
@
text
@d720 4
d956 13
a1128 32
				/*
				else
				{
					switch(wParam)
					{
					case MP_PRIOVERYLOW:
						file->SetPartPriority(itemdata->part, PR_VERYLOW);
						SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOVERYLOW));
						break;

					case MP_PRIOLOW:
						file->SetPartPriority(itemdata->part, PR_LOW);
						SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOLOW));
						break;

					case MP_PRIONORMAL:
						file->SetPartPriority(itemdata->part, PR_NORMAL);
						SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIONORMAL));
						break;

					case MP_PRIOHIGH:
						file->SetPartPriority(itemdata->part, PR_HIGH);
						SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOHIGH));
						break;

					case MP_PRIORELEASE:
						file->SetPartPriority(itemdata->part, PR_RELEASE);
						SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIORELEASE));
						break;
					}
				}
			*/
a1320 1
//--- i replaced the sorting, too much hassles ---
@


1.135
log
@Fixed part status localization in shared file list.
@
text
@d635 1
a635 7
	int 			iSel = GetSelectionMark();

	if (iSel == -1)
		return;

	sfl_itemdata   *itemdata = (sfl_itemdata *)GetItemData(iSel);

d637 3
a639 4

	CTitleMenu	   	m_SharedFilesMenu;
	CMenu		   	m_menuPriority;
	CMenu		   	m_PermMenu;
d647 5
a655 1
	// add priority switcher
d660 1
d737 2
d740 4
a743 1
/*		if (itemdata->isFile)
d745 2
a746 1
			m_menuPriority.EnableMenuItem(MP_PRIOAUTO,g_eMuleApp.m_pGlobPrefs->IsUAPEnabled() ? MF_ENABLED:MF_GRAYED);
a747 1
*/
a749 4
	m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARALLSTATS, GetResString(IDS_SF_RESETALLSTATS));
	m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARSTATS, GetResString(IDS_SF_RESETSESSTATS));

	m_SharedFilesMenu.AppendMenu(MF_SEPARATOR);
a751 2
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_DELKNOWN, GetResString(IDS_SF_DELETE));
		m_SharedFilesMenu.AppendMenu(MF_SEPARATOR);
d763 9
a771 5
		m_ed2kMenu.CreateMenu();
		m_ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2KLink),SSP_TAB_PREFIX));
		m_ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkHtml),SSP_TAB_PREFIX));
		m_ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkSource),SSP_TAB_PREFIX));
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP|MF_ENABLED,(UINT_PTR)m_ed2kMenu.m_hMenu, GetResString(IDS_ED2KLINKFIX));
d832 20
d861 1
a861 1
		RunURL(file, g_eMuleApp.m_strWebServiceURLArray.GetAt(wParam - MP_WEBURL) );
d866 1
a866 1
	CString							buffer;
a887 2
			CString	str;

d890 1
a890 1
				str += selectedList.ElementAt(0)->CreateED2kLink();
d893 1
a893 1
					str += _T("\r\n");
d895 1
a895 1
			g_eMuleApp.CopyTextToClipboard(str);
a899 2
			CString	str;

d902 1
a902 1
				str += selectedList.ElementAt(0)->CreateHTMLED2kLink();
d905 1
a905 1
					str += _T("\r\n");
d907 1
a907 1
			g_eMuleApp.CopyTextToClipboard(str);
a914 2
				CString	str;

d917 1
a917 1
					str += selectedList.ElementAt(0)->CreateED2kSourceLink();
d920 1
a920 1
						str += _T("\r\n");
d922 1
a922 1
				g_eMuleApp.CopyTextToClipboard(str);
a959 16
		case MP_SFL_ALLYAKNOW:
		{
			if(m_allYaKnow)
				ShowFileList(g_eMuleApp.m_pSharedFilesList);
			else
				ShowKnownList();
			break;
		}
		case MP_SFL_MERGEKNOWN:
		{
			SetRedraw(FALSE);
			g_eMuleApp.m_pKnownFilesList->merge();
			ShowKnownList();
			SetRedraw(TRUE);
			break;
		}
d1039 1
a1039 1
								buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOVERYLOW));
d1041 1
a1041 1
								buffer.Format(_T("%s"),GetResString(IDS_PRIOVERYLOW));
d1046 1
a1046 1
								buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOLOW));
d1048 1
a1048 1
								buffer.Format(_T("%s"),GetResString(IDS_PRIOLOW));
d1054 1
a1054 1
								buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIONORMAL));
d1056 1
a1056 1
								buffer.Format(_T("%s"),GetResString(IDS_PRIONORMAL));
d1062 1
a1062 1
								buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOHIGH));
d1064 1
a1064 1
								buffer.Format(_T("%s"),GetResString(IDS_PRIOHIGH));
d1070 1
a1070 1
								buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIORELEASE));
d1072 1
a1072 1
								buffer.Format(_T("%s"),GetResString(IDS_PRIORELEASE));
d1082 1
a1082 1
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTORELEASE));
d1084 1
a1084 1
										buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTORELEASE));
d1089 1
a1089 1
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTOHIGH));
d1091 1
a1091 1
										buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTOHIGH));
d1096 1
a1096 1
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTONORMAL));
d1098 1
a1098 1
										buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTONORMAL));
d1102 1
a1102 1
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTOLOW));
d1104 1
a1104 1
										buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTOLOW));
d1110 1
a1110 1
					SetItemText(iSel,SFL_COLUMN_PRIORITY, buffer);
a1164 1

d1238 2
a1239 1
				int iSel=this->GetNextSelectedItem(pos);
d1260 1
d1262 1
a1262 1
									SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOVERYLOW));
d1265 1
a1265 4
									if (file->IsAutoPrioritized())
										SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOAUTOLOW));
									else
										SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOLOW));
d1268 1
a1268 4
									if (file->IsAutoPrioritized())
										SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTONORMAL));
									else
										SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIONORMAL));
d1271 1
a1271 4
									if (file->IsAutoPrioritized())
										SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTOHIGH));
									else
										SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOHIGH));
d1274 1
a1274 4
									if (file->IsAutoPrioritized())
										SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTORELEASE));
									else
										SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIORELEASE));
d1277 1
d1295 1
d1297 1
a1297 1
									buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOVERYLOW));
d1300 1
a1300 8
									if (file->IsAutoPrioritized())
									{
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOAUTOLOW));
									}
									else
									{
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOLOW));
									}
d1303 2
a1304 8
									if (file->IsAutoPrioritized())
									{
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOAUTONORMAL));
									}
									else
									{
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIONORMAL));
									}										break;
d1306 2
a1307 8
									if (file->IsAutoPrioritized())
									{
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOAUTOHIGH));
									}
									else
									{
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOHIGH));
									}										break;
d1309 2
a1310 8
									if (file->IsAutoPrioritized())
									{
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOAUTORELEASE));
									}
									else
									{
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIORELEASE));
									}										break;
d1312 2
a1313 1
							SetItemText(iSel,SFL_COLUMN_PRIORITY, buffer);
@


1.134
log
@Find in lists
@
text
@d1189 1
a1189 1
								SetItemText(iSel, SFL_COLUMN_PRIORITY, _T("blocked"));
d1193 1
a1193 1
								SetItemText(iSel, SFL_COLUMN_PRIORITY, _T("hidden"));
@


1.133
log
@Enabled Priority and Comments for known files.
@
text
@d80 2
@


1.132
log
@added priority indicators (context menu)
@
text
@d657 1
a657 1
	if (!bNone && (m_allYaKnow == false))
d684 1
a684 1
			if (!itemdata->knownFile->IsPartFile())
d703 1
a703 3
			m_ShellContextMenu.CreateMenu();
			uFlag = MF_STRING | MF_GRAYED;
			if (bJustOne && !itemdata->knownFile->IsPartFile())
d705 5
a709 1
				uFlag &= ~MF_GRAYED;
d711 1
a711 1
				CString	strBuffer = ConcatFullPath(itemdata->knownFile->GetPath(), itemdata->knownFile->GetFileName());
d713 7
a719 2
				m_pSCM = new CShellContextMenu(m_hWnd, strBuffer);
				m_pSCM->SetMenu(&m_ShellContextMenu);
a720 4
			m_SharedFilesMenu.AppendMenu(uFlag | MF_POPUP, (UINT_PTR)m_ShellContextMenu.m_hMenu, GetResString(IDS_SHELLCONTEXT));
			m_SharedFilesMenu.AppendMenu( MF_STRING |
				((itemdata->knownFile->IsPartFile() || !(bJustOne)) ? MF_GRAYED : MF_ENABLED),
				MP_OPENFOLDER, GetResString(IDS_OPENFOLDER) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShOpenFolder),SSP_TAB_PREFIX) );
@


1.131
log
@Removed unreqired nested enable/disable list redrawings;
Removed double list clean;
Removed double check;
Removed unrequired string initializations;
Old stuff removal.
@
text
@d662 22
a683 6
			m_menuPriority.AppendMenu(MF_STRING,MP_PRIOVERYLOW,GetResString(IDS_PRIOVERYLOW));
			m_menuPriority.AppendMenu(MF_STRING,MP_PRIOLOW,GetResString(IDS_PRIOLOW));
			m_menuPriority.AppendMenu(MF_STRING,MP_PRIONORMAL,GetResString(IDS_PRIONORMAL));
			m_menuPriority.AppendMenu(MF_STRING,MP_PRIOHIGH, GetResString(IDS_PRIOHIGH));
			m_menuPriority.AppendMenu(MF_STRING,MP_PRIORELEASE, GetResString(IDS_PRIORELEASE));
			m_menuPriority.AppendMenu(MF_STRING,MP_PRIOAUTO, GetResString(IDS_PRIOAUTO));
@


1.130
log
@Reload button now is disabled whenever there are files to be hashed
@
text
@a604 2
	SetRedraw(FALSE);

a619 2
	SetRedraw(TRUE);

a716 3
		//This menu option is for testing..
		//m_SharedFilesMenu.AppendMenu(MF_STRING,Irc_SetSendLink,GetResString(IDS_IRC_ADDLINKTOIRC));

a813 1
	CString			buffer = _T("");
d817 2
a818 1
	if (wParam >= MP_WEBURL && wParam <= MP_WEBURL + 64) {
d824 1
a843 7
		case Irc_SetSendLink:
		{
			if (selectedCount > 1)
				break;
			g_eMuleApp.m_pdlgEmule->m_wndIRC.SetSendFileString(file->CreateED2kLink());
			break;
		}
d846 1
a846 1
			CString	str = _T("");
d860 1
a860 1
			CString	str = _T("");
d869 1
a869 1
		    g_eMuleApp.CopyTextToClipboard(str);
d877 1
a877 1
				CString	str = _T("");
a910 10
	//	KuSh: do we need to add a menu or just remove this case that never happen
		case MP_OPEN:
		{
			if (selectedCount > 1)
				break;
			buffer.Format(_T("%s\\%s"),file->GetPath(),file->GetFileName());
			AddLogLine(false, _T("%s"), buffer);
			ShellOpenFile(buffer);
			break;
		}
a912 2
			if (selectedCount > 1)
				break;
a934 1
			DeleteAllItems();
a1090 1

@


1.129
log
@Fixed a crash on Known File deletion in case when the file is still in Shared Files list.
@
text
@d2476 4
a2479 2
void CSharedFilesCtrl::ShowFilesCount() {
	CString counter;
d2484 1
a2484 1
			counter.Format((GetResString(IDS_STILLTOHASH)), GetItemCount(), g_eMuleApp.m_pdlgEmule->m_iFilesToBeHashed);
d2488 1
a2488 1
			counter.Format(_T(" (%u)"),GetItemCount() );
d2490 1
a2490 1
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.SetDlgItemText(IDC_TRAFFIC_TEXT, GetResString(IDS_SF_FILES) + counter );
d2494 7
a2500 2
		counter.Format(_T("%s (%u)"), GetResString(IDS_KNOWNFILES), GetItemCount());
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.SetDlgItemText(IDC_TRAFFIC_TEXT, counter);
@


1.128
log
@Final fix for download list crash after file deletion.
@
text
@d977 1
a977 2
				RemoveFile(pKnownFile);
				g_eMuleApp.m_pKnownFilesList->RemoveFile(pKnownFile);
@


1.127
log
@prevent call of KnowFile detructor for PartFile object (crash reported by Aw3)
@
text
@d693 1
a693 1
			if (bJustOne && !itemdata->knownFile->IsPartFile(true))
d971 8
a978 7
				CKnownFile* pKnownFile = selectedList.ElementAt(0);
				// don't allow to delete partfile over shared list
				if (pKnownFile && !pKnownFile->IsPartFile(true))
				{
					RemoveFile(pKnownFile);
					g_eMuleApp.m_pKnownFilesList->RemoveFile(pKnownFile);
				}
d1239 1
a1239 1
        case MP_JUMPSTART:
@


1.126
log
@Corrected list title update (removed multiple title update during switching between Shared & Known file lists).
@
text
@d693 1
a693 1
			if (bJustOne && !itemdata->knownFile->IsPartFile())
d971 7
a977 2
				RemoveFile(selectedList.ElementAt(0));
				g_eMuleApp.m_pKnownFilesList->RemoveFile(selectedList.ElementAt(0));
@


1.125
log
@corrected crash by "merge" over roll back :) added couple SetRedraw
@
text
@d173 1
a173 1
	SortItems(&SortProc, (LPARAM)&m_listSorter);
d267 1
a267 1
	SetRedraw(false);
d283 1
a283 1
	SetRedraw(true);
d302 1
a302 1
	for(uint32 i=0; i<records; i++)
d310 1
d526 1
a526 1
		SortItems(&SortProc, (LPARAM)&m_listSorter);
d531 6
a558 1
	ShowFilesCount();
d899 1
a899 1
			    g_eMuleApp.CopyTextToClipboard(str);
d1382 1
a1382 1
	SortItems(&SortProc, (LPARAM)&m_listSorter);
d2151 2
a2152 2
    if(i->iItem == -1)
        return;
@


1.124
log
@replaced  pos != 0 to pos != NULL
@
text
@d287 1
a287 1

d294 1
a294 1
	SetRedraw(false);
d304 5
a308 1
		ShowFile(list->ElementAt(i), false);
d312 1
a312 1
	SetRedraw(true);
d316 1
a316 1

d556 1
a556 1

d594 1
a594 1

d597 4
d609 2
a610 1
		if(itemdata) delete itemdata;
d612 1
a612 2
	return CListCtrl::DeleteAllItems();
	//return true;
d616 3
a618 1
	return false;
d620 1
a620 1

d953 1
d957 1
@


1.123
log
@minor improvements
@
text
@d272 1
a272 1
	for(POSITION pos = in_sflist->m_mapSharedFiles.GetStartPosition();pos != 0;)
@


1.122
log
@indication of completed chunks with an * in Shared Files list
@
text
@d407 1
a407 1
		for(uint16 part=0; part<itemdataParent->parts; part++)
d409 2
a410 1
			sfl_itemdata* itemdata=(sfl_itemdata*)GetItemData(itemnr+1+part);
d416 1
a416 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, _T(""));
d420 1
a420 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, GetResString(IDS_HIDDEN));
d424 1
a424 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, GetResString(IDS_SF_BLOCKED));
d429 2
a430 7
			if (file->IsPartFile())
			{
				if (((CPartFile*)file)->GetRemainingBlocksInPart(itemdata->part) == 0)
					buffer = _T("*");
				else
					buffer = _T("");
			}
d432 1
a432 2
				buffer = _T("*");
			SetItemText(itemnr+1+part, SFL_COLUMN_FILESIZE, buffer);
d438 1
a438 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOVERYLOW));
d442 1
a442 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOLOW));
d446 1
a446 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIONORMAL));
d450 1
a450 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOHIGH));
d454 1
a454 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIORELEASE));
d466 1
a466 1
			SetItemText(itemnr+1+part, SFL_COLUMN_ACCEPTED, buffer);
d477 1
a477 1
			SetItemText(itemnr+1+part, SFL_COLUMN_TRANSFERRED, buffer);
d485 1
a485 1
			SetItemText(itemnr+1+part, SFL_COLUMN_UPLOADS, buffer);
@


1.121
log
@minor improvements
@
text
@d427 12
d1807 1
@


1.120
log
@Solved potential crashes when filename contains '%'.
@
text
@d281 1
a281 1
	g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.GetDlgItem(IDC_BN_SWITCHALLKNOWN)->SetWindowText(GetResString(IDS_SF_SHOWALLKF));
d306 1
a306 1
	g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.GetDlgItem(IDC_BN_SWITCHALLKNOWN)->SetWindowText(GetResString(IDS_SF_SHOWALLSF));
d2455 1
a2455 1
			counter.Format(_T(" (%i)"),GetItemCount() );
d2457 1
a2457 1
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.GetDlgItem(IDC_TRAFFIC_TEXT)->SetWindowText(GetResString(IDS_SF_FILES) + counter );
d2461 2
a2462 2
		counter.Format(_T(" (%i)"),GetItemCount() );
		g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.GetDlgItem(IDC_TRAFFIC_TEXT)->SetWindowText(GetResString(IDS_KNOWNFILES) + counter );
@


1.119
log
@replaced TrackPopupMenu over TrackPopupMenuEx
@
text
@d907 1
a907 1
			AddLogLine(false, buffer);
@


1.118
log
@Improved string processing
@
text
@d743 1
a743 1
	m_SharedFilesMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON,point.x,point.y,this);
@


1.117
log
@Improved context menu creation;
Multiple link copy to clipboard is more compatible;
Shell Context submenu for Shared Files looks like submenu even when disabled.
@
text
@d674 1
a674 1
				CString	buffer = itemdata->knownFile->GetPath();
d676 1
a676 4
				if (buffer.Right(1) != _T('\\'))
					buffer += _T('\\');
				buffer += itemdata->knownFile->GetFileName();
				m_pSCM = new CShellContextMenu(m_hWnd,buffer);
@


1.116
log
@formatting;
removed duplicate code for Starting a Search and Creates ED2KLinks;
first few changes in both code and gui to implement the new search method (ED2KProtocol), don't worry :)
@
text
@a620 3
	bool			bJustOne = (GetSelectedCount() == 1); //Cax2 faster code
	bool			bNone = (GetSelectedCount() == 0);

d631 1
d633 3
a635 8
	if (m_allYaKnow)
	{
		m_SharedFilesMenu.AddMenuTitle(GetResString(IDS_KNOWNFILES));
	}
	else
	{
		m_SharedFilesMenu.AddMenuTitle(GetResString(IDS_SHAREDFILES));
	}
d638 1
a638 1
	if (!bNone)
d640 53
a692 1
		if (m_allYaKnow == false)
d694 1
a694 20
			if (itemdata->isFile)
			{
				m_menuPriority.CreateMenu();
				m_menuPriority.AppendMenu(MF_STRING,MP_PRIOVERYLOW,GetResString(IDS_PRIOVERYLOW));
				m_menuPriority.AppendMenu(MF_STRING,MP_PRIOLOW,GetResString(IDS_PRIOLOW));
				m_menuPriority.AppendMenu(MF_STRING,MP_PRIONORMAL,GetResString(IDS_PRIONORMAL));
				m_menuPriority.AppendMenu(MF_STRING,MP_PRIOHIGH, GetResString(IDS_PRIOHIGH));
				m_menuPriority.AppendMenu(MF_STRING,MP_PRIORELEASE, GetResString(IDS_PRIORELEASE));
				m_menuPriority.AppendMenu(MF_STRING,MP_PRIOAUTO, GetResString(IDS_PRIOAUTO));
				if (!itemdata->knownFile->IsPartFile())
				{
	                m_menuPriority.AppendMenu(MF_STRING|MF_SEPARATOR);
					m_menuPriority.AppendMenu(MF_STRING,MP_JUMPSTART, _T("Jumpstart"));
					m_menuPriority.CheckMenuItem(MP_JUMPSTART,itemdata->knownFile->GetJumpstartEnabled()?MF_CHECKED:MF_UNCHECKED);
				}
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_menuPriority.m_hMenu, GetResString(IDS_PRIORITY));
			}
			else
			{
				uFlag = itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED;
d696 4
a699 20
				m_SharedFilesMenu.AppendMenu(MF_STRING|uFlag, MP_SFL_PARTON, GetResString(IDS_SF_PARTON));
				m_SharedFilesMenu.AppendMenu(MF_STRING|uFlag, MP_SFL_PARTHIDDEN, GetResString(IDS_SF_PARTHIDDEN));
				m_SharedFilesMenu.AppendMenu(MF_STRING|uFlag, MP_SFL_PARTOFF, GetResString(IDS_SF_PARTOFF));
			}

			if(itemdata->isFile)
			{
			//	add permission switcher
				m_PermMenu.CreateMenu();
				m_PermMenu.AppendMenu(MF_STRING,MP_PERMNONE,	GetResString(IDS_FSTATUS_LOCKED));
				m_PermMenu.AppendMenu(MF_STRING,MP_PERMFRIENDS,	GetResString(IDS_FSTATUS_FRIENDSONLY));
				m_PermMenu.AppendMenu(MF_STRING,MP_PERMALL,		GetResString(IDS_FSTATUS_PUBLIC));

			//	todo enable when it works
			//	m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PermMenu.m_hMenu, (LPCTSTR)"Permissions");
				m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_menuPriority.m_hMenu,bNone ? MF_GRAYED:MF_ENABLED);
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
				if(bJustOne && !itemdata->knownFile->IsPartFile())
				{
					CString	buffer = itemdata->knownFile->GetPath();
d701 2
a702 17
					if (buffer.Right(1) != _T('\\'))
						buffer += _T('\\');
					buffer += itemdata->knownFile->GetFileName();
					m_pSCM = new CShellContextMenu(m_hWnd,buffer);
					m_ShellContextMenu.CreateMenu();
					m_pSCM->SetMenu(&m_ShellContextMenu);
					m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_ShellContextMenu.m_hMenu, GetResString(IDS_SHELLCONTEXT));
				}
				else
					m_SharedFilesMenu.AppendMenu(MF_STRING|MF_GRAYED,NULL, GetResString(IDS_SHELLCONTEXT));
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPENFOLDER, GetResString(IDS_OPENFOLDER) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShOpenFolder),SSP_TAB_PREFIX));
				m_SharedFilesMenu.EnableMenuItem(MP_OPENFOLDER,((itemdata->knownFile->IsPartFile() || !(bJustOne)) ? MF_GRAYED:MF_ENABLED));
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD) + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShComments),SSP_TAB_PREFIX));
				m_SharedFilesMenu.EnableMenuItem(MP_CMT,(bJustOne) ? MF_ENABLED:MF_GRAYED);
				m_SharedFilesMenu.CheckMenuItem(MP_CMT, itemdata->knownFile->GetFileComment().IsEmpty() ? MF_UNCHECKED:MF_CHECKED);
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_FAKE_REPORT,GetResString(IDS_FAKE_REPORT)); //FakeCheck
			}
d704 1
a704 2
			//This menu option is for testing..
			//m_SharedFilesMenu.AppendMenu(MF_STRING,Irc_SetSendLink,GetResString(IDS_IRC_ADDLINKTOIRC));
d706 4
a709 6
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR);

/*			if (itemdata->isFile)
			{
				m_menuPriority.EnableMenuItem(MP_PRIOAUTO,g_eMuleApp.m_pGlobPrefs->IsUAPEnabled() ? MF_ENABLED:MF_GRAYED);
			}
a710 1
		}
d716 1
a716 1
	m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
d720 1
a720 1
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
d722 1
a722 1
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
d730 1
a730 1
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
d736 1
a736 3
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_ed2kMenu.m_hMenu, GetResString(IDS_ED2KLINKFIX));
		m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_ed2kMenu.m_hMenu,bNone ? MF_GRAYED:MF_ENABLED);
	}
a737 2
	if (!bNone)
	{
d742 1
a742 1
		uFlag = (counter == 0) ? MF_GRAYED:MF_STRING;
a743 1
		m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_menuWeb.m_hMenu,bJustOne ? MF_ENABLED:MF_GRAYED);
a747 21
//	KuSh: it's awfull, perhaps i will rewrite the entire function like the one in DownloadListCtrl
	if (!bNone)
	{
		if (m_allYaKnow == false)
		{
			if (itemdata->isFile)
			{
				m_menuPriority.DestroyMenu();
				m_PermMenu.DestroyMenu();
				if(bJustOne && !itemdata->knownFile->IsPartFile())
				{
					m_ShellContextMenu.DestroyMenu();
				}
			}
		}
		m_ed2kMenu.DestroyMenu();
		m_menuWeb.DestroyMenu();
	}

	m_SharedFilesMenu.DestroyMenu();

d753 2
d846 1
a846 1
					str += _T("\n");
d860 1
a860 1
					str += _T("\n");
d877 1
a877 1
						str += _T("\n");
@


1.115
log
@formatting, removed some ending space and minor changes
removed some menus memleak in sharedctrl
fixed new 'LATER' code
changed new paused/stopped file sorting
removed a space not meant to be there in french.rcu
update changelog
@
text
@a667 1
			//	KuSh: when does this happen ???
d874 1
a874 1
			while (selectedList.GetCount())
d888 1
a888 1
			while (selectedList.GetCount())
d905 1
a905 1
				while (selectedList.GetCount())
d980 1
a980 1
			while(selectedList.GetCount())
@


1.114
log
@Improved hash to string conversion
@
text
@d531 1
a531 1
	sfl_itemdata	*itemdata=new sfl_itemdata;
d533 5
a537 5
	itemdata->isFile=true;
	itemdata->isOpen=false;
	itemdata->knownFile=file;
	itemdata->part=0;
	itemdata->parts=0;
d564 4
a567 2
					sfl_itemdata* itemdataPart=(sfl_itemdata*)GetItemData(nItem+1);
					if (itemdataPart->isFile) break;	//Cax2 14/01/03	bugfix
d608 1
a608 1
	if(m_pSCM)
d611 1
a611 1
		m_pSCM=NULL;
d614 1
a614 1
	int iSel = GetSelectionMark();
d619 1
a619 1
	sfl_itemdata *itemdata=(sfl_itemdata *)GetItemData(iSel);
d621 4
a624 2
	bool	justOne = (GetSelectedCount() == 1); //Cax2 faster code
	bool	None = (GetSelectedCount() == 0);
d630 2
a631 1
	CMenu			scm;
d635 1
a635 1
	if(m_allYaKnow)
d645 1
a645 1
	if(!None)
d647 1
a647 1
		if(m_allYaKnow == false)
d649 1
a649 1
			if(itemdata->isFile)
d658 2
a659 1
				if(!itemdata->knownFile->IsPartFile()) {
d668 6
a673 6
				m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTON, GetResString(IDS_SF_PARTON));
				m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTON,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
				m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTHIDDEN, GetResString(IDS_SF_PARTHIDDEN));
				m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTHIDDEN,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
				m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTOFF, GetResString(IDS_SF_PARTOFF));
				m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTOFF,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
d678 1
a678 1
				// add permission switcher
d684 3
a686 3
				// todo enable when it works
				//m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PermMenu.m_hMenu, (LPCTSTR)"Permissions");
				m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_menuPriority.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
d688 1
a688 1
				if(justOne && !itemdata->knownFile->IsPartFile())
d690 4
a693 3
					CString buffer = itemdata->knownFile->GetPath();
					if (buffer.Right(1) != '\\')
						buffer += '\\';
d696 3
a698 3
					scm.CreateMenu();
					m_pSCM->SetMenu(&scm);
					m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)scm.m_hMenu, GetResString(IDS_SHELLCONTEXT));
d703 1
a703 1
				m_SharedFilesMenu.EnableMenuItem(MP_OPENFOLDER,((itemdata->knownFile->IsPartFile() || !(justOne)) ? MF_GRAYED:MF_ENABLED));
d705 1
a705 1
				m_SharedFilesMenu.EnableMenuItem(MP_CMT,(justOne) ? MF_ENABLED:MF_GRAYED);
d738 1
a738 1
	if(!None)
d747 1
a747 1
		m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_ed2kMenu.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
d750 12
a761 6
	int counter;
	CMenu m_menuWeb;
	m_menuWeb.CreateMenu();
	UpdateURLMenu(m_menuWeb,counter);
	UINT flag2;
	flag2=(counter==0) ? MF_GRAYED:MF_STRING;
d763 2
a764 1
	if(!None)
d766 14
a779 2
		m_SharedFilesMenu.AppendMenu(flag2|MF_POPUP,(UINT_PTR)m_menuWeb.m_hMenu, GetResString(IDS_WEBSERVICES));
		m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_menuWeb.m_hMenu,justOne ? MF_ENABLED:MF_GRAYED);
a781 2
	m_SharedFilesMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON,point.x,point.y,this);
	m_menuWeb.DestroyMenu();
d784 2
a785 1
	if(m_pSCM)
d787 1
a830 1
	CString buffer = _T("");
d835 8
a842 5
	sfl_itemdata* itemdata=(sfl_itemdata*)GetItemData(iSel);
	CKnownFile* file=itemdata->knownFile;
		if (wParam>=MP_WEBURL && wParam<=MP_WEBURL+64) {
			RunURL(file, g_eMuleApp.m_strWebServiceURLArray.GetAt(wParam-MP_WEBURL) );
		}
d845 5
a849 4
	UINT selectedCount = GetSelectedCount();
	CArray<CKnownFile*,CKnownFile*> selectedList;
	POSITION pos=GetFirstSelectedItemPosition();
	while(pos)
d851 3
a853 2
		int iSel=GetNextSelectedItem(pos);
		itemdata=(sfl_itemdata*)GetItemData(iSel);
d856 1
a856 1
		if(itemdata->isFile)
d865 2
a866 2
				if(selectedCount > 1) break;
				g_eMuleApp.m_pdlgEmule->m_wndIRC.SetSendFileString(file->CreateED2kLink());
d868 3
d872 2
a873 12
				{
					CString str;
					while(selectedList.GetCount())
					{
						str += selectedList.ElementAt(0)->CreateED2kLink();
						selectedList.RemoveAt(0);
						if(!selectedList.IsEmpty())
							str += "\n";
					}
					g_eMuleApp.CopyTextToClipboard(str);
					break;
				}
d875 10
d886 2
a887 12
				{
					CString str;
					while(selectedList.GetCount())
					{
						str += selectedList.ElementAt(0)->CreateHTMLED2kLink();
						selectedList.RemoveAt(0);
						if(!selectedList.IsEmpty())
							str += "\n";
					}
				    g_eMuleApp.CopyTextToClipboard(str);
					break;
				}
d889 10
d900 7
d908 8
a915 14
#ifdef OLD_SOCKETS_ENABLED
					if (g_eMuleApp.m_pServerConnect->IsConnected() || !g_eMuleApp.m_pServerConnect->IsLowID())
					{
						CString str;
						while(selectedList.GetCount())
						{
							str += selectedList.ElementAt(0)->CreateED2kSourceLink();
							selectedList.RemoveAt(0);
							if(!selectedList.IsEmpty())
								str += "\n";
						}
					    g_eMuleApp.CopyTextToClipboard(str);
					}
					else
d917 3
a919 3
						AfxMessageBox(GetResString(IDS_SOURCELINKFAILED));
				}
				break;
d921 4
d926 3
a928 1
				if(selectedCount > 1)
d930 1
a930 6
					POSITION pos = this->GetFirstSelectedItemPosition();
					while( pos != NULL )
					{
						file = (CKnownFile*)this->GetItemData(GetNextSelectedItem(pos));
					}
					break;
a931 1
				ShellExecute(NULL, NULL, "http://donkeyfakes.gambri.net/report/index.php?link2="+file->CreateED2kLink(), NULL, g_eMuleApp.m_pGlobPrefs->GetAppDir(), SW_SHOWDEFAULT);
d934 5
d940 6
a945 6
			{
				if(selectedCount > 1) break;
				buffer.Format(_T("%s\\%s"),file->GetPath(),file->GetFileName());
				AddLogLine(false, buffer);
				ShellOpenFile(buffer);
			}
d947 1
a947 1

d949 4
a952 4
			{
				if(selectedCount > 1) break;
				ShellOpenFile(file->GetPath());
			}
d954 1
a954 1

d956 5
a960 5
			{
				if(selectedCount > 1) break;
				CCommentDialog dialog(file);
				dialog.DoModal();
   			}
d962 1
a962 1

d964 1
d970 1
a970 1

d972 1
d977 1
a977 1

d979 3
d983 3
a985 7
				//--- TODO: ask if really delete ---
				while(selectedList.GetCount())
				{
					RemoveFile(selectedList.ElementAt(0));
					g_eMuleApp.m_pKnownFilesList->RemoveFile(selectedList.ElementAt(0));
					selectedList.RemoveAt(0);
				}
d988 1
a988 1

d991 2
a992 2
			{
				//--- TODO: ask if really erase ---
d994 2
a995 2
				bool		all=(wParam==MP_SFL_CLEARALLSTATS);
				CKnownFile	*lastfile=NULL;
d997 1
a997 4
				POSITION	pos=GetFirstSelectedItemPosition();
				while(pos)
				{
					int iSel=GetNextSelectedItem(pos);
d999 3
a1001 2
					itemdata=(sfl_itemdata*)GetItemData(iSel);
					file=itemdata->knownFile;
d1003 2
a1004 3
					//--- file selection? ---
					if(itemdata->isFile)
						itemdata->knownFile->statistic.resetStats(all);
d1006 6
a1011 3
					//--- part selection ---
					else
						itemdata->knownFile->statistic.resetPartTraffic(itemdata->part, all);
d1013 5
a1017 6
					if(file!=lastfile)
					{
						if(lastfile)
							UpdateItem(lastfile, false);
						lastfile=file;
					}
d1019 1
d1021 3
a1023 4
				if(lastfile)
					UpdateItem(lastfile, true);
				RedrawItems(0, GetItemCount());
			}
d1025 1
a1025 1

d1032 4
d1037 1
a1037 4
				POSITION pos = GetFirstSelectedItemPosition();
				while(pos != NULL)
				{
					int iSel=this->GetNextSelectedItem(pos);
d1039 2
a1040 1
					itemdata=(sfl_itemdata*)GetItemData(iSel);
d1042 4
a1045 82
					file=itemdata->knownFile;

					//--- is there a part in selection? ---
					if(itemdata->isFile)
					{
						file->SetAutoPriority(false);

						switch (wParam)
						{
							case MP_PRIOVERYLOW:
								file->SetPriority(PR_VERYLOW);
								if (file->GetJumpstartEnabled())
									buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOVERYLOW));
								else
									buffer.Format(_T("%s"),GetResString(IDS_PRIOVERYLOW));
								break;
							case MP_PRIOLOW:
								file->SetPriority(PR_LOW);
								if (file->GetJumpstartEnabled())
									buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOLOW));
								else
									buffer.Format(_T("%s"),GetResString(IDS_PRIOLOW));
								break;

							case MP_PRIONORMAL:
								file->SetPriority(PR_NORMAL);
								if (file->GetJumpstartEnabled())
									buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIONORMAL));
								else
									buffer.Format(_T("%s"),GetResString(IDS_PRIONORMAL));
								break;

							case MP_PRIOHIGH:
								file->SetPriority(PR_HIGH);
								if (file->GetJumpstartEnabled())
									buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOHIGH));
								else
									buffer.Format(_T("%s"),GetResString(IDS_PRIOHIGH));
								break;

							case MP_PRIORELEASE:
								file->SetPriority(PR_RELEASE);
								if (file->GetJumpstartEnabled())
									buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIORELEASE));
								else
									buffer.Format(_T("%s"),GetResString(IDS_PRIORELEASE));
								break;

							case MP_PRIOAUTO:
								file->SetAutoPriority(true);
								file->UpdateUploadAutoPriority();
								switch(file->GetPriority())
								{
									case PR_RELEASE:
										if (file->GetJumpstartEnabled())
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTORELEASE));
										else
											buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTORELEASE));
										break;

									case PR_HIGH:
										if (file->GetJumpstartEnabled())
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTOHIGH));
										else
											buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTOHIGH));
										break;

									case PR_NORMAL:
										if (file->GetJumpstartEnabled())
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTONORMAL));
										else
											buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTONORMAL));
										break;
									case PR_LOW:
										if (file->GetJumpstartEnabled())
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTOLOW));
										else
											buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTOLOW));
										break;
								}
								break;
						}
d1047 1
a1047 5
						SetItemText(iSel,SFL_COLUMN_PRIORITY, buffer);

					}
					/*
					else
a1048 2
						switch(wParam)
						{
d1050 5
a1054 2
							file->SetPartPriority(itemdata->part, PR_VERYLOW);
							SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOVERYLOW));
a1055 1

d1057 5
a1061 2
							file->SetPartPriority(itemdata->part, PR_LOW);
							SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOLOW));
d1065 5
a1069 2
							file->SetPartPriority(itemdata->part, PR_NORMAL);
							SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIONORMAL));
d1073 5
a1077 2
							file->SetPartPriority(itemdata->part, PR_HIGH);
							SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOHIGH));
d1081 39
a1119 2
							file->SetPartPriority(itemdata->part, PR_RELEASE);
							SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIORELEASE));
a1120 1
						}
d1122 34
a1155 1
				*/
d1157 1
d1160 1
a1160 1

d1164 3
d1168 7
a1174 6
				byte	setTo;
				switch(wParam)
				{
					case MP_SFL_PARTON:
						setTo=PR_PART_ON;
						break;
d1176 3
a1178 3
					case MP_SFL_PARTOFF:
						setTo=PR_PART_OFF;
						break;
d1180 1
a1180 3
					case MP_SFL_PARTHIDDEN:
						setTo=PR_PART_HIDDEN;
						break;
d1182 1
a1182 1
				}
d1184 3
a1186 1
				POSITION	pos = GetFirstSelectedItemPosition();
d1188 3
a1190 1
				while (pos)
d1192 1
a1192 5
					int	iSel = GetNextSelectedItem(pos);

					itemdata = (sfl_itemdata*)GetItemData(iSel);
					file = itemdata->knownFile;
					if (itemdata->isFile == false)
d1194 2
a1195 1
						if (file->IsPartFile() == false)
d1197 3
a1199 6
							file->SetPartStatus(itemdata->part, setTo);
							switch(setTo)
							{
								case PR_PART_ON:
									SetItemText(iSel, SFL_COLUMN_PRIORITY, _T(""));
									break;
d1201 3
a1203 3
								case PR_PART_OFF:
									SetItemText(iSel, SFL_COLUMN_PRIORITY, _T("blocked"));
									break;
d1205 3
a1207 4
								case PR_PART_HIDDEN:
									SetItemText(iSel, SFL_COLUMN_PRIORITY, _T("hidden"));
									break;
							}
a1210 1
				RedrawItems(0, GetItemCount());
d1212 1
d1214 4
a1217 2

	/*	case MP_PERMNONE:
d1226 1
a1226 1

d1228 1
d1237 1
a1237 1

d1239 1
d1243 1
d1246 6
d1253 1
a1253 7
				BOOL alreadyasked = FALSE;
				BOOL alreadynotified = FALSE;
				INT msgyes = 0;
				POSITION pos = GetFirstSelectedItemPosition();
				while(pos != NULL)
				{
					int iSel=this->GetNextSelectedItem(pos);
d1255 2
a1256 2
					itemdata=(sfl_itemdata*)GetItemData(iSel);
					file=itemdata->knownFile;
d1258 4
a1261 2
					//--- is there a part in selection? ---
					if(itemdata->isFile && !itemdata->knownFile->IsPartFile())
d1263 7
a1269 1
						if(file->GetJumpstartEnabled())
d1271 2
a1272 1
							if(alreadyasked != TRUE)
d1274 27
a1300 2
								msgyes = AfxMessageBox(GetResString(IDS_JS_DISABLE), MB_YESNO|MB_ICONEXCLAMATION|MB_DEFBUTTON2);
								alreadyasked = TRUE;
d1302 7
a1308 2

							if(msgyes == IDYES)
d1310 2
a1311 31
								file->SetJumpstartEnabled(false);
								switch(file->GetPriority())
								{
									case PR_VERYLOW:
										SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOVERYLOW));
										break;
									case PR_LOW:
										if (file->IsAutoPrioritized())
											SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOAUTOLOW));
										else
											SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOLOW));
										break;
									case PR_NORMAL:
										if (file->IsAutoPrioritized())
											SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTONORMAL));
										else
											SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIONORMAL));
										break;
									case PR_HIGH:
										if (file->IsAutoPrioritized())
											SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTOHIGH));
										else
											SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOHIGH));
										break;
									case PR_RELEASE:
										if (file->IsAutoPrioritized())
											SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTORELEASE));
										else
											SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIORELEASE));
										break;
								}
d1316 2
a1317 1
							if(file->IsJsComplete())
d1319 40
a1358 53
								if(alreadynotified != TRUE)
								{
									AfxMessageBox(GetResString(IDS_JS_COMPLETE), MB_OK|MB_ICONSTOP);
									alreadynotified = TRUE;
								}
							}
							else
							{
								file->SetJumpstartEnabled(true);
								switch(file->GetPriority())
								{
									case PR_VERYLOW:
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOVERYLOW));
										break;
									case PR_LOW:
										if (file->IsAutoPrioritized())
										{
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOAUTOLOW));
										}
										else
										{
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOLOW));
										}
										break;
									case PR_NORMAL:
										if (file->IsAutoPrioritized())
										{
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOAUTONORMAL));
										}
										else
										{
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIONORMAL));
										}										break;
									case PR_HIGH:
										if (file->IsAutoPrioritized())
										{
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOAUTOHIGH));
										}
										else
										{
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOHIGH));
										}										break;
									case PR_RELEASE:
										if (file->IsAutoPrioritized())
										{
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOAUTORELEASE));
										}
										else
										{
											buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIORELEASE));
										}										break;
								}
								SetItemText(iSel,SFL_COLUMN_PRIORITY, buffer);
d1360 1
d1366 1
d1368 1
d1373 1
@


1.113
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d364 1
a364 1
	SetItemText(itemnr,SFL_COLUMN_FILEID,FileHashToString(file->GetFileHash()));
@


1.112
log
@few changes and formatting + corrected a previous change that is not working
@
text
@d68 1
a68 1
uint8	CSharedFilesCtrl::m_p2p[8];
d1127 1
a1127 1
				uint8	setTo;
d2232 1
a2232 1
void CSharedFilesCtrl::SetColoring(uint8 mode)
d2261 1
a2261 1
void CSharedFilesCtrl::SetDisplay(uint8 mode, bool redraw)
d2367 1
a2367 1
		return RGB(255, (uint8)(255*(f-1)/2.0), 0);
d2371 1
a2371 1
		return RGB((uint8)(255*((6-f)/3.0)), 255, 0);
d2375 1
a2375 1
		return RGB(0, 255, (uint8)(255*((f-6)/4.0)));
d2379 1
a2379 1
		return RGB(0, (uint8)(255*((15-f)/5.0)), 255);
d2383 1
a2383 1
		return RGB((uint8)(255*((f-15)/6.0)), 0, 255);
d2387 1
a2387 1
		return RGB(255, (uint8)(255*((28-f)/7.0)), 255);
d2401 1
a2401 1
		return RGB(255, (uint8)(255*(f-1)), 0);
d2405 1
a2405 1
		return RGB((uint8)(255*((3-f))), 255, 0);
d2409 1
a2409 1
		return RGB(0, 255, (uint8)(255*((f-3))));
d2413 1
a2413 1
		return RGB(0, (uint8)(255*((5-f))), 255);
d2417 1
a2417 1
		return RGB((uint8)(255*((f-5))), 0, 255);
d2421 1
a2421 1
		return RGB(255, (uint8)(255*((7-f))), 255);
a2441 1

@


1.111
log
@removed MOBILE_MULE and JUMPSTART defines + minor improvements (thx aw3)
@
text
@d75 1
a75 1
	m_statusWidth=-1;
d80 1
a80 1
	m_allYaKnow=false;
d278 1
a278 1
	m_allYaKnow=false;
d300 1
a300 1
	m_allYaKnow=true;
d350 1
a350 1
	if (file->GetJumpstartEnabled()) 
d619 2
a620 2
	bool justOne=(GetSelectedCount()==1); //Cax2 faster code
	bool None=(GetSelectedCount()==0);
d642 1
a642 1
		if(m_allYaKnow==false)
d1282 1
a1282 1
										{											
d1292 1
a1292 1
										{											
d1301 1
a1301 1
										{											
d1310 1
a1310 1
										{											
d1641 1
a1641 1
		if(file->GetSharedFile()==false)
d1654 1
a1654 1
			int iSysColor = COLOR_WINDOWTEXT;
d2442 1
a2442 1
	
@


1.110
log
@Slight improvements
@
text
@a32 4
#if JUMPSTART
#define MP_JUMPSTART 14791
#endif

a99 1
#if JUMPSTART
a100 1
#endif
a349 1
#if JUMPSTART
a354 1
#endif
a652 1
#if JUMPSTART
a657 1
#endif
a1011 1
								#if JUMPSTART
a1014 1
								#endif
a1018 1
								#if JUMPSTART
a1021 1
								#endif
a1026 1
								#if JUMPSTART
a1029 1
								#endif
a1034 1
								#if JUMPSTART
a1037 1
								#endif
a1042 1
								#if JUMPSTART
a1045 1
								#endif
a1054 1
										#if JUMPSTART
a1057 1
										#endif
a1061 1
										#if JUMPSTART
a1064 1
										#endif
a1068 1
										#if JUMPSTART
a1071 1
										#endif
a1074 1
										#if JUMPSTART
a1077 1
										#endif
a1202 1
#if JUMPSTART
a1324 1
#endif
@


1.109
log
@a tab got lost somewhere...
@
text
@d1682 1
d1684 9
a1692 11
		if (file->IsPartFile())
		{
			dc->SetTextColor(::GetSysColor(COLOR_GRAYTEXT));
		}
		else if (file->GetJumpstartEnabled())
		{
			dc->SetTextColor(::GetSysColor(COLOR_HIGHLIGHT));
		}		
		else
		{
			dc->SetTextColor(::GetSysColor(COLOR_WINDOWTEXT));
d1694 1
d1698 2
a1699 1
	memcpy2(&cur_rec, &lpDrawItemStruct->rcItem, sizeof(RECT));
@


1.108
log
@FEATURE: Shared files: display downloading (incomplete) files in gray, Jumpstart files in slight blue
@
text
@d1694 1
a1694 1
	}
@


1.107
log
@formating
@
text
@d1683 10
d1695 1
@


1.106
log
@BUGFIX: proper display of auto priorized Jumpstart files + FEATURE: display known unshared files in different color (in Search window)
@
text
@d359 1
a359 1
			buffer.Format(_T("%s[%s]"), GetResString(IDS_PRIOJUMPSTART),sPriority);
d361 1
a361 1
		}
d363 1
a363 1
		SetItemText(itemnr,SFL_COLUMN_PRIORITY, sPriority);
d1316 1
a1316 1
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOLOW));
d1326 1
a1326 1
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIONORMAL));
d1335 1
a1335 1
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOHIGH));
d1344 1
a1344 1
										buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIORELEASE));
@


1.105
log
@selection fix
@
text
@d240 1
a240 1
		strRes = GetResString(IDS_SF_COMPLETESRC);	//netwolf: zegzav complete sources
d327 1
a327 1
	CString buffer;
d335 1
a335 1
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOAUTOLOW));
d337 1
a337 1
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOAUTONORMAL));
d339 1
a339 1
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOAUTOHIGH));
d341 1
a341 1
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOAUTORELEASE));
a344 1
		CString sPriority;
d355 1
d357 2
a358 1
		if (file->GetJumpstartEnabled()) {
d360 1
a360 1
			sPriority = buffer; //added BavarianSnail
a363 1
	}
d826 1
a826 1
	// for multiple selections
a895 1
				//MORPH START - Added by milobac, FakeCheck, FakeReport, Auto-updating
d1206 1
a1206 1
		case MP_PERMNONE:
d1230 1
d1310 6
d1317 1
d1320 6
d1327 1
a1327 1
										break;
d1329 6
d1336 1
a1336 1
										break;
d1338 6
d1345 1
a1345 1
										break;
@


1.104
log
@upload auto priority sets very well spread files to low prio + minor changes + cleanup
@
text
@d2526 1
a2526 1
		int iSel = GetSelectionMark();
d2528 3
a2530 2
		if (iSel == -1)
			return __super::PreTranslateMessage(pMsg);
d2532 21
a2552 1
		sfl_itemdata *pItemData = reinterpret_cast<sfl_itemdata*>(GetItemData(iSel));
d2554 5
a2558 26
		if ( nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShOpenFolder) &&
			 !(pItemData->knownFile->IsPartFile()) && bJustOne )
		{
			iMessage = MP_OPENFOLDER;
		}
		else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShComments) && bJustOne)
		{
			iMessage = MP_CMT;
		}
		else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2KLink))
		{
			iMessage = MP_GETED2KLINK;
		}
		else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkHtml))
		{
			iMessage = MP_GETHTMLED2KLINK;
		}
		else if (nCode == g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkSource))
		{
			iMessage = MP_GETSOURCEED2KLINK;
		}

		if (iMessage > 0)
		{
			PostMessage(WM_COMMAND, iMessage);
			return TRUE;
d2562 1
a2562 1
	return __super::PreTranslateMessage(pMsg);
@


1.103
log
@show remaining files to be hashed counter in shared files window + appropriate string change if Known files are shown + minor cleanup
@
text
@d95 1
a95 1
	m_listSorter.item(SFL_COLUMN_COMPLETESRC)->set(2,true);		// netwolf: complete sources (zegzav )
d102 1
a102 1
	m_p2p[PR_VERYHIGH]	= 4;
d334 3
a336 1
		if (file->GetPriority() == PR_NORMAL)
d340 1
a340 1
		else if (file->GetPriority() == PR_VERYHIGH)
d354 1
a354 1
		else if (file->GetPriority() == PR_VERYHIGH)
d454 1
a454 1
			case PR_VERYHIGH:
d659 1
a659 1
				m_menuPriority.AppendMenu(MF_STRING,MP_PRIOVERYHIGH, GetResString(IDS_PRIORELEASE));
d1002 1
a1002 1
		case MP_PRIOVERYHIGH:
d1060 2
a1061 2
							case MP_PRIOVERYHIGH:
								file->SetPriority(PR_VERYHIGH);
d1075 1
a1075 1
									case PR_VERYHIGH:
d1101 8
d1141 2
a1142 2
						case MP_PRIOVERYHIGH:
							file->SetPartPriority(itemdata->part, PR_VERYHIGH);
d1265 4
a1268 1
										SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOLOW));
d1282 1
a1282 1
									case PR_VERYHIGH:
d1318 1
a1318 1
									case PR_VERYHIGH:
@


1.102
log
@Formatting, name changes and deleting spaces and tabs at end of lines
@
text
@d283 3
a290 2
	m_allYaKnow=false;

d305 3
a315 2
	m_allYaKnow=true;

d2420 18
a2437 2
	counter.Format(_T(" (%i)"),GetItemCount() );
	g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.GetDlgItem(IDC_TRAFFIC_TEXT)->SetWindowText(GetResString(IDS_SF_FILES)+counter  );
@


1.101
log
@Formatting, comments, and name changes.
@
text
@d43 12
a54 12
{ 
	SFL_COLUMN_FILENAME=0, 
	SFL_COLUMN_FILESIZE, 
	SFL_COLUMN_TYPE, 
	SFL_COLUMN_PRIORITY, 
	SFL_COLUMN_PERMISSION, 
	SFL_COLUMN_FILEID, 
	SFL_COLUMN_REQUESTS, 
	SFL_COLUMN_ACCEPTED, 
	SFL_COLUMN_TRANSFERRED, 
	SFL_COLUMN_PARTTRAFFIC, 
	SFL_COLUMN_UPLOADS, 
d85 1
a85 1
	
d126 1
a126 1
	ilDummyImageList.Create(1, 17, ILC_COLOR, 1, 1); 
d165 1
a165 1
{ 
d184 1
a184 1
void CSharedFilesCtrl::Localize() 
d282 1
a282 1
	}	
d304 1
a304 1
	for(uint32 i=0; i<records; i++) 
d313 1
a313 1
	
d338 2
a339 2
	} 
	else 
d367 1
a367 1
	SetItemText(itemnr,SFL_COLUMN_PERMISSION,GetResString(IDS_FSTATUS_PUBLIC));	
d385 1
a385 1
	
d416 1
a416 1
			switch(file->GetPartStatus(itemdata->part)) 
d421 1
a421 1
			
d432 1
a432 1
			switch(file->GetPartPriority(itemdata->part)) 
d536 1
a536 1
	
d542 1
a542 1
	
d550 1
a550 1
void CSharedFilesCtrl::RemoveFile(CKnownFile *toRemove) 
d609 1
a609 1
	
d690 1
a690 1
					CString buffer = itemdata->knownFile->GetPath();				
d694 1
a694 1
					m_pSCM = new CShellContextMenu(m_hWnd,buffer);				
d710 3
a712 3
			//m_SharedFilesMenu.AppendMenu(MF_STRING,Irc_SetSendLink,GetResString(IDS_IRC_ADDLINKTOIRC)); 
			
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d725 1
a725 1
	m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d729 1
a729 1
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d731 1
a731 1
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d739 1
a739 1
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d822 2
a823 2
	// for multiple selections 
	UINT selectedCount = GetSelectedCount(); 
d902 1
a902 1
					break; 
d912 1
a912 1
				ShellOpenFile(buffer);				
d914 1
a914 1
			break; 
d923 2
a924 2
		case MP_CMT: 
			{ 
d926 4
a929 4
				CCommentDialog dialog(file); 
				dialog.DoModal(); 
   			} 
			break; 
d1003 1
a1003 1
				{ 
d1015 1
a1015 1
						switch (wParam) 
d1017 1
a1017 1
							case MP_PRIOVERYLOW: 
d1020 1
a1020 1
								if (file->GetJumpstartEnabled()) 
d1024 1
a1024 1
									buffer.Format(_T("%s"),GetResString(IDS_PRIOVERYLOW));					
d1029 1
a1029 1
								if (file->GetJumpstartEnabled()) 
d1039 1
a1039 1
								if (file->GetJumpstartEnabled()) 
d1044 1
a1044 1
								break;	
d1049 1
a1049 1
								if (file->GetJumpstartEnabled()) 
d1059 1
a1059 1
								if (file->GetJumpstartEnabled()) 
d1068 1
a1068 1
								file->UpdateUploadAutoPriority(); 
d1073 1
a1073 1
										if (file->GetJumpstartEnabled()) 
d1082 1
a1082 1
										if (file->GetJumpstartEnabled()) 
d1088 1
a1088 1
						
d1091 1
a1091 1
										if (file->GetJumpstartEnabled()) 
d1102 1
a1102 1
						
d1122 1
a1122 1
							break;	
d1137 1
a1137 1
			}	
d1139 1
a1139 1
	
d1161 3
a1163 2
				POSITION pos=GetFirstSelectedItemPosition();
				while(pos)
d1165 5
a1169 4
					int iSel=GetNextSelectedItem(pos);
					itemdata=(sfl_itemdata*)GetItemData(iSel);
					file=itemdata->knownFile;
					if(itemdata->isFile==false)
d1171 1
a1171 1
						if(file->IsPartFile()==false) 
d1190 1
a1190 1
				}	
d1199 1
a1199 1
			{	
d1209 1
a1209 1
			{	
d1211 1
a1211 1
				SetItemText(iSel,SFL_COLUMN_PERMISSION,GetResString(IDS_FSTATUS_FRIENDSONLY));	
d1227 1
a1227 1
				{ 
d1260 1
a1260 1
										break;	
d1275 1
a1275 1
						} 
d1299 1
a1299 1
										break;	
d1336 2
a1337 2
	SetSortArrow(pNMListView->iSubItem, m_listSorter.arrow());	
	
d1340 1
a1340 1
	SortItems(&SortProc, (LPARAM)&m_listSorter);	
d1353 1
a1353 1
	if(lParam1==NULL || lParam2==NULL || lParamSort==NULL)
d1361 4
a1364 4
	if(listSorter->dir())
	{ 
		item1=(sfl_itemdata*)lParam1;
		item2=(sfl_itemdata*)lParam2;	
d1368 2
a1369 2
		item1=(sfl_itemdata*)lParam2;
		item2=(sfl_itemdata*)lParam1;	
d1373 1
a1373 1
	CKnownFile* knownfile2=item2->knownFile;	
d1376 2
a1377 2
	if(knownfile1==NULL || knownfile2==NULL)
	        	return 0; 
d1380 1
a1380 1
	if(item1->isFile==false && item2->isFile==false && item1->knownFile==item2->knownFile)
d1383 1
a1383 1
		if(g_eMuleApp.m_pGlobPrefs->DoUsePT() && m_sortParts)		//Cax2 bugfix 09/01/03
d1463 1
a1463 1
						default:  
d1577 1
a1577 1
	
d1615 1
a1615 1
		(lpDrawItemStruct->itemState & ODS_SELECTED)) 
d1621 1
a1621 1
	}  
d1694 2
a1695 2
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, DT_LEFT | iCalcFlag);    
                    break; 
d1698 2
a1699 2
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, DT_RIGHT | iCalcFlag);    
                    break; 
d1701 1
a1701 1
				case SFL_COLUMN_PARTTRAFFIC:	//--- part traffic ---		
d1708 1
a1708 1
						int iWidth = cur_rec.right - cur_rec.left-4; 
d1711 1
a1711 1
						if(iWidth>0)
d1714 1
a1714 1
							cdcStatus.CreateCompatibleDC(&dc); 
d1717 1
a1717 1
							if(status==(HBITMAP)NULL)
d1719 1
a1719 1
								status.CreateCompatibleBitmap(&dc, iWidth, iHeight); 
d1728 1
a1728 1
									status.CreateCompatibleBitmap(&dc, iWidth, iHeight); 
d1733 1
a1733 1
							CBitmap *oldBitmap=cdcStatus.SelectObject(&status); 
d1735 5
a1739 5
							RECT rec_status; 
							rec_status.left = 0; 
							rec_status.top = 0; 
							rec_status.bottom = iHeight; 
							rec_status.right = iWidth; 
d1741 1
a1741 1
								dc->BitBlt(cur_rec.left, cur_rec.top, iWidth, iHeight,  &cdcStatus, 0, 0, SRCCOPY); 
d1774 1
a1774 1
				case SFL_COLUMN_PARTTRAFFIC:	//--- part traffic ---		
d1780 1
a1780 1
						int iWidth = cur_rec.right - cur_rec.left-4; 
d1783 1
a1783 1
						if(iWidth>0)
d1786 1
a1786 1
							cdcStatus.CreateCompatibleDC(&dc); 
d1789 1
a1789 1
							if(status==(HBITMAP)NULL)
d1791 1
a1791 1
								status.CreateCompatibleBitmap(&dc, iWidth, iHeight); 
d1797 1
a1797 1
								if(iWidth!=m_statusWidth)
d1800 1
a1800 1
									status.CreateCompatibleBitmap(&dc, iWidth, iHeight); 
d1804 1
a1804 1
							CBitmap *oldBitmap=cdcStatus.SelectObject(&status); 
d1806 7
a1812 7
							RECT rec_status; 
							rec_status.left = 0; 
							rec_status.top = 0; 
							rec_status.bottom = iHeight; 
							rec_status.right = iWidth; 
							if(DrawStatusBarPart(&cdcStatus, &rec_status, file->statistic, itemdata->part))
								dc->BitBlt(cur_rec.left, cur_rec.top, iWidth, iHeight, &cdcStatus, 0, 0, SRCCOPY); 
d1860 1
a1860 1
{ 
d1971 1
a1971 1
} 
d1974 1
a1974 1
{ 
d2088 1
a2088 1
} 
d2170 1
a2170 1
			
d2239 1
a2239 1
void CSharedFilesCtrl::SetDisplay(uint8 mode, bool redraw)	
d2243 1
a2243 1
	m_display=mode; 
d2285 1
a2285 1
	if(redraw) 
d2312 1
a2312 1
		if(t) 
d2321 1
a2321 1
			
d2342 1
a2342 1
	
d2376 1
a2376 1
	
d2407 1
a2407 1
	return RGB(0, (210-(22*(f-1)) <  0)? 0:210-(22*(f-1)), 255);	
d2413 1
a2413 1
	return RGB(255, 0, (210-(22*(f-1)) <  0)? 0:210-(22*(f-1)));	
d2496 1
a2496 1
		
@


1.100
log
@changed A4AF sources count display as an option + minor cosmetic changes
@
text
@d1355 1
a1355 1
	int			tmp;
@


1.99
log
@added button to toggle between known and shared files + minor changes
@
text
@d1355 4
a1358 3
	int tmp;
	sfl_itemdata*	item1;
	sfl_itemdata*	item2;
@


1.98
log
@Formatting, comments, and name changes.
@
text
@a41 1
//--- it's much easier to use this with other mods ---
a83 1
	//--- xrmb:allyaknow ---
a84 1
	//--- :xrmb ---
a85 1
	//--- i wrote my own little sort helper ---
a142 2

	//--- these are my columns ---
d255 1
a255 1
		// DonGato: localization fix
d257 1
d259 1
d261 1
d263 1
d284 1
a287 1
	//--- xrmb:allyaknow ---
a288 1
	//--- :xrmb ---
a292 1
//--- xrmb:allyaknow ---
d308 1
d313 1
a313 1

a315 1
//--- :xrmb ---
a329 2
	
	// Modified by Tarod for UAP
a454 1
			//--- :xrmb ---
a488 1
	// netwolf: completesrc (zegzav) - BEGIN
a509 1
	// netwolf: completesrc (zegzav) - END
d633 1
a633 1
	//--- xrmb:allyaknow ---
d635 1
d637 1
d639 1
a639 1
	//--- :xrmb ---
d641 2
a642 1
	
a643 1
	//--- xrmb:allyaknow ---
a647 1
		//--- :xrmb ---
d709 1
a709 1
			//This menu option is is for testing..
a718 1
		//--- xrmb:allyaknow ---
a719 1
		//--- :xrmb ---
a724 1
	//--- xrmb:allyaknow ---
a735 1
	//--- :xrmb ---
a930 1
		//--- xrmb:allyaknow ---
a954 1
		//--- :xrmb ---
a1103 1
					//--- xrmb:partprio ---
a1135 1
				//--- :xrmb ---
a1139 1
		//--- xrmb:partprio ---
a1191 1
		//--- :xrmb ---
d1355 1
a1355 1
	int tmp;	//Cax2 patch 05/01/03
d1570 1
a1570 1
	if (!::IsWindow(m_hWnd))	//fix crash at exit [TwoBottle Mod]
a1625 1
	//--- xrmb:allyaknow ---
a1632 1
	//--- :xrmb ---
a1776 1
						// added
a1815 1
						//added end
a1913 1
			//--- xrmb:partprio ---
a1914 1
			//--- :xrmb ---
a2411 1
//--- :xrmb ---
@


1.97
log
@Changes to Upload AutoPriority.
@
text
@d722 1
a722 1
/*			if(itemdata->isFile)
@


1.96
log
@Some improvements over Upload Auto Priority
@
text
@d722 1
a722 2
			//--- context menu for a shared file ---
			if(itemdata->isFile)
d726 1
a726 1

@


1.95
log
@Auto Upload Priority for completed files
@
text
@d725 1
a725 10
//				if(justOne)
//					m_menuPriority.EnableMenuItem(MP_PRIOAUTO,((g_eMuleApp.m_pGlobPrefs->IsUAPEnabled()) && (itemdata->knownFile->IsPartFile())) ? MF_ENABLED:MF_GRAYED);
//				else
					m_menuPriority.EnableMenuItem(MP_PRIOAUTO,g_eMuleApp.m_pGlobPrefs->IsUAPEnabled() ? MF_ENABLED:MF_GRAYED);
			}

			//--- context menu for a part of a file ---
			else
			{
				//--- feel free to add something ---
d1082 31
a1112 34
//								if (file->IsPartFile())
//								{
									file->SetAutoPriority(true);
									file->UpdateUploadAutoPriority(); 
									switch(file->GetPriority())
									{
										case PR_VERYHIGH:
											#if JUMPSTART
											if (file->GetJumpstartEnabled()) 
												buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTORELEASE));
											else
											#endif
												buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTORELEASE));
											break;

										case PR_HIGH:
											#if JUMPSTART
											if (file->GetJumpstartEnabled()) 
												buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTOHIGH));
											else
											#endif
												buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTOHIGH));
											break;
							
										case PR_NORMAL:
											#if JUMPSTART
											if (file->GetJumpstartEnabled()) 
												buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART),GetResString(IDS_PRIOAUTONORMAL));
											else
											#endif
												buffer.Format(_T("%s"),GetResString(IDS_PRIOAUTONORMAL));
											break;
									}
//								}
d1605 1
a1605 3
			RedrawItems(i,i); // Lord KiRon
			//--- it creates a flickering for me ---
			//g_eMuleApp.m_pdlgEmule->m_wndSharedFiles.Check4StatUpdate(toupdate);
d1720 1
a1720 1
					if (g_eMuleApp.m_pGlobPrefs->DoUsePT()) //Cax2 05/01/03
@


1.94
log
@Changed to predefined colors  - thx DoubleT ;-)
@
text
@d725 3
a727 3
				if(justOne)
					m_menuPriority.EnableMenuItem(MP_PRIOAUTO,((g_eMuleApp.m_pGlobPrefs->IsUAPEnabled()) && (itemdata->knownFile->IsPartFile())) ? MF_ENABLED:MF_GRAYED);
				else
d1031 1
a1048 1
								//SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOVERYLOW));
a1057 1
								//SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOLOW));
a1067 1
								//SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIONORMAL));
a1077 1
								//SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOHIGH));
a1087 1
								//SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIORELEASE));
d1091 2
a1092 2
								if (file->IsPartFile())
								{
a1103 1
											//SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTORELEASE));
a1112 1
											//SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTOHIGH));
a1121 1
											//SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTONORMAL));
d1124 1
a1124 1
								}
@


1.93
log
@Minor fixes
@
text
@d933 1
a933 1
				AddLogLine( false, buffer);
@


1.92
log
@fixed crash  due context menu, shortcut optimiation & update to UNICODE
@
text
@d174 5
a178 5
	//get the sort column
	int iSortColumn = (iSortCode & MLC_COLUMNMASK);
	//get sort order
	bool bSortAscending = (iSortCode & MLC_SORTDESC) == 0;
	// check alternative order
@


1.91
log
@minor change
@
text
@d709 1
a709 1
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPENFOLDER, GetResString(IDS_OPENFOLDER) + "\t" + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShOpenFolder)));
d711 1
a711 1
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD) + "\t" + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShComments)));
d764 3
a766 3
		m_ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1) + "\t" + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2KLink)));
		m_ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2) + "\t" + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkHtml)));
		m_ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK) + "\t" + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShortcutCode(IndexShED2kLinkSource))); //<<-- enkeyDEV(Ottavio84) -Create source ed2k from downloads-
@


1.90
log
@File Type correction & related name changes
@
text
@d1649 1
a1649 2
		iCalcFlag = (iCalcFlag | DT_RTLREADING);

@


1.89
log
@Added a function: bool IsRightToLeftLanguage(); + Fixed Hebrew text alignment in Shared Files list + Hebrew translation update
@
text
@d332 1
a332 1
	SetItemText(itemnr,SFL_COLUMN_TYPE,GetFiletypeByName(file->GetFileName()));
d1530 1
a1530 1
						return _tcsicmp(GetFiletypeByName(knownfile1->GetFileName()), GetFiletypeByName(knownfile2->GetFileName()));
@


1.88
log
@Change to shortcut management code (it's easier to add an action now) / Added a lot of actions to shortcut management / Added some keys to shortcut management
@
text
@d1646 5
d1734 1
a1734 1
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, DT_LEFT|DT_SINGLELINE|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS);    
d1738 1
a1738 1
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, DT_RIGHT|DT_SINGLELINE|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS);    
d1803 1
a1803 1
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, DT_RIGHT|DT_SINGLELINE|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS);
d1811 1
a1811 1
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, /*DT_RIGHT*/DT_LEFT|DT_SINGLELINE|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS);
@


1.87
log
@Fix
@
text
@d709 1
a709 1
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPENFOLDER, GetResString(IDS_OPENFOLDER));
d711 1
a711 1
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD) + "\t" + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShareEditFileCommentsShortcutCode()));
d764 3
a766 3
		m_ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1));
		m_ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2));
		m_ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK)); //<<-- enkeyDEV(Ottavio84) -Create source ed2k from downloads-
d2534 5
d2540 9
a2548 1
		if (nCode == g_eMuleApp.m_pGlobPrefs->GetShareEditFileCommentsShortcutCode())
d2550 13
@


1.86
log
@fixed sort arrow initialization
@
text
@d713 1
@


1.85
log
@Formatting, comments, and name changes.
@
text
@d170 1
a170 1
void CSharedFilesCtrl::SortInit(int sortCode) // Cax2 sortdlg
d174 6
a179 3
	bool	bSortDesc = (sortCode & MLC_SORTDESC) != 0;
	bool	bSortAlt = (sortCode & MLC_SORTALT) != 0;
	int		iCurrentSortItem = bSortAlt ? sortCode - MLC_SORTALT : sortCode;
d181 3
a183 4
	iCurrentSortItem -= bSortDesc ? MLC_SORTDESC : 0;
	SetSortArrow(iCurrentSortItem,!bSortDesc);
	m_listSorter.clicked(iCurrentSortItem);
	m_listSorter.item(iCurrentSortItem)->sortIt(bSortAlt?2:1,!bSortDesc);
@


1.84
log
@*** empty log message ***
@
text
@d709 1
a709 1
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD) + "\t" + GetStringFromShortcutCode(g_eMuleApp.m_pGlobPrefs->GetShareEditFileCommentsShortcutCode()));	// DropF - Keyboard Shortcuts
a2524 1
// DropF START - Keyboard Shortcuts
a2543 1
// DropF END - Keyboard Shortcuts@


1.83
log
@Formatting, comments, and name changes.
float => double conversion
Fixed two bugs preventing the saving/loading of standard sort settings.
@
text
@d709 1
a709 1
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD));
d2524 22
@


1.82
log
@Some other updates...
@
text
@a153 1
	// Cax2
d155 1
d157 1
d159 7
a165 1
		SortInit(0);
d1374 2
a1375 2
	g_eMuleApp.m_pGlobPrefs->SetColumnSortItem(CPreferences::TABLE_QUEUE, pNMListView->iSubItem);
	g_eMuleApp.m_pGlobPrefs->SetColumnSortAscending(CPreferences::TABLE_QUEUE, m_listSorter.dir());
d1552 2
a1553 2
							float f1= CompleteSourcesCmpValue(knownfile1, false);
							float f2= CompleteSourcesCmpValue(knownfile2, false);
d1581 2
a1582 2
							float f1= CompleteSourcesCmpValue(knownfile1, true);
							float f2= CompleteSourcesCmpValue(knownfile2, true);
d2076 1
a2076 1
				brush.CreateSolidBrush(GetTrafficColor((float)t/ps));
d2347 1
a2347 1
		ch=h-(int)(h*(float)t/tt+0.5);
d2372 1
a2372 1
COLORREF GetTrafficColor0(float f)
d2406 1
a2406 1
COLORREF GetTrafficColor1(float f)
d2440 1
a2440 1
COLORREF GetTrafficColor2(float f)
d2446 1
a2446 1
COLORREF GetTrafficColor3(float f)
d2459 1
a2459 1
float CSharedFilesCtrl::CompleteSourcesCmpValue(CKnownFile* item, bool second)
d2469 1
a2469 1
	return ((nCountLo == 0) ? ((nCountHi == 0) ? ((bPartFile) ? 2.f : 0.f) : (2.f - (1.f / (float)nCountHi))) : (second) ? (float)nCountHi + 3.f - (1.f / (float)nCountLo) : (float)nCountLo + 3.f - (1.f / (float)nCountHi));
@


1.81
log
@Formatting, comments, and name changes.
Completion of download list sorting changes (for now).
Added missing sort on FakeCheck column in search window.
@
text
@a1713 1
				case SFL_COLUMN_FILESIZE:
d1720 4
@


1.80
log
@Formatting, comments, and name changes.
@
text
@d167 10
a176 11
	int m_iCurrentSortItem=(sortCode>10000)?sortCode-10000:sortCode;
	bool reverse=(m_iCurrentSortItem>=100);
	m_iCurrentSortItem-=reverse?100:0;
	if (sortCode>10000)
		SetSortArrow(m_iCurrentSortItem,(sortCode<10100)?arrowDoubleUp:arrowDoubleDown);
	else
		SetSortArrow(m_iCurrentSortItem,(sortCode<100));
	m_listSorter.clicked(m_iCurrentSortItem);	//Cax2 what a palaver!
	m_listSorter.item(m_iCurrentSortItem)->sortIt((sortCode>10000)?2:1,!reverse);	//Cax2 what a palaver!
	//AddLogLine(true, "sort column %i, direction %s, level %i reverse is: %i", m_listSorter.selected(), m_listSorter.dir()?"ascending":"descending", m_listSorter.level(),reverse);
	SortItems(&SortProc, (LPARAM)&m_listSorter);	//Cax2 what a palaver!
d185 1
a185 1
	if(GetSafeHwnd())
@


1.79
log
@incorrect use of GDI resources (CBrush class)
@
text
@d832 1
a832 1
			RunURL(file, g_eMuleApp.webservices.GetAt(wParam-MP_WEBURL) );
@


1.78
log
@Formatting, comments, and name changes. Factored various UI update methods out and modified to use async. messaging instead of sync. call.
@
text
@d1863 1
d1865 1
d1869 1
d1872 1
d1910 1
d1912 1
d1918 1
d1920 1
d2018 1
d2020 1
d2026 1
d2028 1
d2034 1
d2036 1
d2068 1
d2070 1
@


1.77
log
@Formatting, comments, and name changes. Factored "UpdateOfferedItems()" method out and modified to use async. messaging instead of sync. call.
@
text
@d784 25
d810 10
a856 5
		case MP_SFL_UPDATEOFFEREDITEMS:
		{
			UpdateOfferedItems();
			break;
		}
@


1.76
log
@Formatting, comments, and name changes.
Created distinct tag classes and typed enumerations for tags, opcodes, and protocols.
@
text
@a25 1
#include "memcpy_amd.h"
d272 1
a272 1
	for(POSITION pos = in_sflist->m_Files_map.GetStartPosition();pos != 0;)
d274 1
a274 1
		in_sflist->m_Files_map.GetNextAssoc(pos, bufKey, cur_file);
d822 5
a826 1
		
d2416 1
a2416 2


d2428 1
a2428 1

@


1.75
log
@FakeCheck for Search Result and Download List (Check and Report ... made by milobac ... merged by DropF ... tested by n@@boleo and me)
@
text
@d1335 2
@


1.74
log
@Fixed "sort settings not saved".
@
text
@d706 1
d872 15
a1334 2
	g_eMuleApp.m_pGlobPrefs->SetColumnSortItem(CPreferences::TABLE_QUEUE, pNMListView->iSubItem);
	g_eMuleApp.m_pGlobPrefs->SetColumnSortAscending(CPreferences::TABLE_QUEUE, m_listSorter.dir());
@


1.73
log
@Formatting, comments, and name changes.
@
text
@d1319 2
@


1.72
log
@Column alignment standarization
@
text
@d168 3
a170 3
	int m_CurrentSortItem=(sortCode>10000)?sortCode-10000:sortCode;
	bool reverse=(m_CurrentSortItem>=100);
	m_CurrentSortItem-=reverse?100:0;
d172 1
a172 1
		SetSortArrow(m_CurrentSortItem,(sortCode<10100)?arrowDoubleUp:arrowDoubleDown);
d174 3
a176 3
		SetSortArrow(m_CurrentSortItem,(sortCode<100));
	m_listSorter.clicked(m_CurrentSortItem);	//Cax2 what a palaver!
	m_listSorter.item(m_CurrentSortItem)->sortIt((sortCode>10000)?2:1,!reverse);	//Cax2 what a palaver!
d629 1
a629 1
	CMenu		   	m_PrioMenu;
d651 7
a657 7
				m_PrioMenu.CreateMenu();
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOVERYLOW,GetResString(IDS_PRIOVERYLOW));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOLOW,GetResString(IDS_PRIOLOW));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIONORMAL,GetResString(IDS_PRIONORMAL));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOHIGH, GetResString(IDS_PRIOHIGH));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOVERYHIGH, GetResString(IDS_PRIORELEASE));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOAUTO, GetResString(IDS_PRIOAUTO));
d660 3
a662 3
	                m_PrioMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
					m_PrioMenu.AppendMenu(MF_STRING,MP_JUMPSTART, _T("Jumpstart"));
					m_PrioMenu.CheckMenuItem(MP_JUMPSTART,itemdata->knownFile->GetJumpstartEnabled()?MF_CHECKED:MF_UNCHECKED);
d665 1
a665 1
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PrioMenu.m_hMenu, GetResString(IDS_PRIORITY));
d687 1
a687 1
				m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_PrioMenu.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
d717 1
a717 1
					m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,((g_eMuleApp.m_pGlobPrefs->IsUAPEnabled()) && (itemdata->knownFile->IsPartFile())) ? MF_ENABLED:MF_GRAYED);
d719 1
a719 1
					m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,g_eMuleApp.m_pGlobPrefs->IsUAPEnabled() ? MF_ENABLED:MF_GRAYED);
d763 3
a765 3
	CMenu m_Web;
	m_Web.CreateMenu();
	UpdateURLMenu(m_Web,counter);
d771 2
a772 2
		m_SharedFilesMenu.AppendMenu(flag2|MF_POPUP,(UINT_PTR)m_Web.m_hMenu, GetResString(IDS_WEBSERVICES));
		m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_Web.m_hMenu,justOne ? MF_ENABLED:MF_GRAYED);
d776 1
a776 1
	m_Web.DestroyMenu();
@


1.71
log
@Fixed "strange behavior while performing extended selections in shared files window".
@
text
@d139 1
a139 1
	InsertColumn(SFL_COLUMN_FILESIZE, GetResString(IDS_DL_SIZE), LVCFMT_LEFT, 100);
@


1.70
log
@Reduced MP_WEBURL to 64 options
@
text
@d514 6
a519 1
	if(resort)
@


1.69
log
@A little more method factoring, a few name changes, no (intended) logic changes.
@
text
@d791 1
a791 1
		if (wParam>=MP_WEBURL && wParam<=MP_WEBURL+256) {
@


1.68
log
@Removed all #ifndef AMDs and consolidated CPU specific behavior in md4cpy() and new method memcpy2() (come up with a better name if you can :P ).
@
text
@d153 1
a153 1
	LoadSettings(CPreferences::tableShared);
@


1.67
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d1617 1
a1617 5
	#ifndef AMD
	memcpy(&cur_rec, &lpDrawItemStruct->rcItem, sizeof(RECT));
	#else
	memcpy_amd(&cur_rec, &lpDrawItemStruct->rcItem, sizeof(RECT));
	#endif
@


1.66
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@d126 2
a127 2
	SetColoring(theApp.glob_prefs->GetUpbarColor());
	SetDisplay(theApp.glob_prefs->GetUpbarStyle(), false);
d156 2
a157 2
	if (theApp.glob_prefs->DoUseSort())
		SortInit(theApp.glob_prefs->GetFileSortCol());
d258 1
a258 1
			ShowFileList(theApp.sharedfiles);
d294 1
a294 1
	CKnownFileList* list=theApp.knownfiles;
d712 1
a712 1
					m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,((theApp.glob_prefs->IsUAPEnabled()) && (itemdata->knownFile->IsPartFile())) ? MF_ENABLED:MF_GRAYED);
d714 1
a714 1
					m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,theApp.glob_prefs->IsUAPEnabled() ? MF_ENABLED:MF_GRAYED);
d792 1
a792 1
			RunURL(file, theApp.webservices.GetAt(wParam-MP_WEBURL) );
d815 1
a815 1
				theApp.emuledlg->ircwnd.SetSendFileString(file->CreateED2kLink());
d828 1
a828 1
					theApp.CopyTextToClipboard(str);
d842 1
a842 1
				    theApp.CopyTextToClipboard(str);
d849 1
a849 1
					if (theApp.serverconnect->IsConnected() || !theApp.serverconnect->IsLowID())
d859 1
a859 1
					    theApp.CopyTextToClipboard(str);
d893 1
a893 1
				ShowFileList(theApp.sharedfiles);
d900 1
a900 1
			theApp.knownfiles->merge();
d910 1
a910 1
					theApp.knownfiles->RemoveFile(selectedList.ElementAt(0));
d1353 1
a1353 1
		if(theApp.glob_prefs->DoUsePT() && m_sortParts)		//Cax2 bugfix 09/01/03
d1561 1
a1561 1
			//theApp.emuledlg->sharedfileswnd.Check4StatUpdate(toupdate);
d1609 1
a1609 1
		if ((!file->GetOfferedToServer()) && (theApp.serverconnect->IsConnected()))
d1651 1
a1651 1
					if(theApp.glob_prefs->ShowFileTypeIcon())
d1653 3
a1655 3
						iImage = theApp.GetFileTypeSystemImageIdx(file->GetFileName());
						if (theApp.GetSystemImageList() != NULL)
							::ImageList_Draw(theApp.GetSystemImageList(), iImage, dc->GetSafeHdc(), cur_rec.left, cur_rec.top, ILD_TRANSPARENT);
d1673 1
a1673 1
					if (theApp.glob_prefs->DoUsePT()) //Cax2 05/01/03
d1746 1
a1746 1
					if (theApp.glob_prefs->DoUsePT())	//Cax2 05/01/03
d2125 1
a2125 1
		if(theApp.glob_prefs->DoUsePT() && file->GetPartCount()>1)	//Cax2 05/01/03
d2379 1
a2379 1
	theApp.emuledlg->sharedfileswnd.GetDlgItem(IDC_TRAFFIC_TEXT)->SetWindowText(GetResString(IDS_SF_FILES)+counter  );
d2413 1
a2413 1
	if (theApp.emuledlg->IsRunning()){
@


1.65
log
@Fix
@
text
@d54 1
a54 1
	SFL_COLUMN_TRANSFERED, 
d97 1
a97 1
	m_listSorter.item(SFL_COLUMN_TRANSFERED)->set(2, true);
d146 1
a146 1
	InsertColumn(SFL_COLUMN_TRANSFERED, GetResString(IDS_SF_TRANSFERRED), LVCFMT_LEFT, 120);
d236 1
a236 1
		pHeaderCtrl->SetItem(SFL_COLUMN_TRANSFERED, &hdi);
d385 2
a386 2
	a=file->statistic.GetTransfered();
	b=file->statistic.GetAllTimeTransfered();
d393 1
a393 1
	SetItemText(itemnr, SFL_COLUMN_TRANSFERED, buffer);
d397 1
a397 1
	b=file->statistic.GetAllTimeTransfered();
d465 1
a465 1
			//--- column transfered ---
d474 1
a474 1
			SetItemText(itemnr+1+part, SFL_COLUMN_TRANSFERED, buffer);
d1360 1
a1360 1
						case SFL_COLUMN_TRANSFERED:
d1406 1
a1406 1
						case SFL_COLUMN_TRANSFERED:
d1484 3
a1486 3
					case SFL_COLUMN_TRANSFERED:
						tmp=sortcmp(knownfile1->statistic.GetTransfered(), knownfile2->statistic.GetTransfered());
						return (tmp!=0)?tmp:sortcmp(knownfile1->statistic.GetAllTimeTransfered(), knownfile2->statistic.GetAllTimeTransfered());
d1500 2
a1501 2
							double d1=(double)knownfile1->statistic.GetAllTimeTransfered()/knownfile1->GetFileSize();
							double d2=(double)knownfile2->statistic.GetAllTimeTransfered()/knownfile2->GetFileSize();
d1514 2
a1515 2
					case SFL_COLUMN_TRANSFERED:
						return sortcmp(knownfile1->statistic.GetAllTimeTransfered(), knownfile2->statistic.GetAllTimeTransfered());
d1527 2
a1528 2
							double d1=(double)knownfile1->statistic.GetAllTimeTransfered()/knownfile1->GetFileSize();
							double d2=(double)knownfile2->statistic.GetAllTimeTransfered()/knownfile2->GetFileSize();
d1667 1
a1667 1
				case SFL_COLUMN_TRANSFERED:
d1739 1
a1739 1
				case SFL_COLUMN_TRANSFERED:
d1864 1
a1864 1
	if(statistic.GetAllTimeTransfered()==0 || statistic.partTraffic==NULL)
@


1.64
log
@Fix for lists navigation [from official]
@
text
@d2410 1
d2423 18
a2440 14
		if (pDispInfo->item.mask & LVIF_TEXT){
			const CKnownFile* pFile = reinterpret_cast<CKnownFile*>(pDispInfo->item.lParam);
			if (pFile != NULL){
				switch (pDispInfo->item.iSubItem){
					case 0:
						if (pDispInfo->item.cchTextMax > 0){
							_tcsncpy(pDispInfo->item.pszText, pFile->GetFileName(), pDispInfo->item.cchTextMax);
							pDispInfo->item.pszText[pDispInfo->item.cchTextMax-1] = _T('\0');
						}
						break;
					default:
						// shouldn't happen
						pDispInfo->item.pszText[0] = _T('\0');
						break;
d2446 1
@


1.63
log
@Added again fix for filters, reverted a change in Shared Files and changed the browse dialog for categories (now it should support network drives).
@
text
@d70 1
a512 3
	//--- redraw the bar ---
	//itemdataParent->repaintBar=true;

d540 1
a540 1
	itemnr=InsertItem(LVIF_TEXT|LVIF_PARAM, itemnr, file->GetFileName(), 0, 0, 0, (LPARAM)itemdata);
d1108 1
a1108 1
		//--- :xrmb ---
a1312 2
	//AddLogLine(true, "sort column %i, direction %s, level %i", m_listSorter.selected(), m_listSorter.dir()?"ascending":"descending", m_listSorter.level());
	
a1628 1
//	for(int c=0; c<ColumnsTracked(); c++)
a1630 1
//		int cc=GetColumnColumn(c);
a1683 35
							/*
							//--- the bar is not initalized yet? ---
							if(itemdata->bar==(HBITMAP)NULL)
							VERIFY(itemdata->bar.CreateBitmap(1, 1, 1, 16, NULL)); 

							CDC cdcStatus; 
							HGDIOBJ hOldBitmap;
							cdcStatus.CreateCompatibleDC(dc);
							int cx=itemdata->bar.GetBitmapDimension().cx; 
							DWORD dwTicks = GetTickCount();
							if(itemdata->repaintBar && itemdata->updated+SFL_BARUPDATE<dwTicks || cx!=iWidth) 
							{
								itemdata->repaintBar=false;

								itemdata->bar.DeleteObject(); 
								itemdata->bar.CreateCompatibleBitmap(dc,  iWidth, iHeight); 
								itemdata->bar.SetBitmapDimension(iWidth,  iHeight); 
								hOldBitmap = cdcStatus.SelectObject(itemdata->bar); 

								RECT rec_status; 
								rec_status.left = 0; 
								rec_status.top = 0; 
								rec_status.bottom = iHeight; 
								rec_status.right = iWidth; 
								DrawStatusBarFile(&cdcStatus, &rec_status, file->statistic);

								//--- hui? why thats random :) ---
								itemdata->updated = dwTicks + (rand() % 128); 
							} 
							else 
								hOldBitmap = cdcStatus.SelectObject(itemdata->bar); 

							dc->BitBlt(cur_rec.left, cur_rec.top, iWidth, iHeight,  &cdcStatus, 0, 0, SRCCOPY); 
							cdcStatus.SelectObject(hOldBitmap);
							*/
a1694 4
								//--- lol GetBitmapDimension/SetBitmapDimension work with 0.1mm units??? is MS stupid or what? this is a screen, not a piece of paper! ---
								//if(status.GetBitmapDimension().cx!=iWidth) 
								//	status.SetBitmapDimension(iWidth, iHeight); 

a1756 36
							/*--- this new code seems to waste more resources ---
							//--- the bar is not initalized yet? ---
							if(itemdata->bar==(HBITMAP)NULL)
								VERIFY(itemdata->bar.CreateBitmap(1, 1, 1, 16, NULL)); 

							CDC cdcStatus; 
							HGDIOBJ hOldBitmap;
							cdcStatus.CreateCompatibleDC(dc);
							int cx=itemdata->bar.GetBitmapDimension().cx; 
							DWORD dwTicks = GetTickCount();
							if(itemdata->repaintBar && itemdata->updated+SFL_BARUPDATE<dwTicks || cx!=iWidth) 
							{
								itemdata->repaintBar=false;

								itemdata->bar.DeleteObject(); 
								itemdata->bar.CreateCompatibleBitmap(dc,  iWidth, iHeight); 
								itemdata->bar.SetBitmapDimension(iWidth,  iHeight); 
								hOldBitmap = cdcStatus.SelectObject(itemdata->bar); 

								RECT rec_status; 
								rec_status.left = 0; 
								rec_status.top = 0; 
								rec_status.bottom = iHeight; 
								rec_status.right = iWidth; 
								DrawStatusBarPart(&cdcStatus, &rec_status, file->statistic, itemdata->part);

								//--- hui? why thats random :) ---
								itemdata->updated = dwTicks + (rand() % 128); 
							} 
							else 
								hOldBitmap = cdcStatus.SelectObject(itemdata->bar); 

							dc->BitBlt(cur_rec.left, cur_rec.top, iWidth, iHeight,  &cdcStatus, 0, 0, SRCCOPY); 
							cdcStatus.SelectObject(hOldBitmap);
							*/

d1768 7
a1774 11
							//--- lol GetBitmapDimension/SetBitmapDimension work with 0.1mm units??? is MS stupid or what? this is a screen, not a piece of paper! ---
							//if(status.GetBitmapDimension().cx!=iWidth) 
							//	status.SetBitmapDimension(iWidth, iHeight); 

							//--- the we do it this way ---
							if(iWidth!=m_statusWidth)
							{
								status.DeleteObject();
								status.CreateCompatibleBitmap(&dc, iWidth, iHeight); 
								m_statusWidth=iWidth;
							}
d2406 35
@


1.62
log
@More fixes (sharing of files, JS used with downloading files and other minor ones)
@
text
@d616 3
a618 1
//	if (iSel == -1) return;
@


1.61
log
@More updates.
@
text
@d1207 1
a1207 1
					if(itemdata->isFile)
@


1.60
log
@Fixed a language issue.
@
text
@d616 1
a616 2
	if (iSel == -1) 
		return;
d639 1
a639 1
	if(m_allYaKnow==false)
d641 1
a641 2
	//--- :xrmb ---
		if(itemdata->isFile)
d643 10
a652 7
			m_PrioMenu.CreateMenu();
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOVERYLOW,GetResString(IDS_PRIOVERYLOW));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOLOW,GetResString(IDS_PRIOLOW));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIONORMAL,GetResString(IDS_PRIONORMAL));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOHIGH, GetResString(IDS_PRIOHIGH));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOVERYHIGH, GetResString(IDS_PRIORELEASE));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOAUTO, GetResString(IDS_PRIOAUTO));
d654 16
a669 4
			if(!itemdata->knownFile->IsPartFile()) {
                m_PrioMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
				m_PrioMenu.AppendMenu(MF_STRING,MP_JUMPSTART, _T("Jumpstart"));
				m_PrioMenu.CheckMenuItem(MP_JUMPSTART,itemdata->knownFile->GetJumpstartEnabled()?MF_CHECKED:MF_UNCHECKED);
a670 12
#endif
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PrioMenu.m_hMenu, GetResString(IDS_PRIORITY));
		}
		else
		{
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTON, GetResString(IDS_SF_PARTON));
			m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTON,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTHIDDEN, GetResString(IDS_SF_PARTHIDDEN));
			m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTHIDDEN,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTOFF, GetResString(IDS_SF_PARTOFF));
			m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTOFF,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
		}
d672 1
a672 13
		if(itemdata->isFile)
		{
			// add permission switcher
			m_PermMenu.CreateMenu();
			m_PermMenu.AppendMenu(MF_STRING,MP_PERMNONE,	GetResString(IDS_FSTATUS_LOCKED));
			m_PermMenu.AppendMenu(MF_STRING,MP_PERMFRIENDS,	GetResString(IDS_FSTATUS_FRIENDSONLY));
			m_PermMenu.AppendMenu(MF_STRING,MP_PERMALL,		GetResString(IDS_FSTATUS_PUBLIC));

			// todo enable when it works
			//m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PermMenu.m_hMenu, (LPCTSTR)"Permissions");
			m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_PrioMenu.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
			if(justOne && !itemdata->knownFile->IsPartFile())
d674 27
a700 8
				CString buffer = itemdata->knownFile->GetPath();				
				if (buffer.Right(1) != '\\')
					buffer += '\\';
				buffer += itemdata->knownFile->GetFileName();
				m_pSCM = new CShellContextMenu(m_hWnd,buffer);				
				scm.CreateMenu();
				m_pSCM->SetMenu(&scm);
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)scm.m_hMenu, GetResString(IDS_SHELLCONTEXT));
a701 7
			else
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_GRAYED,NULL, GetResString(IDS_SHELLCONTEXT));
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPENFOLDER, GetResString(IDS_OPENFOLDER));
			m_SharedFilesMenu.EnableMenuItem(MP_OPENFOLDER,((itemdata->knownFile->IsPartFile() || !(justOne)) ? MF_GRAYED:MF_ENABLED));
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD));
			m_SharedFilesMenu.EnableMenuItem(MP_CMT,(justOne) ? MF_ENABLED:MF_GRAYED);
		}
d703 13
a715 4
		//This menu option is is for testing..
		//m_SharedFilesMenu.AppendMenu(MF_STRING,Irc_SetSendLink,GetResString(IDS_IRC_ADDLINKTOIRC)); 
		
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d717 1
a717 5
		//--- context menu for a shared file ---
		if(itemdata->isFile)
		{
			if(justOne)
				m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,((theApp.glob_prefs->IsUAPEnabled()) && (itemdata->knownFile->IsPartFile())) ? MF_ENABLED:MF_GRAYED);
d719 3
a721 2
				m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,theApp.glob_prefs->IsUAPEnabled() ? MF_ENABLED:MF_GRAYED);
		}
d723 1
a723 4
		//--- context menu for a part of a file ---
		else
		{
			//--- feel free to add something ---
d725 1
a725 2

	//--- xrmb:allyaknow ---
a726 1
	//--- :xrmb ---
d745 3
a747 1
	m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d749 7
a755 12
//	if(m_allYaKnow==false)
//	{
//		if(itemdata->isFile)
//		{
			m_ed2kMenu.CreateMenu();
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1));
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2));
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK)); //<<-- enkeyDEV(Ottavio84) -Create source ed2k from downloads-
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_ed2kMenu.m_hMenu, GetResString(IDS_ED2KLINKFIX));
			m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_ed2kMenu.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
//		}
//	}
d763 6
a768 2
	m_SharedFilesMenu.AppendMenu(flag2|MF_POPUP,(UINT_PTR)m_Web.m_hMenu, GetResString(IDS_WEBSERVICES));
	m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_Web.m_hMenu,justOne ? MF_ENABLED:MF_GRAYED);
a770 1
//	m_SharedFilesMenu.RemoveMenu(18,MF_BYPOSITION);
@


1.59
log
@share files with soft limit
@
text
@d252 6
@


1.58
log
@Added multi JumpStart selection
@
text
@d38 2
d1602 5
d2470 12
@


1.57
log
@Option to disable filetype icons.
@
text
@d1183 66
a1248 14
        	case MP_JUMPSTART:
			if(file->GetJumpstartEnabled()) {
				if(AfxMessageBox(GetResString(IDS_JS_DISABLE), MB_YESNO|MB_ICONEXCLAMATION|MB_DEFBUTTON2) == IDYES) {
					file->SetJumpstartEnabled(false);
					switch(file->GetPriority()) {
						case PR_VERYLOW:
							SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOVERYLOW));
							break;
						case PR_LOW:
							SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOLOW));
							break;
						case PR_NORMAL:
							if (file->IsAutoPrioritized())
								SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTONORMAL));
d1250 23
a1272 14
								SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIONORMAL));
							break;	
						case PR_HIGH:
							if (file->IsAutoPrioritized())
								SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTOHIGH));
							else
								SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOHIGH));
							break;
						case PR_VERYHIGH:
							if (file->IsAutoPrioritized())
								SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTORELEASE));
							else
								SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIORELEASE));
							break;
a1274 26
			} 
			else {
				if(file->IsJsComplete()) {
					AfxMessageBox(GetResString(IDS_JS_COMPLETE), MB_OK|MB_ICONSTOP);
				} 
				else {
					file->SetJumpstartEnabled(true);
					switch(file->GetPriority()) {
						case PR_VERYLOW:
							buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOVERYLOW));
							break;
						case PR_LOW:
							buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOLOW));
							break;
						case PR_NORMAL:
							buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIONORMAL));
							break;	
						case PR_HIGH:
							buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIOHIGH));
							break;
						case PR_VERYHIGH:
							buffer.Format(_T("%s[%s]"),GetResString(IDS_PRIOJUMPSTART), GetResString(IDS_PRIORELEASE));
							break;
					}
					SetItemText(iSel,SFL_COLUMN_PRIORITY, buffer);
				}
d1278 5
a1282 5
			default:
				if(m_pSCM)
					if(m_pSCM->IsMenuCommand(wParam))
						m_pSCM->InvokeCommand(wParam, file);
				break;
@


1.56
log
@FileType Icons in shared and downloading files
@
text
@d1605 7
a1611 4
					iImage = theApp.GetFileTypeSystemImageIdx(file->GetFileName());
					if (theApp.GetSystemImageList() != NULL)
						::ImageList_Draw(theApp.GetSystemImageList(), iImage, dc->GetSafeHdc(), cur_rec.left, cur_rec.top, ILD_NORMAL);
					cur_rec.left += 16 + 3;
@


1.55
log
@updated complete sources (0.06b: display range of values)
@
text
@d1577 1
d1603 7
@


1.54
log
@minor complete sources changes
@
text
@d481 1
a481 4
	buffer = "";
	bool bIsPartFile= file->IsPartFile();
	uint16 c= (bIsPartFile) ? ((CPartFile*)file)->GetCompleteSourcesCount() : file->GetCompleteSourcesCount();
	if (c)
d483 7
a489 2
		uint8 n= (bIsPartFile) ? ((CPartFile*)file)->GetCompleteSourcesAccuracy() : file->GetCompleteSourcesAccuracy();
		if (n > 0)
d491 4
a494 2
			CString strAccuracy('*', n);
			buffer.Format(_T("%u (%s)"), c, strAccuracy);
d496 2
d499 1
a499 3
		{
			buffer.Format(_T("%u"), c);
		}
d1447 3
a1449 3
							uint16 u1= knownfile1->IsPartFile() ? ((CPartFile*)knownfile1)->GetCompleteSourcesCount() : knownfile1->GetCompleteSourcesCount();
							uint16 u2= knownfile2->IsPartFile() ? ((CPartFile*)knownfile2)->GetCompleteSourcesCount() : knownfile2->GetCompleteSourcesCount();
							return sortcmp(u1, u2);	// netwolf: complete sources (zegzav )
d1476 3
a1478 9
							bool b1= knownfile1->IsPartFile();
							bool b2= knownfile2->IsPartFile();
							uint8 a1= b1 ? ((CPartFile*)knownfile1)->GetCompleteSourcesAccuracy() : knownfile1->GetCompleteSourcesAccuracy();
							uint8 a2= b2 ? ((CPartFile*)knownfile2)->GetCompleteSourcesAccuracy() : knownfile2->GetCompleteSourcesAccuracy();
							uint16 c1= b1 ? ((CPartFile*)knownfile1)->GetCompleteSourcesCount() : knownfile1->GetCompleteSourcesCount();
							uint16 c2= b2 ? ((CPartFile*)knownfile2)->GetCompleteSourcesCount() : knownfile2->GetCompleteSourcesCount();
							double d1= (double)a1 + (1.0 - (1.0 / ((double)c1 + 1.0)));
							double d2= (double)a2 + (1.0 - (1.0 / ((double)c2 + 1.0)));
							return sortcmp(d1, d2);	// netwolf: complete sources (zegzav )
d2403 14
@


1.53
log
@added some #if JUMPSTART #endif
@
text
@d97 1
a97 1
	m_listSorter.item(SFL_COLUMN_COMPLETESRC)->set(1,true);
d482 2
a483 1
	uint16 c= file->GetCompleteSourcesCount();
d486 1
a486 1
		uint8 n= file->GetCompleteSourcesAccuracy();
d494 1
a494 1
			buffer.Format(_T("%u"), file->GetCompleteSourcesCount());
d1442 5
a1446 1
						return sortcmp(knownfile1->GetCompleteSourcesCount(), knownfile2->GetCompleteSourcesCount());	// netwolf: complete sources (zegzav )
d1471 11
a1481 1
						return sortcmp(knownfile1->GetCompleteSourcesAccuracy() + (knownfile1->GetCompleteSourcesCount() ? 1 : 0), knownfile2->GetCompleteSourcesAccuracy() + (knownfile2->GetCompleteSourcesCount() ? 1 : 0));	// netwolf: complete sources (zegzav )
@


1.52
log
@WebServer: corrected problem with priorities [BavarianSnail]
@
text
@d964 1
d968 1
d974 1
d978 1
d985 1
d989 1
d996 1
d1000 1
d1007 1
d1011 1
d1024 1
d1028 1
d1034 1
d1038 1
d1044 1
d1048 1
@


1.51
log
@small fix in JS output
@
text
@d345 1
@


1.50
log
@minor correction with JS output in SharedList
@
text
@d318 1
d328 4
a331 1
	} else {
d333 1
a333 1
			buffer = GetResString(IDS_PRIOVERYLOW);
d335 1
a335 1
			buffer = GetResString(IDS_PRIOLOW);
d337 1
a337 1
			buffer = GetResString(IDS_PRIONORMAL);
d339 1
a339 1
			buffer = GetResString(IDS_PRIOHIGH);
d341 1
a341 1
			buffer = GetResString(IDS_PRIORELEASE);
d344 1
a344 1
			buffer.Format(_T("%s[%s]"), GetResString(IDS_PRIOJUMPSTART),buffer);
d347 1
a347 1
		SetItemText(itemnr,SFL_COLUMN_PRIORITY, buffer);
@


1.49
log
@jumpstart support in SharedList (output, sorting...)
@
text
@a327 5
#if JUMPSTART
		if (file->GetJumpstartEnabled())
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOJUMPSTART));
		else if (file->GetPriority() == PR_VERYLOW)
#else
d329 1
a329 2
#endif
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOVERYLOW));
d331 1
a331 1
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOLOW));
d333 1
a333 1
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIONORMAL));
d335 1
a335 1
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOHIGH));
d337 7
a343 1
			SetItemText(itemnr,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIORELEASE));
d764 1
a848 1
				CString buffer;
d957 1
a957 1
							case MP_PRIOVERYLOW:
d959 5
a963 1
								SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOVERYLOW));
a964 1

d967 5
a971 1
								SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOLOW));
d976 5
a980 1
								SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIONORMAL));
d985 5
a989 1
								SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOHIGH));
d994 5
a998 1
								SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIORELEASE));
d1009 5
a1013 1
											SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTORELEASE));
d1017 5
a1021 1
											SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTOHIGH));
d1025 5
a1029 1
											SetItemText(iSel, SFL_COLUMN_PRIORITY, GetResString(IDS_PRIOAUTONORMAL));
d1036 2
d1195 18
a1212 1
					SetItemText(iSel,SFL_COLUMN_PRIORITY,GetResString(IDS_PRIOJUMPSTART));
d1399 1
a1399 8
#if JUMPSTART
						if (knownfile1->GetJumpstartEnabled())
							return sortcmp(m_p2p[PR_JUMPSTART], m_p2p[knownfile2->GetPriority()]);
						else if (knownfile2->GetJumpstartEnabled())
							return sortcmp(m_p2p[knownfile1->GetPriority()], m_p2p[PR_JUMPSTART]);
						else
#endif
							return sortcmp(m_p2p[knownfile1->GetPriority()], m_p2p[knownfile2->GetPriority()]);
@


1.48
log
@unicode cleanup
@
text
@d71 1
a71 1
uint8	CSharedFilesCtrl::m_p2p[6];
d106 3
d328 5
d334 1
d1124 42
a1165 14
        case MP_JUMPSTART:
            if(file->GetJumpstartEnabled()) {
                if(AfxMessageBox(GetResString(IDS_JS_DISABLE)
                    ,MB_YESNO|MB_ICONEXCLAMATION|MB_DEFBUTTON2) == IDYES) {
                        file->SetJumpstartEnabled(false);
                }
            } else {
                if(file->IsJsComplete()) {
                    AfxMessageBox(GetResString(IDS_JS_COMPLETE), MB_OK|MB_ICONSTOP);
                } else {
                    file->SetJumpstartEnabled(true);
                }
            }
            break;
d1167 5
a1171 5
		default:
			if(m_pSCM)
				if(m_pSCM->IsMenuCommand(wParam))
					m_pSCM->InvokeCommand(wParam, file);
			break;
d1349 8
a1356 1
						return sortcmp(m_p2p[knownfile1->GetPriority()], m_p2p[knownfile2->GetPriority()]);
@


1.47
log
@memcpy() optimized for AMD (faster in 2-2.5 times). AMD only. Compile with tag AMD
@
text
@d349 1
a349 1
		buffer.Format("%I64u (%I64u)", a, b);	//Cax2 - display bugfix
d351 1
a351 1
		buffer = "";
d357 1
a357 1
		buffer.Format("%I64u (%I64u)", a, b);	//Cax2 - display bugfix
d359 1
a359 1
		buffer = "";
d366 1
a366 1
		buffer.Format("%s (%s)", CastItoXBytes(a), CastItoXBytes(b));
d369 1
a369 1
		buffer = "";
d377 1
a377 1
		buffer.Format("%0.2f (%0.2f)", cr, (double)b/a);
d379 1
a379 1
		buffer = "";
d395 1
a395 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, "");
d437 1
a437 1
				buffer.Format("%i (%i)", as, a);
d439 1
a439 1
				buffer = "";
d447 1
a447 1
				buffer.Format("%s (%s)", CastItoXBytes(ts), CastItoXBytes(t));
d450 1
a450 1
				buffer = "";
d456 1
a456 1
				buffer.Format("%0.2f (%0.2f)", cr, (double)t/file->GetPartSize(itemdata->part));
d458 1
a458 1
				buffer = "";
d475 1
a475 1
			buffer.Format("%u (%s)", c, (const char *)strAccuracy);
d479 1
a479 1
			buffer.Format("%u", file->GetCompleteSourcesCount());
d628 1
a628 1
				m_PrioMenu.AppendMenu(MF_STRING,MP_JUMPSTART, "Jumpstart");
d840 1
a840 1
				buffer.Format("%s\\%s",file->GetPath(),file->GetFileName());
d1071 1
a1071 1
									SetItemText(iSel, SFL_COLUMN_PRIORITY, "");
d1075 1
a1075 1
									SetItemText(iSel, SFL_COLUMN_PRIORITY, "blocked");
d1079 1
a1079 1
									SetItemText(iSel, SFL_COLUMN_PRIORITY, "hidden");
d1303 1
a1303 1
						return stricmp(knownfile1->GetFileName(), knownfile2->GetFileName());
d1309 1
a1309 1
						return stricmp(GetFiletypeByName(knownfile1->GetFileName()), GetFiletypeByName(knownfile2->GetFileName()));
d2048 1
a2048 1
				buffer.Format("%i", part);
d2279 1
a2279 1
	counter.Format(" (%i)",GetItemCount() );
@


1.46
log
@Preparing for new sockets
@
text
@d26 1
d1448 1
d1450 3
d2281 1
a2281 1
}@


1.45
log
@code cleanup
@
text
@d817 1
d831 1
@


1.44
log
@code cleanup
@
text
@d309 1
a309 1
	char buffer[250];
a310 1
	
d348 1
a348 1
		sprintf(buffer, "%I64u (%I64u)", a, b);	//Cax2 - display bugfix
d350 1
a350 1
		buffer[0]=0;
d356 1
a356 1
		sprintf(buffer, "%I64u (%I64u)", a, b);	//Cax2 - display bugfix
d358 1
a358 1
		buffer[0]=0;
d365 1
a365 1
		sprintf(buffer, "%s (%s)", CastItoXBytes(a), CastItoXBytes(b));
d368 1
a368 1
		buffer[0]=0;
d376 1
a376 1
		sprintf(buffer, "%0.2f (%0.2f)", cr, (double)b/a);
d378 1
a378 1
		buffer[0]=0;
d436 1
a436 1
				sprintf(buffer, "%i (%i)", as, a);
d438 1
a438 1
				buffer[0]='\0';
d446 1
a446 1
				sprintf(buffer, "%s (%s)", CastItoXBytes(ts), CastItoXBytes(t));
d449 1
a449 1
				buffer[0]='\0';
d455 1
a455 1
				sprintf(buffer, "%0.2f (%0.2f)", cr, (double)t/file->GetPartSize(itemdata->part));
d457 1
a457 1
				buffer[0]=0;
d466 1
a466 1
	buffer[0] = 0;
d474 1
a474 1
			sprintf(buffer, "%u (%s)", c, (const char *)strAccuracy);
d478 1
a478 1
			sprintf(buffer, "%u", file->GetCompleteSourcesCount());
d657 5
a661 8
				char* buffer = new char[MAX_PATH];
				strcpy(buffer, itemdata->knownFile->GetPath());
				if (buffer[strlen(buffer)-1]=='\\')
					strcat(buffer,itemdata->knownFile->GetFileName());
				else
					sprintf(buffer,"%s\\%s",buffer,itemdata->knownFile->GetFileName());
				m_pSCM = new CShellContextMenu(m_hWnd,buffer);
				delete buffer;
d836 4
a839 5
				char* buffer = new char[MAX_PATH];
				sprintf(buffer,"%s\\%s",file->GetPath(),file->GetFileName());
				AddLogLine( false, "%s\\%s",file->GetPath(),file->GetFileName());
				ShellOpenFile(buffer);
				delete buffer;
d2021 1
a2021 1
			char	buffer[20];
d2041 1
a2041 1
				sprintf(buffer, "%i", part);
@


1.43
log
@code cleanup
@
text
@d343 2
a344 6
	SetItemText(itemnr,SFL_COLUMN_PERMISSION,GetResString(IDS_FSTATUS_PUBLIC));

	buffer[0] = 0;
	for (uint16 i = 0;i != 16;i++) // hmm I wonder if there is a standard function for this
		sprintf(buffer,"%s%02X",buffer,file->GetFileHash()[i]);
	SetItemText(itemnr,SFL_COLUMN_FILEID,buffer);
@


1.42
log
@minor changes
@
text
@d792 1
a792 1
				theApp.emuledlg->ircwnd.SetSendFileString(theApp.CreateED2kLink(file));
d800 1
a800 1
						str += theApp.CreateED2kLink(selectedList.ElementAt(0));
d814 1
a814 1
						str += theApp.CreateHTMLED2kLink(selectedList.ElementAt(0));
d830 1
a830 1
							str += theApp.CreateED2kSourceLink(selectedList.ElementAt(0));
@


1.41
log
@Jumpstart localizations
@
text
@d403 1
a403 1
				SetItemText(itemnr+1+part, SFL_COLUMN_PRIORITY, GetResString(IDS_HIDDEN).MakeLower());
@


1.40
log
@fix for Jumpstart insisting on turning itself on
@
text
@d1123 1
a1123 1
                if(AfxMessageBox("Are you sure you want to turn Jumpstart off for this file?"
d1129 1
a1129 1
                    AfxMessageBox("Jumpstart period was already completed for this file", MB_OK|MB_ICONSTOP);
@


1.39
log
@complete sources column
@
text
@d1122 12
a1133 1
            file->SetJumpstartEnabled(!file->GetJumpstartEnabled());
@


1.38
log
@Small fixes
@
text
@d54 1
d87 1
a87 1
	m_listSorter.init(11);
d96 1
d140 1
d143 2
a144 2
	InsertColumn(SFL_COLUMN_PARTTRAFFIC,GetResString(IDS_SF_PARTTRAFFIC),LVCFMT_LEFT,120);
	InsertColumn(SFL_COLUMN_UPLOADS,GetResString(IDS_SF_COLUPLOADS),LVCFMT_LEFT,120);
d232 5
d470 19
d1327 2
d1352 3
d1478 1
d1593 1
@


1.37
log
@Jumpstart debug runtime check
@
text
@d721 1
a721 1
	m_SharedFilesMenu.RemoveMenu(18,MF_BYPOSITION);
d723 1
@


1.36
log
@Fix bug #55 by JooeyRamone
@
text
@d604 1
@


1.35
log
@You can create links for any known file now
@
text
@d1411 3
d1415 2
a1416 1
	for(int c=0; c<ColumnsTracked(); c++)
d1419 2
a1420 1
		int cc=GetColumnColumn(c);
d1426 1
a1426 1
 		if(c)
@


1.34
log
@oops, fixed win9x crash?
@
text
@d697 4
a700 4
	if(m_allYaKnow==false)
	{
		if(itemdata->isFile)
		{
d707 2
a708 2
		}
	}
@


1.33
log
@Fixed bugs #38 & #169
@
text
@d578 1
a641 1
				CMenu scm;
@


1.32
log
@fix crash at exit
@
text
@d1099 1
a1099 1
					m_pSCM->InvokeCommand(wParam);
@


1.32.2.1
log
@27a partial merge
@
text
@a53 1
	SFL_COLUMN_FOLDER,
d86 1
a86 1
	m_listSorter.init(12);
a142 2
	InsertColumn(SFL_COLUMN_FOLDER,GetResString(IDS_FOLDER),LVCFMT_LEFT,200);

a237 5
		
		strRes = GetResString(IDS_FOLDER);
		hdi.pszText = strRes.GetBuffer();
		pHeaderCtrl->SetItem(SFL_COLUMN_FOLDER, &hdi);
		strRes.ReleaseBuffer();
a377 2
	SetItemText(itemnr,SFL_COLUMN_FOLDER,file->GetPath());

d1307 1
a1307 4
						}
					case SFL_COLUMN_FOLDER:
						return stricmp(knownfile1->GetPath(), knownfile2->GetPath());
				}
a1441 1
				case SFL_COLUMN_FOLDER:
@


1.31
log
@removed shift rightclick handling
@
text
@d1340 3
@


1.30
log
@Fixed bug #28
@
text
@d109 2
a110 3
		if(m_pSCM)
			delete m_pSCM;
		m_pSCM    = NULL;
d558 1
a558 1
	CMenu scm;
d574 4
a577 11
	if(justOne && !m_allYaKnow && itemdata->isFile && !itemdata->knownFile->IsPartFile())
	{
		char* buffer = new char[MAX_PATH];
		strcpy(buffer, itemdata->knownFile->GetPath());
		if (buffer[strlen(buffer)-1]=='\\')
			strcat(buffer,itemdata->knownFile->GetFileName());
		else
			sprintf(buffer,"%s\\%s",buffer,itemdata->knownFile->GetFileName());
		m_pSCM = new CShellContextMenu(m_hWnd,buffer);
		delete buffer;
	}
d579 4
a582 6
	if(GetAsyncKeyState(VK_SHIFT) < 0 && m_pSCM)
	{
		scm.CreatePopupMenu();
		m_pSCM->SetMenu(&scm);
		scm.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON,point.x,point.y,this);
	}
d584 6
d591 18
a608 9
		CTitleMenu	   	m_SharedFilesMenu;
		CMenu		   	m_PrioMenu;
		CMenu		   	m_PermMenu;
		CMenu			m_ed2kMenu;

		m_SharedFilesMenu.CreatePopupMenu();
		//--- xrmb:allyaknow ---
		if(m_allYaKnow)
			m_SharedFilesMenu.AddMenuTitle(GetResString(IDS_KNOWNFILES));
a609 6
		//--- :xrmb ---
			m_SharedFilesMenu.AddMenuTitle(GetResString(IDS_SHAREDFILES));
		
		// add priority switcher
		//--- xrmb:allyaknow ---
		if(m_allYaKnow==false)
d611 7
a617 27
		//--- :xrmb ---
			if(itemdata->isFile)
			{
				m_PrioMenu.CreateMenu();
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOVERYLOW,GetResString(IDS_PRIOVERYLOW));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOLOW,GetResString(IDS_PRIOLOW));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIONORMAL,GetResString(IDS_PRIONORMAL));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOHIGH, GetResString(IDS_PRIOHIGH));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOVERYHIGH, GetResString(IDS_PRIORELEASE));
				m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOAUTO, GetResString(IDS_PRIOAUTO));
	#if JUMPSTART
				if(!itemdata->knownFile->IsPartFile()) {
					m_PrioMenu.AppendMenu(MF_STRING,MP_JUMPSTART, "Jumpstart");
					m_PrioMenu.CheckMenuItem(MP_JUMPSTART,itemdata->knownFile->GetJumpstartEnabled()?MF_CHECKED:MF_UNCHECKED);
				}
	#endif
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PrioMenu.m_hMenu, GetResString(IDS_PRIORITY));
			}
			else
			{
				m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTON, GetResString(IDS_SF_PARTON));
				m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTON,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
				m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTHIDDEN, GetResString(IDS_SF_PARTHIDDEN));
				m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTHIDDEN,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
				m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTOFF, GetResString(IDS_SF_PARTOFF));
				m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTOFF,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
			}
d619 13
a631 1
			if(itemdata->isFile)
d633 4
a636 16
				// add permission switcher
				m_PermMenu.CreateMenu();
				m_PermMenu.AppendMenu(MF_STRING,MP_PERMNONE,	GetResString(IDS_FSTATUS_LOCKED));
				m_PermMenu.AppendMenu(MF_STRING,MP_PERMFRIENDS,	GetResString(IDS_FSTATUS_FRIENDSONLY));
				m_PermMenu.AppendMenu(MF_STRING,MP_PERMALL,		GetResString(IDS_FSTATUS_PUBLIC));

				// todo enable when it works
				//m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PermMenu.m_hMenu, (LPCTSTR)"Permissions");
				m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_PrioMenu.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
				if(m_pSCM)
				{
					scm.CreateMenu();
					m_pSCM->SetMenu(&scm);
					m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)scm.m_hMenu, GetResString(IDS_SHELLCONTEXT));
				}
d638 7
a644 5
					m_SharedFilesMenu.AppendMenu(MF_STRING|MF_GRAYED,NULL, GetResString(IDS_SHELLCONTEXT));
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPENFOLDER, GetResString(IDS_OPENFOLDER));
				m_SharedFilesMenu.EnableMenuItem(MP_OPENFOLDER,((itemdata->knownFile->IsPartFile() || !(justOne)) ? MF_GRAYED:MF_ENABLED));
				m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD));
				m_SharedFilesMenu.EnableMenuItem(MP_CMT,(justOne) ? MF_ENABLED:MF_GRAYED);
d646 7
d654 4
a657 4
			//This menu option is is for testing..
			//m_SharedFilesMenu.AppendMenu(MF_STRING,Irc_SetSendLink,GetResString(IDS_IRC_ADDLINKTOIRC)); 
			
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d659 5
a663 10
			//--- context menu for a shared file ---
			if(itemdata->isFile)
			{
				if(justOne)
					m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,((theApp.glob_prefs->IsUAPEnabled()) && (itemdata->knownFile->IsPartFile())) ? MF_ENABLED:MF_GRAYED);
				else
					m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,theApp.glob_prefs->IsUAPEnabled() ? MF_ENABLED:MF_GRAYED);
			}

			//--- context menu for a part of a file ---
d665 2
a666 3
			{
				//--- feel free to add something ---
			}
d668 4
a671 1
		//--- xrmb:allyaknow ---
a672 1
		//--- :xrmb ---
d674 6
a679 2
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARALLSTATS, GetResString(IDS_SF_RESETALLSTATS));
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARSTATS, GetResString(IDS_SF_RESETSESSTATS));
d681 7
a687 1
		//--- xrmb:allyaknow ---
d689 5
a693 11
		if(m_allYaKnow)
		{
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_DELKNOWN, GetResString(IDS_SF_DELETE));
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_MERGEKNOWN, GetResString(IDS_SF_MERGE));
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_ALLYAKNOW, GetResString(IDS_SF_SHOWALLSF));
		}
		else
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_ALLYAKNOW, GetResString(IDS_SF_SHOWALLKF));
		//--- :xrmb ---
d695 1
a695 1
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d697 3
a699 1
		if(m_allYaKnow==false)
d701 6
a706 9
			if(itemdata->isFile)
			{
				m_ed2kMenu.CreateMenu();
				m_ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1));
				m_ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2));
				m_ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK)); //<<-- enkeyDEV(Ottavio84) -Create source ed2k from downloads-
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_ed2kMenu.m_hMenu, GetResString(IDS_ED2KLINKFIX));
				m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_ed2kMenu.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
			}
d708 14
a722 13
		int counter;
		CMenu m_Web;
		m_Web.CreateMenu();
		UpdateURLMenu(m_Web,counter);
		UINT flag2;
		flag2=(counter==0) ? MF_GRAYED:MF_STRING;
		m_SharedFilesMenu.AppendMenu(flag2|MF_POPUP,(UINT_PTR)m_Web.m_hMenu, GetResString(IDS_WEBSERVICES));
		m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_Web.m_hMenu,justOne ? MF_ENABLED:MF_GRAYED);

		m_SharedFilesMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON,point.x,point.y,this);
		m_SharedFilesMenu.RemoveMenu(18,MF_BYPOSITION);
		m_Web.DestroyMenu();
	}
@


1.29
log
@Changed again...
@
text
@d495 1
@


1.28
log
@Changes to credits and ed2k links.
@
text
@d673 4
a676 1
				m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,theApp.glob_prefs->IsUAPEnabled() ? MF_ENABLED:MF_GRAYED); //Hunter
@


1.27
log
@more bugfixes!
@
text
@d779 1
a779 1
						str += theApp.CreateED2kLink(selectedList.ElementAt(0)) + "\n";
d781 2
d793 1
a793 1
						str += theApp.CreateHTMLED2kLink(selectedList.ElementAt(0)) + "\n";
d795 2
d809 1
a809 1
							str += theApp.CreateED2kSourceLink(selectedList.ElementAt(0)) + "\n";
d811 2
@


1.26
log
@Removed option for Establishing Friend Slot (not good for zz system) and changed the way of setting Auto priorities again (THX netwolf!)
@
text
@d344 1
a344 1
	uint64 b=file->statistic.GetAllTimeRequests();	//katsyonak - 4GB bugfix
d346 1
a346 1
		sprintf(buffer, "%u (%u)", a, b);
d354 1
a354 1
		sprintf(buffer, "%u (%u)", a, b);
d370 2
a371 1
	uint32	fs=file->GetFileSize();
d373 2
a374 2
	if(fs && cr+file->statistic.GetAllTimeTransfered()!=0.0 )		//Cax2 patch: show uploads for files with alltimetransfered >0
		sprintf(buffer, "%0.2f (%0.2f)", cr, (double)file->statistic.GetAllTimeTransfered()/fs);
@


1.25
log
@For now when you select multiple files in Shared Files you can't set them to auto. If you select one it should be a dounloading file.
@
text
@d670 1
a670 1
			if(itemdata->isFile && justOne)
d672 1
a672 1
				m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,((theApp.glob_prefs->IsUAPEnabled()) && (itemdata->knownFile->IsPartFile())) ? MF_ENABLED:MF_GRAYED); //Hunter
@


1.24
log
@converted to new logging method
@
text
@d670 1
a670 1
			if(itemdata->isFile)
@


1.23
log
@one even more minor change :)
@
text
@d168 1
a168 1
	//theApp.emuledlg->AddLogLine(true, "sort column %i, direction %s, level %i reverse is: %i", m_listSorter.selected(), m_listSorter.dir()?"ascending":"descending", m_listSorter.level(),reverse);
d818 1
a818 1
				theApp.emuledlg->AddLogLine( false, "%s\\%s",file->GetPath(),file->GetFileName());
d1122 1
a1122 1
	//theApp.emuledlg->AddLogLine(true, "sort column %i, direction %s, level %i", m_listSorter.selected(), m_listSorter.dir()?"ascending":"descending", m_listSorter.level());
@


1.22
log
@minor changes, pressing shift key while rightclicking now brings up shell menu
@
text
@d559 1
d561 2
a562 1
	m_pSCM=NULL;
@


1.21
log
@4gb bugfix (bug #58)
@
text
@a108 2
	try
	{
a111 4
	}
	catch(...)
	{
	}
d557 4
d571 11
a581 4
	CTitleMenu	   	m_SharedFilesMenu;
	CMenu		   	m_PrioMenu;
	CMenu		   	m_PermMenu;
	CMenu			m_ed2kMenu;
d583 6
a588 4
	m_SharedFilesMenu.CreatePopupMenu();
	//--- xrmb:allyaknow ---
	if(m_allYaKnow)
		m_SharedFilesMenu.AddMenuTitle(GetResString(IDS_KNOWNFILES));
a589 6
	//--- :xrmb ---
		m_SharedFilesMenu.AddMenuTitle(GetResString(IDS_SHAREDFILES));
	
	// add priority switcher
	//--- xrmb:allyaknow ---
	if(m_allYaKnow==false)
d591 9
a599 18
	//--- :xrmb ---
		if(itemdata->isFile)
		{
			m_PrioMenu.CreateMenu();
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOVERYLOW,GetResString(IDS_PRIOVERYLOW));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOLOW,GetResString(IDS_PRIOLOW));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIONORMAL,GetResString(IDS_PRIONORMAL));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOHIGH, GetResString(IDS_PRIOHIGH));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOVERYHIGH, GetResString(IDS_PRIORELEASE));
			m_PrioMenu.AppendMenu(MF_STRING,MP_PRIOAUTO, GetResString(IDS_PRIOAUTO));
#if JUMPSTART
            if(!itemdata->knownFile->IsPartFile()) {
			    m_PrioMenu.AppendMenu(MF_STRING,MP_JUMPSTART, "Jumpstart");
                m_PrioMenu.CheckMenuItem(MP_JUMPSTART,itemdata->knownFile->GetJumpstartEnabled()?MF_CHECKED:MF_UNCHECKED);
            }
#endif
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PrioMenu.m_hMenu, GetResString(IDS_PRIORITY));
		}
d601 6
d608 18
a625 22
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTON, GetResString(IDS_SF_PARTON));
			m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTON,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTHIDDEN, GetResString(IDS_SF_PARTHIDDEN));
			m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTHIDDEN,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
			m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_PARTOFF, GetResString(IDS_SF_PARTOFF));
			m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTOFF,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
		}

		if(itemdata->isFile)
		{
			// add permission switcher
			m_PermMenu.CreateMenu();
			m_PermMenu.AppendMenu(MF_STRING,MP_PERMNONE,	GetResString(IDS_FSTATUS_LOCKED));
			m_PermMenu.AppendMenu(MF_STRING,MP_PERMFRIENDS,	GetResString(IDS_FSTATUS_FRIENDSONLY));
			m_PermMenu.AppendMenu(MF_STRING,MP_PERMALL,		GetResString(IDS_FSTATUS_PUBLIC));

			// todo enable when it works
			//m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_PermMenu.m_hMenu, (LPCTSTR)"Permissions");
			m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_PrioMenu.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR);
			if(itemdata->knownFile->IsPartFile() || !(justOne))
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_GRAYED,NULL, GetResString(IDS_SHELLCONTEXT));
d628 21
a648 1
				try
a649 10
					char* buffer = new char[MAX_PATH];
					strcpy(buffer, itemdata->knownFile->GetPath());
					if (buffer[strlen(buffer)-1]=='\\')
						strcat(buffer,itemdata->knownFile->GetFileName());
					else
						sprintf(buffer,"%s\\%s",buffer,itemdata->knownFile->GetFileName());
					if(m_pSCM)
						delete m_pSCM;
					CMenu scm;
					m_pSCM = new CShellContextMenu(m_hWnd,buffer);
a652 1
					delete buffer;
d654 1
a654 2
				catch(...)
				{
d656 21
a676 1
				}
d678 2
a679 4
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPENFOLDER, GetResString(IDS_OPENFOLDER));
			m_SharedFilesMenu.EnableMenuItem(MP_OPENFOLDER,((itemdata->knownFile->IsPartFile() || !(justOne)) ? MF_GRAYED:MF_ENABLED));
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD));
			m_SharedFilesMenu.EnableMenuItem(MP_CMT,(justOne) ? MF_ENABLED:MF_GRAYED);
d681 1
d683 4
a686 3
		//This menu option is is for testing..
		//m_SharedFilesMenu.AppendMenu(MF_STRING,Irc_SetSendLink,GetResString(IDS_IRC_ADDLINKTOIRC)); 
		
d688 1
a688 3

		//--- context menu for a shared file ---
		if(itemdata->isFile)
d690 5
a694 1
			m_PrioMenu.EnableMenuItem(MP_PRIOAUTO,((theApp.glob_prefs->IsUAPEnabled()) && (itemdata->knownFile->IsPartFile())) ? MF_ENABLED:MF_GRAYED); //Hunter
a695 2

		//--- context menu for a part of a file ---
d697 2
a698 3
		{
			//--- feel free to add something ---
		}
a699 14
	//--- xrmb:allyaknow ---
	}
	//--- :xrmb ---

	m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARALLSTATS, GetResString(IDS_SF_RESETALLSTATS));
	m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_CLEARSTATS, GetResString(IDS_SF_RESETSESSTATS));

	//--- xrmb:allyaknow ---
	m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
	if(m_allYaKnow)
	{
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_DELKNOWN, GetResString(IDS_SF_DELETE));
		m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_MERGEKNOWN, GetResString(IDS_SF_MERGE));
a700 5
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_ALLYAKNOW, GetResString(IDS_SF_SHOWALLSF));
	}
	else
		m_SharedFilesMenu.AppendMenu(MF_STRING, MP_SFL_ALLYAKNOW, GetResString(IDS_SF_SHOWALLKF));
	//--- :xrmb ---
d702 1
a702 5
	m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 

	if(m_allYaKnow==false)
	{
		if(itemdata->isFile)
d704 9
a712 6
			m_ed2kMenu.CreateMenu();
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1));
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2));
			m_ed2kMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK)); //<<-- enkeyDEV(Ottavio84) -Create source ed2k from downloads-
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)m_ed2kMenu.m_hMenu, GetResString(IDS_ED2KLINKFIX));
			m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_ed2kMenu.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
d714 13
d728 2
a730 13
	int counter;
	CMenu m_Web;
	m_Web.CreateMenu();
	UpdateURLMenu(m_Web,counter);
	UINT flag2;
	flag2=(counter==0) ? MF_GRAYED:MF_STRING;
	m_SharedFilesMenu.AppendMenu(flag2|MF_POPUP,(UINT_PTR)m_Web.m_hMenu, GetResString(IDS_WEBSERVICES));
	m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_Web.m_hMenu,justOne ? MF_ENABLED:MF_GRAYED);

	m_SharedFilesMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON,point.x,point.y,this);
	m_pSCM->CleanUp();
	m_SharedFilesMenu.RemoveMenu(18,MF_BYPOSITION);
	m_Web.DestroyMenu();
d1096 3
a1098 9
			try
			{
				if(m_pSCM)
					if(m_pSCM->IsMenuCommand(wParam))
						m_pSCM->InvokeCommand(wParam);
			}
			catch(...)
			{
			}
@


1.20
log
@jumpstart fixes
@
text
@d349 2
a350 2
	uint32 a=file->statistic.GetRequests();
	uint32 b=file->statistic.GetAllTimeRequests();
@


1.19
log
@Shell Menu bugfixes (i hope!)
@
text
@d34 1
a34 1
#define MP_JUMPSTART 10791
@


1.18
log
@another crashfix
@
text
@a36 1

d630 1
a630 3
			WORD wWinVer = theApp.glob_prefs->GetWindowsVersion();
			if(itemdata->knownFile->IsPartFile() || !(justOne) ||
				(wWinVer == _WINVER_95_ || wWinVer == _WINVER_98_ || wWinVer == _WINVER_ME_))
d725 1
a727 1

@


1.17
log
@Workaround for shell context menu in Win9x/ME
@
text
@d1908 3
@


1.16
log
@more Jumpstarter
@
text
@d110 9
a118 2
	delete m_pSCM;
	m_pSCM    = NULL;
d631 3
a633 1
			if(itemdata->knownFile->IsPartFile() || !(justOne))
d637 21
a657 14
				char* buffer = new char[MAX_PATH];
				strcpy(buffer, itemdata->knownFile->GetPath());
				if (buffer[strlen(buffer)-1]=='\\')
					strcat(buffer,itemdata->knownFile->GetFileName());
				else
					sprintf(buffer,"%s\\%s",buffer,itemdata->knownFile->GetFileName());
				if(m_pSCM)
					delete m_pSCM;
				CMenu scm;
				m_pSCM = new CShellContextMenu(m_hWnd,buffer);
				scm.CreateMenu();
				m_pSCM->SetMenu(&scm);
				m_SharedFilesMenu.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)scm.m_hMenu, GetResString(IDS_SHELLCONTEXT));
				delete buffer;
d1096 9
a1104 2
			if(m_pSCM && m_pSCM->IsMenuCommand(wParam))
				m_pSCM->InvokeCommand(wParam);
@


1.15
log
@Changes protected by a #define, should have no effect
@
text
@d34 1
a34 1
#define MP_JUMPSTART 10515
@


1.14
log
@Last changes to context menues and Fakecheck code removal.
@
text
@d33 5
d594 6
d1074 5
a1078 1

@


1.13
log
@Updates to reCDVst changes (missing strings) and some changes to the context menu (lost an hour for a f****** define). Added standard web services.
@
text
@d562 4
a565 3
	CTitleMenu	   m_SharedFilesMenu;
	CMenu		   m_PrioMenu;
	CMenu		   m_PermMenu;
a635 7
			m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_GETED2KLINK, GetResString(IDS_DL_LINK1));
			m_SharedFilesMenu.EnableMenuItem(MP_GETED2KLINK,None ? MF_GRAYED:MF_ENABLED);
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_GETHTMLED2KLINK, GetResString(IDS_DL_LINK2));
			m_SharedFilesMenu.EnableMenuItem(MP_GETHTMLED2KLINK,None ? MF_GRAYED:MF_ENABLED);
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_GETSOURCEED2KLINK, GetResString(IDS_CREATESOURCELINK));
			m_SharedFilesMenu.EnableMenuItem(MP_GETSOURCEED2KLINK,None ? MF_GRAYED:MF_ENABLED);
d676 15
a690 1
   m_SharedFilesMenu.AppendMenu(MF_STRING|MF_SEPARATOR); 
d697 2
a698 1
	m_SharedFilesMenu.AppendMenu(flag2|MF_POPUP,(UINT_PTR)m_Web.m_hMenu, GetResString(IDS_WEBSERVICES) );
a835 5

		case MP_FAKECHECK1: // DeltaHF
				if(selectedCount > 1) break;
				theApp.Action(file);
				break;
@


1.12
log
@all my stable changes and some minor fixes (refer to changelog)
@
text
@a611 6
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_FAKECHECK1, GetResString(IDS_JIGLE)); // DeltaHF (Jigle update)
			m_SharedFilesMenu.EnableMenuItem(MP_FAKECHECK1,(justOne) ? MF_ENABLED:MF_GRAYED);
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPEN, GetResString(IDS_OPENFILE));			
			m_SharedFilesMenu.EnableMenuItem(MP_OPEN,((itemdata->knownFile->IsPartFile() || !(justOne)) ? MF_GRAYED:MF_ENABLED));
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPENFOLDER, GetResString(IDS_OPENFOLDER));
			m_SharedFilesMenu.EnableMenuItem(MP_OPENFOLDER,((itemdata->knownFile->IsPartFile() || !(justOne)) ? MF_GRAYED:MF_ENABLED));
d631 2
@


1.11
log
@*** empty log message ***
@
text
@d68 1
a68 1
CSharedFilesCtrl::CSharedFilesCtrl() 
d105 2
d618 19
d686 9
d696 2
d712 3
d1063 5
d2192 1
a2192 1
}
@


1.10
log
@xrmb updated code for Part Traffic (not the last one).
@
text
@d241 2
d253 2
d279 1
a279 1
	SetRedraw(false);
@


1.9
log
@Messages friend details working & solved context menu problems (Damn! we need a redesign of that). Now version 1b beta 1.
@
text
@d54 2
d265 2
d275 2
d587 1
d589 1
d591 1
d995 1
d1653 4
d1663 1
a1663 1
					pen.CreatePen(PS_SOLID, 0, GetTrafficColor(t/bpp));
d1678 1
a1678 1
					pen.CreatePen(PS_SOLID, 0, GetTrafficColor(t/bpp));
d1693 1
a1693 1
					pen.CreatePen(PS_SOLID, 0, GetTrafficColor(t/bpp));
d1875 2
d1886 2
d1897 3
d1918 2
@


1.8
log
@A4AF shown gray, context menus updated and minor updates. Beta 3 numbering.
@
text
@d548 1
d595 1
d607 1
d609 1
d611 1
@


1.7
log
@open containing and incoming folders in shared files
@
text
@d547 2
d596 3
a598 2
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPEN, GetResString(IDS_OPENFILE));
			m_SharedFilesMenu.EnableMenuItem(MP_OPEN,(itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED));
d600 3
a602 2
			m_SharedFilesMenu.EnableMenuItem(MP_OPENFOLDER,(itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED));
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD)); 
d1817 27
a1843 1
		//--- if you want you can add here some part-things ---
@


1.7.2.1
log
@v1a upgrade
@
text
@a546 3
	bool justOne=(GetSelectedCount()==1); //Cax2 faster code
	bool None=(GetSelectedCount()==0);

a591 1
			m_SharedFilesMenu.EnableMenuItem((UINT_PTR)m_PrioMenu.m_hMenu,None ? MF_GRAYED:MF_ENABLED);
d594 2
a595 3
			m_SharedFilesMenu.EnableMenuItem(MP_FAKECHECK1,(justOne) ? MF_ENABLED:MF_GRAYED);
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_OPEN, GetResString(IDS_OPENFILE));			
			m_SharedFilesMenu.EnableMenuItem(MP_OPEN,((itemdata->knownFile->IsPartFile() || !(justOne)) ? MF_GRAYED:MF_ENABLED));
d597 2
a598 3
			m_SharedFilesMenu.EnableMenuItem(MP_OPENFOLDER,((itemdata->knownFile->IsPartFile() || !(justOne)) ? MF_GRAYED:MF_ENABLED));
			m_SharedFilesMenu.AppendMenu(MF_STRING,MP_CMT, GetResString(IDS_CMT_ADD));
			m_SharedFilesMenu.EnableMenuItem(MP_CMT,(justOne) ? MF_ENABLED:MF_GRAYED);
a600 1
			m_SharedFilesMenu.EnableMenuItem(MP_GETED2KLINK,None ? MF_GRAYED:MF_ENABLED);
a601 1
			m_SharedFilesMenu.EnableMenuItem(MP_GETHTMLED2KLINK,None ? MF_GRAYED:MF_ENABLED);
a602 1
			m_SharedFilesMenu.EnableMenuItem(MP_GETSOURCEED2KLINK,None ? MF_GRAYED:MF_ENABLED);
d1813 1
a1813 27
		switch(i->iSubItem)
		{
			case SFL_COLUMN_PRIORITY:
				{
					//--- no blocking and hidding for partfiles! ---
					if(itemdataParent->knownFile->IsPartFile())
						break;

					int setTo=MP_SFL_PARTON;
					switch(itemdataParent->knownFile->GetPartStatus(itemdataParent->part))
					{
						case PR_PART_ON:
							setTo=PR_PART_HIDDEN;
							break;
						case PR_PART_HIDDEN:
							setTo=PR_PART_OFF;
							break;
						case PR_PART_OFF:
						default:
							setTo=PR_PART_ON;
							break;
					}
					itemdataParent->knownFile->SetPartStatus(itemdataParent->part, setTo);
					UpdateItem(itemdataParent->knownFile);
				}
				break;
		}
@


1.7.2.2
log
@keeping in sync with the main cvs line
@
text
@a53 2
#define GrayIt(gray, color) gray?(0x444444+0x010101*((GetRValue(color)*30+GetGValue(color)*59+GetBValue(color)*11)/0xFF)):color

a262 2
	SetRedraw(false);

a270 2
	SetRedraw(false);

a580 1
			m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTON,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
a581 1
			m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTHIDDEN,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
a582 1
			m_SharedFilesMenu.EnableMenuItem(MP_SFL_PARTOFF,itemdata->knownFile->IsPartFile() ? MF_GRAYED:MF_ENABLED);
a985 1
				RedrawItems(0, GetItemCount());
a1642 4
			//--- xrmb:partprio ---
			bool	boh=statistic.fileParent->GetPartStatus(x*bpp/PARTSIZE)!=PR_PART_ON;
			//--- :xrmb ---

d1649 1
a1649 1
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
d1664 1
a1664 1
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
d1679 1
a1679 1
					pen.CreatePen(PS_SOLID, 0, GrayIt(boh, GetTrafficColor(t/bpp)));
a1860 2
		SetRedraw(false);

a1869 2

		SetRedraw(true);
a1878 3
			
			SetRedraw(false);

a1896 2

			SetRedraw(true);
@


1.6
log
@Added ed2k multiple export and some context menu corrections.
@
text
@d595 3
d732 7
@


1.5
log
@Last BUGFIXES (FileComments/SharedFiles Columns)
@
text
@d656 16
d675 1
d680 10
a689 2
				theApp.CopyTextToClipboard(theApp.CreateED2kLink(file));
				break;
d692 10
a701 2
				theApp.CopyTextToClipboard(theApp.CreateHTMLED2kLink(file));
				break;
d704 15
a718 6
			{
				CString strLink = theApp.CreateED2kSourceLink(file);
				if (!strLink.IsEmpty())
					theApp.CopyTextToClipboard(strLink);
			}
			break;
d721 1
d732 1
d755 1
a755 17
				POSITION	pos;
				CArray<CKnownFile*,CKnownFile*> del;
				pos=GetFirstSelectedItemPosition();
				while(pos)
				{
					int iSel=GetNextSelectedItem(pos);

					itemdata=(sfl_itemdata*)GetItemData(iSel);

					//--- file selection? ---
					if(itemdata->isFile)
					{
						del.Add(itemdata->knownFile);
					}
				}

				while(del.GetCount())
d757 3
a759 3
					RemoveFile(del.ElementAt(0));
					theApp.knownfiles->RemoveFile(del.ElementAt(0));
					del.RemoveAt(0);
a764 1

d766 1
a2080 1

@


1.4
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@a1299 3
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, DT_LEFT|DT_SINGLELINE|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS);
					break;

d1305 2
a1306 2
					dc->DrawText(GetItemText(lpDrawItemStruct->itemID, cc), -1, &cur_rec, /*DT_RIGHT*/DT_LEFT|DT_SINGLELINE|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS);
					break;
@


1.3
log
@.26b port
@
text
@d27 6
@


1.2
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@a279 2
	char buffer2[250];
	char buffer3[250];
d281 2
a282 2
	CastItoXBytes(file->GetFileSize(),buffer);
	SetItemText(itemnr,SFL_COLUMN_FILESIZE,buffer);
d340 1
a340 3
		CastItoXBytes(a, buffer2);
		CastItoXBytes(b, buffer3);
		sprintf(buffer, "%s (%s)", buffer2, buffer3);
d420 1
a420 3
				CastItoXBytes(ts, buffer2);
				CastItoXBytes(t, buffer3);
				sprintf(buffer, "%s (%s)", buffer2, buffer3);
@


1.1
log
@*** empty log message ***
@
text
@d241 1
d512 1
d2050 7
@


1.1.6.1
log
@initial upgrade to .26
@
text
@a240 1
	ShowFilesCount();
a510 1
	ShowFilesCount();
a1227 1

a2047 7

void CSharedFilesCtrl::ShowFilesCount() {
	CString counter;
	counter.Format(" (%i)",GetItemCount() );
	theApp.emuledlg->sharedfileswnd.GetDlgItem(IDC_TRAFFIC_TEXT)->SetWindowText(GetResString(IDS_SF_FILES)+counter  );
}

@


1.1.4.1
log
@updating this branch...
@
text
@@

