head	1.20;
access;
symbols
	PublicRelease_1_2e:1.17
	Interim_Release_1-2e_RC1:1.17
	PublicRelease_1_2d:1.17
	Interim_Release_1-2d_RC1:1.17
	Interim_Release_1-2d_beta1:1.17
	PublicRelease_1_2c:1.17
	Interim_Release_1-2c_RC1:1.17
	Interim_Release_1-2c_beta1:1.17
	PublicRelease_1_2b:1.17
	Interim_Release_1-2b_RC1:1.17
	PublicRelease_1_2a:1.15
	Interim_Release_1-2a_RC1:1.15
	Interim_Release_1-2a_beta2:1.14
	Interim_Release_1-2a_beta1:1.14
	PublicRelease_1_2:1.14
	Interim_Release_1-2_RC1:1.14
	Interim_Release_1-2_beta1:1.14
	PublicRelease_1_1g:1.14
	Interim_Release_1-1g_RC3:1.14
	Interim_Release_1-1g_RC2:1.14
	Interim_Release_1-1g_RC1:1.14
	Interim_Release_1-1g_beta2:1.14
	Interim_Release_1-1g_beta1:1.14
	PublicRelease_1_1f:1.13
	Interim_Release_1-1f_RC1:1.13
	PublicRelease_1_1e:1.13
	Interim_Release_1-1e_RC2:1.13
	Interim_Release_1-1e_RC1:1.13
	Interim_Release_1-1e_beta1:1.13
	PublicRelease_1_1d:1.13
	Interim_Release_1-1d_RC1:1.13
	PublicRelease_1_1c:1.13
	Interim_Release_1-1c_RC1:1.13
	Interim_Release_1-1c_beta2:1.13
	Interim_Release_1-1c_beta1:1.13
	PublicRelease_1_1b:1.12
	Interim_Release_1-1b_RC1:1.12
	PublicRelease_1_1a:1.12
	Interim_Release_1-1a_RC2:1.12
	Interim_Release_1-1a_RC1:1.12
	Interim_Release_1-1a_beta2:1.12
	Interim_Release_1-1a_beta1:1.12
	PublicRelease_1_1:1.12
	Interim_Release_1-1_beta1:1.12
	PublicRelease_1o:1.12
	Interim_Release_1o_RC1:1.12
	Interim_Release_1o_beta1:1.12
	PublicRelease_1n:1.12
	Interim_Release_1n_RC2:1.12
	Interim_Release_1n_RC1:1.12
	Interim_Release_1n_beta2:1.12
	Interim_Release_1n_beta1:1.12
	PublicRelease_1m:1.12
	Interim_Release_1m_beta1:1.12
	PublicRelease_1l:1.12
	Interim_Release_1l_RC3:1.12
	Interim_Release_1l_RC2:1.12
	Interim_Release_1l_RC1:1.12
	Interim_Release_1l_beta2:1.12
	Interim_Release_1l_beta1:1.11
	PublicRelease_1k:1.11
	Interim_Release_1k_RC4:1.11
	Interim_1k_RC3:1.11
	Interim_1k_RC2:1.11
	Interim_Release_1k_RC1:1.11
	Interim_Release_1k_beta5:1.11
	Intrerim_Release_1k_beta4:1.11
	Interim_Release_1k_beta1:1.11
	PublicRelease_1j:1.8
	Interim_Release_1J_RC3:1.8
	Interim_Release_1j_RC3:1.8
	Interim_Release_1j_RC2:1.8
	Interim_Release_1j_RC1:1.8
	Interim_Release_1j_beta2:1.8
	Interim_Release_1j_beta1:1.8
	PublicRelease_1i:1.8
	Interim_Release_1i_RC6:1.8
	Interim_Release_1i_RC3:1.8
	Interim_Release_1i_RC2:1.8
	Interim_Release_1i_RC1:1.8
	Interim_Release_1i_beta3:1.8
	Interim_Release_1i_beta2:1.8
	Interim_Release_1i_beta1:1.7
	PublicRelease_1h:1.7
	Interim_Release_1h_rc2:1.7
	Interim_Release_1h_RC1:1.7
	Interim_Release_1h_beta2:1.7
	Interim_Release_1h_beta1_now:1.7
	Interim_Release_1h_beta1:1.7
	PublicRelease_1g:1.7
	Interim_Release_1g_RC6_Final:1.7
	Interim_Release_1g_RC6:1.7
	Interim_Release_1g_RC5:1.7
	Interim_Release_1g_RC4:1.7
	Interim_Release_1g_RC3:1.7
	Interim_Release_1g_beta2:1.3
	Interim_Release_1g_beta1:1.3
	Interim_Release_1f_RC4:1.3
	Interim_Release_1f_RC3:1.3
	Interim_Release_1f_RC2:1.3
	Interim_Release_1f_RC:1.3
	Interim_Release_1f_beta2:1.3
	Interim_Release_1f_beta1:1.2
	PublicRelease_1e:1.2
	Interim_Release_1e_RC2:1.2
	Interim_Release_1e_RC:1.2
	Interim_Release_1e_beta3:1.2
	Interim_Release_1e_beta2:1.2
	Interim_Release_1e_beta2_before_kuchin:1.2
	Interim_Release_1e_beta1:1.2
	PublicRelease_1c:1.2
	featurestest:1.2.0.4
	Interim_Release_1c_RC:1.2
	Interim_Release_1c_beta2:1.2
	Interim_Release_1c_beta1:1.2
	threaded_downloadqueue:1.2.0.2
	PublicRelease_1b:1.2
	Interim_Release_1b_beta2:1.2
	Interim_Release_1b_beta1:1.2
	proxydeadlake:1.1.0.12
	PublicRelease_1a:1.1
	Interim_Release_1a_beta2:1.1
	BerkeleyDb:1.1.0.10
	Interim_Release_1a_beta1:1.1
	PublicRelease_1:1.1
	goldfish:1.1
	eMulePlus_1_RC2:1.1
	eMulePlus_26b_1RC1:1.1
	PreRelease_26b_i0e:1.1
	before_26d_merge:1.1
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.20
date	2010.08.11.04.39.39;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.22.05.38.53;	author aw3;	state Exp;
branches;
next	1.18;

1.18
date	2009.05.16.22.15.21;	author aw3;	state Exp;
branches;
next	1.17;

1.17
date	2007.01.17.07.46.04;	author aw3;	state Exp;
branches;
next	1.16;

1.16
date	2007.01.11.19.57.04;	author eklmn;	state Exp;
branches;
next	1.15;

1.15
date	2006.07.09.05.41.51;	author aw3;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.21.21.26.41;	author eklmn;	state Exp;
branches;
next	1.13;

1.13
date	2005.01.27.17.46.42;	author aw3;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.16.04.42.24;	author aw3;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.13.01.57.06;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.11.04.13.00;	author katsyonak;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.14.18.40.58;	author syrus77;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.28.10.26.30;	author partyckip;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.24.18.14.47;	author eklmn;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.22.19.32.28;	author partyckip;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.09.21.03.22;	author partyckip;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.08.17.08.25;	author netwolf1;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.11.23.43;	author recdvst;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2003.01.21.18.21.17;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.05;	author cax2;	state Exp;
branches;
next	;

1.2.4.1
date	2003.03.24.09.39.42;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Added search ed2k link support (from original) {eeeeh}; Simplified class implementation.
@
text
@//this file is part of eMule
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#define ED2KLINK_SOURCE_NOT_DEFINED	0
#define ED2KLINK_SOURCE_IP			1
#define ED2KLINK_SOURCE_HOSTNAME	2

class CClientSource;

class CED2KLink
{
public:
	static CED2KLink* CreateLinkFromUrl(const CString &strURI);
	virtual ~CED2KLink();

	typedef enum { kServerList, kServer, kFile, kSearch, kInvalid } LinkType;

	virtual LinkType GetKind() const = 0;
	virtual void GetLink(CString& lnk) const = 0;
	virtual class CED2KServerListLink* GetServerListLink()	{ return NULL; }
	virtual class CED2KServerLink* GetServerLink()			{ return NULL; }
	virtual class CED2KFileLink* GetFileLink()				{ return NULL; }
	virtual class CED2KSearchLink* GetSearchLink()			{ return NULL; }
};

class CED2KServerLink : public CED2KLink
{
public:
	CED2KServerLink(const CString &strIP, const TCHAR *port);
	virtual ~CED2KServerLink();
	// inherited from CED2KLink
	virtual LinkType GetKind() const;
	virtual CED2KServerLink* GetServerLink();
	virtual void GetLink(CString& lnk) const;

	// Accessors
	const CString& GetAddress() const	{ return m_strAddress; }
	uint16 GetPort() const				{ return m_uPort; }
	void GetDefaultName(CString &strDefName) const { strDefName = m_strDefName; }
private:
	CString	m_strAddress;	//	support non-ip ed2k server link
	CString	m_strDefName;
	uint16	m_uPort;
};

class CED2KFileLink : public CED2KLink
{
public:
	CED2KFileLink(const CString &strName, const TCHAR *pcSize, const CString &strHash, const CStringArray &astrParams, const TCHAR *pcSources);
	virtual ~CED2KFileLink();
	virtual LinkType GetKind() const;
	virtual CED2KFileLink* GetFileLink();
	virtual void GetLink(CString& lnk) const;
	const CString& GetName() const			{ return m_strName; }
	uint64 GetSize() const { return m_qwSize; }
	const uchar* GetHashKey() const { return m_hash; }
	const byte* GetAICHHash() const			{ return m_abyteAICHHash; }
	bool HasValidSources() const			{ return (ClientSourcesList != NULL); } //<<-- enkeyDEV(kei-kun) -hostname sources in ED2K superLink-
	bool HasValidAICHHash() const			{ return m_bAICHHashValid; }

	CTypedPtrList<CPtrList, CClientSource*>* ClientSourcesList; //<<-- enkeyDEV(kei-kun) -hostname sources in ED2K superLink-

private:
	CString	m_strName;
	uint64	m_qwSize;
	uchar	m_hash[16];
	byte	m_abyteAICHHash[SHA_HASHSIZE];
	bool	m_bAICHHashValid;
};

class CED2KServerListLink : public CED2KLink
{
public:
	CED2KServerListLink(const CString &strAddress);
	virtual ~CED2KServerListLink();
	virtual LinkType GetKind() const;
	virtual CED2KServerListLink* GetServerListLink();
	virtual void GetLink(CString& lnk) const;
	CString GetAddress() const { return m_strAddress; }
private:
	CString m_strAddress;
};

class CED2KSearchLink : public CED2KLink
{
public:
	CED2KSearchLink(const CString &strSearchTerm);
	virtual ~CED2KSearchLink();

	virtual LinkType GetKind() const;
	virtual void GetLink(CString& lnk) const;
	virtual CED2KSearchLink* GetSearchLink();

	const TCHAR* GetSearchTerm() const { return m_strSearchTerm.GetString(); }

private:
	CString m_strSearchTerm;
};

// START - enkeyDEV(kei-kun) -hostname sources in ED2K superLink-
class CClientSource
{
public:
	CClientSource()
	{
		sourceType = ED2KLINK_SOURCE_NOT_DEFINED;
		md4clr(filehashkey);
		md4clr(achUserHash);
		dwSrcIDHybrid = 0;
		sourcePort = 0;
		serverIP = 0;
		serverPort = 0;
	}

	uint32	dwSrcIDHybrid;   //not used for hostname sources
	uint32	serverIP;
	uint16	sourcePort;
	uint16	serverPort;
	byte	sourceType;   //0=not a valid source 1=IP source 2=hostname source
	uchar	achUserHash[16];
	uchar	filehashkey[16];
	TCHAR	sourceHostname[512]; //not used for IP sources
};
// END - enkeyDEV(kei-kun) -hostname sources in ED2K superLink-
@


1.19
log
@Renamed server link interface services -- IP replaced with address as it's not only IP for DynIP servers (similar to original).
@
text
@d30 1
a30 1
	typedef enum { kServerList, kServer, kFile, kInvalid } LinkType;
d33 5
a37 4
	virtual void GetLink(CString& lnk) = 0;
	virtual class CED2KServerListLink* GetServerListLink() = 0;
	virtual class CED2KServerLink* GetServerLink() = 0;
	virtual class CED2KFileLink* GetFileLink() = 0;
a46 1
	virtual CED2KServerListLink* GetServerListLink();
d48 1
a48 2
	virtual CED2KFileLink* GetFileLink();
	virtual void GetLink(CString& lnk);
a65 2
	virtual CED2KServerListLink* GetServerListLink();
	virtual CED2KServerLink* GetServerLink();
d67 1
a67 1
	virtual void GetLink(CString& lnk);
d92 1
a92 3
	virtual CED2KServerLink* GetServerLink();
	virtual CED2KFileLink* GetFileLink();
	virtual void GetLink(CString& lnk);
d98 16
@


1.18
log
@Added AICH hash decoding from the link (just preparation for future - it's not used in anyway).
@
text
@d52 2
a53 2
	CString GetIP() const { return m_strIP; }
	uint16 GetPort() const { return m_uPort; }
d56 1
a56 1
	CString	m_strIP;	//	support non-ip ed2k server link
a117 3
	byte	sourceType;   //0=not a valid source 1=IP source 2=hostname source
	uchar	filehashkey[16];
	TCHAR	sourceHostname[512]; //not used for IP sources
d119 1
a120 1
	uint32	serverIP;
d122 1
d124 2
@


1.17
log
@Renaming and formatting.
@
text
@d64 1
a64 1
	CED2KFileLink(const CString &strName, const TCHAR *pcSize, const CString &strHash, const TCHAR *pcSources);
d71 1
a71 1
	CString GetName() const { return m_strName; }
d74 4
a77 1
	bool HasValidSources() const {return (ClientSourcesList!=NULL); } //<<-- enkeyDEV(kei-kun) -hostname sources in ED2K superLink-
d79 1
d84 2
@


1.16
log
@1) updated source exchange protocol to ver.3
2) support of HighID clients with IP "x.x.x.0"  (see description in updownclient.h)
3) removed dublicated ip check for LowID clients in TryToConnect()
4) fixed a client name change by download start from remote client shared file list.
5) some formating
@
text
@d18 3
a20 3
#define ED2KLINK_SOURCE_NOT_DEFINED  0
#define ED2KLINK_SOURCE_IP   1
#define ED2KLINK_SOURCE_HOSTNAME                  2
d56 3
a58 3
	CString m_strIP;	//	support non-ip ed2k server link
	CString m_strDefName;
	uint16 m_uPort;
d101 1
a101 1
	CClientSource() 
d106 1
a106 1
		dwHybridSourceID = 0;
d112 8
a119 8
	byte		sourceType;   //0=not a valid source 1=IP source 2=hostname source
	uchar		filehashkey[16];
	TCHAR		sourceHostname[512]; //not used for IP sources
	uint32		dwHybridSourceID;   //not used for hostname sources
	uint16		sourcePort;
	uint32		serverIP;
	uint16		serverPort;
	uchar 		achUserHash[16];
@


1.15
log
@Large file size support preparations; Removed unused #include; Formatting;
Removed not implemented class methods.
@
text
@d101 10
a110 8
	CClientSource() {   sourceType=ED2KLINK_SOURCE_NOT_DEFINED;
						md4clr(filehashkey);
						md4clr(achUserHash);
						sourceID=0;
						sourcePort=0;
						serverIP=0;
						serverPort=0;
						}
d112 8
a119 8
	byte	  sourceType;   //0=not a valid source 1=IP source 2=hostname source
	uchar	  filehashkey[16];
	TCHAR	  	sourceHostname[512]; //not used for IP sources
	uint32    	sourceID;   //not used for hostname sources
	uint16	sourcePort;
	uint32	serverIP;
	uint16	serverPort;
	uchar 	achUserHash[16];
@


1.14
log
@improved LowID check by SX (part 2)
@
text
@a15 1

a17 4
#include <tchar.h>
#include "types.h"
#include "otherfunctions.h"

d28 2
d31 6
a36 6
	virtual LinkType GetKind() const =0;
	virtual void GetLink(CString& lnk) =0;
	virtual class CED2KServerListLink* GetServerListLink() =0;
	virtual class CED2KServerLink* GetServerLink() =0;
	virtual class CED2KFileLink* GetFileLink() =0;
	virtual ~CED2KLink();
d52 3
a54 3
	CString GetIP() const { return m_ip; }
	uint16 GetPort() const { return m_port; }
	void GetDefaultName(CString& defName) const { defName = m_defaultName; }
d56 3
a58 6
	CED2KServerLink(); // Not defined
	CED2KServerLink(const CED2KServerLink&); // Not defined
	CED2KServerLink& operator=(const CED2KServerLink&); // Not defined
	CString m_ip;	//	support non-ip ed2k server link
	CString m_defaultName;
	uint16 m_port;
d64 1
a64 1
	CED2KFileLink(const CString &strName, const TCHAR* size, const CString &strHash, const TCHAR* sources);
d71 2
a72 2
	CString GetName() const { return m_name; }
	uint32 GetSize() const { return m_dwSize; }
d77 2
a78 5
	CED2KFileLink(); // Not defined
	CED2KFileLink(const CED2KFileLink&); // Not defined
	CED2KFileLink& operator=(const CED2KFileLink&); // Not defined
	CString	m_name;
	uint32	m_dwSize;
a93 3
	CED2KServerListLink(); // Not defined
	CED2KServerListLink(const CED2KFileLink&); // Not defined
	CED2KServerListLink& operator=(const CED2KFileLink&); // Not defined
@


1.13
log
@Improved string processing.
@
text
@d115 1
@


1.12
log
@#pragme once is added <thanks xrmb>.
@
text
@d32 2
a33 2
	static CED2KLink* CreateLinkFromUrl(  const CString& url);
	typedef enum { kServerList, kServer , kFile , kInvalid } LinkType;
d45 1
a45 1
	CED2KServerLink(const TCHAR* ip,const TCHAR* port);
d54 3
a56 3
    // Accessors
	CString GetIP() const { return m_ip;} // netwolf 07.05.03 support non-ip ed2k server link
	uint16 GetPort() const { return m_port;}
d62 2
a63 1
	CString m_ip;	// netwolf 07.05.03 support non-ip ed2k server link
a64 1
	CString m_defaultName;
d70 1
a70 1
	CED2KFileLink(const TCHAR* name,const TCHAR* size, const TCHAR* hash, const TCHAR* sources);
d78 2
a79 2
	long GetSize() const { return _tstol(m_size); }
	const uchar* GetHashKey() const { return m_hash;}
d86 3
a88 3
	CString m_name;
	CString m_size;
	uchar m_hash[16];
d94 1
a94 1
	CED2KServerListLink(const TCHAR* address);
d101 1
a101 1
	CString GetAddress() const { return m_address; }
d106 1
a106 1
	CString m_address;
@


1.11
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d17 1
d29 2
a30 1
class CED2KLink {
d42 2
a43 1
class CED2KServerLink : public CED2KLink {
d67 2
a68 1
class CED2KFileLink : public CED2KLink {
d91 2
a92 1
class CED2KServerListLink : public CED2KLink {
d110 4
a113 3
class CClientSource {
public:	
	CClientSource() {   sourceType=ED2KLINK_SOURCE_NOT_DEFINED; 
a130 1

@


1.10
log
@Optimized hash processings
@
text
@d115 1
a115 1
	uint8	  sourceType;   //0=not a valid source 1=IP source 2=hostname source
@


1.9
log
@Replaced all zero filled memsets with optimized memzero (Thx Aw3 !) + some more Aw3 optimizations
@
text
@d108 1
a108 1
						memzero((void*)filehashkey, sizeof(filehashkey));
@


1.8
log
@Added MMX/AMD/SSE optimized memset [katsyonak]
@
text
@d108 1
a108 1
						memset2((void*)filehashkey,0,sizeof(filehashkey));
@


1.7
log
@unicode cleanup
@
text
@d20 1
d108 1
a108 1
						memset((void*)filehashkey,0,sizeof(filehashkey));
@


1.6
log
@added support for Source Exchange v2
@
text
@d116 1
a116 1
	char	  	sourceHostname[512]; //not used for IP sources
@


1.5
log
@char * to CString conversion
@
text
@d111 2
a112 1
						serverPort=0;}
d116 6
a121 5
	char	  sourceHostname[512]; //not used for IP sources
	uint32    sourceID;   //not used for hostname sources
	uint16	  sourcePort;
	uint32	  serverIP;
	uint16    serverPort;
@


1.4
log
@code cleanup
@
text
@d29 1
a29 1
	static CED2KLink* CreateLinkFromUrl(  const TCHAR * url);
@


1.3
log
@*** empty log message ***
@
text
@d51 1
a51 1
	char* GetIP() { return strdup(m_ip);} // netwolf 07.05.03 support non-ip ed2k server link
d72 2
a73 2
	const char* GetName() const { return m_name; }
	long GetSize() const { return atol(m_size); }
d95 1
a95 1
	const char* GetAddress() const { return m_address; }
@


1.2
log
@enkeydev stuff
@
text
@d51 1
a51 1
	uint32 GetIP() const { return m_ip;}
d58 1
a58 1
	uint32 m_ip;
@


1.2.4.1
log
@27c
@
text
@a107 1
						memset((void*)m_achUserHash,0,sizeof(m_achUserHash));
a119 1
	uchar     m_achUserHash[16];
@


1.1
log
@*** empty log message ***
@
text
@d21 6
d75 2
a76 2
	bool HasValidSources() const {return (SourcesList!=NULL); }
	CMemFile* SourcesList;
d102 20
@


1.1.4.1
log
@updating this branch...
@
text
@@

