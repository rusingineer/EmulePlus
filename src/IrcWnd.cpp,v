head	1.146;
access;
symbols
	PublicRelease_1_2e:1.145
	Interim_Release_1-2e_RC1:1.145
	PublicRelease_1_2d:1.136
	Interim_Release_1-2d_RC1:1.136
	Interim_Release_1-2d_beta1:1.134
	PublicRelease_1_2c:1.131
	Interim_Release_1-2c_RC1:1.131
	Interim_Release_1-2c_beta1:1.128
	PublicRelease_1_2b:1.127
	Interim_Release_1-2b_RC1:1.127
	PublicRelease_1_2a:1.127
	Interim_Release_1-2a_RC1:1.127
	Interim_Release_1-2a_beta2:1.126
	Interim_Release_1-2a_beta1:1.126
	PublicRelease_1_2:1.124
	Interim_Release_1-2_RC1:1.124
	Interim_Release_1-2_beta1:1.124
	PublicRelease_1_1g:1.123
	Interim_Release_1-1g_RC3:1.123
	Interim_Release_1-1g_RC2:1.123
	Interim_Release_1-1g_RC1:1.123
	Interim_Release_1-1g_beta2:1.120
	Interim_Release_1-1g_beta1:1.120
	PublicRelease_1_1f:1.120
	Interim_Release_1-1f_RC1:1.120
	PublicRelease_1_1e:1.120
	Interim_Release_1-1e_RC2:1.120
	Interim_Release_1-1e_RC1:1.120
	Interim_Release_1-1e_beta1:1.120
	PublicRelease_1_1d:1.118
	Interim_Release_1-1d_RC1:1.118
	PublicRelease_1_1c:1.118
	Interim_Release_1-1c_RC1:1.118
	Interim_Release_1-1c_beta2:1.118
	Interim_Release_1-1c_beta1:1.118
	PublicRelease_1_1b:1.116
	Interim_Release_1-1b_RC1:1.116
	PublicRelease_1_1a:1.116
	Interim_Release_1-1a_RC2:1.116
	Interim_Release_1-1a_RC1:1.116
	Interim_Release_1-1a_beta2:1.116
	Interim_Release_1-1a_beta1:1.116
	PublicRelease_1_1:1.113
	Interim_Release_1-1_beta1:1.113
	PublicRelease_1o:1.113
	Interim_Release_1o_RC1:1.113
	Interim_Release_1o_beta1:1.113
	PublicRelease_1n:1.113
	Interim_Release_1n_RC2:1.113
	Interim_Release_1n_RC1:1.113
	Interim_Release_1n_beta2:1.113
	Interim_Release_1n_beta1:1.99
	PublicRelease_1m:1.85
	Interim_Release_1m_beta1:1.81
	PublicRelease_1l:1.73
	Interim_Release_1l_RC3:1.72
	Interim_Release_1l_RC2:1.70
	Interim_Release_1l_RC1:1.69
	Interim_Release_1l_beta2:1.69
	Interim_Release_1l_beta1:1.64
	PublicRelease_1k:1.52
	Interim_Release_1k_RC4:1.52
	Interim_1k_RC3:1.51
	Interim_1k_RC2:1.50
	Interim_Release_1k_RC1:1.50
	Interim_Release_1k_beta5:1.49
	Intrerim_Release_1k_beta4:1.49
	Interim_Release_1k_beta1:1.43
	PublicRelease_1j:1.40
	Interim_Release_1J_RC3:1.40
	Interim_Release_1j_RC3:1.40
	Interim_Release_1j_RC2:1.38
	Interim_Release_1j_RC1:1.37
	Interim_Release_1j_beta2:1.37
	Interim_Release_1j_beta1:1.36
	PublicRelease_1i:1.26
	Interim_Release_1i_RC6:1.26
	Interim_Release_1i_RC3:1.20
	Interim_Release_1i_RC2:1.20
	Interim_Release_1i_RC1:1.20
	Interim_Release_1i_beta3:1.19
	Interim_Release_1i_beta2:1.18
	Interim_Release_1i_beta1:1.14
	PublicRelease_1h:1.8
	Interim_Release_1h_rc2:1.8
	Interim_Release_1h_RC1:1.8
	Interim_Release_1h_beta2:1.8
	Interim_Release_1h_beta1_now:1.8
	Interim_Release_1h_beta1:1.8
	PublicRelease_1g:1.8
	Interim_Release_1g_RC6_Final:1.8
	Interim_Release_1g_RC6:1.8
	Interim_Release_1g_RC5:1.8
	Interim_Release_1g_RC4:1.8
	Interim_Release_1g_RC3:1.8
	Interim_Release_1g_beta2:1.6
	Interim_Release_1g_beta1:1.6
	Interim_Release_1f_RC4:1.5
	Interim_Release_1f_RC3:1.5
	Interim_Release_1f_RC2:1.4
	Interim_Release_1f_RC:1.4
	Interim_Release_1f_beta2:1.4
	Interim_Release_1f_beta1:1.4
	PublicRelease_1e:1.4
	Interim_Release_1e_RC2:1.4
	Interim_Release_1e_RC:1.4
	Interim_Release_1e_beta3:1.4
	Interim_Release_1e_beta2:1.4
	Interim_Release_1e_beta2_before_kuchin:1.4
	Interim_Release_1e_beta1:1.4
	PublicRelease_1c:1.4
	featurestest:1.4.0.8
	Interim_Release_1c_RC:1.4
	Interim_Release_1c_beta2:1.4
	Interim_Release_1c_beta1:1.4
	threaded_downloadqueue:1.4.0.6
	PublicRelease_1b:1.4
	Interim_Release_1b_beta2:1.4
	Interim_Release_1b_beta1:1.4
	proxydeadlake:1.4.0.4
	PublicRelease_1a:1.4
	Interim_Release_1a_beta2:1.4
	BerkeleyDb:1.4.0.2
	Interim_Release_1a_beta1:1.4
	PublicRelease_1:1.4
	goldfish:1.4
	eMulePlus_1_RC2:1.4
	eMulePlus_26b_1RC1:1.4
	PreRelease_26b_i0e:1.4
	before_26d_merge:1.4
	Interim_Release_26b_i0d:1.3
	Interim_Release_26b_i0c:1.3
	Interim_Release_26b_i0b:1.3
	Interim_Release_26b_i0a:1.3
	systraydlg:1.2.0.4
	plus26based:1.2.0.2
	Interim_Release_25b_i0b:1.2
	Proxy_Dev:1.2
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.146
date	2009.05.14.03.10.30;	author aw3;	state Exp;
branches;
next	1.145;

1.145
date	2009.01.09.05.01.02;	author aw3;	state Exp;
branches;
next	1.144;

1.144
date	2009.01.04.05.30.59;	author aw3;	state Exp;
branches;
next	1.143;

1.143
date	2009.01.02.02.08.47;	author aw3;	state Exp;
branches;
next	1.142;

1.142
date	2008.12.15.22.38.52;	author aw3;	state Exp;
branches;
next	1.141;

1.141
date	2008.10.20.22.39.08;	author kush_eplus;	state Exp;
branches;
next	1.140;

1.140
date	2008.09.29.04.54.16;	author aw3;	state Exp;
branches;
next	1.139;

1.139
date	2008.09.02.02.27.10;	author aw3;	state Exp;
branches;
next	1.138;

1.138
date	2008.07.24.04.58.14;	author aw3;	state Exp;
branches;
next	1.137;

1.137
date	2008.07.01.04.39.56;	author aw3;	state Exp;
branches;
next	1.136;

1.136
date	2008.04.05.20.22.49;	author eklmn;	state Exp;
branches;
next	1.135;

1.135
date	2008.04.05.09.49.08;	author eklmn;	state Exp;
branches;
next	1.134;

1.134
date	2008.02.05.06.03.05;	author aw3;	state Exp;
branches;
next	1.133;

1.133
date	2007.12.16.21.38.00;	author aw3;	state Exp;
branches;
next	1.132;

1.132
date	2007.12.14.21.11.17;	author kush_eplus;	state Exp;
branches;
next	1.131;

1.131
date	2007.08.02.11.30.45;	author kush_eplus;	state Exp;
branches;
next	1.130;

1.130
date	2007.07.27.06.26.52;	author aw3;	state Exp;
branches;
next	1.129;

1.129
date	2007.07.08.22.31.18;	author kush_eplus;	state Exp;
branches;
next	1.128;

1.128
date	2007.02.22.16.57.07;	author kush_eplus;	state Exp;
branches;
next	1.127;

1.127
date	2006.07.02.15.48.02;	author kush_eplus;	state Exp;
branches;
next	1.126;

1.126
date	2006.04.23.04.06.57;	author aw3;	state Exp;
branches;
next	1.125;

1.125
date	2006.03.05.23.56.07;	author aw3;	state Exp;
branches;
next	1.124;

1.124
date	2006.01.06.20.05.54;	author kush_eplus;	state Exp;
branches;
next	1.123;

1.123
date	2005.11.28.03.09.10;	author aw3;	state Exp;
branches;
next	1.122;

1.122
date	2005.11.27.22.11.47;	author eklmn;	state Exp;
branches;
next	1.121;

1.121
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.120;

1.120
date	2005.05.10.03.53.03;	author aw3;	state Exp;
branches;
next	1.119;

1.119
date	2005.05.08.10.42.10;	author katsyonak;	state Exp;
branches;
next	1.118;

1.118
date	2005.01.22.17.50.04;	author aw3;	state Exp;
branches;
next	1.117;

1.117
date	2005.01.14.14.49.03;	author kush_eplus;	state Exp;
branches;
next	1.116;

1.116
date	2004.10.29.03.24.51;	author aw3;	state Exp;
branches;
next	1.115;

1.115
date	2004.10.28.04.25.27;	author aw3;	state Exp;
branches;
next	1.114;

1.114
date	2004.10.26.21.14.09;	author aw3;	state Exp;
branches;
next	1.113;

1.113
date	2004.08.04.10.37.52;	author katsyonak;	state Exp;
branches;
next	1.112;

1.112
date	2004.07.31.04.23.56;	author aw3;	state Exp;
branches;
next	1.111;

1.111
date	2004.07.30.13.02.53;	author katsyonak;	state Exp;
branches;
next	1.110;

1.110
date	2004.07.29.11.47.42;	author katsyonak;	state Exp;
branches;
next	1.109;

1.109
date	2004.07.29.02.13.02;	author katsyonak;	state Exp;
branches;
next	1.108;

1.108
date	2004.07.27.17.38.16;	author katsyonak;	state Exp;
branches;
next	1.107;

1.107
date	2004.07.27.11.14.40;	author katsyonak;	state Exp;
branches;
next	1.106;

1.106
date	2004.07.27.06.45.19;	author katsyonak;	state Exp;
branches;
next	1.105;

1.105
date	2004.07.26.02.29.42;	author katsyonak;	state Exp;
branches;
next	1.104;

1.104
date	2004.07.25.16.48.50;	author katsyonak;	state Exp;
branches;
next	1.103;

1.103
date	2004.07.22.23.45.17;	author aw3;	state Exp;
branches;
next	1.102;

1.102
date	2004.07.21.21.26.53;	author katsyonak;	state Exp;
branches;
next	1.101;

1.101
date	2004.07.20.18.53.35;	author katsyonak;	state Exp;
branches;
next	1.100;

1.100
date	2004.07.20.18.31.44;	author katsyonak;	state Exp;
branches;
next	1.99;

1.99
date	2004.07.19.12.54.56;	author katsyonak;	state Exp;
branches;
next	1.98;

1.98
date	2004.07.18.19.57.42;	author katsyonak;	state Exp;
branches;
next	1.97;

1.97
date	2004.07.18.17.37.25;	author katsyonak;	state Exp;
branches;
next	1.96;

1.96
date	2004.07.14.21.07.54;	author katsyonak;	state Exp;
branches;
next	1.95;

1.95
date	2004.07.14.09.46.57;	author katsyonak;	state Exp;
branches;
next	1.94;

1.94
date	2004.07.13.23.05.58;	author katsyonak;	state Exp;
branches;
next	1.93;

1.93
date	2004.07.13.15.10.39;	author katsyonak;	state Exp;
branches;
next	1.92;

1.92
date	2004.07.13.12.55.38;	author katsyonak;	state Exp;
branches;
next	1.91;

1.91
date	2004.07.12.19.22.17;	author katsyonak;	state Exp;
branches;
next	1.90;

1.90
date	2004.07.12.17.08.53;	author katsyonak;	state Exp;
branches;
next	1.89;

1.89
date	2004.07.11.16.24.58;	author katsyonak;	state Exp;
branches;
next	1.88;

1.88
date	2004.07.07.16.35.07;	author katsyonak;	state Exp;
branches;
next	1.87;

1.87
date	2004.07.06.16.46.02;	author katsyonak;	state Exp;
branches;
next	1.86;

1.86
date	2004.06.28.02.31.29;	author katsyonak;	state Exp;
branches;
next	1.85;

1.85
date	2004.06.23.23.12.22;	author syrus77;	state Exp;
branches;
next	1.84;

1.84
date	2004.06.23.21.10.47;	author katsyonak;	state Exp;
branches;
next	1.83;

1.83
date	2004.06.23.04.59.34;	author katsyonak;	state Exp;
branches;
next	1.82;

1.82
date	2004.06.22.17.43.28;	author katsyonak;	state Exp;
branches;
next	1.81;

1.81
date	2004.06.22.04.58.02;	author aw3;	state Exp;
branches;
next	1.80;

1.80
date	2004.06.22.03.23.14;	author katsyonak;	state Exp;
branches;
next	1.79;

1.79
date	2004.06.21.23.11.19;	author katsyonak;	state Exp;
branches;
next	1.78;

1.78
date	2004.06.21.09.06.17;	author katsyonak;	state Exp;
branches;
next	1.77;

1.77
date	2004.06.21.01.17.18;	author katsyonak;	state Exp;
branches;
next	1.76;

1.76
date	2004.06.20.19.15.24;	author katsyonak;	state Exp;
branches;
next	1.75;

1.75
date	2004.06.15.21.12.20;	author katsyonak;	state Exp;
branches;
next	1.74;

1.74
date	2004.06.15.05.05.47;	author katsyonak;	state Exp;
branches;
next	1.73;

1.73
date	2004.06.09.15.13.59;	author katsyonak;	state Exp;
branches;
next	1.72;

1.72
date	2004.06.06.05.08.48;	author aw3;	state Exp;
branches;
next	1.71;

1.71
date	2004.06.03.05.08.15;	author katsyonak;	state Exp;
branches;
next	1.70;

1.70
date	2004.06.02.02.58.16;	author katsyonak;	state Exp;
branches;
next	1.69;

1.69
date	2004.05.19.21.22.33;	author katsyonak;	state Exp;
branches;
next	1.68;

1.68
date	2004.05.19.19.27.05;	author syrus77;	state Exp;
branches;
next	1.67;

1.67
date	2004.05.16.23.21.15;	author kush_eplus;	state Exp;
branches;
next	1.66;

1.66
date	2004.05.16.21.37.30;	author katsyonak;	state Exp;
branches;
next	1.65;

1.65
date	2004.05.12.00.47.32;	author katsyonak;	state Exp;
branches;
next	1.64;

1.64
date	2004.05.06.11.46.01;	author katsyonak;	state Exp;
branches;
next	1.63;

1.63
date	2004.05.04.06.09.33;	author aw3;	state Exp;
branches;
next	1.62;

1.62
date	2004.05.03.06.53.47;	author katsyonak;	state Exp;
branches;
next	1.61;

1.61
date	2004.04.30.15.28.01;	author katsyonak;	state Exp;
branches;
next	1.60;

1.60
date	2004.04.30.11.28.29;	author katsyonak;	state Exp;
branches;
next	1.59;

1.59
date	2004.04.30.09.06.13;	author katsyonak;	state Exp;
branches;
next	1.58;

1.58
date	2004.04.21.02.06.04;	author katsyonak;	state Exp;
branches;
next	1.57;

1.57
date	2004.04.20.23.53.03;	author katsyonak;	state Exp;
branches;
next	1.56;

1.56
date	2004.04.18.19.26.33;	author katsyonak;	state Exp;
branches;
next	1.55;

1.55
date	2004.04.13.01.01.35;	author katsyonak;	state Exp;
branches;
next	1.54;

1.54
date	2004.04.12.22.48.02;	author katsyonak;	state Exp;
branches;
next	1.53;

1.53
date	2004.04.12.18.08.15;	author katsyonak;	state Exp;
branches;
next	1.52;

1.52
date	2004.04.07.02.07.32;	author katsyonak;	state Exp;
branches;
next	1.51;

1.51
date	2004.04.04.13.19.48;	author syrus77;	state Exp;
branches;
next	1.50;

1.50
date	2004.03.26.23.16.59;	author aw3;	state Exp;
branches;
next	1.49;

1.49
date	2004.03.18.18.03.15;	author eklmn;	state Exp;
branches;
next	1.48;

1.48
date	2004.03.14.21.10.11;	author aw3;	state Exp;
branches;
next	1.47;

1.47
date	2004.03.13.05.33.36;	author aw3;	state Exp;
branches;
next	1.46;

1.46
date	2004.03.10.21.01.36;	author bavariansnail;	state Exp;
branches;
next	1.45;

1.45
date	2004.03.06.19.00.58;	author aw3;	state Exp;
branches;
next	1.44;

1.44
date	2004.02.25.17.58.55;	author kush_eplus;	state Exp;
branches;
next	1.43;

1.43
date	2004.02.17.22.02.51;	author aw3;	state Exp;
branches;
next	1.42;

1.42
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.41;

1.41
date	2004.02.11.04.13.00;	author katsyonak;	state Exp;
branches;
next	1.40;

1.40
date	2004.01.13.15.23.52;	author katsyonak;	state Exp;
branches;
next	1.39;

1.39
date	2004.01.13.13.19.42;	author katsyonak;	state Exp;
branches;
next	1.38;

1.38
date	2004.01.12.10.40.08;	author katsyonak;	state Exp;
branches;
next	1.37;

1.37
date	2003.12.30.17.44.39;	author katsyonak;	state Exp;
branches;
next	1.36;

1.36
date	2003.12.27.11.26.50;	author katsyonak;	state Exp;
branches;
next	1.35;

1.35
date	2003.12.25.14.17.57;	author katsyonak;	state Exp;
branches;
next	1.34;

1.34
date	2003.12.23.12.05.04;	author katsyonak;	state Exp;
branches;
next	1.33;

1.33
date	2003.12.22.22.41.31;	author katsyonak;	state Exp;
branches;
next	1.32;

1.32
date	2003.12.22.18.28.27;	author katsyonak;	state Exp;
branches;
next	1.31;

1.31
date	2003.12.22.02.37.35;	author katsyonak;	state Exp;
branches;
next	1.30;

1.30
date	2003.12.20.00.40.27;	author katsyonak;	state Exp;
branches;
next	1.29;

1.29
date	2003.12.19.11.05.30;	author katsyonak;	state Exp;
branches;
next	1.28;

1.28
date	2003.12.19.09.36.20;	author eklmn;	state Exp;
branches;
next	1.27;

1.27
date	2003.12.18.13.35.30;	author katsyonak;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.04.23.19.59;	author katsyonak;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.04.11.31.24;	author netwolf1;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.02.04.33.13;	author katsyonak;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.01.02.03.47;	author katsyonak;	state Exp;
branches;
next	1.22;

1.22
date	2003.11.26.23.54.50;	author katsyonak;	state Exp;
branches;
next	1.21;

1.21
date	2003.11.26.11.21.08;	author katsyonak;	state Exp;
branches;
next	1.20;

1.20
date	2003.11.04.18.16.28;	author eklmn;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.29.14.14.18;	author morevit;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.24.01.21.19;	author morevit;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.21.02.16.52;	author morevit;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.20.10.44.22;	author morevit;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.14.18.40.58;	author syrus77;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.03.23.18.49;	author morevit;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.03.18.08.49;	author dongato;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.03.13.04.36;	author morevit;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.27.14.59.38;	author dongato;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.22.00.17.22;	author morevit;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.20.15.39.30;	author morevit;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.16.04.44.44;	author partyckip;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.15.09.10.04;	author partyckip;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.01.08.59.02;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.20.20.46.27;	author netwolf1;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.16.22.01.46;	author lord_kiron;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.09.18.39.41;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.02.03.39.55;	author cax2;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2003.01.21.18.21.18;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.12;	author cax2;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.02.02.02.36.26;	author cax2;	state Exp;
branches;
next	;

1.2.2.1
date	2003.02.05.01.58.41;	author obaldin;	state Exp;
branches;
next	;


desc
@@


1.146
log
@Save sorting directions for all GUI lists; Unified list sort initialization and click processing;
Simplified list arrow configuration interface.
@
text
@//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "IrcWnd.h"
#include "otherfunctions.h"
#include "opcodes.h"
#include "ColourPopup.h"
#include "TitleMenu.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#define new DEBUG_NEW
#endif

static const COLORREF _acrColorPal[16] =
{
	RGB(255, 255, 255), RGB(0, 0, 0), RGB(0, 0, 127), RGB(0, 127, 0),
	RGB(255, 0, 0), RGB(127, 0, 0), RGB(156, 0, 156), RGB(252, 127, 0),
	RGB(255, 255, 0), RGB(0, 252, 0), RGB(0, 147, 147), RGB(0, 255, 255),
	RGB(0, 0, 252), RGB(255, 0, 255), RGB(127, 127, 127), RGB(210, 210, 210)
};

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//	CIrcWnd dialog
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
IMPLEMENT_DYNAMIC(CIrcWnd, CDialog)
CIrcWnd::CIrcWnd(CWnd* pParent /*=NULL*/)
		: CResizableDialog(CIrcWnd::IDD, pParent)
{
	m_pIrcMain = NULL;
	m_eConnectStatus = IRC_DISCONNECTED;
	m_bLoggedIn = false;
	m_pCurrentChannel = NULL;
	serverChannelList.SetGeneralPurposeFind(true);
	m_ctlNickList.SetParent(this);
}

CIrcWnd::~CIrcWnd()
{
	if (!IsDisconnected())
		m_pIrcMain->Disconnect(true);

	POSITION	pos1, pos2;

	for (pos1 = channelLPtrList.GetHeadPosition(); (pos2 = pos1) != NULL;)
	{
		ChannelList* cur_channel = (ChannelList*)channelLPtrList.GetNext(pos1);
		channelLPtrList.RemoveAt(pos2);
		delete cur_channel;
	}
	DeleteAllChannel();
	delete m_pIrcMain;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CIrcWnd::Localize()
{
	static const uint16 s_auResTbl[] =
	{
		IDS_IRC_NAME,
		IDS_UUSERS,
		IDS_DESCRIPTION
	};

	SetDlgItemText(IDC_BN_IRCCONNECT, GetResString((!IsDisconnected()) ? IDS_IRC_DISCONNECT : IDS_IRC_CONNECT));
	SetDlgItemText(IDC_CHATSEND, GetResString(IDS_IRC_SEND));
	SetDlgItemText(IDC_CLOSECHAT, GetResString(IDS_CW_CLOSE));

	TCITEM		tcitem;
	Channel		*pCurChannel;

	for (int i = 0; i < channelselect.GetItemCount();i++)
	{
		tcitem.mask = TCIF_PARAM;
		tcitem.lParam = -1;
		channelselect.GetItem(i, &tcitem);
		pCurChannel = (Channel*)tcitem.lParam;
		if (pCurChannel != NULL)
		{
			if (pCurChannel->type == 1)
			{
				GetResString(&pCurChannel->title, IDS_STATUS);
				tcitem.mask = TCIF_TEXT;
				tcitem.pszText = const_cast<LPTSTR>(pCurChannel->title.GetString());
				channelselect.SetItem(i, &tcitem);
			}
			else if (pCurChannel->type == 2)
			{
				GetResString(&pCurChannel->title, IDS_IRC_CHANNELLIST);
				tcitem.mask = TCIF_TEXT;
				tcitem.pszText = const_cast<LPTSTR>(pCurChannel->title.GetString());
				channelselect.SetItem(i, &tcitem);
			}
		}
	}
	m_ctlNickList.Localize();

	if (m_pCurrentChannel != NULL)
	{
		titleWindow.Reset();
		if (m_pCurrentChannel->type == 1)
			titleWindow.AppendText(GetResString(IDS_STATUS), RGB(0, 0, 128), CLR_DEFAULT, HTC_HAVENOLINK);
		else if(m_pCurrentChannel->type == 2)
			titleWindow.AppendText(GetResString(IDS_IRC_CHANNELLIST), RGB(0, 0, 128), CLR_DEFAULT, HTC_HAVENOLINK);
	}

	CHeaderCtrl	*pHeaderCtrl = serverChannelList.GetHeaderCtrl();
	CString		strRes;
	HDITEM		hdi;

	hdi.mask = HDI_TEXT;
	for (unsigned ui = 0; ui < ARRSIZE(s_auResTbl); ui++)
	{
		::GetResString(&strRes, static_cast<UINT>(s_auResTbl[ui]));
		hdi.pszText = const_cast<LPTSTR>(strRes.GetString());
		pHeaderCtrl->SetItem(static_cast<int>(ui), &hdi);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CIrcWnd::OnInitDialog()
{
	static const uint16 s_auColHdr2[][2] =
	{
		{ LVCFMT_LEFT, 203 },	// IRC2COL_NAME
		{ LVCFMT_RIGHT, 50 },	// IRC2COL_USERS
		{ LVCFMT_LEFT, 350 }	// IRC2COL_DESCRIPTION
	};

	CResizableDialog::OnInitDialog();

	CRect			rcRect;

	for (unsigned ui = 0; ui < ARRSIZE(s_auColHdr2); ui++)
		serverChannelList.InsertColumn(ui, _T(""), static_cast<int>(s_auColHdr2[ui][0]), static_cast<int>(s_auColHdr2[ui][1]));
	serverChannelList.LoadSettings(CPreferences::TABLE_IRC);

	m_hOldIcon = GetUserLstStatic()->SetIcon(GetUserLstIcon());
	m_ctlNickList.Init();

	Localize();
	m_pIrcMain = new CIrcMain();
	m_pIrcMain->SetIRCWnd(this);

	NewChannel(GetResString(IDS_STATUS), 1);
	NewChannel(GetResString(IDS_IRC_CHANNELLIST), 2);

	serverChannelList.GetWindowRect(&rcRect);
	ScreenToClient(&rcRect);
	rcRect.bottom = rcRect.top + 18;
	titleWindow.Create(WS_CHILD | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | ES_AUTOHSCROLL | ES_READONLY | ES_NOHIDESEL, rcRect, this, (UINT)-1);
	titleWindow.ModifyStyleEx(0, WS_EX_STATICEDGE, SWP_FRAMECHANGED);
	titleWindow.m_dwFlags = HTC_ISLIMITED | HTC_ISDEFAULTLINKS;

	UpdateFont();
	m_pCurrentChannel = (Channel*)channelPtrList.GetTail();
	AddMessage(_T(""), _T(""), CLR_DEFAULT, GetResString(IDS_IRC_STATUSLOG));
	channelselect.SetCurSel(2);
	channelselect.SetCurFocus(2);
	OnTcnSelchangeTab2(NULL, NULL);
	channelselect.SetItemState(1, TCIS_HIGHLIGHTED, NULL);

	CheckDlgButton(IDC_UTF8_ENCODING, g_App.m_pPrefs->GetIrcMessageEncodingUTF8() ? BST_CHECKED : BST_UNCHECKED);

	AddAnchor(IDC_BN_IRCCONNECT, BOTTOM_LEFT);
	AddAnchor(IDC_CLOSECHAT, BOTTOM_LEFT);
	AddAnchor(IDC_CHATSEND, BOTTOM_RIGHT);
	AddAnchor(IDC_UTF8_ENCODING, BOTTOM_LEFT);
	AddAnchor(IDC_INPUTWINDOW, BOTTOM_LEFT, BOTTOM_RIGHT);
	AddAnchor(IDC_TEXTBOLD, BOTTOM_RIGHT);
	AddAnchor(IDC_TEXTUNDERLINE, BOTTOM_RIGHT);
	AddAnchor(IDC_TEXTCOLOR, BOTTOM_RIGHT);
	AddAnchor(IDC_NICKLIST, TOP_LEFT, BOTTOM_LEFT);
	AddAnchor(IDC_SERVERCHANNELLIST, TOP_LEFT, BOTTOM_RIGHT);
	AddAnchor(IDC_TAB2, TOP_LEFT, TOP_RIGHT);

	serverChannelList.SetSortProcedure(SortProcChanL);
	if (g_App.m_pPrefs->DoUseSort())
		serverChannelList.SortInit(g_App.m_pPrefs->GetIrcSortCol());
	else
		serverChannelList.SortInit(g_App.m_pPrefs->GetColumnSortCode(CPreferences::TABLE_IRC));

	GetDlgItem(IDC_CLOSECHAT)->EnableWindow(false);
	GetDlgItem(IDC_CHATSEND)->EnableWindow(false);

	m_ctrlTextBoldBtn.SetThemeHelper(&g_App.m_pMDlg->m_themeHelper);
	m_ctrlTextBoldBtn.SetIcon(IDI_TEXTBOLD);
	m_ctrlTextUnderlineBtn.SetThemeHelper(&g_App.m_pMDlg->m_themeHelper);
	m_ctrlTextUnderlineBtn.SetIcon(IDI_TEXTUNDERLINE);
	m_ctrlTextColorBtn.SetThemeHelper(&g_App.m_pMDlg->m_themeHelper);
	m_ctrlTextColorBtn.SetIcon(IDI_TEXTCOLOR);

	return true;
}

void CIrcWnd::OnDestroy()
{
	CResizableDialog::OnDestroy();

	DestroyIcon(GetUserLstStatic()->SetIcon(m_hOldIcon));
}

void CIrcWnd::UpdateFont()
{
	TCITEM		tcitem;
	Channel		*pChannel;
	int			i = 0;

	tcitem.mask = TCIF_PARAM;
	while (channelselect.GetItem(i++, &tcitem))
	{
		pChannel = (Channel*)tcitem.lParam;
		if (pChannel->log.m_hWnd != NULL)
			pChannel->log.SetFont(&g_App.m_pMDlg->m_fontDefault);
	}
	titleWindow.SetFont(&g_App.m_pMDlg->m_fontDefault);
	inputWindow.SetFont(&g_App.m_pMDlg->m_fontDefault);
}

void CIrcWnd::OnSize(UINT nType, int cx, int cy)
{
	CResizableDialog::OnSize(nType, cx, cy);

	if (titleWindow.m_hWnd)
	{
		CRect		rcRect;

		serverChannelList.GetWindowRect(&rcRect);
		ScreenToClient(&rcRect);
		titleWindow.SetWindowPos(NULL, rcRect.left, rcRect.top, rcRect.Width(), 18, SWP_NOZORDER);
	}

	if (m_pCurrentChannel != NULL && m_pCurrentChannel->log.m_hWnd)
	{
		CRect		rcRect;

		serverChannelList.GetWindowRect(&rcRect);
		ScreenToClient(&rcRect);

		if (m_pCurrentChannel->type == 4)
			rcRect.top += 18;

		m_pCurrentChannel->log.SetWindowPos(NULL, rcRect.left, rcRect.top, rcRect.Width(), rcRect.Height(), SWP_NOZORDER);
	}
}

int CIrcWnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	return CResizableDialog::OnCreate(lpCreateStruct);
}

void CIrcWnd::DoDataExchange(CDataExchange* pDX)
{
	CResizableDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_NICKLIST, m_ctlNickList);
	DDX_Control(pDX, IDC_INPUTWINDOW, inputWindow);
	DDX_Control(pDX, IDC_TEXTBOLD, m_ctrlTextBoldBtn);
	DDX_Control(pDX, IDC_TEXTUNDERLINE, m_ctrlTextUnderlineBtn);
	DDX_Control(pDX, IDC_TEXTCOLOR, m_ctrlTextColorBtn);
	DDX_Control(pDX, IDC_SERVERCHANNELLIST, serverChannelList);
	DDX_Control(pDX, IDC_TAB2, channelselect);
}

BOOL CIrcWnd::OnCommand(WPARAM wParam, LPARAM lParam)
{
	NOPRM(lParam);

	switch (wParam)
	{
		case IDC_BN_IRCCONNECT:
			OnBnClickedBnIrcconnect();
			return true;

		case IDC_UTF8_ENCODING:
			g_App.m_pPrefs->SetIrcMessageEncodingUTF8(IsDlgButtonChecked(IDC_UTF8_ENCODING) == BST_CHECKED);
			return true;

		case IDC_TEXTBOLD:
			OnBnClickedTextBold();
			return true;

		case IDC_TEXTUNDERLINE:
			OnBnClickedTextUnderline();
			return true;

		case IDC_TEXTCOLOR:
			OnBnClickedTextColor();
			return true;

		case IDC_CHATSEND:
			OnBnClickedChatsend();
			return true;

		case IDC_CLOSECHAT:
			OnBnClickedClosechat();
			return true;

		case Irc_Join:
			JoinChannels();
			return true;

		case Irc_Refresh:
			m_pIrcMain->SendString(_T("LIST"));
			return true;
	}
	return true;
}

BOOL CIrcWnd::PreTranslateMessage(MSG* pMsg)
{
	EMULE_TRY

	if (pMsg->message == WM_KEYDOWN && (pMsg->hwnd == inputWindow.m_hWnd))
	{
		if (pMsg->wParam == VK_RETURN)
		{
			OnBnClickedChatsend();
			return TRUE;
		}

		if (pMsg->wParam == VK_UP || pMsg->wParam == VK_DOWN)
		{
			ScrollHistory(pMsg->wParam == VK_DOWN);
			return TRUE;
		}
	}

	return CResizableDialog::PreTranslateMessage(pMsg);

	EMULE_CATCH

	return false;
}

void CIrcWnd::OnBnClickedBnIrcconnect()
{
	if (IsDisconnected())
		m_pIrcMain->Connect();
	else
		m_pIrcMain->Disconnect();
	inputWindow.SetFocus();
}

void CIrcWnd::OnBnClickedClosechat(int nItem)
{
	TCITEM		tcitem;

	tcitem.mask = TCIF_PARAM;
	if (nItem == -1)
		nItem = channelselect.GetCurSel();

	if (nItem == -1)
		return;

	channelselect.GetItem(nItem, &tcitem);

	Channel		*pPartChannel = (Channel*)tcitem.lParam;

	if (pPartChannel != NULL)
	{
		if (pPartChannel->type == 4 && IsConnected())
		{
			CString		strPart = _T("PART ");

			strPart += pPartChannel->name;
			m_pIrcMain->SendString(strPart);
			return;
		}
		else if (pPartChannel->type == 5 || pPartChannel->type == 4)
		{
			RemoveChannel(pPartChannel->name);
			return;
		}
	}
}

void CIrcWnd::OnTcnSelchangeTab2(NMHDR *pNMHDR, LRESULT *pResult)
{
	int		iCurSel;
	TCITEM	tcitem;
	NOPRM(pNMHDR);

	m_ctlNickList.DeleteAllItems();

	tcitem.mask = TCIF_PARAM;

	if ((iCurSel = channelselect.GetCurSel()) == -1)
		return;

	if (!channelselect.GetItem(iCurSel, &tcitem))
		return;

	Channel		*pChannel = (Channel*)tcitem.lParam;

	if (pChannel == NULL)
		return;

	m_pCurrentChannel = pChannel;

	int			i;
	bool		bWasChanged = (channelselect.GetItemState(iCurSel, TCIS_HIGHLIGHTED) & TCIS_HIGHLIGHTED) ? true : false;

	m_ctlNickList.UpdateNickCount();
	channelselect.SetItemState(iCurSel, TCIS_HIGHLIGHTED, NULL);
	titleWindow.ShowWindow(SW_HIDE);
	if (m_pCurrentChannel->type == 1)
		GetDlgItem(IDC_CLOSECHAT)->EnableWindow(false);
	else if (m_pCurrentChannel->type == 2)
	{
		serverChannelList.ShowWindow(SW_SHOW);
		GetDlgItem(IDC_CLOSECHAT)->EnableWindow(false);
		tcitem.mask = TCIF_PARAM;
		i = 0;
		while (channelselect.GetItem(i++, &tcitem))
		{
			pChannel = (Channel*)tcitem.lParam;
			if (pChannel != m_pCurrentChannel && pChannel->log.m_hWnd != NULL)
				pChannel->log.ShowWindow(SW_HIDE);
		}
		return;
	}
	else
		GetDlgItem(IDC_CLOSECHAT)->EnableWindow(true);
	SetActivity(m_pCurrentChannel->name);

	CRect		rcChannel;

	serverChannelList.GetWindowRect(&rcChannel);
	ScreenToClient(&rcChannel);
	if (m_pCurrentChannel->type == 4)
	{
		rcChannel.top += 18;
		titleWindow.ShowWindow(SW_SHOW);
		SetTitle(m_pCurrentChannel->name, m_pCurrentChannel->title);
	}
	m_pCurrentChannel->log.SetWindowPos(NULL, rcChannel.left, rcChannel.top, rcChannel.Width(), rcChannel.Height(), SWP_NOZORDER);
	m_pCurrentChannel->log.SetRedraw(false);
	m_pCurrentChannel->log.ShowWindow(SW_SHOW);
	if ((m_pCurrentChannel->log.m_dwFlags & HTC_ISAUTOSCROLL) != 0 && bWasChanged)
		m_pCurrentChannel->log.ScrollToLastLine();
	m_pCurrentChannel->log.SetRedraw(true);

	tcitem.mask = TCIF_PARAM;
	i = 0;
	while (channelselect.GetItem(i++, &tcitem))
	{
		pChannel = (Channel*)tcitem.lParam;
		if (pChannel != m_pCurrentChannel && pChannel->log.m_hWnd != NULL)
			pChannel->log.ShowWindow(SW_HIDE);
	}
	serverChannelList.ShowWindow(SW_HIDE);
	m_ctlNickList.RefreshNickList(m_pCurrentChannel->name);
	m_pCurrentChannel->log.SetTitle(m_pCurrentChannel->name);
	inputWindow.SetFocus();
	if (pResult != NULL)
		*pResult = 0;
}

BEGIN_MESSAGE_MAP(CIrcWnd, CDialog)
	ON_NOTIFY(NM_DBLCLK, IDC_SERVERCHANNELLIST, OnNMDblclkserverChannelList)
	ON_NOTIFY(LVN_COLUMNCLICK, IDC_SERVERCHANNELLIST, OnColumnClickChanL)
	ON_NOTIFY(NM_RCLICK, IDC_SERVERCHANNELLIST, OnNMRclickChanL)
	ON_NOTIFY(TCN_SELCHANGE, IDC_TAB2, OnTcnSelchangeTab2)
	ON_MESSAGE(WM_CLOSETAB, OnCloseTab)
	ON_MESSAGE(CPN_SELENDOK, OnColorSelEndOK)
	ON_MESSAGE(CPN_SELENDCANCEL, OnColorSelEndCancel)
	ON_WM_SIZE()
	ON_WM_CREATE()
	ON_WM_DESTROY()
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//	Channel List
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

void CIrcWnd::ResetServerChannelList()
{
	POSITION		pos1, pos2;
	ChannelList		*pCurChannel;

	for (pos1 = channelLPtrList.GetHeadPosition(); (pos2 = pos1) != NULL;)
	{
		pCurChannel = (ChannelList*)channelLPtrList.GetNext(pos1);
		channelLPtrList.RemoveAt(pos2);
		delete pCurChannel;
	}
	serverChannelList.DeleteAllItems();
}

void CIrcWnd::AddChannelToList(CString name, CString user, CString description)
{
	CString		ntemp = name;
	CString		dtemp = description;
	int			iUserTest = _tstoi(user);

	if ((g_App.m_pPrefs->GetIRCChanNameFilter() || g_App.m_pPrefs->GetIRCChannelUserFilter()) && g_App.m_pPrefs->GetIRCUseChanFilter())
	{
		if (iUserTest < g_App.m_pPrefs->GetIRCChannelUserFilter())
			return;
		if (dtemp.MakeLower().Find(g_App.m_pPrefs->GetIRCChanNameFilter().MakeLower()) == -1 && ntemp.MakeLower().Find(g_App.m_pPrefs->GetIRCChanNameFilter().MakeLower()) == -1)
			return;
	}
	ChannelList		*pToAdd = new ChannelList;

	pToAdd->name = name;
	pToAdd->users = user;
	pToAdd->desc = description;

	int			iIndex = 0, iLen, iColorIndex;
	CString		strTemp;
	TCHAR		cCurChar;

	while (pToAdd->desc.GetLength() > iIndex)
	{
		cCurChar = pToAdd->desc[iIndex];
		switch (cCurChar)
		{
			case 0x03:
			{
				pToAdd->desc.Delete(iIndex);
				if (pToAdd->desc.GetLength() > iIndex)
				{
					if (pToAdd->desc[iIndex] >= _T('0') && pToAdd->desc[iIndex] <= _T('9'))
					{
						if (pToAdd->desc.GetLength() > iIndex)
						{
							iLen = 1;
							if (pToAdd->desc[iIndex + 1] >= _T('0') && pToAdd->desc[iIndex + 1] <= _T('9'))
								iLen++;
							iColorIndex = _tstoi(pToAdd->desc.Mid(iIndex, iLen));
							pToAdd->desc.Delete(iIndex, iLen);
							if (iColorIndex < 16)
							{
								strTemp.Format(_T("\001%06x"), _acrColorPal[iColorIndex]);
								pToAdd->desc.Insert(iIndex, strTemp);
								iIndex += strTemp.GetLength();
							}
							if (pToAdd->desc.GetLength() > iIndex && pToAdd->desc[iIndex] == _T(',') && pToAdd->desc[iIndex + 1] >= _T('0') && pToAdd->desc[iIndex + 1] <= _T('9'))
							{
								iLen = 1;
								if (pToAdd->desc.GetLength() > iIndex + 1 && pToAdd->desc[iIndex + 2] >= _T('0') && pToAdd->desc[iIndex + 2] <= _T('9'))
									iLen++;
								iColorIndex = _tstoi(pToAdd->desc.Mid(iIndex + 1, iLen));
								pToAdd->desc.Delete(iIndex, iLen + 1);
								if (iColorIndex < 16)
								{
									strTemp.Format(_T("\002%06x"), _acrColorPal[iColorIndex]);
									pToAdd->desc.Insert(iIndex, strTemp);
									iIndex += strTemp.GetLength();
								}
							}
						}
					}
					else
					{
						pToAdd->desc.Insert(iIndex, _T('\x03'));
						iIndex++;
					}
				}
				break;
			}
			case 0x0F:
			{
				pToAdd->desc.SetAt(iIndex, _T('\x03'));
				iIndex++;
				break;
			}
			default:
			{
				if ((TBYTE)cCurChar < _T(' '))
					pToAdd->desc.Delete(iIndex);
				else
					iIndex++;
			}
		}
	}

	channelLPtrList.AddTail(pToAdd);

	int	iItems = serverChannelList.InsertItem(LVIF_TEXT | LVIF_PARAM | LVIF_STATE,
		serverChannelList.GetItemCount(), pToAdd->name, LVIS_OVERLAYMASK, LVIS_OVERLAYMASK, 0, (LPARAM)pToAdd);

	serverChannelList.SetItemText(iItems, IRC2COL_USERS, pToAdd->users);
	serverChannelList.SetItemText(iItems, IRC2COL_DESCRIPTION, pToAdd->desc);
	if (channelselect.GetCurSel() != 1)
		channelselect.SetItemState(1, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
}

int CIrcWnd::SortProcChanL(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort)
{
	ChannelList		*pItem1 = (ChannelList*)lParam1;
	ChannelList		*pItem2 = (ChannelList*)lParam2;

	switch (lParamSort)
	{
		case IRC2COL_NAME:
			return CString(pItem1->name).CompareNoCase(pItem2->name);
		case IRC2COL_NAME + MLC_SORTDESC:
			return CString(pItem2->name).CompareNoCase(pItem1->name);
		case IRC2COL_USERS:
			return _tstoi(pItem1->users) - _tstoi(pItem2->users);
		case IRC2COL_USERS + MLC_SORTDESC:
			return _tstoi(pItem2->users) - _tstoi(pItem1->users);
		case IRC2COL_DESCRIPTION:
			return CString(pItem1->desc).CompareNoCase(pItem2->desc);
		case IRC2COL_DESCRIPTION + MLC_SORTDESC:
			return CString(pItem2->desc).CompareNoCase(pItem1->desc);
		default:
			return 0;
	}
}

void CIrcWnd::OnColumnClickChanL(NMHDR* pNMHDR, LRESULT* pResult)
{
	serverChannelList.OnLvnColumnClick(pNMHDR, pResult);
}

void CIrcWnd::OnNMRclickChanL(NMHDR *pNMHDR, LRESULT *pResult)
{
	CTitleMenu	menuChanL;
	POINT		point;
	NOPRM(pNMHDR);

	::GetCursorPos(&point);

	menuChanL.CreatePopupMenu();
	menuChanL.AddMenuTitle(GetResString(IDS_IRC_CHANNEL));
	menuChanL.AppendMenu(MF_STRING | ((serverChannelList.GetSelectionMark() != -1) ? MF_ENABLED : MF_GRAYED), Irc_Join, GetResString(IDS_IRC_JOIN));
	menuChanL.AppendMenu(MF_SEPARATOR);
	menuChanL.AppendMenu(MF_STRING | ((IsConnected()) ? MF_ENABLED : MF_GRAYED), Irc_Refresh, GetResString(IDS_CMT_REFRESH));
	menuChanL.SetDefaultItem(Irc_Join);
	menuChanL.TrackPopupMenuEx(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this, NULL);

//	Menu objects are destroyed in their destructor
	*pResult = 0;
}

void CIrcWnd::OnNMDblclkserverChannelList(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR);
	JoinChannels();
	*pResult = 0;
}

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//	Nick List
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

void CIrcWnd::ChangeAllNick(const CString &strOldNick, const CString &strNewNick)
{
	Channel	*pCurChannel = FindChannelByName(strOldNick);

	if (pCurChannel != NULL)
	{
		pCurChannel->name = strNewNick;

		TCITEM	tcitem;
		int		i;

		tcitem.mask = TCIF_PARAM;
		tcitem.lParam = -1;
		for (i = 0; i < channelselect.GetItemCount();i++)
		{
			channelselect.GetItem(i, &tcitem);
			if (((Channel*)tcitem.lParam) == pCurChannel)
				break;
		}
		if (((Channel*)tcitem.lParam) != pCurChannel)
			return;
		tcitem.mask = TCIF_TEXT;
		tcitem.pszText = const_cast<LPTSTR>(strNewNick.GetString());
		channelselect.SetItem(i, &tcitem);
	}
	for (POSITION pos = channelPtrList.GetHeadPosition(); pos != NULL;)
	{
		pCurChannel = (Channel*)channelPtrList.GetNext(pos);
		if (m_ctlNickList.ChangeNick(pCurChannel->name, strOldNick, strNewNick) && !g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
			AddMessageF(pCurChannel->name, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_NOWKNOWNAS), strOldNick, strNewNick);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//	Messages
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

void CIrcWnd::AddMessage(const CString &strChannel, const TCHAR *pcNick, COLORREF crTextColor, const CString &strInputLine)
{
	Channel		*pUpdateChannel = NULL;
	int			iLen;

	if (!strChannel.IsEmpty())
	{
		pUpdateChannel = FindChannelByName(strChannel);
		if (pUpdateChannel == NULL)
			pUpdateChannel = NewChannel(strChannel, (strChannel.GetString()[0] == _T('#')) ? 4 : 5);
	}
	else
		pUpdateChannel = (Channel*)channelPtrList.GetHead();

	if (pUpdateChannel == NULL)
		return;

	CString		strTemp, strLine(strInputLine);

	if (strChannel.IsEmpty())
	{
		strTemp = m_pIrcMain->GetNick();
		iLen = strTemp.GetLength();
		if (iLen > 0 && (_tcsncmp(strLine, strTemp, iLen) == 0))
		{
			iLen++;
			if ((strLine.GetLength() >= iLen) && (strLine.GetString()[iLen] == _T(':')))
				iLen++;
			strLine.Delete(0, iLen);
		}
	}

	if (strLine.IsEmpty())
		return;

	COLORREF	crForegroundColor = crTextColor, crBackgroundColor = CLR_DEFAULT;
	int			iIndex = 0, iLastIndex = 0, iColorIndex;
	DWORD		dwFlags = 0;
	TCHAR		cCurChar;
	bool		bStripColor = false;

	if (g_App.m_pPrefs->GetIRCAddTimestamp())
	{
		COleDateTime		currentTime(COleDateTime::GetCurrentTime());

		pUpdateChannel->log.AppendText(currentTime.Format(_T("%X: ")), RGB(0, 0, 128), CLR_DEFAULT, HTC_HAVENOLINK);
	}

	if (!strChannel.IsEmpty() && (*pcNick != _T('\0')))
	{
		bStripColor = g_App.m_pPrefs->GetIrcStripColor();
		strTemp.Format(_T("<%s>"), pcNick);
		pUpdateChannel->log.AppendText(strTemp, (m_pIrcMain->GetNick() == pcNick) ? RGB(128, 0, 128) : RGB(51, 51, 153));
	}

	while (strLine.GetLength() > iIndex)
	{
		cCurChar = strLine[iIndex];
		switch (cCurChar)
		{
			case 0x02:	//toggle bold
				if (iIndex > iLastIndex)
					pUpdateChannel->log.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;
				iLastIndex = iIndex;
				dwFlags ^= HTC_BOLD;
				break;

			case 0x03:	//color
				if (iIndex > iLastIndex)
					pUpdateChannel->log.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;

				if (strLine.GetLength() > iIndex && strLine[iIndex] >= _T('0') && strLine[iIndex] <= _T('9'))
				{
					iLen = 1;

					if (strLine.GetLength() > iIndex + 1 && strLine[iIndex + 1] >= _T('0') && strLine[iIndex + 1] <= _T('9'))
						iLen++;

					if (!bStripColor)
					{
						iColorIndex = _tstoi(strLine.Mid(iIndex, iLen));
						crForegroundColor = (iColorIndex < ARRSIZE(_acrColorPal)) ? _acrColorPal[iColorIndex] : crTextColor;
					}
					iIndex += iLen;

					if (strLine.GetLength() > iIndex + 1 && strLine[iIndex] == _T(',') && strLine[iIndex + 1] >= _T('0') && strLine[iIndex + 1] <= _T('9'))
					{
						iLen = 2;

						if (strLine.GetLength() > iIndex + 2 && strLine[iIndex + 2] >= _T('0') && strLine[iIndex + 2] <= _T('9'))
							iLen++;

						if (!bStripColor)
						{
							iColorIndex = _tstoi(strLine.Mid(iIndex + 1, iLen));
							crBackgroundColor = (iColorIndex < ARRSIZE(_acrColorPal)) ? _acrColorPal[iColorIndex]: CLR_DEFAULT;
						}
						iIndex += iLen;
					}
				}
				else
				{
					crForegroundColor = crTextColor;
					crBackgroundColor = CLR_DEFAULT;
				}
				iLastIndex = iIndex;
				break;

			case 0x0F:	//normal
				if (crForegroundColor != crTextColor || crBackgroundColor != CLR_DEFAULT || dwFlags != 0)
				{
					if (iIndex > iLastIndex)
						pUpdateChannel->log.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
					iIndex++;
					iLastIndex = iIndex;
					crForegroundColor = crTextColor;
					crBackgroundColor = CLR_DEFAULT;
					dwFlags = 0;
				}
				else
					strLine.Delete(iIndex);
				break;

			case 0x1F:	//toggle underline
				if (iIndex > iLastIndex)
					pUpdateChannel->log.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;
				iLastIndex = iIndex;
				dwFlags ^= HTC_UNDERLINE;
				break;

			default:
				if (cCurChar < _T(' '))
					strLine.Delete(iIndex);
				else
					iIndex++;
		}
	}
	if (iLastIndex < iIndex)
		pUpdateChannel->log.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
	pUpdateChannel->log.AppendText(_T("\n"), CSTRLEN(_T("\n")), CLR_DEFAULT, CLR_DEFAULT, HTC_HAVENOLINK);

	if (m_pCurrentChannel != pUpdateChannel)
		SetActivity(pUpdateChannel->name);
}

void CIrcWnd::AddMessageF(const CString &strChannel, const TCHAR *pcNick, COLORREF crTextColor, const TCHAR *pcLine, ...)
{
	va_list		argptr;
	CString		strTmp;

	va_start(argptr, pcLine);
	strTmp.FormatV(pcLine, argptr);
	va_end(argptr);
	AddMessage(strChannel, pcNick, crTextColor, strTmp);
}

void CIrcWnd::SetConnectStatus(EnumConnectStatus eConnectStatus)
{
	switch (eConnectStatus)
	{
		case IRC_CONNECTING:
		case IRC_CONNECTED:
			SetDlgItemText(IDC_BN_IRCCONNECT, GetResString(IDS_IRC_DISCONNECT));
			AddMessage(_T(""), _T(""), CLR_DEFAULT, GetResString((eConnectStatus == IRC_CONNECTED) ? IDS_CONNECTED : IDS_CONNECTING));
			break;
		case IRC_DISCONNECTED:
		{
			SetDlgItemText(IDC_BN_IRCCONNECT, GetResString(IDS_IRC_CONNECT));
			AddMessage(_T(""), _T(""), CLR_DEFAULT, GetResString(IDS_DISCONNECTED));
			m_bLoggedIn = false;
			ResetServerChannelList();

			Channel	*pToDel;

			while (channelPtrList.GetCount() > 2)
			{
				pToDel = (Channel*)channelPtrList.GetTail();
				RemoveChannel(pToDel->name);
			}
			GetDlgItem(IDC_CLOSECHAT)->EnableWindow(false);
			GetDlgItem(IDC_CHATSEND)->EnableWindow(false);
			break;
		}
	}
	m_eConnectStatus = eConnectStatus;
}

void CIrcWnd::NoticeMessage(CString source, CString message)
{
	if (source.IsEmpty())
	{
		CString		strLine = message, strChannel;

		if (m_pCurrentChannel->type == 4 || m_pCurrentChannel->type == 5)
		{
			CString		strTemp = m_pIrcMain->GetNick();
			int			iLen = strTemp.GetLength();

			if (iLen > 0 && strLine.Left(iLen) == strTemp)
			{
				if (strLine.Mid(iLen + 1, 1) == _T(":"))
					iLen ++;
				strLine = strLine.Right(strLine.GetLength() - (iLen + 1));
			}
			strChannel = m_pCurrentChannel->name;
		}
		AddMessage(strChannel, _T(""), RGB(255, 80, 80), strLine);
		return;
	}

	bool		bFlag = false;
	Channel		*pCurChannel = FindChannelByName(source);
	Nick		*pCurNick;

	if (pCurChannel != NULL)
	{
		AddMessageF(source, _T(""), RGB(153, 51, 102), _T("-%s- %s"), source, message);
		bFlag = true;
	}

	for (POSITION pos = channelPtrList.GetHeadPosition(); pos != NULL;)
	{
		pCurChannel = (Channel*)channelPtrList.GetNext(pos);
		pCurNick = m_ctlNickList.FindNickByName(pCurChannel->name, source);
		if (pCurNick != NULL)
		{
			AddMessageF(pCurChannel->name, _T(""), RGB(153, 51, 102), _T("-%s- %s"), source, message);
			bFlag = true;
		}
	}

	if (!bFlag)
		AddMessageF((m_pCurrentChannel->type == 4 || m_pCurrentChannel->type == 5) ? m_pCurrentChannel->name : _T(""), _T(""), RGB(153, 51, 102), _T("-%s- %s"), source, message);
}

void CIrcWnd::SetTitle(CString channel, CString title)
{
	Channel		*pCurChannel = FindChannelByName(channel);

	if (pCurChannel == NULL)
		return;

	pCurChannel->title = title;

	if (pCurChannel != m_pCurrentChannel || m_pCurrentChannel->type != 4)
		return;

	titleWindow.Reset();

	CString		strLine = pCurChannel->title;

	if (strLine.IsEmpty())
		return;

	COLORREF	crForegroundColor = CLR_DEFAULT, crBackgroundColor = CLR_DEFAULT;
	int			iIndex = 0, iLastIndex = 0, iColorIndex, iLen;
	DWORD		dwFlags = 0;
	TCHAR		cCurChar;

	while (strLine.GetLength() > iIndex)
	{
		cCurChar = strLine[iIndex];
		switch (cCurChar)
		{
			case 0x02:
			{
				if (iIndex > iLastIndex)
					titleWindow.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;
				iLastIndex = iIndex;
				dwFlags ^= HTC_BOLD;
				break;
			}
			case 0x03:
			{
				if (iIndex > iLastIndex)
					titleWindow.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;

				if (strLine.GetLength() > iIndex && strLine[iIndex] >= _T('0') && strLine[iIndex] <= _T('9'))
				{
					iLen = 1;

					if (strLine.GetLength() > iIndex + 1 && strLine[iIndex + 1] >= _T('0') && strLine[iIndex + 1] <= _T('9'))
						iLen++;

					iColorIndex = _tstoi(strLine.Mid(iIndex, iLen));
					crForegroundColor = (iColorIndex < 16) ? _acrColorPal[iColorIndex] : CLR_DEFAULT;
					iIndex += iLen;

					if (strLine.GetLength() > iIndex + 1 && strLine[iIndex] == _T(',') && strLine[iIndex + 1] >= _T('0') && strLine[iIndex + 1] <= _T('9'))
					{
						iLen = 1;

						if (strLine.GetLength() > iIndex + 2 && strLine[iIndex + 2] >= _T('0') && strLine[iIndex + 2] <= _T('9'))
							iLen++;

						iColorIndex = _tstoi(strLine.Mid(iIndex + 1, iLen));
						crBackgroundColor = (iColorIndex < 16) ? _acrColorPal[iColorIndex]: CLR_DEFAULT;
						iIndex += 1 + iLen;
					}
				}
				else
				{
					crForegroundColor = CLR_DEFAULT;
					crBackgroundColor = CLR_DEFAULT;
				}
				iLastIndex = iIndex;
				break;
			}
			case 0x0F:
			{
				if (iIndex > iLastIndex)
					titleWindow.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;
				iLastIndex = iIndex;
				crForegroundColor = CLR_DEFAULT;
				crBackgroundColor = CLR_DEFAULT;
				dwFlags = 0;
				break;
			}
			case 0x1F:
			{
				if (iIndex > iLastIndex)
					titleWindow.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;
				iLastIndex = iIndex;
				dwFlags ^= HTC_UNDERLINE;
				break;
			}
			default:
			{
				if ((TBYTE)cCurChar < _T(' '))
					strLine.Delete(iIndex);
				else
					iIndex++;
			}
		}
	}
	if (iLastIndex < iIndex)
		titleWindow.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
}

void CIrcWnd::SetActivity(CString channel)
{
	Channel		*pRefresh = FindChannelByName(channel);

	if (pRefresh == NULL)
	{
		pRefresh = (Channel*)channelPtrList.GetHead();
		if (pRefresh == NULL)
			return;
	}
	TCITEM		tcitem;
	int			i;

	tcitem.mask = TCIF_PARAM;
	tcitem.lParam = -1;
	for (i = 0; i < channelselect.GetItemCount();i++)
	{
		channelselect.GetItem(i, &tcitem);
		if (((Channel*)tcitem.lParam) == pRefresh)
			break;
	}
	if (((Channel*)tcitem.lParam) != pRefresh)
		return;
	if (channelselect.GetCurSel() != i)
		channelselect.SetItemState(i, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
}

void CIrcWnd::OnBnClickedTextBold()
{
	CString		strSend;
	int			iStartChar, iEndChar;

	inputWindow.GetSel(iStartChar, iEndChar);
	inputWindow.GetWindowText(strSend);

	if (iEndChar > iStartChar && iEndChar <= strSend.GetLength())
		strSend.Insert(iEndChar, _T('\x02'));

	if (iStartChar <= strSend.GetLength())
	{
		strSend.Insert(iStartChar, _T('\x02'));
		iStartChar++;
		iEndChar++;
	}

	inputWindow.SetWindowText(strSend);
	inputWindow.SetSel(iStartChar, iEndChar);
	inputWindow.SetFocus();
}

void CIrcWnd::OnBnClickedTextUnderline()
{
	CString		strSend;
	int			iStartChar, iEndChar;

	inputWindow.GetSel(iStartChar, iEndChar);
	inputWindow.GetWindowText(strSend);

	if (iEndChar > iStartChar && iEndChar <= strSend.GetLength())
		strSend.Insert(iEndChar, _T('\x1F'));

	if (iStartChar <= strSend.GetLength())
	{
		strSend.Insert(iStartChar, _T('\x1F'));
		iStartChar++;
		iEndChar++;
	}

	inputWindow.SetWindowText(strSend);
	inputWindow.SetSel(iStartChar, iEndChar);
	inputWindow.SetFocus();
}

void CIrcWnd::OnBnClickedTextColor()
{
	CRect		rColorButton;

	m_ctrlTextColorBtn.GetWindowRect(&rColorButton);

	new CColourPopup(CPoint(rColorButton.right - 149, rColorButton.top - 68), CLR_DEFAULT, this,
		GetResString(IDS_DEFAULT), NULL, true);

	inputWindow.SetFocus();
}

LONG CIrcWnd::OnColorSelEndOK(WPARAM wParam, LPARAM lParam)
{
	CWnd			*pParent = GetParent();
	NOPRM(wParam);

	if (pParent != NULL)
	{
		pParent->SendMessage(CPN_CLOSEUP, lParam, (WPARAM)GetDlgCtrlID());
		pParent->SendMessage(CPN_SELENDOK, lParam, (WPARAM)GetDlgCtrlID());
	}

	CString		strSend, strColor = _T("\003");
	int			iStartChar, iEndChar;

	inputWindow.GetSel(iStartChar, iEndChar);
	inputWindow.GetWindowText(strSend);

	if (iEndChar > iStartChar && iEndChar <= strSend.GetLength())
		strSend.Insert(iEndChar, strColor);

	if (iStartChar <= strSend.GetLength())
	{
		if ((int)lParam >= 0 && (int)lParam < 16)
			strColor.AppendFormat(_T("%i"), (int)lParam);
		strSend.Insert(iStartChar, strColor);
		iStartChar += strColor.GetLength();
		iEndChar += strColor.GetLength();
	}

	inputWindow.SetWindowText(strSend);
	inputWindow.SetSel(iStartChar, iEndChar);

	return true;
}

LONG CIrcWnd::OnColorSelEndCancel(WPARAM wParam, LPARAM /*lParam*/)
{
	CWnd		*pParent = GetParent();

	if (pParent != NULL)
	{
		pParent->SendMessage(CPN_CLOSEUP, wParam, (WPARAM)GetDlgCtrlID());
		pParent->SendMessage(CPN_SELENDCANCEL, wParam, (WPARAM)GetDlgCtrlID());
	}

	return true;
}

void CIrcWnd::OnBnClickedChatsend()
{
	inputWindow.SetFocus();

	if (!IsConnected() || m_pCurrentChannel == NULL || m_pCurrentChannel->log.m_hWnd == NULL)
		return;

	CString		strSend;

	inputWindow.GetWindowText(strSend);
	inputWindow.SetWindowText(_T(""));

	if (strSend.IsEmpty())
		return;

	if (m_pCurrentChannel->history.GetCount() == g_App.m_pPrefs->GetMaxChatHistoryLines())
		m_pCurrentChannel->history.RemoveAt(0);
	m_pCurrentChannel->history.Add(strSend);
	m_pCurrentChannel->history_pos = static_cast<uint16>(m_pCurrentChannel->history.GetCount());

	CString		strTemp;
	int			iIndex;

	if ((GetKeyState(VK_CONTROL) & 0x8000) == 0 && strSend[0] == _T('/'))
	{
		strSend.TrimLeft(_T("/ "));
		iIndex = strSend.Find(_T(" "));

		if (iIndex <= 0)
		{
			m_pIrcMain->SendString(strSend);
			return;
		}

		strTemp = strSend.Mid(iIndex);
		strTemp.Trim();

		if (strTemp.IsEmpty())
			return;

		strSend.Truncate(iIndex);
		strSend.MakeLower();

		if (strSend == _T("hop"))
		{
			if (m_pCurrentChannel->type != 4)
				return;

			m_pIrcMain->SendString(_T("PART ") + m_pCurrentChannel->name);
			m_pIrcMain->SendString(_T("JOIN ") + strTemp);
			return;
		}
		else if (strSend == _T("msg") || strSend == _T("privmsg"))
		{
			iIndex = strTemp.Find(_T(" "));

			if (iIndex <= 0)
				return;

			strSend = strTemp.Mid(iIndex);
			strSend.Trim();
			strTemp.Truncate(iIndex);
			strTemp.Trim();

			if (strSend.IsEmpty() || strTemp.IsEmpty())
				return;

			if (strTemp.CompareNoCase(_T("nickserv")) == 0)
				strTemp = _T("ns ");
			else if (strTemp.CompareNoCase(_T("chanserv")) == 0)
				strTemp = _T("cs ");
			else
			{
				strTemp.Insert(0, _T("PRIVMSG "));
				strTemp += _T(" :");
			}
			strTemp += strSend;
			strSend.Insert(0, _T("* >> "));
			AddMessage((m_pCurrentChannel->type == 4 || m_pCurrentChannel->type == 5) ? m_pCurrentChannel->name : _T(""), _T(""), RGB(153, 51, 102), strSend);
			m_pIrcMain->SendString(strTemp);
			return;
		}
		else if (strSend == _T("topic"))
		{
			iIndex = strTemp.Find(_T(" "));

			if ((iIndex <= 0 || strTemp[iIndex] != _T('#')) && m_pCurrentChannel->type == 4)
			{
				strSend = strTemp;
				strTemp = m_pCurrentChannel->name;
			}
			else if (iIndex > 0)
			{
				strSend = strTemp.Mid(iIndex);
				strSend.Trim();
				strTemp.Truncate(iIndex);
				strTemp.Trim();
			}
			else
				return;

			if (strSend.IsEmpty() || strTemp.IsEmpty() || strTemp[0] != _T('#'))
				return;

			strTemp.Insert(0, _T("TOPIC "));
			strTemp += _T(" :");
			strTemp += strSend;
			m_pIrcMain->SendString(strTemp);
			return;
		}
		else if (strSend == _T("me"))
		{
			if (m_pCurrentChannel->type != 4 && m_pCurrentChannel->type != 5)
				return;

			strSend.Format(_T("PRIVMSG %s :\001ACTION %s\001"), m_pCurrentChannel->name, strTemp);
			AddMessageF(m_pCurrentChannel->name, _T(""), RGB(0, 147, 0), _T("* %s %s"), m_pIrcMain->GetNick(), strTemp);
			m_pIrcMain->SendString(strSend);
			return;
		}
		else
		{
			strSend += _T(" ");
			strSend += strTemp;
			m_pIrcMain->SendString(strSend);
			return;
		}
	}

	if (m_pCurrentChannel->type < 4)
	{
		m_pIrcMain->SendString(strSend);
		return;
	}

	strTemp.Format(_T("PRIVMSG %s :%s"), m_pCurrentChannel->name, strSend);
	m_pIrcMain->SendString(strTemp);
	AddMessage(m_pCurrentChannel->name, m_pIrcMain->GetNick(), CLR_DEFAULT, strSend);
}

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//	Channels
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

Channel* CIrcWnd::FindChannelByName(const CString &strName)
{
	Channel	*pCurChannel;
	CString	strSearch(strName);

	strSearch.Trim();
	for (POSITION pos = channelPtrList.GetHeadPosition(); pos != NULL;)
	{
		pCurChannel = (Channel*)channelPtrList.GetNext(pos);
		if (pCurChannel->name.CompareNoCase(strSearch) == 0 && (pCurChannel->type == 4 || pCurChannel->type == 5))
			return pCurChannel;
	}
	return NULL;
}

Channel* CIrcWnd::NewChannel(const CString &strName, byte byteType)
{
	Channel		*pToAdd = new Channel;
	TCITEM		tcitem;

	pToAdd->name = strName;
	pToAdd->title = strName;
	pToAdd->type = byteType;
	pToAdd->history_pos = 0;
	if (byteType != 2)
	{
		CRect		rcChannel;

		serverChannelList.GetWindowRect(&rcChannel);
		ScreenToClient(&rcChannel);
		if (pToAdd->type == 4)
			rcChannel.top += 18;
		pToAdd->log.Create(WS_CHILD | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_HSCROLL | WS_VSCROLL | ES_MULTILINE | ES_READONLY | ES_NOHIDESEL, rcChannel, this, (UINT)-1);
		pToAdd->log.ModifyStyleEx(0, WS_EX_STATICEDGE, SWP_FRAMECHANGED);
		pToAdd->log.SendMessage(EM_SETMARGINS, EC_LEFTMARGIN | EC_RIGHTMARGIN, MAKELONG(3, 3));
		pToAdd->log.SetFont(&g_App.m_pMDlg->m_fontDefault);
		pToAdd->log.SetTitle(strName);
		pToAdd->log.m_dwFlags = HTC_ISAUTOSCROLL | HTC_ISWORDWRAP | HTC_ISDEFAULTLINKS;
		pToAdd->log.SetTargetDevice(NULL, 0);
	}
	channelPtrList.AddTail(pToAdd);

	tcitem.mask = TCIF_PARAM | TCIF_TEXT;
	if (byteType >= 4)
		tcitem.mask |= TCIF_IMAGE;
	tcitem.lParam = (LPARAM)pToAdd;
	tcitem.pszText = const_cast<LPTSTR>(strName.GetString());
	tcitem.iImage = 0;
	uint32 pos = channelselect.GetItemCount();

	channelselect.InsertItem(pos, &tcitem);
	if (byteType >= 4)
	{
		channelselect.SetCurSel(pos);
		channelselect.SetCurFocus(pos);
		OnTcnSelchangeTab2(NULL, NULL);
		GetDlgItem(IDC_CLOSECHAT)->EnableWindow(true);
		GetDlgItem(IDC_CHATSEND)->EnableWindow(true);
	}

	return pToAdd;
}

void CIrcWnd::RemoveChannel(CString channel)
{
	Channel		*pToDel = FindChannelByName(channel);

	if (pToDel == NULL)
		return;

	TCITEM		tcitem;
	int			i;

	tcitem.mask = TCIF_PARAM;
	tcitem.lParam = -1;

	for (i = 0; i < channelselect.GetItemCount();i++)
	{
		channelselect.GetItem(i, &tcitem);
		if (((Channel*)tcitem.lParam) == pToDel)
			break;
	}

	if (((Channel*)tcitem.lParam) != pToDel)
		return;

	channelselect.DeleteItem(i);

	if (pToDel == m_pCurrentChannel)
	{
		m_ctlNickList.DeleteAllItems();
		if (channelselect.GetItemCount() > 2 && i > 1)
		{
			if (i == 2)
				i++;
			channelselect.SetCurSel(i - 1);
			channelselect.SetCurFocus(i - 1);
			OnTcnSelchangeTab2(NULL, NULL);
		}
		else
		{
			channelselect.SetCurSel(0);
			channelselect.SetCurFocus(0);
			OnTcnSelchangeTab2(NULL, NULL);
			GetDlgItem(IDC_CLOSECHAT)->EnableWindow(false);
			GetDlgItem(IDC_CHATSEND)->EnableWindow(false);
		}
	}
	m_ctlNickList.DeleteAllNick(pToDel->name);
	channelPtrList.RemoveAt(channelPtrList.Find(pToDel));
	delete pToDel;
}

void CIrcWnd::DeleteAllChannel()
{
	POSITION	pos1, pos2;
	Channel		*pChannel;

	for (pos1 = channelPtrList.GetHeadPosition();(pos2 = pos1) != NULL;)
	{
		pChannel = (Channel*)channelPtrList.GetNext(pos1);
		m_ctlNickList.DeleteAllNick(pChannel->name);
		channelPtrList.RemoveAt(pos2);
		delete pChannel;
	}
}

void CIrcWnd::JoinChannels()
{
	if (!IsConnected())
		return;

	int			iIndex = -1;
	POSITION	pos = serverChannelList.GetFirstSelectedItemPosition();

	while (pos != NULL)
	{
		iIndex = serverChannelList.GetNextSelectedItem(pos);
		if (iIndex > -1)
			m_pIrcMain->SendString(_T("JOIN ") + serverChannelList.GetItemText(iIndex, 0));
	}
}

LRESULT CIrcWnd::OnCloseTab(WPARAM wparam, LPARAM lparam)
{
	NOPRM(lparam);
	OnBnClickedClosechat((int)wparam);
	return true;
}

void CIrcWnd::SendString(const CString &strSend)
{
	if (IsConnected())
		m_pIrcMain->SendString(strSend);
}

void CIrcWnd::ScrollHistory(bool down)
{
	if ((m_pCurrentChannel->history_pos == 0 && !down) || (m_pCurrentChannel->history_pos == m_pCurrentChannel->history.GetCount() && down))
		return;

	if (down)
		++m_pCurrentChannel->history_pos;
	else
		--m_pCurrentChannel->history_pos;

	CString		strBuffer;

	if (m_pCurrentChannel->history_pos != m_pCurrentChannel->history.GetCount())
		strBuffer = m_pCurrentChannel->history.GetAt(m_pCurrentChannel->history_pos);

	inputWindow.SetWindowText(strBuffer);
	inputWindow.SetSel(strBuffer.GetLength(), strBuffer.GetLength());
}
@


1.145
log
@IRC: added utf8 message encoding option [eklmn/Aw3].
@
text
@d16 1
a17 1
#include "emule.h"
a49 1
	memset(&m_bSortAscendingChanList, true, sizeof(m_bSortAscendingChanList));
d192 1
a192 2
	m_bSortAscendingChanList[IRC2COL_USERS] = false;

d194 1
a194 1
		SortInit(g_App.m_pPrefs->GetIrcSortCol());
d196 1
a196 6
	{
		int		iSortCode = g_App.m_pPrefs->GetColumnSortItem(CPreferences::TABLE_IRC);

		iSortCode |= g_App.m_pPrefs->GetColumnSortAscending(CPreferences::TABLE_IRC) ? MLC_SORTASC : MLC_SORTDESC;
		SortInit(iSortCode);
	}
d632 1
a632 25
	NM_LISTVIEW		*pNMListView = reinterpret_cast<NM_LISTVIEW*>(pNMHDR);
	int				iSubItem = pNMListView->iSubItem;
	bool			bSortOrder = m_bSortAscendingChanList[iSubItem];

// Reverse sorting direction for the same column and keep the same if column was changed
	if ((serverChannelList.GetSortParam() & MLC_COLUMNMASK) == static_cast<uint32>(iSubItem))
		m_bSortAscendingChanList[iSubItem] = bSortOrder = !bSortOrder;

	serverChannelList.SetSortArrow(iSubItem, bSortOrder);
	serverChannelList.SortItems(SortProcChanL, iSubItem + ((bSortOrder) ? MLC_SORTASC : MLC_SORTDESC));
	g_App.m_pPrefs->SetColumnSortItem(CPreferences::TABLE_IRC, iSubItem);
	g_App.m_pPrefs->SetColumnSortAscending(CPreferences::TABLE_IRC, bSortOrder);
	*pResult = 0;
}

void CIrcWnd::SortInit(int iSortCode)
{
//	Get the sort column
	int		iSortColumn = (iSortCode & MLC_COLUMNMASK);
//	Get the sort order
	bool	bSortAscending = (iSortCode & MLC_SORTDESC) == 0;

	serverChannelList.SetSortArrow(iSortColumn, bSortAscending);
	serverChannelList.SortItems(SortProcChanL, iSortCode);
	m_bSortAscendingChanList[iSortColumn] = bSortAscending;
@


1.144
log
@Simplified IRC log message formatting (to avoid potential issues with % char);
Faster interfaces for IRC message logging.
@
text
@d179 2
d184 1
d296 4
@


1.143
log
@Strip IRC user message colors {xalbux}.
@
text
@a524 1
	pToAdd->desc.Replace(_T('\x04'), _T('%'));
d721 1
a721 1
			AddMessage(pCurChannel->name, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_NOWKNOWNAS), strOldNick, strNewNick);
d731 1
a731 1
void CIrcWnd::AddMessage(CString channelName, CString targetname, COLORREF crTextColor, CString line, ...)
a732 1
	va_list		argptr;
d734 1
d736 1
a736 1
	if (!channelName.IsEmpty())
d738 1
a738 1
		pUpdateChannel = FindChannelByName(channelName);
d740 1
a740 1
			pUpdateChannel = NewChannel(channelName, (channelName[0] == _T('#')) ? 4 : 5);
d748 1
a748 2
	CString		strTemp, strLine;
	int			iLen;
d750 1
a750 7
	va_start(argptr, line);
	strLine.FormatV(line, argptr);
	va_end(argptr);

	strLine.Replace(_T('\x04'), _T('%'));

	if (channelName.IsEmpty())
d754 1
a754 1
		if (iLen > 0 && strLine.Left(iLen) == strTemp)
d756 2
a757 1
			if (strLine.Mid(iLen + 1, 1) == _T(":"))
d759 1
a759 1
			strLine = strLine.Right(strLine.GetLength() - (iLen + 1));
d779 1
a779 1
	if (!channelName.IsEmpty() && !targetname.IsEmpty())
d782 2
a783 1
		pUpdateChannel->log.AppendText(_T("<") + targetname + _T("> "), (m_pIrcMain->GetNick() == targetname) ? RGB(128, 0, 128) : RGB(51, 51, 153));
d879 11
a894 3
			SetDlgItemText(IDC_BN_IRCCONNECT, GetResString(IDS_IRC_DISCONNECT));
			AddMessage(_T(""), _T(""), CLR_DEFAULT, GetResString(IDS_CONNECTING));
			break;
d897 1
a897 1
			AddMessage(_T(""), _T(""), CLR_DEFAULT, GetResString(IDS_CONNECTED));
d950 1
a950 1
		AddMessage(source, _T(""), RGB(153, 51, 102), _T("-%s- %s"), source, message);
d960 1
a960 1
			AddMessage(pCurChannel->name, _T(""), RGB(153, 51, 102), _T("-%s- %s"), source, message);
d966 1
a966 1
		AddMessage((m_pCurrentChannel->type == 4 || m_pCurrentChannel->type == 5) ? m_pCurrentChannel->name : _T(""), _T(""), RGB(153, 51, 102), _T("-%s- %s"), source, message);
a1286 1
			strSend.Replace(_T('%'), _T('\x04'));
d1326 1
a1326 2
			strTemp.Replace(_T('%'), _T('\x04'));
			AddMessage(m_pCurrentChannel->name, _T(""), RGB(0, 147, 0), _T("* %s %s"), m_pIrcMain->GetNick(), strTemp);
a1346 1
	strSend.Replace(_T('%'), _T('\x04'));
d1356 1
a1356 1
Channel* CIrcWnd::FindChannelByName(CString name)
d1358 2
a1359 1
	Channel		*pCurChannel;
d1361 1
d1365 1
a1365 1
		if (pCurChannel->name.CompareNoCase(name.Trim()) == 0 && (pCurChannel->type == 4 || pCurChannel->type == 5))
d1368 1
a1368 1
	return 0;
d1371 1
a1371 1
Channel* CIrcWnd::NewChannel(CString name, byte type)
d1376 3
a1378 3
	pToAdd->name = name;
	pToAdd->title = name;
	pToAdd->type = type;
d1380 1
a1380 1
	if (type != 2)
d1392 1
a1392 1
		pToAdd->log.SetTitle(name);
d1399 1
a1399 1
	if (type >= 4)
d1402 1
a1402 1
	tcitem.pszText = name.GetBuffer();
d1407 1
a1407 1
	if (type >= 4)
@


1.142
log
@Fixed link highlighting for long IRC links {Paola} (only the first line was identified as a link for links broken in several lines);
Optimized link identification and output to RichEdit controls (logs, chats, IRC)..
@
text
@a734 1
	CString		strTemp;
d749 3
d753 1
a753 2
	strTemp.FormatV(line, argptr);
	line = strTemp;
a755 3
	CString		strLine = line;
	int			iLen;

d765 1
a765 1
				iLen ++;
d777 1
d787 2
d790 1
d797 1
a797 2
			case 0x02:
			{
d804 2
a805 3
			}
			case 0x03:
			{
d817 5
a821 2
					iColorIndex = _tstoi(strLine.Mid(iIndex, iLen));
					crForegroundColor = (iColorIndex < 16) ? _acrColorPal[iColorIndex] : crTextColor;
d826 1
a826 1
						iLen = 1;
d831 6
a836 3
						iColorIndex = _tstoi(strLine.Mid(iIndex + 1, iLen));
						crBackgroundColor = (iColorIndex < 16) ? _acrColorPal[iColorIndex]: CLR_DEFAULT;
						iIndex += 1 + iLen;
d846 2
a847 3
			}
			case 0x0F:
			{
d861 2
a862 3
			}
			case 0x1F:
			{
d869 1
a869 1
			}
d871 1
a871 2
			{
				if ((TBYTE)cCurChar < _T(' '))
a874 1
			}
@


1.141
log
@Move the channel's user count out of the column header.
@
text
@d119 1
a119 1
			titleWindow.AppendText(GetResString(IDS_STATUS), RGB(0, 0, 128));
d121 1
a121 1
			titleWindow.AppendText(GetResString(IDS_IRC_CHANNELLIST), RGB(0, 0, 128));
d169 1
a169 4
	titleWindow.SetEventMask(titleWindow.GetEventMask() | ENM_MOUSEEVENTS);
	titleWindow.m_dwFlags = HTC_ISLIMITED;
	//titleWindow.m_crDefaultForeground = GetSysColor(COLOR_INFOTEXT);
	//titleWindow.m_crDefaultBackground = GetSysColor(COLOR_INFOBK);
a473 98
BOOL CIrcWnd::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult)
{
	BOOL				bResult = CDialog::OnNotify(wParam, lParam, pResult);
	MSGFILTER		   *lpMsgFilter = (MSGFILTER *)lParam;

	if (lpMsgFilter == NULL || lpMsgFilter->nmhdr.code != EN_MSGFILTER)
		return bResult;

	CHTRichEditCtrl		*pRichEditCtrl;

	if (lpMsgFilter->nmhdr.hwndFrom == m_pCurrentChannel->log.m_hWnd)
		pRichEditCtrl = &m_pCurrentChannel->log;
	else if (lpMsgFilter->nmhdr.hwndFrom == titleWindow.m_hWnd)
		pRichEditCtrl = &titleWindow;
	else
		return bResult;

	if ((pRichEditCtrl->m_dwFlags & HTC_ISDEFAULTLINKS) != 0)
		return bResult;

	pRichEditCtrl->m_dwFlags &= ~HTC_ISHANDCURSOR;

	CPoint			point;

	::GetCursorPos(&point);
	pRichEditCtrl->ScreenToClient(&point);

	int			iCharPos = pRichEditCtrl->CharFromPos(point);
	int			iLine = pRichEditCtrl->LineFromChar(iCharPos);
	int			iLineIndex = pRichEditCtrl->LineIndex(iLine);
	int			iLen = pRichEditCtrl->LineLength(iLineIndex);

	if (iLen <= 3)
		return bResult;

	TCHAR		*pBuffer = new TCHAR[iLen + 3];

	memzero(pBuffer, sizeof(TCHAR) * (iLen + 3));
	pRichEditCtrl->GetLine(iLine, pBuffer, iLen);

	CString		strLineOrginal = CString(pBuffer, iLen);

	delete[] pBuffer;

	CString		strLine = strLineOrginal;
	int			iIndex = 0, iScheme, iLinkEnd;

	iCharPos -= iLineIndex;
	//	Convert string to lower case only once
	strLine.MakeLower();
	while (strLineOrginal.GetLength() > iIndex)
	{
		for (iScheme = 0; iScheme < ARRSIZE(_apszSchemes); iScheme++)
		{
			iLen = _apszSchemes[iScheme].uiLen;
			iLinkEnd = iIndex + iLen;

			if ((strLine.GetLength() > iLinkEnd) &&
				(strLine.Mid(iIndex, iLen).Compare(_apszSchemes[iScheme].pszScheme) == 0))
			{
				while (strLine.GetLength() > iLinkEnd && strLine[iLinkEnd] != _T(' ')
					&& strLine[iLinkEnd] != _T('\n') && strLine[iLinkEnd] != _T('\\') &&
					strLine[iLinkEnd] != _T('\r') && strLine[iLinkEnd] != _T('\t'))
				{
					iLinkEnd++;
				}

				while ((iLinkEnd > iIndex + iLen) &&
					!((strLine[iLinkEnd - 1] >= _T('/') && strLine[iLinkEnd - 1] <= _T('9'))
					||(strLine[iLinkEnd - 1] >= _T('a') && strLine[iLinkEnd - 1] <= _T('z'))
					|| (strLine[iLinkEnd - 1] == _T('|'))))
				{
					iLinkEnd--;
				}

				if (iLinkEnd > iIndex + iLen)
				{
					if (iCharPos > iIndex && iCharPos < iLinkEnd)
					{
						pRichEditCtrl->m_strURL = strLineOrginal.Mid(iIndex, iLinkEnd - iIndex);
						pRichEditCtrl->m_dwFlags |= HTC_ISHANDCURSOR;
						return bResult;
					}
					iIndex = iLinkEnd;
				}
				else
					iIndex += iLen;

				break;
			}
		}
		if (iScheme >= ARRSIZE(_apszSchemes))
			iIndex++;
	}

	return bResult;
}

d784 1
a784 2
		strTemp.Format(_T("%s: "), currentTime.Format(_T("%X")));
		pUpdateChannel->log.AppendText(strTemp, RGB(0, 0, 128));
d877 1
a877 1
	pUpdateChannel->log.AppendText(_T("\n"));
a1387 1
		pToAdd->log.SetEventMask(pToAdd->log.GetEventMask() | ENM_MOUSEEVENTS);
d1390 1
a1390 1
		pToAdd->log.m_dwFlags = (HTC_ISAUTOSCROLL | HTC_ISWORDWRAP);
@


1.140
log
@Fixed wrong delete operator.
@
text
@d154 1
d221 2
@


1.139
log
@Faster population of IRC lists (several requests combined in one).
@
text
@d516 1
a516 1
	delete pBuffer;
@


1.138
log
@Removed unused operation not required for setitem.
@
text
@d696 2
a697 1
	int			iItems = serverChannelList.InsertItem(LVIF_PARAM, serverChannelList.GetItemCount(), 0, 0, 0, 0, (LPARAM)pToAdd);
d699 2
a700 4
	serverChannelList.SetItemState(iItems, LVIS_OVERLAYMASK, LVIS_OVERLAYMASK);
	serverChannelList.SetItemText(iItems, 0, pToAdd->name);
	serverChannelList.SetItemText(iItems, 1, pToAdd->users);
	serverChannelList.SetItemText(iItems, 2, pToAdd->desc);
@


1.137
log
@Split IRC user list into separate source files;
Removed some most probably not working and suspicious old code (EN_LINK).
@
text
@a814 1
		tcitem.cchTextMax = strNewNick.GetLength();
@


1.136
log
@rolled back last changes.
@
text
@a14 3
//	IrcWnd.cpp : implementation file
//

a49 1
	memset(&m_bSortAscendingNickList, true, sizeof(m_bSortAscendingNickList));
d51 2
a71 14
void CIrcWnd::UpdateNickCount()
{
	CHeaderCtrl		*pHeaderCtrl = nickList.GetHeaderCtrl();
	HDITEM			hdi;
	CString			strRes;

	hdi.mask = HDI_TEXT;
	if (nickList.GetItemCount() > 0)
		strRes.Format(_T("%s[%i]"), GetResString(IDS_IRC_NICK), nickList.GetItemCount());
	else
		GetResString(&strRes, IDS_IRC_NICK);
	hdi.pszText = const_cast<LPTSTR>(strRes.GetString());
	pHeaderCtrl->SetItem(0, &hdi);
}
d113 2
d124 2
a125 2
	CHeaderCtrl	*pHeaderCtrl = nickList.GetHeaderCtrl();
	CString		strRes = GetResString(IDS_STATUS);
a128 7
	hdi.pszText = const_cast<LPTSTR>(strRes.GetString());
	pHeaderCtrl->SetItem(1, &hdi);

	UpdateNickCount();

	pHeaderCtrl = serverChannelList.GetHeaderCtrl();

a138 5
	static const uint16 s_auColHdr[][2] =
	{
		{ LVCFMT_LEFT, 90 },	// IRC1COL_NICK
		{ LVCFMT_LEFT, 70 }		// IRC1COL_STATUS
	};
a149 3
	for (unsigned ui = 0; ui < ARRSIZE(s_auColHdr); ui++)
		nickList.InsertColumn(ui, _T(""), static_cast<int>(s_auColHdr[ui][0]), static_cast<int>(s_auColHdr[ui][1]));

d154 2
a193 3
	nickList.SetSortArrow(IRC1COL_STATUS, m_bSortAscendingNickList[IRC1COL_STATUS]);
	nickList.SortItems(SortProcNick, IRC1COL_STATUS);

d274 1
a274 1
	DDX_Control(pDX, IDC_NICKLIST, nickList);
a284 6
	int			nickItem = nickList.GetNextItem(-1, LVIS_SELECTED | LVIS_FOCUSED);
	int			chanItem = channelselect.GetCurSel();
	Nick		*pNick;
	TCITEM		tcitem;
	Channel		*pChannel;
	CString		strSend;
a289 1
		{
d292 1
a292 1
		}
a293 1
		{
d296 1
a296 1
		}
a297 1
		{
d300 1
a300 1
		}
a301 1
		{
d304 1
a304 1
		}
a305 1
		{
d308 1
a308 1
		}
a309 1
		{
d312 1
a312 180
		}
		case Irc_Priv:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			if (pNick != NULL && FindChannelByName(pNick->nick) == NULL)
				AddMessage(pNick->nick, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_PRIVATECHANSTART));
			return true;
		}
		case Irc_WhoIs:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			if (pNick != NULL)
			{
				strSend.Format(_T("WHOIS %s"), pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_Owner:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("PRIVMSG chanserv owner %s %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_DeOwner:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("PRIVMSG chanserv deowner %s %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_Op:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("MODE %s +o %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_DeOp:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("MODE %s -o %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_HalfOp:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("MODE %s +h %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_DeHalfOp:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("MODE %s -h %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_Voice:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("MODE %s +v %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_DeVoice:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("MODE %s -v %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_Protect:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("PRIVMSG chanserv protect %s %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_DeProtect:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("PRIVMSG chanserv deprotect %s %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_Kick:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("KICK %s %s"), pChannel->name, pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_Slap:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(GetResString(IDS_IRC_SLAPMSGSEND), pChannel->name, pNick->nick);
				AddMessage(pChannel->name, _T(""), RGB(252, 127, 0), GetResString(IDS_IRC_SLAPMSG), m_pIrcMain->GetNick(), pNick->nick);
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_Close:
		{
			OnBnClickedClosechat();
			return true;
		}
a313 1
		{
d316 1
a316 1
		}
a317 1
		{
a319 1
		}
a391 22
void CIrcWnd::OnEnLinkIrcBox(NMHDR *pNMHDR, LRESULT *pResult)
{
	*pResult = 0;

	ENLINK		*pEnLink = reinterpret_cast<ENLINK *>(pNMHDR);
	TCITEM		tcitem;

	tcitem.mask = TCIF_PARAM;

	int			iCurSel = channelselect.GetCurSel();

	if (iCurSel != -1 && pEnLink && pEnLink->msg == WM_LBUTTONDOWN && channelselect.GetItem(iCurSel, &tcitem))
	{
		Channel		*pUpdate = (Channel*)tcitem.lParam;
		CString		strUrl;

		pUpdate->log.GetTextRange(pEnLink->chrg.cpMin, pEnLink->chrg.cpMax, strUrl);
		ShellExecute(NULL, NULL, strUrl, NULL, NULL, SW_SHOWDEFAULT);
		*pResult = 1;
	}
}

d398 1
a398 1
	nickList.DeleteAllItems();
d418 1
a418 1
	UpdateNickCount();
d467 1
a467 1
	RefreshNickList(m_pCurrentChannel->name);
a572 1
	ON_NOTIFY(EN_LINK, 125, OnEnLinkIrcBox)
a573 2
	ON_NOTIFY(NM_DBLCLK, IDC_NICKLIST, OnNMDblclkNickList)
	ON_NOTIFY(LVN_COLUMNCLICK, IDC_NICKLIST, OnColumnClickNick)
a574 1
	ON_NOTIFY(NM_RCLICK, IDC_NICKLIST, OnNMRclickNick)
a791 343
Nick* CIrcWnd::FindNickByName(CString channel, CString name)
{
	Channel		*pCurChannel = FindChannelByName(channel);
	Nick		*pCurNick;

	if (pCurChannel == NULL)
		return 0;

	for (POSITION pos = pCurChannel->nicks.GetHeadPosition(); pos != NULL;)
	{
		pCurNick = (Nick*)pCurChannel->nicks.GetNext(pos);
		if (pCurNick->nick == name)
			return pCurNick;
	}
	return 0;
}

Nick* CIrcWnd::NewNick(CString channel, CString nick)
{
	Channel		*pToAddChan = FindChannelByName(channel);
	TCHAR		cFCh;

	if (pToAddChan == NULL)
		return NULL;

	if (FindNickByName(channel, nick) != NULL)
		return NULL;

	Nick	   *pToAddNick = new Nick;

	if (nick.GetAt(0) == _T('~'))
		nick.SetAt(0, _T('!'));

	if (nick.GetAt(0) == _T('!'))
	{
		nick = nick.Mid(1);
		pToAddNick->owner = _T("!");
	}
	else
		pToAddNick->owner.Empty();

	if (nick.GetAt(0) == _T('&'))
		nick.SetAt(0, _T('*'));

	if (nick.GetAt(0) == _T('*'))
	{
		nick = nick.Mid(1);
		pToAddNick->protect = _T("*");
	}
	else
		pToAddNick->protect.Empty();

	if ((cFCh = nick.GetAt(0)) == _T('@@'))
	{
		pToAddNick->op = _T("@@");
		pToAddNick->hop.Empty();
		pToAddNick->voice.Empty();
		pToAddNick->uop.Empty();
		pToAddNick->nick = nick.Mid(1);
	}
	else if (cFCh == _T('%'))
	{
		pToAddNick->op.Empty();
		pToAddNick->hop = _T("%");
		pToAddNick->voice.Empty();
		pToAddNick->uop.Empty();
		pToAddNick->nick = nick.Mid(1);
	}
	else if (cFCh == _T('+'))
	{
		pToAddNick->op.Empty();
		pToAddNick->hop.Empty();
		pToAddNick->voice = _T("+");
		pToAddNick->uop.Empty();
		pToAddNick->nick = nick.Mid(1);
	}
	else if (cFCh == _T('-'))
	{
		pToAddNick->op.Empty();
		pToAddNick->hop.Empty();
		pToAddNick->voice.Empty();
		pToAddNick->uop = _T("-");
		pToAddNick->nick = nick.Mid(1);
	}
	else
	{
		pToAddNick->op.Empty();
		pToAddNick->hop.Empty();
		pToAddNick->voice.Empty();
		pToAddNick->nick = nick;
	}
	pToAddNick->nick.TrimLeft(_T("*@@%+-"));
	pToAddChan->nicks.AddTail(pToAddNick);
	if (pToAddChan == m_pCurrentChannel)
	{
		CString		strMode;
		int			iItems = nickList.InsertItem(LVIF_PARAM, nickList.GetItemCount(), 0, 0, 0, 0, (LPARAM)pToAddNick);

		nickList.SetItemText(iItems, 0, (LPCTSTR)pToAddNick->nick);
		strMode.Format(_T("%s%s%s%s%s%s"), pToAddNick->owner, pToAddNick->protect, pToAddNick->op, pToAddNick->hop, pToAddNick->voice, pToAddNick->uop);
		nickList.SetItemText(iItems, 1, (LPCTSTR)strMode);
		UpdateNickCount();
	}
	return pToAddNick;
}

void CIrcWnd::RefreshNickList(CString channel)
{
	nickList.DeleteAllItems();

	Channel		*pRefresh = FindChannelByName(channel);

	if (pRefresh == NULL)
		return;

	Nick		*pCurNick;
	int			iItems;
	CString		strMode;

	for (POSITION pos = pRefresh->nicks.GetHeadPosition(); pos != NULL;)
	{
        pCurNick = (Nick*)pRefresh->nicks.GetNext(pos);
		iItems = nickList.InsertItem(LVIF_PARAM, nickList.GetItemCount(), 0, 0, 0, 0, (LPARAM)pCurNick);
		nickList.SetItemText(iItems, 0, (LPCTSTR)pCurNick->nick);
		strMode.Format(_T("%s%s%s%s%s%s"), pCurNick->owner, pCurNick->protect, pCurNick->op, pCurNick->hop, pCurNick->voice, pCurNick->uop);
		nickList.SetItemText(iItems, 1, (LPCTSTR)strMode);
	}
	UpdateNickCount();
}

bool CIrcWnd::RemoveNick(CString channel, CString nick)
{
	Channel		*pUpdate = FindChannelByName(channel);

	if (pUpdate == NULL)
		return false;

	POSITION		pos1, pos2;
	Nick			*pCurNick;
	LVFINDINFO		lvdfind;
	sint32			iResult;

	for (pos1 = pUpdate->nicks.GetHeadPosition(); (pos2 = pos1) != NULL;)
	{
		pCurNick = (Nick*)pUpdate->nicks.GetNext(pos1);
		if (pCurNick->nick == nick)
		{
			if (pUpdate == m_pCurrentChannel)
			{
				lvdfind.flags = LVFI_PARAM;
				lvdfind.lParam = (LPARAM)pCurNick;
				iResult = nickList.FindItem(&lvdfind);
				if (iResult != -1)
				{
					nickList.DeleteItem(iResult);
					UpdateNickCount();
				}
			}
			pUpdate->nicks.RemoveAt(pos2);
			delete pCurNick;
			return true;
		}
	}
	return false;
}

void CIrcWnd::DeleteAllNick(CString channel)
{
	Channel		*pCurChannel = FindChannelByName(channel);

	if (pCurChannel == NULL)
		return;

	POSITION	pos1, pos2;
	Nick		*pCurNick;

	for (pos1 = pCurChannel->nicks.GetHeadPosition(); (pos2 = pos1) != NULL;)
	{
		pCurNick = (Nick*)pCurChannel->nicks.GetNext(pos1);
		pCurChannel->nicks.RemoveAt(pos2);
		delete pCurNick;
	}
}

void CIrcWnd::DeleteNickInAll(CString nick, CString message)
{
	Channel		*pCurChannel;
	CString		strMessage = message, strLine;

	strMessage.Trim();
	for (POSITION pos = channelPtrList.GetHeadPosition(); pos != NULL;)
	{
		pCurChannel = (Channel*)channelPtrList.GetNext(pos);
		if (RemoveNick(pCurChannel->name, nick))
		{
			if (!g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
			{
				strLine.Format(GetResString(IDS_IRC_HASQUIT), nick, strMessage);
				if (strMessage.IsEmpty())
					strLine.Truncate(strLine.GetLength() - 3);
				else
					strLine.Insert(strLine.GetLength() - 1, _T('\x0F'));
				AddMessage(pCurChannel->name, _T(""), RGB(51, 102, 255), strLine);
			}
		}
	}
}

bool CIrcWnd::ChangeNick(CString channel, CString oldnick, CString newnick)
{
	Channel	*pUpdate = FindChannelByName(channel);

	if (pUpdate == NULL)
		return false;

	Nick		*pCurNick;
	LVFINDINFO	lvfind;
	sint32		iResult;

	for (POSITION pos = pUpdate->nicks.GetHeadPosition(); pos != NULL;)
	{
		pCurNick = (Nick*)pUpdate->nicks.GetNext(pos);
		if (pCurNick->nick == oldnick)
		{
			if (pUpdate == m_pCurrentChannel)
			{
				lvfind.flags = LVFI_PARAM;
				lvfind.lParam = (LPARAM)pCurNick;
				iResult = nickList.FindItem(&lvfind);
				if (iResult != -1)
					nickList.SetItemText(iResult, 0, (LPCTSTR)newnick);
			}
			pCurNick->nick = newnick;
			return true;
		}
	}
	return false;
}

bool CIrcWnd::ChangeMode(CString channel, CString nick, CString mode)
{
	Channel		*pUpdate = FindChannelByName(channel);

	if (pUpdate == NULL)
		return false;

	Nick			*pCurNick;
	LVFINDINFO		lvfind;
	sint32			iResult;
	CString			strMode;

	for (POSITION pos = pUpdate->nicks.GetHeadPosition(); pos != NULL;)
	{
		pCurNick = (Nick*)pUpdate->nicks.GetNext(pos);
		if (pCurNick->nick == nick)
		{
			if (mode == _T("+a"))
				pCurNick->protect = _T("*");
			else if (mode == _T("-a"))
				pCurNick->protect.Empty();
			else if (mode == _T("+h"))
				pCurNick->hop = _T("%");
			else if (mode == _T("-h"))
				pCurNick->hop.Empty();
			else if (mode == _T("+o"))
				pCurNick->op = _T("@@");
			else if (mode == _T("-o"))
				pCurNick->op.Empty();
			else if (mode == _T("+q"))
				pCurNick->owner = _T("!");
			else if (mode == _T("-q"))
				pCurNick->owner.Empty();
			else if (mode == _T("+u"))
				pCurNick->uop = _T("-");
			else if (mode == _T("-u"))
				pCurNick->uop.Empty();
			else if (mode == _T("+v"))
				pCurNick->voice = _T("+");
			else if (mode == _T("-v"))
				pCurNick->voice.Empty();
			if (pUpdate == m_pCurrentChannel)
			{
				lvfind.flags = LVFI_PARAM;
				lvfind.lParam = (LPARAM)pCurNick;
				iResult = nickList.FindItem(&lvfind);
				if (iResult != -1)
				{
					strMode.Format(_T("%s%s%s%s%s%s"), pCurNick->owner, pCurNick->protect, pCurNick->op, pCurNick->hop, pCurNick->voice, pCurNick->uop);
					nickList.SetItemText(iResult, 1, (LPCTSTR)strMode);
				}
			}
		}
	}
	return true;
}

void CIrcWnd::ParseChangeMode(CString channel, CString changer, CString commands, CString names)
{
	try
	{
		if (commands.GetLength() == 2)
		{
			if (ChangeMode(channel, names, commands))
				if (!g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
					AddMessage(channel, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_SETSMODE), changer, commands, names);
			return;
		}
		else
		{
			CString		strDir;

			strDir = commands[0];
			if (strDir == _T("+") || strDir == _T("-"))
			{
				int		iCurMode = 1;
				int		iCurName = 0;
				int		iCurNameBack = names.Find(_T(' '), iCurName);

				while (iCurMode < commands.GetLength())
				{
					CString		strTest;

					if(iCurNameBack > iCurName)
					{
						strTest = names.Mid(iCurName, iCurNameBack - iCurName);
						iCurName = iCurNameBack + 1;
					}
					if (ChangeMode(channel, strTest, strDir + commands[iCurMode]) && !g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
						AddMessage(channel, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_SETSMODE), changer, strDir + commands[iCurMode] , strTest);
					iCurNameBack = names.Find(_T(' '), iCurName + 1);
					if (iCurNameBack == -1)
						iCurNameBack = names.GetLength();
					iCurMode++;
				}
			}
		}
	}
	catch (...)
	{
		AddMessage(channel, _T(""), RGB(252, 127, 0), GetResString(IDS_IRC_NOTSUPPORTED));
	}
}

d821 1
a821 1
		if (ChangeNick(pCurChannel->name, strOldNick, strNewNick) && !g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
a825 191
int CIrcWnd::SortProcNick(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort)
{
	Nick	*pItem1 = (Nick*)lParam1;
	Nick	*pItem2 = (Nick*)lParam2;

	switch (lParamSort)
	{
	case IRC1COL_NICK:
		return pItem1->nick.CompareNoCase(pItem2->nick);
	case IRC1COL_NICK + MLC_SORTDESC:
		return pItem2->nick.CompareNoCase(pItem1->nick);
	case IRC1COL_STATUS:
		if (pItem1->owner == _T("!"))
		{
			if (pItem2->owner != _T("!"))
				return -1;
		}
		else if (pItem2->owner == _T("!"))
		{
			return 1;
		}
		if (pItem1->protect == _T("*"))
		{
			if (pItem2->protect != _T("*"))
				return -1;
		}
		else if (pItem2->protect == _T("*"))
		{
			return 1;
		}
		if (pItem1->op == _T("@@"))
		{
			if (pItem2->op != _T("@@"))
				return -1;
		}
		else if (pItem2->op == _T("@@"))
		{
			return 1;
		}
		if (pItem1->hop == _T("%"))
		{
			if (pItem2->hop != _T("%"))
				return -1;
		}
		else if (pItem2->hop == _T("%"))
		{
			return 1;
		}
		if (pItem1->voice == _T("+"))
		{
			if (pItem2->voice != _T("+"))
				return -1;
		}
		else if (pItem2->voice == _T("+"))
		{
			return 1;
		}
		if (pItem1->uop == _T("-"))
		{
			if (pItem2->uop != _T("-"))
				return -1;
		}
		else if (pItem2->uop == _T("-"))
		{
			return 1;
		}
		return pItem1->nick.CompareNoCase(pItem2->nick);

	case IRC1COL_STATUS + MLC_SORTDESC:
		if (pItem2->owner == _T("!"))
		{
			if (pItem1->owner != _T("!"))
				return -1;
		}
		else if (pItem1->owner == _T("!"))
		{
			return 1;
		}
		if (pItem2->protect == _T("*"))
		{
			if (pItem1->protect != _T("*"))
				return -1;
		}
		else if (pItem1->protect == _T("*"))
		{
			return 1;
		}
		if (pItem2->op == _T("@@"))
		{
			if (pItem1->op != _T("@@"))
				return -1;
		}
		else if (pItem1->op == _T("@@"))
		{
			return 1;
		}
		if (pItem2->hop == _T("%"))
		{
			if (pItem1->hop != _T("%"))
				return -1;
		}
		else if (pItem1->hop == _T("%"))
		{
			return 1;
		}
		if (pItem2->voice == _T("+"))
		{
			if (pItem1->voice != _T("+"))
				return -1;
		}
		else if (pItem1->voice == _T("+"))
		{
			return 1;
		}
		if (pItem2->uop == _T("-"))
		{
			if (pItem1->uop != _T("-"))
				return -1;
		}
		else if (pItem1->uop == _T("-"))
		{
			return 1;
		}
		return pItem2->nick.CompareNoCase(pItem1->nick);
	default:
		return 0;
	}
}

void CIrcWnd::OnColumnClickNick(NMHDR* pNMHDR, LRESULT* pResult)
{
	NM_LISTVIEW		*pNMListView = reinterpret_cast<NM_LISTVIEW*>(pNMHDR);
	int				iSubItem = pNMListView->iSubItem;
	bool			bSortOrder = m_bSortAscendingNickList[iSubItem];

// Reverse sorting direction for the same column and keep the same if column was changed
	if ((nickList.GetSortParam() & MLC_COLUMNMASK) == static_cast<uint32>(iSubItem))
		m_bSortAscendingNickList[iSubItem] = bSortOrder = !bSortOrder;

	nickList.SetSortArrow(iSubItem, bSortOrder);
	nickList.SortItems(SortProcNick, iSubItem + ((bSortOrder) ? MLC_SORTASC : MLC_SORTDESC));
	*pResult = 0;
}

void CIrcWnd::OnNMRclickNick(NMHDR *pNMHDR, LRESULT *pResult)
{
	UINT		dwFlags = MF_STRING | ((nickList.GetSelectionMark() != -1) ? MF_ENABLED : MF_GRAYED);
	CTitleMenu	menuNick;
	POINT		point;
	NOPRM(pNMHDR);

	::GetCursorPos(&point);

	menuNick.CreatePopupMenu();
	menuNick.AddMenuTitle(GetResString(IDS_IRC_NICK));
	menuNick.AppendMenu(dwFlags, Irc_Priv, GetResString(IDS_IRC_PRIVMESSAGE));
	menuNick.AppendMenu(dwFlags, Irc_WhoIs, _T("WhoIs"));
	menuNick.AppendMenu(dwFlags, Irc_Slap, GetResString(IDS_IRC_SLAP));
	menuNick.AppendMenu(dwFlags, Irc_Owner, _T("Owner"));
	menuNick.AppendMenu(dwFlags, Irc_DeOwner, _T("DeOwner"));
	menuNick.AppendMenu(dwFlags, Irc_Op, GetResString(IDS_IRC_OP));
	menuNick.AppendMenu(dwFlags, Irc_DeOp, GetResString(IDS_IRC_DEOP));
	menuNick.AppendMenu(dwFlags, Irc_HalfOp, GetResString(IDS_IRC_HALFOP));
	menuNick.AppendMenu(dwFlags, Irc_DeHalfOp, GetResString(IDS_IRC_DEHALFOP));
	menuNick.AppendMenu(dwFlags, Irc_Voice, GetResString(IDS_IRC_VOICE));
	menuNick.AppendMenu(dwFlags, Irc_DeVoice, GetResString(IDS_IRC_DEVOICE));
	menuNick.AppendMenu(dwFlags, Irc_Protect, _T("Protect"));
	menuNick.AppendMenu(dwFlags, Irc_DeProtect, _T("DeProtect"));
	menuNick.AppendMenu(dwFlags, Irc_Kick, GetResString(IDS_IRC_KICK));
	menuNick.SetDefaultItem(Irc_Priv);
	menuNick.TrackPopupMenuEx(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this, NULL);

//	Menu objects are destroyed in their destructor
	*pResult = 0;
}

void CIrcWnd::OnNMDblclkNickList(NMHDR *pNMHDR, LRESULT *pResult)
{
	int		iNickItem = nickList.GetSelectionMark();
	NOPRM(pNMHDR);

	if (iNickItem != -1)
	{
		Nick	*pNick = (Nick*)nickList.GetItemData(iNickItem);

		if (pNick != NULL)
			AddMessage(pNick->nick, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_PRIVATECHANSTART));
	}
	*pResult = 0;
}

d1054 1
a1054 1
		pCurNick = FindNickByName(pCurChannel->name, source);
d1545 1
a1545 1
		nickList.DeleteAllItems();
d1563 1
a1563 1
	DeleteAllNick(pToDel->name);
d1576 1
a1576 1
		DeleteAllNick(pChannel->name);
@


1.135
log
@changed the handlig of embedded GUI list header
@
text
@a177 1
	nickList.InitHeader();
a180 1
	serverChannelList.InitHeader();
@


1.134
log
@Faster string processing; Reduced H-file dependency; Removed useless pragma pack 1.
@
text
@d178 1
d182 1
@


1.133
log
@Suppressed level 4 warnings; Formatting.
@
text
@d2389 1
a2389 1
void CIrcWnd::SendString(CString send)
d2392 1
a2392 1
		m_pIrcMain->SendString(send);
@


1.132
log
@Remove unused but active code that can be used to retrieve IP and port of users through IRC {Bruno}
@
text
@d662 1
a662 1
	bool		bWasChanged = (channelselect.GetItemState(iCurSel, TCIS_HIGHLIGHTED) & TCIS_HIGHLIGHTED);
d722 1
a722 1
	bool				bResult = CDialog::OnNotify(wParam, lParam, pResult);
d816 1
a816 1
 }
d2109 1
a2109 1
	m_pCurrentChannel->history_pos = m_pCurrentChannel->history.GetCount();
@


1.131
log
@Fix a bug enlightened by revision 1.130 from Aw3.
@
text
@a528 29
		case Irc_AddFriend:
		{
			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("PRIVMSG %s :\001RQSFRIEND |%i|\001"), pNick->nick, m_pIrcMain->SetVerify());
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
		case Irc_SendLink:
		{
			if (!GetSendFileString())
				return true;

			pNick = (Nick*)nickList.GetItemData(nickItem);
			tcitem.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &tcitem);
			pChannel = (Channel*)tcitem.lParam;
			if (pNick != NULL && pChannel != NULL)
			{
				strSend.Format(_T("PRIVMSG %s :\001SENDLINK|%s|%s\001"), pNick->nick, HashToString(g_App.m_pPrefs->GetUserHash()), GetSendFileString() );
				m_pIrcMain->SendString(strSend);
			}
			return true;
		}
a1575 3
//	menuNick.AppendMenu(dwFlags,Irc_AddFriend,GetResString(IDS_IRC_ADDTOFRIENDLIST));
//	if( !GetSendFileString().IsEmpty() )
//	menuNick.AppendMenu(dwFlags,Irc_SendLink, (CString)GetResString(IDS_IRC_SENDLINK) + GetSendFileString() );
@


1.130
log
@Fixed very weird typo in ChangeMode() which led to I don't know how working code -- problematic code is handling IRC "MODE" command;
Suppressed level 4 warnings; Removed unused functionality.
@
text
@d1281 1
a1281 1
	Channel		*pUpdate = FindChannelByName(channel);
d1286 3
a1288 3
	Nick			*pCurNick;
	LVFINDINFO		lvfind;
	sint32			iResult;
d1295 1
a1295 1
			if ((pUpdate = m_pCurrentChannel) != NULL)
@


1.129
log
@fix time disappearing at midnight
@
text
@d150 1
a150 1
	for (unsigned ui = 0; ui < ELEMENT_COUNT(s_auResTbl); ui++)
d176 1
a176 1
	for (unsigned ui = 0; ui < ELEMENT_COUNT(s_auColHdr); ui++)
d179 1
a179 1
	for (unsigned ui = 0; ui < ELEMENT_COUNT(s_auColHdr2); ui++)
d321 1
d669 4
a674 2
	TCITEM		tcitem;

d677 1
a677 3
	int		iCurSel = channelselect.GetCurSel();

	if (iCurSel == -1)
d714 1
a714 1
	SetActivity(m_pCurrentChannel->name, false);
d1016 1
a1016 1
	if ((serverChannelList.GetSortParam() & MLC_COLUMNMASK) == iSubItem)
d1042 1
d1060 1
d1351 1
a1351 1
			if (pUpdate = m_pCurrentChannel)
d1584 1
a1584 1
	if ((nickList.GetSortParam() & MLC_COLUMNMASK) == iSubItem)
d1597 1
d1630 1
d1797 1
a1797 1
		SetActivity(pUpdateChannel->name, true);
d1990 1
a1990 1
void CIrcWnd::SetActivity(CString channel, bool flag)
d2078 1
d2416 1
@


1.128
log
@fix a crash while closing IRC channels on shutdown {A A in dump 0123}
@
text
@d1695 1
a1695 1
		strTemp.Format(_T("%s: "), currentTime.Format(VAR_TIMEVALUEONLY));
@


1.127
log
@fix for socket connection request with every IRC connect button click {Vladimir (SV)}
@
text
@a2387 1
		delete pChannel->log;
@


1.126
log
@Reduced H-file dependency.
@
text
@d50 1
a50 1
	m_bConnected = false;
d59 1
a59 1
	if (m_bConnected)
d98 1
a98 1
	SetDlgItemText(IDC_BN_IRCCONNECT, GetResString((m_bConnected) ? IDS_IRC_DISCONNECT : IDS_IRC_CONNECT));
a182 2
	m_bConnected = false;
	m_bLoggedIn = false;
d604 1
a604 1
	if (!m_bConnected)
d628 1
a628 1
		if (pPartChannel->type == 4 && m_bConnected)
d1048 1
a1048 1
	menuChanL.AppendMenu(MF_STRING | ((this->m_bConnected) ? MF_ENABLED : MF_GRAYED), Irc_Refresh, GetResString(IDS_CMT_REFRESH));
d1795 1
a1795 1
void CIrcWnd::SetConnectStatus(bool flag)
d1797 1
a1797 1
	if (flag)
d1799 14
a1812 11
		SetDlgItemText(IDC_BN_IRCCONNECT, GetResString(IDS_IRC_DISCONNECT));
		AddMessage(_T(""), _T(""), CLR_DEFAULT, GetResString(IDS_CONNECTED));
		m_bConnected = true;
	}
	else
	{
		SetDlgItemText(IDC_BN_IRCCONNECT, GetResString(IDS_IRC_CONNECT));
		AddMessage(_T(""), _T(""), CLR_DEFAULT, GetResString(IDS_DISCONNECTED));
		m_bConnected = false;
		m_bLoggedIn = false;
		ResetServerChannelList();
d1814 1
a1814 1
		Channel		*pToDel = (Channel*)channelPtrList.GetTail();
d1816 8
a1823 4
		while (channelPtrList.GetCount() > 2)
		{
			pToDel = (Channel*)channelPtrList.GetTail();
			RemoveChannel(pToDel->name);
a1824 2
		GetDlgItem(IDC_CLOSECHAT)->EnableWindow(false);
		GetDlgItem(IDC_CHATSEND)->EnableWindow(false);
d1826 1
d2121 1
a2121 1
	if (!this->m_bConnected || m_pCurrentChannel == NULL || m_pCurrentChannel->log.m_hWnd == NULL)
d2395 1
a2395 1
	if (!this->m_bConnected)
d2417 1
a2417 1
	if (this->m_bConnected)
@


1.125
log
@Show IRC Nickname list context menu even when no selection (like in all other places);
Removed unrequired code removing '&'.
@
text
@d24 1
@


1.124
log
@UNICODE preparation (first shot)
@
text
@d544 2
a545 2
		   	if (!GetSendFileString())
				   return true;
a1041 1
	CString		strRefresh = GetResString(IDS_CMT_REFRESH);
a1044 1
	strRefresh.Remove(_T('&'));
d1049 1
a1049 1
	menuChanL.AppendMenu(MF_STRING | ((this->m_bConnected) ? MF_ENABLED : MF_GRAYED), Irc_Refresh, strRefresh);
d1592 3
a1594 4
	if (nickList.GetSelectionMark() != ( -1))
	{
		CTitleMenu	menuNick;
		POINT		point;
d1596 1
a1596 1
		::GetCursorPos(&point);
d1598 21
a1618 21
		menuNick.CreatePopupMenu();
		menuNick.AddMenuTitle(GetResString(IDS_IRC_NICK));
		menuNick.AppendMenu(MF_STRING, Irc_Priv, GetResString(IDS_IRC_PRIVMESSAGE));
		menuNick.AppendMenu(MF_STRING, Irc_WhoIs, _T("WhoIs"));
	//	menuNick.AppendMenu(MF_STRING,Irc_AddFriend,GetResString(IDS_IRC_ADDTOFRIENDLIST));
	//	if( !GetSendFileString().IsEmpty() )
	//	menuNick.AppendMenu(MF_STRING,Irc_SendLink, (CString)GetResString(IDS_IRC_SENDLINK) + GetSendFileString() );
		menuNick.AppendMenu(MF_STRING, Irc_Slap, GetResString(IDS_IRC_SLAP));
		menuNick.AppendMenu(MF_STRING, Irc_Owner, _T("Owner"));
		menuNick.AppendMenu(MF_STRING, Irc_DeOwner, _T("DeOwner"));
		menuNick.AppendMenu(MF_STRING, Irc_Op, GetResString(IDS_IRC_OP));
		menuNick.AppendMenu(MF_STRING, Irc_DeOp, GetResString(IDS_IRC_DEOP));
		menuNick.AppendMenu(MF_STRING, Irc_HalfOp, GetResString(IDS_IRC_HALFOP));
		menuNick.AppendMenu(MF_STRING, Irc_DeHalfOp, GetResString(IDS_IRC_DEHALFOP));
		menuNick.AppendMenu(MF_STRING, Irc_Voice, GetResString(IDS_IRC_VOICE));
		menuNick.AppendMenu(MF_STRING, Irc_DeVoice, GetResString(IDS_IRC_DEVOICE));
		menuNick.AppendMenu(MF_STRING, Irc_Protect, _T("Protect"));
		menuNick.AppendMenu(MF_STRING, Irc_DeProtect, _T("DeProtect"));
		menuNick.AppendMenu(MF_STRING, Irc_Kick, GetResString(IDS_IRC_KICK));
		menuNick.SetDefaultItem(Irc_Priv);
		menuNick.TrackPopupMenuEx(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this, NULL);
a1620 1
	}
d2055 1
a2055 1
    CRect		rColorButton;
d2067 1
a2067 1
    CWnd			*pParent = GetParent();
d2069 1
a2069 1
    if (pParent != NULL)
d2071 3
a2073 3
        pParent->SendMessage(CPN_CLOSEUP, lParam, (WPARAM)GetDlgCtrlID());
        pParent->SendMessage(CPN_SELENDOK, lParam, (WPARAM)GetDlgCtrlID());
    }
d2096 1
a2096 1
    return true;
d2103 1
a2103 1
    if (pParent != NULL)
d2105 3
a2107 3
        pParent->SendMessage(CPN_CLOSEUP, wParam, (WPARAM)GetDlgCtrlID());
        pParent->SendMessage(CPN_SELENDCANCEL, wParam, (WPARAM)GetDlgCtrlID());
    }
d2109 1
a2109 1
    return true;
@


1.123
log
@Clean-up.
@
text
@d84 1
a84 1
	hdi.pszText = (LPSTR)strRes.GetString();
d116 1
a116 1
				tcitem.pszText = (LPSTR)pCurChannel->title.GetString();
d123 1
a123 1
				tcitem.pszText = (LPSTR)pCurChannel->title.GetString();
d142 1
a142 1
	hdi.pszText = (LPSTR)strRes.GetString();
d152 1
a152 1
		hdi.pszText = (LPSTR)strRes.GetString();
d1414 1
a1414 1
void CIrcWnd::ChangeAllNick(CString oldnick, CString newnick)
d1416 1
a1416 1
	Channel		*pCurChannel = FindChannelByName(oldnick);
d1420 1
a1420 1
		pCurChannel->name = newnick;
d1422 2
a1423 2
		TCITEM		tcitem;
		int			i;
d1436 2
a1437 2
		tcitem.pszText = newnick.GetBuffer();
		tcitem.cchTextMax = newnick.GetLength() + 1;
d1443 2
a1444 2
		if (ChangeNick(pCurChannel->name, oldnick, newnick) && !g_App.m_pPrefs->GetIrcIgnoreInfoMessage())
			AddMessage(pCurChannel->name, _T(""), RGB(0, 147, 0), GetResString(IDS_IRC_NOWKNOWNAS), oldnick, newnick);
@


1.122
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@a1447 8
/*
void CIrcWnd::SetNick( CString in_nick )
{
	g_eMuleApp.m_pGlobPrefs->SetIRCNick( in_nick.GetBuffer() );
	//Need to also update the preference window for this to work right..
}
*/

@


1.121
log
@renamed 3 variables
@
text
@d225 2
a226 2
	if (g_App.g_pPrefs->DoUseSort())
		SortInit(g_App.g_pPrefs->GetIrcSortCol());
d229 1
a229 1
		int		iSortCode = g_App.g_pPrefs->GetColumnSortItem(CPreferences::TABLE_IRC);
d231 1
a231 1
		iSortCode |= g_App.g_pPrefs->GetColumnSortAscending(CPreferences::TABLE_IRC) ? MLC_SORTASC : MLC_SORTDESC;
d553 1
a553 1
				strSend.Format(_T("PRIVMSG %s :\001SENDLINK|%s|%s\001"), pNick->nick, HashToString(g_App.g_pPrefs->GetUserHash()), GetSendFileString() );
d890 1
a890 1
	if ((g_App.g_pPrefs->GetIRCChanNameFilter() || g_App.g_pPrefs->GetIRCChannelUserFilter()) && g_App.g_pPrefs->GetIRCUseChanFilter())
d892 1
a892 1
		if (iUserTest < g_App.g_pPrefs->GetIRCChannelUserFilter())
d894 1
a894 1
		if (dtemp.MakeLower().Find(g_App.g_pPrefs->GetIRCChanNameFilter().MakeLower()) == -1 && ntemp.MakeLower().Find(g_App.g_pPrefs->GetIRCChanNameFilter().MakeLower()) == -1)
d1021 2
a1022 2
	g_App.g_pPrefs->SetColumnSortItem(CPreferences::TABLE_IRC, iSubItem);
	g_App.g_pPrefs->SetColumnSortAscending(CPreferences::TABLE_IRC, bSortOrder);
d1266 1
a1266 1
			if (!g_App.g_pPrefs->GetIrcIgnoreInfoMessage())
d1374 1
a1374 1
				if (!g_App.g_pPrefs->GetIrcIgnoreInfoMessage())
d1398 1
a1398 1
					if (ChangeMode(channel, strTest, strDir + commands[iCurMode]) && !g_App.g_pPrefs->GetIrcIgnoreInfoMessage())
d1443 1
a1443 1
		if (ChangeNick(pCurChannel->name, oldnick, newnick) && !g_App.g_pPrefs->GetIrcIgnoreInfoMessage())
d1704 1
a1704 1
	if (g_App.g_pPrefs->GetIRCAddTimestamp())
d2139 1
a2139 1
	if (m_pCurrentChannel->history.GetCount() == g_App.g_pPrefs->GetMaxChatHistoryLines())
@


1.120
log
@Improved string processing.
@
text
@d225 2
a226 2
	if (g_eMuleApp.m_pGlobPrefs->DoUseSort())
		SortInit(g_eMuleApp.m_pGlobPrefs->GetIrcSortCol());
d229 1
a229 1
		int		iSortCode = g_eMuleApp.m_pGlobPrefs->GetColumnSortItem(CPreferences::TABLE_IRC);
d231 1
a231 1
		iSortCode |= g_eMuleApp.m_pGlobPrefs->GetColumnSortAscending(CPreferences::TABLE_IRC) ? MLC_SORTASC : MLC_SORTDESC;
d238 1
a238 1
	m_ctrlTextBoldBtn.SetThemeHelper(&g_eMuleApp.m_pdlgEmule->m_themeHelper);
d240 1
a240 1
	m_ctrlTextUnderlineBtn.SetThemeHelper(&g_eMuleApp.m_pdlgEmule->m_themeHelper);
d242 1
a242 1
	m_ctrlTextColorBtn.SetThemeHelper(&g_eMuleApp.m_pdlgEmule->m_themeHelper);
d264 1
a264 1
			pChannel->log.SetFont(&g_eMuleApp.m_pdlgEmule->m_fontDefault);
d266 2
a267 2
	titleWindow.SetFont(&g_eMuleApp.m_pdlgEmule->m_fontDefault);
	inputWindow.SetFont(&g_eMuleApp.m_pdlgEmule->m_fontDefault);
d553 1
a553 1
				strSend.Format(_T("PRIVMSG %s :\001SENDLINK|%s|%s\001"), pNick->nick, HashToString(g_eMuleApp.m_pGlobPrefs->GetUserHash()), GetSendFileString() );
d890 1
a890 1
	if ((g_eMuleApp.m_pGlobPrefs->GetIRCChanNameFilter() || g_eMuleApp.m_pGlobPrefs->GetIRCChannelUserFilter()) && g_eMuleApp.m_pGlobPrefs->GetIRCUseChanFilter())
d892 1
a892 1
		if (iUserTest < g_eMuleApp.m_pGlobPrefs->GetIRCChannelUserFilter())
d894 1
a894 1
		if (dtemp.MakeLower().Find(g_eMuleApp.m_pGlobPrefs->GetIRCChanNameFilter().MakeLower()) == -1 && ntemp.MakeLower().Find(g_eMuleApp.m_pGlobPrefs->GetIRCChanNameFilter().MakeLower()) == -1)
d1021 2
a1022 2
	g_eMuleApp.m_pGlobPrefs->SetColumnSortItem(CPreferences::TABLE_IRC, iSubItem);
	g_eMuleApp.m_pGlobPrefs->SetColumnSortAscending(CPreferences::TABLE_IRC, bSortOrder);
d1266 1
a1266 1
			if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
d1374 1
a1374 1
				if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
d1398 1
a1398 1
					if (ChangeMode(channel, strTest, strDir + commands[iCurMode]) && !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
d1443 1
a1443 1
		if (ChangeNick(pCurChannel->name, oldnick, newnick) && !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
d1704 1
a1704 1
	if (g_eMuleApp.m_pGlobPrefs->GetIRCAddTimestamp())
d2139 1
a2139 1
	if (m_pCurrentChannel->history.GetCount() == g_eMuleApp.m_pGlobPrefs->GetMaxChatHistoryLines())
d2307 1
a2307 1
		pToAdd->log.SetFont(&g_eMuleApp.m_pdlgEmule->m_fontDefault);
@


1.119
log
@Minor correction.
@
text
@d1091 1
d1101 1
a1101 1
	if (nick.Left(1) == _T("~"))
d1104 1
a1104 1
	if (nick.Left(1) == _T("!"))
d1112 1
a1112 1
	if (nick.Left(1) == _T("&"))
d1115 1
a1115 1
	if (nick.Left(1) == _T("*"))
d1123 1
a1123 1
	if (nick.Left(1) == _T("@@"))
d1131 1
a1131 1
	else if (nick.Left(1) == _T("%"))
d1139 1
a1139 1
	else if (nick.Left(1) == _T("+"))
d1147 1
a1147 1
	else if (nick.Left(1) == _T("-"))
@


1.118
log
@Rollbacked memset changes.
@
text
@d1100 3
d1111 3
@


1.117
log
@Use of CPU optimised memset2 function
Code refactoring
@
text
@d52 2
a53 2
	memset2(&m_bSortAscendingNickList, true, sizeof(m_bSortAscendingNickList));
	memset2(&m_bSortAscendingChanList, true, sizeof(m_bSortAscendingChanList));
@


1.116
log
@Removed unused closable tab stuff to reduce used memory and GDI resources.
@
text
@d31 2
a32 1
static const COLORREF _acrColorPal[16] = {
d52 2
a53 2
	memset(&m_bSortAscendingNickList, true, sizeof(m_bSortAscendingNickList));
	memset(&m_bSortAscendingChanList, true, sizeof(m_bSortAscendingChanList));
d161 2
a162 2
		{ LVCFMT_LEFT, 90 },	//IRC1COL_NICK
		{ LVCFMT_LEFT, 70 }		//IRC1COL_STATUS
d166 3
a168 3
		{ LVCFMT_LEFT, 203 },	//IRC2COL_NAME
		{ LVCFMT_RIGHT, 50 },	//IRC2COL_USERS
		{ LVCFMT_LEFT, 350 }	//IRC2COL_DESCRIPTION
d752 1
a752 1
	MSGFILTER			*lpMsgFilter = (MSGFILTER *)lParam; 
d772 1
a772 1
  		
d783 1
a783 1
	
d816 1
a816 1
				while ((iLinkEnd > iIndex + iLen) && 
d1045 1
a1045 1
	
d1098 2
a1099 2
	Nick		*pToAddNick = new Nick;
	
d1731 1
a1731 1
						
d1734 1
a1734 1
						
d1847 1
a1847 1
		}	
d1851 1
a1851 1
	
d1924 1
a1924 1
						
d1927 1
a1927 1
						
d2008 1
a2008 1
	if(channelselect.GetCurSel() != i)
d2061 1
a2061 1
    
d2063 1
a2063 1
	
d2074 1
a2074 1
    if (pParent != NULL) 
d2107 2
a2108 2
	
    if (pParent != NULL) 
d2120 1
a2120 1
	
d2159 1
a2159 1
		
d2206 1
a2206 1
				strSend = strTemp;			
d2340 1
a2340 1
	
d2347 1
a2347 1
	
d2432 1
a2432 1
	
@


1.115
log
@Removed double strings.
@
text
@a157 6
	static const uint16 s_auIconResID[] =
	{
		IDI_CHAT,
		IDI_MESSAGE,
		IDI_MPENDING
	};
a171 7
	m_imageList.Create(16, 16, ILC_COLOR32, ELEMENT_COUNT(s_auIconResID), 0);
	m_imageList.SetBkColor(RGB(255, 0, 255));
	FillImgLstWith16x16Icons(&m_imageList, s_auIconResID, ELEMENT_COUNT(s_auIconResID));

	CImageList		imageList;
	CBitmap			Bitmap, *pOldBitmap;
	CDC				*pCtrlDC = GetDC(), TempDC;
a173 14
	TempDC.CreateCompatibleDC(pCtrlDC);
	Bitmap.CreateCompatibleBitmap(pCtrlDC, 16 * 3, 16);
	pOldBitmap = TempDC.SelectObject(&Bitmap);
	m_imageList.Draw(&TempDC, 0, CPoint(0, 0), ILD_NORMAL);
	m_imageList.Draw(&TempDC, 1, CPoint(16, 0), ILD_NORMAL);
	m_imageList.Draw(&TempDC, 2, CPoint(32, 0), ILD_NORMAL);
	TempDC.SelectObject(pOldBitmap);
	imageList.Create(16, 16, ILC_COLOR32 | ILC_MASK, 0, 10);
	imageList.Add(&Bitmap, RGB(255, 0, 255));
	channelselect.SetImageList(&imageList);
	imageList.Detach();
	Bitmap.DeleteObject();
	ReleaseDC(pCtrlDC);

a249 1
	m_imageList.DeleteImageList();
a2006 12
	/*if (flag)
	{
		item.mask = TCIF_IMAGE;
		item.iImage = 2;
		channelselect.SetItem(i, &item);
	}
	else
	{
		item.mask = TCIF_IMAGE;
		item.iImage = 1;
		channelselect.SetItem(i, &item);
	}*/
d2311 1
a2311 2
	tcitem.cchTextMax = name.GetLength() + 1;
	tcitem.iImage = 1;
@


1.114
log
@Faster image lists icon loading; reduced memory usage.
@
text
@d98 1
a98 1
	SetDlgItemText(IDC_CLOSECHAT, GetResString(IDS_FD_CLOSE));
@


1.113
log
@Clear channel list on disconnection.
Disable unavailable channel list context menu options.
Show default context menu items.
@
text
@d178 1
a178 1
	m_imageList.Create(16, 16, ILC_COLOR32, 0, 10);
@


1.112
log
@Minor condition improvement.
@
text
@d1076 1
a1076 1
	menuChanL.AppendMenu(MF_STRING, Irc_Join, GetResString(IDS_IRC_JOIN));
d1078 2
a1079 1
	menuChanL.AppendMenu(MF_STRING, Irc_Refresh, strRefresh);	
d1648 1
d1842 1
@


1.111
log
@Fix for special UNICODE characters being removed.
@
text
@d992 1
a992 1
				if (cCurChar > 0 && cCurChar < 0x20)
d1811 1
a1811 1
				if (cCurChar > 0 && cCurChar < 0x20)
d1998 1
a1998 1
				if (cCurChar > 0 && cCurChar < 0x20)
@


1.110
log
@Color selection fix for 0 value + Minor changes.
@
text
@d992 1
a992 1
				if (cCurChar < 0x20)
d1811 1
a1811 1
				if (cCurChar < 0x20)
d1998 1
a1998 1
				if (cCurChar < 0x20)
@


1.109
log
@Added an option in IRC to send Bold, Underline & Colored messages.
Small optimization in IRC and some minor changes/fixes.
@
text
@d933 1
d937 2
a938 1
		switch (pToAdd->desc.GetAt(iIndex))
d942 1
a942 1
				pToAdd->desc.Delete(iIndex, 1);
d992 2
a993 2
				if (pToAdd->desc.GetAt(iIndex) < 0x20)
					pToAdd->desc.Delete(iIndex, 1);
d1720 1
d1735 2
a1736 1
		switch (strLine.GetAt(iIndex))
d1797 1
a1797 1
					strLine.Delete(iIndex, 1);
d1811 2
a1812 2
				if (strLine.GetAt(iIndex) < 0x20)
					strLine.Delete(iIndex, 1);
d1923 1
d1927 2
a1928 1
		switch (strLine.GetAt(iIndex))
d1998 2
a1999 2
				if (strLine.GetAt(iIndex) < 0x20)
					strLine.Delete(iIndex, 1);
d2127 1
a2127 1
		if ((int)lParam > 0 && (int)lParam < 16)
@


1.108
log
@Different way to handle IRC links + Minor fix in rich edit color handling.
@
text
@d23 1
d229 1
a229 1
	AddMessage(_T(""), _T(""), 0x1000000, GetResString(IDS_IRC_STATUSLOG));
d239 3
d264 7
d334 3
d357 15
a398 1

a584 1

d884 2
d929 1
a929 8

	pToAdd->desc.Remove(_T('\002'));
	pToAdd->desc.Remove(_T('\022'));
	pToAdd->desc.Remove(_T('\026'));
	pToAdd->desc.Remove(_T('\037'));
	pToAdd->desc.Remove(_T('\b'));
	pToAdd->desc.Remove(_T('\t'));
	pToAdd->desc.Replace(_T('\004'), _T('%'));
d938 1
a938 1
			case 3:
d976 1
a976 1
						pToAdd->desc.Insert(iIndex, _T("\003"));
d982 1
a982 1
			case 15:
d984 1
a984 1
				pToAdd->desc.SetAt(iIndex, _T('\003'));
d989 6
a994 1
				iIndex++;
d1289 1
a1289 1
					strLine.Insert(strLine.GetLength() - 1, _T('\017'));
d1698 1
a1698 5
	strLine.Remove(_T('\022'));
	strLine.Remove(_T('\026'));
	strLine.Remove(_T('\b'));
	strLine.Remove(_T('\t'));
	strLine.Replace(_T('\004'), _T('%'));
d1715 1
a1715 1
	COLORREF	crForegroundColor = crTextColor, crBackgroundColor = 0x1000000;
d1734 1
a1734 1
			case 2:
d1743 1
a1743 1
			case 3:
d1768 1
a1768 1
						crBackgroundColor = (iColorIndex < 16) ? _acrColorPal[iColorIndex]: 0x1000000;
d1775 1
a1775 1
					crBackgroundColor = 0x1000000;
d1780 1
a1780 1
			case 15:
d1782 1
a1782 1
				if (crForegroundColor != crTextColor || crBackgroundColor != 0x1000000 || dwFlags != 0)
d1789 1
a1789 1
					crBackgroundColor = 0x1000000;
d1796 1
a1796 1
			case 29:
d1802 1
a1802 1
				dwFlags ^= HTC_ITALIC;
d1805 1
a1805 1
			case 31:
d1807 4
a1810 6
				if (iIndex > iLastIndex)
					pUpdateChannel->log.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;
				iLastIndex = iIndex;
				dwFlags ^= HTC_UNDERLINE;
				break;
a1811 2
			default:
				iIndex++;
d1827 1
a1827 1
		AddMessage(_T(""), _T(""), 0x1000000, GetResString(IDS_CONNECTED));
d1833 1
a1833 1
		AddMessage(_T(""), _T(""), 0x1000000, GetResString(IDS_DISCONNECTED));
a1912 5
	strLine.Remove(_T('\022'));
	strLine.Remove(_T('\026'));
	strLine.Remove(_T('\b'));
	strLine.Remove(_T('\t'));

d1916 1
a1916 1
	COLORREF	crForegroundColor = 0x1000000, crBackgroundColor = 0x1000000;
d1924 1
a1924 1
			case 2:
d1933 1
a1933 1
			case 3:
d1947 1
a1947 1
					crForegroundColor = (iColorIndex < 16) ? _acrColorPal[iColorIndex] : 0x1000000;
d1958 1
a1958 1
						crBackgroundColor = (iColorIndex < 16) ? _acrColorPal[iColorIndex]: 0x1000000;
d1964 2
a1965 2
					crForegroundColor = 0x1000000;
					crBackgroundColor = 0x1000000;
d1970 1
a1970 1
			case 15:
d1976 2
a1977 2
				crForegroundColor = 0x1000000;
				crBackgroundColor = 0x1000000;
d1981 1
a1981 1
			case 29:
d1987 1
a1987 1
				dwFlags ^= HTC_ITALIC;
d1990 1
a1990 1
			case 31:
d1992 4
a1995 6
				if (iIndex > iLastIndex)
					titleWindow.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;
				iLastIndex = iIndex;
				dwFlags ^= HTC_UNDERLINE;
				break;
a1996 2
			default:
				iIndex++;
d2042 105
d2149 2
d2224 1
a2224 1
			strSend.Replace(_T('%'), _T('\004'));
d2264 1
a2264 1
			strTemp.Replace(_T('%'), _T('\004'));
d2286 2
a2287 2
	strSend.Replace(_T('%'), _T('\004'));
	AddMessage(m_pCurrentChannel->name, m_pIrcMain->GetNick(), 0x1000000, strSend);
@


1.107
log
@Auto-detected IRC links are not marked.
@
text
@d221 1
a221 1
	titleWindow.SetEventMask(titleWindow.GetEventMask() | ENM_LINK);
d223 2
d749 98
d2212 1
a2212 1
		pToAdd->log.SetEventMask(pToAdd->log.GetEventMask() | ENM_LINK);
@


1.106
log
@Minor fix (only open a new chat session once via context menu).
@
text
@d2115 1
a2115 1
		pToAdd->log.m_dwFlags |= HTC_ISWORDWRAP;
@


1.105
log
@Small optimization + Removed unused code.
@
text
@a328 1
//	int			chanLItem= serverChannelList.GetNextItem(-1, LVIS_SELECTED | LVIS_FOCUSED);
d354 1
a354 1
			if (pNick != NULL)
@


1.104
log
@IRC time format is the same as in the logs.
@
text
@d222 1
a222 3
	titleWindow.m_bAutoScroll = false;
	titleWindow.m_bWordWrap = false;
	titleWindow.m_bLimited = true;
d728 1
a728 1
	if (m_pCurrentChannel->log.m_bAutoScroll && bWasChanged)
d2116 1
a2116 1
		pToAdd->log.m_bWordWrap = true;
@


1.103
log
@Unified list column creature; Improved string processing;
Set list column labels only in one place to avoid future incorrections.
@
text
@d1601 3
a1603 1
		strTemp = CTime::GetCurrentTime().Format(_T("%X: "));
@


1.102
log
@Pressing Ctrl+Enter for sending a message in IRC wont treat the line as a command.
@
text
@d81 1
a81 1
		strRes = GetResString(IDS_IRC_NICK);
d112 1
a112 1
				pCurChannel->title = GetResString(IDS_STATUS);
d114 1
a114 1
				tcitem.pszText = pCurChannel->title.GetBuffer();
a115 1
				pCurChannel->title.ReleaseBuffer();
d119 1
a119 1
				pCurChannel->title = GetResString(IDS_IRC_CHANNELLIST);
d121 1
a121 1
				tcitem.pszText = pCurChannel->title.GetBuffer();
a122 1
				pCurChannel->title.ReleaseBuffer();
d163 11
d200 7
a212 8
	nickList.InsertColumn(IRC1COL_NICK, GetResString(IDS_IRC_NICK), LVCFMT_LEFT, 90);
	nickList.InsertColumn(IRC1COL_STATUS, GetResString(IDS_STATUS), LVCFMT_LEFT, 70);

	serverChannelList.InsertColumn(IRC2COL_NAME, GetResString(IDS_IRC_NAME), LVCFMT_LEFT, 203);
	serverChannelList.InsertColumn(IRC2COL_USERS, GetResString(IDS_UUSERS), LVCFMT_RIGHT, 50);
	serverChannelList.InsertColumn(IRC2COL_DESCRIPTION, GetResString(IDS_DESCRIPTION), LVCFMT_LEFT, 350);
	serverChannelList.LoadSettings(CPreferences::TABLE_IRC);

@


1.101
log
@fix for previous commit
@
text
@d1946 1
a1946 1
	if (strSend[0] == _T('/'))
@


1.100
log
@litlle change
@
text
@d1663 1
a1663 1
					iIndex++;
@


1.99
log
@some code from official
@
text
@d1652 12
a1663 7
				if (iIndex > iLastIndex)
					pUpdateChannel->log.AppendText(strLine.Mid(iLastIndex, iIndex - iLastIndex), crForegroundColor, crBackgroundColor, dwFlags);
				iIndex++;
				iLastIndex = iIndex;
				crForegroundColor = crTextColor;
				crBackgroundColor = 0x1000000;
				dwFlags = 0;
@


1.98
log
@minor changes
@
text
@d1322 1
a1322 1
		tcitem.cchTextMax = (int)newnick.GetLength() + 1;
d2113 1
a2113 1
	tcitem.cchTextMax = (int)name.GetLength() + 1;
d2122 1
a2122 1
		OnTcnSelchangeTab2( NULL, NULL );
@


1.97
log
@opimized some more + minor fix
@
text
@d1143 1
a1143 1
	CString		strMessage, strLine;
d1145 1
a1152 2
				strMessage = message;
				strMessage.Trim();
d1154 1
a1154 1
				if (strMessage.GetLength() == 0)
d1156 2
@


1.96
log
@minor changes
@
text
@d1587 1
a1587 1
	int			iIndex = 0, iColorIndex;
d1599 1
a1599 1
	while (!strLine.IsEmpty())
d1605 4
a1608 4
				if (iIndex > 0)
					pUpdateChannel->log.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
d1614 3
a1616 2
				if (iIndex > 0)
					pUpdateChannel->log.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
d1618 1
a1618 1
				if (strLine.GetLength() > iIndex + 1 && strLine[iIndex + 1] >= _T('0') && strLine[iIndex + 1] <= _T('9'))
d1622 1
a1622 1
					if (strLine.GetLength() > iIndex + 2 && strLine[iIndex + 2] >= _T('0') && strLine[iIndex + 2] <= _T('9'))
d1625 2
a1626 7
					iColorIndex = _tstoi(strLine.Mid(iIndex + 1, iLen));
						
					if (iColorIndex < 16)
						crForegroundColor = _acrColorPal[iColorIndex];
					else
						crForegroundColor = crTextColor;

d1629 1
a1629 1
					if (strLine.GetLength() > iIndex + 2 && strLine[iIndex + 1] == _T(',') && strLine[iIndex + 2] >= _T('0') && strLine[iIndex + 2] <= _T('9'))
d1633 1
a1633 1
						if (strLine.GetLength() > iIndex + 3 && strLine[iIndex + 3] >= _T('0') && strLine[iIndex + 3] <= _T('9'))
d1636 2
a1637 7
						iColorIndex = _tstoi(strLine.Mid(iIndex + 2, iLen));

						if (iColorIndex < 16)
							crBackgroundColor = _acrColorPal[iColorIndex];
						else
							crBackgroundColor = 0x1000000;

d1646 1
a1646 2
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
d1651 4
a1654 4
				if (iIndex > 0)
					pUpdateChannel->log.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
d1662 4
a1665 4
				if (iIndex > 0)
					pUpdateChannel->log.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
d1671 4
a1674 4
				if (iIndex > 0)
					pUpdateChannel->log.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
a1678 1
			{
a1679 8
				break;
			}
		}
		if (iIndex >= strLine.GetLength())
		{
			pUpdateChannel->log.AppendText(strLine, crForegroundColor, crBackgroundColor, dwFlags);
			pUpdateChannel->log.AppendText(_T("\n"));
			strLine.Empty();
d1682 3
d1790 1
a1790 1
	int			iIndex = 0, iColorIndex, iLen;
d1793 1
a1793 1
	while (!strLine.IsEmpty())
d1799 4
a1802 4
				if (iIndex > 0)
					titleWindow.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
d1808 3
a1810 2
				if (iIndex > 0)
					titleWindow.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
d1812 1
a1812 1
				if (strLine.GetLength() > iIndex + 1 && strLine[iIndex + 1] >= _T('0') && strLine[iIndex + 1] <= _T('9'))
d1816 1
a1816 1
					if (strLine.GetLength() > iIndex + 2 && strLine[iIndex + 2] >= _T('0') && strLine[iIndex + 2] <= _T('9'))
d1819 2
a1820 7
					iColorIndex = _tstoi(strLine.Mid(iIndex + 1, iLen));
						
					if (iColorIndex < 16)
						crForegroundColor = _acrColorPal[iColorIndex];
					else
						crForegroundColor = 0x1000000;

d1823 1
a1823 1
					if (strLine.GetLength() > iIndex + 2 && strLine[iIndex + 1] == _T(',') && strLine[iIndex + 2] >= _T('0') && strLine[iIndex + 2] <= _T('9'))
d1827 1
a1827 1
						if (strLine.GetLength() > iIndex + 3 && strLine[iIndex + 3] >= _T('0') && strLine[iIndex + 3] <= _T('9'))
d1830 2
a1831 7
						iColorIndex = _tstoi(strLine.Mid(iIndex + 2, iLen));

						if (iColorIndex < 16)
							crBackgroundColor = _acrColorPal[iColorIndex];
						else
							crBackgroundColor = 0x1000000;

d1840 1
a1840 2
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
d1845 4
a1848 4
				if (iIndex > 0)
					titleWindow.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
d1856 4
a1859 4
				if (iIndex > 0)
					titleWindow.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
d1865 4
a1868 4
				if (iIndex > 0)
					titleWindow.AppendText(strLine.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
				strLine = strLine.Mid(iIndex + 1);
				iIndex = 0;
a1872 1
			{
a1873 7
				break;
			}
		}
		if (iIndex >= strLine.GetLength())
		{
			titleWindow.AppendText(strLine, crForegroundColor, crBackgroundColor, dwFlags);
			strLine.Empty();
d1876 2
@


1.95
log
@some changes + reverted a previous change
@
text
@d716 1
a717 1
		titleWindow.ShowWindow(SW_SHOW);
d816 1
a816 1
					if (pToAdd->desc.GetAt(iIndex) >= 48 && pToAdd->desc.GetAt(iIndex) <= 58)
d821 1
a821 1
							if (pToAdd->desc.GetAt(iIndex + 1) >= 48 && pToAdd->desc.GetAt(iIndex + 1) <= 58)
d831 1
a831 1
							if (pToAdd->desc.GetLength() > iIndex && pToAdd->desc.GetAt(iIndex) == 44 && pToAdd->desc.GetAt(iIndex + 1) >= 48 && pToAdd->desc.GetAt(iIndex + 1) <= 58)
d834 1
a834 1
								if (pToAdd->desc.GetLength() > iIndex + 1 && pToAdd->desc.GetAt(iIndex + 2) >= 48 && pToAdd->desc.GetAt(iIndex + 2) <= 58)
d1617 1
a1617 1
				if (strLine.GetLength() > iIndex + 1 && strLine.GetAt(iIndex + 1) >= 48 && strLine.GetAt(iIndex + 1) <= 58)
d1621 1
a1621 1
					if (strLine.GetLength() > iIndex + 2 && strLine.GetAt(iIndex + 2) >= 48 && strLine.GetAt(iIndex + 2) <= 58)
d1633 1
a1633 1
					if (strLine.GetLength() > iIndex + 2 && strLine.GetAt(iIndex + 1) == 44 && strLine.GetAt(iIndex + 2) >= 48 && strLine.GetAt(iIndex + 2) <= 58)
d1637 1
a1637 1
						if (strLine.GetLength() > iIndex + 3 && strLine.GetAt(iIndex + 3) >= 48 && strLine.GetAt(iIndex + 3) <= 58)
d1827 1
a1827 1
				if (strLine.GetLength() > iIndex + 1 && strLine.GetAt(iIndex + 1) >= 48 && strLine.GetAt(iIndex + 1) <= 58)
d1831 1
a1831 1
					if (strLine.GetLength() > iIndex + 2 && strLine.GetAt(iIndex + 2) >= 48 && strLine.GetAt(iIndex + 2) <= 58)
d1843 1
a1843 1
					if (strLine.GetLength() > iIndex + 2 && strLine.GetAt(iIndex + 1) == 44 && strLine.GetAt(iIndex + 2) >= 48 && strLine.GetAt(iIndex + 2) <= 58)
d1847 1
a1847 1
						if (strLine.GetLength() > iIndex + 3 && strLine.GetAt(iIndex + 3) >= 48 && strLine.GetAt(iIndex + 3) <= 58)
@


1.94
log
@small change
@
text
@d589 1
a589 4
	if (IsDialogMessage(pMsg))
		return TRUE;
	else
		return CResizableDialog::PreTranslateMessage(pMsg);
d1562 8
a1569 5
	line.Remove(_T('\022'));
	line.Remove(_T('\026'));
	line.Remove(_T('\b'));
	line.Remove(_T('\t'));
	line.Replace(_T('\004'), _T('%'));
d1574 2
a1575 4

		int			iLen = strTemp.GetLength();

		if (iLen > 0 && line.Left(iLen) == strTemp)
d1577 1
a1577 1
			if (line.Mid(iLen + 1, 1) == _T(":"))
d1579 1
a1579 1
			line = line.Right(line.GetLength() - (iLen + 1));
d1583 1
a1583 1
	if (line.IsEmpty())
d1599 1
a1599 1
	while (!line.IsEmpty())
d1601 1
a1601 1
		switch (line.GetAt(iIndex))
a1604 1
				line.Delete(iIndex, 1);
d1606 3
a1608 5
				{
					pUpdateChannel->log.AppendText(line.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
					line = line.Mid(iIndex);
					iIndex = 0;
				}
a1613 1
				line.Delete(iIndex, 1);
d1615 3
d1619 13
a1631 4
					pUpdateChannel->log.AppendText(line.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
					line = line.Mid(iIndex);
					iIndex = 0;
				}
d1633 1
a1633 3
				if (!line.IsEmpty())
				{
					if (line.GetAt(0) >= 48 && line.GetAt(0) <= 58)
d1635 9
a1643 21
						if (line.GetLength() > 1)
						{
							iIndex = 1;
							if (line.GetAt(1) >= 48 && line.GetAt(1) <= 58)
								iIndex++;
							iColorIndex = _tstoi(line.Left(iIndex));
							if (iColorIndex < 16)
								crForegroundColor = _acrColorPal[iColorIndex];
							line = line.Mid(iIndex);
							if (line.GetLength() > 1 && line.GetAt(0) == 44 && line.GetAt(1) >= 48 && line.GetAt(1) <= 58)
							{
								iIndex = 1;
								if (line.GetLength() > 2 && line.GetAt(2) >= 48 && line.GetAt(2) <= 58)
									iIndex++;
								iColorIndex = _tstoi(line.Mid(1, iIndex));
								if (iColorIndex < 16)
									crBackgroundColor = _acrColorPal[iColorIndex];
								line = line.Mid(iIndex + 1);
							}
							iIndex = 0;
						}
d1645 3
a1647 6
							line.Empty();
					}
					else
					{
						crForegroundColor = crTextColor;
						crBackgroundColor = 0x1000000;
d1650 7
a1660 1
				line.Delete(iIndex, 1);
d1662 3
a1664 5
				{
					pUpdateChannel->log.AppendText(line.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
					line = line.Mid(iIndex);
					iIndex = 0;
				}
a1671 1
				line.Delete(iIndex, 1);
d1673 3
a1675 5
				{
					pUpdateChannel->log.AppendText(line.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
					line = line.Mid(iIndex);
					iIndex = 0;
				}
a1680 1
				line.Delete(iIndex, 1);
d1682 3
a1684 5
				{
					pUpdateChannel->log.AppendText(line.Left(iIndex), crForegroundColor, crBackgroundColor, dwFlags);
					line = line.Mid(iIndex);
					iIndex = 0;
				}
d1694 1
a1694 1
		if (iIndex >= line.GetLength())
d1696 1
a1696 1
			pUpdateChannel->log.AppendText(line, crForegroundColor, crBackgroundColor, dwFlags);
d1698 1
a1698 1
			line.Empty();
d1806 1
a1806 1
	int			iIndex = 0, iColorIndex;
a1814 1
				strLine.Delete(iIndex, 1);
a1815 1
				{
d1817 2
a1818 3
					strLine = strLine.Mid(iIndex);
					iIndex = 0;
				}
a1823 1
				strLine.Delete(iIndex, 1);
a1824 1
				{
a1825 3
					strLine = strLine.Mid(iIndex);
					iIndex = 0;
				}
d1827 1
a1827 1
				if (!strLine.IsEmpty())
d1829 15
a1843 1
					if (strLine.GetAt(0) >= 48 && strLine.GetAt(0) <= 58)
d1845 9
a1853 21
						if (strLine.GetLength() > 1)
						{
							iIndex = 1;
							if (strLine.GetAt(1) >= 48 && strLine.GetAt(1) <= 58)
								iIndex++;
							iColorIndex = _tstoi(strLine.Left(iIndex));
							if (iColorIndex < 16)
								crForegroundColor = _acrColorPal[iColorIndex];
							strLine = strLine.Mid(iIndex);
							if (strLine.GetLength() > 1 && strLine.GetAt(0) == 44 && strLine.GetAt(1) >= 48 && strLine.GetAt(1) <= 58)
							{
								iIndex = 1;
								if (strLine.GetLength() > 2 && strLine.GetAt(2) >= 48 && strLine.GetAt(2) <= 58)
									iIndex++;
								iColorIndex = _tstoi(strLine.Mid(1, iIndex));
								if (iColorIndex < 16)
									crBackgroundColor = _acrColorPal[iColorIndex];
								strLine = strLine.Mid(iIndex + 1);
							}
							iIndex = 0;
						}
d1855 3
a1857 6
							strLine.Empty();
					}
					else
					{
						crForegroundColor = 0x1000000;
						crBackgroundColor = 0x1000000;
d1860 7
a1870 1
				strLine.Delete(iIndex, 1);
a1871 1
				{
d1873 2
a1874 3
					strLine = strLine.Mid(iIndex);
					iIndex = 0;
				}
a1881 1
				strLine.Delete(iIndex, 1);
a1882 1
				{
d1884 2
a1885 3
					strLine = strLine.Mid(iIndex);
					iIndex = 0;
				}
a1890 1
				strLine.Delete(iIndex, 1);
a1891 1
				{
d1893 2
a1894 3
					strLine = strLine.Mid(iIndex);
					iIndex = 0;
				}
@


1.93
log
@some more fixes and changes
@
text
@d589 4
a592 1
	return CResizableDialog::PreTranslateMessage(pMsg);
@


1.92
log
@some changes
@
text
@a220 2
	titleWindow.Reset();
	titleWindow.AppendText(GetResString(IDS_IRC_CHANNELLIST), RGB(0, 0, 128));
d572 3
a574 1
	if (pMsg->message == WM_KEYDOWN && (pMsg->hwnd == GetDlgItem(IDC_INPUTWINDOW)->m_hWnd))
d590 4
d602 1
a602 1
	GetDlgItem(IDC_INPUTWINDOW)->SetFocus();
d737 1
a737 1
	GetDlgItem(IDC_INPUTWINDOW)->SetFocus();
d1979 2
a1980 2
	GetDlgItemText(IDC_INPUTWINDOW, strSend);
	SetDlgItemText(IDC_INPUTWINDOW, _T(""));
d2290 1
a2290 1
	SetDlgItemText(IDC_INPUTWINDOW, strBuffer);
@


1.91
log
@small fix
@
text
@d1970 4
a1973 1
	CString		strSend, strTemp;
d1978 3
d1986 2
a1987 2
	if (strSend.IsEmpty())
		return;
d1989 4
a1992 2
	if (!this->m_bConnected)
		return;
d1994 1
a1994 3
	if (strSend.Left(4).MakeLower() == _T("/hop"))
	{
		if (m_pCurrentChannel->name[0] == _T('#'))
d1996 2
a1997 3
			strTemp = m_pCurrentChannel->name;
			m_pIrcMain->SendString(_T("PART ") + strTemp );
			m_pIrcMain->SendString(_T("JOIN ") + strTemp );
a1998 2
		return;
	}
d2000 19
a2018 3
	if (strSend[0] == _T('/') && strSend.Mid(1, 2).MakeLower() != _T("me") /*&& strSend.Mid(1, 5).MakeLower() != _T("sound")*/)
	{
		if (strSend.Mid(1, 3).MakeLower() == _T("msg"))
d2020 23
d2044 51
a2094 13
			(m_pCurrentChannel->type == 4 || m_pCurrentChannel->type == 5) ? strTemp = m_pCurrentChannel->name : strTemp.Empty();
			AddMessage(strTemp, _T(""), RGB(153, 51, 102), _T("* >> ") + strSend.Mid(5));
			strSend.Replace(_T('\004'), _T('%'));
			strSend = _T("/PRIVMSG") + strSend.Mid(4);
		}
		if ((strSend.Mid(1, 16)).CompareNoCase(_T("PRIVMSG nickserv")) == 0)
			strSend = _T("/ns") + strSend.Mid(17);
		else if ((strSend.Mid(1, 16)).CompareNoCase(_T("PRIVMSG chanserv")) == 0)
			strSend = _T("/cs") + strSend.Mid(17);
		else if ((strSend.Mid(1, 7)).CompareNoCase(_T("PRIVMSG")) == 0 || (strSend.Mid(1, 5)).CompareNoCase(_T("TOPIC")) == 0)
			strSend.Insert(strSend.Find(_T(" "), strSend.Find(_T(" ")) + 1) + 1, _T(":"));
		m_pIrcMain->SendString(strSend.Mid(1));
		return;
d2096 1
d2102 2
a2103 9
	if (strSend.Left(3).MakeLower() == _T("/me"))
	{
		strTemp.Format(_T("PRIVMSG %s :\001ACTION %s\001"), m_pCurrentChannel->name, strSend.Mid(4));
		strSend.Replace(_T('%'), _T('\004'));
		AddMessage(m_pCurrentChannel->name, _T(""), RGB(0, 147, 0), _T("* %s %s"), m_pIrcMain->GetNick(), strSend.Mid(4));
		m_pIrcMain->SendString(strTemp);
		return;
	}
	strTemp = _T("PRIVMSG ") + m_pCurrentChannel->name + _T(" :") + strSend;
@


1.90
log
@cosmetic changes
@
text
@d672 7
a678 1
	Channel		*pUpdate = (Channel*)tcitem.lParam, *pChannel;
a681 1
	m_pCurrentChannel = pUpdate;
d712 1
a712 1
		SetTitle(pUpdate->name, pUpdate->title);
d731 2
a732 2
	RefreshNickList(pUpdate->name);
	pUpdate->log.SetTitle(pUpdate->name);
a1788 3
	if (m_pCurrentChannel->type != 4)
		return;
	
d1796 1
a1796 1
	if (pCurChannel != m_pCurrentChannel)
@


1.89
log
@Color coded IRC channel title
@
text
@d209 3
a211 3
	rcRect.top -= 22;
	rcRect.bottom = rcRect.top + 11;
	titleWindow.Create(WS_VISIBLE | WS_CHILD | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | ES_AUTOHSCROLL | ES_READONLY | ES_NOHIDESEL, rcRect, this, (UINT)-1);
d290 1
a290 1
		titleWindow.SetWindowPos(NULL, rcRect.left, rcRect.top - 19, rcRect.Width(), 18, SWP_NOZORDER);
d299 4
d679 1
a680 3
	{
		titleWindow.Reset();
		titleWindow.AppendText(GetResString(IDS_STATUS), RGB(0, 0, 128));
a681 1
	}
a683 2
		titleWindow.Reset();
		titleWindow.AppendText(GetResString(IDS_IRC_CHANNELLIST), RGB(0, 0, 128));
d704 6
a726 1
	SetTitle(pUpdate->name, pUpdate->title);
d1784 3
d2066 3
@


1.88
log
@minor fix/changes
@
text
@d130 1
d132 1
a132 1
			titleWindow.SetWindowText(GetResString(IDS_STATUS));
d134 1
a134 1
			titleWindow.SetWindowText(GetResString(IDS_IRC_CHANNELLIST));
d175 1
d208 10
d221 2
a222 1
	titleWindow.SetWindowText(GetResString(IDS_IRC_CHANNELLIST));
a232 1
	AddAnchor(IDC_TITLEWINDOW, TOP_LEFT, TOP_RIGHT);
d284 9
d295 1
a295 1
		CRect		rcChannel;
d297 3
a299 3
		serverChannelList.GetWindowRect(&rcChannel);
		ScreenToClient(&rcChannel);
		m_pCurrentChannel->log.SetWindowPos(NULL, rcChannel.left, rcChannel.top, rcChannel.Width(), rcChannel.Height(), SWP_NOZORDER);
a312 1
	DDX_Control(pDX, IDC_TITLEWINDOW, titleWindow);
d677 2
a678 1
		titleWindow.SetWindowText(GetResString(IDS_STATUS));
d683 2
a684 1
		titleWindow.SetWindowText(GetResString(IDS_IRC_CHANNELLIST));
d1549 1
a1549 1
	line.Remove(_T('\022')); // Reverse
d1778 1
a1778 1
CString CIrcWnd::StripMessageOfColorCodes(CString temp)
d1780 13
a1792 4
	if (!temp.IsEmpty())
	{
		CString		strTemp1, strTemp2;
		int			iTest = temp.Find(3);
d1794 4
a1797 3
		if (iTest != -1)
		{
			int		iTestLength = temp.GetLength() - iTest;
d1799 2
a1800 2
			if (iTestLength < 2)
				return temp;
d1802 3
a1804 4
			strTemp1 = temp.Left(iTest);
			strTemp2 = temp.Mid(iTest + 2);
			if (iTestLength < 4)
				return strTemp1 + strTemp2;
d1806 5
a1810 1
			if (strTemp2[0] == 44 && strTemp2.GetLength() > 2)
d1812 2
a1813 2
				strTemp2 = strTemp2.Mid(2);
				for (int I = 48; I < 58; I++)
d1815 3
a1817 2
					if (strTemp2[0] == I)
						strTemp2 = strTemp2.Mid(1);
d1819 2
d1822 1
a1822 1
			else
d1824 9
a1832 1
				for (int I = 48; I < 58; I++)
d1834 1
a1834 1
					if (strTemp2[0] == I)
d1836 1
a1836 2
						strTemp2 = strTemp2.Mid(1);
						if (strTemp2[0] == 44 && strTemp2.GetLength() > 2)
d1838 8
a1845 2
							strTemp2 = strTemp2.Mid(2);
							for (int I = 48; I < 58; I++)
d1847 7
a1853 2
								if (strTemp2[0] == I)
									strTemp2 = strTemp2.Mid(1);
d1855 1
d1857 2
d1860 30
d1891 19
d1911 5
a1915 2
			temp = strTemp1 + strTemp2;
			temp = StripMessageOfColorCodes(temp);
a1917 21
	return temp;
}

void CIrcWnd::SetTitle(CString channel, CString title)
{
	Channel		*pCurChannel = FindChannelByName(channel);

	if (pCurChannel == NULL)
		return;

	pCurChannel->title = StripMessageOfColorCodes(title);
	pCurChannel->title.Remove(_T('\002'));
	pCurChannel->title.Remove(_T('\003'));
	pCurChannel->title.Remove(_T('\017'));
	pCurChannel->title.Remove(_T('\026'));
	pCurChannel->title.Remove(_T('\037'));
	pCurChannel->title.Remove(_T('\b'));
	pCurChannel->title.Remove(_T('\t'));

	if (pCurChannel == m_pCurrentChannel)
		titleWindow.SetWindowText(pCurChannel->title);
@


1.87
log
@Color coded IRC channel list description;
Added "WhoIs" context menu to IRC nick list;
Added "Refresh" context menu to IRC channel list.
@
text
@d1714 1
a1714 1
		if (m_pCurrentChannel->type == 4)
d1745 1
a1745 1
		if (pCurNick)
d1753 1
a1753 14
		AddMessage((m_pCurrentChannel->type == 4) ? m_pCurrentChannel->name : _T(""), _T(""), RGB(153, 51, 102), _T("-%s- %s"), source, message);
}

CString CIrcWnd::StripMessageOfFontCodes(CString temp)
{
	temp = StripMessageOfColorCodes(temp);
	temp.Remove(_T('\002'));
	temp.Remove(_T('\003'));
	temp.Remove(_T('\017'));
	temp.Remove(_T('\026'));
	temp.Remove(_T('\037'));
	temp.Remove(_T('\b'));
	temp.Remove(_T('\t'));
	return temp;
d1817 9
a1825 1
	pCurChannel->title = StripMessageOfFontCodes(title);
@


1.86
log
@some fixes/changes
@
text
@d331 11
d539 5
d759 72
a830 1
	pToAdd->desc = StripMessageOfFontCodes(description);
d835 1
d900 1
d904 1
d908 2
d1461 1
d1710 21
d1751 3
a1753 7
	if (bFlag == false)
	{
		if (m_pCurrentChannel->type == 4)
			AddMessage(m_pCurrentChannel->name, _T(""), RGB(153, 51, 102), _T("-%s- %s"), source, message);
		else
			AddMessage(_T(""), _T(""), RGB(153, 51, 102), _T("-%s- %s"), source, message);
	}
a1755 1
//We cannot support color within the text since HyperTextCtrl does not detect hyperlinks with color. So I will filter it.
@


1.85
log
@minor color-fix
@
text
@d1783 1
a1783 1
	if (strSend.Left(4) == _T("/hop"))
d1785 1
a1785 1
		if (m_pCurrentChannel->name.Left(1) == _T("#"))
d1794 1
a1794 1
	if (strSend.Left(1) == _T("/") && strSend.Left(3).MakeLower() != _T("/me") /*&& strSend.Left(6).MakeLower() != _T("/sound")*/)
d1796 1
a1796 1
		if (strSend.Left(4) == _T("/msg"))
d1798 4
a1801 12
			if (m_pCurrentChannel->type == 4 || m_pCurrentChannel->type == 5)
			{
				strSend.Replace(_T('%'), _T('\004'));
				AddMessage(m_pCurrentChannel->name, _T(""), RGB(153, 51, 102), _T("* >> ") + strSend.Mid(5));
				strSend.Replace(_T('\004'), _T('%'));
			}
			else
			{
				strSend.Replace(_T('%'), _T('\004'));
				AddMessage(_T(""), _T(""), RGB(153, 51, 102), _T("* >> ") + strSend.Mid(5));
				strSend.Replace(_T('\004'), _T('%'));
			}
d1804 1
a1804 1
		if (((CString)strSend.Left(17)).CompareNoCase(_T("/PRIVMSG nickserv")) == 0)
d1806 1
a1806 1
		else if (((CString)strSend.Left(17)).CompareNoCase(_T("/PRIVMSG chanserv")) == 0)
d1808 1
a1808 1
		else if (((CString)strSend.Left(8)).CompareNoCase(_T("/PRIVMSG")) == 0 || ((CString)strSend.Left(6)).CompareNoCase(_T("/TOPIC")) == 0)
d1818 1
a1818 1
	if (strSend.Left(3) == _T("/me"))
a1829 1
	strSend.Replace(_T('\004'), _T('%'));
@


1.84
log
@small improvement and some minor fixes
@
text
@d1525 1
d1527 2
@


1.83
log
@more fixes/changes
@
text
@a1433 1
	line.Remove(_T('\017')); // Fixed pitch
d1457 1
a1457 2
	COLORREF	crDefaultColor = ((crTextColor & 0x1000000) != 0) ? GetSysColor(COLOR_WINDOWTEXT) : (crTextColor & 0xFFFFFF);
	COLORREF	crColor = crDefaultColor, crBackgroundColor = 0x1000000;
d1459 1
a1459 1
	bool		bBold = false, bItalic = false, bUnderline = false;
d1479 1
a1479 1
					pUpdateChannel->log.AppendText(line.Left(iIndex), crColor, crBackgroundColor, bBold, bItalic, false, bUnderline);
d1483 1
a1483 1
				bBold = !bBold;
d1491 1
a1491 1
					pUpdateChannel->log.AppendText(line.Left(iIndex), crColor, crBackgroundColor, bBold, bItalic, false, bUnderline);
d1507 1
a1507 1
								crColor = _acrColorPal[iColorIndex];
d1525 1
a1525 1
						crColor = crDefaultColor;
d1534 1
a1534 1
					pUpdateChannel->log.AppendText(line.Left(iIndex), crColor, crBackgroundColor, bBold, bItalic, false, bUnderline);
d1538 1
a1538 1
				crColor = crDefaultColor;
d1540 1
a1540 3
				bBold = false;
				bItalic = false;
				bUnderline = false;
d1548 1
a1548 1
					pUpdateChannel->log.AppendText(line.Left(iIndex), crColor, crBackgroundColor, bBold, bItalic, false, bUnderline);
d1552 1
a1552 1
				bItalic = !bItalic;
d1560 1
a1560 1
					pUpdateChannel->log.AppendText(line.Left(iIndex), crColor, crBackgroundColor, bBold, bItalic, false, bUnderline);
d1564 1
a1564 1
				bUnderline = !bUnderline;
d1575 1
a1575 1
			pUpdateChannel->log.AppendText(line, crColor, crBackgroundColor, bBold, bItalic, false, bUnderline);
@


1.82
log
@minor fix
@
text
@d1875 1
a1875 1
		pToAdd->log.Create(WS_CHILD | WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_VSCROLL | ES_MULTILINE | ES_READONLY, rcChannel, this, (UINT)-1);
@


1.81
log
@Faster list header localizations.
@
text
@d634 1
d668 1
d670 3
@


1.80
log
@minor change
@
text
@d73 1
a73 1
	CHeaderCtrl		*pHeaderCtrl;
a77 1
	pHeaderCtrl = nickList.GetHeaderCtrl();
d81 2
a82 2
		strRes.Format(_T("%s"), GetResString(IDS_IRC_NICK));
	hdi.pszText = strRes.GetBuffer();
a83 1
	strRes.ReleaseBuffer();
d88 7
d136 3
a138 3
	CHeaderCtrl	   *pHeaderCtrl;
	HDITEM			hdi;
	CString			strRes;
d141 1
a141 3
	pHeaderCtrl = nickList.GetHeaderCtrl();
	strRes = GetResString(IDS_STATUS);
	hdi.pszText = const_cast<LPTSTR>((LPCTSTR)strRes);
d148 6
a153 14
	GetResString(&strRes, IDS_UUSERS);
	hdi.pszText = strRes.GetBuffer();
	pHeaderCtrl->SetItem(1, &hdi);
	strRes.ReleaseBuffer();

	GetResString(&strRes, IDS_DESCRIPTION);
	hdi.pszText = strRes.GetBuffer();
	pHeaderCtrl->SetItem(2, &hdi);
	strRes.ReleaseBuffer();

	GetResString(&strRes, IDS_IRC_NAME);
	hdi.pszText = strRes.GetBuffer();
	pHeaderCtrl->SetItem(0, &hdi);
	strRes.ReleaseBuffer();
@


1.79
log
@some more changes
@
text
@d1030 1
a1030 1
				AddMessage(pCurChannel->name, _T(""), RGB(0, 0, 255), strLine);
@


1.78
log
@minor change
@
text
@d213 1
a213 1
	AddStatus(GetResString(IDS_IRC_STATUSLOG));
d333 1
a333 1
				AddMessage(pNick->nick, _T(""), GetResString(IDS_IRC_PRIVATECHANSTART));
d488 1
a488 1
				AddMessage(pChannel->name, _T(""), GetResString(IDS_IRC_SLAPMSG), m_pIrcMain->GetNick(), pNick->nick);
d1030 1
a1030 1
				AddMessage(pCurChannel->name, _T(""), strLine);
d1132 1
a1132 1
					AddMessage(channel, _T(""), GetResString(IDS_IRC_SETSMODE), changer, commands, names);
d1156 1
a1156 1
						AddMessage(channel, _T(""), GetResString(IDS_IRC_SETSMODE), changer, strDir + commands[iCurMode] , strTest);
d1167 1
a1167 1
		AddMessage(channel, _T(""), GetResString(IDS_IRC_NOTSUPPORTED));
d1201 1
a1201 1
			AddMessage(pCurChannel->name, _T(""), GetResString(IDS_IRC_NOWKNOWNAS), oldnick, newnick);
d1400 1
a1400 1
			AddMessage(pNick->nick, _T(""), GetResString(IDS_IRC_PRIVATECHANSTART));
d1411 1
a1411 1
void CIrcWnd::AddStatus(CString line, ...)
d1415 1
a1415 1
	Channel		*pUpdateChannel = (Channel*)channelPtrList.GetHead();
d1417 1
a1417 18
	va_start(argptr, line);
	strTemp.FormatV(line, argptr);
	va_end(argptr);

	if (pUpdateChannel == NULL)
		return;

	line = StripMessageOfFontCodes(strTemp);
	line += _T('\n');
	line.Replace(_T('\004'), _T('%'));

	COLORREF	crLineColor = 0x1000000;

	strTemp = m_pIrcMain->GetNick();

	int			iLen = strTemp.GetLength();

	if (iLen > 0 && line.Left(iLen) == strTemp)
d1419 3
a1421 4
		if (line.Mid(iLen + 1, 1) == _T(":"))
			iLen ++;
		line = line.Right(line.GetLength() - (iLen + 1));
		crLineColor = RGB(72, 61, 139);
d1423 2
a1424 4
	else if (line.Mid(0, 1) == _T("*"))
		crLineColor = RGB(153, 51, 0);
	else if (line.Mid(0, 1) == _T("-"))
		crLineColor = RGB(153, 51, 102);
d1426 1
a1426 15
	if (g_eMuleApp.m_pGlobPrefs->GetIRCAddTimestamp())
	{
		strTemp = CTime::GetCurrentTime().Format(_T("%X: "));
		pUpdateChannel->log.AppendText(strTemp, RGB(0, 0, 128));
	}

	pUpdateChannel->log.AppendText(line, crLineColor);

	if (m_pCurrentChannel != pUpdateChannel)
		SetActivity(pUpdateChannel->name, true);
}

void CIrcWnd::AddMessage(CString channelName, CString targetname, CString line, ...)
{
	if (channelName.IsEmpty())
a1428 4
	va_list		argptr;
	CString		strTemp;
	Channel		*pUpdateChannel = FindChannelByName(channelName);

a1433 3
	if (pUpdateChannel == NULL)
		pUpdateChannel = NewChannel(channelName, (channelName.Left(1) == _T("#")) ? 4 : 5);

d1441 3
a1443 2
	if (line.IsEmpty())
		return;
d1445 1
a1445 1
	COLORREF	crDefaultColor = GetSysColor(COLOR_WINDOWTEXT);
d1447 6
a1452 6
	if (targetname.IsEmpty())
	{
		if (line.Mid(0, 1) == _T("*"))
			crDefaultColor = RGB(0, 147, 0);
		else if (line.Mid(0, 1) == _T("-"))
			crDefaultColor = RGB(153, 51, 102);
d1455 4
d1469 1
a1469 1
	if (!targetname.IsEmpty())
d1594 1
a1594 1
		AddStatus(GetResString(IDS_CONNECTED));
d1600 1
a1600 1
		AddStatus(GetResString(IDS_DISCONNECTED));
d1624 1
a1624 1
		AddMessage(source, _T(""), _T("-%s- %s"), source, message);
d1634 1
a1634 1
			AddMessage(pCurChannel->name, _T(""), _T("-%s- %s"), source, message);
d1641 1
a1641 1
			AddMessage(m_pCurrentChannel->name, _T(""), _T("-%s- %s"), source, message);
d1643 1
a1643 1
			AddStatus(_T("-%s- %s"), source, message);
d1802 1
a1802 1
				AddMessage(m_pCurrentChannel->name, _T(""), _T("* >> ") + strSend.Mid(5));
d1808 1
a1808 1
				AddStatus(_T("* >> ") + strSend.Mid(5));
d1831 1
a1831 1
		AddMessage(m_pCurrentChannel->name, _T(""), _T("* %s %s"), m_pIrcMain->GetNick(), strSend.Mid(4));
d1838 1
a1838 1
	AddMessage(m_pCurrentChannel->name, m_pIrcMain->GetNick(), strSend);
@


1.77
log
@Minor fix (thx SyruS);
After pressing the IRC Connect button set focus to input window (Thx sw54[rus])
@
text
@d1490 1
a1490 1
			crDefaultColor = RGB(153, 51, 0);
@


1.76
log
@Removed CPreparedRTFText class
@
text
@d563 1
a1480 1
	line.Replace(_T("\\"),_T("\\\\"));
@


1.75
log
@Fixed IRC Status sorting + minor other fix
@
text
@a207 8
	CRect		rect;

	GetDlgItem(IDC_STATUSWINDOW)->GetWindowRect(rect);
	::MapWindowPoints(NULL, m_hWnd, (LPPOINT)&rect, 2);
	statusWindow.Create(WS_VISIBLE | WS_CHILD | WS_HSCROLL | WS_VSCROLL | ES_MULTILINE | ES_READONLY | ES_NOHIDESEL, rect, this, 125);
	statusWindow.ModifyStyleEx(0, WS_EX_STATICEDGE, SWP_FRAMECHANGED);
	statusWindow.SetEventMask(statusWindow.GetEventMask() | ENM_LINK);

d211 1
a211 1
	InitFont();
a226 1
	AddAnchor(statusWindow, TOP_LEFT, BOTTOM_RIGHT);
a228 2
	statusWindow.ShowWindow(SW_SHOW);
	serverChannelList.ShowWindow(SW_HIDE);
d256 1
a256 1
void CIrcWnd::InitFont()
d258 11
a268 1
	statusWindow.SetFont(&g_eMuleApp.m_pdlgEmule->m_fontDefault);
d276 9
d603 1
d605 5
a609 1
	if (pEnLink && pEnLink->msg == WM_LBUTTONDOWN)
d611 1
d614 1
a614 1
		statusWindow.GetTextRange(pEnLink->chrg.cpMin, pEnLink->chrg.cpMax, strUrl);
d636 2
a637 1
	Channel		*pUpdate = (Channel*)tcitem.lParam;
a644 2
		statusWindow.ShowWindow(SW_SHOW);
		serverChannelList.ShowWindow(SW_HIDE);
a649 1
		statusWindow.ShowWindow(SW_HIDE);
d652 8
d665 16
a680 2
	statusWindow.SetHyperText(m_pCurrentChannel->log);
	statusWindow.ShowWindow(SW_SHOW);
d684 4
a687 3
	statusWindow.SetTitle(pUpdate->name);
	if (pResult)
		* pResult = 0;
d919 1
d1070 1
a1070 1
	if (pUpdate != NULL)
d1448 1
a1448 1
		pUpdateChannel->log->AppendText(strTemp, RGB(0, 0, 128));
d1451 1
a1451 1
	pUpdateChannel->log->AppendText(line, crLineColor);
d1453 2
a1454 6
	if (m_pCurrentChannel == pUpdateChannel)
	{
		statusWindow.SetHyperText(pUpdateChannel->log);
		return;
	}
	SetActivity(pUpdateChannel->name, true);
d1495 1
a1495 1
	COLORREF	crColor = crDefaultColor, crBackgroundColor = GetSysColor(COLOR_WINDOW);
d1497 1
a1497 1
	bool		bBold = false, bItalic = false, bUnderline = false, bHighlight = false;
d1502 1
a1502 1
		pUpdateChannel->log->AppendText(strTemp, RGB(0, 0, 128));
d1506 1
a1506 1
		pUpdateChannel->log->AppendText(_T("<") + targetname + _T("> "), (m_pIrcMain->GetNick() == targetname) ? RGB(128, 0, 128) : RGB(51, 51, 153));
d1515 1
a1515 1
				if (bBold)
d1517 3
a1519 7
					line.Insert(iIndex, _T("\\b0 "));
					iIndex += 4;
				}
				else
				{
					line.Insert(iIndex, _T("\\b "));
					iIndex += 3;
d1529 1
a1529 1
					pUpdateChannel->log->AppendText(line.Left(iIndex), crColor | 0x4000000);
a1553 1
								{
d1555 1
a1555 4
									strTemp = line.Mid(iIndex + 1);
									line.Format(_T("\\highlight%i %s"), pUpdateChannel->log->GetColorIndex(pUpdateChannel->log->m_strRtfHeader, (crBackgroundColor | 0x2000000)), strTemp);
									bHighlight = true;
								}
d1570 1
a1570 2
				crColor = crDefaultColor;
				if (bBold)
d1572 3
a1574 21
					line.Insert(iIndex, _T("\\b0 "));
					iIndex += 4;
					bBold = false;
				}
				if (bItalic)
				{
					line.Insert(iIndex, _T("\\i0 "));
					iIndex += 4;
					bItalic = false;
				}
				if (bUnderline)
				{
					line.Insert(iIndex, _T("\\ul0 "));
					iIndex += 5;
					bUnderline = false;
				}
				if (bHighlight)
				{
					line.Insert(iIndex, _T("\\highlight0 "));
					iIndex += 12;
					bHighlight = false;
d1576 5
d1586 1
a1586 1
				if (bItalic)
d1588 3
a1590 7
					line.Insert(iIndex, _T("\\i0 "));
					iIndex += 4;
				}
				else
				{
					line.Insert(iIndex, _T("\\i "));
					iIndex += 3;
d1598 1
a1598 1
				if (bUnderline)
d1600 3
a1602 7
					line.Insert(iIndex, _T("\\ul0 "));
					iIndex += 5;
				}
				else
				{
					line.Insert(iIndex, _T("\\ul "));
					iIndex += 4;
d1615 2
a1616 15
			if (bBold)
				line += _T("\\b0 ");

			if (bItalic)
				line += _T("\\i0 ");

			if (bUnderline)
				line += _T("\\ul0 ");

			if (bHighlight)
				line += _T("\\highlight0 ");

			line += _T('\n');

			pUpdateChannel->log->AppendText(line, crColor | 0x4000000);
d1621 2
a1622 6
	if (m_pCurrentChannel == pUpdateChannel)
	{
		statusWindow.SetHyperText(pUpdateChannel->log);
		return;
	}
	SetActivity(pUpdateChannel->name, true);
a1902 1
	pToAdd->log = new CPreparedRTFText();
d1906 14
d1940 1
a1971 1
		statusWindow.SetWindowText(_T(""));
a1990 1
	delete pToDel->log;
@


1.74
log
@IRC channel messages now supports background color coded messages (Thanks SyruS!);
Added a Word Wrap context menu option to logs, IRC & messages;
Fixed category tabs padding (Mantis bug #0000415);
Improved logs, IRC & messages code + formatting & name changes
@
text
@d1242 1
d1268 1
a1268 1
		else if ( pItem1->op == _T("@@"))
d1299 1
@


1.73
log
@minor correction
@
text
@d58 4
a61 2
	POSITION pos1, pos2;
	for (pos1 = channelLPtrList.GetHeadPosition(); (pos2 = pos1) != NULL; )
d73 4
a76 2
	CHeaderCtrl * pHeaderCtrl;
	HDITEM hdi;
a77 1
	CString strRes;
d79 1
a79 1
	if (nickList.GetItemCount())
d94 3
d99 5
a103 6
		TCITEM item;
		item.mask = TCIF_PARAM;
		item.lParam = -1;
		channelselect.GetItem(i,&item);
		Channel* cur_chan = (Channel*)item.lParam;
		if (cur_chan != NULL)
d105 1
a105 1
			if( cur_chan->type == 1 )
d107 5
a111 5
				cur_chan->title = GetResString(IDS_STATUS);
				item.mask = TCIF_TEXT;
				item.pszText = cur_chan->title.GetBuffer();
				channelselect.SetItem(i,&item);
				cur_chan->title.ReleaseBuffer();
d113 1
a113 1
			if( cur_chan->type == 2 )
d115 5
a119 5
				cur_chan->title = GetResString(IDS_IRC_CHANNELLIST);
				item.mask = TCIF_TEXT;
				item.pszText = cur_chan->title.GetBuffer();
				channelselect.SetItem(i,&item);
				cur_chan->title.ReleaseBuffer();
d123 1
a123 1
	if (m_pCurrentChannel)
d125 4
a128 4
		if( m_pCurrentChannel->type == 1 )
		titleWindow.SetWindowText(GetResString(IDS_STATUS));
		if( m_pCurrentChannel->type == 2 )
		titleWindow.SetWindowText(GetResString(IDS_IRC_CHANNELLIST));
a132 1
	hdi.mask = HDI_TEXT;
d135 1
a136 1

d176 3
a178 3
	CImageList imageList;
	CBitmap Bitmap, *pOldBitmap;
	CDC *pCtrlDC = GetDC(), TempDC;
d208 2
a209 1
	CRect rect;
d296 8
a303 3
	int nickItem = nickList.GetNextItem(-1, LVIS_SELECTED | LVIS_FOCUSED);
	int chanItem = channelselect.GetCurSel();
//	int chanLItem= serverChannelList.GetNextItem(-1, LVIS_SELECTED | LVIS_FOCUSED); 
d323 3
a325 3
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			if (nick)
				AddMessage(nick->nick, _T(""), GetResString(IDS_IRC_PRIVATECHANSTART));
d330 8
a337 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("PRIVMSG chanserv owner %s %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d343 8
a350 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("PRIVMSG chanserv deowner %s %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d356 8
a363 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("MODE %s +o %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d369 8
a376 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("MODE %s -o %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d382 8
a389 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("MODE %s +h %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d395 8
a402 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("MODE %s -h %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d408 8
a415 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("MODE %s +v %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d421 8
a428 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("MODE %s -v %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d434 8
a441 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("PRIVMSG chanserv protect %s %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d447 8
a454 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("PRIVMSG chanserv deprotect %s %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d460 8
a467 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("KICK %s %s"), chan->name, nick->nick);
				m_pIrcMain->SendString(send);
d473 9
a481 11
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(GetResString(IDS_IRC_SLAPMSGSEND), chan->name, nick->nick);
				AddMessage(chan->name, _T(""), GetResString(IDS_IRC_SLAPMSG), m_pIrcMain->GetNick(), nick->nick);
				m_pIrcMain->SendString(send);
d487 8
a494 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("PRIVMSG %s :\001RQSFRIEND |%i|\001"), nick->nick, m_pIrcMain->SetVerify());
				m_pIrcMain->SendString(send);
d500 1
a500 1
		   	if(!GetSendFileString())
d502 9
a510 10
			Nick* nick = (Nick*)nickList.GetItemData(nickItem);
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem, &item);
			Channel* chan = (Channel*)item.lParam;
			if (nick && chan)
			{
				CString send;
				send.Format(_T("PRIVMSG %s :\001SENDLINK|%s|%s\001"), nick->nick, HashToString(g_eMuleApp.m_pGlobPrefs->GetUserHash()), GetSendFileString() );
				m_pIrcMain->SendString(send);
d559 1
a559 1
	TCITEM item;
d561 1
a561 1
	item.mask = TCIF_PARAM;
d568 1
a568 2
	channelselect.GetItem(nItem, &item);
	Channel* partChannel = (Channel*)item.lParam;
d570 3
a572 1
	if (partChannel)
d574 1
a574 1
		if (partChannel->type == 4 && m_bConnected)
d576 4
a579 3
			CString part;
			part = _T("PART ") + partChannel->name;
			m_pIrcMain->SendString(part);
d582 1
a582 1
		else if (partChannel->type == 5 || partChannel->type == 4)
d584 1
a584 1
			RemoveChannel(partChannel->name);
d593 3
a595 1
	ENLINK* pEnLink = reinterpret_cast<ENLINK *>(pNMHDR);
d598 2
a599 1
		CString strUrl;
d610 7
a616 4
	TCITEM item;
	item.mask = TCIF_PARAM;
	int cur_sel = channelselect.GetCurSel();
	if (cur_sel == -1)
d618 2
a619 1
	if (!channelselect.GetItem(cur_sel, &item))
a620 1
	Channel* update = (Channel*)item.lParam;
d622 3
a624 1
	m_pCurrentChannel = update;
d626 1
a626 2
	// bool bWasChanged = (channelselect.GetItemState(cur_sel, TCIS_HIGHLIGHTED) & TCIS_HIGHLIGHTED);
	channelselect.SetItemState(cur_sel, TCIS_HIGHLIGHTED, NULL);
d648 3
a650 5
	RefreshNickList(update->name);
	SetTitle(update->name, update->title);
	statusWindow.SetTitle(update->name);
	if ((statusWindow.m_bAutoScroll) /*&& (bWasChanged)*/)
		statusWindow.ScrollToLastLine();
d678 4
a681 2
	POSITION pos1, pos2;
	for (pos1 = channelLPtrList.GetHeadPosition(); (pos2 = pos1) != NULL; )
d683 1
a683 1
		ChannelList* cur_channel = (ChannelList*)channelLPtrList.GetNext(pos1);
d685 1
a685 1
		delete cur_channel;
d692 4
a695 3
	CString ntemp = name;
	CString dtemp = description;
	int usertest = _tstoi(user);
d698 1
a698 1
		if (usertest < g_eMuleApp.m_pGlobPrefs->GetIRCChannelUserFilter())
d703 13
a715 12
	ChannelList* toadd = new ChannelList;
	toadd->name = name;
	toadd->users = user;
	toadd->desc = StripMessageOfFontCodes(description);
	channelLPtrList.AddTail(toadd);
	uint16 itemnr = serverChannelList.GetItemCount();

	itemnr = serverChannelList.InsertItem(LVIF_PARAM, itemnr, 0, 0, 0, 0, (LPARAM)toadd);
	serverChannelList.SetItemText(itemnr, 0, toadd->name);
	serverChannelList.SetItemText(itemnr, 1, toadd->users);
	serverChannelList.SetItemText(itemnr, 2, toadd->desc);
	if(channelselect.GetCurSel() != 1)
d721 2
a722 2
	ChannelList *item1 = (ChannelList*)lParam1;
	ChannelList *item2 = (ChannelList*)lParam2;
d727 1
a727 1
			return CString(item1->name).CompareNoCase(item2->name);
d729 1
a729 1
			return CString(item2->name).CompareNoCase(item1->name);
d731 1
a731 1
			return _tstoi(item1->users) - _tstoi(item2->users);
d733 1
a733 1
			return _tstoi(item2->users) - _tstoi(item1->users);
d735 1
a735 1
			return CString(item1->desc).CompareNoCase(item2->desc);
d737 1
a737 1
			return CString(item2->desc).CompareNoCase(item1->desc);
d745 3
a747 3
	NM_LISTVIEW	*pNMListView = reinterpret_cast<NM_LISTVIEW*>(pNMHDR);
	int			iSubItem = pNMListView->iSubItem;
	bool		bSortOrder = m_bSortAscendingChanList[iSubItem];
d763 1
a763 1
	int	iSortColumn = (iSortCode & MLC_COLUMNMASK);
d802 4
a805 2
	Channel * curr_channel = FindChannelByName(channel);
	if (!curr_channel)
d808 1
a808 1
	for (POSITION pos = curr_channel->nicks.GetHeadPosition(); pos != NULL; )
d810 3
a812 3
		Nick* cur_nick = (Nick*)curr_channel->nicks.GetNext(pos);
		if (cur_nick->nick == name)
			return cur_nick;
d819 3
a821 2
	Channel * toaddchan = FindChannelByName(channel);
	if (!toaddchan)
d823 2
a824 1
	if (FindNickByName(channel, nick))
d826 4
a829 2
	Nick* toaddnick = NULL;
	if (toaddchan)
d831 5
a835 1
		toaddnick = new Nick;
d837 7
a843 7
		if (nick.Left(1) == _T("!"))
		{
			nick = nick.Mid(1);
			toaddnick->owner = _T("!");
		}
		else
			toaddnick->owner.Empty();
d845 49
a893 58
		if (nick.Left(1) == _T("*"))
		{
			nick = nick.Mid(1);
			toaddnick->protect = _T("*");
		}
		else
			toaddnick->protect.Empty();

		if (nick.Left(1) == _T("@@"))
		{
			toaddnick->op = _T("@@");
			toaddnick->hop.Empty();
			toaddnick->voice.Empty();
			toaddnick->uop.Empty();
			toaddnick->nick = nick.Mid(1);
		}
		else if (nick.Left(1) == _T("%"))
		{
			toaddnick->op.Empty();
			toaddnick->hop = _T("%");
			toaddnick->voice.Empty();
			toaddnick->uop.Empty();
			toaddnick->nick = nick.Mid(1);
		}
		else if (nick.Left(1) == _T("+"))
		{
			toaddnick->op.Empty();
			toaddnick->hop.Empty();
			toaddnick->voice = _T("+");
			toaddnick->uop.Empty();
			toaddnick->nick = nick.Mid(1);
		}
		else if (nick.Left(1) == _T("-"))
		{
			toaddnick->op.Empty();
			toaddnick->hop.Empty();
			toaddnick->voice.Empty();
			toaddnick->uop = _T("-");
			toaddnick->nick = nick.Mid(1);
		}
		else
		{
			toaddnick->op.Empty();
			toaddnick->hop.Empty();
			toaddnick->voice.Empty();
			toaddnick->nick = nick;
		}
		toaddchan->nicks.AddTail(toaddnick);
		if (toaddchan == m_pCurrentChannel)
		{
			uint16 itemnr = nickList.GetItemCount();
			itemnr = nickList.InsertItem(LVIF_PARAM, itemnr, 0, 0, 0, 0, (LPARAM)toaddnick);
			nickList.SetItemText(itemnr, 0, (LPCTSTR)toaddnick->nick);
			CString mode;
			mode.Format(_T("%s%s%s%s%s%s"), toaddnick->owner, toaddnick->protect, toaddnick->op, toaddnick->hop, toaddnick->voice, toaddnick->uop);
			nickList.SetItemText(itemnr, 1, (LPCTSTR)mode);
			UpdateNickCount();
		}
d895 1
a895 1
	return toaddnick;
d901 4
a904 2
	Channel* refresh = FindChannelByName(channel);
	if (!refresh)
d906 6
a911 1
	for (POSITION pos = refresh->nicks.GetHeadPosition(); pos != NULL; )
d913 5
a917 7
		Nick* curr_nick = (Nick*)refresh->nicks.GetNext(pos);
		uint16 itemnr = nickList.GetItemCount();
		itemnr = nickList.InsertItem(LVIF_PARAM, itemnr, 0, 0, 0, 0, (LPARAM)curr_nick);
		nickList.SetItemText(itemnr, 0, (LPCTSTR)curr_nick->nick);
		CString mode;
		mode.Format(_T("%s%s%s%s%s%s"), curr_nick->owner, curr_nick->protect, curr_nick->op, curr_nick->hop, curr_nick->voice, curr_nick->uop);
		nickList.SetItemText(itemnr, 1, (LPCTSTR)mode);
d924 3
a926 2
	Channel * update = FindChannelByName(channel);
	if (!update)
d928 21
a948 14
	POSITION pos1, pos2;
	for (pos1 = update->nicks.GetHeadPosition(); (pos2 = pos1) != NULL; )
	{
		Nick* curr_nick = (Nick*)update->nicks.GetNext(pos1);
		if (curr_nick->nick == nick)
		{
			if (update == m_pCurrentChannel)
			{
				LVFINDINFO find;
				find.flags = LVFI_PARAM;
				find.lParam = (LPARAM)curr_nick;
				sint32 result = nickList.FindItem(&find);
				nickList.DeleteItem(result);
				UpdateNickCount();
d950 2
a951 2
			update->nicks.RemoveAt(pos2);
			delete curr_nick;
d960 3
a962 2
	Channel * curr_channel = FindChannelByName(channel);
	if (!curr_channel)
d964 5
a968 2
	POSITION pos1, pos2;
	for (pos1 = curr_channel->nicks.GetHeadPosition(); (pos2 = pos1) != NULL; )
d970 3
a972 3
		Nick* cur_nick = (Nick*)curr_channel->nicks.GetNext(pos1);
		curr_channel->nicks.RemoveAt(pos2);
		delete cur_nick;
d978 4
a981 1
	for (POSITION pos = channelPtrList.GetHeadPosition(); pos != NULL; )
d983 2
a984 2
		Channel* cur_channel = (Channel*)channelPtrList.GetNext(pos);
		if (RemoveNick(cur_channel->name, nick))
d988 1
a988 1
				CString strMessage = message;
a989 1
				CString strLine;
d993 1
a993 1
				AddMessage(cur_channel->name, _T(""), strLine);
d1001 3
a1003 2
	Channel * update = FindChannelByName(channel);
	if (!update)
d1005 6
a1010 1
	for (POSITION pos = update->nicks.GetHeadPosition(); pos != NULL;)
d1012 2
a1013 2
		Nick* curr_nick = (Nick*)update->nicks.GetNext(pos);
		if (curr_nick->nick == oldnick)
d1015 1
a1015 1
			if ((update = m_pCurrentChannel) != NULL)
d1017 5
a1021 6
				LVFINDINFO find;
				find.flags = LVFI_PARAM;
				find.lParam = (LPARAM)curr_nick;
				sint32 itemnr = nickList.FindItem(&find);
				if (itemnr != ( -1))
					nickList.SetItemText(itemnr, 0, (LPCTSTR)newnick);
d1023 1
a1023 1
			curr_nick->nick = newnick;
d1032 3
a1034 2
	Channel * update = FindChannelByName(channel);
	if (!update)
d1036 7
a1042 1
	for (POSITION pos = update->nicks.GetHeadPosition(); pos != NULL; )
d1044 2
a1045 2
		Nick* curr_nick = (Nick*)update->nicks.GetNext(pos);
		if (curr_nick->nick == nick)
a1046 8
			sint32 itemnr = -1;
			if (( update = m_pCurrentChannel) != NULL )
			{
				LVFINDINFO find;
				find.flags = LVFI_PARAM;
				find.lParam = (LPARAM)curr_nick;
				itemnr = nickList.FindItem(&find);
			}
d1048 33
a1080 28
				curr_nick->protect = _T("*");
			if (mode == _T("-a"))
				curr_nick->protect.Empty();
			if (mode == _T("+h"))
				curr_nick->hop = _T("%");
			if (mode == _T("-h"))
				curr_nick->hop.Empty();
			if (mode == _T("+o"))
				curr_nick->op = _T("@@");
			if (mode == _T("-o"))
				curr_nick->op.Empty();
			if (mode == _T("+q"))
				curr_nick->owner = _T("!");
			if (mode == _T("-q"))
				curr_nick->owner.Empty();
			if (mode == _T("+u"))
				curr_nick->uop = _T("-");
			if (mode == _T("-u"))
				curr_nick->uop.Empty();
			if (mode == _T("+v"))
				curr_nick->voice = _T("+");
			if (mode == _T("-v"))
				curr_nick->voice.Empty();
			if (itemnr != ( -1))
			{
				CString mode;
				mode.Format(_T("%s%s%s%s%s%s"), curr_nick->owner, curr_nick->protect, curr_nick->op, curr_nick->hop, curr_nick->voice, curr_nick->uop);
				nickList.SetItemText(itemnr, 1, (LPCTSTR)mode);
d1100 10
a1109 8
			CString dir;
			dir = commands[0];
			if (dir == _T("+") || dir == _T("-"))
			{
				int currMode = 1;
				int currName = 0;
				int currNameBack = names.Find(_T(' '), currName);
				while (currMode < commands.GetLength())
d1111 3
a1113 2
					CString test;
					if( currNameBack > currName )
d1115 2
a1116 2
						test = names.Mid(currName, currNameBack - currName);
						currName = currNameBack + 1;
d1118 6
a1123 7
					if (ChangeMode(channel, test, dir + commands[currMode]))
						if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
							AddMessage(channel, _T(""), GetResString(IDS_IRC_SETSMODE), changer, dir + commands[currMode] , test);
					currNameBack = names.Find(_T(' '), currName + 1);
					if (currNameBack == -1)
						currNameBack = names.GetLength();
					currMode++;
d1136 3
a1138 2
	Channel * currchannel = FindChannelByName(oldnick);
	if (currchannel)
d1140 7
a1146 5
		currchannel->name = newnick;
		TCITEM item;
		item.mask = TCIF_PARAM;
		item.lParam = -1;
		int i;
d1149 2
a1150 2
			channelselect.GetItem(i, &item);
			if (((Channel*)item.lParam) == currchannel)
d1153 1
a1153 1
		if (((Channel*)item.lParam) != currchannel)
d1155 4
a1158 4
		item.mask = TCIF_TEXT;
		item.pszText = newnick.GetBuffer();
		item.cchTextMax = (int)newnick.GetLength() + 1;
		channelselect.SetItem(i, &item);
d1162 3
a1164 6
		Channel* cur_channel = (Channel*)channelPtrList.GetNext(pos);
		if (ChangeNick(cur_channel->name, oldnick, newnick))
		{
			if (!g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage())
				AddMessage(cur_channel->name, _T(""), GetResString(IDS_IRC_NOWKNOWNAS), oldnick, newnick);
		}
d1178 2
a1179 2
	Nick* item1 = (Nick*)lParam1;
	Nick* item2 = (Nick*)lParam2;
d1184 1
a1184 1
		return item1->nick.CompareNoCase(item2->nick);
d1186 1
a1186 1
		return item2->nick.CompareNoCase(item1->nick);
d1188 1
a1188 1
		if( item1->owner == _T("!") )
d1190 1
a1190 1
			if( item2->owner != _T("!") )
d1193 1
a1193 1
		else if( item2->owner == _T("!") )
d1197 1
a1197 1
		if( item1->protect == _T("*") )
d1199 1
a1199 1
			if( item2->protect != _T("*") )
d1202 1
a1202 1
		else if( item2->protect == _T("*") )
d1206 1
a1206 1
		if( item1->op == _T("@@") )
d1208 1
a1208 1
			if( item2->op != _T("@@") )
d1211 1
a1211 1
		else if( item2->op == _T("@@") )
d1215 1
a1215 1
		if( item1->hop == _T("%") )
d1217 1
a1217 1
			if( item2->hop != _T("%") )
d1220 1
a1220 1
		else if( item2->hop == _T("%") )
d1224 1
a1224 1
		if( item1->voice == _T("+") )
d1226 1
a1226 1
			if( item2->voice != _T("+") )
d1229 1
a1229 1
		else if( item2->voice == _T("+") )
d1233 1
a1233 1
		if( item1->uop == _T("-") )
d1235 1
a1235 1
			if( item2->uop != _T("-") )
d1238 1
a1238 1
		else if( item2->uop == _T("-") )
d1244 1
a1244 1
		if( item2->owner == _T("!") )
d1246 1
a1246 1
			if( item1->owner != _T("!") )
d1249 1
a1249 1
		else if( item1->owner == _T("!") )
d1253 1
a1253 1
		if( item2->protect == _T("*") )
d1255 1
a1255 1
			if( item1->protect != _T("*") )
d1258 1
a1258 1
		else if( item1->protect == _T("*") )
d1262 1
a1262 1
		if( item2->op == _T("@@") )
d1264 1
a1264 1
			if( item1->op != _T("@@") )
d1267 1
a1267 1
		else if( item1->op == _T("@@") )
d1271 1
a1271 1
		if( item2->hop == _T("%") )
d1273 1
a1273 1
			if( item1->hop != _T("%") )
d1276 1
a1276 1
		else if( item1->hop == _T("%") )
d1280 1
a1280 1
		if( item2->voice == _T("+") )
d1282 1
a1282 1
			if( item1->voice != _T("+") )
d1285 1
a1285 1
		else if( item1->voice == _T("+") )
d1289 1
a1289 1
		if( item2->uop == _T("-") )
d1291 1
a1291 1
			if( item1->uop != _T("-") )
d1294 1
a1294 1
		else if( item1->uop == _T("-") )
d1305 3
a1307 3
	NM_LISTVIEW	*pNMListView = reinterpret_cast<NM_LISTVIEW*>(pNMHDR);
	int			iSubItem = pNMListView->iSubItem;
	bool		bSortOrder = m_bSortAscendingNickList[iSubItem];
d1354 3
a1356 2
	int nickItem = nickList.GetSelectionMark();
	if (nickItem != -1)
d1358 4
a1361 3
		Nick * nick = (Nick*)nickList.GetItemData(nickItem);
		if (nick)
			AddMessage(nick->nick, _T(""), GetResString(IDS_IRC_PRIVATECHANSTART));
d1389 1
a1389 1
	COLORREF crLineColor = 0x1000000;
d1393 1
a1393 1
	int iLen = strTemp.GetLength();
d1410 1
a1410 1
		pUpdateChannel->log->AppendText(strTemp, RGB(0,0,128));
d1461 1
a1461 1
	COLORREF	crColor = crDefaultColor;
d1463 1
a1463 1
	bool		bBold = false, bItalic = false, bUnderline = false;
d1468 1
a1468 1
		pUpdateChannel->log->AppendText(strTemp, RGB(0,0,128));
d1499 1
a1499 1
					pUpdateChannel->log->AppendText(line.Left(iIndex), crColor | 0x2000000);
a1514 1
							{
d1516 2
a1517 4
								if (crColor == GetSysColor(COLOR_WINDOW))
									crColor = crDefaultColor;
							}
							if (line.GetLength() > iIndex && line.GetAt(iIndex) == 44 && line.GetAt(iIndex + 1) >= 48 && line.GetAt(iIndex + 1) <= 58)
d1519 2
a1520 2
								iIndex += 2;
								if (line.GetLength() > iIndex && line.GetAt(iIndex) >= 48 && line.GetAt(iIndex) <= 58)
d1522 8
a1530 1
							line = line.Mid(iIndex);
d1563 6
d1620 3
d1625 1
a1625 1
			pUpdateChannel->log->AppendText(line, crColor | 0x2000000);
d1652 3
d1657 2
a1658 2
			Channel * todel = (Channel*)channelPtrList.GetTail();
			RemoveChannel(todel->name);
d1667 5
a1671 3
	bool flag = false;
	Channel* curr_channel = FindChannelByName(source);
	if (curr_channel)
d1674 1
a1674 1
		flag = true;
d1676 2
a1677 1
	for (POSITION pos = channelPtrList.GetHeadPosition(); pos != NULL; )
d1679 3
a1681 3
		curr_channel = (Channel*)channelPtrList.GetNext(pos);
		Nick* curr_nick = FindNickByName(curr_channel->name, source);
		if (curr_nick)
d1683 2
a1684 2
			AddMessage(curr_channel->name, _T(""), _T("-%s- %s"), source, message);
			flag = true;
d1687 1
a1687 1
	if (flag == false)
d1714 4
a1717 3
		CString temp1, temp2;
		int test = temp.Find(3);
		if (test != -1)
d1719 3
a1721 2
			int testlength = temp.GetLength() - test;
			if (testlength < 2)
d1723 7
a1729 5
			temp1 = temp.Left(test);
			temp2 = temp.Mid(test + 2);
			if (testlength < 4)
				return temp1 + temp2;
			if (temp2[0] == 44 && temp2.GetLength() > 2)
d1731 1
a1731 1
				temp2 = temp2.Mid(2);
d1734 2
a1735 2
					if (temp2[0] == I)
						temp2 = temp2.Mid(1);
d1742 1
a1742 1
					if (temp2[0] == I)
d1744 2
a1745 2
						temp2 = temp2.Mid(1);
						if (temp2[0] == 44 && temp2.GetLength() > 2)
d1747 1
a1747 1
							temp2 = temp2.Mid(2);
d1750 2
a1751 2
								if (temp2[0] == I)
									temp2 = temp2.Mid(1);
d1757 1
a1757 1
			temp = temp1 + temp2;
d1766 3
a1768 2
	Channel * curr_channel = FindChannelByName(channel);
	if (!curr_channel)
d1770 4
a1773 3
	curr_channel->title = StripMessageOfFontCodes(title);
	if (curr_channel == m_pCurrentChannel)
		titleWindow.SetWindowText(curr_channel->title);
d1778 3
a1780 2
	Channel * refresh = FindChannelByName(channel);
	if (!refresh)
d1782 2
a1783 2
		refresh = (Channel*)channelPtrList.GetHead();
		if (!refresh)
d1786 5
a1790 4
	TCITEM item;
	item.mask = TCIF_PARAM;
	item.lParam = -1;
	int i;
d1793 2
a1794 2
		channelselect.GetItem(i, &item);
		if (((Channel*)item.lParam) == refresh)
d1797 1
a1797 1
	if (((Channel*)item.lParam) != refresh)
d1817 3
a1819 2
	CString send;
	GetDlgItemText(IDC_INPUTWINDOW, send);
d1824 1
a1824 1
	m_pCurrentChannel->history.Add(send);
d1827 1
a1827 1
	if (send.IsEmpty())
d1832 2
a1833 1
	if( send.Left(4) == _T("/hop") )
d1835 1
a1835 1
		if( m_pCurrentChannel->name.Left(1) == _T("#") )
d1837 3
a1839 4
			CString channel = m_pCurrentChannel->name;
			m_pIrcMain->SendString(_T("PART ") + channel );
			m_pIrcMain->SendString(_T("JOIN ") + channel );
			return;
d1843 2
a1844 1
	if (send.Left(1) == _T("/") && send.Left(3).MakeLower() != _T("/me") && send.Left(6).MakeLower() != _T("/sound"))
d1846 1
a1846 1
		if (send.Left(4) == _T("/msg"))
d1850 3
a1852 3
				send.Replace(_T('%'), _T('\004'));
				AddMessage(m_pCurrentChannel->name, _T(""), _T("* >> ") + send.Mid(5));
				send.Replace(_T('\004'), _T('%'));
d1856 13
a1868 25
				send.Replace(_T('%'), _T('\004'));
				AddStatus(_T("* >> ") + send.Mid(5));
				send.Replace(_T('\004'), _T('%'));
			}
			send = _T("/PRIVMSG") + send.Mid(4);
		}
		if( ((CString)send.Left(17)).CompareNoCase(_T("/PRIVMSG nickserv") )== 0)
		{
			send = _T("/ns") + send.Mid(17);
		}
		else if( ((CString)send.Left(17)).CompareNoCase(_T("/PRIVMSG chanserv") )== 0)
		{
			send = _T("/cs") + send.Mid(17);
		}
		else if( ((CString)send.Left(8)).CompareNoCase(_T("/PRIVMSG") )== 0)
		{
			int index = send.Find(_T(" "), send.Find(_T(" "))+1);
			send.Insert(index+1, _T(":"));
		}
		else if( ((CString)send.Left(6)).CompareNoCase(_T("/TOPIC") )== 0)
		{
			int index = send.Find(_T(" "), send.Find(_T(" "))+1);
			send.Insert(index+1, _T(":"));
		}
		m_pIrcMain->SendString(send.Mid(1));
d1873 1
a1873 1
		m_pIrcMain->SendString(send);
d1876 1
a1876 1
	if (send.Left(3) == _T("/me"))
d1878 4
a1881 5
		CString build;
		build.Format(_T("PRIVMSG %s :\001ACTION %s\001"), m_pCurrentChannel->name, send.Mid(4));
		send.Replace(_T('%'), _T('\004'));
		AddMessage(m_pCurrentChannel->name, _T(""), _T("* %s %s"), m_pIrcMain->GetNick(), send.Mid(4));
		m_pIrcMain->SendString(build);
d1884 5
a1888 5
	CString build = _T("PRIVMSG ") + m_pCurrentChannel->name + _T(" :") + send;
	m_pIrcMain->SendString(build);
	send.Replace(_T('%'), _T('\004'));
	AddMessage(m_pCurrentChannel->name, m_pIrcMain->GetNick(), send);
	send.Replace(_T('\004'), _T('%'));
d1899 3
a1901 1
	for (POSITION pos = channelPtrList.GetHeadPosition(); pos != NULL; )
d1903 3
a1905 3
		Channel* cur_channel = (Channel*)channelPtrList.GetNext(pos);
		if (cur_channel->name.CompareNoCase(name.Trim()) == 0 && (cur_channel->type == 4 || cur_channel->type == 5))
			return cur_channel;
d1912 2
a1913 1
	Channel * toadd = new Channel;
d1915 6
a1920 7
	toadd->name = name;
	toadd->log = new CPreparedRTFText();
	toadd->title = name;
	toadd->type = type;
	toadd->history_pos = 0;
	channelPtrList.AddTail(toadd);
	TCITEM newitem;
d1922 1
a1922 1
	newitem.mask = TCIF_PARAM | TCIF_TEXT;
d1924 5
a1928 5
		newitem.mask |= TCIF_IMAGE;
	newitem.lParam = (LPARAM)toadd;
	newitem.pszText = name.GetBuffer();
	newitem.cchTextMax = (int)name.GetLength() + 1;
	newitem.iImage = 1;
d1931 1
a1931 1
	channelselect.InsertItem(pos, &newitem);
d1940 1
a1940 1
	return toadd;
d1945 1
a1945 1
	Channel * todel = FindChannelByName(channel);
d1947 1
a1947 1
	if (!todel)
d1950 2
a1951 1
	TCITEM item;
d1953 2
a1954 2
	item.mask = TCIF_PARAM;
	item.lParam = -1;
a1955 2
	int i;

d1958 2
a1959 2
		channelselect.GetItem(i, &item);
		if (((Channel*)item.lParam) == todel)
d1962 2
a1963 1
	if (((Channel*)item.lParam) != todel)
d1965 1
d1968 1
a1968 1
	if (todel == m_pCurrentChannel)
d1989 4
a1992 4
	DeleteAllNick(todel->name);
	channelPtrList.RemoveAt(channelPtrList.Find(todel));
	delete todel->log;
	delete todel;
d1998 1
a1998 1
	Channel	   *pChannel;
d2015 1
a2015 1
	int			index = -1;
d2020 3
a2022 7
		index = serverChannelList.GetNextSelectedItem(pos);
		if (index > -1)
		{
			CString join;
			join = _T("JOIN ") + serverChannelList.GetItemText(index, 0);
			m_pIrcMain->SendString(join);
		}
d2040 1
a2040 4
	CString buffer;

	if ( (m_pCurrentChannel->history_pos == 0 && !down) ||
	     (m_pCurrentChannel->history_pos == m_pCurrentChannel->history.GetCount() && down) )
d2048 4
a2051 1
	buffer = (m_pCurrentChannel->history_pos == m_pCurrentChannel->history.GetCount()) ? _T("") : m_pCurrentChannel->history.GetAt(m_pCurrentChannel->history_pos);
d2053 2
a2054 2
	SetDlgItemText(IDC_INPUTWINDOW, buffer);
	inputWindow.SetSel(buffer.GetLength(), buffer.GetLength());
@


1.72
log
@Fixed list sorting direction while switching <thanks xrmb>;
Fixed initial IRC channel list sort mode when sort settings aren't in use;
Fixed initial IRC channel list sort direction;
Fixed sort directions while switching between two IRC lists;
Added list column definitions.
@
text
@d1529 1
a1529 1
					iIndex += 4;
@


1.71
log
@minor fix
@
text
@d50 2
a51 1
	memzero(&m_bSortAscending, sizeof(m_bSortAscending));
d141 1
a141 1
	strRes = GetResString(IDS_UUSERS);
d146 1
a146 1
	strRes = GetResString(IDS_DESCRIPTION);
d151 1
a151 1
	strRes = GetResString(IDS_IRC_NAME);
d196 2
a197 2
	nickList.InsertColumn(0, GetResString(IDS_IRC_NICK), LVCFMT_LEFT, 90);
	nickList.InsertColumn(1, GetResString(IDS_STATUS), LVCFMT_LEFT, 70);
d199 3
a201 3
	serverChannelList.InsertColumn(0, GetResString(IDS_IRC_NAME), LVCFMT_LEFT, 203);
	serverChannelList.InsertColumn(1, GetResString(IDS_UUSERS), LVCFMT_RIGHT, 50);
	serverChannelList.InsertColumn(2, GetResString(IDS_DESCRIPTION), LVCFMT_LEFT, 350);
d235 4
a238 3
	m_bSortAscending[1] = true;
	nickList.SetSortArrow(1, true);
	nickList.SortItems(SortProcNick, 1);
d243 6
a248 1
		SortInit(11);
d727 3
a729 2
	ChannelList * item1 = (ChannelList*)lParam1;
	ChannelList* item2 = (ChannelList*)lParam2;
d732 12
a743 12
		case 0:
		return CString(item1->name).CompareNoCase(item2->name);
		case 0+MLC_SORTDESC:
		return CString(item2->name).CompareNoCase(item1->name);
		case 1:
		return _tstoi(item1->users) - _tstoi(item2->users);
		case 1+MLC_SORTDESC:
		return _tstoi(item2->users) - _tstoi(item1->users);
		case 2:
		return CString(item1->desc).CompareNoCase(item2->desc);
		case 2+MLC_SORTDESC:
		return CString(item2->desc).CompareNoCase(item1->desc);
d745 1
a745 1
		return 0;
d751 12
a762 4
	NM_LISTVIEW * pNMListView = (NM_LISTVIEW*)pNMHDR;
	m_bSortAscending[pNMListView->iSubItem] = !m_bSortAscending[pNMListView->iSubItem];
	serverChannelList.SetSortArrow(pNMListView->iSubItem, (m_bSortAscending[pNMListView->iSubItem]));
	serverChannelList.SortItems(SortProcChanL, pNMListView->iSubItem + ((m_bSortAscending[pNMListView->iSubItem]) ? MLC_SORTASC : MLC_SORTDESC));
d775 1
d1158 1
a1158 1
	case 0:
d1160 1
a1160 1
	case 0+MLC_SORTDESC:
d1162 1
a1162 1
	case 1:
d1217 2
a1218 1
	case 1+MLC_SORTDESC:
d1280 10
a1289 4
	NM_LISTVIEW * pNMListView = (NM_LISTVIEW*)pNMHDR;
	m_bSortAscending[pNMListView->iSubItem] = !m_bSortAscending[pNMListView->iSubItem];
	nickList.SetSortArrow(pNMListView->iSubItem, m_bSortAscending[pNMListView->iSubItem]);
	nickList.SortItems(SortProcNick, pNMListView->iSubItem + ((m_bSortAscending[pNMListView->iSubItem]) ? MLC_SORTASC : MLC_SORTDESC));
@


1.70
log
@Small fix
@
text
@d1469 6
@


1.69
log
@minor fix
@
text
@d308 1
a308 1
				AddInfoMessage(nick->nick, GetResString(IDS_IRC_PRIVATECHANSTART));
d487 1
a487 1
				AddInfoMessage(chan->name, GetResString(IDS_IRC_SLAPMSG), m_pIrcMain->GetNick(), nick->nick);
d962 1
a962 1
				AddInfoMessage(cur_channel->name, strLine);
d1055 1
a1055 1
					AddInfoMessage(channel, GetResString(IDS_IRC_SETSMODE), changer, commands, names);
d1077 1
a1077 1
							AddInfoMessage(channel, GetResString(IDS_IRC_SETSMODE), changer, dir + commands[currMode] , test);
d1088 1
a1088 1
		AddInfoMessage(channel, GetResString(IDS_IRC_NOTSUPPORTED));
d1121 1
a1121 1
				AddInfoMessage(cur_channel->name, GetResString(IDS_IRC_NOWKNOWNAS), oldnick, newnick);
d1310 1
a1310 1
			AddInfoMessage(nick->nick, GetResString(IDS_IRC_PRIVATECHANSTART));
d1323 4
a1326 1
	va_list argptr;
d1328 1
a1328 2
	CString temp;
	temp.FormatV(line, argptr);
d1330 2
a1331 5
	CString m_dwTimeStamp;
	if (g_eMuleApp.m_pGlobPrefs->GetIRCAddTimestamp())
		m_dwTimeStamp = CTime::GetCurrentTime().Format(_T("%X: "));
	Channel* update_channel = (Channel*)channelPtrList.GetHead();
	if (!update_channel)
d1333 2
a1334 1
	line = StripMessageOfFontCodes(temp);
d1340 1
a1340 1
	temp = m_pIrcMain->GetNick();
d1342 1
a1342 1
	int iLen = temp.GetLength();
d1344 1
a1344 1
	if (iLen > 0 && line.Left(iLen) == temp)
a1354 9
	update_channel->log->AppendText(m_dwTimeStamp, RGB(0,0,128));
	update_channel->log->AppendText(line, crLineColor);
	if (m_pCurrentChannel == update_channel)
	{
		statusWindow.SetHyperText(update_channel->log);
		return;
	}
	SetActivity(update_channel->name, true);
}
a1355 10
void CIrcWnd::AddInfoMessage(CString channelName, CString line, ...)
{
	if (channelName.IsEmpty())
		return;
	va_list argptr;
	va_start(argptr, line);
	CString temp;
	temp.FormatV(line, argptr);
	va_end(argptr);
	CString m_dwTimeStamp;
a1356 3
		m_dwTimeStamp = CTime::GetCurrentTime().Format(_T("%X: "));
	Channel* update_channel = FindChannelByName(channelName);
	if (!update_channel)
d1358 2
a1359 4
		if (channelName.Left(1) == _T("#"))
			update_channel = NewChannel(channelName, 4);
		else
			update_channel = NewChannel(channelName, 5);
a1360 3
	line = StripMessageOfFontCodes(temp);
	line += _T('\n');
	line.Replace(_T('\004'), _T('%'));
d1362 1
a1362 1
	COLORREF crLineColor = 0x1000000;
d1364 1
a1364 7
	if (line.Mid(0, 1) == _T("*"))
		crLineColor = RGB(153, 51, 0);
	else if (line.Mid(0, 1) == _T("-"))
		crLineColor = RGB(153, 51, 102);
	update_channel->log->AppendText(m_dwTimeStamp, RGB(0,0,128));
	update_channel->log->AppendText(line, crLineColor);
	if (m_pCurrentChannel == update_channel)
d1366 1
a1366 1
		statusWindow.SetHyperText(update_channel->log);
d1369 1
a1369 1
	SetActivity(update_channel->name, true);
d1374 1
a1374 1
	if (channelName.IsEmpty() || targetname.IsEmpty())
d1376 5
a1380 1
	va_list argptr;
d1382 2
a1383 3
	CString temp;
	temp.FormatV(line, argptr);
	line = temp;
d1386 2
a1387 14
	CString m_dwTimeStamp;

	if (g_eMuleApp.m_pGlobPrefs->GetIRCAddTimestamp())
		m_dwTimeStamp = CTime::GetCurrentTime().Format(_T("%X: "));

	Channel* update_channel = FindChannelByName(channelName);

	if (!update_channel)
	{
		if (channelName.Left(1) == _T("#"))
			update_channel = NewChannel(channelName, 4);
		else
			update_channel = NewChannel(channelName, 5);
	}
d1400 12
a1411 2
	COLORREF	crColor = GetSysColor(COLOR_WINDOWTEXT);
	int			iIndex = 0;
d1414 9
a1422 2
	update_channel->log->AppendText(m_dwTimeStamp, RGB(0,0,128));
	update_channel->log->AppendText(_T("<") + targetname + _T("> "), (m_pIrcMain->GetNick() == targetname) ? RGB(128, 0, 128) : RGB(51, 51, 153));
d1448 1
a1448 1
					update_channel->log->AppendText(line.Left(iIndex), crColor | 0x2000000);
d1462 1
a1462 3

							int iColorIndex = _tstoi(line.Left(iIndex));

d1467 1
a1467 1
									crColor = GetSysColor(COLOR_WINDOWTEXT);
d1476 1
a1476 1
						crColor = GetSysColor(COLOR_WINDOWTEXT);
d1483 1
a1483 1
				crColor = GetSysColor(COLOR_WINDOWTEXT);
d1555 1
a1555 1
			update_channel->log->AppendText(line, crColor | 0x2000000);
d1560 1
a1560 1
	if (m_pCurrentChannel == update_channel)
d1562 1
a1562 1
		statusWindow.SetHyperText(update_channel->log);
d1565 1
a1565 1
	SetActivity(update_channel->name, true);
d1598 1
a1598 1
		AddInfoMessage(source, _T("-%s- %s"), source, message);
d1607 1
a1607 1
			AddInfoMessage(curr_channel->name, _T("-%s- %s"), source, message);
d1614 1
a1614 1
			AddInfoMessage(m_pCurrentChannel->name, _T("-%s- %s"), source, message);
d1765 1
a1765 1
				AddInfoMessage(m_pCurrentChannel->name , _T("* >> ") + send.Mid(5));
d1807 1
a1807 1
		AddInfoMessage(m_pCurrentChannel->name, _T("* %s %s"), m_pIrcMain->GetNick(), send.Mid(4));
@


1.68
log
@check for existing nick before creating new one
@
text
@d633 1
d635 1
a635 1
	if (m_pCurrentChannel->type == 2)
d640 1
d643 2
d1614 2
d1898 1
d1901 1
d1903 1
d1906 1
d1908 1
@


1.67
log
@removed a double ";"
@
text
@d805 2
@


1.66
log
@IRC now supports font style coded messages + some fixes
@
text
@d1436 1
a1436 1
	COLORREF	crColor = GetSysColor(COLOR_WINDOWTEXT);;
@


1.65
log
@IRC/Messages "Close" & "Send" buttons are now disabled until there is an open closeable tab
@
text
@d1331 3
a1333 1
	COLORREF crLineColor = -1;
d1335 1
d1337 1
d1382 3
a1384 1
	COLORREF crLineColor = -1;
d1424 3
a1426 2
	line.Remove(_T('\002'));
	line.Remove(_T('\017'));
a1427 1
	line.Remove(_T('\037'));
d1431 4
a1434 1
	line += _T('\n');
d1436 3
a1438 1
	COLORREF crNickColor = RGB(51, 51, 153);
a1439 2
	if (m_pIrcMain->GetNick() == targetname)
		crNickColor = RGB(128, 0, 128);
d1441 1
a1441 4
	update_channel->log->AppendText(_T('<') + targetname + _T("> "), crNickColor);

	COLORREF crColor = GetSysColor(COLOR_WINDOWTEXT);

d1444 1
a1444 2
		int iIndex = line.Find(3);
		if (iIndex != -1 && iIndex < line.GetLength())
d1446 1
a1446 4
			if (iIndex > 0)
				update_channel->log->AppendText(line.Left(iIndex), crColor);
			line = line.Mid(iIndex + 1);
			if (line.GetLength() > 1)
d1448 23
a1470 3
				iIndex = 1;
				if (line.GetAt(1) >= 48 && line.GetAt(1) <= 58)
					iIndex++;
d1472 1
a1472 2
				int iColorIndex = _tstoi(line.Left(iIndex));
				if (iColorIndex < 16)
d1474 23
a1496 2
					crColor = _acrColorPal[iColorIndex];
					if (crColor == GetSysColor(COLOR_WINDOW))
d1499 62
a1560 1
				line = line.Mid(iIndex);
a1561 2
			else
				line.Empty();
d1563 1
a1563 1
		else
d1565 12
a1576 1
			update_channel->log->AppendText(line, crColor);
a1580 1

@


1.64
log
@Fixed potential crash which can be caused by control characters in server name and server description.
@
text
@d242 4
d570 1
d580 1
d705 1
d1746 1
d1754 1
d1763 1
d1770 2
d1812 2
@


1.63
log
@Improve image list filling.
@
text
@d1416 1
d1531 1
@


1.62
log
@minor change
@
text
@d30 1
a30 1
COLORREF _acrColorPal[16] = {
d158 7
d169 2
a170 4
	m_imageList.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_CHAT), 16, 16));
	m_imageList.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_MESSAGE), 16, 16));
	m_imageList.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_MPENDING), 16, 16));
	LoadImgLstIcon(NULL, 0, 0);
d174 1
@


1.61
log
@minor correction
@
text
@d1428 1
a1428 4
			{
				CString strPart = line.Left(iIndex);
				update_channel->log->AppendText(strPart, crColor);
			}
@


1.60
log
@IRC channel messages now show color coded messages
@
text
@d1441 1
d1443 3
@


1.59
log
@better string processing
@
text
@d30 6
d1390 1
d1392 1
d1395 1
d1397 1
d1405 6
a1410 1
	line = StripMessageOfFontCodes(line);
d1412 1
a1412 1
	line.Replace(_T('\004'), _T('%'));
d1414 1
a1416 1
	targetname = _T('<') + targetname + _T("> ");
d1418 37
a1454 2
	update_channel->log->AppendText(targetname, crNickColor);
	update_channel->log->AppendText(line);
@


1.58
log
@reverted last changes
@
text
@d797 1
a797 1
			toaddnick->owner = _T("");
d805 1
a805 1
			toaddnick->protect = _T("");
d810 3
a812 3
			toaddnick->hop = _T("");
			toaddnick->voice = _T("");
			toaddnick->uop = _T("");
d817 1
a817 1
			toaddnick->op = _T("");
d819 2
a820 2
			toaddnick->voice = _T("");
			toaddnick->uop = _T("");
d825 2
a826 2
			toaddnick->op = _T("");
			toaddnick->hop = _T("");
d828 1
a828 1
			toaddnick->uop = _T("");
d833 3
a835 3
			toaddnick->op = _T("");
			toaddnick->hop = _T("");
			toaddnick->voice = _T("");
d841 3
a843 3
			toaddnick->op = _T("");
			toaddnick->hop = _T("");
			toaddnick->voice = _T("");
d990 1
a990 1
				curr_nick->protect = _T("");
d994 1
a994 1
				curr_nick->hop = _T("");
d998 1
a998 1
				curr_nick->op = _T("");
d1002 1
a1002 1
				curr_nick->owner = _T("");
d1006 1
a1006 1
				curr_nick->uop = _T("");
d1010 1
a1010 1
				curr_nick->voice = _T("");
@


1.57
log
@minor string processing changes
@
text
@d1309 2
a1310 1
	line = StripMessageOfFontCodes(temp) + _T('\n');
d1356 2
a1357 1
	line = StripMessageOfFontCodes(temp) + _T('\n');
d1395 2
a1396 1
	line = StripMessageOfFontCodes(line) + _T('\n');
@


1.56
log
@formatting + a more correct output of status messages
@
text
@d1309 1
a1309 2
	line = StripMessageOfFontCodes(temp);
	line += _T('\n');
d1355 1
a1355 2
	line = StripMessageOfFontCodes(temp);
	line += _T('\n');
d1393 1
a1393 2
	line = StripMessageOfFontCodes(line);
	line += _T('\n');
d1469 1
@


1.55
log
@Some string processing improvements (thx Aw3)
@
text
@d987 24
a1010 24
			if (mode == "+a")
				curr_nick->protect = "*";
			if (mode == "-a")
				curr_nick->protect = "";
			if (mode == "+h")
				curr_nick->hop = "%";
			if (mode == "-h")
				curr_nick->hop = "";
			if (mode == "+o")
				curr_nick->op = "@@";
			if (mode == "-o")
				curr_nick->op = "";
			if (mode == "+q")
				curr_nick->owner = "!";
			if (mode == "-q")
				curr_nick->owner = "";
			if (mode == "+u")
				curr_nick->uop = "-";
			if (mode == "-u")
				curr_nick->uop = "";
			if (mode == "+v")
				curr_nick->voice = "+";
			if (mode == "-v")
				curr_nick->voice = "";
d1037 1
a1037 1
			if (dir == "+" || dir == "-")
d1121 1
a1121 1
		if( item1->owner == "!" )
d1123 1
a1123 1
			if( item2->owner != "!" )
d1126 1
a1126 1
		else if( item2->owner == "!" )
d1130 1
a1130 1
		if( item1->protect == "*" )
d1132 1
a1132 1
			if( item2->protect != "*" )
d1135 1
a1135 1
		else if( item2->protect == "*" )
d1139 1
a1139 1
		if( item1->op == "@@" )
d1141 1
a1141 1
			if( item2->op != "@@" )
d1144 1
a1144 1
		else if( item2->op == "@@" )
d1148 1
a1148 1
		if( item1->hop == "%" )
d1150 1
a1150 1
			if( item2->hop != "%" )
d1153 1
a1153 1
		else if( item2->hop == "%" )
d1157 1
a1157 1
		if( item1->voice == "+" )
d1159 1
a1159 1
			if( item2->voice != "+" )
d1162 1
a1162 1
		else if( item2->voice == "+" )
d1166 1
a1166 1
		if( item1->uop == "-" )
d1168 1
a1168 1
			if( item2->uop != "-" )
d1171 1
a1171 1
		else if( item2->uop == "-" )
d1176 1
a1176 1
		if( item2->owner == "!" )
d1178 1
a1178 1
			if( item1->owner != "!" )
d1181 1
a1181 1
		else if( item1->owner == "!" )
d1185 1
a1185 1
		if( item2->protect == "*" )
d1187 1
a1187 1
			if( item1->protect != "*" )
d1190 1
a1190 1
		else if( item1->protect == "*" )
d1194 1
a1194 1
		if( item2->op == "@@" )
d1196 1
a1196 1
			if( item1->op != "@@" )
d1199 1
a1199 1
		else if( item1->op == "@@" )
d1203 1
a1203 1
		if( item2->hop == "%" )
d1205 1
a1205 1
			if( item1->hop != "%" )
d1208 1
a1208 1
		else if( item1->hop == "%" )
d1212 1
a1212 1
		if( item2->voice == "+" )
d1214 1
a1214 1
			if( item1->voice != "+" )
d1217 1
a1217 1
		else if( item1->voice == "+" )
d1221 1
a1221 1
		if( item2->uop == "-" )
d1223 1
a1223 1
			if( item1->uop != "-" )
d1226 1
a1226 1
		else if( item1->uop == "-" )
d1260 2
a1261 2
		menuNick.AppendMenu(MF_STRING, Irc_Owner, "Owner");
		menuNick.AppendMenu(MF_STRING, Irc_DeOwner, "DeOwner");
d1268 2
a1269 2
		menuNick.AppendMenu(MF_STRING, Irc_Protect, "Protect");
		menuNick.AppendMenu(MF_STRING, Irc_DeProtect, "DeProtect");
d1305 1
a1305 1
		m_dwTimeStamp = CTime::GetCurrentTime().Format("%X: ");
d1313 10
a1322 1
	if (line.Mid(0, 1) == "*")
d1324 1
a1324 1
	else if (line.Mid(0, 1) == "-")
d1347 1
a1347 1
		m_dwTimeStamp = CTime::GetCurrentTime().Format("%X: ");
d1351 1
a1351 1
		if (channelName.Left(1) == "#")
d1360 1
a1360 1
	if (line.Mid(0, 1) == "*")
d1362 1
a1362 1
	else if (line.Mid(0, 1) == "-")
d1386 1
a1386 1
		m_dwTimeStamp = CTime::GetCurrentTime().Format("%X: ");
d1390 1
a1390 1
		if (channelName.Left(1) == "#")
d1808 1
a1808 1
	buffer = (m_pCurrentChannel->history_pos == m_pCurrentChannel->history.GetCount()) ? "" : m_pCurrentChannel->history.GetAt(m_pCurrentChannel->history_pos);
@


1.54
log
@fixed IRC Nick/Status sorting; joined channel / private chat on IRC gets focus
@
text
@d791 1
a791 1
		if (nick.Left(1) == "!")
d794 1
a794 1
			toaddnick->owner = "!";
d797 1
a797 1
			toaddnick->owner = "";
d799 1
a799 1
		if (nick.Left(1) == "*")
d802 1
a802 1
			toaddnick->protect = "*";
d805 1
a805 1
			toaddnick->protect = "";
d807 1
a807 1
		if (nick.Left(1) == "@@")
d809 4
a812 4
			toaddnick->op = "@@";
			toaddnick->hop = "";
			toaddnick->voice = "";
			toaddnick->uop = "";
d815 1
a815 1
		else if (nick.Left(1) == "%")
d817 4
a820 4
			toaddnick->op = "";
			toaddnick->hop = "%";
			toaddnick->voice = "";
			toaddnick->uop = "";
d823 1
a823 1
		else if (nick.Left(1) == "+")
d825 4
a828 4
			toaddnick->op = "";
			toaddnick->hop = "";
			toaddnick->voice = "+";
			toaddnick->uop = "";
d831 1
a831 1
		else if (nick.Left(1) == "-")
d833 4
a836 4
			toaddnick->op = "";
			toaddnick->hop = "";
			toaddnick->voice = "";
			toaddnick->uop = "-";
d841 3
a843 3
			toaddnick->op = "";
			toaddnick->hop = "";
			toaddnick->voice = "";
d932 1
a932 2
				strMessage.TrimLeft(_T(' '));
				strMessage.TrimRight(_T(' '));
d936 1
a936 1
					strLine = strLine.Left(strLine.GetLength() - 3);
@


1.53
log
@Minor corrections; Removed unrequired initialization of CString members
@
text
@d40 1
a40 1
	m_pIrcMain = 0;
d43 1
a43 1
	m_pCurrentChannel = 0;
d124 6
d183 2
a184 2
	nickList.InsertColumn(0, GetResString(IDS_IRC_NICK), LVCFMT_LEFT, 135);
	nickList.InsertColumn(1, _T("*"), LVCFMT_CENTER, 20);
d187 1
a187 1
	serverChannelList.InsertColumn(1, GetResString(IDS_UUSERS), LVCFMT_LEFT, 50);
d222 3
a225 1
	nickList.SortItems(SortProcNick, 0);
d268 1
a268 1
	int nickItem = nickList.GetSelectionMark();
d270 1
a270 1
//	int chanLItem= serverChannelList.GetSelectionMark();
a594 3
//	int index = -1;
//	LPNMLISTVIEW pNMLV = reinterpret_cast<LPNMLISTVIEW>(pNMHDR);
	// TODO: Add your control notification handler code here
d605 1
a637 1
	ON_NOTIFY(NM_CLICK, IDC_NICKLIST, OnNMClickNicklist)
d954 1
a954 1
			if (update = m_pCurrentChannel)
d981 1
a981 1
			if (update = m_pCurrentChannel)
d1112 1
a1112 1
	Nick * item1 = (Nick*)lParam1;
d1114 1
d1117 30
a1146 6
		case 0:
	//	if( item1->mode == item2->mode )
	//	return CString(item1->nick).CompareNoCase(item2->nick);
		if (item1->owner == "!")
			return -1;
		if (item2->owner == "!")
d1148 8
a1155 3
		if (item1->op == "@@")
			return -1;
		if (item2->op == "@@")
d1157 8
a1164 3
		if (item1->hop == "%")
			return -1;
		if (item2->hop == "%")
d1166 8
a1173 3
		if (item1->voice == "+")
			return -1;
		if (item2->voice == "+")
d1175 27
a1201 5
		return 0;
		case 0+MLC_SORTDESC:
		if (item1->owner == "!")
			return -1;
		if (item2->owner == "!")
d1203 8
a1210 3
		if (item1->op == "@@")
			return -1;
		if (item2->op == "@@")
d1212 8
a1219 3
		if (item1->hop == "%")
			return -1;
		if (item2->hop == "%")
d1221 8
a1228 3
		if (item1->voice == "+")
			return -1;
		if (item2->voice == "+")
d1230 2
a1231 2
		return 0;
		default:
d1240 1
a1240 1
//	nickList.SetSortArrow(pNMListView->iSubItem, m_bSortAscending[pNMListView->iSubItem]);
a1290 7
void CIrcWnd::OnNMClickNicklist(NMHDR *pNMHDR, LRESULT *pResult)
{
	//LPNMLISTVIEW pNMLV = reinterpret_cast<LPNMLISTVIEW>(pNMHDR);
	// TODO: Add your control notification handler code here
	*pResult = 0;
}

d1679 1
a1679 1
	if (type > 2)
d1685 8
a1692 1
	channelselect.InsertItem(channelselect.GetItemCount(), &newitem);
@


1.52
log
@minor changes
@
text
@d925 10
a934 1
				AddInfoMessage(cur_channel->name, GetResString(IDS_IRC_HASQUIT), nick, message);
d1040 1
a1040 1
					CString test = _T("");
d1229 1
a1229 1
	CString m_dwTimeStamp = _T("");
d1262 1
a1262 1
	CString m_dwTimeStamp = _T("");
d1301 1
a1301 1
	CString m_dwTimeStamp = _T("");
@


1.51
log
@fixed security exploit in IRC module and Web server (from official) [katsyonak]
@
text
@d1031 6
a1036 3
					CString test;
					test = names.Mid(currName, currNameBack - currName);
					currName = currNameBack + 1;
a1219 2
	char osTime[30];
	_strtime(osTime);
d1222 1
a1222 1
		m_dwTimeStamp.Format(_T("%s: "), osTime);
a1252 2
	char osTime[30];
	_strtime(osTime);
d1255 1
a1255 1
		m_dwTimeStamp.Format(_T("%s: "), osTime);
a1291 2
	char osTime[30];
	_strtime(osTime);
d1294 1
a1294 1
		m_dwTimeStamp.Format(_T("%s: "), osTime);
@


1.50
log
@minor improvements
@
text
@d547 2
a550 2
		nItem = channelselect.GetCurSel();
	if (nItem == (-1))
d595 3
a597 1
	if (cur_sel == ( -1))
a598 1
	channelselect.GetItem(cur_sel, &item);
d1496 2
a1497 1
	if (!m_bConnected)
d1499 1
a1499 1
	if (send.Left(1) == "/" && send.Left(3) != "/me")
d1501 12
a1512 1
		if (send.Left(4) == "/msg")
d1517 1
a1517 1
				AddInfoMessage(m_pCurrentChannel->name , CString("* >> ") + send.Mid(5));
d1523 1
a1523 1
				AddStatus(CString(_T("* >> ")) + send.Mid(5));
d1526 19
a1544 2
			send = CString(_T("/PRIVMSG")) + send.Mid(4);

a1545 4
		if (((CString)send.Left(17)).CompareNoCase(_T("/PRIVMSG nickserv")) == 0)
			send = CString(_T("/ns")) + send.Mid(17);
		if (((CString)send.Left(17)).CompareNoCase(_T("/PRIVMSG chanserv")) == 0)
			send = CString(_T("/cs")) + send.Mid(17);
d1554 1
a1554 1
	if (send.Left(3) == "/me")
a1559 1
		send.Replace(_T('\004'), _T('%'));
@


1.49
log
@replaced TrackPopupMenu over TrackPopupMenuEx
@
text
@d80 3
a82 6
	if (m_bConnected)
		GetDlgItem(IDC_BN_IRCCONNECT)->SetWindowText(GetResString(IDS_IRC_DISCONNECT));
	else
		GetDlgItem(IDC_BN_IRCCONNECT)->SetWindowText(GetResString(IDS_IRC_CONNECT));
	GetDlgItem(IDC_CHATSEND)->SetWindowText(GetResString(IDS_IRC_SEND));
	GetDlgItem(IDC_CLOSECHAT)->SetWindowText(GetResString(IDS_FD_CLOSE));
d1327 1
a1327 1
		GetDlgItem(IDC_BN_IRCCONNECT)->SetWindowText(GetResString(IDS_IRC_DISCONNECT));
d1333 1
a1333 1
		GetDlgItem(IDC_BN_IRCCONNECT)->SetWindowText(GetResString(IDS_IRC_CONNECT));
d1485 2
a1486 2
	GetDlgItem(IDC_INPUTWINDOW)->GetWindowText(send);
	GetDlgItem(IDC_INPUTWINDOW)->SetWindowText(_T(""));
d1689 1
a1689 1
	GetDlgItem(IDC_INPUTWINDOW)->SetWindowText(buffer);
@


1.48
log
@Improved string processing
@
text
@d745 1
a745 1
	menuChanL.TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this);
d1180 1
a1180 1
		menuNick.TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this);
@


1.47
log
@Improved string processing
@
text
@d1314 1
a1314 1
	targetname = _T("<") + targetname + _T("> ");
@


1.46
log
@underline/apostroph bugfix from official, see forum.emule-project.net/index.php?showtopic=40271
@
text
@d1030 1
a1030 1
				int currNameBack = names.Find(" ", currName);
d1039 1
a1039 1
					currNameBack = names.Find(_T(" "), currName + 1);
d1228 2
a1229 2
	line += "\n";
	line.Replace(_T("\004"), _T("%"));
d1268 2
a1269 2
	line += "\n";
	line.Replace(_T("\004"), _T("%"));
d1309 2
a1310 2
	line += "\n";
	line.Replace(_T("\004"), _T("%"));
d1380 5
a1384 5
	temp.Replace("\002","");
	temp.Replace("\003","");
	temp.Replace("\017","");
	temp.Replace("\026","");
	temp.Replace("\037","");
d1506 1
a1506 1
				send.Replace(_T("%"), _T("\004"));
d1508 1
a1508 1
				send.Replace(_T("\004"), _T("%"));
d1512 1
a1512 1
				send.Replace(_T("%"), _T("\004"));
d1514 1
a1514 1
				send.Replace(_T("\004"), _T("%"));
d1535 1
a1535 1
		send.Replace(_T("%"), _T("\004"));
d1537 1
a1537 1
		send.Replace(_T("\004"), _T("%"));
d1543 1
a1543 1
	send.Replace(_T("%"), _T("\004"));
d1545 1
a1545 1
	send.Replace(_T("\004"), _T("%"));
@


1.45
log
@Improved context menu creation
@
text
@d1384 1
a1384 1
	temp.Replace("\047","");
@


1.44
log
@list processing optimization
@
text
@d737 3
a739 1
	POINT point;
d741 7
a747 8
	CPoint p = point;
	ScreenToClient(&p);
	CTitleMenu m_ChanLMenu;
	m_ChanLMenu.CreatePopupMenu();
	m_ChanLMenu.AddMenuTitle(GetResString(IDS_IRC_CHANNEL));
	m_ChanLMenu.AppendMenu(MF_STRING, Irc_Join, GetResString(IDS_IRC_JOIN));
	m_ChanLMenu.TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this);
	VERIFY(m_ChanLMenu.DestroyMenu());
d1157 3
a1159 1
		POINT point;
d1161 5
a1165 7
		CPoint p = point;
		ScreenToClient(&p);
		CTitleMenu m_NickMenu;
		m_NickMenu.CreatePopupMenu();
		m_NickMenu.AddMenuTitle(GetResString(IDS_IRC_NICK));
		m_NickMenu.AppendMenu(MF_STRING, Irc_Priv, GetResString(IDS_IRC_PRIVMESSAGE));
	//	m_NickMenu.AppendMenu(MF_STRING,Irc_AddFriend,GetResString(IDS_IRC_ADDTOFRIENDLIST));
d1167 16
a1182 15
	//	m_NickMenu.AppendMenu(MF_STRING,Irc_SendLink, (CString)GetResString(IDS_IRC_SENDLINK) + GetSendFileString() );
		m_NickMenu.AppendMenu(MF_STRING, Irc_Slap, GetResString(IDS_IRC_SLAP));
		m_NickMenu.AppendMenu(MF_STRING, Irc_Owner, "Owner");
		m_NickMenu.AppendMenu(MF_STRING, Irc_DeOwner, "DeOwner");
		m_NickMenu.AppendMenu(MF_STRING, Irc_Op, GetResString(IDS_IRC_OP));
		m_NickMenu.AppendMenu(MF_STRING, Irc_DeOp, GetResString(IDS_IRC_DEOP));
		m_NickMenu.AppendMenu(MF_STRING, Irc_HalfOp, GetResString(IDS_IRC_HALFOP));
		m_NickMenu.AppendMenu(MF_STRING, Irc_DeHalfOp, GetResString(IDS_IRC_DEHALFOP));
		m_NickMenu.AppendMenu(MF_STRING, Irc_Voice, GetResString(IDS_IRC_VOICE));
		m_NickMenu.AppendMenu(MF_STRING, Irc_DeVoice, GetResString(IDS_IRC_DEVOICE));
		m_NickMenu.AppendMenu(MF_STRING, Irc_Protect, "Protect");
		m_NickMenu.AppendMenu(MF_STRING, Irc_DeProtect, "DeProtect");
		m_NickMenu.AppendMenu(MF_STRING, Irc_Kick, GetResString(IDS_IRC_KICK));
		m_NickMenu.TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this);
		VERIFY(m_NickMenu.DestroyMenu());
@


1.43
log
@Improved hash to string conversion
@
text
@d52 1
a52 1
	for (pos1 = channelLPtrList.GetHeadPosition();(pos2 = pos1) != NULL;)
d54 1
a54 2
		channelLPtrList.GetNext(pos1);
		ChannelList* cur_channel = (ChannelList*)channelLPtrList.GetAt(pos2);
d657 1
a657 1
	for (pos1 = channelLPtrList.GetHeadPosition();(pos2 = pos1) != NULL;)
d659 1
a659 2
		channelLPtrList.GetNext(pos1);
		ChannelList* cur_channel = (ChannelList*)channelLPtrList.GetAt(pos2);
d767 2
a768 2
	POSITION pos1, pos2;
	for (pos1 = curr_channel->nicks.GetHeadPosition();(pos2 = pos1) != NULL;)
d770 1
a770 2
		curr_channel->nicks.GetNext(pos1);
		Nick* cur_nick = (Nick*)curr_channel->nicks.GetAt(pos2);
d863 1
a863 2
	POSITION pos1, pos2;
	for (pos1 = refresh->nicks.GetHeadPosition();(pos2 = pos1) != NULL;)
d865 1
a865 2
		refresh->nicks.GetNext(pos1);
		Nick* curr_nick = (Nick*)refresh->nicks.GetAt(pos2);
d882 1
a882 1
	for (pos1 = update->nicks.GetHeadPosition();(pos2 = pos1) != NULL;)
d884 1
a884 2
		update->nicks.GetNext(pos1);
		Nick* curr_nick = (Nick*)update->nicks.GetAt(pos2);
d909 2
a910 2
	POSITION pos3, pos4;
	for (pos3 = curr_channel->nicks.GetHeadPosition();(pos4 = pos3) != NULL;)
d912 2
a913 3
		curr_channel->nicks.GetNext(pos3);
		Nick* cur_nick = (Nick*)curr_channel->nicks.GetAt(pos4);
		curr_channel->nicks.RemoveAt(pos4);
d920 1
a920 2
	POSITION pos1, pos2;
	for (pos1 = channelPtrList.GetHeadPosition();(pos2 = pos1) != NULL;)
d922 1
a922 2
		channelPtrList.GetNext(pos1);
		Channel* cur_channel = (Channel*)channelPtrList.GetAt(pos2);
d936 1
a936 2
	POSITION pos1, pos2;
	for (pos1 = update->nicks.GetHeadPosition();(pos2 = pos1) != NULL;)
d938 1
a938 2
		update->nicks.GetNext(pos1);
		Nick* curr_nick = (Nick*)update->nicks.GetAt(pos2);
d962 1
a962 2
	POSITION pos1, pos2;
	for (pos1 = update->nicks.GetHeadPosition();(pos2 = pos1) != NULL;)
d964 1
a964 2
		update->nicks.GetNext(pos1);
		Nick* curr_nick = (Nick*)update->nicks.GetAt(pos2);
d1075 1
a1075 2
	POSITION pos1, pos2;
	for (pos1 = channelPtrList.GetHeadPosition();(pos2 = pos1) != NULL;)
d1077 1
a1077 2
		channelPtrList.GetNext(pos1);
		Channel* cur_channel = (Channel*)channelPtrList.GetAt(pos2);
d1355 1
a1355 2
	POSITION pos1, pos2;
	for (pos1 = channelPtrList.GetHeadPosition();(pos2 = pos1) != NULL;)
d1357 1
a1357 2
		channelPtrList.GetNext(pos1);
		curr_channel = (Channel*)channelPtrList.GetAt(pos2);
d1554 1
a1554 2
	POSITION pos1, pos2;
	for (pos1 = channelPtrList.GetHeadPosition();(pos2 = pos1) != NULL;)
d1556 1
a1556 2
		channelPtrList.GetNext(pos1);
		Channel* cur_channel = (Channel*)channelPtrList.GetAt(pos2);
d1630 3
a1632 2
	POSITION pos1, pos2;
	Channel* pChannel;
d1635 1
a1635 2
		channelPtrList.GetNext(pos1);
		pChannel = (Channel*)channelPtrList.GetAt(pos2);
d1648 3
a1650 2
	int index = -1;
	POSITION pos = serverChannelList.GetFirstSelectedItemPosition();
@


1.42
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d499 1
a499 1
				send.Format(_T("PRIVMSG %s :\001SENDLINK|%s|%s\001"), nick->nick, EncodeBase16((const unsigned char*)g_eMuleApp.m_pGlobPrefs->GetUserHash(), 16), GetSendFileString() );
@


1.41
log
@Replaced all zero filled memsets with optimized memzero (Thx Aw3 !) + some more Aw3 optimizations
@
text
@d1582 1
a1582 1
Channel* CIrcWnd::NewChannel(CString name, uint8 type)
@


1.40
log
@reverted last commit for prepared rtf
@
text
@d44 1
a44 1
	memset2(&m_bSortAscending, 0, sizeof(m_bSortAscending));
@


1.39
log
@minor change
@
text
@d605 1
a605 1
	bool bWasChanged = (channelselect.GetItemState(cur_sel, TCIS_HIGHLIGHTED) & TCIS_HIGHLIGHTED);
d627 1
a627 1
	if ((statusWindow.m_bAutoScroll) && (bWasChanged))
@


1.38
log
@minor fixes & cleanup
@
text
@d605 1
d627 1
a627 1
	if (statusWindow.m_bAutoScroll)
@


1.37
log
@fixes/changes
@
text
@d626 2
@


1.36
log
@Better URL detection + minor changes
@
text
@d625 1
d1481 1
a1481 1
	if (flag)
d1492 1
a1492 1
	}
d1589 3
a1591 1
	newitem.mask = TCIF_PARAM | TCIF_TEXT | TCIF_IMAGE;
a1641 2
	if(channelselect.GetCurSel() != 1)
		channelselect.SetItemState(1, TCIS_HIGHLIGHTED, TCIS_HIGHLIGHTED);
@


1.35
log
@minor fix
@
text
@d1244 1
a1244 1
	update_channel->log->AppendText(m_dwTimeStamp, RGB(0, 51, 102));
d1284 1
a1284 1
	update_channel->log->AppendText(m_dwTimeStamp, RGB(0, 51, 102));
d1324 1
a1324 1
	update_channel->log->AppendText(m_dwTimeStamp, RGB(0, 51, 102));
@


1.34
log
@removed prepared RTF predefined colors (uses RGB(#, #, #) now) + some fixes
@
text
@d192 1
a192 1
	statusWindow.Create(WS_VISIBLE | WS_CHILD | WS_HSCROLL | WS_VSCROLL | ES_MULTILINE | ES_READONLY, rect, this, 125);
@


1.33
log
@more fixes/changes
@
text
@d620 1
a620 1
	statusWindow.SetHyperText(m_pCurrentChannel->log, true);
d1239 1
a1239 1
	int iLineColor = 0;
d1241 1
a1241 1
		iLineColor = 2;
d1243 3
a1245 3
		iLineColor = 31;
	update_channel->log->AppendText(m_dwTimeStamp, 5);
	update_channel->log->AppendText(line, iLineColor);
d1248 1
a1248 1
		statusWindow.SetHyperText(update_channel->log, true);
d1279 1
a1279 1
	int iLineColor = 0;
d1281 1
a1281 1
		iLineColor = 2;
d1283 3
a1285 3
		iLineColor = 31;
	update_channel->log->AppendText(m_dwTimeStamp, 5);
	update_channel->log->AppendText(line, iLineColor);
d1288 1
a1288 1
		statusWindow.SetHyperText(update_channel->log, true);
d1320 1
a1320 1
	int iNickColor = 7;
d1322 1
a1322 1
		iNickColor = 23;
d1324 2
a1325 2
	update_channel->log->AppendText(m_dwTimeStamp, 5);
	update_channel->log->AppendText(targetname, iNickColor);
d1329 1
a1329 1
		statusWindow.SetHyperText(update_channel->log, true);
@


1.32
log
@some more fixing + added more predefined colors to prepared rtf
@
text
@d1244 2
a1245 2
	update_channel->log->AppendKeyWord(m_dwTimeStamp, 5);
	update_channel->log->AppendKeyWord(line, iLineColor);
d1284 2
a1285 2
	update_channel->log->AppendKeyWord(m_dwTimeStamp, 5);
	update_channel->log->AppendKeyWord(line, iLineColor);
d1324 2
a1325 2
	update_channel->log->AppendKeyWord(m_dwTimeStamp, 5);
	update_channel->log->AppendKeyWord(targetname, iNickColor);
@


1.31
log
@some changes & fixes
@
text
@d1239 1
d1241 1
a1241 5
	{
		update_channel->log->AppendKeyWord(m_dwTimeStamp, 5);
		update_channel->log->AppendKeyWord(line.Left(2), 10);
		update_channel->log->AppendText(line.Mid(1));
	}
d1243 3
a1245 12
	{
		int index = line.Find(_T("-"), 1);
		update_channel->log->AppendKeyWord(m_dwTimeStamp, 5);
		update_channel->log->AppendKeyWord(line.Left(index), 2);
		update_channel->log->AppendText(line.Mid(index));
	}
	else
	{
		update_channel->log->AppendKeyWord(m_dwTimeStamp, 5);
		update_channel->log->AppendText(line);
	}

d1279 1
d1281 1
a1281 5
	{
		update_channel->log->AppendKeyWord(m_dwTimeStamp, 5);
		update_channel->log->AppendKeyWord(line.Left(2), 10);
		update_channel->log->AppendText(line.Mid(1));
	}
d1283 3
a1285 12
	{
		int index = line.Find(_T("-"), 1);
		update_channel->log->AppendKeyWord(m_dwTimeStamp, 5);
		update_channel->log->AppendKeyWord(line.Left(index), 2);
		update_channel->log->AppendText(line.Mid(index));
	}
	else
	{
		update_channel->log->AppendKeyWord(m_dwTimeStamp, 5);	
		update_channel->log->AppendText(line);
	}

d1320 1
a1320 1
	int color = 7;
d1322 2
a1323 2
		color = 6;
	targetname = CString(_T("<")) + targetname + CString(_T(">"));
d1325 2
a1326 2
	update_channel->log->AppendKeyWord(targetname, color);
	update_channel->log->AppendText(CString(_T(" ")) + line);
@


1.30
log
@Log & Debug log scrollbars auto show + fixed IRC links click
@
text
@d1241 1
a1241 1
		update_channel->log->AppendText(m_dwTimeStamp);
d1248 1
a1248 1
		update_channel->log->AppendText(m_dwTimeStamp);
d1253 4
a1256 1
		update_channel->log->AppendText(m_dwTimeStamp + line);
d1293 1
a1293 1
		update_channel->log->AppendText(m_dwTimeStamp);
d1300 1
a1300 1
		update_channel->log->AppendText(m_dwTimeStamp);
d1305 4
a1308 1
		update_channel->log->AppendText(m_dwTimeStamp + line);
d1344 1
a1344 1
	int color;
d1346 1
a1346 3
		color = 3;
	else
		color = 5;
d1348 1
a1348 1
	update_channel->log->AppendText(m_dwTimeStamp);
@


1.29
log
@Got rid of LogEditCtrl + Some minor changes
@
text
@d192 1
a192 1
	statusWindow.Create(WS_VISIBLE | WS_CHILD | WS_HSCROLL | WS_VSCROLL | ES_MULTILINE | ES_READONLY, rect, this, 0);
d194 2
d576 13
d630 1
@


1.28
log
@fixed memleak introduced by new IRC loging code
@
text
@d605 1
a605 1
	statusWindow.SetHyperText(m_pCurrentChannel->log);
a1237 1
	statusWindow.UpdateSize(true);
a1286 1
	statusWindow.UpdateSize(true);
a1330 1
	statusWindow.UpdateSize(true);
@


1.27
log
@Converted IRC/Messages to Rich Edit  (added copy text to clipboard & save logs with colors as RTF)
@
text
@d1644 1
d1653 1
d1657 2
a1658 2
		Channel* cur_channel = (Channel*)channelPtrList.GetAt(pos2);
		DeleteAllNick(cur_channel->name);
d1660 2
a1661 1
		delete cur_channel;
@


1.26
log
@Fixed IRC save log context menu not showing if a nick is selected
@
text
@d40 5
a44 5
	m_pIrcMain = 0; // i_a: bugfix: crash prevention
	m_bConnected = false;          // i_a
	m_bLoggedIn = false;          // i_a
	m_pCurrentChannel = 0;         // i_a
	memset2(&m_bSortAscending, 0, sizeof(m_bSortAscending)); // i_a
d88 2
a89 1
	for (int i = 0; i < channelselect.GetItemCount();i++){
d95 4
a98 2
		if (cur_chan != NULL){
			if( cur_chan->type == 1 ){
d105 2
a106 1
			if( cur_chan->type == 2 ){
d157 1
a157 1
	LoadImgLstIcon(NULL, 0, 0); // delete temp-icon
d187 1
a187 1
	serverChannelList.LoadSettings(CPreferences::TABLE_IRC);		//Cax2
d191 3
a193 2
	::MapWindowPoints(NULL, m_hWnd, (LPPOINT) & rect, 2);
	statusWindow.CreateEx(WS_EX_STATICEDGE, 0, _T("MsgWnd"), WS_CHILD | HTC_WORDWRAP | HTC_AUTO_SCROLL_BARS | HTC_UNDERLINE_HOVER, rect.left, rect.top, rect.Width(), rect.Height(), m_hWnd, 0);
d201 3
a203 1
	channelselect.SetCurSel(1);
d215 4
d230 1
a230 1
	m_imageList.DeleteImageList();		// eklmn: bugfix(01): resource cleanup due to ImageLists recreation
a257 1

a266 25
		case MP_SAVELOG:
		{
			CString buffer,tmpPath;
			TCITEM item;
			item.mask = TCIF_PARAM;
			channelselect.GetItem(chanItem,&item);
			Channel* chan = (Channel*)item.lParam;
			buffer.Format("%s.log",chan->name);
			if (DialogBrowseFile(tmpPath, _T("Log (*.log)|*.log||"), buffer, 0, FALSE))
			{
				if (tmpPath != _T(""))
				{
					HANDLE hFile=CreateFile(tmpPath,GENERIC_WRITE,0,NULL,CREATE_ALWAYS,FILE_ATTRIBUTE_ARCHIVE,NULL);
					if (hFile != INVALID_HANDLE_VALUE)
					{
						DWORD written;
						buffer=chan->log.GetText();
						buffer.Replace("\n","\r\n");
						WriteFile(hFile,buffer,buffer.GetLength(),&written,NULL);
						CloseHandle(hFile);
					}				
				}
			}
			break;
		}
a539 1
	{
a540 1
	}
a541 1
	{
a542 1
	}
a550 1
	{
d552 1
a552 2
	}
	if (nItem == ( -1))
d605 1
a605 1
	statusWindow.SetHyperText(&m_pCurrentChannel->log);
a623 1
	ON_WM_CONTEXTMENU()
a968 1
			{
a969 1
			}
a970 1
			{
a971 1
			}
a972 1
			{
a973 1
			}
a974 1
			{
a975 1
			}
a976 1
			{
a977 1
			}
a978 1
			{
a979 1
			}
a980 1
			{
a981 1
			}
a982 1
			{
a983 1
			}
a984 1
			{
a985 1
			}
a986 1
			{
a987 1
			}
a988 1
			{
a989 1
			}
a990 1
			{
a991 1
			}
a1139 1

a1148 1

d1221 1
a1221 1
	line += "\r\n";
d1225 3
a1227 3
		update_channel->log.AppendText(m_dwTimeStamp);
		update_channel->log.AppendKeyWord(line.Left(2), RGB(255, 0, 0));
		update_channel->log.AppendText(line.Mid(1));
d1232 3
a1234 3
		update_channel->log.AppendText(m_dwTimeStamp);
		update_channel->log.AppendKeyWord(line.Left(index), RGB(150, 0, 0));
		update_channel->log.AppendText(line.Mid(index));
d1237 3
a1239 1
		update_channel->log.AppendText(m_dwTimeStamp + line);
d1242 1
a1242 1
		statusWindow.SetHyperText(&update_channel->log, true);
d1271 1
a1271 1
	line += "\r\n";
d1275 3
a1277 3
		update_channel->log.AppendText(m_dwTimeStamp);
		update_channel->log.AppendKeyWord(line.Left(2), RGB(255, 0, 0));
		update_channel->log.AppendText(line.Mid(1));
d1282 3
a1284 3
		update_channel->log.AppendText(m_dwTimeStamp);
		update_channel->log.AppendKeyWord(line.Left(index), RGB(150, 0, 0));
		update_channel->log.AppendText(line.Mid(index));
d1287 2
a1288 1
		update_channel->log.AppendText(m_dwTimeStamp + line);
d1292 1
a1292 1
		statusWindow.SetHyperText(&update_channel->log, true);
d1322 1
a1322 1
	line += "\r\n";
d1324 1
a1324 1
	COLORREF color;
d1326 1
a1326 1
		color = RGB(1, 100, 1);
d1328 1
a1328 1
		color = RGB(1, 20, 130);
d1330 4
a1333 3
	update_channel->log.AppendText(m_dwTimeStamp);
	update_channel->log.AppendKeyWord(targetname, color);
	update_channel->log.AppendText(CString(_T(" ")) + line);
d1336 1
a1336 1
		statusWindow.SetHyperText(&update_channel->log, true);
a1426 1
					{
a1427 1
					}
a1442 1
								{
a1443 1
								}
a1537 1
		{
a1538 1
		}
a1539 1
		{
a1540 1
		}
d1589 1
a1709 21
}

void CIrcWnd::OnContextMenu(CWnd* pWnd, CPoint point)
{ 
   // not for status/roomlist and nicklist
   if (channelselect.GetCurSel()<2 || WindowFromPoint(point)->m_hWnd!=statusWindow.m_hWnd)
		return;

   CPoint p = point; 
   ScreenToClient(&p);

   CTitleMenu m_ChatMenu;

   m_ChatMenu.CreatePopupMenu(); 
   m_ChatMenu.AddMenuTitle(GetResString(IDS_IRC));
   m_ChatMenu.AppendMenu(MF_STRING, MP_SAVELOG, GetResString(IDS_LOGTOFILE)); 

   m_ChatMenu.SetDefaultItem(MP_SAVELOG);
   m_ChatMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON, point.x, point.y, this); 

   VERIFY( m_ChatMenu.DestroyMenu() );
@


1.25
log
@fix for IRC context menu opening after using Nick context menu
@
text
@d1766 1
a1766 1
   if (channelselect.GetCurSel()<2 || nickList.GetSelectionMark() != -1)
@


1.24
log
@Formatting + minor changes
@
text
@d1765 2
a1766 2
   // not for status/roomlist
   if (channelselect.GetCurSel()<2)
@


1.23
log
@added context menu to save IRC/Messages to disk from official v0.30d
@
text
@d265 1
a265 1
			if (tmpPath = DialogBrowseFile(_T("Log (*.log)|*.log||"), buffer))
@


1.22
log
@inactive IRC/Messages window receiving new text becomes hilighted until you select it
@
text
@d257 25
d645 1
a645 1

d723 1
a723 1
	serverChannelList.SetSortArrow(pNMListView->iSubItem, (m_bSortAscending[pNMListView->iSubItem])); //Cax2 bugfix
d1128 2
a1129 1
void CIrcWnd::SetNick( CString in_nick ){
d1761 21
@


1.21
log
@updated IRC code to official v0.30c
@
text
@d111 2
a112 1
	if (m_pCurrentChannel){
d197 1
d586 1
d667 2
a695 1

a1240 1
	{
a1241 1
	}
d1521 2
d1670 2
@


1.20
log
@fixed sort arrow initialization
@
text
@a84 1

d88 30
d120 1
d123 1
a123 1
	hdi.mask = HDI_TEXT;
a140 40

	UpdateNickCount();

	CString		name = GetResString(IDS_STATUS);
	Channel	   *toadd = new Channel;

	toadd->name = name;
	toadd->title = name;

	TCITEM		newitem;

	newitem.mask = TCIF_TEXT;
	newitem.lParam = (LPARAM)toadd;
	newitem.pszText = name.GetBuffer();
	newitem.cchTextMax = (int)name.GetLength() + 1;
	channelselect.SetItem(0, &newitem);
	delete toadd;

	name = GetResString(IDS_IRC_CHANNELLIST);

	Channel		*toadd2 = new Channel;

	toadd2->name = name;
	toadd2->title = name;

	TCITEM		newitem2;

	newitem2.mask = TCIF_TEXT;
	newitem2.lParam = (LPARAM)toadd2;
	newitem2.pszText = name.GetBuffer();
	newitem2.cchTextMax = (int)name.GetLength() + 1;
	channelselect.SetItem(1, &newitem2);
	delete toadd2;

	int		iSelection = channelselect.GetCurSel();

	if (iSelection == 0)
		titleWindow.SetWindowText(GetResString(IDS_STATUS));
	else if (iSelection == 1)
		titleWindow.SetWindowText(GetResString(IDS_IRC_CHANNELLIST));
a213 1
//	v- eklmn: bugfix(00): resource cleanup due to CResizableDialog
a218 1
//	^- eklmn: bugfix(00): resource cleanup due to CResizableDialog
d452 1
a452 1
				send.Format(IDS_IRC_SLAPMSGSEND, chan->name, nick->nick);
d468 1
a468 1
				send.Format(_T("PRIVMSG %s :\001RSQFRIEND |%i|\001"), nick->nick, m_pIrcMain->SetVerify());
d475 2
d485 1
a485 1
				send.Format(_T("PRIVMSG %s :\001SENDLINK !|%s\001"), nick->nick, GetSendFileString());
d572 1
d620 1
a620 1
	ON_WM_DESTROY()	// eklmn: bugfix(00): resource cleanup due to CResizableDialog
d1212 2
d1414 5
a1418 19
	CString temp1, temp2;
	for (int i = 0; i < temp.GetLength(); i++)
	{
		int j = temp[i];
		switch (j)
		{
			case 2:
			case 3:
			case 15:
			case 22:
			case 31:
			{
				temp1 = temp.Left(i);
				temp2 = temp.Mid(i + 1);
				temp = temp1 + temp2;
				i--;
			}
		}
	}
d1683 1
a1683 1
	if (!m_bConnected)
@


1.19
log
@Formatting, comments, and name changes.
@
text
@d708 9
a716 5
void CIrcWnd::SortInit(int sortCode)
{	//Cax2 sortdlg
	int m_iCurrentSortItem = (sortCode & MLC_SORTDESC) == 0 ? sortCode : sortCode - MLC_SORTDESC;
	serverChannelList.SetSortArrow(m_iCurrentSortItem, (sortCode & MLC_SORTDESC) == 0);
	serverChannelList.SortItems(SortProcChanL, sortCode);
@


1.18
log
@Formatting, comments, and name changes.
@
text
@d1235 1
a1235 1
	CString timestamp = _T("");
d1237 1
a1237 1
		timestamp.Format(_T("%s: "), osTime);
d1248 1
a1248 1
		update_channel->log.AppendText(timestamp);
d1255 1
a1255 1
		update_channel->log.AppendText(timestamp);
d1260 1
a1260 1
		update_channel->log.AppendText(timestamp + line);
d1280 1
a1280 1
	CString timestamp = _T("");
d1282 1
a1282 1
		timestamp.Format(_T("%s: "), osTime);
d1296 1
a1296 1
		update_channel->log.AppendText(timestamp);
d1303 1
a1303 1
		update_channel->log.AppendText(timestamp);
d1308 1
a1308 1
		update_channel->log.AppendText(timestamp + line);
d1330 1
a1330 1
	CString timestamp = _T("");
d1332 1
a1332 1
		timestamp.Format(_T("%s: "), osTime);
d1350 1
a1350 1
	update_channel->log.AppendText(timestamp);
@


1.17
log
@Formatting, comments, and name changes.
Completion of download list sorting changes (for now).
Added missing sort on FakeCheck column in search window.
@
text
@d157 5
a161 5
	imagelist.Create(16, 16, ILC_COLOR32, 0, 10);
	imagelist.SetBkColor(RGB(255, 0, 255));
	imagelist.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_CHAT), 16, 16));
	imagelist.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_MESSAGE), 16, 16));
	imagelist.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_MPENDING), 16, 16));
d163 1
a163 1
	CImageList ImageList;
d169 3
a171 3
	imagelist.Draw(&TempDC, 0, CPoint(0, 0), ILD_NORMAL);
	imagelist.Draw(&TempDC, 1, CPoint(16, 0), ILD_NORMAL);
	imagelist.Draw(&TempDC, 2, CPoint(32, 0), ILD_NORMAL);
d173 4
a176 4
	ImageList.Create(16, 16, ILC_COLOR32 | ILC_MASK, 0, 10);
	ImageList.Add(&Bitmap, RGB(255, 0, 255));
	channelselect.SetImageList(&ImageList);
	ImageList.Detach();
d228 1
a228 1
	imagelist.DeleteImageList();		// eklmn: bugfix(01): resource cleanup due to ImageLists recreation
a581 1
//	TODO: Add your control notification handler code here
a1216 2
//LPNMLISTVIEW pNMLV = reinterpret_cast<LPNMLISTVIEW>(pNMHDR);
//	TODO: Add your control notification handler code here
@


1.16
log
@Fixed a memory leak in Localize().
@
text
@d684 1
a684 1
		case 10:
d688 1
a688 1
		case 11:
d692 1
a692 1
		case 12:
d705 1
a705 1
	serverChannelList.SortItems(SortProcChanL, pNMListView->iSubItem + ((m_bSortAscending[pNMListView->iSubItem]) ? 0 : 10));
d711 2
a712 2
	int m_iCurrentSortItem = (sortCode < 10) ? sortCode : sortCode - 10;
	serverChannelList.SetSortArrow(m_iCurrentSortItem, (sortCode < 10));
d1137 1
a1137 1
		case 10:
d1166 1
a1166 1
	nickList.SortItems(SortProcNick, pNMListView->iSubItem + ((m_bSortAscending[pNMListView->iSubItem]) ? 0 : 10));
@


1.15
log
@Added MMX/AMD/SSE optimized memset [katsyonak]
@
text
@d15 1
a15 1
// IrcWnd.cpp : implementation file
d26 1
a26 1
static char THIS_FILE[]=__FILE__;
d33 1
a33 1
// CIrcWnd dialog
d38 1
a38 1
	: CResizableDialog(CIrcWnd::IDD, pParent)
d40 5
a44 5
   m_pIrcMain = 0; // i_a: bugfix: crash prevention 
   m_bConnected = false;          // i_a 
   m_bLoggedIn = false;          // i_a 
   m_pCurrentChannel = 0;         // i_a 
   memset2(&m_bSortAscending, 0, sizeof(m_bSortAscending)); // i_a 
d49 1
a49 1
	if( m_bConnected )
d52 2
a53 1
	for (pos1 = channelLPtrList.GetHeadPosition();( pos2 = pos1 ) != NULL;){
d55 1
a55 1
		ChannelList* cur_channel =	(ChannelList*)channelLPtrList.GetAt(pos2);
d63 3
a65 2
void CIrcWnd::UpdateNickCount(){
	CHeaderCtrl* pHeaderCtrl;
d70 2
a71 2
	if( nickList.GetItemCount() )
		strRes.Format( _T("%s[%i]"), GetResString(IDS_IRC_NICK), nickList.GetItemCount());
d73 1
a73 1
		strRes.Format( _T("%s"), GetResString(IDS_IRC_NICK));
d78 4
a81 3

void CIrcWnd::Localize(){
	if( m_bConnected )
d85 1
d89 4
a92 2
	CHeaderCtrl* pHeaderCtrl;
	HDITEM hdi;
a93 1
	CString strRes;
a111 1
	//Localization Fix
d114 3
a116 2
	CString name = GetResString(IDS_STATUS);
	Channel* toadd = new Channel;
d119 3
a121 1
	TCITEM newitem;
d125 3
a127 2
	newitem.cchTextMax = (int)name.GetLength()+1;
	channelselect.SetItem(0,&newitem);
d130 3
a132 1
	Channel* toadd2 = new Channel;
d135 3
a137 1
	TCITEM newitem2;
d141 5
a145 3
	newitem2.cchTextMax = (int)name.GetLength()+1;
	channelselect.SetItem(1,&newitem2);
	delete toadd;
d147 1
a147 2
	int iSelection = channelselect.GetCurSel();
	if(iSelection == 0)
d149 1
a149 1
	else if(iSelection == 1)
a150 1
	//Localization Fix - End
d152 3
a154 2

BOOL CIrcWnd::OnInitDialog(){
d157 6
a162 6
	imagelist.Create(16,16,ILC_COLOR32,0,10);
	imagelist.SetBkColor(RGB(255,0,255));
	imagelist.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_CHAT),16,16));
	imagelist.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_MESSAGE),16,16));
	imagelist.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_MPENDING),16,16));
	LoadImgLstIcon(NULL,0,0); // delete temp-icon
d169 3
a171 3
	imagelist.Draw(&TempDC, 0, CPoint( 0,0), ILD_NORMAL);
	imagelist.Draw(&TempDC, 1, CPoint(16,0), ILD_NORMAL);
	imagelist.Draw(&TempDC, 2, CPoint(32,0), ILD_NORMAL);
d174 1
a174 1
	ImageList.Add(&Bitmap, RGB(255,0,255));
d186 2
a187 2
	nickList.InsertColumn(0,GetResString(IDS_IRC_NICK),LVCFMT_LEFT,135);
	nickList.InsertColumn(1,_T("*"),LVCFMT_CENTER,20);
d189 3
a191 3
	serverChannelList.InsertColumn(0, GetResString(IDS_IRC_NAME), LVCFMT_LEFT, 203 );
	serverChannelList.InsertColumn(1, GetResString(IDS_UUSERS), LVCFMT_LEFT, 50 );
	serverChannelList.InsertColumn(2, GetResString(IDS_DESCRIPTION), LVCFMT_LEFT, 350 );
d196 3
a198 3
	::MapWindowPoints(NULL, m_hWnd, (LPPOINT)&rect, 2);
	statusWindow.CreateEx(WS_EX_STATICEDGE,0,_T("MsgWnd"),WS_CHILD | HTC_WORDWRAP |HTC_AUTO_SCROLL_BARS | HTC_UNDERLINE_HOVER,rect.left,rect.top,rect.Width(),rect.Height(),m_hWnd,0);
	NewChannel(GetResString(IDS_STATUS), 1 );
d206 10
a215 10
	
	AddAnchor(IDC_BN_IRCCONNECT,BOTTOM_LEFT);
	AddAnchor(IDC_CLOSECHAT,BOTTOM_LEFT);
	AddAnchor(IDC_CHATSEND,BOTTOM_RIGHT);
	AddAnchor(IDC_INPUTWINDOW,BOTTOM_LEFT,BOTTOM_RIGHT);
	AddAnchor(IDC_NICKLIST,TOP_LEFT,BOTTOM_LEFT);
	AddAnchor(IDC_TITLEWINDOW,TOP_LEFT,TOP_RIGHT);
	AddAnchor(IDC_SERVERCHANNELLIST,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(statusWindow,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(IDC_TAB2,TOP_LEFT, TOP_RIGHT);
d217 4
a220 2
	if (g_eMuleApp.m_pGlobPrefs->DoUseSort()) SortInit(g_eMuleApp.m_pGlobPrefs->GetIrcSortCol());
	else SortInit(11);
d224 1
a224 1
// v- eklmn: bugfix(00): resource cleanup due to CResizableDialog
d230 1
a230 1
// ^- eklmn: bugfix(00): resource cleanup due to CResizableDialog
d239 1
a239 1
void CIrcWnd::OnSize(UINT nType, int cx, int cy) 
d244 2
a245 1
int CIrcWnd::OnCreate(LPCREATESTRUCT lpCreateStruct) {
d260 261
a520 222
BOOL CIrcWnd::OnCommand(WPARAM wParam,LPARAM lParam ){ 
   int nickItem= nickList.GetSelectionMark(); 
   int chanItem= channelselect.GetCurSel(); 
//   int chanLItem= serverChannelList.GetSelectionMark(); 
   switch( wParam ){
	   case IDC_BN_IRCCONNECT: {
		   OnBnClickedBnIrcconnect();
		   return true;
	   }
	   case IDC_CHATSEND: {
		   OnBnClickedChatsend();
		   return true;
	   }
	   case IDC_CLOSECHAT: {
		   OnBnClickedClosechat();
		   return true;
	   }
	   case Irc_Priv: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   if(nick)
			   AddInfoMessage( nick->nick, GetResString(IDS_IRC_PRIVATECHANSTART));
		   return true;
	   }
	   case Irc_Owner: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("PRIVMSG chanserv owner %s %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_DeOwner: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("PRIVMSG chanserv deowner %s %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_Op: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("MODE %s +o %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_DeOp: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("MODE %s -o %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_HalfOp: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("MODE %s +h %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_DeHalfOp: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("MODE %s -h %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_Voice: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("MODE %s +v %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_DeVoice: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("MODE %s -v %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_Protect: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("PRIVMSG chanserv protect %s %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_DeProtect: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("PRIVMSG chanserv deprotect %s %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_Kick: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("KICK %s %s"), chan->name, nick->nick );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_Slap: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( IDS_IRC_SLAPMSGSEND, chan->name, nick->nick );
			   AddInfoMessage( chan->name, GetResString(IDS_IRC_SLAPMSG), m_pIrcMain->GetNick(), nick->nick);
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_AddFriend: {
		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("PRIVMSG %s :\001RSQFRIEND |%i|\001"), nick->nick, m_pIrcMain->SetVerify() );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
	   }
	   case Irc_SendLink: {
   		   Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		   TCITEM item;
		   item.mask = TCIF_PARAM;
		   channelselect.GetItem(chanItem,&item);
		   Channel* chan = (Channel*)item.lParam;
		   if( nick && chan ){
			   CString send;
			   send.Format( _T("PRIVMSG %s :\001SENDLINK !|%s\001"), nick->nick, GetSendFileString() );
			   m_pIrcMain->SendString(send);
		   }
		   return true;
		}

	   case Irc_Close: {
		   OnBnClickedClosechat();
		   return true;
	   }
	   case Irc_Join: {
		   JoinChannels();
		   return true;
	   }
   }
   return true;
}

BOOL CIrcWnd::PreTranslateMessage(MSG* pMsg) {
	if(pMsg->message == WM_KEYDOWN && (pMsg->hwnd == GetDlgItem(IDC_INPUTWINDOW)->m_hWnd)) {
		if (pMsg->wParam == VK_RETURN) {
d523 1
a523 1
	}
d525 3
a527 2
	if (pMsg->wParam == VK_UP || pMsg->wParam == VK_DOWN) {
		ScrollHistory(pMsg->wParam == VK_DOWN);
d529 1
a529 1
		}	   
d537 2
a538 1
	if(!m_bConnected){
d541 2
a542 1
	else{
d552 2
a553 1
	if (nItem==-1) {
d556 1
a556 1
	if (nItem== (-1))
d559 1
a559 1
	channelselect.GetItem(nItem,&item);
d561 4
a564 2
	if( partChannel ){
		if( partChannel->type == 4 &&  m_bConnected){
d567 1
a567 1
			m_pIrcMain->SendString( part );
d570 2
a571 1
		else if (partChannel->type == 5 || partChannel->type == 4){
d582 1
a582 1
	// TODO: Add your control notification handler code here
d588 1
a588 1
	if (cur_sel == (-1))
d590 1
a590 1
	channelselect.GetItem(cur_sel,&item);
d592 1
a592 1
		m_pCurrentChannel = update;
d594 2
a595 1
	if( m_pCurrentChannel->type == 1 ){
d600 15
a614 14
		if( m_pCurrentChannel->type == 2 ){
			titleWindow.SetWindowText(GetResString(IDS_IRC_CHANNELLIST));
			statusWindow.ShowWindow(SW_HIDE);
			serverChannelList.ShowWindow(SW_SHOW);
			return;
		}
		SetActivity( m_pCurrentChannel->name, false );
		statusWindow.SetHyperText(&m_pCurrentChannel->log);
		statusWindow.ShowWindow(SW_SHOW);
		serverChannelList.ShowWindow(SW_HIDE);
		RefreshNickList( update->name );
		SetTitle( update->name, update->title );
	if( pResult )
		*pResult = 0;
d635 1
a635 1
// Channel List
d639 2
a640 1
void CIrcWnd::ResetServerChannelList(){
d642 2
a643 1
	for (pos1 = channelLPtrList.GetHeadPosition();( pos2 = pos1 ) != NULL;){
d645 1
a645 1
		ChannelList* cur_channel =	(ChannelList*)channelLPtrList.GetAt(pos2);
d652 2
a653 1
void CIrcWnd::AddChannelToList( CString name, CString user, CString description ){
d657 3
a659 2
	if( (g_eMuleApp.m_pGlobPrefs->GetIRCChanNameFilter() || g_eMuleApp.m_pGlobPrefs->GetIRCChannelUserFilter()) && g_eMuleApp.m_pGlobPrefs->GetIRCUseChanFilter()){
		if( usertest < g_eMuleApp.m_pGlobPrefs->GetIRCChannelUserFilter() )
d661 1
a661 1
		if( dtemp.MakeLower().Find(g_eMuleApp.m_pGlobPrefs->GetIRCChanNameFilter().MakeLower()) == -1 && ntemp.MakeLower().Find(g_eMuleApp.m_pGlobPrefs->GetIRCChanNameFilter().MakeLower()) == -1)
d668 1
a668 1
	channelLPtrList.AddTail( toadd);
d670 4
a673 4
	itemnr = serverChannelList.InsertItem(LVIF_PARAM,itemnr,0,0,0,0,(LPARAM)toadd);
	serverChannelList.SetItemText(itemnr,0,toadd->name);
	serverChannelList.SetItemText(itemnr,1,toadd->users);
	serverChannelList.SetItemText(itemnr,2,toadd->desc);
d676 3
a678 2
int CIrcWnd::SortProcChanL(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort){
	ChannelList* item1 = (ChannelList*)lParam1;
d680 4
a683 3
		switch(lParamSort){
		case 0: 
			return CString(item1->name).CompareNoCase(item2->name);
d685 3
a687 3
			return CString(item2->name).CompareNoCase(item1->name);
		case 1: 
			return _tstoi(item1->users) - _tstoi(item2->users);
d689 3
a691 3
			return _tstoi(item2->users) - _tstoi(item1->users);
		case 2: 
			return CString(item1->desc).CompareNoCase(item2->desc);
d693 1
a693 1
			return CString(item2->desc).CompareNoCase(item1->desc);
d695 1
a695 1
			return 0;
d699 2
a700 1
void CIrcWnd::OnColumnClickChanL( NMHDR* pNMHDR, LRESULT* pResult){
d702 1
a702 1
	NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR;
d705 1
a705 1
	serverChannelList.SortItems(SortProcChanL, pNMListView->iSubItem+ ((m_bSortAscending[pNMListView->iSubItem])? 0:10));
d709 4
a712 3
void CIrcWnd::SortInit(int sortCode){	//Cax2 sortdlg
	int m_iCurrentSortItem=(sortCode<10)?sortCode:sortCode-10;
	serverChannelList.SetSortArrow(m_iCurrentSortItem,(sortCode<10));
d716 6
a721 5
void CIrcWnd::OnNMRclickChanL(NMHDR *pNMHDR, LRESULT *pResult){
	POINT point; 
	::GetCursorPos(&point); 
	CPoint p = point; 
	ScreenToClient(&p); 
d725 4
a728 4
	m_ChanLMenu.AppendMenu(MF_STRING,Irc_Join,GetResString(IDS_IRC_JOIN)); 
	m_ChanLMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON, point.x, point.y, this); 
	VERIFY( m_ChanLMenu.DestroyMenu() );
	*pResult = 0; 
d731 2
a732 1
void CIrcWnd::OnNMDblclkserverChannelList(NMHDR *pNMHDR, LRESULT *pResult){
d739 1
a739 1
// Nick List
d743 4
a746 3
Nick* CIrcWnd::FindNickByName(CString channel, CString name){
	Channel* curr_channel = FindChannelByName(channel);
	if( !curr_channel)
d749 2
a750 1
	for (pos1 = curr_channel->nicks.GetHeadPosition();( pos2 = pos1 ) != NULL;){
d759 4
a762 3
Nick* CIrcWnd::NewNick( CString channel, CString nick ){
	Channel* toaddchan = FindChannelByName( channel );
	if( !toaddchan )
d764 3
a766 2
	Nick* toaddnick=NULL;
	if(toaddchan){
d769 2
a770 1
		if( nick.Left(1) == "!" ){
d777 2
a778 1
		if( nick.Left(1) == "*" ){
d785 2
a786 1
		if( nick.Left(1) == "@@" ){
d793 2
a794 1
		else if( nick.Left(1) == "%" ){
d801 2
a802 1
		else if( nick.Left(1) == "+"){
d809 2
a810 1
		else if( nick.Left(1) == "-"){
d817 2
a818 1
		else{
d825 2
a826 1
		if( toaddchan == m_pCurrentChannel ){
d828 2
a829 2
			itemnr = nickList.InsertItem(LVIF_PARAM,itemnr,0,0,0,0,(LPARAM)toaddnick);
			nickList.SetItemText(itemnr,0,(LPCTSTR)toaddnick->nick);
d832 1
a832 1
			nickList.SetItemText(itemnr,1,(LPCTSTR)mode);
d839 2
a840 1
void CIrcWnd::RefreshNickList( CString channel ){
d842 2
a843 2
	Channel* refresh = FindChannelByName( channel );
	if(!refresh )
d846 2
a847 1
	for (pos1 = refresh->nicks.GetHeadPosition();( pos2 = pos1 ) != NULL;){
d851 2
a852 2
		itemnr = nickList.InsertItem(LVIF_PARAM,itemnr,0,0,0,0,(LPARAM)curr_nick);
		nickList.SetItemText(itemnr,0,(LPCTSTR)curr_nick->nick);
d854 2
a855 2
		mode.Format(_T("%s%s%s%s%s%s"),curr_nick->owner, curr_nick->protect, curr_nick->op, curr_nick->hop, curr_nick->voice, curr_nick->uop);
		nickList.SetItemText(itemnr,1,(LPCTSTR)mode);
d860 4
a863 3
bool CIrcWnd::RemoveNick( CString channel, CString nick ){
	Channel* update = FindChannelByName( channel );
	if( !update )
d866 2
a867 1
	for( pos1 = update->nicks.GetHeadPosition();(pos2=pos1)!=NULL;){
d870 4
a873 2
		if( curr_nick->nick == nick ){
			if( update == m_pCurrentChannel ){
d889 4
a892 3
void CIrcWnd::DeleteAllNick( CString channel ){
	Channel* curr_channel = FindChannelByName(channel);
	if( !curr_channel )
d895 2
a896 1
	for(pos3 = curr_channel->nicks.GetHeadPosition();( pos4 = pos3) != NULL;){
d904 2
a905 1
void CIrcWnd::DeleteNickInAll( CString nick, CString message ){
d907 2
a908 1
	for (pos1 = channelPtrList.GetHeadPosition();( pos2 = pos1 ) != NULL;){
d911 4
a914 3
		if(RemoveNick( cur_channel->name, nick )){
			if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
			AddInfoMessage( cur_channel->name, GetResString(IDS_IRC_HASQUIT), nick, message);
d919 4
a922 3
bool CIrcWnd::ChangeNick( CString channel, CString oldnick, CString newnick ){
	Channel* update = FindChannelByName( channel );
	if( !update )
d925 2
a926 1
	for( pos1 = update->nicks.GetHeadPosition();(pos2=pos1)!=NULL;){
d929 4
a932 2
		if( curr_nick->nick == oldnick ){
			if( update = m_pCurrentChannel ){
d937 2
a938 2
				if (itemnr != (-1))
					nickList.SetItemText(itemnr,0,(LPCTSTR)newnick);
d947 4
a950 3
bool CIrcWnd::ChangeMode( CString channel, CString nick, CString mode ){
	Channel* update = FindChannelByName( channel );
	if( !update )
d953 2
a954 1
	for( pos1 = update->nicks.GetHeadPosition();(pos2=pos1)!=NULL;){
d957 2
a958 1
		if( curr_nick->nick == nick ){
d960 2
a961 1
			if( update = m_pCurrentChannel ){
d967 2
a968 1
			if( mode == "+a" ){
d971 2
a972 1
			if( mode == "-a" ){
d975 2
a976 1
			if(mode == "+h"){
d979 2
a980 1
			if(mode == "-h"){
d983 2
a984 1
			if(mode == "+o"){
d987 2
a988 1
			if(mode == "-o"){
d991 2
a992 1
			if( mode == "+q" ){
d995 2
a996 1
			if( mode == "-q" ){
d999 2
a1000 1
			if( mode == "+u" ){
d1003 2
a1004 1
			if( mode == "-u" ){
d1007 2
a1008 1
			if( mode == "+v" ){
d1011 2
a1012 1
			if( mode == "-v" ){
d1015 5
a1019 4
			if( itemnr != (-1) ){
					CString mode;
					mode.Format(_T("%s%s%s%s%s%s"),curr_nick->owner, curr_nick->protect, curr_nick->op, curr_nick->hop, curr_nick->voice, curr_nick->uop);
					nickList.SetItemText(itemnr,1,(LPCTSTR)mode);
d1026 9
a1034 6
void CIrcWnd::ParseChangeMode( CString channel, CString changer, CString commands, CString names ){
	try{
		if( commands.GetLength() == 2 ){
			if( ChangeMode( channel, names, commands ))
				if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
				AddInfoMessage( channel, GetResString(IDS_IRC_SETSMODE), changer, commands, names);
d1037 2
a1038 1
		else{
d1041 2
a1042 1
			if( dir == "+" || dir == "-"){
d1045 3
a1047 2
				int currNameBack = names.Find( " ", currName);
				while( currMode < commands.GetLength()){
d1049 7
a1055 7
					test = names.Mid(currName, currNameBack-currName);
					currName = currNameBack +1;
					if( ChangeMode( channel, test, dir + commands[currMode]))
						if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
							AddInfoMessage( channel, GetResString(IDS_IRC_SETSMODE), changer, dir + commands[currMode] , test);
					currNameBack = names.Find(_T(" "), currName+1);
					if( currNameBack == -1)
d1062 3
a1064 2
	catch(...){
		AddInfoMessage( channel, GetResString(IDS_IRC_NOTSUPPORTED));
d1068 5
a1072 3
void CIrcWnd::ChangeAllNick( CString oldnick, CString newnick ){
	Channel* currchannel = FindChannelByName( oldnick );
	if( currchannel ){
d1078 3
a1080 2
		for (i = 0; i < channelselect.GetItemCount();i++){
			channelselect.GetItem(i,&item);
d1088 2
a1089 2
		item.cchTextMax = (int)newnick.GetLength()+1;
		channelselect.SetItem( i, &item);
d1092 2
a1093 1
	for (pos1 = channelPtrList.GetHeadPosition();( pos2 = pos1 ) != NULL;){
d1096 4
a1099 3
		if(ChangeNick( cur_channel->name, oldnick, newnick )){
			if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
			AddInfoMessage( cur_channel->name, GetResString(IDS_IRC_NOWKNOWNAS), oldnick, newnick);
d1111 3
a1113 2
int CIrcWnd::SortProcNick(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort){
	Nick* item1 = (Nick*)lParam1;
d1115 22
a1136 21
		switch(lParamSort){
		case 0: 
//			if( item1->mode == item2->mode )
//				return CString(item1->nick).CompareNoCase(item2->nick);
			if( item1->owner == "!" )
				return -1;
			if( item2->owner == "!" )
				return 1;
			if( item1->op == "@@" )
				return -1;
			if( item2->op == "@@" )
				return 1;
			if( item1->hop == "%" )
				return -1;
			if( item2->hop == "%" )
				return 1;
			if( item1->voice == "+" )
				return -1;
			if( item2->voice == "+" )
				return 1;
			return 0;
d1138 17
a1154 17
			if( item1->owner == "!" )
				return -1;
			if( item2->owner == "!" )
				return 1;
			if( item1->op == "@@" )
				return -1;
			if( item2->op == "@@" )
				return 1;
			if( item1->hop == "%" )
				return -1;
			if( item2->hop == "%" )
				return 1;
			if( item1->voice == "+" )
				return -1;
			if( item2->voice == "+" )
				return 1;
			return 0;
d1156 1
a1156 1
			return 0;
d1160 2
a1161 1
void CIrcWnd::OnColumnClickNick( NMHDR* pNMHDR, LRESULT* pResult){
d1163 1
a1163 1
	NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR;
d1166 1
a1166 1
	nickList.SortItems(SortProcNick, pNMListView->iSubItem+ ((m_bSortAscending[pNMListView->iSubItem])? 0:10));
d1170 9
a1178 8
void CIrcWnd::OnNMRclickNick(NMHDR *pNMHDR, LRESULT *pResult) 
{ 
	
	if (nickList.GetSelectionMark() != (-1) ){
		POINT point; 
		::GetCursorPos(&point); 
		CPoint p = point; 
		ScreenToClient(&p); 
d1180 1
a1180 1
		m_NickMenu.CreatePopupMenu(); 
d1182 30
a1211 28
		m_NickMenu.AppendMenu(MF_STRING,Irc_Priv,GetResString(IDS_IRC_PRIVMESSAGE)); 
//		m_NickMenu.AppendMenu(MF_STRING,Irc_AddFriend,GetResString(IDS_IRC_ADDTOFRIENDLIST));
//		if( !GetSendFileString().IsEmpty() )
//			m_NickMenu.AppendMenu(MF_STRING,Irc_SendLink, (CString)GetResString(IDS_IRC_SENDLINK) + GetSendFileString() );
		m_NickMenu.AppendMenu(MF_STRING,Irc_Slap,GetResString(IDS_IRC_SLAP));
		m_NickMenu.AppendMenu(MF_STRING,Irc_Owner,"Owner");
		m_NickMenu.AppendMenu(MF_STRING,Irc_DeOwner,"DeOwner");
		m_NickMenu.AppendMenu(MF_STRING,Irc_Op,GetResString(IDS_IRC_OP));
		m_NickMenu.AppendMenu(MF_STRING,Irc_DeOp,GetResString(IDS_IRC_DEOP));
		m_NickMenu.AppendMenu(MF_STRING,Irc_HalfOp,GetResString(IDS_IRC_HALFOP));
		m_NickMenu.AppendMenu(MF_STRING,Irc_DeHalfOp,GetResString(IDS_IRC_DEHALFOP));
		m_NickMenu.AppendMenu(MF_STRING,Irc_Voice,GetResString(IDS_IRC_VOICE));
		m_NickMenu.AppendMenu(MF_STRING,Irc_DeVoice,GetResString(IDS_IRC_DEVOICE));
		m_NickMenu.AppendMenu(MF_STRING,Irc_Protect,"Protect");
		m_NickMenu.AppendMenu(MF_STRING,Irc_DeProtect,"DeProtect");
		m_NickMenu.AppendMenu(MF_STRING,Irc_Kick,GetResString(IDS_IRC_KICK));
		m_NickMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON, point.x, point.y, this); 
		VERIFY( m_NickMenu.DestroyMenu() );
	}
   *pResult = 0; 
}

void CIrcWnd::OnNMDblclkNickList(NMHDR *pNMHDR, LRESULT *pResult){
	int nickItem= nickList.GetSelectionMark();
	if(nickItem != -1) {
		Nick* nick = (Nick*)nickList.GetItemData(nickItem);
		if(nick)
			AddInfoMessage( nick->nick, GetResString(IDS_IRC_PRIVATECHANSTART));
d1218 2
a1219 2
	//LPNMLISTVIEW pNMLV = reinterpret_cast<LPNMLISTVIEW>(pNMHDR);
	// TODO: Add your control notification handler code here
d1225 1
a1225 1
// Messages
d1229 2
a1230 1
void CIrcWnd::AddStatus( CString line,...){
d1237 1
a1237 1
	_strtime( osTime );
d1239 2
a1240 2
	if( g_eMuleApp.m_pGlobPrefs->GetIRCAddTimestamp() )
		timestamp.Format(_T("%s: "),osTime);
d1242 2
a1243 1
	if( !update_channel ){
d1246 1
a1246 1
	line = StripMessageOfFontCodes( temp );
d1248 3
a1250 2
	line.Replace( _T("\004"), _T("%") );
	if (line.Mid(0,1) == "*"){
d1252 2
a1253 2
		update_channel->log.AppendKeyWord(line.Left(2),RGB(255,0,0));
		update_channel->log.AppendText(line.Mid(1) );
d1255 3
a1257 2
	else if (line.Mid(0,1) == "-"){
		int index = line.Find( _T("-"), 1 );
d1259 2
a1260 2
		update_channel->log.AppendKeyWord(line.Left(index),RGB(150,0,0));
		update_channel->log.AppendText(line.Mid(index) );
d1264 3
a1266 2
	if( m_pCurrentChannel == update_channel ){
		statusWindow.SetHyperText(&update_channel->log,true);
d1269 1
a1269 1
	SetActivity( update_channel->name, true );
d1272 3
a1274 2
void CIrcWnd::AddInfoMessage( CString channelName, CString line,...){
	if(channelName.IsEmpty())
d1282 1
a1282 1
	_strtime( osTime );
d1284 2
a1285 2
	if( g_eMuleApp.m_pGlobPrefs->GetIRCAddTimestamp() )
		timestamp.Format(_T("%s: "),osTime);
d1287 4
a1290 3
	if( !update_channel ){
		if( channelName.Left(1) == "#" )
			update_channel = NewChannel( channelName, 4);
d1292 1
a1292 1
			update_channel = NewChannel( channelName, 5);
d1294 1
a1294 1
	line = StripMessageOfFontCodes( temp );
d1296 3
a1298 2
	line.Replace( _T("\004"), _T("%") );
	if (line.Mid(0,1) == "*"){
d1300 2
a1301 2
		update_channel->log.AppendKeyWord(line.Left(2),RGB(255,0,0));
		update_channel->log.AppendText(line.Mid(1) );
d1303 3
a1305 2
	else if (line.Mid(0,1) == "-"){
		int index = line.Find( _T("-"), 1 );
d1307 2
a1308 2
		update_channel->log.AppendKeyWord(line.Left(index),RGB(150,0,0));
		update_channel->log.AppendText(line.Mid(index) );
d1312 4
a1315 3
	
	if( m_pCurrentChannel == update_channel ){
		statusWindow.SetHyperText(&update_channel->log,true);
d1318 1
a1318 1
	SetActivity( update_channel->name, true );
d1321 3
a1323 2
void CIrcWnd::AddMessage( CString channelName, CString targetname, CString line,...){
	if(channelName.IsEmpty() || targetname.IsEmpty())
d1332 1
a1332 1
	_strtime( osTime );
d1334 2
a1335 2
	if( g_eMuleApp.m_pGlobPrefs->GetIRCAddTimestamp() )
		timestamp.Format(_T("%s: "),osTime);
d1337 4
a1340 3
	if( !update_channel ){
		if( channelName.Left(1) == "#" )
			update_channel = NewChannel( channelName, 4);
d1342 1
a1342 1
			update_channel = NewChannel( channelName, 5);
d1344 1
a1344 1
	line = StripMessageOfFontCodes( line );
d1346 1
a1346 1
	line.Replace( _T("\004"), _T("%") );
d1349 1
a1349 1
		color = RGB(1,100,1);
d1351 2
a1352 2
		color = RGB(1,20,130);	
	targetname = CString(_T("<"))+ targetname + CString(_T(">"));
d1355 4
a1358 3
	update_channel->log.AppendText(CString(_T(" "))+line);
	if( m_pCurrentChannel == update_channel ){
		statusWindow.SetHyperText(&update_channel->log,true);
d1361 1
a1361 1
	SetActivity( update_channel->name, true );	
d1364 4
a1367 2
void CIrcWnd::SetConnectStatus( bool flag ){
	if(flag){
d1372 2
a1373 1
	else{
d1378 4
a1381 3
		while( channelPtrList.GetCount() > 2 ){
			Channel* todel = (Channel*)channelPtrList.GetTail();
			RemoveChannel( todel->name );
d1386 2
a1387 1
void CIrcWnd::NoticeMessage( CString source, CString message ){
d1389 4
a1392 3
	Channel* curr_channel = FindChannelByName( source );
	if( curr_channel ){
		AddInfoMessage( source, _T("-%s- %s"), source, message);
d1396 2
a1397 1
	for (pos1 = channelPtrList.GetHeadPosition();( pos2 = pos1 ) != NULL;){
d1400 5
a1404 4
		Nick* curr_nick = FindNickByName(curr_channel->name, source );
		if( curr_nick){
			AddInfoMessage( curr_channel->name, _T("-%s- %s"), source, message);
			flag = true;			
d1407 4
a1410 3
	if( flag == false ){
		if( m_pCurrentChannel->type == 4 )
			AddInfoMessage( m_pCurrentChannel->name, _T("-%s- %s"), source, message);
d1412 1
a1412 1
			AddStatus( _T("-%s- %s"), source, message );
d1417 3
a1419 2
CString CIrcWnd::StripMessageOfFontCodes( CString temp ){
	temp = StripMessageOfColorCodes( temp );
d1421 2
a1422 1
	for( int i = 0; i < temp.GetLength(); i++ ){
d1424 2
a1425 1
		switch( j ){
d1430 5
a1434 4
			case 31:{
				temp1 = temp.Left( i );
				temp2 = temp.Mid( i+1 );
				temp = temp1+temp2;
d1442 48
a1489 37
CString CIrcWnd::StripMessageOfColorCodes( CString temp ){
   if( !temp.IsEmpty() ) 
   { 
      CString temp1, temp2; 
      int test = temp.Find( 3 ); 
      if( test != -1 ){ 
         int testlength = temp.GetLength() - test; 
         if( testlength < 2 ) 
            return temp; 
         temp1 = temp.Left( test ); 
         temp2 = temp.Mid( test + 2); 
         if( testlength < 4 ) 
            return temp1+temp2; 
         if( temp2[0] == 44 && temp2.GetLength() > 2){ 
            temp2 = temp2.Mid(2); 
            for( int I = 48; I < 58; I++ ){ 
               if( temp2[0] == I ){ 
                  temp2 = temp2.Mid(1); 
               } 
            } 
         } 
         else{ 
            for( int I = 48; I < 58; I++ ){ 
               if( temp2[0] == I ){ 
                  temp2 = temp2.Mid(1); 
                  if( temp2[0] == 44 && temp2.GetLength() > 2){ 
                     temp2 = temp2.Mid(2); 
                     for( int I = 48; I < 58; I++ ){ 
                        if( temp2[0] == I ){ 
                           temp2 = temp2.Mid(1); 
                        } 
                     } 
                  } 
               } 
            } 
         } 
         temp = temp1 + temp2; 
d1491 9
a1499 8
      } 
   } 
   return temp; 
} 

void CIrcWnd::SetTitle( CString channel, CString title ){
	Channel* curr_channel = FindChannelByName(channel);
	if(!curr_channel)
d1502 2
a1503 2
	if( curr_channel == m_pCurrentChannel )
		titleWindow.SetWindowText( curr_channel->title );
d1506 5
a1510 3
void CIrcWnd::SetActivity( CString channel, bool flag){
	Channel* refresh = FindChannelByName( channel );
	if( !refresh ){
d1512 1
a1512 1
		if( !refresh )
d1519 3
a1521 2
	for (i = 0; i < channelselect.GetItemCount();i++){
		channelselect.GetItem(i,&item);
d1527 8
a1534 1
    if( flag ){
d1536 2
a1537 7
 	   item.iImage = 2;
	   channelselect.SetItem( i, &item );
    }
	else{
	   item.mask = TCIF_IMAGE;
 	   item.iImage = 1;
	   channelselect.SetItem( i, &item );
d1547 2
a1548 1
	if (m_pCurrentChannel->history.GetCount()==g_eMuleApp.m_pGlobPrefs->GetMaxChatHistoryLines()) m_pCurrentChannel->history.RemoveAt(0);
d1550 1
a1550 1
	m_pCurrentChannel->history_pos=m_pCurrentChannel->history.GetCount();
d1552 1
a1552 1
	if( send.IsEmpty() )
d1554 1
a1554 1
	if( !m_bConnected )
d1556 15
a1570 11
	if( send.Left(1) == "/" && send.Left(3) != "/me"){
		if (send.Left(4) == "/msg"){
			if( m_pCurrentChannel->type == 4 || m_pCurrentChannel->type == 5){
				send.Replace( _T("%"), _T("\004") );
				AddInfoMessage( m_pCurrentChannel->name ,CString("* >> ")+send.Mid(5));
				send.Replace( _T("\004"), _T("%") );
			}
			else{
				send.Replace( _T("%"), _T("\004") );
				AddStatus( CString(_T("* >> "))+send.Mid(5));
				send.Replace( _T("\004"), _T("%") );
d1573 1
a1573 1
			
d1575 2
a1576 1
		if( ((CString)send.Left(17)).CompareNoCase( _T("/PRIVMSG nickserv")  )== 0){
d1579 2
a1580 1
		if( ((CString)send.Left(17)).CompareNoCase( _T("/PRIVMSG chanserv") )== 0){
d1586 2
a1587 1
	if( m_pCurrentChannel->type < 4 ){
d1591 2
a1592 1
	if( send.Left(3) == "/me" ){
d1594 6
a1599 6
	   build.Format( _T("PRIVMSG %s :\001ACTION %s\001"), m_pCurrentChannel->name, send.Mid(4) );
	   send.Replace( _T("%"), _T("\004") );
	   AddInfoMessage( m_pCurrentChannel->name, _T("* %s %s"), m_pIrcMain->GetNick(), send.Mid(4));
	   send.Replace( _T("\004"), _T("%") );
	   m_pIrcMain->SendString(build);
	   return;
d1603 3
a1605 3
	send.Replace( _T("%"), _T("\004") );
	AddMessage( m_pCurrentChannel->name, m_pIrcMain->GetNick(), send );
	send.Replace( _T("\004"), _T("%") );
d1610 1
a1610 1
// Channels
d1614 2
a1615 1
Channel* CIrcWnd::FindChannelByName(CString name){
d1617 2
a1618 1
	for (pos1 = channelPtrList.GetHeadPosition();( pos2 = pos1 ) != NULL;){
d1627 3
a1629 2
Channel* CIrcWnd::NewChannel( CString name, uint8 type ){
	Channel* toadd = new Channel;
d1633 1
a1633 1
	toadd->history_pos=0;
d1636 1
a1636 1
	newitem.mask = TCIF_PARAM|TCIF_TEXT|TCIF_IMAGE;
d1639 1
a1639 1
	newitem.cchTextMax = (int)name.GetLength()+1;
d1641 1
a1641 1
	channelselect.InsertItem(channelselect.GetItemCount(),&newitem);
d1645 4
a1648 3
void CIrcWnd::RemoveChannel( CString channel ){
	Channel* todel = FindChannelByName( channel );
	if( !todel )
d1654 3
a1656 2
	for (i = 0; i < channelselect.GetItemCount();i++){
		channelselect.GetItem(i,&item);
d1664 2
a1665 1
	if( todel == m_pCurrentChannel ){
d1668 3
a1670 2
		if( channelselect.GetItemCount() > 2 && i > 1 ) {
			if ( i == 2 )
d1672 3
a1674 3
			channelselect.SetCurSel(i-1);
			channelselect.SetCurFocus(i-1);
			OnTcnSelchangeTab2( NULL, NULL );
d1676 2
a1677 1
		else {
d1680 1
a1680 1
			OnTcnSelchangeTab2( NULL, NULL );
d1688 2
a1689 1
void CIrcWnd::DeleteAllChannel(){
d1691 2
a1692 1
	for (pos1 = channelPtrList.GetHeadPosition();( pos2 = pos1 ) != NULL;){
d1694 1
a1694 1
		Channel* cur_channel =	(Channel*)channelPtrList.GetAt(pos2);
d1701 4
a1704 2
void CIrcWnd::JoinChannels(){
	if( !m_bConnected ) return;
d1706 7
a1712 6
	int index = -1; 
	POSITION pos = serverChannelList.GetFirstSelectedItemPosition(); 
	while(pos != NULL) 
	{ 
		index = serverChannelList.GetNextSelectedItem(pos); 
		if(index > -1){ 
d1714 2
a1715 2
			join = _T("JOIN ") + serverChannelList.GetItemText(index, 0 );
			m_pIrcMain->SendString( join );
d1717 1
a1717 1
	} 
d1720 3
a1722 2
LRESULT CIrcWnd::OnCloseTab(WPARAM wparam, LPARAM lparam) {
	OnBnClickedClosechat( (int)wparam );
d1726 4
a1729 2
void CIrcWnd::SendString( CString send ){ 
	if( this->m_bConnected ) m_pIrcMain->SendString( send );
d1732 2
a1733 1
void CIrcWnd::ScrollHistory(bool down) {
d1736 2
a1737 2
	if ((m_pCurrentChannel->history_pos==0 && !down) || 
		(m_pCurrentChannel->history_pos==m_pCurrentChannel->history.GetCount() && down))
d1739 1
a1739 1
	
d1745 1
a1745 1
	buffer = (m_pCurrentChannel->history_pos==m_pCurrentChannel->history.GetCount())?"":m_pCurrentChannel->history.GetAt(m_pCurrentChannel->history_pos);
d1748 1
a1748 1
	inputWindow.SetSel(buffer.GetLength(),buffer.GetLength());
@


1.14
log
@Formatting, comments, and name changes.
@
text
@d44 1
a44 1
   memset(&m_bSortAscending, 0, sizeof(m_bSortAscending)); // i_a 
@


1.13
log
@Localization fixes.
@
text
@d44 1
a44 1
   memset(&asc_sort, 0, sizeof(asc_sort)); // i_a 
d632 3
a634 3
	asc_sort[pNMListView->iSubItem] = !asc_sort[pNMListView->iSubItem];
	serverChannelList.SetSortArrow(pNMListView->iSubItem, (asc_sort[pNMListView->iSubItem])); //Cax2 bugfix
	serverChannelList.SortItems(SortProcChanL, pNMListView->iSubItem+ ((asc_sort[pNMListView->iSubItem])? 0:10));
d1031 3
a1033 3
	asc_sort[pNMListView->iSubItem] = !asc_sort[pNMListView->iSubItem];
//	nickList.SetSortArrow(pNMListView->iSubItem, asc_sort[pNMListView->iSubItem]);
	nickList.SortItems(SortProcNick, pNMListView->iSubItem+ ((asc_sort[pNMListView->iSubItem])? 0:10));
@


1.12
log
@Formatting, comments, and name changes.
@
text
@a89 2
	UpdateNickCount();

d107 32
d174 1
a174 1
	nickList.InsertColumn(1,_T(""),LVCFMT_LEFT,20);
d185 3
a187 2
	NewChannel( GetResString(IDS_STATUS), 1 );
	NewChannel( GetResString(IDS_IRC_CHANNELLIST), 2);
d192 1
a192 1
	channelselect.SetCurSel( 1);
@


1.11
log
@Updated Chat & IRC code. Workaround for bug #0000322
@
text
@d608 2
a609 2
	int m_CurrentSortItem=(sortCode<10)?sortCode:sortCode-10;
	serverChannelList.SetSortArrow(m_CurrentSortItem,(sortCode<10));
@


1.10
log
@A little more method factoring, a few name changes, no (intended) logic changes.
@
text
@d236 26
d340 26
d433 2
a434 2
   if((pMsg->message == WM_KEYDOWN) && (pMsg->wParam == 13)){
	   if (pMsg->hwnd == GetDlgItem(IDC_INPUTWINDOW)->m_hWnd)
d436 10
a445 2
   }
   return CResizableDialog::PreTranslateMessage(pMsg);
d458 1
a458 1
void CIrcWnd::OnBnClickedClosechat()
d462 5
a466 2
	int cur_sel = channelselect.GetCurSel();
	if (cur_sel == (-1))
d468 2
a469 1
	channelselect.GetItem(cur_sel,&item);
d531 1
d614 11
a624 11
   POINT point; 
   ::GetCursorPos(&point); 
   CPoint p = point; 
   ScreenToClient(&p); 
   CTitleMenu m_ChanLMenu;
   m_ChanLMenu.CreatePopupMenu();
   m_ChanLMenu.AddMenuTitle(GetResString(IDS_IRC_CHANNEL));
   m_ChanLMenu.AppendMenu(MF_STRING,Irc_Join,GetResString(IDS_IRC_JOIN)); 
   m_ChanLMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON, point.x, point.y, this); 
   m_ChanLMenu.DestroyMenu();
   *pResult = 0; 
d659 15
d675 4
a678 1
			toaddnick->mode = "@@";
d682 4
a685 1
			toaddnick->mode = "%";
d689 11
a699 1
			toaddnick->mode = "+";
d703 3
a706 1
			toaddnick->mode = "";
d713 3
a715 1
			nickList.SetItemText(itemnr,1,(LPCTSTR)toaddnick->mode);
d734 3
a736 1
		nickList.SetItemText(itemnr,1,(LPCTSTR)curr_nick->mode);
d831 20
a850 7
			if( mode == "+v" ){
				if( curr_nick->mode == "@@" || curr_nick->mode =="%" )
					return true;
				if( itemnr != (-1) )
					nickList.SetItemText(itemnr,1,(LPCTSTR)"+");
				curr_nick->mode = "+";
					return true;
d852 2
a853 7
			else if(mode == "+h"){
				if( curr_nick->mode == "@@" )
					return true;
				if( itemnr != (-1) )
					nickList.SetItemText(itemnr,1,(LPCTSTR)"%");
				curr_nick->mode = "%";
					return true;
d855 2
a856 5
			else if(mode == "+o"){
				if( itemnr != (-1) )
					nickList.SetItemText(itemnr,1,(LPCTSTR)"@@");
				curr_nick->mode = "@@";
					return true;
d858 2
a859 7
			if( mode == "-v" ){
				if( curr_nick->mode == "@@" || curr_nick->mode =="%" )
					return true;
				if( itemnr != (-1) )
					nickList.SetItemText(itemnr,1,(LPCTSTR)"");
				curr_nick->mode = "";
					return true;
d861 2
a862 7
			else if(mode == "-h"){
				if( curr_nick->mode == "@@" )
					return true;
				if( itemnr != (-1) )
					nickList.SetItemText(itemnr,1,(LPCTSTR)"");
				curr_nick->mode = "";
					return true;
d864 2
a865 5
			else if(mode == "-o"){
				if( itemnr != (-1) )
					nickList.SetItemText(itemnr,1,(LPCTSTR)"");
				curr_nick->mode = "";
					return true;
d867 3
a869 2
			else{
				if( itemnr != (-1) )
a870 2
				curr_nick->mode = mode;
				return true;
d874 1
a874 1
	return false;
d878 31
a908 5
	if( commands.GetLength() == 2 ){
		if( ChangeMode( channel, names, commands ))
			if( !g_eMuleApp.m_pGlobPrefs->GetIrcIgnoreInfoMessage() )
			AddInfoMessage( channel, GetResString(IDS_IRC_SETSMODE), changer, commands, names);
		return;
a909 2
	// Need to support multiple mode changes
	AddInfoMessage( channel, GetResString(IDS_IRC_NOTSUPPORTED));
d955 11
a965 3
			if( item1->mode == item2->mode )
				return CString(item1->nick).CompareNoCase(item2->nick);
			if( item1->mode == "@@" )
d967 1
a967 1
			if( item2->mode == "@@" )
d969 1
a969 1
			if( item1->mode == "%" )
d971 1
a971 1
			if( item2->mode == "%" )
a972 2
			if( item1->mode == "+" )
			return -1;
d975 5
a979 3
			if( item1->mode == item2->mode )
				return CString(item1->nick).CompareNoCase(item2->nick);
			if( item1->mode == "@@" )
d981 1
a981 1
			if( item2->mode == "@@" )
d983 1
a983 1
			if( item1->mode == "%" )
d985 1
a985 1
			if( item2->mode == "%" )
d987 1
a987 1
			if( item1->mode == "+" )
d989 2
d1018 1
a1018 1
		m_NickMenu.AppendMenu(MF_STRING,Irc_AddFriend,GetResString(IDS_IRC_ADDTOFRIENDLIST));
d1022 2
d1030 2
d1034 1
a1034 1
		m_NickMenu.DestroyMenu();
d1051 1
a1051 1
	//	LPNMLISTVIEW pNMLV = reinterpret_cast<LPNMLISTVIEW>(pNMHDR);
d1173 1
a1173 1
	targetname = CString("<")+ targetname + CString(">");
d1176 1
a1176 1
	update_channel->log.AppendText(CString(" ")+line);
d1310 1
d1336 5
d1354 1
a1354 1
				AddStatus( CString("* >> ")+send.Mid(5));
d1357 1
a1357 1
			send = CString("/PRIVMSG") + send.Mid(4);
d1361 1
a1361 1
			send = CString("/ns") + send.Mid(17);
d1364 1
a1364 1
			send = CString("/cs") + send.Mid(17);
d1411 1
d1429 1
d1431 1
a1431 1
	for (i = 0; i != channelselect.GetItemCount();i++){
d1473 2
d1486 27
@


1.9
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d149 1
a149 1
	serverChannelList.LoadSettings(CPreferences::tableIrc);		//Cax2
@


1.8
log
@unicode cleanup
@
text
@d173 1
a173 1
	if (theApp.glob_prefs->DoUseSort()) SortInit(theApp.glob_prefs->GetIrcSortCol());
d188 3
a190 3
	statusWindow.SetFont(&theApp.emuledlg->m_DefaultFont);
	titleWindow.SetFont(&theApp.emuledlg->m_DefaultFont);
	inputWindow.SetFont(&theApp.emuledlg->m_DefaultFont);
d494 2
a495 2
	if( (theApp.glob_prefs->GetIRCChanNameFilter() || theApp.glob_prefs->GetIRCChannelUserFilter()) && theApp.glob_prefs->GetIRCUseChanFilter()){
		if( usertest < theApp.glob_prefs->GetIRCChannelUserFilter() )
d497 1
a497 1
		if( dtemp.MakeLower().Find(theApp.glob_prefs->GetIRCChanNameFilter().MakeLower()) == -1 && ntemp.MakeLower().Find(theApp.glob_prefs->GetIRCChanNameFilter().MakeLower()) == -1)
d683 1
a683 1
			if( !theApp.glob_prefs->GetIrcIgnoreInfoMessage() )
d787 1
a787 1
			if( !theApp.glob_prefs->GetIrcIgnoreInfoMessage() )
d820 1
a820 1
			if( !theApp.glob_prefs->GetIrcIgnoreInfoMessage() )
d828 1
a828 1
	theApp.glob_prefs->SetIRCNick( in_nick.GetBuffer() );
d940 1
a940 1
	if( theApp.glob_prefs->GetIRCAddTimestamp() )
d980 1
a980 1
	if( theApp.glob_prefs->GetIRCAddTimestamp() )
d1025 1
a1025 1
	if( theApp.glob_prefs->GetIRCAddTimestamp() )
@


1.7
log
@unicode cleanup
@
text
@d69 1
a69 1
		strRes.Format( "%s[%i]", GetResString(IDS_IRC_NICK), nickList.GetItemCount());
d71 1
a71 1
		strRes.Format( "%s", GetResString(IDS_IRC_NICK));
d144 1
a144 1
	nickList.InsertColumn(1,"",LVCFMT_LEFT,20);
d154 1
a154 1
	statusWindow.CreateEx(WS_EX_STATICEDGE,0,"MsgWnd",WS_CHILD | HTC_WORDWRAP |HTC_AUTO_SCROLL_BARS | HTC_UNDERLINE_HOVER,rect.left,rect.top,rect.Width(),rect.Height(),m_hWnd,0);
d244 1
a244 1
			   send.Format( "MODE %s +o %s", chan->name, nick->nick );
d257 1
a257 1
			   send.Format( "MODE %s -o %s", chan->name, nick->nick );
d270 1
a270 1
			   send.Format( "MODE %s +h %s", chan->name, nick->nick );
d283 1
a283 1
			   send.Format( "MODE %s -h %s", chan->name, nick->nick );
d296 1
a296 1
			   send.Format( "MODE %s +v %s", chan->name, nick->nick );
d309 1
a309 1
			   send.Format( "MODE %s -v %s", chan->name, nick->nick );
d322 1
a322 1
			   send.Format( "KICK %s %s", chan->name, nick->nick );
d349 1
a349 1
			   send.Format( "PRIVMSG %s :\001RSQFRIEND |%i|\001", nick->nick, m_pIrcMain->SetVerify() );
d362 1
a362 1
			   send.Format( "PRIVMSG %s :\001SENDLINK !|%s\001", nick->nick, GetSendFileString() );
d410 1
a410 1
			part = "PART " + partChannel->name;
d939 1
a939 1
	CString timestamp = "";
d941 1
a941 1
		timestamp.Format("%s: ",osTime);
d948 1
a948 1
	line.Replace( "\004", "%" );
d955 1
a955 1
		int index = line.Find( "-", 1 );
d979 1
a979 1
	CString timestamp = "";
d981 1
a981 1
		timestamp.Format("%s: ",osTime);
d991 1
a991 1
	line.Replace( "\004", "%" );
d998 1
a998 1
		int index = line.Find( "-", 1 );
d1024 1
a1024 1
	CString timestamp = "";
d1026 1
a1026 1
		timestamp.Format("%s: ",osTime);
d1036 1
a1036 1
	line.Replace( "\004", "%" );
d1075 1
a1075 1
		AddInfoMessage( source, "-%s- %s", source, message);
d1084 1
a1084 1
			AddInfoMessage( curr_channel->name, "-%s- %s", source, message);
d1090 1
a1090 1
			AddInfoMessage( m_pCurrentChannel->name, "-%s- %s", source, message);
d1092 1
a1092 1
			AddStatus( "-%s- %s", source, message );
d1203 1
a1203 1
	GetDlgItem(IDC_INPUTWINDOW)->SetWindowText("");
d1211 1
a1211 1
				send.Replace( "%", "\004" );
d1213 1
a1213 1
				send.Replace( "\004", "%" );
d1216 1
a1216 1
				send.Replace( "%", "\004" );
d1218 1
a1218 1
				send.Replace( "\004", "%" );
d1223 1
a1223 1
		if( ((CString)send.Left(17)).CompareNoCase( "/PRIVMSG nickserv"  )== 0){
d1226 1
a1226 1
		if( ((CString)send.Left(17)).CompareNoCase( "/PRIVMSG chanserv" )== 0){
d1238 4
a1241 4
	   build.Format( "PRIVMSG %s :\001ACTION %s\001", m_pCurrentChannel->name, send.Mid(4) );
	   send.Replace( "%", "\004" );
	   AddInfoMessage( m_pCurrentChannel->name, "* %s %s", m_pIrcMain->GetNick(), send.Mid(4));
	   send.Replace( "\004", "%" );
d1245 1
a1245 1
	CString build = "PRIVMSG " + m_pCurrentChannel->name + " :" + send;
d1247 1
a1247 1
	send.Replace( "%", "\004" );
d1249 1
a1249 1
	send.Replace( "\004", "%" );
d1303 1
a1303 1
		statusWindow.SetWindowText("");
d1341 1
a1341 1
			join = "JOIN " + serverChannelList.GetItemText(index, 0 );
@


1.6
log
@Eklmn and BavarianSnail changes. see changelog+
@
text
@d493 1
a493 1
	int usertest = atoi(user);
d521 1
a521 1
			return atoi(item1->users) - atoi(item2->users);
d523 1
a523 1
			return atoi(item2->users) - atoi(item1->users);
@


1.5
log
@minor fixes and improvements
@
text
@d178 8
d470 1
@


1.4
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d208 1
a208 1
   int chanLItem= serverChannelList.GetSelectionMark(); 
d582 1
a582 1
	Nick* toaddnick;
d792 1
d794 1
a794 1
		for (i = 0; i != channelselect.GetItemCount();i++){
d911 1
a911 1
	LPNMLISTVIEW pNMLV = reinterpret_cast<LPNMLISTVIEW>(pNMHDR);
d1171 1
a1171 1
	for (i = 0; i != channelselect.GetItemCount();i++){
@


1.3
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@d24 7
@


1.2
log
@bugfixes & control panel updates
@
text
@d42 2
d1287 1
a1287 1
		if( channelselect.GetItemCount() > 1 || i < 2 ) {
@


1.2.2.1
log
@initial upgrade to .26
@
text
@a41 2
	if( m_bConnected )
		m_pIrcMain->Disconnect(true);
d1285 1
a1285 1
		if( channelselect.GetItemCount() > 2 && i > 1 ) {
@


1.1
log
@*** empty log message ***
@
text
@a104 8
/*	imagelist.Create(16,16,ILC_COLOR32,0,10);
	imagelist.SetBkColor(::GetSysColor(COLOR_BTNFACE));
	imagelist.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_CHAT),16,16));
	imagelist.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_MESSAGE),16,16));
	imagelist.Add(LoadImgLstIcon(MAKEINTRESOURCE(IDI_MPENDING),16,16));
	LoadImgLstIcon(NULL,0,0);	// delete temp-icon
	channelselect.SetImageList(&imagelist);
*/
d140 1
@


1.1.4.1
log
@updating this branch...
@
text
@@


1.1.4.2
log
@updated control panes, and assorted bugfixes
@
text
@d105 8
a147 1
	serverChannelList.LoadSettings(CPreferences::tableIrc);		//Cax2
@


