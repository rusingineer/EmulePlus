head	1.73;
access;
symbols
	PublicRelease_1_2e:1.71
	Interim_Release_1-2e_RC1:1.71
	PublicRelease_1_2d:1.71
	Interim_Release_1-2d_RC1:1.71
	Interim_Release_1-2d_beta1:1.71
	PublicRelease_1_2c:1.68
	Interim_Release_1-2c_RC1:1.68
	Interim_Release_1-2c_beta1:1.67
	PublicRelease_1_2b:1.67
	Interim_Release_1-2b_RC1:1.67
	PublicRelease_1_2a:1.65
	Interim_Release_1-2a_RC1:1.65
	Interim_Release_1-2a_beta2:1.65
	Interim_Release_1-2a_beta1:1.65
	PublicRelease_1_2:1.63
	Interim_Release_1-2_RC1:1.63
	Interim_Release_1-2_beta1:1.63
	PublicRelease_1_1g:1.63
	Interim_Release_1-1g_RC3:1.63
	Interim_Release_1-1g_RC2:1.63
	Interim_Release_1-1g_RC1:1.63
	Interim_Release_1-1g_beta2:1.63
	Interim_Release_1-1g_beta1:1.59
	PublicRelease_1_1f:1.57
	Interim_Release_1-1f_RC1:1.57
	PublicRelease_1_1e:1.57
	Interim_Release_1-1e_RC2:1.57
	Interim_Release_1-1e_RC1:1.57
	Interim_Release_1-1e_beta1:1.57
	PublicRelease_1_1d:1.56
	Interim_Release_1-1d_RC1:1.56
	PublicRelease_1_1c:1.56
	Interim_Release_1-1c_RC1:1.56
	Interim_Release_1-1c_beta2:1.56
	Interim_Release_1-1c_beta1:1.54
	PublicRelease_1_1b:1.52
	Interim_Release_1-1b_RC1:1.52
	PublicRelease_1_1a:1.51
	Interim_Release_1-1a_RC2:1.51
	Interim_Release_1-1a_RC1:1.51
	Interim_Release_1-1a_beta2:1.51
	Interim_Release_1-1a_beta1:1.51
	PublicRelease_1_1:1.51
	Interim_Release_1-1_beta1:1.51
	PublicRelease_1o:1.51
	Interim_Release_1o_RC1:1.51
	Interim_Release_1o_beta1:1.51
	PublicRelease_1n:1.50
	Interim_Release_1n_RC2:1.50
	Interim_Release_1n_RC1:1.50
	Interim_Release_1n_beta2:1.50
	Interim_Release_1n_beta1:1.50
	PublicRelease_1m:1.49
	Interim_Release_1m_beta1:1.49
	PublicRelease_1l:1.48
	Interim_Release_1l_RC3:1.48
	Interim_Release_1l_RC2:1.48
	Interim_Release_1l_RC1:1.48
	Interim_Release_1l_beta2:1.47
	Interim_Release_1l_beta1:1.46
	PublicRelease_1k:1.44
	Interim_Release_1k_RC4:1.44
	Interim_1k_RC3:1.44
	Interim_1k_RC2:1.44
	Interim_Release_1k_RC1:1.44
	Interim_Release_1k_beta5:1.44
	Intrerim_Release_1k_beta4:1.44
	Interim_Release_1k_beta1:1.44
	PublicRelease_1j:1.42
	Interim_Release_1J_RC3:1.42
	Interim_Release_1j_RC3:1.42
	Interim_Release_1j_RC2:1.42
	Interim_Release_1j_RC1:1.42
	Interim_Release_1j_beta2:1.42
	Interim_Release_1j_beta1:1.42
	PublicRelease_1i:1.42
	Interim_Release_1i_RC6:1.42
	Interim_Release_1i_RC3:1.42
	Interim_Release_1i_RC2:1.42
	Interim_Release_1i_RC1:1.42
	Interim_Release_1i_beta3:1.41
	Interim_Release_1i_beta2:1.39
	Interim_Release_1i_beta1:1.33
	PublicRelease_1h:1.28
	Interim_Release_1h_rc2:1.28
	Interim_Release_1h_RC1:1.28
	Interim_Release_1h_beta2:1.26
	Interim_Release_1h_beta1_now:1.24
	Interim_Release_1h_beta1:1.24
	PublicRelease_1g:1.21
	Interim_Release_1g_RC6_Final:1.21
	Interim_Release_1g_RC6:1.21
	Interim_Release_1g_RC5:1.21
	Interim_Release_1g_RC4:1.20
	Interim_Release_1g_RC3:1.19
	Interim_Release_1g_beta2:1.18
	Interim_Release_1g_beta1:1.18
	Interim_Release_1f_RC4:1.17
	Interim_Release_1f_RC3:1.17
	Interim_Release_1f_RC2:1.17
	Interim_Release_1f_RC:1.17
	Interim_Release_1f_beta2:1.17
	Interim_Release_1f_beta1:1.17
	PublicRelease_1e:1.17
	Interim_Release_1e_RC2:1.17
	Interim_Release_1e_RC:1.17
	Interim_Release_1e_beta3:1.17
	Interim_Release_1e_beta2:1.17
	Interim_Release_1e_beta2_before_kuchin:1.17
	Interim_Release_1e_beta1:1.16
	PublicRelease_1c:1.15
	featurestest:1.15.0.2
	Interim_Release_1c_RC:1.15
	Interim_Release_1c_beta2:1.14
	Interim_Release_1c_beta1:1.14
	threaded_downloadqueue:1.14.0.2
	PublicRelease_1b:1.13
	Interim_Release_1b_beta2:1.13
	Interim_Release_1b_beta1:1.12
	proxydeadlake:1.11.0.2
	PublicRelease_1a:1.11
	Interim_Release_1a_beta2:1.11
	BerkeleyDb:1.10.0.2
	Interim_Release_1a_beta1:1.10
	PublicRelease_1:1.9
	goldfish:1.9
	eMulePlus_1_RC2:1.9
	eMulePlus_26b_1RC1:1.9
	PreRelease_26b_i0e:1.9
	before_26d_merge:1.8
	Interim_Release_26b_i0d:1.8
	Interim_Release_26b_i0c:1.7
	Interim_Release_26b_i0b:1.7
	Interim_Release_26b_i0a:1.7
	systraydlg:1.5.0.4
	plus26based:1.5.0.2
	Interim_Release_25b_i0b:1.5
	Proxy_Dev:1.5
	Interim_Release_25b_i0a:1.4.2.2
	proxytest:1.4.2.1.0.2
	official_sockets:1.4.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.73
date	2009.06.23.03.44.41;	author aw3;	state Exp;
branches;
next	1.72;

1.72
date	2009.06.02.02.19.55;	author aw3;	state Exp;
branches;
next	1.71;

1.71
date	2007.10.31.18.18.52;	author fuxie-dk;	state Exp;
branches;
next	1.70;

1.70
date	2007.10.24.19.06.29;	author fuxie-dk;	state Exp;
branches;
next	1.69;

1.69
date	2007.09.27.14.26.53;	author fuxie-dk;	state Exp;
branches;
next	1.68;

1.68
date	2007.06.14.02.58.21;	author aw3;	state Exp;
branches;
next	1.67;

1.67
date	2007.01.17.07.42.41;	author aw3;	state Exp;
branches;
next	1.66;

1.66
date	2007.01.11.19.57.04;	author eklmn;	state Exp;
branches;
next	1.65;

1.65
date	2006.04.18.15.46.48;	author eklmn;	state Exp;
branches;
next	1.64;

1.64
date	2006.03.27.02.54.11;	author aw3;	state Exp;
branches;
next	1.63;

1.63
date	2005.11.11.05.55.00;	author aw3;	state Exp;
branches;
next	1.62;

1.62
date	2005.09.29.03.35.09;	author aw3;	state Exp;
branches;
next	1.61;

1.61
date	2005.09.17.03.43.09;	author aw3;	state Exp;
branches;
next	1.60;

1.60
date	2005.09.13.05.59.18;	author aw3;	state Exp;
branches;
next	1.59;

1.59
date	2005.08.21.21.26.41;	author eklmn;	state Exp;
branches;
next	1.58;

1.58
date	2005.08.12.03.43.07;	author aw3;	state Exp;
branches;
next	1.57;

1.57
date	2005.03.23.04.56.59;	author aw3;	state Exp;
branches;
next	1.56;

1.56
date	2005.02.14.17.37.47;	author aw3;	state Exp;
branches;
next	1.55;

1.55
date	2005.02.13.22.58.10;	author aw3;	state Exp;
branches;
next	1.54;

1.54
date	2005.01.19.10.48.09;	author dongato;	state Exp;
branches;
next	1.53;

1.53
date	2005.01.16.12.02.00;	author dongato;	state Exp;
branches;
next	1.52;

1.52
date	2004.12.13.05.25.08;	author aw3;	state Exp;
branches;
next	1.51;

1.51
date	2004.09.15.18.57.35;	author aw3;	state Exp;
branches;
next	1.50;

1.50
date	2004.07.18.18.31.31;	author eklmn;	state Exp;
branches;
next	1.49;

1.49
date	2004.06.17.12.41.39;	author netwolf1;	state Exp;
branches;
next	1.48;

1.48
date	2004.05.26.02.10.43;	author aw3;	state Exp;
branches;
next	1.47;

1.47
date	2004.05.19.10.14.24;	author netwolf1;	state Exp;
branches;
next	1.46;

1.46
date	2004.05.03.08.24.59;	author katsyonak;	state Exp;
branches;
next	1.45;

1.45
date	2004.04.18.13.17.30;	author bavariansnail;	state Exp;
branches;
next	1.44;

1.44
date	2004.02.18.11.43.26;	author netwolf1;	state Exp;
branches;
next	1.43;

1.43
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.42;

1.42
date	2003.10.31.23.01.59;	author eklmn;	state Exp;
branches;
next	1.41;

1.41
date	2003.10.31.06.47.00;	author eklmn;	state Exp;
branches;
next	1.40;

1.40
date	2003.10.27.17.25.09;	author eklmn;	state Exp;
branches;
next	1.39;

1.39
date	2003.10.24.01.21.19;	author morevit;	state Exp;
branches;
next	1.38;

1.38
date	2003.10.21.16.45.06;	author dongato;	state Exp;
branches;
next	1.37;

1.37
date	2003.10.20.15.49.35;	author eklmn;	state Exp;
branches;
next	1.36;

1.36
date	2003.10.20.13.19.58;	author morevit;	state Exp;
branches;
next	1.35;

1.35
date	2003.10.15.03.51.45;	author morevit;	state Exp;
branches;
next	1.34;

1.34
date	2003.10.08.15.39.47;	author morevit;	state Exp;
branches;
next	1.33;

1.33
date	2003.10.02.00.58.14;	author morevit;	state Exp;
branches;
next	1.32;

1.32
date	2003.09.29.14.55.45;	author morevit;	state Exp;
branches;
next	1.31;

1.31
date	2003.09.23.16.52.49;	author morevit;	state Exp;
branches;
next	1.30;

1.30
date	2003.09.22.16.34.00;	author morevit;	state Exp;
branches;
next	1.29;

1.29
date	2003.09.19.00.13.37;	author morevit;	state Exp;
branches;
next	1.28;

1.28
date	2003.09.09.16.21.58;	author dongato;	state Exp;
branches;
next	1.27;

1.27
date	2003.09.05.11.12.13;	author dongato;	state Exp;
branches;
next	1.26;

1.26
date	2003.09.02.18.28.57;	author puritynn666;	state Exp;
branches;
next	1.25;

1.25
date	2003.08.23.00.20.50;	author forcha;	state Exp;
branches;
next	1.24;

1.24
date	2003.08.10.04.42.50;	author eklmn;	state Exp;
branches;
next	1.23;

1.23
date	2003.08.03.20.42.05;	author forcha;	state Exp;
branches;
next	1.22;

1.22
date	2003.07.30.12.29.31;	author kuchin;	state Exp;
branches;
next	1.21;

1.21
date	2003.07.12.14.10.37;	author dongato;	state Exp;
branches;
next	1.20;

1.20
date	2003.07.06.12.01.00;	author dongato;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.28.18.17.24;	author eklmn;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.30.21.26.58;	author partyckip;	state Exp;
branches;
next	1.17;

1.17
date	2003.04.20.16.59.33;	author kuchin;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.25.12.39.35;	author cax2;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.21.12.10.19;	author partyckip;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.14.15.59.54;	author partyckip;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.07.12.51.54;	author kuchin;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.05.11.23.43;	author recdvst;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.25.18.08.00;	author cax2;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.22.16.22.35;	author obaldin;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.17.15.00.27;	author kuchin;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.12.20.18.22;	author obaldin;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.10.19.24.48;	author cax2;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.09.18.39.41;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.29.14.37.05;	author cax2;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2003.01.23.17.00.44;	author cax2;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2003.01.23.12.49.06;	author cax2;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.23.01.42.30;	author cax2;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.17;	author cax2;	state Exp;
branches;
next	;

1.4.2.1
date	2003.01.28.16.54.04;	author cax2;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.01.29.00.25.45;	author cax2;	state Exp;
branches;
next	;

1.5.2.1
date	2003.02.05.01.58.41;	author obaldin;	state Exp;
branches;
next	;


desc
@@


1.73
log
@Some formatting.
@
text
@//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#include "Category.h"
#include "SourceSaver.h"
#include "Loggable.h"

class CServer;
class CPartFile;
class CKnownFile;
class CSearchFile;
class CUpDownClient;
class CClientSource;
class CHostnameSourceWnd;
class CSharedFileList;

class CDownloadQueue : public CLoggable
{
	friend class CWebServer;
public:
			CDownloadQueue(CSharedFileList* in_sharedfilelist);
		   ~CDownloadQueue();
	void	Process();
	void	Init();
	void	AddSearchToDownload(CSearchFile *pNewSearchFile, EnumCategories eCatID = CAT_NONE, bool bPaused = false);
	void	AddFileLinkToDownload(class CED2KFileLink *pLink, EnumCategories eCatID = CAT_NONE);
	bool	FileExists(const uchar* fileid);
	bool	IsInDLQueue(CKnownFile *pFileToTest);
	CPartFile*	GetFileByID(const uchar* filehash);
	CPartFile*	GetFileByIndex(int index);
	CUpDownClient* CheckAndAddSource(CPartFile *pSenderFile, uint32 dwUserIDHyb, uint16 uUserPort, uint32 dwSrvIP, uint16 uSrvPort, uchar *pbyteUserHash, int iMode = 0);
	bool	CheckAndAddKnownSource(CPartFile* pPartFile, CUpDownClient* pKnownSource);
	void	RemoveSource(CUpDownClient *toremove, bool updatewindow = true);
	void	DeleteAll();
	void	ResumeFiles();
	void	RemoveFile(CPartFile* toremove);
	uint32	GetDataRate() const							{return m_dwAverDataRate;}
	void	SortByPriority();

	CServer* m_pCurUDPServer;
	void	StopUDPRequests();
	
	void	GetDownloadStats(uint32 adwSrc[], uint64 aqwData[]);
	void	AddPartFilesToShare();
	void	AddDownload(CPartFile* newfile, bool bPaused = false);
	CUpDownClient* GetDownloadClientByIP_UDP(uint32 dwIP, uint16 nUDPPort);
	void	AddDownDataOverheadSourceExchange(uint32 data)	{ m_nDownDataRateMSOverhead += data;
															  m_nDownDataOverheadSourceExchange += data;
															  m_nDownDataOverheadSourceExchangePackets++;}
	void	AddDownDataOverheadFileRequest(uint32 data)		{ m_nDownDataRateMSOverhead += data;
															  m_nDownDataOverheadFileRequest += data;
															  m_nDownDataOverheadFileRequestPackets++;}
	void	AddDownDataOverheadServer(uint32 data)			{ m_nDownDataRateMSOverhead += data;
															  m_nDownDataOverheadServer += data;
															  m_nDownDataOverheadServerPackets++;}
	void	AddDownDataOverheadOther(uint32 data)			{ m_nDownDataRateMSOverhead += data;
															  m_nDownDataOverheadOther += data;
															  m_nDownDataOverheadOtherPackets++;}
	uint32	GetDownDataRateOverhead()					{return m_nDownDataRateOverhead;}
	uint64	GetDownDataOverheadSourceExchange()			{return m_nDownDataOverheadSourceExchange;}
	uint64	GetDownDataOverheadFileRequest()			{return m_nDownDataOverheadFileRequest;}
	uint64	GetDownDataOverheadServer()					{return m_nDownDataOverheadServer;}
	uint64	GetDownDataOverheadOther()					{return m_nDownDataOverheadOther;}
	uint64	GetDownDataOverheadSourceExchangePackets()	{return m_nDownDataOverheadSourceExchangePackets;}
	uint64	GetDownDataOverheadFileRequestPackets()		{return m_nDownDataOverheadFileRequestPackets;}
	uint64	GetDownDataOverheadServerPackets()			{return m_nDownDataOverheadServerPackets;}
	uint64	GetDownDataOverheadOtherPackets()			{return m_nDownDataOverheadOtherPackets;}
	void	CompDownDataRateOverhead();

	int		GetFileCount()								{return m_partFileList.GetCount();}
	int		GetTransferringFiles() const;
	int		GetPausedFileCount() const;
	int		GetStoppedFileCount() const;
	int		GetActiveFileCount() const;
	void	StartNextFile(EnumCategories eCatID);

	CPartFile* 	GetA4AFAutoFile()						{return m_A4AF_auto_file;}
	void	SetA4AFAutoFile(CPartFile* file);

	void	AddClientHostnameToResolve(CTypedPtrList<CPtrList, CClientSource*>* pLink);
	void	ResolveNextSourceHostname();
	void	SourceHostnameResolved(WPARAM wp, LPARAM lp);
	void	GetUDPSearchStatus(CString *pstrOut);

	void	ResetCatParts(int cat);
	void	SetCatPrio(int cat, byte newprio);
	void	SetCatStatus(int cat, uint16 newstatus);
	void	SetAutoCat(CPartFile* newfile);

	void	SetRequiredSourcesRefresh(CPartFile* pFile)		{if (!m_LocalServerSourcesReqQueue.Find(pFile)) m_LocalServerSourcesReqQueue.AddTail(pFile);}
	void	ResetLastTCPRequestTime()						{m_dwLastTCPSourcesRequestTime = 0;}
	void	SetLastTCPSrcReqServer(CServer* pServer)		{if (pServer) m_pLastTCPSrcReqServer = pServer;}
	CServer*	GetLastTCPSrcReqServer()					{return m_pLastTCPSrcReqServer;}
	void	SetAutoSourcesPerFile();
	void	SaveAllSLSFiles();

	void	SetBanCount(uint32 dwNewValue)					{ m_dwBannedCounter = dwNewValue; }
	void	UpdateSourceStatesAfterServerChange();

	CSourceSaver m_sourcesaver;
protected:
	bool	SendNextUDPPacket();

private:
	void				SaveAllPartFileStats();

private:
	std::deque<uint64>		m_averageDataRateList;
	std::deque<DWORD>		m_averageTickList;
	CTypedPtrList<CPtrList, CPartFile*> m_partFileList;
	CSharedFileList	   *m_pSharedFileList;
	uint32				m_dwDataRate;
	unsigned			m_uiUDCounter;

	uint32				m_dwLastUDPSearchTime;
	uint32				m_dwLastUDPStatTime;
	CPartFile			*m_pLastUDPSearchedFile;

	uint32				m_nDownDataRateOverhead;
	uint32				m_nDownDataRateMSOverhead;
	uint64				m_nDownDataOverheadSourceExchange;
	uint64				m_nDownDataOverheadSourceExchangePackets;
	uint64				m_nDownDataOverheadFileRequest;
	uint64				m_nDownDataOverheadFileRequestPackets;
	uint64				m_nDownDataOverheadServer;
	uint64				m_nDownDataOverheadServerPackets;
	uint64				m_nDownDataOverheadOther;
	uint64				m_nDownDataOverheadOtherPackets;

	std::deque<uint32>	m_DownDataOverheadDeque;	//Down Data Rate Overhead
	uint32				m_dwSumDownDataOverheadInDeque;

	uint32				m_dwAverDataRate;
	uint32				m_lastPartFileStatsSave;

	uint32				m_dwBannedCounter;

//	Hostname sources in ED2K superLink
	CTypedPtrList<CPtrList, CClientSource*>		hostnameResolveQueue;
	CHostnameSourceWnd	*m_wndHSCallback;
	char				hostentBuffer[MAXGETHOSTSTRUCT];
	byte				sourceHostnameResolveRetry;
	bool				m_bIsResolving;

	bool				m_bIsInitialized;
	CPartFile		   *m_A4AF_auto_file;

	CTypedPtrList<CPtrList, CPartFile*>	m_LocalServerSourcesReqQueue;
	DWORD				m_dwLastTCPSourcesRequestTime;
	CServer			*m_pLastTCPSrcReqServer;
};

//	Hostname sources in ED2K superLink
class CHostnameSourceWnd : public CWnd
{
public:
					CHostnameSourceWnd();

CDownloadQueue	   *m_pOwner;

protected:
DECLARE_MESSAGE_MAP()

afx_msg LRESULT		OnSourceHostnameResolved(WPARAM wParam, LPARAM lParam);
};
@


1.72
log
@Ability to add known LowID source through remote client shared files list.
@
text
@a17 1
#include "types.h"
d54 1
a54 1
	CServer* pCurUDPServer;
@


1.71
log
@Suppressed compiler warnings [Aw3].
@
text
@d46 1
a46 1
	CUpDownClient* CheckAndAddSource(CPartFile *pSenderFile, uint32 dwUserIDHyb, uint16 uUserPort, uint32 dwSrvIP, uint16 uSrvPort, uchar *pbyteUserHash);
@


1.70
log
@Reduced H-file dependency [Aw3].
@
text
@d58 1
a58 1
	void	GetDownloadStats(uint16 auSrc[], uint64 aqwData[]);
@


1.69
log
@Removed unrequired stuff.
@
text
@a20 1
#include "WebServer.h"
@


1.68
log
@Reduced #include dependency; Removed local preferences pointer; Formatting.
@
text
@a34 2
	friend class CHashFileThread;
	//friend class CServerSocket;
@


1.67
log
@Ranaming and formatting.
@
text
@d16 1
a17 4
#pragma once
#include "stdafx.h"
#include "PartFile.h"
#include "opcodes.h"
d19 1
a19 2
#include "SharedFileList.h"
#include "preferences.h"
d24 5
d31 1
d39 1
a39 1
			CDownloadQueue(CPreferences* in_prefs,CSharedFileList* in_sharedfilelist);
d43 2
a44 2
	void	AddSearchToDownload(CSearchFile* toadd,EnumCategories eCatID = CAT_NONE, bool bPaused = false);
	void	AddFileLinkToDownload(class CED2KFileLink* pLink,EnumCategories eCatID=CAT_NONE);
d46 1
a46 1
	bool	IsInDLQueue(CKnownFile* totest);
d130 3
a132 3
	CPreferences	   *m_pPrefs;
	uint32				m_iDataRate;
	
d135 1
a135 1
	CPartFile*			m_pLastUDPSearchedFile;
a162 2
	byte				m_iUDCounter;

d168 1
a168 1
	CServer*			m_pLastTCPSrcReqServer;
d182 1
a182 1
afx_msg LRESULT		OnSourceHostnameResolved(WPARAM wParam,LPARAM lParam);
@


1.66
log
@1) updated source exchange protocol to ver.3
2) support of HighID clients with IP "x.x.x.0"  (see description in updownclient.h)
3) removed dublicated ip check for LowID clients in TryToConnect()
4) fixed a client name change by download start from remote client shared file list.
5) some formating
@
text
@d47 1
a47 1
	CUpDownClient* CheckAndAddSource(CPartFile *pSenderFile, uint32 dwHybridUserID, uint16 nUserPort, uint32 dwServerIP, uint16 nServerPort, uchar *pbyteUserHash);
@


1.65
log
@update the state for LowID clients only after server change
@
text
@d47 1
a47 1
	CUpDownClient* CheckAndAddSource(CPartFile *pSenderFile, uint32 dwUserIP, uint16 nUserPort, uint32 dwServerIP, uint16 nServerPort, uchar *pbyteUserHash);
@


1.64
log
@Renaming.
@
text
@d114 1
@


1.63
log
@Formatting.
@
text
@d48 1
a48 1
	bool 	CheckAndAddKnownSource(CPartFile* pPartFile, CUpDownClient* pKnownSource);
d53 1
a53 1
	uint32	GetDataRate()			{return m_iAverageDataRate;}
d148 1
a148 1
	uint32				m_iAverageDataRate;
@


1.62
log
@One more step to integrate eklmn's SSDQ.
@
text
@d23 1
a23 1
#include "Preferences.h"
d30 1
d59 1
a59 1
	void	GetDownloadStats(uint16 sources[], uint64 data[]);
@


1.61
log
@Some eklmn's modifications.
@
text
@d58 1
a58 1
	void	GetDownloadStats(uint16 sources[], uint64  data[]);
d112 1
a112 1
	void	SetBanCount(uint16 uNewValue)					{m_uBannedCounter = uNewValue;}
d150 1
a150 1
	uint16				m_uBannedCounter;
@


1.60
log
@One more step to integrate eklmn's SSDQ.
@
text
@d112 2
d150 2
@


1.59
log
@improved LowID check by SX (part 2)
@
text
@d48 1
a48 1
	bool	RemoveSource(CUpDownClient* toremove, bool updatewindow = true);
@


1.58
log
@Removed unused GetDownloadClientByIP service.
@
text
@d46 1
a46 1
	CUpDownClient* CheckAndAddSource(CPartFile *pSenderFile, uint32 dwUserIP, uint16 nUserPort, uint32 dwServerIP, uint16 nServerPort);
@


1.57
log
@Removed unused parameter.
@
text
@a60 1
	CUpDownClient* 	GetDownloadClientByIP(uint32 dwIP);
d117 3
a162 2

	void				SaveAllPartFileStats();
@


1.56
log
@Removed some suspicious stuff.
@
text
@d46 1
a46 1
	CUpDownClient* CheckAndAddSource(CPartFile *pSenderFile, uint32 dwUserIP, uint16 nUserPort, uint32 dwServerIP, uint16 nServerPort, bool bSaveSources = true); //modified for saving sources (by Mr.Fry)
d94 1
a94 1
	void 		SetA4AFAutoFile(CPartFile* file)	;
@


1.55
log
@Removed unused variable; Improved string processing.
@
text
@d63 1
a63 1
	void	AddDownDataOverheadSourceExchange(uint32 data, uint32 dummy=0)	{ m_nDownDataRateMSOverhead += data;
d66 1
a66 1
	void	AddDownDataOverheadFileRequest(uint32 data, uint32 dummy=0)		{ m_nDownDataRateMSOverhead += data;
d69 1
a69 1
	void	AddDownDataOverheadServer(uint32 data, uint32 dummy=0)			{ m_nDownDataRateMSOverhead += data;
d72 1
a72 1
	void	AddDownDataOverheadOther(uint32 data, uint32 dummy=0)			{ m_nDownDataRateMSOverhead += data;
@


1.54
log
@Moved new function to proper place
@
text
@d99 1
a99 1
	CString	GetUDPSearchStatus();
d118 2
a119 2
	std::deque<uint64>		m_averageDataRateList;	//Cax2 - memory optimization
	std::deque<DWORD>		m_averageTickList;	//Cax2 - memory optimization
a142 1
	DWORD				m_dwLastRefreshedDLDisplayTime;
d176 1
a176 1
afx_msg LRESULT		OnSourceHostnameResolved(WPARAM wParam,LPARAM lParam);  
@


1.53
log
@Forces saving sources during client close
@
text
@d55 1
a55 1
	CServer*		pCurUDPServer;
d58 1
a58 1
	void		GetDownloadStats(uint16 sources[], uint64  data[]);
d111 1
@


1.52
log
@Removed unused code.
@
text
@d112 1
a114 1
	CSourceSaver m_sourcesaver;
@


1.51
log
@Removed unused code.
@
text
@d18 2
a19 2
#include "StdAfx.h"
#include "partfile.h"
d23 2
a24 2
#include "preferences.h"
#include "sourcesaver.h"
a62 1
	void	UpdateDisplayedInfo(CUpDownClient *pSource,boolean force=false);
d98 1
a98 1
	void    SourceHostnameResolved(WPARAM wp, LPARAM lp);
d108 1
a108 1
	void 	SetLastTCPSrcReqServer(CServer* pServer)		{if (pServer) m_pLastTCPSrcReqServer = pServer;}
@


1.50
log
@speed optimization of overhead calculation
@
text
@a40 1
	void	AddSearchToDownload(CString link,EnumCategories eCatID = CAT_NONE, bool bPaused = false);
@


1.49
log
@Added active, paused and stopped files counters to download list header.
@
text
@d119 2
a120 2
	list<uint64>		m_averageDataRateList;	//Cax2 - memory optimization
	list<DWORD>			m_averageTickList;	//Cax2 - memory optimization
d141 2
a142 1
	CList<int,int>		m_averageDDROList;	//Down Data Rate Overhead
@


1.48
log
@Slightly suffle class members to provide correct data alignment for 32bit variables
(this significantly increases performance during class members access).
@
text
@d91 1
@


1.47
log
@minor changes, fixes and improvements
@
text
@a127 1
	byte				m_iUDCounter;
d142 2
a143 2
 	DWORD				m_dwLastRefreshedDLDisplayTime;
    uint32				m_iAverageDataRate;
a144 1
	void				SaveAllPartFileStats();
d153 2
d161 2
@


1.46
log
@added 'Download (Paused)' to Searchlist context menu
@
text
@d104 1
a104 1
	void	SetCatStatus(int cat, int newstatus);
@


1.45
log
@auto max sources per file
@
text
@d40 2
a41 2
	void	AddSearchToDownload(CSearchFile* toadd,EnumCategories eCatID = CAT_NONE);
	void	AddSearchToDownload(CString link,EnumCategories eCatID = CAT_NONE);
d61 1
a61 1
	void	AddDownload(CPartFile* newfile);
@


1.44
log
@added Active Downloads to stats + some other changes
@
text
@d111 1
@


1.43
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d24 2
a25 2
#include "sourcesaver.h" //<<-- enkeyDEV(Ottavio84) -New SLS-
#include "WebServer.h" // kuchin
d34 1
a34 1
	friend class CWebServer; // kuchin
d88 6
a93 5
	int		GetFileCount() 								{return m_partFileList.GetCount();} 	// added by FoRcHa
	int     GetTransferringFiles();														// added by FoRcHa	
	int     GetPausedFileCount();														// added by Purity
	void	StartNextFile(EnumCategories eCatID); 												// Added by Tarod
	// v:- ekmn: A4AF management
d96 3
a98 3
	// ^:- ekmn: A4AF management
	void AddClientHostnameToResolve(CTypedPtrList<CPtrList, CClientSource*>* pLink);
	void ResolveNextSourceHostname();
d107 4
a110 4
	void SetRequiredSourcesRefresh(CPartFile* pFile)		{if (!m_LocalServerSourcesReqQueue.Find(pFile)) m_LocalServerSourcesReqQueue.AddTail(pFile);}
	void ResetLastTCPRequestTime()						{m_dwLastTCPSourcesRequestTime = 0;}
	void 		SetLastTCPSrcReqServer(CServer* pServer)		{if (pServer) m_pLastTCPSrcReqServer = pServer;}
	CServer*		GetLastTCPSrcReqServer()						{return m_pLastTCPSrcReqServer;}
d114 1
a114 1
	CSourceSaver m_sourcesaver; //<<-- enkeyDEV(Ottavio84) -New SLS-
a121 1
	uint16				m_iNumFilesReady;		// *NOT USED*
a143 1
	//--- xrmb:keepPartFileStats ---
d145 1
d147 1
a147 3
	void				SaveAllPartFileStats();
	//--- :xrmb ---
	// START enkeyDEV(kei-kun) -hostname sources in ED2K superLink-  
d153 1
a153 1
	// END enkeyDEV(kei-kun) -hostname sources in ED2K superLink-
a154 1
	// v1:- ekmn: A4AF management
d158 1
a158 1
	DWORD			m_dwLastTCPSourcesRequestTime;
d162 1
a162 1
// START - enkeyDEV(kei-kun) -hostname sources in ED2K superLink-
a174 1
// END - enkeyDEV(kei-kun) -hostname sources in ED2K superLink-
@


1.42
log
@1) UDP packet is not completly filled
2) corrected stats
3) removed unused variables
@
text
@d102 1
a102 1
	void	SetCatPrio(int cat, uint8 newprio);
d127 1
a127 1
	uint8				m_iUDCounter;
d153 1
a153 1
	int8				sourceHostnameResolveRetry;
@


1.41
log
@1) compession support within communicatio client<->server
2) extended UDP file search support
@
text
@a123 1
	CPartFile		   *m_pLastPartFile;
a127 2
	long				m_nUDPSearchFile;
	long				m_nUDPSearchServer;
@


1.40
log
@quantized sources request from the server
@
text
@d55 2
d58 1
a58 1
	CServer*	cur_udpserver;
d127 1
@


1.39
log
@Formatting, comments, and name changes.
@
text
@d104 5
d160 3
@


1.38
log
@Fix for SLS change
@
text
@d32 1
a32 1
	friend class CAddFileThread;
@


1.37
log
@new way of adding sources
@
text
@d24 1
d106 2
@


1.36
log
@Formatting, comments, and name changes.
... and a few bug fixes.
@
text
@d46 2
a47 2
	void    CheckAndAddSource(CPartFile* sender,CUpDownClient* source, bool saveSources = true); //modified for saving sources (by Mr.Fry)
	BOOL    CheckAndAddKnownSource(CPartFile* sender,CUpDownClient* source); // Lord KiRon
@


1.35
log
@DownloadListCtrl rewrite.
Changed Category ID types to an enumeration.
More async update work.
The usual formatting, comments, and name changes.
@
text
@d134 1
a134 1
 	DWORD				m_lastRefreshedDLDisplay;
@


1.34
log
@Formatting, comments, and name changes. Factored various UI update methods out and modified to use async. messaging instead of sync. call.
@
text
@d39 3
a41 3
	void	AddSearchToDownload(CSearchFile* toadd,uint8 iCatID = 0);
	void	AddSearchToDownload(CString link,uint8 iCatID = 0);
	void	AddFileLinkToDownload(class CED2KFileLink* pLink,uint8 cat=0);
d88 1
a88 1
	void	StartNextFile(int iCatID); 												// Added by Tarod
@


1.33
log
@Formatting, comments, and name changes.
@
text
@d61 1
a61 1
	void	UpdateDisplayedInfo(boolean force=false);
@


1.32
log
@Formatting, comments, and name changes.
@
text
@d39 2
a40 2
	void	AddSearchToDownload(CSearchFile* toadd,uint8 cat=0);
	void	AddSearchToDownload(CString link,uint8 cat=0);
d42 2
a43 2
	bool	IsFileExisting(const uchar* fileid);
	bool	IsPartFile(void* totest);
d52 1
a52 1
	uint32	GetDataRate()			{return averageDataRate;}
d88 1
a88 1
	void	StartPausedDownload(int cat) ; 												// Added by Tarod
a100 5
//	MOREVIT: Unnecessary
#ifdef OLD
	void	MoveCat(uint8 from, uint8 to);
#endif
//	:MOREVIT
d114 4
a117 4
	CPartFile		   *lastfile;
	uint32				lastudpsearchtime;
	uint32				lastudpstattime;
	uint8				udcounter;
d132 1
a132 1
	CList<int,int>		m_AvarageDDRO_list;
d135 1
a135 1
    uint32				averageDataRate;
@


1.31
log
@Category rewrite with predefined status/media type categories.
@
text
@d22 1
a22 1
#include "sharedfilelist.h"
d35 2
a36 2
	CDownloadQueue(CPreferences* in_prefs,CSharedFileList* in_sharedfilelist);
	~CDownloadQueue();
d85 1
a85 1
	int		GetFileCount() 								{return filelist.GetCount();} 	// added by FoRcHa
d111 7
a117 7
	list<uint64> average_dr_list;	//Cax2 - memory optimization
	list<DWORD> average_tick_list;	//Cax2 - memory optimization
	CTypedPtrList<CPtrList, CPartFile*> filelist;
	CSharedFileList* sharedfilelist;
	CPreferences*	 m_pPrefs;
	uint16	filesrdy;
	uint32	dataRate;
d119 17
a135 17
	CPartFile*	lastfile;
	uint32		lastudpsearchtime;
	uint32		lastudpstattime;
	uint8		udcounter;
	long		m_nUDPSearchFile;
	long		m_nUDPSearchServer;

	uint32		m_nDownDataRateOverhead;
	uint32		m_nDownDataRateMSOverhead;
	uint64		m_nDownDataOverheadSourceExchange;
	uint64		m_nDownDataOverheadSourceExchangePackets;
	uint64		m_nDownDataOverheadFileRequest;
	uint64		m_nDownDataOverheadFileRequestPackets;
	uint64		m_nDownDataOverheadServer;
	uint64		m_nDownDataOverheadServerPackets;
	uint64		m_nDownDataOverheadOther;
	uint64		m_nDownDataOverheadOtherPackets;
d137 1
a137 1
	CList<int,int>				 m_AvarageDDRO_list;
d139 2
a140 2
 	DWORD m_lastRefreshedDLDisplay;
    uint32      averageDataRate;
d142 3
a144 2
	uint32	m_lastPartFileStatsSave;
	void	SaveAllPartFileStats();
d147 5
a151 5
	CTypedPtrList<CPtrList, CClientSource*> hostnameResolveQueue;
	CHostnameSourceWnd* hsCallbackWnd;
	char    hostentBuffer[MAXGETHOSTSTRUCT];
	int8    sourceHostnameResolveRetry;
	bool    isResolving;
d153 1
a153 1
	bool	m_bIsInitialized;
d155 1
a155 1
	CPartFile* m_A4AF_auto_file;
d160 2
a161 1
class CHostnameSourceWnd : public CWnd {
d163 3
a165 2
CHostnameSourceWnd();
CDownloadQueue* m_pOwner;
d169 2
a170 1
afx_msg LRESULT OnSourceHostnameResolved(WPARAM wParam,LPARAM lParam);  
@


1.30
log
@Formatting, comments, and name changes.
@
text
@d101 2
d104 2
@


1.29
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@d111 1
a111 1
	CPreferences*	 app_prefs;
@


1.28
log
@Fixed start paused files by category (when option set or by menu)
Removed Reset All Statistics (agreed with Eklmn that has no use and it brings problems)
Removed Mobile Mule profile
Localized 'All' tab when language changed
@
text
@d52 1
a52 1
	uint32	GetDatarate()			{return averageDatarate;}
d74 1
a74 1
	uint32	GetDownDatarateOverhead()					{return m_nDownDatarateOverhead;}
d83 1
a83 1
	void	CompDownDatarateOverhead();
d86 1
a86 1
	int     GetTransferingFiles();														// added by FoRcHa	
d113 1
a113 1
	uint32	datarate;
d122 1
a122 1
	uint32		m_nDownDatarateOverhead;
d136 1
a136 1
    uint32      averageDatarate;
@


1.27
log
@Added Category missing feature in Search Window.
@
text
@d74 5
a78 5
	uint32	GetDownDatarateOverhead()			{return m_nDownDatarateOverhead;}
	uint64	GetDownDataOverheadSourceExchange()	{return m_nDownDataOverheadSourceExchange;}
	uint64	GetDownDataOverheadFileRequest()	{return m_nDownDataOverheadFileRequest;}
	uint64	GetDownDataOverheadServer()			{return m_nDownDataOverheadServer;}
	uint64	GetDownDataOverheadOther()			{return m_nDownDataOverheadOther;}
d85 4
a88 4
	int		GetFileCount() 			{return filelist.GetCount();} // added by FoRcHa
	int     GetTransferingFiles();	// added by FoRcHa	
	int     GetPausedFileCount();	// added by Purity
	void	StartPausedDownload() ; // Added by Tarod (starts a paused download)
d90 1
a90 1
	CPartFile* 	GetA4AFAutoFile()				{return m_A4AF_auto_file;}
@


1.26
log
@merging category code for webserver
@
text
@d102 1
@


1.25
log
@*** empty log message ***
@
text
@d39 3
a41 3
	void	AddSearchToDownload(CSearchFile* toadd);
	void	AddSearchToDownload(CString link);
	void	AddFileLinkToDownload(class CED2KFileLink* pLink);
@


1.24
log
@new statistic (khaos based)
@
text
@a97 1
#ifdef __USE_CATEGORIES__
a101 1
#endif
@


1.23
log
@*** empty log message ***
@
text
@d56 1
a56 2
	void	GetDownloadStats(int results[]);
	void	GetDownloadStats(int results[],uint64& pui64TotFileSize,uint64& pui64TotBytesLeftToTransfer,uint64& pui64TotNeededSpace);	// added by InterCeptor (xChipx: download statistics) 11.11.02
d85 1
a85 1
	int		GetFileCount(); // added by FoRcHa
d133 1
@


1.22
log
@Purity's changes
@
text
@d99 7
@


1.21
log
@Removed old Stored Sources from all code.
@
text
@d45 1
d88 1
@


1.20
log
@merged missing UPD answers on ClientUDPSocket [DonGato]
@
text
@a95 19
	//////////////////////////////////////////////////
	//for saving sources
#ifdef OLD_SLS_ENABLED
		//save source for all part-files to disk
	bool	SaveAllSourcesToFile(bool debug=false);	//added by Mr.Fry
		//keep the object for saving/loading sources open, after loading from disk
		//(if true, there should be less CPU-usage)
	bool	KeepStoredSourcesOpen()		{return m_bKeepStoredSourcesOpened;};
		//is the count of client (up- and downloading) greater than the "Max Connections"-setting? 
#endif //OLD_SLS_ENABLED
	bool	IsMaxClientsExceeded();
		//if false, for no part-files stored sources are loaded from disk
		//(-> disable loading sources)
	bool	IsSourcesLoadingEnabled()	{return m_bEnableSourceLoading;};
		//enable/disable loading of stored sources for all part-files
		//if false, for no part-files stored sources are loaded from disk
		//(-> disable loading sources)
	void	SetSourcesLoading(bool setTo){m_bEnableSourceLoading = setTo;};
	//////////////////////////////////////////////////
a98 9
	//////////////////////////////////////////////////
	//for saving sources
		//keep the object for saving/loading sources open, after loading from disk
		//(if true, there should be less CPU-usage)
	bool		m_bKeepStoredSourcesOpened;
		//if false, for no part-files stored sources are loaded from disk
		//(-> disable loading sources)
	bool		m_bEnableSourceLoading;
	//////////////////////////////////////////////////
@


1.19
log
@New A4AF mangement
@
text
@d60 1
@


1.18
log
@code cleanup
@
text
@d87 4
a90 2
	void	DisableAllA4AFAuto(void); // Added by Tarod -deactivates A4AF auto in all files
	CPartFile* GetA4AFAutoFile(void); // Added by Tarod -returns file with A4AF auto state on
a94 1

d168 3
d183 1
a183 1
// END - enkeyDEV(kei-kun) -hostname sources in ED2K superLink-@


1.17
log
@UDP Search status is shown in up-down tooltip
@
text
@d42 1
a42 1
	bool	IsFileExisting(uchar* fileid);
d44 1
a44 1
	CPartFile*	GetFileByID(uchar* filehash);
@


1.16
log
@bugfix: sort column doesn't change when not in advanced sort mode. lower memory usage
@
text
@d92 1
d138 2
@


1.15
log
@added ResumeFiles method
@
text
@d125 2
a126 2
	CList<uint64,uint64> average_dr_list;
	CList<DWORD,DWORD> average_tick_list;
@


1.14
log
@converted to new logging method
@
text
@d32 1
a32 1
	friend class CServerSocket;
d49 1
@


1.13
log
@Bugfixes
@
text
@d25 1
d29 1
a29 1
class CDownloadQueue
@


1.12
log
@enkeydev stuff
@
text
@d161 1
@


1.11
log
@minor bugfixes, refreshes sources display...
@
text
@d26 2
d87 3
d154 7
d162 12
@


1.10
log
@the famous zz upload system! :)
@
text
@d56 1
a56 1
void	UpdateDisplayedInfo(boolean force=false);
@


1.9
log
@Preparing for new SLS code
@
text
@d47 1
a47 1
	uint32	GetDatarate()			{return datarate;}
d118 2
d144 1
@


1.8
log
@more 26b merges
@
text
@d88 1
d94 2
a95 1
		//is the count of client (up- and downloading) greater than the "Max Connections"-setting?
@


1.7
log
@.26b port
@
text
@d57 12
a68 8
	void	AddDownDataOverheadSourceExchange(uint32 data, uint32 header)	{ m_nDownDataRateMSOverhead += (data+header);
																			  m_nDownDataOverheadSourceExchange += (data+header);}
	void	AddDownDataOverheadFileRequest(uint32 data, uint32 header)	{ m_nDownDataRateMSOverhead += (data+header);
																		  m_nDownDataOverheadFileRequest += (data+header);}
	void	AddDownDataOverheadServer(uint32 data, uint32 header)	{ m_nDownDataRateMSOverhead += (data+header);
																	  m_nDownDataOverheadServer += (data+header);}
	void	AddDownDataOverheadOther(uint32 data, uint32 header)	{ m_nDownDataRateMSOverhead += (data+header);
																	  m_nDownDataOverheadOther += (data+header);}
d74 4
d130 1
d132 1
d134 1
d136 1
@


1.6
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@d56 1
d127 1
@


1.5
log
@merge fixes and minor optimizations
@
text
@d56 14
a69 3
	void	AddDownDataRateMSOverhead(uint32 data, uint32 header)	{ m_nDownDataRateMSOverhead = m_nDownDataRateMSOverhead+data+header;}
	uint32	GetDatarateOverhead()		{return m_nDownDatarateOverhead;}
	void	CompDatarateOverhead();
d117 1
d120 4
@


1.5.2.1
log
@initial upgrade to .26
@
text
@d56 3
a58 14
	void	AddDownDataOverheadSourceExchange(uint32 data, uint32 header)	{ m_nDownDataRateMSOverhead += (data+header);
																			  m_nDownDataOverheadSourceExchange += (data+header);}
	void	AddDownDataOverheadFileRequest(uint32 data, uint32 header)	{ m_nDownDataRateMSOverhead += (data+header);
																		  m_nDownDataOverheadFileRequest += (data+header);}
	void	AddDownDataOverheadServer(uint32 data, uint32 header)	{ m_nDownDataRateMSOverhead += (data+header);
																	  m_nDownDataOverheadServer += (data+header);}
	void	AddDownDataOverheadOther(uint32 data, uint32 header)	{ m_nDownDataRateMSOverhead += (data+header);
																	  m_nDownDataOverheadOther += (data+header);}
	uint32	GetDownDatarateOverhead()			{return m_nDownDatarateOverhead;}
	uint64	GetDownDataOverheadSourceExchange()	{return m_nDownDataOverheadSourceExchange;}
	uint64	GetDownDataOverheadFileRequest()	{return m_nDownDataOverheadFileRequest;}
	uint64	GetDownDataOverheadServer()			{return m_nDownDataOverheadServer;}
	uint64	GetDownDataOverheadOther()			{return m_nDownDataOverheadOther;}
	void	CompDownDatarateOverhead();
a105 1

d108 1
a108 5
	uint64		m_nDownDataOverheadSourceExchange;
	uint64		m_nDownDataOverheadFileRequest;
	uint64		m_nDownDataOverheadServer;
	uint64		m_nDownDataOverheadOther;
	CList<int,int>									 m_AvarageDDRO_list;
@


1.4
log
@final port to .25b!
@
text
@a55 1
	void	StartNextFile();
@


1.4.2.1
log
@updating this branch...
@
text
@@


1.4.2.2
log
@merge bugfixes
@
text
@d56 1
@


1.3
log
@port to .25 b codebase...
@
text
@d109 1
a109 1
	CList<TransferredData,TransferredData>				 m_AvarageDDRO_list;
@


1.2
log
@update to .25b codebase
@
text
@d109 1
a109 1
	CList<int,int>									 m_AvarageDDRO_list;
@


1.1
log
@*** empty log message ***
@
text
@d28 1
d56 4
d107 3
@

