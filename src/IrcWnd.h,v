head	1.38;
access;
symbols
	PublicRelease_1_2e:1.37
	Interim_Release_1-2e_RC1:1.37
	PublicRelease_1_2d:1.31
	Interim_Release_1-2d_RC1:1.31
	Interim_Release_1-2d_beta1:1.31
	PublicRelease_1_2c:1.29
	Interim_Release_1-2c_RC1:1.29
	Interim_Release_1-2c_beta1:1.28
	PublicRelease_1_2b:1.28
	Interim_Release_1-2b_RC1:1.28
	PublicRelease_1_2a:1.28
	Interim_Release_1-2a_RC1:1.28
	Interim_Release_1-2a_beta2:1.27
	Interim_Release_1-2a_beta1:1.27
	PublicRelease_1_2:1.27
	Interim_Release_1-2_RC1:1.27
	Interim_Release_1-2_beta1:1.27
	PublicRelease_1_1g:1.26
	Interim_Release_1-1g_RC3:1.26
	Interim_Release_1-1g_RC2:1.26
	Interim_Release_1-1g_RC1:1.26
	Interim_Release_1-1g_beta2:1.25
	Interim_Release_1-1g_beta1:1.25
	PublicRelease_1_1f:1.25
	Interim_Release_1-1f_RC1:1.25
	PublicRelease_1_1e:1.25
	Interim_Release_1-1e_RC2:1.25
	Interim_Release_1-1e_RC1:1.25
	Interim_Release_1-1e_beta1:1.25
	PublicRelease_1_1d:1.25
	Interim_Release_1-1d_RC1:1.25
	PublicRelease_1_1c:1.25
	Interim_Release_1-1c_RC1:1.25
	Interim_Release_1-1c_beta2:1.25
	Interim_Release_1-1c_beta1:1.25
	PublicRelease_1_1b:1.25
	Interim_Release_1-1b_RC1:1.25
	PublicRelease_1_1a:1.25
	Interim_Release_1-1a_RC2:1.25
	Interim_Release_1-1a_RC1:1.25
	Interim_Release_1-1a_beta2:1.25
	Interim_Release_1-1a_beta1:1.25
	PublicRelease_1_1:1.24
	Interim_Release_1-1_beta1:1.24
	PublicRelease_1o:1.23
	Interim_Release_1o_RC1:1.23
	Interim_Release_1o_beta1:1.23
	PublicRelease_1n:1.23
	Interim_Release_1n_RC2:1.23
	Interim_Release_1n_RC1:1.23
	Interim_Release_1n_beta2:1.23
	Interim_Release_1n_beta1:1.21
	PublicRelease_1m:1.19
	Interim_Release_1m_beta1:1.19
	PublicRelease_1l:1.17
	Interim_Release_1l_RC3:1.17
	Interim_Release_1l_RC2:1.16
	Interim_Release_1l_RC1:1.15
	Interim_Release_1l_beta2:1.15
	Interim_Release_1l_beta1:1.15
	PublicRelease_1k:1.14
	Interim_Release_1k_RC4:1.14
	Interim_1k_RC3:1.14
	Interim_1k_RC2:1.14
	Interim_Release_1k_RC1:1.14
	Interim_Release_1k_beta5:1.14
	Intrerim_Release_1k_beta4:1.14
	Interim_Release_1k_beta1:1.14
	PublicRelease_1j:1.13
	Interim_Release_1J_RC3:1.13
	Interim_Release_1j_RC3:1.13
	Interim_Release_1j_RC2:1.13
	Interim_Release_1j_RC1:1.13
	Interim_Release_1j_beta2:1.13
	Interim_Release_1j_beta1:1.13
	PublicRelease_1i:1.11
	Interim_Release_1i_RC6:1.11
	Interim_Release_1i_RC3:1.10
	Interim_Release_1i_RC2:1.10
	Interim_Release_1i_RC1:1.10
	Interim_Release_1i_beta3:1.10
	Interim_Release_1i_beta2:1.10
	Interim_Release_1i_beta1:1.9
	PublicRelease_1h:1.5
	Interim_Release_1h_rc2:1.5
	Interim_Release_1h_RC1:1.5
	Interim_Release_1h_beta2:1.5
	Interim_Release_1h_beta1_now:1.5
	Interim_Release_1h_beta1:1.5
	PublicRelease_1g:1.5
	Interim_Release_1g_RC6_Final:1.5
	Interim_Release_1g_RC6:1.5
	Interim_Release_1g_RC5:1.5
	Interim_Release_1g_RC4:1.5
	Interim_Release_1g_RC3:1.5
	Interim_Release_1g_beta2:1.5
	Interim_Release_1g_beta1:1.5
	Interim_Release_1f_RC4:1.4
	Interim_Release_1f_RC3:1.4
	Interim_Release_1f_RC2:1.4
	Interim_Release_1f_RC:1.4
	Interim_Release_1f_beta2:1.4
	Interim_Release_1f_beta1:1.4
	PublicRelease_1e:1.4
	Interim_Release_1e_RC2:1.4
	Interim_Release_1e_RC:1.4
	Interim_Release_1e_beta3:1.4
	Interim_Release_1e_beta2:1.4
	Interim_Release_1e_beta2_before_kuchin:1.4
	Interim_Release_1e_beta1:1.4
	PublicRelease_1c:1.4
	featurestest:1.4.0.8
	Interim_Release_1c_RC:1.4
	Interim_Release_1c_beta2:1.4
	Interim_Release_1c_beta1:1.4
	threaded_downloadqueue:1.4.0.6
	PublicRelease_1b:1.4
	Interim_Release_1b_beta2:1.4
	Interim_Release_1b_beta1:1.4
	proxydeadlake:1.4.0.4
	PublicRelease_1a:1.4
	Interim_Release_1a_beta2:1.4
	BerkeleyDb:1.4.0.2
	Interim_Release_1a_beta1:1.4
	PublicRelease_1:1.4
	goldfish:1.4
	eMulePlus_1_RC2:1.4
	eMulePlus_26b_1RC1:1.4
	PreRelease_26b_i0e:1.4
	before_26d_merge:1.4
	Interim_Release_26b_i0d:1.4
	Interim_Release_26b_i0c:1.3
	Interim_Release_26b_i0b:1.3
	Interim_Release_26b_i0a:1.3
	systraydlg:1.2.0.4
	plus26based:1.2.0.2
	Interim_Release_25b_i0b:1.2
	Proxy_Dev:1.2
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.38
date	2009.05.14.03.10.30;	author aw3;	state Exp;
branches;
next	1.37;

1.37
date	2009.01.08.05.15.34;	author aw3;	state Exp;
branches;
next	1.36;

1.36
date	2009.01.04.05.30.47;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2008.12.15.22.38.52;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2008.10.23.04.24.00;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2008.10.20.22.39.08;	author kush_eplus;	state Exp;
branches;
next	1.32;

1.32
date	2008.07.01.04.40.48;	author aw3;	state Exp;
branches;
next	1.31;

1.31
date	2008.02.05.06.03.06;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2007.12.14.21.11.17;	author kush_eplus;	state Exp;
branches;
next	1.29;

1.29
date	2007.07.27.06.22.58;	author aw3;	state Exp;
branches;
next	1.28;

1.28
date	2006.07.02.15.48.02;	author kush_eplus;	state Exp;
branches;
next	1.27;

1.27
date	2006.01.06.20.05.54;	author kush_eplus;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.28.03.09.10;	author aw3;	state Exp;
branches;
next	1.25;

1.25
date	2004.10.29.03.24.51;	author aw3;	state Exp;
branches;
next	1.24;

1.24
date	2004.09.30.19.09.31;	author aw3;	state Exp;
branches;
next	1.23;

1.23
date	2004.07.29.02.13.02;	author katsyonak;	state Exp;
branches;
next	1.22;

1.22
date	2004.07.27.17.38.16;	author katsyonak;	state Exp;
branches;
next	1.21;

1.21
date	2004.07.11.16.24.58;	author katsyonak;	state Exp;
branches;
next	1.20;

1.20
date	2004.07.07.16.35.07;	author katsyonak;	state Exp;
branches;
next	1.19;

1.19
date	2004.06.21.23.11.19;	author katsyonak;	state Exp;
branches;
next	1.18;

1.18
date	2004.06.20.19.15.24;	author katsyonak;	state Exp;
branches;
next	1.17;

1.17
date	2004.06.06.05.08.48;	author aw3;	state Exp;
branches;
next	1.16;

1.16
date	2004.06.02.02.58.16;	author katsyonak;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.12.22.48.02;	author katsyonak;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.20.00.40.27;	author katsyonak;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.18.13.35.30;	author katsyonak;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.01.02.03.47;	author katsyonak;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.24.01.21.19;	author morevit;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.03.23.18.49;	author morevit;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.27.14.59.38;	author dongato;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.22.16.28.08;	author morevit;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.19.14.42.46;	author morevit;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.01.08.59.02;	author kuchin;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.12.20.18.23;	author obaldin;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.09.18.39.41;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.02.03.39.55;	author cax2;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2003.01.21.18.21.18;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.13;	author cax2;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.02.02.02.36.26;	author cax2;	state Exp;
branches;
next	;

1.2.2.1
date	2003.02.05.01.58.41;	author obaldin;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Save sorting directions for all GUI lists; Unified list sort initialization and click processing;
Simplified list arrow configuration interface.
@
text
@//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#include "ResizableLib\ResizableDialog.h"
#include "IrcMain.h"
#include "MuleListCtrl.h"
#include "ClosableTabCtrl.h"
#include "HTRichEditCtrl.h"
#include "XPStyleButtonST.h"
#include "IrcNickListCtrl.h"

enum EnumConnectStatus
{
	IRC_DISCONNECTED = 0,
	IRC_CONNECTING,
	IRC_CONNECTED
};

class CHTRichEditCtrl;

// CIrcWnd dialog
struct ChannelList
{
	CString name;
	CString users;
	CString desc;
};

struct Channel
{
	CString	name;
	CString title;
	CPtrList nicks;
	CHTRichEditCtrl log;
	CStringArray history;
	uint16 history_pos;
	byte type;
	// Type is mainly so that we can use this for IRC and the eMule Messages..
	// 1-Status, 2-Channel list, 4-Channel, 5-Private Channel, 6-eMule Message(Add later)
};

class CIrcWnd : public CResizableDialog
{
	DECLARE_DYNAMIC(CIrcWnd)
	friend class CIrcNickListCtrl;

public:
	CIrcWnd(CWnd* pParent = NULL);   // standard constructor
	virtual ~CIrcWnd();

	afx_msg void OnDestroy();

	enum { IDD = IDD_IRC };

	void		Localize();
	bool		GetLoggedIn()						{ return m_bLoggedIn; }
	void		SetLoggedIn(bool bLoggedIn)			{ m_bLoggedIn = bLoggedIn; }
	void		UpdateFont();
	void		ResetServerChannelList();
	void		AddChannelToList(CString strName, CString strUser, CString strDescription);
	void		ScrollHistory(bool bDown);
	void		ChangeAllNick(const CString &strOldNick, const CString &strNewNick);
	void		AddMessage(const CString &strChannel, const TCHAR *pcNick, COLORREF crTextColor, const CString &strInputLine);
	void		AddMessageF(const CString &strChannel, const TCHAR *pcNick, COLORREF crTextColor, const TCHAR *pcLine, ...);
	void		SetConnectStatus(EnumConnectStatus eConnectStatus);
	void		NoticeMessage(CString strSource, CString strMessage);
	void		SetTitle(CString strChannel, CString strTitle);
	void		SetActivity(CString strChannel);
	void		SendString(const CString &strSend);
	Channel*	FindChannelByName(const CString &strName);
	Channel*	NewChannel(const CString &strName, byte byteType);
	void		RemoveChannel(CString strChannel);
	void		DeleteAllChannel();
	void		JoinChannels();

	Channel*	GetCurrentChannel() const			{ return m_pCurrentChannel; }

	CMuleListCtrl		serverChannelList;
	CIrcNickListCtrl	m_ctlNickList;

protected:
	virtual BOOL	OnInitDialog();
	virtual void	OnSize(UINT nType, int cx, int cy);
	virtual int		OnCreate(LPCREATESTRUCT lpCreateStruct);
	virtual void	DoDataExchange(CDataExchange* pDX);
	virtual BOOL	OnCommand(WPARAM wParam, LPARAM lParam);
	virtual BOOL	PreTranslateMessage(MSG* pMsg);

	DECLARE_MESSAGE_MAP()

	afx_msg void	OnBnClickedBnIrcconnect();
	afx_msg void	OnBnClickedClosechat(int nItem=-1);
	afx_msg void	OnTcnSelchangeTab2(NMHDR *pNMHDR, LRESULT *pResult);
	afx_msg	void	OnColumnClickChanL( NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg	void	OnNMRclickChanL(NMHDR *pNMHDR, LRESULT *pResult);
	afx_msg void	OnNMDblclkserverChannelList(NMHDR *pNMHDR, LRESULT *pResult);
	afx_msg void	OnBnClickedTextBold();
	afx_msg void	OnBnClickedTextUnderline();
	afx_msg void	OnBnClickedTextColor();
	afx_msg void	OnBnClickedChatsend();
	afx_msg LONG	OnColorSelEndOK(WPARAM wParam, LPARAM lParam);
	afx_msg LONG	OnColorSelEndCancel(WPARAM wParam, LPARAM lParam);
	LRESULT			OnCloseTab(WPARAM wparam, LPARAM lparam);

	static	int	CALLBACK SortProcChanL(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);

private:
	bool	IsConnected() const		{ return m_eConnectStatus == IRC_CONNECTED; }
	bool	IsDisconnected() const	{ return m_eConnectStatus == IRC_DISCONNECTED; }
	CStatic*	GetUserLstStatic() const { return (CStatic*)GetDlgItem(IDC_IRC_USERS_ICO); }
	HICON	GetUserLstIcon() const { return (HICON)::LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDI_USERS), IMAGE_ICON, 16, 16, 0); }

	Channel					*m_pCurrentChannel;
	CClosableTabCtrl		channelselect;
	CIrcMain				*m_pIrcMain;
	CHTRichEditCtrl			titleWindow;
	CEdit					inputWindow;
	CXPStyleButtonST		m_ctrlTextBoldBtn;
	CXPStyleButtonST		m_ctrlTextUnderlineBtn;
	CXPStyleButtonST		m_ctrlTextColorBtn;
	CPtrList				channelLPtrList;
	CPtrList				channelPtrList;
	HICON					m_hOldIcon;
	EnumConnectStatus		m_eConnectStatus;
	bool					m_bLoggedIn;
};
@


1.37
log
@Formatting.
@
text
@a69 1
	void		SortInit(int iSortCode);
a140 1
	bool					m_bSortAscendingChanList[IRC2COL_NUMCOLUMNS];
@


1.36
log
@Faster interfaces for IRC message logging.
@
text
@d130 2
a131 2
	CClosableTabCtrl	channelselect;
	CIrcMain			*m_pIrcMain;
@


1.35
log
@Fixed link highlighting for long IRC links {Paola} (only the first line was identified as a link for links broken in several lines);
Optimized link identification and output to RichEdit controls (logs, chats, IRC)..
@
text
@d79 2
a80 1
	void		AddMessage(CString strChannel, CString strNick, COLORREF crTextColor, CString strLine, ...);
d86 2
a87 2
	Channel		*FindChannelByName(CString strName);
	Channel		*NewChannel(CString strName, byte byteType);
@


1.34
log
@More meaningful resource name.
@
text
@a102 1
	virtual BOOL	OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);
@


1.33
log
@Move the channel's user count out of the column header.
@
text
@d126 1
a126 1
	CStatic*	GetUserLstStatic() const { return (CStatic*)GetDlgItem(IDC_IRC_ICO); }
@


1.32
log
@Split IRC user list into separate source files.
@
text
@d126 2
d139 1
@


1.31
log
@Faster string processing; Reduced H-file dependency; Removed useless pragma pack 1.
@
text
@d1 16
d25 1
a25 8

enum EnumIRC1ListColumns
{
	IRC1COL_NICK = 0,
	IRC1COL_STATUS,

	IRC1COL_NUMCOLUMNS
};
a43 1
#pragma pack(1)
a46 1
	CHTRichEditCtrl log;
d49 1
a49 1
	byte type;
d52 1
a55 12
#pragma pack()

struct Nick
{
	CString nick;
	CString op;
	CString hop;
	CString voice;
	CString uop;
	CString owner;
	CString protect;
};
d60 1
a71 1
	void		UpdateNickCount();
a77 9
	Nick*		FindNickByName(CString strChannel, CString strName);
	Nick*		NewNick(CString strChannel, CString strNick);
	void		RefreshNickList(CString strChannel);
	bool		RemoveNick(CString strChannel, CString strNick);
	void		DeleteAllNick(CString strChannel);
	void		DeleteNickInAll (CString strNick, CString strMessage);
	bool		ChangeNick(CString strChannel, CString strOldNick, CString strNewNick);
	bool		ChangeMode(CString strChannel, CString strNick, CString strMode);
	void		ParseChangeMode(CString strChannel, CString strChanger, CString strCommands, CString strNames);
d91 4
a94 1
	CMuleListCtrl	serverChannelList;
d101 1
a101 1
	virtual BOOL	OnCommand(WPARAM wParam,LPARAM lParam );
a109 1
	afx_msg void	OnEnLinkIrcBox(NMHDR *pNMHDR, LRESULT *pResult);
a112 3
	afx_msg	void	OnColumnClickNick( NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg	void	OnNMRclickNick(NMHDR *pNMHDR, LRESULT *pResult);
	afx_msg void	OnNMDblclkNickList(NMHDR *pNMHDR, LRESULT *pResult);
a121 1
	static	int	CALLBACK SortProcNick(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
a126 2
	CIrcMain				*m_pIrcMain;
	CClosableTabCtrl		channelselect;
d128 2
a129 1
	CMuleListCtrl			nickList;
a138 1
	bool					m_bSortAscendingNickList[IRC1COL_NUMCOLUMNS];
@


1.30
log
@Remove unused but active code that can be used to retrieve IP and port of users through IRC {Bruno}
@
text
@a49 1
#pragma pack(1)
a59 1
#pragma pack()
a62 1

a64 1
//IrcWnd
d97 1
a97 1
	void		SendString(CString strSend);
@


1.29
log
@Remove double #includes; Removed unused functionality.
@
text
@a81 2
	void		SetSendFileString(CString strFile)	{ m_strSendString = strFile; }
	CString		GetSendFileString()					{ return m_strSendString; }
a156 1
	CString					m_strSendString;
@


1.28
log
@fix for socket connection request with every IRC connect button click {Vladimir (SV)}
@
text
@d2 1
a3 3
#include "afxcmn.h"
#include "afxwin.h"
#include "resource.h"
d102 1
a102 1
	void		SetActivity(CString strChannel, bool bFlag);
@


1.27
log
@UNICODE preparation (first shot)
@
text
@d20 7
d74 6
a79 1
	void		SortInit(int sortCode);
d82 4
a85 5
	bool		GetLoggedIn()				{return m_bLoggedIn;}
	void		SetLoggedIn( bool flag )		{m_bLoggedIn = flag;}
	void		SetSendFileString( CString in_file )	{m_sSendString = in_file;}
	CString		GetSendFileString()			{return m_sSendString;}
	bool		IsConnected()				{return m_bConnected;}
d87 27
a113 2
// Dialog Data
	enum { IDD = IDD_IRC };
d117 2
a118 2
	virtual int	OnCreate(LPCREATESTRUCT lpCreateStruct);
	virtual void	DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
d122 3
a128 21
	DECLARE_MESSAGE_MAP()
private:
	CIrcMain*		m_pIrcMain;
	CClosableTabCtrl channelselect;
	CString			m_sSendString;
	bool			m_bConnected;
	bool			m_bLoggedIn;
	bool			m_bSortAscendingNickList[IRC1COL_NUMCOLUMNS];
	bool			m_bSortAscendingChanList[IRC2COL_NUMCOLUMNS];
	Channel			*m_pCurrentChannel;
public:
	afx_msg void OnDestroy();

//Server Channel List
public:
	void		ResetServerChannelList();
	void		AddChannelToList( CString name, CString user, CString description );
	void		ScrollHistory(bool down);
	CMuleListCtrl	serverChannelList;
protected:
	static	int	CALLBACK SortProcChanL(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
a131 17
private:
	CPtrList	channelLPtrList;

//Nick List
public:
	Nick*		FindNickByName(CString channel, CString name);
	Nick*		NewNick(CString channel, CString nick);
	void		RefreshNickList( CString channel );
	bool		RemoveNick( CString channel, CString nick );
	void		DeleteAllNick( CString channel );
	void		DeleteNickInAll ( CString nick, CString message );
	bool		ChangeNick( CString channel, CString oldnick, CString newnick );
	bool		ChangeMode( CString channel, CString nick, CString mode );
	void		ParseChangeMode( CString channel, CString changer, CString commands, CString names );
	void		ChangeAllNick(const CString &strOldNick, const CString &strNewNick);
protected:
	static	int	CALLBACK SortProcNick(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
a134 12
private:
	CMuleListCtrl	nickList;

//Messages
public:
	void		AddMessage( CString channelName, CString targetname, COLORREF crTextColor, CString line,...);
	void		SetConnectStatus( bool bConnected );
	void		NoticeMessage( CString source, CString message );
	void		SetTitle( CString channel, CString title );
	void		SetActivity( CString channel, bool flag);
	void		SendString( CString send );
protected:
d142 4
d147 2
a148 5
	CHTRichEditCtrl		titleWindow;
	CEdit				inputWindow;
	CXPStyleButtonST	m_ctrlTextBoldBtn;
	CXPStyleButtonST	m_ctrlTextUnderlineBtn;
	CXPStyleButtonST	m_ctrlTextColorBtn;
d150 16
a165 10
//Channels
public:
	Channel		*FindChannelByName(CString name);
	Channel		*NewChannel(CString name, byte type);
	void		RemoveChannel(CString channel);
	void		DeleteAllChannel();
	void		JoinChannels();
protected:
private:
	CPtrList	channelPtrList;
@


1.26
log
@Clean-up.
@
text
@d128 1
a128 1
	void		ChangeAllNick( CString oldnick, CString newnick );
@


1.25
log
@Removed unused closable tab stuff to reduce used memory and GDI resources.
@
text
@a128 1
//	void		SetNick( CString in_nick );
@


1.24
log
@Preferences storage reorganization and minor optimization.
@
text
@a91 1
	CImageList		m_imageList;
d165 1
a165 1
	void		RemoveChannel( CString channel );
@


1.23
log
@Added an option in IRC to send Bold, Underline & Colored messages.
Small optimization in IRC and some minor changes/fixes.
@
text
@a19 9
enum EnumIRC2ListColumns
{
	IRC2COL_NAME = 0,
	IRC2COL_USERS,
	IRC2COL_DESCRIPTION,

	IRC2COL_NUMCOLUMNS
};

a22 1
#pragma pack(1) //???
a28 1
#pragma pack()
@


1.22
log
@Different way to handle IRC links + Minor fix in rich edit color handling.
@
text
@d10 1
d159 3
d163 2
d168 4
a171 1
	CEdit		inputWindow;
@


1.21
log
@Color coded IRC channel title
@
text
@d95 1
@


1.20
log
@minor fix/changes
@
text
@a152 1
	CString		StripMessageOfColorCodes( CString temp );
d160 1
a160 1
	CEdit		titleWindow;
@


1.19
log
@some more changes
@
text
@a152 1
	CString		StripMessageOfFontCodes( CString temp );
@


1.18
log
@Removed CPreparedRTFText class
@
text
@d150 1
a150 2
	void		AddStatus( CString received, ... );
	void		AddMessage( CString channelName, CString targetname, CString line,...);
@


1.17
log
@Fixed list sorting direction while switching <thanks xrmb>;
Fixed initial IRC channel list sort mode when sort settings aren't in use;
Fixed initial IRC channel list sort direction;
Fixed sort directions while switching between two IRC lists;
Added list column definitions.
@
text
@d32 2
a33 1
struct ChannelList{
d41 2
a42 1
struct Channel{
d44 1
a44 1
	CPreparedRTFText* log;
d56 2
a57 1
struct Nick{
a74 1

d85 1
a85 1
	void		InitFont();
d109 1
a109 1
	Channel*		m_pCurrentChannel;
a162 1
	CHTRichEditCtrl	statusWindow;
d168 2
a169 2
	Channel*	FindChannelByName(CString name);
	Channel*	NewChannel(CString name, byte type);
@


1.16
log
@Small fix
@
text
@d6 1
a6 1
#include "ircmain.h"
d11 17
a99 1
	bool			m_bSortAscending[8];	 
d103 1
a103 1
	bool			m_bConnected;	
d105 2
@


1.15
log
@fixed IRC Nick/Status sorting; joined channel / private chat on IRC gets focus
@
text
@a130 1
	void		AddInfoMessage( CString channelName, CString received, ... );
@


1.14
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@a124 1
	afx_msg void	OnNMClickNicklist(NMHDR *pNMHDR, LRESULT *pResult);
@


1.13
log
@Log & Debug log scrollbars auto show + fixed IRC links click
@
text
@d28 1
a28 1
	uint8 type;
d152 1
a152 1
	Channel*	NewChannel(CString name, uint8 type);
@


1.12
log
@Converted IRC/Messages to Rich Edit  (added copy text to clipboard & save logs with colors as RTF)
@
text
@d79 1
@


1.11
log
@added context menu to save IRC/Messages to disk from official v0.30d
@
text
@a6 1
#include "hypertextctrl.h"
d9 3
d25 1
a25 1
	CPreparedHyperText log;
a124 1
	afx_msg void	OnContextMenu(CWnd* pWnd, CPoint point);
a140 1
//	afx_msg	void	OnNMRclickStatusWindow(NMHDR *pNMHDR, LRESULT *pResult);
d144 1
a144 1
	CHyperTextCtrl	statusWindow;
@


1.10
log
@Formatting, comments, and name changes.
@
text
@d56 1
a56 1
	void		SortInit(int sortCode);	//sortdlg Cax2
d88 1
a88 1
	afx_msg void OnDestroy();	// eklmn: bugfix(00): resource cleanup due to CResizableDialog
d123 1
@


1.9
log
@Formatting, comments, and name changes.
@
text
@d79 1
a79 1
	CImageList		imagelist;
@


1.8
log
@Updated Chat & IRC code. Workaround for bug #0000322
@
text
@d80 1
a80 1
	bool			asc_sort[8];	 
@


1.7
log
@Formatting, comments, and name changes.
@
text
@d9 1
d27 2
d37 6
a42 1
	CString mode;
d75 1
a75 1
	afx_msg void	OnBnClickedClosechat();
d82 1
a82 1
	CTabCtrl		channelselect;
d94 1
a101 1
	
d137 1
a137 1
	void		SendString( CString send )	{m_pIrcMain->SendString( send );}
d141 1
@


1.6
log
@Second batch of name changes
@
text
@d123 1
a123 1
	void		SetConnectStatus( bool connected );
@


1.5
log
@Eklmn and BavarianSnail changes. see changelog+
@
text
@d120 2
a121 2
	void		AddStatus( CString recieved, ... );
	void		AddInfoMessage( CString channelName, CString recieved, ... );
@


1.4
log
@more 26b merges
@
text
@d79 2
@


1.3
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@d11 1
a11 1

d17 1
d19 1
d29 1
d31 1
d36 1
@


1.2
log
@bugfixes & control panel updates
@
text
@d50 1
@


1.2.2.1
log
@initial upgrade to .26
@
text
@a49 1
	bool		IsConnected()				{return m_bConnected;}
@


1.1
log
@*** empty log message ***
@
text
@d78 1
d85 1
a85 1
	CMuleListCtrl	serverChannelList;
@


1.1.4.1
log
@updating this branch...
@
text
@@


1.1.4.2
log
@updated control panes, and assorted bugfixes
@
text
@a77 1
	CMuleListCtrl	serverChannelList;
d84 1
a84 1
	
@


