head	1.39;
access;
symbols
	PublicRelease_1_2e:1.38
	Interim_Release_1-2e_RC1:1.38
	PublicRelease_1_2d:1.37
	Interim_Release_1-2d_RC1:1.37
	Interim_Release_1-2d_beta1:1.37
	PublicRelease_1_2c:1.31
	Interim_Release_1-2c_RC1:1.31
	Interim_Release_1-2c_beta1:1.30
	PublicRelease_1_2b:1.30
	Interim_Release_1-2b_RC1:1.30
	PublicRelease_1_2a:1.30
	Interim_Release_1-2a_RC1:1.30
	Interim_Release_1-2a_beta2:1.29
	Interim_Release_1-2a_beta1:1.29
	PublicRelease_1_2:1.28
	Interim_Release_1-2_RC1:1.28
	Interim_Release_1-2_beta1:1.28
	PublicRelease_1_1g:1.26
	Interim_Release_1-1g_RC3:1.26
	Interim_Release_1-1g_RC2:1.25
	Interim_Release_1-1g_RC1:1.25
	Interim_Release_1-1g_beta2:1.23
	Interim_Release_1-1g_beta1:1.23
	PublicRelease_1_1f:1.21
	Interim_Release_1-1f_RC1:1.21
	PublicRelease_1_1e:1.21
	Interim_Release_1-1e_RC2:1.21
	Interim_Release_1-1e_RC1:1.21
	Interim_Release_1-1e_beta1:1.21
	PublicRelease_1_1d:1.21
	Interim_Release_1-1d_RC1:1.21
	PublicRelease_1_1c:1.21
	Interim_Release_1-1c_RC1:1.21
	Interim_Release_1-1c_beta2:1.21
	Interim_Release_1-1c_beta1:1.21
	PublicRelease_1_1b:1.21
	Interim_Release_1-1b_RC1:1.21
	PublicRelease_1_1a:1.21
	Interim_Release_1-1a_RC2:1.21
	Interim_Release_1-1a_RC1:1.21
	Interim_Release_1-1a_beta2:1.21
	Interim_Release_1-1a_beta1:1.21
	PublicRelease_1_1:1.21
	Interim_Release_1-1_beta1:1.21
	PublicRelease_1o:1.21
	Interim_Release_1o_RC1:1.21
	Interim_Release_1o_beta1:1.21
	PublicRelease_1n:1.21
	Interim_Release_1n_RC2:1.21
	Interim_Release_1n_RC1:1.21
	Interim_Release_1n_beta2:1.21
	Interim_Release_1n_beta1:1.21
	PublicRelease_1m:1.20
	Interim_Release_1m_beta1:1.20
	PublicRelease_1l:1.20
	Interim_Release_1l_RC3:1.20
	Interim_Release_1l_RC2:1.20
	Interim_Release_1l_RC1:1.19
	Interim_Release_1l_beta2:1.19
	Interim_Release_1l_beta1:1.19
	PublicRelease_1k:1.19
	Interim_Release_1k_RC4:1.19
	Interim_1k_RC3:1.19
	Interim_1k_RC2:1.19
	Interim_Release_1k_RC1:1.19
	Interim_Release_1k_beta5:1.19
	Intrerim_Release_1k_beta4:1.19
	Interim_Release_1k_beta1:1.15
	PublicRelease_1j:1.13
	Interim_Release_1J_RC3:1.13
	Interim_Release_1j_RC3:1.13
	Interim_Release_1j_RC2:1.13
	Interim_Release_1j_RC1:1.13
	Interim_Release_1j_beta2:1.13
	Interim_Release_1j_beta1:1.13
	PublicRelease_1i:1.13
	Interim_Release_1i_RC6:1.13
	Interim_Release_1i_RC3:1.13
	Interim_Release_1i_RC2:1.13
	Interim_Release_1i_RC1:1.12
	Interim_Release_1i_beta3:1.12
	Interim_Release_1i_beta2:1.12
	Interim_Release_1i_beta1:1.12
	PublicRelease_1h:1.9
	Interim_Release_1h_rc2:1.9
	Interim_Release_1h_RC1:1.7
	Interim_Release_1h_beta2:1.3
	Interim_Release_1h_beta1_now:1.2
	Interim_Release_1h_beta1:1.2;
locks; strict;
comment	@// @;


1.39
date	2009.04.29.03.14.37;	author aw3;	state Exp;
branches;
next	1.38;

1.38
date	2008.11.12.03.52.08;	author aw3;	state Exp;
branches;
next	1.37;

1.37
date	2008.01.24.09.52.38;	author eklmn;	state Exp;
branches;
next	1.36;

1.36
date	2008.01.19.02.21.45;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2008.01.17.21.42.14;	author eklmn;	state Exp;
branches;
next	1.34;

1.34
date	2008.01.14.21.32.57;	author eklmn;	state Exp;
branches;
next	1.33;

1.33
date	2007.12.01.10.38.06;	author eklmn;	state Exp;
branches;
next	1.32;

1.32
date	2007.10.11.18.06.27;	author fuxie-dk;	state Exp;
branches;
next	1.31;

1.31
date	2007.04.17.04.39.05;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2006.07.10.19.55.15;	author kush_eplus;	state Exp;
branches;
next	1.29;

1.29
date	2006.04.23.03.44.02;	author aw3;	state Exp;
branches;
next	1.28;

1.28
date	2006.01.11.03.44.32;	author aw3;	state Exp;
branches;
next	1.27;

1.27
date	2006.01.06.20.05.54;	author kush_eplus;	state Exp;
branches;
next	1.26;

1.26
date	2005.12.12.04.01.47;	author aw3;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.27.22.11.50;	author eklmn;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.23;

1.23
date	2005.08.21.17.58.39;	author aw3;	state Exp;
branches;
next	1.22;

1.22
date	2005.08.03.01.05.13;	author aw3;	state Exp;
branches;
next	1.21;

1.21
date	2004.07.09.17.49.34;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.31.20.02.34;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.19.19.28.14;	author aw3;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.18.18.03.15;	author eklmn;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.17.23.09.13;	author aw3;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.23.03.23.20;	author aw3;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.05.00.00.02;	author kush_eplus;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.26.21.25.23;	author kush_eplus;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.12.09.45.17;	author kuchin;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.27.09.02.58;	author emoulari;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.20.20.47.40;	author bavariansnail;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.20.15.39.32;	author morevit;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.12.20.01.53;	author dongato;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.12.16.05.53;	author dongato;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.09.16.21.59;	author dongato;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.09.04.19.29;	author dongato;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.06.13.27.57;	author dongato;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.06.05.31.36;	author dongato;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.02.18.29.10;	author puritynn666;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.13.15.53.53;	author eklmn;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.10.04.20.07;	author eklmn;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Combine preferences.ini access to avoid multiple loadings and savings (on startup file was loads 3 times, plus twice saved on every saving).
@
text
@/*	CStatisticsTree Class Implementation File by Khaos
	Copyright (C) 2003

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either
	version 2 of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	This file is a part of the KX mod, and more
	specifically, it is a part of my statistics
	add-on.

	The purpose of deriving a custom class from CTreeCtrl
	was to provide another level of customization and control.
	This allows us to easily code complicated parsing features
	and a context menu.
*/

#include "stdafx.h"
#include "emule.h"
#include "StatisticsTree.h"
#include "otherfunctions.h"
#include "TitleMenu.h"
#include "StatisticsDlg.h"
#include "UploadQueue.h"
#include <time.h>

IMPLEMENT_DYNAMIC(CStatisticsTree, CTreeCtrl)

BEGIN_MESSAGE_MAP(CStatisticsTree, CTreeCtrl)
	ON_WM_LBUTTONUP()
	ON_WM_RBUTTONDOWN()
	ON_WM_CONTEXTMENU()
	ON_NOTIFY_REFLECT(TVN_ITEMEXPANDED, OnItemExpanded)
END_MESSAGE_MAP()

CStatisticsTree::CStatisticsTree()
{
}

CStatisticsTree::~CStatisticsTree()
{
}

// This function is called from CStatisticsDlg::OnInitDialog in StatisticsDlg.cpp
void CStatisticsTree::Init()
{
	m_bExpandingAll = false;
	ModifyStyle(0,TVS_NOTOOLTIPS | TVS_DISABLEDRAGDROP);
#ifdef _UNICODE
//	Win9x: Explicitly set to Unicode to receive Unicode notifications.
	SendMessage(CCM_SETUNICODEFORMAT, TRUE);
#endif
}

// It is necessary to disrupt whatever behavior was preventing
// us from getting OnContextMenu to work.  This seems to be the
// magic fix...
void CStatisticsTree::OnRButtonDown(UINT nFlags, CPoint point)
{
	NOPRM(nFlags); NOPRM(point);
}

void CStatisticsTree::OnContextMenu(CWnd* pWnd, CPoint point)
{
	NOPRM(pWnd);
	DoMenu(point, TPM_LEFTALIGN | TPM_RIGHTBUTTON);
}

void CStatisticsTree::OnLButtonUp( UINT nFlags, CPoint point )
{
	g_App.m_pMDlg->m_dlgStatistics.ShowStatistics();
	CTreeCtrl::OnLButtonUp(nFlags, point);
}

// This function saves the expanded tree items intelligently.  Instead
// of saving them every time we ShowStatistics, now they are only saved
// when a parent item is expanded or collapsed.
// m_bExpandingAll is TRUE when CollapseAll, ExpandAll or ApplyExpandedMask
// are executing.  This is to prevent us from saving the string a bajillion
// times whenever these functions are called.  CollapseAll and ExpandAll
// call GetExpandedMask() upon completion.
void CStatisticsTree::OnItemExpanded(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR); NOPRM(pResult);
	if (!m_bExpandingAll)
		g_App.m_pPrefs->SetExpandedTreeItems(GetExpandedMask());
}

// Displays the command menu.  This function is overloaded
// because it is used both to display the context menu and also
// the menu that drops down from the button.
void CStatisticsTree::DoMenu()
{
	CPoint cursorPos;
	GetCursorPos(&cursorPos);
	DoMenu(cursorPos);
}

void CStatisticsTree::DoMenu(CPoint doWhere)
{
	DoMenu(doWhere, TPM_RIGHTALIGN | TPM_RIGHTBUTTON);
}

void CStatisticsTree::DoMenu(CPoint doWhere, UINT nFlags)
{
	CFileFind	findBackUp;
	CString		strBuffer(g_App.m_pPrefs->GetConfigDir());
	CTitleMenu	mnuContext;
	CMenu		mnuHTML;

	strBuffer += _T("statbkup.ini");

	int			iFlags = MF_STRING | (!findBackUp.FindFile(strBuffer) ? MF_GRAYED : 0);

	mnuContext.CreatePopupMenu();
	mnuContext.AddMenuTitle(GetResString(IDS_STATS_MNUTREETITLE));

	mnuContext.AppendMenu(MF_STRING | MF_POPUP, MP_STATTREE_RESET, GetResString(IDS_STATS_BNRESET));
	mnuContext.AppendMenu(iFlags, MP_STATTREE_RESTORE, GetResString(IDS_STATS_BNRESTORE));
	mnuContext.AppendMenu(MF_SEPARATOR);
	mnuContext.AppendMenu(MF_STRING, MP_STATTREE_EXPANDMAIN, GetResString(IDS_STATS_MNUTREEEXPANDMAIN));
	mnuContext.AppendMenu(MF_STRING, MP_STATTREE_EXPANDALL, GetResString(IDS_STATS_MNUTREEEXPANDALL));
	mnuContext.AppendMenu(MF_STRING, MP_STATTREE_COLLAPSEALL, GetResString(IDS_STATS_MNUTREECOLLAPSEALL));
	mnuContext.AppendMenu(MF_SEPARATOR);
	mnuContext.AppendMenu(MF_STRING, MP_STATTREE_COPYSEL, GetResString(IDS_STATS_MNUTREECPYSEL));
	mnuContext.AppendMenu(MF_STRING, MP_STATTREE_COPYVIS, GetResString(IDS_STATS_MNUTREECPYVIS));
	mnuContext.AppendMenu(MF_STRING, MP_STATTREE_COPYALL, GetResString(IDS_STATS_MNUTREECPYALL));
	mnuContext.AppendMenu(MF_SEPARATOR);

	mnuHTML.CreateMenu();
	mnuHTML.AppendMenu(MF_STRING, MP_STATTREE_HTMLCOPYSEL, GetResString(IDS_STATS_MNUTREECPYSEL));
	mnuHTML.AppendMenu(MF_STRING, MP_STATTREE_HTMLCOPYVIS, GetResString(IDS_STATS_MNUTREECPYVIS));
	mnuHTML.AppendMenu(MF_STRING, MP_STATTREE_HTMLCOPYALL, GetResString(IDS_STATS_MNUTREECPYALL));
	mnuHTML.AppendMenu(MF_SEPARATOR);
	mnuHTML.AppendMenu(MF_STRING, MP_STATTREE_HTMLEXPVIS, GetResString(IDS_STATS_EXPORTVIS));
	mnuHTML.AppendMenu(MF_STRING, MP_STATTREE_HTMLEXPORT, GetResString(IDS_STATS_EXPORT2HTML));
	mnuContext.AppendMenu(MF_STRING | MF_POPUP, (UINT_PTR)mnuHTML.m_hMenu, GetResString(IDS_STATS_MNUTREEHTML));

	mnuContext.TrackPopupMenuEx(nFlags, doWhere.x, doWhere.y, this, NULL);

//	Menu objects are destroyed in their destructor
}

// Process context menu items...
BOOL CStatisticsTree::OnCommand(WPARAM wParam, LPARAM lParam)
{
	NOPRM(lParam);
	switch (wParam)
	{
		case MP_STATTREE_RESET:
			if(AfxMessageBox(GetResString(IDS_STATS_MBRESET_TXT), MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
				break;

			g_App.m_pPrefs->ResetStatistics();
			g_App.m_pMDlg->AddLogLine(0, IDS_STATS_NFORESET);
			g_App.m_pMDlg->m_dlgStatistics.ShowStatistics();
			break;

		case MP_STATTREE_RESTORE:
			if (AfxMessageBox(GetResString(IDS_STATS_MBRESTORE_TXT), MB_YESNO | MB_ICONQUESTION) == IDNO)
				break;

			if (!g_App.m_pPrefs->LoadStats(NULL))
				g_App.m_pMDlg->AddLogLine(LOG_FL_SBAR, IDS_ERR_NOSTATBKUP);
			else
				g_App.m_pMDlg->AddLogLine(0, IDS_STATS_NFOLOADEDBKUP);
			break;

		case MP_STATTREE_EXPANDMAIN:
			SetRedraw(false);
			ExpandAll(true);
			goto lblSaveExpanded;

		case MP_STATTREE_EXPANDALL:
			SetRedraw(false);
			ExpandAll();
			goto lblSaveExpanded;

		case MP_STATTREE_COLLAPSEALL:
			SetRedraw(false);
			CollapseAll();
lblSaveExpanded:
			g_App.m_pPrefs->SetExpandedTreeItems(GetExpandedMask());
			SetRedraw(true);
			break;

		case MP_STATTREE_COPYSEL:
		case MP_STATTREE_COPYVIS:
		case MP_STATTREE_COPYALL:
			CopyText(wParam);
			break;

		case MP_STATTREE_HTMLCOPYSEL:
		case MP_STATTREE_HTMLCOPYVIS:
		case MP_STATTREE_HTMLCOPYALL:
			CopyHTML(wParam);
			break;

		case MP_STATTREE_HTMLEXPORT:
		case MP_STATTREE_HTMLEXPVIS:
			ExportHTML(wParam==MP_STATTREE_HTMLEXPVIS);
			break;
	}

	return true;
}

// If the item is bold it returns true, otherwise
// false.  Very straightforward.
// EX: if(IsBold(myTreeItem)) MessageBox("It's bold.");
bool CStatisticsTree::IsBold(HTREEITEM theItem)
{
	UINT stateBold = GetItemState(theItem, TVIS_BOLD);
	return (stateBold & TVIS_BOLD) ? true : false;
}

// If the item is expanded it returns true, otherwise
// false.  Very straightforward.
// EX: if(IsExpanded(myTreeItem)) MessageBox("It's expanded.");
bool CStatisticsTree::IsExpanded(HTREEITEM theItem)
{
	UINT stateExpanded = GetItemState(theItem, TVIS_EXPANDED);
	return (stateExpanded & TVIS_EXPANDED) ? true : false;
}

// This is a generic function to check if a state is valid or not.
// It accepts a tree item handle and a state/statemask/whatever.
// It then retrieves the state UINT value and does a bitand
// with the original input.  This should translate into a
// boolean result that tells us whether the checked state is
// true or not.  This is currently unused, but may come in handy
// for states other than bold and expanded.
// EX:  if(CheckState(myTreeItem, TVIS_BOLD)) MessageBox("It's bold.");
bool CStatisticsTree::CheckState(HTREEITEM hItem, UINT state)
{
	UINT stateGeneric = GetItemState(hItem, state);
	return (stateGeneric & state) ? true : false;
}

// Returns the entire text label of an HTREEITEM.  This
// is an overloaded function.
// EX: CString itemText = GetItemText(myTreeItem);
CString CStatisticsTree::GetItemText(HTREEITEM hti)
{
	if (hti == NULL)
		return _T("");

	TVITEM	tvi;
	TCHAR	acText[1024];

	tvi.mask = TVIF_TEXT | TVIF_HANDLE;
	tvi.hItem = hti;
	tvi.pszText = acText;
	tvi.cchTextMax = ARRSIZE(acText);

	if (GetItem(&tvi))
		return tvi.pszText;

	return _T("");
}

// This seperates the title from the value in a tree item that has
// a title to the left of a colon, and a value to the right, with
// a space seperating the value from the colon. ": "
// int getPart can be GET_TITLE (0) or GET_VALUE (1)
// EXAMPLE:
// HTREEITEM hMyItem = treeCtrl.InsertItem("Title: 5", hMyParent);
// CString strTitle = treeCtrl.GetItemText(hMyItem, GET_TITLE);
// CString strValue = treeCtrl.GetItemText(hMyItem, GET_VALUE);
// MessageBox("The title is: " + strTitle + "\nThe value is: " + strValue);
CString CStatisticsTree::GetItemText(HTREEITEM hti, int iPart)
{
	if (hti == NULL)
		return _T("");

	CString	strFullText = GetItemText(hti);

	if (strFullText.IsEmpty())
		return _T("");

	int iSeparatorPos = strFullText.Find(_T(": "));

	if (iSeparatorPos < 1)
		return (iPart == GET_TITLE) ? strFullText : _T("");

	CString	strReturn;

	if (iPart == GET_TITLE)
		strReturn = strFullText.Left(iSeparatorPos);
	else if (iPart == GET_VALUE)
		strReturn = strFullText.Mid(iSeparatorPos + 2);

	return strReturn;
}

// This is the primary function for generating HTML output of the statistics tree.
// It is recursive.
CString CStatisticsTree::GetHTML(bool onlyVisible, HTREEITEM theItem, int theItemLevel, bool firstItem)
{
	CString		strBuffer, strItem;
	HTREEITEM	hCurrent;

	if (firstItem)
		strBuffer.Format(_T("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>") CLIENT_NAME_WITH_VER _T(" %s [%s]</b>\r\n<br /><br />\r\n"), GetResString(IDS_STATISTICS), g_App.m_pPrefs->GetUserNick());

	if (theItem == NULL) {
		if (!onlyVisible) g_App.m_pMDlg->m_dlgStatistics.ShowStatistics(true);
		hCurrent = GetRootItem(); // Copy All Vis or Copy All
	}
	else if (firstItem) {
		if (ItemHasChildren(theItem)) hCurrent = theItem; // Copy Branch issued for item with children, use item.
		else hCurrent = GetParentItem(theItem); // Copy Branch issued for item with no children, use parent.
	}
	else hCurrent = theItem; // This function has been recursed.

	while (hCurrent != NULL)
	{
		if (IsBold(hCurrent)) strItem = _T("<b>") + GetItemText(hCurrent) + _T("</b>");
		else strItem = GetItemText(hCurrent);
		for (int i = 0; i < theItemLevel; i++) strBuffer += "&nbsp;&nbsp;&nbsp;";
		if (theItemLevel==0) strBuffer.Append(_T("\n"));
		strBuffer += strItem + _T("<br />");
		if (ItemHasChildren(hCurrent) && (!onlyVisible || IsExpanded(hCurrent)))
			strBuffer += (CString) GetHTML(onlyVisible, GetChildItem(hCurrent), theItemLevel+1, false);
		hCurrent = GetNextItem(hCurrent, TVGN_NEXT);
		if (firstItem && theItem != NULL) break; // Copy Selected Branch was used, so we don't want to copy all branches at this level.  Only the one that was selected.
	}
	if (firstItem) strBuffer += "</font>";
	return strBuffer;
}

// Takes the HTML output generated by GetHTML
// and puts it on the clipboard.  Simplenuff.
bool CStatisticsTree::CopyHTML(int copyMode)
{
	switch (copyMode) {
		case MP_STATTREE_HTMLCOPYSEL:
			{
				HTREEITEM selectedItem = GetSelectedItem();
				if (selectedItem != NULL) {
					CString theHTML = GetHTML(true, selectedItem);
					if (theHTML.IsEmpty())
						return false;
					g_App.CopyTextToClipboard(theHTML);
					return true;
				}
				return false;
			}
		case MP_STATTREE_HTMLCOPYVIS:
			{
				CString theHTML = GetHTML();
				if (theHTML.IsEmpty())
					return false;
				g_App.CopyTextToClipboard(theHTML);
				return true;
			}
		case MP_STATTREE_HTMLCOPYALL:
			{
				CString theHTML = GetHTML(false);
				if (theHTML.IsEmpty())
					return false;
				g_App.CopyTextToClipboard(theHTML);
				return true;
			}
	}

	return false;
}

// The plaintext alterego of GetHTML.  Simplenuff.
// Oh yeah, the example/code this is based on was originally written by the enkeyDEV
// crew.  This was the inspiration for GetHTML.
CString CStatisticsTree::GetText(bool onlyVisible, HTREEITEM theItem, int theItemLevel, bool firstItem)
{
	CString		strBuffer;
	HTREEITEM	hCurrent;

	if (firstItem)
		strBuffer.Format(CLIENT_NAME_WITH_VER _T(" Statistics [%s]\r\n\r\n"), g_App.m_pPrefs->GetUserNick());

	if (theItem == NULL) hCurrent = GetRootItem(); // Copy All Vis or Copy All
	else if (firstItem) {
		if (ItemHasChildren(theItem)) hCurrent = theItem; // Copy Branch issued for item with children, use item.
		else hCurrent = GetParentItem(theItem); // Copy Branch issued for item with no children, use parent.
	}
	else hCurrent = theItem; // This function has been recursed.

	while (hCurrent != NULL)
	{
		for (int i = 0; i < theItemLevel; i++)
			strBuffer += "   ";
		strBuffer += GetItemText(hCurrent);
		strBuffer += "\r\n";
		if (ItemHasChildren(hCurrent) && (!onlyVisible || IsExpanded(hCurrent)))
			strBuffer += (CString) GetText(onlyVisible, GetChildItem(hCurrent), theItemLevel+1, false);
		hCurrent = GetNextItem(hCurrent, TVGN_NEXT);
		if (firstItem && theItem != NULL) break; // Copy Selected Branch was used, so we don't want to copy all branches at this level.  Only the one that was selected.
	}
	return strBuffer;
}

// Doh-nuts.
bool CStatisticsTree::CopyText(int copyMode)
{
	switch (copyMode) {
		case MP_STATTREE_COPYSEL:
			{
				HTREEITEM selectedItem = GetSelectedItem();
				if (selectedItem != NULL) {
					CString theText = GetText(true, selectedItem);
					if (theText.IsEmpty())
						return false;
					g_App.CopyTextToClipboard(theText);
					return true;
				}
				return false;
			}
		case MP_STATTREE_COPYVIS:
			{
				CString theText = GetText();
				if (theText.IsEmpty())
					return false;
				g_App.CopyTextToClipboard(theText);
				return true;
			}
		case MP_STATTREE_COPYALL:
			{
				CString theText = GetText(false);
				if (theText.IsEmpty())
					return false;
				g_App.CopyTextToClipboard(theText);
				return true;
			}
	}

	return false;
}

// This function generates the HTML output for ExportHTML.  The reason this was made separate
// from GetHTML is because it uses style sheets.  This lets the user easily customize the look
// of the HTML file after it is saved, just by changing a value here and there.
// Styled ID Tags:	pghdr	= This is used for the header that gives the eMule build and date.
//					sec		= Sections, ie Transfer, Connection, Session, Cumulative
//					item	= Items, ie UL:DL Ratio, Peak Connections, Downloaded Data
//					bdy		= The BODY tag.  Used to control the background color.
CString CStatisticsTree::GetHTMLForExport(bool onlyVisible, HTREEITEM theItem, int theItemLevel, bool firstItem)
{
	static int j = 0;
	CString		strBuffer, strItem, strImage, strChild, strTab;
	int			nImage=0, nSelectedImage=0;
	HTREEITEM	hCurrent;
	CString		strDivStart, strDiv, strJ, strName;
	const TCHAR	*pcDivA, *pcDivEnd;

	hCurrent = (firstItem) ? GetRootItem() : theItem;

	while (hCurrent != NULL)
	{
		strItem.Empty();
		if (ItemHasChildren(hCurrent))
		{
			j++;
			strJ.Format(_T("%d"),j);
			strDiv = _T("<div id=\"T");
			strDiv += strJ;
			if (IsExpanded(hCurrent))
			{
				strChild = _T("visible");
				strDiv += _T("\" style=\"margin-left:18px\">");
			}
			else
			{
				strChild = _T("hidden");
				strDiv += _T("\" style=\"margin-left:18px; visibility:hidden; position:absolute\">");
			}
			strDivStart = _T("<a href=\"javascript:togglevisible('") + strJ + _T("')\">");
			pcDivEnd = _T("</div>");
			pcDivA = _T("</a>");
			strName = _T("name=\"I") + strJ + _T("\"");
		}
		else
		{
			strChild = _T("space");
			strDiv = _T("");
			strDivStart = _T("");
			pcDivEnd = _T("");
			pcDivA = _T("");
			strName = _T("");
		}
		strBuffer += _T("\n");
		for (int i = 0; i < theItemLevel; i++)
			strBuffer += _T("\t");

		strItem += strDivStart;
		strItem += _T("<img ") + strName + _T("src=\"stats_") + strChild + _T(".gif\" align=\"middle\">&nbsp;");
		strItem += pcDivA;

		if (GetItemImage(hCurrent, nImage, nSelectedImage))
			strImage.Format(_T("%u"),nImage);
		else
			strImage.Format(_T("%u"),0);

		strItem += _T("<img src=\"stats_") + strImage + _T(".gif\" align=\"middle\">&nbsp;");

		if (IsBold(hCurrent))
			strItem += _T("<b>") + GetItemText(hCurrent) + _T("</b>");
		else
			strItem += GetItemText(hCurrent);

		if (theItemLevel == 0)
			strBuffer += _T('\n');
		strBuffer += strItem;
		strBuffer += _T("<br />");

		if (ItemHasChildren(hCurrent))
		{
			strTab = _T("\n");
			for (int i = 0; i < theItemLevel; i++)
				strTab += _T('\t');
			strBuffer += strTab;
			strBuffer += strDiv;
			strBuffer += strTab + _T('\t') + GetHTMLForExport(onlyVisible, GetChildItem(hCurrent), theItemLevel + 1, false);
			strBuffer += strTab;
			strBuffer += pcDivEnd;
		}
		hCurrent = GetNextItem(hCurrent, TVGN_NEXT);
	}
	return strBuffer;
}

// Get a file name from the user, obtain the generated HTML and then save it in that file.
void CStatisticsTree::ExportHTML(bool onlyvisible)
{
	EMULE_TRY

	CFile htmlFile;

	TCHAR szDir[MAX_PATH];
	GetCurrentDirectory(MAX_PATH, szDir);

	CFileDialog saveAsDlg (false, _T("html"), _T("*.html"), OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT | OFN_EXPLORER, _T("HTML Files (*.html)|*.html|All Files (*.*)|*.*||"), this, 0);
	if (saveAsDlg.DoModal() == IDOK)
	{
		CString		strHTML;

		strHTML.Format( _T("<html>\r\n<header>\r\n<title>") CLIENT_NAME_WITH_VER _T(" %s [%s]</title>\r\n")
			_T("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">")
			_T("<style type=\"text/css\">\r\n")
			_T("#pghdr { color: #000F80; font: bold 12pt/14pt Verdana, Courier New, Helvetica; }\r\n")
			_T("#pghdr2 { color: #000F80; font: bold 10pt/12pt Verdana, Courier New, Helvetica; }\r\n")
			_T("img { border: 0px; }\r\n")
			_T("a { text-decoration: none; }\r\n")
			_T("#sec { color: #000000; font: bold 9pt/11pt Verdana, Courier New, Helvetica; }\r\n")
			_T("#item { color: #000000; font: normal 8pt/10pt Verdana, Courier New, Helvetica; }\r\n")
			_T("#bdy { color: #000000; font: normal 8pt/10pt Verdana, Courier New, Helvetica; background-color: #FFFFFF; }\r\n</style>\r\n</header>\r\n")
			_T("<script language=\"JavaScript1.2\" type=\"text/javascript\">\r\n")
			_T("function obj(menu)\r\n")
			_T("{\r\n")
			_T("return (navigator.appName == \"Microsoft Internet Explorer\")?this[menu]:document.getElementById(menu);\r\n")
			_T("}\r\n")
			_T("function togglevisible(treepart)\r\n")
			_T("{\r\n")
			_T("if (this.obj(\"T\"+treepart).style.visibility == \"hidden\")\r\n")
			_T("{\r\n")
			_T("this.obj(\"T\"+treepart).style.position=\"\";\r\n")
			_T("this.obj(\"T\"+treepart).style.visibility=\"\";\r\n")
			_T("document[\"I\"+treepart].src=\"stats_visible.gif\";\r\n")
			_T("}\r\n")
			_T("else\r\n")
			_T("{\r\n")
			_T("this.obj(\"T\"+treepart).style.position=\"absolute\";\r\n")
			_T("this.obj(\"T\"+treepart).style.visibility=\"hidden\";\r\n")
			_T("document[\"I\"+treepart].src=\"stats_hidden.gif\";\r\n")
			_T("}\r\n")
			_T("}\r\n")
			_T("</script>\r\n")
			_T("<body id=\"bdy\">\r\n")

			_T("<span id=\"pghdr\"><b>") CLIENT_NAME_WITH_VER _T(" %s</b></span><br /><span id=\"pghdr2\">%s %s</span>\r\n<br /><br />\r\n")
			_T("%s</body></html>"),
			GetResString(IDS_STATISTICS), g_App.m_pPrefs->GetUserNick(),
			GetResString(IDS_STATISTICS), GetResString(IDS_CD_UNAME), g_App.m_pPrefs->GetUserNick(),
			GetHTMLForExport(onlyvisible) );

		htmlFile.Open(saveAsDlg.GetPathName(), CFile::modeCreate | CFile::modeWrite | CFile::shareDenyWrite);
		WriteStr2MB(cfUTF8, strHTML, htmlFile);
		htmlFile.Close();

		static const TCHAR *const s_apcFileNames[] = {
			_T("stats_0.gif"), _T("stats_1.gif"), _T("stats_2.gif"), _T("stats_3.gif"), _T("stats_4.gif"),
			_T("stats_5.gif"), _T("stats_6.gif"), _T("stats_7.gif"), _T("stats_8.gif"), _T("stats_9.gif"),
			_T("stats_10.gif"), _T("stats_11.gif"), _T("stats_12.gif"), _T("stats_13.gif"),
			_T("stats_14.gif"), _T("stats_15.gif"), _T("stats_16.gif"),
			_T("stats_hidden.gif"), _T("stats_space.gif"), _T("stats_visible.gif")
		};
		CString		strDst = saveAsDlg.GetPathName().Left(saveAsDlg.GetPathName().GetLength() - saveAsDlg.GetFileName().GetLength());// EC - what if directory name == filename? this should fix this
		CString		strSrc = g_App.m_pPrefs->GetAppDir();

		strSrc += _T("\\WebServer\\");
		for (unsigned ui = 0; ui < ARRSIZE(s_apcFileNames); ui++)
			::CopyFile(strSrc + s_apcFileNames[ui], strDst + s_apcFileNames[ui], false);
	}

	SetCurrentDirectory(szDir);

	EMULE_CATCH
}

// Expand all the tree sections.  Recursive.
// Can also expand only bold items (Main Sections)
void CStatisticsTree::ExpandAll(bool onlyBold, HTREEITEM theItem)
{
	HTREEITEM hCurrent;

	if (theItem == NULL) {
		if (onlyBold) CollapseAll();
		hCurrent = GetRootItem();
		m_bExpandingAll = true;
	}
	else
		hCurrent = theItem;

	while (hCurrent != NULL)
	{
		if (ItemHasChildren(hCurrent) && (!onlyBold || IsBold(hCurrent))) {
			Expand(hCurrent, TVE_EXPAND);
			ExpandAll(onlyBold, GetChildItem(hCurrent));
		}
		hCurrent = GetNextItem(hCurrent, TVGN_NEXT);
	}

	if (theItem == NULL) m_bExpandingAll = false;
}

// Collapse all the tree sections.  This is recursive
// so that we can collapse submenus.  SetRedraw should
// be FALSE while this is executing.
void CStatisticsTree::CollapseAll(HTREEITEM theItem)
{
	HTREEITEM hCurrent;

	if (theItem == NULL) {
		hCurrent = GetRootItem();
		m_bExpandingAll = true;
	}
	else
		hCurrent = theItem;

	while (hCurrent != NULL)
	{
		if (ItemHasChildren(hCurrent))
			CollapseAll(GetChildItem(hCurrent));
		Expand(hCurrent, TVE_COLLAPSE);
		hCurrent = GetNextItem(hCurrent, TVGN_NEXT);
	}

	if (theItem == NULL) m_bExpandingAll = false;
}

// This recursive function returns a string of 1's and 0's indicating
// which parent items are expanded.  Only saves the
// bold items.
CString& CStatisticsTree::GetExpandedMask(HTREEITEM theItem)
{
	HTREEITEM	hCurrent;

	if (theItem == NULL)
	{
		m_strExpandedMask.Truncate(0);
		hCurrent = GetRootItem();
	}
	else
		hCurrent = theItem;

	while (hCurrent != NULL)
	{
		if (ItemHasChildren(hCurrent) && IsBold(hCurrent))
		{
			if (IsExpanded(hCurrent))
				m_strExpandedMask += _T('1');
			if (!IsExpanded(hCurrent))
				m_strExpandedMask += _T('0');

			GetExpandedMask(GetChildItem(hCurrent));
		}
		hCurrent = GetNextItem(hCurrent, TVGN_NEXT);
	}
	return m_strExpandedMask;
}

// This takes a string and uses it to set the expanded or
// collapsed state of the tree items
int CStatisticsTree::ApplyExpandedMask(const CString &strMask, HTREEITEM theItem/*=NULL*/, int theStringIndex/*=0*/)
{
	HTREEITEM	hCurrent;

	if (theItem == NULL)
	{
		hCurrent = GetRootItem();
		SetRedraw(false);
		ExpandAll(true);
		m_bExpandingAll = true;
	}
	else
		hCurrent = theItem;

	while (hCurrent != NULL && theStringIndex < strMask.GetLength())
	{
		if (ItemHasChildren(hCurrent) && IsBold(hCurrent))
		{
			if (strMask.GetAt(theStringIndex) == _T('0'))
				Expand(hCurrent, TVE_COLLAPSE);
			theStringIndex++;
			theStringIndex = ApplyExpandedMask(strMask, GetChildItem(hCurrent), theStringIndex);
		}
		hCurrent = GetNextItem(hCurrent, TVGN_NEXT);
	}
	if (theItem == NULL)
	{
		SetRedraw(true);
		m_bExpandingAll = false;
	}
	return theStringIndex;
}

void CStatisticsTree::DeleteChildItems (HTREEITEM parentItem)
{
	if (ItemHasChildren(parentItem))
	{
		HTREEITEM hNextItem;
		HTREEITEM hChildItem = GetChildItem(parentItem);
		while (hChildItem != NULL)
		{
			hNextItem = GetNextItem(hChildItem, TVGN_NEXT);
			DeleteItem(hChildItem);
			hChildItem = hNextItem;
		}
	}
}
@


1.38
log
@Simplified logging system implementation.
@
text
@d173 1
a173 1
			if (!g_App.m_pPrefs->LoadStats(1))
@


1.37
log
@optimize the tree mask creation
@
text
@d165 1
a165 1
			g_App.m_pMDlg->AddLogLine(false, IDS_STATS_NFORESET);
d174 1
a174 1
				g_App.m_pMDlg->AddLogLine(true, IDS_ERR_NOSTATBKUP);
d176 1
a176 1
				g_App.m_pMDlg->AddLogLine(false, IDS_STATS_NFOLOADEDBKUP);
@


1.36
log
@Removed unrequired string initialization; Formatting; Suppressed compiler warnings.
@
text
@d670 1
a670 1
// This returns a string of 1's and 0's indicating
d673 1
a673 1
CString CStatisticsTree::GetExpandedMask(HTREEITEM theItem)
a675 1
	CString		tempMask;
d678 2
d681 1
d690 1
a690 1
				tempMask += _T('1');
d692 3
a694 2
				tempMask += _T('0');
			tempMask += GetExpandedMask(GetChildItem(hCurrent));
d698 1
a698 1
	return tempMask;
@


1.35
log
@corrected mask handling
@
text
@d68 1
a68 1
void CStatisticsTree::OnRButtonDown( UINT nFlags, CPoint point )
d70 1
a70 1
	return;
d73 1
a73 1
void CStatisticsTree::OnContextMenu( CWnd* pWnd, CPoint point )
d75 1
d92 1
a92 1
void CStatisticsTree::OnItemExpanded( NMHDR* pNMHDR, LRESULT* pResult )
d94 1
d157 3
a159 1
	switch (wParam) {
d161 2
a162 3
			{
				if(AfxMessageBox(GetResString(IDS_STATS_MBRESET_TXT), MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
					break;
d164 4
a167 3
				g_App.m_pPrefs->ResetStatistics();
				g_App.m_pMDlg->AddLogLine(false, IDS_STATS_NFORESET);
				g_App.m_pMDlg->m_dlgStatistics.ShowStatistics();
d169 2
a171 5
			}
		case MP_STATTREE_RESTORE:
			{
				if (AfxMessageBox(GetResString(IDS_STATS_MBRESTORE_TXT), MB_YESNO | MB_ICONQUESTION) == IDNO)
					break;
d173 5
a177 4
				if (!g_App.m_pPrefs->LoadStats(1))
					g_App.m_pMDlg->AddLogLine(true, IDS_ERR_NOSTATBKUP);
				else
					g_App.m_pMDlg->AddLogLine(false, IDS_STATS_NFOLOADEDBKUP);
a178 2
				break;
			}
d180 4
a183 5
			{
				SetRedraw(false);
				ExpandAll(true);
				goto lblSaveExpanded;
			}
d185 4
a188 5
			{
				SetRedraw(false);
				ExpandAll();
				goto lblSaveExpanded;
			}
d190 2
a191 3
			{
				SetRedraw(false);
				CollapseAll();
d193 4
a196 4
				g_App.m_pPrefs->SetExpandedTreeItems(GetExpandedMask());
				SetRedraw(true);
				break;
			}
d200 3
a202 4
			{
				CopyText(wParam);
				break;
			}
d206 3
a208 4
			{
				CopyHTML(wParam);
				break;
			}
a210 1
			{
a212 1
			}
d224 1
a224 1
	return (stateBold & TVIS_BOLD);
d233 1
a233 1
	return (stateExpanded & TVIS_EXPANDED);
d247 1
a247 1
	return (stateGeneric & state);
a677 2
	tempMask.Empty();

@


1.34
log
@1) set Unicode message format for Win9x systems
2) fixed dublicated creation of the statistic tree
@
text
@d694 2
a695 1
		if (ItemHasChildren(hCurrent) && IsBold(hCurrent)) {
d697 1
a697 1
				tempMask += "1";
d699 1
a699 1
				tempMask += "0";
@


1.33
log
@unicode prepararions:
1) added the code for conversion
2) unicode support for ini files
3) unicode support for URL en(de)coding
4) statistic output in UTF8 format
@
text
@d59 4
d736 1
a736 1
		m_bExpandingAll = true;
@


1.32
log
@Generate less code for some logging; Clean-up [Aw3].
@
text
@d560 1
d599 1
a599 1
		htmlFile.Write(strHTML, strHTML.GetLength());
@


1.31
log
@Improved HTML compliance while exporting statistics tree (from original).
@
text
@d149 1
a149 1
BOOL CStatisticsTree::OnCommand( WPARAM wParam, LPARAM lParam )
d158 1
a158 1
				g_App.m_pMDlg->AddLogLine(false, GetResString(IDS_STATS_NFORESET));
d168 4
a171 5
				if(!g_App.m_pPrefs->LoadStats(1))
					g_App.m_pMDlg->AddLogLine(true, GetResString(IDS_ERR_NOSTATBKUP));
				else {
					g_App.m_pMDlg->AddLogLine(false, GetResString(IDS_STATS_NFOLOADEDBKUP));
				}
d612 1
a612 1
		for (unsigned ui = 0; ui < ELEMENT_COUNT(s_apcFileNames); ui++)
@


1.30
log
@UNICODE preparation
@
text
@d318 1
a318 1
		strBuffer.Format(_T("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>") CLIENT_NAME_WITH_VER _T(" %s [%s]</b>\r\n<br><br>\r\n"), GetResString(IDS_STATISTICS), g_App.m_pPrefs->GetUserNick());
d336 1
a336 1
		strBuffer += strItem + _T("<br>");
d527 1
a527 1
		strBuffer += _T("<br>");
d592 1
a592 1
			_T("<span id=\"pghdr\"><b>") CLIENT_NAME_WITH_VER _T(" %s</b></span><br><span id=\"pghdr2\">%s %s</span>\r\n<br><br>\r\n")
@


1.29
log
@Unicode correction; Improve string processing; Reduced H-file dependency;
Don't keep menu object create local one (like in other places); Formatting.
@
text
@d467 1
a467 1
	const char	*pcDivA, *pcDivEnd;
d478 1
a478 1
			strDiv = "<div id=\"T";
d482 2
a483 2
				strChild = "visible";
				strDiv += "\" style=\"margin-left:18px\">";
d487 2
a488 2
				strChild = "hidden";
				strDiv += "\" style=\"margin-left:18px; visibility:hidden; position:absolute\">";
d490 4
a493 4
			strDivStart = CString("<a href=\"javascript:togglevisible('") + strJ + CString("')\">");
			pcDivEnd = "</div>";
			pcDivA = "</a>";
			strName = CString("name=\"I") + strJ + CString("\"");
d497 6
a502 6
			strChild = "space";
			strDiv = "";
			strDivStart="";
			pcDivEnd = "";
			pcDivA = "";
			strName = "";
d504 1
a504 1
		strBuffer += "\n";
d506 1
a506 1
			strBuffer += "\t";
d509 1
a509 1
		strItem += CString("<img ") + strName + CString("src=\"stats_") + strChild + CString(".gif\" align=\"middle\">&nbsp;");
d517 1
a517 1
		strItem += CString("<img src=\"stats_") + strImage + CString(".gif\" align=\"middle\">&nbsp;");
d520 1
a520 1
			strItem += CString("<b>") + GetItemText(hCurrent) + CString("</b>");
d536 1
a536 1
			strBuffer += strTab + _T('\t') + GetHTMLForExport(onlyVisible, GetChildItem(hCurrent), theItemLevel+1, false);
@


1.28
log
@Minor optimization.
@
text
@d31 2
d105 1
a105 1
	DoMenu( doWhere, TPM_RIGHTALIGN | TPM_RIGHTBUTTON );
d111 2
a112 1
	CString		strBuffer = g_App.m_pPrefs->GetConfigDir();
d145 1
a145 3
//	Local Menu objects are destroyed in their destructor

	VERIFY( mnuContext.DestroyMenu() );
d703 2
a704 2
// collapsed state of the tree items.
int CStatisticsTree::ApplyExpandedMask(CString theMask, HTREEITEM theItem, int theStringIndex)
d708 2
a709 1
	if (theItem == NULL) {
d718 1
a718 1
	while (hCurrent != NULL && theStringIndex < theMask.GetLength())
d720 4
a723 2
		if (ItemHasChildren(hCurrent) && IsBold(hCurrent)) {
			if (theMask.GetAt(theStringIndex) == '0') Expand(hCurrent, TVE_COLLAPSE);
d725 1
a725 1
			theStringIndex = ApplyExpandedMask(theMask, GetChildItem(hCurrent), theStringIndex);
d729 2
a730 1
	if (theItem == NULL) {
d750 1
a750 1
}@


1.27
log
@UNICODE preparation (first shot)
@
text
@a304 2
	else
		strReturn = _T("");
@


1.26
log
@WebServer: fixed wrong end of the tag on statistics page [morphis];
Improved string processing.
@
text
@d109 1
a109 1
	CString		myBuffer;
d112 1
a112 1
	myBuffer.Format("%sstatbkup.ini",g_App.m_pPrefs->GetConfigDir());
d114 1
a114 1
	int			iFlags = MF_STRING | (!findBackUp.FindFile(myBuffer) ? MF_GRAYED : 0);
d256 1
a256 1
CString CStatisticsTree::GetItemText(HTREEITEM theItem)
d258 5
a262 2
	if (theItem == NULL)
		return "";
d264 4
a267 6
	TVITEM item;
	TCHAR szText[1024];
	item.mask = TVIF_TEXT | TVIF_HANDLE;
	item.hItem = theItem;
	item.pszText = szText;
	item.cchTextMax = 1024;
d269 2
a270 2
	if (GetItem(&item))
		return CString(item.pszText);
d272 1
a272 1
	return "";
d284 1
a284 1
CString CStatisticsTree::GetItemText(HTREEITEM theItem, int getPart)
d286 4
a289 2
	if (theItem == NULL)
		return "";
d291 2
a292 2
	CString fullText, returnText;
	fullText = GetItemText(theItem);
d294 1
a294 2
	if (fullText.IsEmpty())
		return "";
d296 2
a297 1
	int posSeparator = fullText.Find(": ");
d299 1
a299 4
	if (posSeparator < 1) {
		returnText = getPart == GET_TITLE ? fullText : "";
		return returnText;
	}
d301 4
a304 4
	if (getPart == GET_TITLE)
		returnText = fullText.Left(posSeparator);
	else if (getPart == GET_VALUE)
		returnText = fullText.Mid(posSeparator + 2);
d306 1
a306 1
		returnText = "";
d308 1
a308 1
	return returnText;
d319 1
a319 1
		strBuffer.Format("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>" CLIENT_NAME_WITH_VER " %s [%s]</b>\r\n<br><br>\r\n", GetResString(IDS_STATISTICS), g_App.m_pPrefs->GetUserNick());
d333 1
a333 1
		if (IsBold(hCurrent)) strItem = "<b>" + GetItemText(hCurrent) + "</b>";
d336 2
a337 2
		if (theItemLevel==0) strBuffer.Append("\n");
		strBuffer += strItem + "<br>";
d394 1
a394 1
		strBuffer.Format(CLIENT_NAME_WITH_VER " Statistics [%s]\r\n\r\n", g_App.m_pPrefs->GetUserNick());
d526 1
a526 1
			strBuffer.Append("\n");
d528 1
a528 1
		strBuffer += "<br>";
d530 1
a530 1
		if (ItemHasChildren(hCurrent) /*&& (!onlyVisible || IsExpanded(hCurrent))*/)
d532 1
a532 1
			strTab = "\n";
d534 1
a534 1
				strTab += "\t";
d537 1
a537 1
			strBuffer += strTab + "\t" + (CString) GetHTMLForExport(onlyVisible, GetChildItem(hCurrent), theItemLevel+1, false);
d556 1
a556 1
	CFileDialog saveAsDlg (false, "html", "*.html", OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT | OFN_EXPLORER, "HTML Files (*.html)|*.html|All Files (*.*)|*.*||", this, 0);
d561 31
a591 32
		strHTML.Format( "<html>\r\n<header>\r\n<title>" CLIENT_NAME_WITH_VER " %s [%s]</title>\r\n"

			"<style type=\"text/css\">\r\n"
			"#pghdr { color: #000F80; font: bold 12pt/14pt Verdana, Courier New, Helvetica; }\r\n"
			"#pghdr2 { color: #000F80; font: bold 10pt/12pt Verdana, Courier New, Helvetica; }\r\n"
			"img { border: 0px; }\r\n"
			"a { text-decoration: none; }\r\n"
			"#sec { color: #000000; font: bold 9pt/11pt Verdana, Courier New, Helvetica; }\r\n"
			"#item { color: #000000; font: normal 8pt/10pt Verdana, Courier New, Helvetica; }\r\n"
			"#bdy { color: #000000; font: normal 8pt/10pt Verdana, Courier New, Helvetica; background-color: #FFFFFF; }\r\n</style>\r\n</header>\r\n"
			"<script language=\"JavaScript1.2\" type=\"text/javascript\">\r\n"
			"function obj(menu)\r\n"
			"{\r\n"
			"return (navigator.appName == \"Microsoft Internet Explorer\")?this[menu]:document.getElementById(menu);\r\n"
			"}\r\n"
			"function togglevisible(treepart)\r\n"
			"{\r\n"
			"if (this.obj(\"T\"+treepart).style.visibility == \"hidden\")\r\n"
			"{\r\n"
			"this.obj(\"T\"+treepart).style.position=\"\";\r\n"
			"this.obj(\"T\"+treepart).style.visibility=\"\";\r\n"
			"document[\"I\"+treepart].src=\"stats_visible.gif\";\r\n"
			"}\r\n"
			"else\r\n"
			"{\r\n"
			"this.obj(\"T\"+treepart).style.position=\"absolute\";\r\n"
			"this.obj(\"T\"+treepart).style.visibility=\"hidden\";\r\n"
			"document[\"I\"+treepart].src=\"stats_hidden.gif\";\r\n"
			"}\r\n"
			"}\r\n"
			"</script>\r\n"
			"<body id=\"bdy\">\r\n"
d593 2
a594 2
			"<span id=\"pghdr\"><b>" CLIENT_NAME_WITH_VER " %s</b></span><br><span id=\"pghdr2\">%s %s</span>\r\n<br><br>\r\n"
			"%s</body></html>",
@


1.25
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d467 2
a468 2

	CString strDivStart, strDiv, strDivA, strDivEnd, strJ, strName;
d479 2
d484 1
a484 1
				strDiv = CString("<div id=\"T") + strJ + CString("\" style=\"margin-left:18px\">");
d489 1
a489 1
				strDiv = CString("<div id=\"T") + strJ + CString("\" style=\"margin-left:18px; visibility:hidden; position:absolute\">");
d492 2
a493 2
			strDivEnd = CString("</div>");
			strDivA = CString("</a>");
d499 1
a499 1
			strDiv="";
d501 3
a503 2
			strDivEnd="";
			strName="";
d511 1
a511 1
		strItem += strDivA;
d527 2
a528 1
		strBuffer += strItem + "<br>";
d535 2
a536 1
			strBuffer += strTab + strDiv;
d538 2
a539 1
			strBuffer += strTab + strDivEnd;
@


1.24
log
@renamed 3 variables
@
text
@d88 1
a88 1
		g_App.g_pPrefs->SetExpandedTreeItems(GetExpandedMask());
d112 1
a112 1
	myBuffer.Format("%sstatbkup.ini",g_App.g_pPrefs->GetConfigDir());
d156 1
a156 1
				g_App.g_pPrefs->ResetStatistics();
d167 1
a167 1
				if(!g_App.g_pPrefs->LoadStats(1))
d192 1
a192 1
				g_App.g_pPrefs->SetExpandedTreeItems(GetExpandedMask());
d319 1
a319 1
		strBuffer.Format("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>" CLIENT_NAME_WITH_VER " %s [%s]</b>\r\n<br><br>\r\n", GetResString(IDS_STATISTICS), g_App.g_pPrefs->GetUserNick());
d394 1
a394 1
		strBuffer.Format(CLIENT_NAME_WITH_VER " Statistics [%s]\r\n\r\n", g_App.g_pPrefs->GetUserNick());
d590 2
a591 2
			GetResString(IDS_STATISTICS), g_App.g_pPrefs->GetUserNick(),
			GetResString(IDS_STATISTICS), GetResString(IDS_CD_UNAME), g_App.g_pPrefs->GetUserNick(),
d606 1
a606 1
		CString		strSrc = g_App.g_pPrefs->GetAppDir();
@


1.23
log
@IDS_SF_STATISTICS renamed into IDS_STATISTICS.
@
text
@d74 1
a74 1
	g_eMuleApp.m_pdlgEmule->m_dlgStatistics.ShowStatistics();
d88 1
a88 1
		g_eMuleApp.m_pGlobPrefs->SetExpandedTreeItems(GetExpandedMask());
d112 1
a112 1
	myBuffer.Format("%sstatbkup.ini",g_eMuleApp.m_pGlobPrefs->GetConfigDir());
d156 3
a158 3
				g_eMuleApp.m_pGlobPrefs->ResetStatistics();
				g_eMuleApp.m_pdlgEmule->AddLogLine(false, GetResString(IDS_STATS_NFORESET));
				g_eMuleApp.m_pdlgEmule->m_dlgStatistics.ShowStatistics();
d167 2
a168 2
				if(!g_eMuleApp.m_pGlobPrefs->LoadStats(1))
					g_eMuleApp.m_pdlgEmule->AddLogLine(true, GetResString(IDS_ERR_NOSTATBKUP));
d170 1
a170 1
					g_eMuleApp.m_pdlgEmule->AddLogLine(false, GetResString(IDS_STATS_NFOLOADEDBKUP));
d192 1
a192 1
				g_eMuleApp.m_pGlobPrefs->SetExpandedTreeItems(GetExpandedMask());
d319 1
a319 1
		strBuffer.Format("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>" CLIENT_NAME_WITH_VER " %s [%s]</b>\r\n<br><br>\r\n", GetResString(IDS_STATISTICS), g_eMuleApp.m_pGlobPrefs->GetUserNick());
d322 1
a322 1
		if (!onlyVisible) g_eMuleApp.m_pdlgEmule->m_dlgStatistics.ShowStatistics(true);
d359 1
a359 1
					g_eMuleApp.CopyTextToClipboard(theHTML);
d369 1
a369 1
				g_eMuleApp.CopyTextToClipboard(theHTML);
d377 1
a377 1
				g_eMuleApp.CopyTextToClipboard(theHTML);
d394 1
a394 1
		strBuffer.Format(CLIENT_NAME_WITH_VER " Statistics [%s]\r\n\r\n", g_eMuleApp.m_pGlobPrefs->GetUserNick());
d428 1
a428 1
					g_eMuleApp.CopyTextToClipboard(theText);
d438 1
a438 1
				g_eMuleApp.CopyTextToClipboard(theText);
d446 1
a446 1
				g_eMuleApp.CopyTextToClipboard(theText);
d590 2
a591 2
			GetResString(IDS_STATISTICS), g_eMuleApp.m_pGlobPrefs->GetUserNick(),
			GetResString(IDS_STATISTICS), GetResString(IDS_CD_UNAME), g_eMuleApp.m_pGlobPrefs->GetUserNick(),
d606 1
a606 1
		CString		strSrc = g_eMuleApp.m_pGlobPrefs->GetAppDir();
@


1.22
log
@Static variable instead of global; Some formatting.
@
text
@d319 1
a319 1
		strBuffer.Format("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>" CLIENT_NAME_WITH_VER " %s [%s]</b>\r\n<br><br>\r\n", GetResString(IDS_SF_STATISTICS), g_eMuleApp.m_pGlobPrefs->GetUserNick());
d590 2
a591 2
			GetResString(IDS_SF_STATISTICS), g_eMuleApp.m_pGlobPrefs->GetUserNick(),
			GetResString(IDS_SF_STATISTICS), GetResString(IDS_CD_UNAME), g_eMuleApp.m_pGlobPrefs->GetUserNick(),
@


1.21
log
@More file sharing corrections to allow read-only access for other applications (official).
@
text
@a34 2
int j=0;

d463 1
d470 1
a470 4
	strBuffer.Empty();

	if (firstItem) hCurrent = GetRootItem();
	else hCurrent = theItem;
d522 2
a523 1
		if (theItemLevel==0) strBuffer .Append("\n");
@


1.20
log
@Unified definitions for client name.
@
text
@d597 1
a597 1
		htmlFile.Open(saveAsDlg.GetPathName(), CFile::modeCreate | CFile::modeWrite);
@


1.19
log
@Client name for extracted statistics tree is changed from "eMule" to "eMule Plus".
@
text
@d321 1
a321 1
		strBuffer.Format("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>eMule Plus v" CURRENT_VERSION_LONG " %s [%s]</b>\r\n<br><br>\r\n", GetResString(IDS_SF_STATISTICS), g_eMuleApp.m_pGlobPrefs->GetUserNick());
d396 1
a396 1
		strBuffer.Format("eMule Plus v" CURRENT_VERSION_LONG " Statistics [%s]\r\n\r\n", g_eMuleApp.m_pGlobPrefs->GetUserNick());
d558 1
a558 1
		strHTML.Format( "<html>\r\n<header>\r\n<title>eMule Plus v" CURRENT_VERSION_LONG " %s [%s]</title>\r\n"
d591 1
a591 1
			"<span id=\"pghdr\"><b>eMule Plus v" CURRENT_VERSION_LONG " %s</b></span><br><span id=\"pghdr2\">%s %s</span>\r\n<br><br>\r\n"
@


1.18
log
@replaced TrackPopupMenu over TrackPopupMenuEx
@
text
@d321 1
a321 1
		strBuffer.Format("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>eMule v" CURRENT_VERSION_LONG " %s [%s]</b>\r\n<br><br>\r\n", GetResString(IDS_SF_STATISTICS), g_eMuleApp.m_pGlobPrefs->GetUserNick());
d396 1
a396 1
		strBuffer.Format("eMule v" CURRENT_VERSION_LONG " Statistics [%s]\r\n\r\n", g_eMuleApp.m_pGlobPrefs->GetUserNick());
d558 1
a558 1
		strHTML.Format( "<html>\r\n<header>\r\n<title>eMule v" CURRENT_VERSION_LONG " %s [%s]</title>\r\n"
d591 1
a591 1
			"<span id=\"pghdr\"><b>eMule v" CURRENT_VERSION_LONG " %s</b></span><br><span id=\"pghdr2\">%s %s</span>\r\n<br><br>\r\n"
@


1.17
log
@Improved string processing
@
text
@d142 1
a142 1
	mnuContext.TrackPopupMenu(nFlags, doWhere.x, doWhere.y, this);
@


1.16
log
@Improved context menu creation
@
text
@d320 2
a321 2
	strBuffer.Empty();
	if (firstItem) strBuffer.Format("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>eMule v%s %s [%s]</b>\r\n<br><br>\r\n", CURRENT_VERSION_LONG, GetResString(IDS_SF_STATISTICS), g_eMuleApp.m_pGlobPrefs->GetUserNick());
d395 2
a396 2
	strBuffer.Empty();
	if (firstItem) strBuffer.Format("eMule v%s Statistics [%s]\r\n\r\n", CURRENT_VERSION_LONG, g_eMuleApp.m_pGlobPrefs->GetUserNick());
d407 4
a410 2
		for (int i = 0; i < theItemLevel; i++) strBuffer += "   ";
		strBuffer += GetItemText(hCurrent) + "\r\n";
a548 1
	CString htmlFileName, theHTML, theHTML2;
d556 43
a598 39
		theHTML.Format("<html>\r\n<header>\r\n<title>eMule v%s %s [%s]</title>\r\n", CURRENT_VERSION_LONG, GetResString(IDS_SF_STATISTICS), g_eMuleApp.m_pGlobPrefs->GetUserNick());
		theHTML += "<style type=\"text/css\">\r\n";
		theHTML += "#pghdr { color: #000F80; font: bold 12pt/14pt Verdana, Courier New, Helvetica; }\r\n";
		theHTML += "#pghdr2 { color: #000F80; font: bold 10pt/12pt Verdana, Courier New, Helvetica; }\r\n";
		theHTML += "img { border: 0px; }\r\n";
		theHTML += "a { text-decoration: none; }\r\n";
		theHTML += "#sec { color: #000000; font: bold 9pt/11pt Verdana, Courier New, Helvetica; }\r\n";
		theHTML += "#item { color: #000000; font: normal 8pt/10pt Verdana, Courier New, Helvetica; }\r\n";
		theHTML += "#bdy { color: #000000; font: normal 8pt/10pt Verdana, Courier New, Helvetica; background-color: #FFFFFF; }\r\n</style>\r\n</header>\r\n";
		theHTML += "<script language=\"JavaScript1.2\" type=\"text/javascript\">\r\n";
		theHTML += "function obj(menu)\r\n";
		theHTML += "{\r\n";
 		theHTML += "return (navigator.appName == \"Microsoft Internet Explorer\")?this[menu]:document.getElementById(menu);\r\n";
		theHTML += "}\r\n";
		theHTML += "function togglevisible(treepart)\r\n";
		theHTML += "{\r\n";
		theHTML += "if (this.obj(\"T\"+treepart).style.visibility == \"hidden\")\r\n";
		theHTML += "{\r\n";
		theHTML += "this.obj(\"T\"+treepart).style.position=\"\";\r\n";
		theHTML += "this.obj(\"T\"+treepart).style.visibility=\"\";\r\n";
		theHTML += "document[\"I\"+treepart].src=\"stats_visible.gif\";\r\n";
		theHTML += "}\r\n";
		theHTML += "else\r\n";
		theHTML += "{\r\n";
		theHTML += "this.obj(\"T\"+treepart).style.position=\"absolute\";\r\n";
		theHTML += "this.obj(\"T\"+treepart).style.visibility=\"hidden\";\r\n";
		theHTML += "document[\"I\"+treepart].src=\"stats_hidden.gif\";\r\n";
		theHTML += "}\r\n";
		theHTML += "}\r\n";
		theHTML += "</script>\r\n";
		theHTML += "<body id=\"bdy\">\r\n";
		theHTML2.Format("<span id=\"pghdr\"><b>eMule v%s %s</b></span><br><span id=\"pghdr2\">%s %s</span>\r\n<br><br>\r\n", CURRENT_VERSION_LONG, GetResString(IDS_SF_STATISTICS), GetResString(IDS_CD_UNAME), g_eMuleApp.m_pGlobPrefs->GetUserNick());
		theHTML += theHTML2;
		theHTML += GetHTMLForExport(onlyvisible) + "</body></html>";

		htmlFileName = saveAsDlg.GetPathName();
		htmlFile.Open(htmlFileName, CFile::modeCreate | CFile::modeWrite);
		htmlFile.Write(theHTML.GetString(), strlen(theHTML.GetString()));
		htmlFile.Flush(); // EC - Just to be sure
d600 14
a613 24
		CString source = g_eMuleApp.m_pGlobPrefs->GetAppDir();
		CString temp = saveAsDlg.GetPathName().Left(saveAsDlg.GetPathName().GetLength() - saveAsDlg.GetFileName().GetLength());// EC - what if directory name == filename? this should fix this
		CString destination = temp;

		CopyFile(source + "\\WebServer\\stats_0.gif", destination + "stats_0.gif", false);
		CopyFile(source + "\\WebServer\\stats_1.gif", destination + "stats_1.gif", false);
		CopyFile(source + "\\WebServer\\stats_2.gif", destination + "stats_2.gif", false);
		CopyFile(source + "\\WebServer\\stats_3.gif", destination + "stats_3.gif", false);
		CopyFile(source + "\\WebServer\\stats_4.gif", destination + "stats_4.gif", false);
		CopyFile(source + "\\WebServer\\stats_5.gif", destination + "stats_5.gif", false);
		CopyFile(source + "\\WebServer\\stats_6.gif", destination + "stats_6.gif", false);
		CopyFile(source + "\\WebServer\\stats_7.gif", destination + "stats_7.gif", false);
		CopyFile(source + "\\WebServer\\stats_8.gif", destination + "stats_8.gif", false);
		CopyFile(source + "\\WebServer\\stats_9.gif", destination + "stats_9.gif", false);
		CopyFile(source + "\\WebServer\\stats_10.gif", destination + "stats_10.gif", false);
		CopyFile(source + "\\WebServer\\stats_11.gif", destination + "stats_11.gif", false);
		CopyFile(source + "\\WebServer\\stats_12.gif", destination + "stats_12.gif", false);
		CopyFile(source + "\\WebServer\\stats_13.gif", destination + "stats_13.gif", false);
		CopyFile(source + "\\WebServer\\stats_14.gif", destination + "stats_14.gif", false);
		CopyFile(source + "\\WebServer\\stats_15.gif", destination + "stats_15.gif", false);
		CopyFile(source + "\\WebServer\\stats_16.gif", destination + "stats_16.gif", false);
		CopyFile(source + "\\WebServer\\stats_hidden.gif", destination + "stats_hidden.gif", false);
		CopyFile(source + "\\WebServer\\stats_space.gif", destination + "stats_space.gif", false);
		CopyFile(source + "\\WebServer\\stats_visible.gif", destination + "stats_visible.gif", false);
@


1.15
log
@Formatting, name changes and deleting spaces and tabs at end of lines
@
text
@a51 2
	if (mnuHTML) VERIFY( mnuHTML.DestroyMenu() );
	if (mnuContext) VERIFY( mnuContext.DestroyMenu() );
d112 1
a112 1
	int			myFlags;
d115 2
a116 4
	if (!findBackUp.FindFile(myBuffer))
		myFlags = MF_GRAYED;
	else
		myFlags = MF_STRING;
d122 1
a122 1
	mnuContext.AppendMenu(myFlags, MP_STATTREE_RESTORE, GetResString(IDS_STATS_BNRESTORE));
d144 2
a145 1
	VERIFY( mnuHTML.DestroyMenu() );
@


1.14
log
@final fixes for ed2k source links
@
text
@d8 1
a8 1
	
d13 1
a13 1
	
d267 1
a267 1
	TCHAR szText[1024]; 
d276 1
a276 1
	return "";   
d300 1
a300 1
	
d322 1
a322 1
	
d397 1
a397 1
	
d515 2
a516 2
		if (GetItemImage(hCurrent, nImage, nSelectedImage)) 
			strImage.Format(_T("%u"),nImage); 
d518 1
a518 1
			strImage.Format(_T("%u"),0); 
d523 1
a523 1
			strItem += CString("<b>") + GetItemText(hCurrent) + CString("</b>"); 
d529 1
a529 1
		
d531 1
a531 1
		{	
d556 1
a556 1
	if (saveAsDlg.DoModal() == IDOK) 
d729 1
a729 1
			theStringIndex = ApplyExpandedMask(theMask, GetChildItem(hCurrent), theStringIndex);			
@


1.13
log
@Statistics export fixes
@
text
@d742 1
a742 6

if (ItemHasChildren(parentItem))
{
	HTREEITEM hNextItem;
	HTREEITEM hChildItem = GetChildItem(parentItem);
	while (hChildItem != NULL)
d744 8
a751 3
		hNextItem = GetNextItem(hChildItem, TVGN_NEXT);
		DeleteItem(hChildItem);
		hChildItem = hNextItem;
a752 2
}

@


1.12
log
@a few changes in exporting statistics
@
text
@d547 2
d550 4
a553 1
	CString htmlFileName, theHTML;
d556 2
a557 1
	if (saveAsDlg.DoModal() == IDOK) {
d589 2
a590 1
		theHTML.Format("%s<span id=\"pghdr\"><b>eMule v%s %s</b></span><br><span id=\"pghdr2\">%s %s</span>\r\n<br><br>\r\n", theHTML, CURRENT_VERSION_LONG, GetResString(IDS_SF_STATISTICS), GetResString(IDS_CD_UNAME), g_eMuleApp.m_pGlobPrefs->GetUserNick());
d623 4
@


1.11
log
@changed back wrongly renamed filename of ipfilter.dat and folder of webserver icons
@
text
@d589 1
a590 1

d592 1
a592 2
		CString temp = saveAsDlg.GetPathName();
		temp.Replace(saveAsDlg.GetFileName(), "");
@


1.10
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d596 20
a615 20
		CopyFile(source + "\\m_pWebServer\\stats_0.gif", destination + "stats_0.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_1.gif", destination + "stats_1.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_2.gif", destination + "stats_2.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_3.gif", destination + "stats_3.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_4.gif", destination + "stats_4.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_5.gif", destination + "stats_5.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_6.gif", destination + "stats_6.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_7.gif", destination + "stats_7.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_8.gif", destination + "stats_8.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_9.gif", destination + "stats_9.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_10.gif", destination + "stats_10.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_11.gif", destination + "stats_11.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_12.gif", destination + "stats_12.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_13.gif", destination + "stats_13.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_14.gif", destination + "stats_14.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_15.gif", destination + "stats_15.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_16.gif", destination + "stats_16.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_hidden.gif", destination + "stats_hidden.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_space.gif", destination + "stats_space.gif", false);
		CopyFile(source + "\\m_pWebServer\\stats_visible.gif", destination + "stats_visible.gif", false);
@


1.9
log
@Update
@
text
@d32 1
a32 1
#include "uploadqueue.h"
d78 1
a78 1
	theApp.emuledlg->statisticswnd.ShowStatistics();
d92 1
a92 1
		theApp.glob_prefs->SetExpandedTreeItems(GetExpandedMask());
d116 1
a116 1
	myBuffer.Format("%sstatbkup.ini",theApp.glob_prefs->GetConfigDir());
d161 3
a163 3
				theApp.glob_prefs->ResetStatistics();
				theApp.emuledlg->AddLogLine(false, GetResString(IDS_STATS_NFORESET));
				theApp.emuledlg->statisticswnd.ShowStatistics();
d172 2
a173 2
				if(!theApp.glob_prefs->LoadStats(1))
					theApp.emuledlg->AddLogLine(true, GetResString(IDS_ERR_NOSTATBKUP));
d175 1
a175 1
					theApp.emuledlg->AddLogLine(false, GetResString(IDS_STATS_NFOLOADEDBKUP));
d197 1
a197 1
				theApp.glob_prefs->SetExpandedTreeItems(GetExpandedMask());
d324 1
a324 1
	if (firstItem) strBuffer.Format("<font face=\"Verdana,Courier New,Helvetica\" size=\"2\">\r\n<b>eMule v%s %s [%s]</b>\r\n<br><br>\r\n", CURRENT_VERSION_LONG, GetResString(IDS_SF_STATISTICS), theApp.glob_prefs->GetUserNick());
d327 1
a327 1
		if (!onlyVisible) theApp.emuledlg->statisticswnd.ShowStatistics(true);
d364 1
a364 1
					theApp.CopyTextToClipboard(theHTML);
d374 1
a374 1
				theApp.CopyTextToClipboard(theHTML);
d382 1
a382 1
				theApp.CopyTextToClipboard(theHTML);
d399 1
a399 1
	if (firstItem) strBuffer.Format("eMule v%s Statistics [%s]\r\n\r\n", CURRENT_VERSION_LONG, theApp.glob_prefs->GetUserNick());
d431 1
a431 1
					theApp.CopyTextToClipboard(theText);
d441 1
a441 1
				theApp.CopyTextToClipboard(theText);
d449 1
a449 1
				theApp.CopyTextToClipboard(theText);
d552 1
a552 1
		theHTML.Format("<html>\r\n<header>\r\n<title>eMule v%s %s [%s]</title>\r\n", CURRENT_VERSION_LONG, GetResString(IDS_SF_STATISTICS), theApp.glob_prefs->GetUserNick());
d583 1
a583 1
		theHTML.Format("%s<span id=\"pghdr\"><b>eMule v%s %s</b></span><br><span id=\"pghdr2\">%s %s</span>\r\n<br><br>\r\n", theHTML, CURRENT_VERSION_LONG, GetResString(IDS_SF_STATISTICS), GetResString(IDS_CD_UNAME), theApp.glob_prefs->GetUserNick());
d591 1
a591 1
		CString source = theApp.glob_prefs->GetAppDir();
d596 20
a615 20
		CopyFile(source + "\\webserver\\stats_0.gif", destination + "stats_0.gif", false);
		CopyFile(source + "\\webserver\\stats_1.gif", destination + "stats_1.gif", false);
		CopyFile(source + "\\webserver\\stats_2.gif", destination + "stats_2.gif", false);
		CopyFile(source + "\\webserver\\stats_3.gif", destination + "stats_3.gif", false);
		CopyFile(source + "\\webserver\\stats_4.gif", destination + "stats_4.gif", false);
		CopyFile(source + "\\webserver\\stats_5.gif", destination + "stats_5.gif", false);
		CopyFile(source + "\\webserver\\stats_6.gif", destination + "stats_6.gif", false);
		CopyFile(source + "\\webserver\\stats_7.gif", destination + "stats_7.gif", false);
		CopyFile(source + "\\webserver\\stats_8.gif", destination + "stats_8.gif", false);
		CopyFile(source + "\\webserver\\stats_9.gif", destination + "stats_9.gif", false);
		CopyFile(source + "\\webserver\\stats_10.gif", destination + "stats_10.gif", false);
		CopyFile(source + "\\webserver\\stats_11.gif", destination + "stats_11.gif", false);
		CopyFile(source + "\\webserver\\stats_12.gif", destination + "stats_12.gif", false);
		CopyFile(source + "\\webserver\\stats_13.gif", destination + "stats_13.gif", false);
		CopyFile(source + "\\webserver\\stats_14.gif", destination + "stats_14.gif", false);
		CopyFile(source + "\\webserver\\stats_15.gif", destination + "stats_15.gif", false);
		CopyFile(source + "\\webserver\\stats_16.gif", destination + "stats_16.gif", false);
		CopyFile(source + "\\webserver\\stats_hidden.gif", destination + "stats_hidden.gif", false);
		CopyFile(source + "\\webserver\\stats_space.gif", destination + "stats_space.gif", false);
		CopyFile(source + "\\webserver\\stats_visible.gif", destination + "stats_visible.gif", false);
@


1.8
log
@Fixed HTMLExport, update SharedList when name is changed, minor fix (not propper) to FileTypeIcon disable in search.
@
text
@d553 3
a555 1
		theHTML += "<style type=\"text/css\">\r\n#pghdr { color: #000F80; font: bold 12pt/14pt Verdana, Courier New, Helvetica; }\r\n";
d558 3
a560 3
		theHTML += "#sec { color: #000000; font: bold 11pt/13pt Verdana, Courier New, Helvetica; }\r\n";
		theHTML += "#item { color: #000000; font: normal 10pt/12pt Verdana, Courier New, Helvetica; }\r\n";
		theHTML += "#bdy { color: #000000; font: normal 10pt/12pt Verdana, Courier New, Helvetica; background-color: #FFFFFF; }\r\n</style>\r\n</header>\r\n";
a581 2


d583 1
a583 1
		theHTML.Format("%s<span id=\"pghdr\">eMule v%s %s [%s]</span>\r\n<br><br>\r\n", theHTML, CURRENT_VERSION_LONG, GetResString(IDS_SF_STATISTICS), theApp.glob_prefs->GetUserNick());
@


1.7
log
@Fixed start paused files by category (when option set or by menu)
Removed Reset All Statistics (agreed with Eklmn that has no use and it brings problems)
Removed Mobile Mule profile
Localized 'All' tab when language changed
@
text
@d554 2
d559 23
d590 26
@


1.6
log
@Fix for statistics crash & cleaned resource.h file :-)
@
text
@a51 1
	if (mnuReset) VERIFY( mnuReset.DestroyMenu() );
d125 1
a125 5
	mnuReset.CreateMenu();
	mnuReset.AppendMenu(MF_STRING, MP_STATTREE_RESET_ALL, GetResString(IDS_ALL));
	mnuReset.AppendMenu(MF_STRING, MP_STATTREE_RESET, GetResString(IDS_STATS_CUMULATIVE));
	mnuContext.AppendMenu(MF_STRING | MF_POPUP, (UINT_PTR)mnuReset.m_hMenu, GetResString(IDS_STATS_BNRESET));

a147 1
	VERIFY( mnuReset.DestroyMenu() );
a155 11
		case MP_STATTREE_RESET_ALL:
			{
				if(AfxMessageBox(GetResString(IDS_STATS_MBRESET_TXT), MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
					break;

				theApp.glob_prefs->ResetStatistics(true);
				theApp.emuledlg->AddLogLine(false, GetResString(IDS_STATS_NFORESET));
				theApp.emuledlg->statisticswnd.ShowStatistics();

				break;
			}
@


1.5
log
@More updates.
@
text
@a170 3
				CString myBuffer; myBuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), theApp.glob_prefs->GetStatsLastResetStr());
				GetParent()->GetDlgItem(IDC_STATIC_LASTRESET)->SetWindowText(myBuffer);

a181 3
				CString myBuffer; myBuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), theApp.glob_prefs->GetStatsLastResetStr());
				GetParent()->GetDlgItem(IDC_STATIC_LASTRESET)->SetWindowText(myBuffer);

a192 2
					CString myBuffer; myBuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), theApp.glob_prefs->GetStatsLastResetStr());
					GetParent()->GetDlgItem(IDC_STATIC_LASTRESET)->SetWindowText(myBuffer);
@


1.4
log
@Fixed Scheduler preferences and Statistics restore.
@
text
@d52 1
d125 6
a130 1
	mnuContext.AppendMenu(MF_STRING, MP_STATTREE_RESET, GetResString(IDS_STATS_BNRESET));
d153 1
d162 14
d181 1
a181 1
				theApp.glob_prefs->ResetCumulativeStatistics();
d185 1
a185 1
				CString myBuffer; myBuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), theApp.glob_prefs->GetStatsLastResetStr(true));
d199 1
a199 1
					CString myBuffer; myBuffer.Format(GetResString(IDS_STATS_LASTRESETSTATIC), theApp.glob_prefs->GetStatsLastResetStr(true));
@


1.3
log
@khaos stats in webserver
@
text
@d116 5
a120 4
	//myBuffer.Format("%sstatbkup.ini",theApp.glob_prefs->GetConfigDir());
	myBuffer.Format("statbkup.ini");
	if (!findBackUp.FindFile(myBuffer)) myFlags = MF_GRAYED;
		else myFlags = MF_STRING;
@


1.2
log
@speed optimization of StatsTree (don't create tool tip for tree)
@
text
@d35 2
d469 2
a470 1
	CString		strBuffer, strItem;
d472 3
a474 1
	
d482 48
a529 3
		if (IsBold(hCurrent)) strItem = "<span id=\"sec\">" + GetItemText(hCurrent) + "</span>";
		else strItem = "<span id=\"item\">" + GetItemText(hCurrent) + "</span>";
		for (int i = 0; i < theItemLevel; i++) strBuffer += "&nbsp;&nbsp;&nbsp;";
d532 10
a541 2
		if (ItemHasChildren(hCurrent) && (!onlyVisible || IsExpanded(hCurrent)))
			strBuffer += (CString) GetHTMLForExport(onlyVisible, GetChildItem(hCurrent), theItemLevel+1, false);
@


1.1
log
@new stattistic (khaos based)
@
text
@d58 1
d622 17
@

