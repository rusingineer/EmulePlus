head	1.45;
access;
symbols
	PublicRelease_1_2e:1.45
	Interim_Release_1-2e_RC1:1.45
	PublicRelease_1_2d:1.44
	Interim_Release_1-2d_RC1:1.44
	Interim_Release_1-2d_beta1:1.44
	PublicRelease_1_2c:1.41
	Interim_Release_1-2c_RC1:1.41
	Interim_Release_1-2c_beta1:1.40
	PublicRelease_1_2b:1.40
	Interim_Release_1-2b_RC1:1.40
	PublicRelease_1_2a:1.39
	Interim_Release_1-2a_RC1:1.39
	Interim_Release_1-2a_beta2:1.37
	Interim_Release_1-2a_beta1:1.36
	PublicRelease_1_2:1.36
	Interim_Release_1-2_RC1:1.36
	Interim_Release_1-2_beta1:1.35
	PublicRelease_1_1g:1.35
	Interim_Release_1-1g_RC3:1.35
	Interim_Release_1-1g_RC2:1.35
	Interim_Release_1-1g_RC1:1.35
	Interim_Release_1-1g_beta2:1.35
	Interim_Release_1-1g_beta1:1.35
	PublicRelease_1_1f:1.34
	Interim_Release_1-1f_RC1:1.34
	PublicRelease_1_1e:1.34
	Interim_Release_1-1e_RC2:1.34
	Interim_Release_1-1e_RC1:1.34
	Interim_Release_1-1e_beta1:1.34
	PublicRelease_1_1d:1.32
	Interim_Release_1-1d_RC1:1.32
	PublicRelease_1_1c:1.32
	Interim_Release_1-1c_RC1:1.31
	Interim_Release_1-1c_beta2:1.31
	Interim_Release_1-1c_beta1:1.27
	PublicRelease_1_1b:1.27
	Interim_Release_1-1b_RC1:1.27
	PublicRelease_1_1a:1.27
	Interim_Release_1-1a_RC2:1.27
	Interim_Release_1-1a_RC1:1.27
	Interim_Release_1-1a_beta2:1.27
	Interim_Release_1-1a_beta1:1.27
	PublicRelease_1_1:1.27
	Interim_Release_1-1_beta1:1.27
	PublicRelease_1o:1.27
	Interim_Release_1o_RC1:1.27
	Interim_Release_1o_beta1:1.27
	PublicRelease_1n:1.27
	Interim_Release_1n_RC2:1.27
	Interim_Release_1n_RC1:1.27
	Interim_Release_1n_beta2:1.27
	Interim_Release_1n_beta1:1.27
	PublicRelease_1m:1.27
	Interim_Release_1m_beta1:1.27
	PublicRelease_1l:1.27
	Interim_Release_1l_RC3:1.27
	Interim_Release_1l_RC2:1.26
	Interim_Release_1l_RC1:1.26
	Interim_Release_1l_beta2:1.26
	Interim_Release_1l_beta1:1.26
	PublicRelease_1k:1.25
	Interim_Release_1k_RC4:1.25
	Interim_1k_RC3:1.25
	Interim_1k_RC2:1.25
	Interim_Release_1k_RC1:1.25
	Interim_Release_1k_beta5:1.24
	Intrerim_Release_1k_beta4:1.24
	Interim_Release_1k_beta1:1.24
	PublicRelease_1j:1.24
	Interim_Release_1J_RC3:1.24
	Interim_Release_1j_RC3:1.24
	Interim_Release_1j_RC2:1.24
	Interim_Release_1j_RC1:1.24
	Interim_Release_1j_beta2:1.24
	Interim_Release_1j_beta1:1.24
	PublicRelease_1i:1.24
	Interim_Release_1i_RC6:1.24
	Interim_Release_1i_RC3:1.24
	Interim_Release_1i_RC2:1.23
	Interim_Release_1i_RC1:1.23
	Interim_Release_1i_beta3:1.23
	Interim_Release_1i_beta2:1.23
	Interim_Release_1i_beta1:1.20
	PublicRelease_1h:1.15
	Interim_Release_1h_rc2:1.15
	Interim_Release_1h_RC1:1.15
	Interim_Release_1h_beta2:1.15
	Interim_Release_1h_beta1_now:1.14
	Interim_Release_1h_beta1:1.14
	PublicRelease_1g:1.13
	Interim_Release_1g_RC6_Final:1.13
	Interim_Release_1g_RC6:1.13
	Interim_Release_1g_RC5:1.13
	Interim_Release_1g_RC4:1.13
	Interim_Release_1g_RC3:1.13
	Interim_Release_1g_beta2:1.11
	Interim_Release_1g_beta1:1.10
	Interim_Release_1f_RC4:1.7
	Interim_Release_1f_RC3:1.7
	Interim_Release_1f_RC2:1.7
	Interim_Release_1f_RC:1.7
	Interim_Release_1f_beta2:1.7
	Interim_Release_1f_beta1:1.7
	PublicRelease_1e:1.7
	Interim_Release_1e_RC2:1.7
	Interim_Release_1e_RC:1.7
	Interim_Release_1e_beta3:1.7
	Interim_Release_1e_beta2:1.7
	Interim_Release_1e_beta2_before_kuchin:1.7
	Interim_Release_1e_beta1:1.7
	PublicRelease_1c:1.6
	featurestest:1.6.0.2
	Interim_Release_1c_RC:1.6
	Interim_Release_1c_beta2:1.6
	Interim_Release_1c_beta1:1.5
	threaded_downloadqueue:1.5.0.2
	PublicRelease_1b:1.3
	Interim_Release_1b_beta2:1.3
	Interim_Release_1b_beta1:1.3
	proxydeadlake:1.2.0.10
	PublicRelease_1a:1.2
	Interim_Release_1a_beta2:1.2
	BerkeleyDb:1.2.0.8
	Interim_Release_1a_beta1:1.2
	PublicRelease_1:1.2
	goldfish:1.2
	eMulePlus_1_RC2:1.2
	eMulePlus_26b_1RC1:1.2
	PreRelease_26b_i0e:1.2
	before_26d_merge:1.2
	Interim_Release_26b_i0d:1.2
	Interim_Release_26b_i0c:1.2
	Interim_Release_26b_i0b:1.2
	Interim_Release_26b_i0a:1.2
	systraydlg:1.2.0.6
	plus26based:1.2.0.4
	Interim_Release_25b_i0b:1.2
	Proxy_Dev:1.2
	Interim_Release_25b_i0a:1.2.2.1
	proxytest:1.2.2.1.0.2
	official_sockets:1.2.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.45
date	2008.11.03.05.45.23;	author aw3;	state Exp;
branches;
next	1.44;

1.44
date	2008.01.31.22.50.31;	author eklmn;	state Exp;
branches;
next	1.43;

1.43
date	2007.10.31.18.18.57;	author fuxie-dk;	state Exp;
branches;
next	1.42;

1.42
date	2007.09.27.14.28.55;	author fuxie-dk;	state Exp;
branches;
next	1.41;

1.41
date	2007.07.25.02.40.24;	author aw3;	state Exp;
branches;
next	1.40;

1.40
date	2006.10.22.12.08.23;	author kush_eplus;	state Exp;
branches;
next	1.39;

1.39
date	2006.07.29.02.00.41;	author aw3;	state Exp;
branches;
next	1.38;

1.38
date	2006.06.22.03.05.48;	author aw3;	state Exp;
branches;
next	1.37;

1.37
date	2006.05.22.03.45.00;	author aw3;	state Exp;
branches;
next	1.36;

1.36
date	2006.02.19.22.16.16;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2005.08.04.03.22.40;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2005.06.06.04.39.54;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2005.05.23.20.54.34;	author aw3;	state Exp;
branches;
next	1.32;

1.32
date	2005.02.25.04.39.37;	author aw3;	state Exp;
branches;
next	1.31;

1.31
date	2005.02.16.05.10.11;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2005.02.13.22.56.27;	author aw3;	state Exp;
branches;
next	1.29;

1.29
date	2005.02.05.13.57.12;	author kuchin;	state Exp;
branches;
next	1.28;

1.28
date	2005.02.04.09.38.19;	author kuchin;	state Exp;
branches;
next	1.27;

1.27
date	2004.06.04.15.54.23;	author dongato;	state Exp;
branches;
next	1.26;

1.26
date	2004.04.15.17.07.57;	author aw3;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.25.09.17.18;	author eklmn;	state Exp;
branches;
next	1.24;

1.24
date	2003.11.19.09.23.29;	author kuchin;	state Exp;
branches;
next	1.23;

1.23
date	2003.10.24.01.21.20;	author morevit;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.08.15.39.48;	author morevit;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.08.12.59.40;	author morevit;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.29.14.55.46;	author morevit;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.29.13.12.40;	author dongato;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.29.10.57.22;	author dongato;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.22.16.40.22;	author morevit;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.19.14.42.46;	author morevit;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.24.20.28.04;	author zegzav;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.10.04.42.50;	author eklmn;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.22.12.12.28;	author partyckip;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.21.18.37.58;	author partyckip;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.06.20.37.18;	author partyckip;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.30.21.26.59;	author partyckip;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.29.04.45.19;	author partyckip;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.26.21.24.49;	author partyckip;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.27.09.39.44;	author recdvst;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.17.20.16.32;	author lord_kiron;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2003.03.14.15.59.54;	author partyckip;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.11.09.53.21;	author lord_kiron;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.03.22.09.51;	author moosetea;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.22.15.05.39;	author cax2;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2003.01.21.18.21.23;	author cax2;	state Exp;
branches;
next	;

1.2.2.1
date	2003.01.28.16.54.26;	author cax2;	state Exp;
branches;
next	;

1.6.2.1
date	2003.03.24.09.39.44;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.45
log
@Reduced H-file dependency.
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#include "mapkey.h"
#ifndef NEW_SOCKETS_ENGINE
	#include "LanCast.h"
#endif //NEW_SOCKETS_ENGINE
#include "Loggable.h"

struct UnknownFile_Struct
{
	CString		m_strFileName;
	CString		m_strDirectory;
};

class CServer;
class CPartFile;
class CKnownFile;
class CPreferences;
class CServerConnect;
class CKnownFileList;
class CSharedFilesCtrl;

class CSharedFileList : public CLoggable
{
	friend class CSharedFilesCtrl;
	friend class CClientReqSocket;
	friend class CWebServer;

public:
	CMutex				m_mutexList;
	CKnownFileList	   *m_pKnownFileList;

protected:
	CMutex				m_HashMapMutex;

private:
	CPreferences	   *m_pPrefs;
#ifndef NEW_SOCKETS_ENGINE
	CServerConnect	   *m_pServerConnect;
	CSharedFilesCtrl   *m_pOutput;
	CLanCast		   m_LanCast;
#endif //NEW_SOCKETS_ENGINE
	CMapStringToString	m_SharedVDirForList;
	CTypedPtrList<CPtrList, UnknownFile_Struct*>	m_waitingForHashList;
	UnknownFile_Struct	*m_pCurrentlyHashing;
	uint32				m_dwLastPublishED2KTime;
	bool				m_bLastPublishED2KFlag;

public:
#ifndef NEW_SOCKETS_ENGINE
					CSharedFileList(CPreferences *in_prefs, CServerConnect *in_server, CKnownFileList *in_filelist);
#else
					CSharedFileList(CPreferences* in_prefs, CKnownFileList* in_filelist);
#endif //NEW_SOCKETS_ENGINE
				   ~CSharedFileList();
	void			SendListToServer();
	void			Reload();
	void			SafeAddKnownFile(CKnownFile* toadd, bool bOnlyAdd = false, bool bDelay = false);
	void			RepublishFile(CKnownFile *pFile, int iMode);
	void			SetOutputCtrl(CSharedFilesCtrl* in_ctrl);
	void			RemoveFile(CKnownFile* toremove);
	CKnownFile*		GetFileByID(const uchar* filehash);
	void			WriteToOfferedFilePacket(CKnownFile *pKFile, CMemFile &files, CServer *pServer, CUpDownClient *pClient = NULL);
	uint64			GetDatasize(uint64 *pqwLargest);
	uint16			GetCount()	{ return static_cast<uint16>(m_mapSharedFiles.GetCount()); }
	void			UpdateItem(CKnownFile *pKnownFile, bool bResort = true);
	void			NextLANBroadcast();
	void			FindSharedFiles();
	void			ClearED2KPublishInfo();
	void			Process();
	uint32			GetWaitingForHashCount()			{ return m_waitingForHashList.GetCount(); }
	void			FileHashingFailed(UnknownFile_Struct *pHashed);
	void			FileHashingFinished(CKnownFile *pKnownfile);

	CMapStringToString&		GetSharedVDirForList()		{ return m_SharedVDirForList; }

private:
	void			AddFilesFromDirectory(const CString& strDirectory);
	bool			AddFile(CKnownFile *pKnownFile, const TCHAR *pcFullName);
	void			HashNextFile();
	bool			IsHashing(const CString &strDirectory, const CString &strFileName);
	void			RemoveFromHashing(CKnownFile *pHashed);

//	virtual dir for Hybrid client to client shared files listing
	void			BuildSharedVDirForList(CStringList *sharedDirList);
	bool			AddSharedVDirForList(bool bIncomplete, const CString &strDir);

#ifdef NEW_SOCKETS
public:
#endif //NEW_SOCKETS
	typedef CMap<CCKey, const CCKey&, CKnownFile*, CKnownFile*>	CSharedFilesMap;
	CSharedFilesMap	m_mapSharedFiles;
	CCKey	m_LancastKey;
};

class CHashFileThread : public CWinThread
{
	DECLARE_DYNCREATE(CHashFileThread)

private:
	CString				m_strDirectory;
	CString				m_strFileName;
	CPartFile		   *m_pPartFile;
	bool				m_bChangeState;

public:
	virtual	BOOL		InitInstance();
	virtual int			Run();
	void				SetValues(bool bChgState, LPCTSTR strDirectory, LPCTSTR strFileName, CPartFile *pPartFile);

protected:
						CHashFileThread();
};
@


1.44
log
@changed the intialization of thread locale
@
text
@d31 1
@


1.43
log
@Suppressed compiler warnings [Aw3].
@
text
@d122 1
a122 1
	virtual	BOOL		InitInstance() { return true; }
@


1.42
log
@Fixed messed waiting for hash and hashing file statuses in GUI and WebServer {Fuxie - DK} [Aw3];
Reduced #include dependency.
@
text
@d80 1
a80 1
	uint16			GetCount()	{return m_mapSharedFiles.GetCount(); }
@


1.41
log
@Preparations to compile with level 4 of warnings.
@
text
@d17 1
a18 14
#pragma once
#include "opcodes.h"
#ifndef NEW_SOCKETS_ENGINE
	#include "emule.h"
#endif //NEW_SOCKETS_ENGINE
#include "types.h"
#include "Preferences.h"
#include "KnownFile.h"
#include "knownFileList.h"
#ifndef NEW_SOCKETS_ENGINE
	#include "SharedFilesCtrl.h"
	#include "sockets.h"
#endif //NEW_SOCKETS_ENGINE
#include "PartFile.h"
d31 4
d36 1
a115 1
	CSharedFileList	   *m_pOwner;
d119 1
d124 1
a124 2
	void				SetValues( CSharedFileList *pOwner, LPCTSTR strDirectory, LPCTSTR strFileName,
								   CPartFile* in_pPartFile = NULL );
@


1.40
log
@fix exception on shared file list reload with LanCast enabled {NonChance}
@
text
@d114 1
a114 1
	typedef CMap<CCKey, CCKey&, CKnownFile*, CKnownFile*>	CSharedFilesMap;
@


1.39
log
@Changed prototype.
@
text
@d114 3
a116 1
	CMap<CCKey,CCKey&,CKnownFile*,CKnownFile*>		m_mapSharedFiles;
@


1.38
log
@Fixed log information about duplicate shared files {Vladimir (SV)}.
@
text
@d86 1
a86 1
	void			WriteToOfferedFilePacket(CKnownFile &cur_file, CMemFile &files, CServer *pServer, CUpDownClient *pClient = NULL);
@


1.37
log
@Large file size support preparations.
@
text
@d74 1
a74 1
					CSharedFileList(CPreferences* in_prefs,CServerConnect* in_server, CKnownFileList* in_filelist);
d89 1
a89 1
	void			UpdateItem(CKnownFile* pKnownFile,bool bResort=true);
d102 1
a102 1
	bool			AddFile(CKnownFile *pKnownFile);
@


1.36
log
@Avoided rare double publishing of a just completed file {muleteer}
(file publishing is sligtly delayed on reception of the first file chunk).
@
text
@d87 1
a87 1
	uint64			GetDatasize(uint32 *pdwLargest);
@


1.35
log
@Static LanCast object instead of dynamic;
Removed double #include of afxmt.h (once in stdafx.h is enough).
@
text
@d81 2
a82 2
	void			SafeAddKnownFile(CKnownFile* toadd, bool bOnlyAdd = false);
	void			RepublishFile(CKnownFile *pFile);
@


1.34
log
@Improved files publishing algorithm on the server; Removed unused code.
@
text
@d34 1
a34 1
	#include "LanCast.h"	// LANCAST (moosetea) - header include
a35 1
#include "afxmt.h"
d64 1
a64 1
	CLanCast		   *m_pLanCast;		// LANCAST
@


1.33
log
@Better interface to access private variables;
Some preparations for new publishing algorithm.
@
text
@d69 1
a71 1
	bool				m_bDelayReload;
d81 1
a81 1
	void			Reload(bool sendtoserver = true);
d83 1
d86 1
a86 2
	CKnownFile	   *GetFileByID(const uchar* filehash);
	short			GetFilePriorityByID(uchar* filehash);
a91 1
	bool			FindUnknownFile(CString strDirectory, CString strFileName);
d93 1
d96 2
d103 1
d105 2
@


1.32
log
@Removed unused code called "offered files to server".
@
text
@d26 1
a26 1
#include "knownfilelist.h"
d34 1
a34 1
	#include "lancast.h"	// LANCAST (moosetea) - header include
d67 4
a71 1
	CMapStringToString	m_SharedVDirForList;
d94 2
d97 1
a97 1
	CMapStringToString	   &GetSharedVDirForList()		{ return m_SharedVDirForList; }		// #zegzav:vdir4list
a110 2
	CTypedPtrList<CPtrList, UnknownFile_Struct*>	m_waitingForHashList;

@


1.31
log
@Support new ed2k tag format (client<->server,
as well as used for shared list transfers to eMule v0.43a+ and eMule Plus v1.1a+).
@
text
@a96 2
//	UI calls
	void			UpdateOfferedItems();
@


1.30
log
@Type of statistics values Max. Shared File Size and Max. Shared Average File Size
was changed from 64-bit into 32-bit to speed up processing as max. supported ed2k file size fits 32-bit.
@
text
@d84 1
a84 1
	void			WriteToOfferedFilePacket(CKnownFile& cur_file, CMemFile& files, CServer* pServer);
@


1.29
log
@Connecting preferences and known/shared files
@
text
@a17 1

d24 1
a24 1
#include "preferences.h"
d65 1
a65 1
	CLanCast		   *m_pLanCast;		// LANCAST (moosetea)
d85 1
a85 1
	uint64			GetDatasize(uint64 &qwLargest);
@


1.28
log
@More ifdefs for v2
@
text
@d25 1
a25 3
#ifndef NEW_SOCKETS_ENGINE
	#include "preferences.h"
#endif //NEW_SOCKETS_ENGINE
d62 1
a63 1
	CPreferences	   *m_pPrefs;
d75 1
a75 1
					CSharedFileList(CKnownFileList* in_filelist);
@


1.27
log
@Moved FinSharedFiles to a timer to fix issues with hashing hung on start
Fixed Search buttons activation issues and More not working
@
text
@d21 3
a23 1
#include "emule.h"
d25 3
a27 1
#include "preferences.h"
d30 5
a34 3
#include "SharedFilesCtrl.h"
#include "sockets.h"
#include "partfile.h"
d36 3
a38 1
#include "lancast.h"	// LANCAST (moosetea) - header include
d64 1
d69 1
d74 1
d76 3
@


1.26
log
@Fixed shared directory list corruption caused by asynchronous access (bug #502);
Fixed shared directory list processing to eliminate double list entries (that can be caused by case sensitive compares, by the bug on file completion after file destination change, or by initial shareddir.dat values).
@
text
@d79 1
a83 1
	void			FindSharedFiles();
@


1.25
log
@feature: show number of complete files by search (untested)
@
text
@d90 1
a90 1
	void			BuildSharedVDirForList();
@


1.24
log
@New sockets
@
text
@d73 1
a73 1
	void			WriteToOfferedFilePacket(CKnownFile& cur_file,CMemFile& files);
@


1.23
log
@Formatting, comments, and name changes.
@
text
@d93 3
@


1.22
log
@Formatting, comments, and name changes. Factored various UI update methods out and modified to use async. messaging instead of sync. call.
@
text
@d34 4
a37 3
struct UnknownFile_Struct{
	CString name;
	CString directory;
d42 2
a43 1
class CSharedFileList : public CLoggable{
d47 16
d64 18
a81 17
	CSharedFileList(CPreferences* in_prefs,CServerConnect* in_server, CKnownFileList* in_filelist);
	~CSharedFileList();
	void	SendListToServer();
	void	Reload(bool sendtoserver = true);
	void	SafeAddKFile(CKnownFile* toadd, bool bOnlyAdd = false);
	void	SetOutputCtrl(CSharedFilesCtrl* in_ctrl);
	void	RemoveFile(CKnownFile* toremove);
	CMutex	m_mutexList;
	CKnownFile*	GetFileByID(const uchar* filehash);
	short	GetFilePriorityByID(uchar* filehash);
	CKnownFileList*		m_pKnownFileList;
	void	WriteToOfferedFilePacket(CKnownFile& cur_file,CMemFile& files);
	uint64	GetDatasize(uint64 &pbytesLargest);
	uint16	GetCount()	{return m_mapSharedFiles.GetCount(); }
	void	UpdateItem(CKnownFile* pKnownFile,bool bResort=true);
	void NextLANBroadcast();		// LANCAST (moosetea) - Next Broadcast
	CMapStringToString &GetSharedVDirForList()		{ return m_SharedVDirForList; }		// #zegzav:vdir4list
d83 3
a85 3
	void	FindSharedFiles();
	void	AddFilesFromDirectory(const CString& directory);
	void	HashNextFile();
d87 5
a91 1
	void	UpdateOfferedItems();
d93 2
a94 7
	CMap<CCKey,CCKey&,CKnownFile*,CKnownFile*> m_mapSharedFiles;
	CTypedPtrList<CPtrList, UnknownFile_Struct*> m_waitingForHashList;
	CPreferences*		m_pPrefs;
	CServerConnect*		server;
	CSharedFilesCtrl   *m_pOutput;
	CLanCast* m_lancast;		// LANCAST (moosetea)
	bool				m_bDelayReload;
a95 7
	// #zegzav:vdir4list (BEGIN) - virtual dir for Hybrid client to client shared files listing
	void BuildSharedVDirForList();
	bool AddSharedVDirForList(bool bIncomplete, const CString &strDir);
	CMapStringToString m_SharedVDirForList;
	// #zegzav:vdir4list (END)
protected:
	CMutex m_HashMapMutex;
d98 1
a98 2
//class CPartFile;
class CAddFileThread : public CWinThread
d100 14
a113 1
		DECLARE_DYNCREATE(CAddFileThread)
d115 1
a115 10
	CAddFileThread();
public:
	virtual	BOOL	InitInstance() {return true;}
	virtual int		Run();
	void	SetValues(CSharedFileList* pOwner, LPCTSTR directory, LPCTSTR filename, CPartFile* in_partfile_Owner = 0);
private:
	CSharedFileList* m_pOwner;
	CString			 directory;
	CString			 filename;
	CPartFile*		 partfile_Owner;
@


1.21
log
@Formatting, comments, and name changes. Factored "UpdateOfferedItems()" method out and modified to use async. messaging instead of sync. call.
@
text
@d26 1
a26 1
#include "sharedfilesctrl.h"
d60 1
a60 1
	void	UpdateItem(CKnownFile* toupdate,bool resort=true);
@


1.20
log
@Formatting, comments, and name changes.
@
text
@d57 1
a57 1
	void	CreateOfferedFilePacket(CKnownFile& cur_file,CMemFile& files);
d59 1
a59 1
	uint16	GetCount()	{return m_Files_map.GetCount(); }
d67 2
d70 1
a70 1
	CMap<CCKey,CCKey&,CKnownFile*,CKnownFile*> m_Files_map;
@


1.19
log
@Changed log of files been hashed (better way of knowing remaining ones)
@
text
@d56 1
a56 1
	CKnownFileList*		filelist;
@


1.18
log
@Log for files that has been hashed
@
text
@a62 1
	int		GetRemainingToBeHashed();
@


1.17
log
@Formatting, comments, and name changes.
@
text
@d63 1
@


1.16
log
@Second batch of name changes
@
text
@d53 1
a53 1
	CMutex	list_mut;
d70 1
a70 1
	CPreferences*		app_prefs;
@


1.15
log
@added OP_ASKSHAREDDIRS protocol
@
text
@d69 1
a69 1
	CTypedPtrList<CPtrList, UnknownFile_Struct*> waitingforhash_list;
d72 1
a72 1
	CSharedFilesCtrl*	output;
d74 1
a74 1
	bool delayreload;
@


1.14
log
@new statistic (khaos based)
@
text
@d62 1
d75 6
@


1.13
log
@fix for crash
@
text
@d58 1
a58 1
	uint64	GetDatasize();
@


1.12
log
@char * to CString conversion
@
text
@d64 1
a64 1
	void	AddFilesFromDirectory(char* directory);
@


1.11
log
@code cleanup
@
text
@d35 2
a36 2
	char* name;
	char* directory;
@


1.10
log
@code cleanup
@
text
@d57 1
a57 1
	void	CreateOfferedFilePacket(CKnownFile* cur_file,CMemFile* files);
@


1.9
log
@coverted code from char * to CString
@
text
@d54 1
a54 1
	CKnownFile*	GetFileByID(uchar* filehash);
@


1.8
log
@const correctness
@
text
@d90 2
a91 2
	char*			 directory;
	char*			 filename;
@


1.7
log
@Fixed bugs #185, #153 & #28
@
text
@d87 1
a87 1
	void	SetValues(CSharedFileList* pOwner, char* directory, char* filename, CPartFile* in_partfile_Owner = 0);
@


1.6
log
@*** empty log message ***
@
text
@d73 1
@


1.6.2.1
log
@27c
@
text
@a55 1
	CKnownFile*	GetFileByIndex(int index);
@


1.5
log
@converted to new logging method
@
text
@d60 1
a60 1
	void	UpdateItem(CKnownFile* toupdate);
@


1.4
log
@Fix for crash bug rehashing the files that was caused because of LANcast thread
@
text
@d32 1
d41 1
a41 1
class CSharedFileList{
@


1.3
log
@Lancast : Help other emules on your lan complete/download files quicker, saving bandwith.

1) UDP broadcasts your hashs over your lan
2) Listens for other clients sending broadcasts and adds them as sources
3) Clients on your lan bypass the queue, and have unlimited upload (download rate is still limited by emule downlaod speed)
@
text
@d31 1
d72 2
@


1.2
log
@update to .25b codebase
@
text
@d30 1
d59 1
d70 1
@


1.2.2.1
log
@updating this branch...
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d69 17
@

