head	1.3;
access;
symbols
	PublicRelease_1i:1.2
	Interim_Release_1i_RC6:1.2
	Interim_Release_1i_RC3:1.2
	Interim_Release_1i_RC2:1.2
	Interim_Release_1i_RC1:1.2
	Interim_Release_1i_beta3:1.2
	Interim_Release_1i_beta2:1.2
	Interim_Release_1i_beta1:1.2
	PublicRelease_1h:1.2
	Interim_Release_1h_rc2:1.2
	Interim_Release_1h_RC1:1.2
	Interim_Release_1h_beta2:1.2
	Interim_Release_1h_beta1_now:1.1
	Interim_Release_1h_beta1:1.1
	PublicRelease_1g:1.1
	Interim_Release_1g_RC6_Final:1.1
	Interim_Release_1g_RC6:1.1
	Interim_Release_1g_RC5:1.1
	Interim_Release_1g_RC4:1.1
	Interim_Release_1g_RC3:1.1
	Interim_Release_1g_beta2:1.1
	Interim_Release_1g_beta1:1.1
	Interim_Release_1f_RC4:1.1
	Interim_Release_1f_RC3:1.1
	Interim_Release_1f_RC2:1.1
	Interim_Release_1f_RC:1.1
	Interim_Release_1f_beta2:1.1
	Interim_Release_1f_beta1:1.1
	PublicRelease_1e:1.1
	Interim_Release_1e_RC2:1.1
	Interim_Release_1e_RC:1.1
	Interim_Release_1e_beta3:1.1
	Interim_Release_1e_beta2:1.1
	Interim_Release_1e_beta2_before_kuchin:1.1
	Interim_Release_1e_beta1:1.1;
locks; strict;
comment	@// @;


1.3
date	2003.12.16.17.48.07;	author kuchin;	state dead;
branches;
next	1.2;

1.2
date	2003.08.26.16.54.24;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.23.18.06.39;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@New engine
@
text
@// EmWinNt.cpp: implementation of the CEmWinNt class.
//
//////////////////////////////////////////////////////////////////////
#include "StdAfx.h"
#ifdef NEW_SOCKETS

#include "EmWinNT.h"

void CEmDynModule::Uninit()
{
	if (m_hDll)
	{
		if (!FreeLibrary(m_hDll))
			AddDebugLogLine(false, "FreeLibrary failed");
		m_hDll = NULL;
	}
}

CEmWinNT CEmWinNT::s_stWinNT;

CEmWinNT::CEmWinNT()
{
	// first of all determine if we are running on NT system
	OSVERSIONINFO stVersionInfo;
	stVersionInfo.dwOSVersionInfoSize = sizeof(stVersionInfo);

	if(GetVersionEx(&stVersionInfo) && (stVersionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))
		if (m_hDll = LoadLibrary(_T("kernel32.dll")))
			// Obtain now pointers to desired functions
			if (
				!(m_pfnCreateIoCompletionPort = (HANDLE (WINAPI *)(HANDLE, HANDLE, DWORD, DWORD)) GetProcAddress(m_hDll, "CreateIoCompletionPort")) ||
				!(m_pfnGetQueuedCompletionStatus = (BOOL (WINAPI *)(HANDLE, PDWORD, PDWORD, OVERLAPPED**, DWORD)) GetProcAddress(m_hDll, "GetQueuedCompletionStatus")) ||
				!(m_pfnPostQueuedCompletionStatus = (BOOL (WINAPI *)(HANDLE, DWORD, DWORD, OVERLAPPED*)) GetProcAddress(m_hDll, "PostQueuedCompletionStatus")) ||
				!(m_pfnTryEnterCriticalSection = (BOOL (WINAPI *)(CRITICAL_SECTION*)) GetProcAddress(m_hDll, "TryEnterCriticalSection")))
				Uninit(); // one or more exports are missing
}

CEmMswSock::CEmMswSock()
{
	// first of all determine if we are running on NT system
	OSVERSIONINFO stVersionInfo;
	stVersionInfo.dwOSVersionInfoSize = sizeof(stVersionInfo);

	if(GetVersionEx(&stVersionInfo) && (stVersionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))
		if (m_hDll = LoadLibrary(_T("mswsock.dll")))
			// Obtain now pointers to desired functions
			if (
				!(m_pfnAcceptEx = (BOOL (WINAPI *)(SOCKET, SOCKET, PVOID, DWORD, DWORD, DWORD, DWORD*, OVERLAPPED*)) GetProcAddress(m_hDll, "CreateIoCompletionPort")) ||
				!(m_pfnGetAcceptExSockaddrs = (void (WINAPI *)(PVOID, DWORD, DWORD, DWORD, SOCKADDR**, int*, SOCKADDR**, int*)) GetProcAddress(m_hDll, "GetQueuedCompletionStatus")))
				Uninit(); // one or more exports are missing
}
#endif@


1.2
log
@New sockets - finally, can connect to server and even send/receive some opcodes. To be continued...
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d7 2
@

