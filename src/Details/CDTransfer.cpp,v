head	1.15;
access;
symbols
	PublicRelease_1_2e:1.15
	Interim_Release_1-2e_RC1:1.15
	PublicRelease_1_2d:1.13
	Interim_Release_1-2d_RC1:1.13
	Interim_Release_1-2d_beta1:1.12
	PublicRelease_1_2c:1.12
	Interim_Release_1-2c_RC1:1.12
	Interim_Release_1-2c_beta1:1.12
	PublicRelease_1_2b:1.12
	Interim_Release_1-2b_RC1:1.12
	PublicRelease_1_2a:1.12
	Interim_Release_1-2a_RC1:1.12
	Interim_Release_1-2a_beta2:1.12
	Interim_Release_1-2a_beta1:1.12
	PublicRelease_1_2:1.11
	Interim_Release_1-2_RC1:1.11
	Interim_Release_1-2_beta1:1.11
	PublicRelease_1_1g:1.11
	Interim_Release_1-1g_RC3:1.11
	Interim_Release_1-1g_RC2:1.11
	Interim_Release_1-1g_RC1:1.11
	Interim_Release_1-1g_beta2:1.10
	Interim_Release_1-1g_beta1:1.10
	PublicRelease_1_1f:1.10
	Interim_Release_1-1f_RC1:1.10
	PublicRelease_1_1e:1.10
	Interim_Release_1-1e_RC2:1.10
	Interim_Release_1-1e_RC1:1.10
	Interim_Release_1-1e_beta1:1.10
	PublicRelease_1_1d:1.10
	Interim_Release_1-1d_RC1:1.10
	PublicRelease_1_1c:1.10
	Interim_Release_1-1c_RC1:1.10
	Interim_Release_1-1c_beta2:1.10
	Interim_Release_1-1c_beta1:1.10
	PublicRelease_1_1b:1.10
	Interim_Release_1-1b_RC1:1.10
	PublicRelease_1_1a:1.10
	Interim_Release_1-1a_RC2:1.10
	Interim_Release_1-1a_RC1:1.10
	Interim_Release_1-1a_beta2:1.10
	Interim_Release_1-1a_beta1:1.10
	PublicRelease_1_1:1.10
	Interim_Release_1-1_beta1:1.10
	PublicRelease_1o:1.10
	Interim_Release_1o_RC1:1.10
	Interim_Release_1o_beta1:1.10
	PublicRelease_1n:1.10
	Interim_Release_1n_RC2:1.10
	Interim_Release_1n_RC1:1.10
	Interim_Release_1n_beta2:1.10
	PublicRelease_1m:1.10
	Interim_Release_1m_beta1:1.10
	PublicRelease_1l:1.10
	Interim_Release_1l_RC3:1.10
	Interim_Release_1l_RC2:1.10
	Interim_Release_1l_RC1:1.10
	Interim_Release_1l_beta2:1.10
	Interim_Release_1l_beta1:1.10
	PublicRelease_1k:1.10
	Interim_Release_1k_RC4:1.10
	Interim_1k_RC3:1.10
	Interim_1k_RC2:1.10
	Interim_Release_1k_RC1:1.10
	Interim_Release_1k_beta5:1.10
	Intrerim_Release_1k_beta4:1.10
	Interim_Release_1k_beta1:1.7
	PublicRelease_1j:1.7
	Interim_Release_1J_RC3:1.7
	Interim_Release_1j_RC3:1.7
	Interim_Release_1j_RC2:1.7
	Interim_Release_1j_RC1:1.7
	Interim_Release_1j_beta2:1.7
	Interim_Release_1j_beta1:1.7
	PublicRelease_1i:1.7
	Interim_Release_1i_RC6:1.7
	Interim_Release_1i_RC3:1.7
	Interim_Release_1i_RC2:1.7
	Interim_Release_1i_RC1:1.7
	Interim_Release_1i_beta3:1.7
	Interim_Release_1i_beta2:1.7
	Interim_Release_1i_beta1:1.5;
locks; strict;
comment	@// @;


1.15
date	2008.11.03.05.45.24;	author aw3;	state Exp;
branches;
next	1.14;

1.14
date	2008.10.28.18.56.43;	author kush_eplus;	state Exp;
branches;
next	1.13;

1.13
date	2008.03.03.04.38.40;	author aw3;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.27.03.53.27;	author aw3;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.28.03.04.25;	author aw3;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.20.01.34.38;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.02.01.07.29;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.26.05.33.19;	author aw3;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.20.14.27.51;	author dongato;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.08.22.17.45;	author forcha;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.05.10.45.18;	author forcha;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.05.10.20.29;	author forcha;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.05.10.15.50;	author forcha;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.05.05.19.58;	author dongato;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.05.00.02.23;	author forcha;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Reduced H-file dependency.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "..\emule.h"
#include "..\updownclient.h"
#include "CDTransfer.h"
#include "..\KnownFile.h"
#include "..\SharedFileList.h"

IMPLEMENT_DYNCREATE(CCDTransfer, CPropertyPage)

CCDTransfer::CCDTransfer() : CPropertyPage(CCDTransfer::IDD)
{
}

CCDTransfer::~CCDTransfer()
{
}

void CCDTransfer::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_CURRENTDOWN_VAL, m_ctrlCurrentDownload);
	DDX_Control(pDX, IDC_SESSIONDOWN_VAL, m_ctrlDownloadedSession);
	DDX_Control(pDX, IDC_TOTALDOWN_VAL, m_ctrlDownloadedTotal);
	DDX_Control(pDX, IDC_AVERAGEDOWNRATE_VAL, m_ctrlAverageDownloadRate);
	DDX_Control(pDX, IDC_SESSIONUP_VAL, m_ctrlUploadedSession);
	DDX_Control(pDX, IDC_TOTALUP_VAL, m_ctrlUploadedTotal);
	DDX_Control(pDX, IDC_AVERAGEUPRATE_VAL, m_ctrlAverageUploadRate);
}


BEGIN_MESSAGE_MAP(CCDTransfer, CPropertyPage)
END_MESSAGE_MAP()

BOOL CCDTransfer::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	Localize();
	Update();

	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
}

void CCDTransfer::Update(void)
{
	EMULE_TRY

	if ((m_pClient == NULL) || !::IsWindow(GetSafeHwnd()))
		return;

	CKnownFile* pFile = g_App.m_pSharedFilesList->GetFileByID(m_pClient->m_reqFileHash);
	if (pFile != NULL)
		m_ctrlCurrentDownload.SetWindowText(pFile->GetFileName());
	else
		m_ctrlCurrentDownload.SetWindowText(_T("-"));

	CString strBuffer;

	// up = down & down = up ;)
	m_ctrlDownloadedSession.SetWindowText(::CastItoXBytes(m_pClient->GetTransferredUp()));
	strBuffer.Format(_T("%.1f %s"), static_cast<double>(m_pClient->GetUpDataRate()) / 1024,
						::GetResString(IDS_KBYTESEC));
	m_ctrlAverageDownloadRate.SetWindowText(strBuffer);
	
	m_ctrlUploadedSession.SetWindowText(::CastItoXBytes(m_pClient->GetTransferredDown()));
	strBuffer.Format(_T("%.1f %s"), (double)m_pClient->GetDownloadDataRate() / 1024,
						::GetResString(IDS_KBYTESEC));
	m_ctrlAverageUploadRate.SetWindowText(strBuffer);

	if(m_pClient->Credits())
	{
		m_ctrlDownloadedTotal.SetWindowText(::CastItoXBytes(m_pClient->Credits()->GetUploadedTotal()));
		m_ctrlUploadedTotal.SetWindowText(::CastItoXBytes(m_pClient->Credits()->GetDownloadedTotal()));
	}
	else
	{
		m_ctrlDownloadedTotal.SetWindowText(_T("?"));
		m_ctrlUploadedTotal.SetWindowText(_T("?"));
	}

	EMULE_CATCH
}

void CCDTransfer::Localize(void)
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_CURRENTDOWN_LBL, IDS_CD_CDOWN },
		{ IDC_SESSIONDOWN_LBL, IDS_CD_DOWN },
		{ IDC_TOTALDOWN_LBL, IDS_CD_TDOWN },
		{ IDC_AVERAGEDOWNRATE_LBL, IDS_CD_ADOWN },
		{ IDC_SESSIONUP_LBL, IDS_CD_UP },
		{ IDC_TOTALUP_LBL, IDS_CD_TUP },
		{ IDC_AVERAGEUPRATE_LBL, IDS_CD_AUP }
	};

	EMULE_TRY

	if (GetSafeHwnd())
	{
		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
			SetDlgItemText(s_auResTbl[i][0], GetResString(static_cast<UINT>(s_auResTbl[i][1])));
	}

	EMULE_CATCH
}
@


1.14
log
@Reduced H-file dependency.
@
text
@d22 1
d65 1
a65 4
	if(m_pClient == NULL)
		return;

	if(!::IsWindow(GetSafeHwnd()))
d69 1
a69 2
	if(pFile)
	{
a70 1
	}
a71 1
	{
a72 1
	}
@


1.13
log
@ELEMENT_COUNT -> ARRSIZE.
@
text
@d18 2
a21 1
#include "..\emule.h"
@


1.12
log
@Simplified client upload data rate processing -- never return negative (Mantis #518).
@
text
@d1 1
a1 1
// CDTransfer.cpp : implementation file
d3 13
d20 1
a20 3
#include "..\eMule.h"

// CCDTransfer dialog
a25 3
	//{{AFX_DATA_INIT(CCDTransfer)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
a34 1
	//{{AFX_DATA_MAP(CCDTransfer)
a35 1
	//}}AFX_DATA_MAP
a45 3
	//{{AFX_MSG_MAP(CCDTransfer)
		// NOTE: the ClassWizard will add message map macros here
	//}}AFX_MSG_MAP
a47 2
// CCDTransfer message handlers

d108 1
a108 1
	static const int aiResTbl[][2] =
d123 2
a124 2
		for (uint32 i = 0; i < ELEMENT_COUNT(aiResTbl); i++)
			SetDlgItemText(aiResTbl[i][0], GetResString(static_cast<UINT>(aiResTbl[i][1])));
@


1.11
log
@Finished renaming to make sources compilable again...
@
text
@d82 1
a82 1
	strBuffer.Format(_T("%.1f %s"), max((double)m_pClient->GetDataRate() / 1024, .0),
@


1.10
log
@minor optimization
@
text
@d68 1
a68 1
	CKnownFile* pFile = g_eMuleApp.m_pSharedFilesList->GetFileByID(m_pClient->m_reqFileHash);
@


1.9
log
@Solved all problems with display of '&' in File and Client Details dialogs
@
text
@d122 2
a123 2
		for (uint32 i = 0; i < (sizeof(aiResTbl) / sizeof(aiResTbl[0])); i++)
			GetDlgItem(aiResTbl[i][0])->SetWindowText(GetResString(static_cast<UINT>(aiResTbl[i][1])));
@


1.8
log
@Unified localization; whitespace corrections
@
text
@d71 1
a71 1
		m_ctrlCurrentDownload.SetWindowText(::MakeStringEscaped(pFile->GetFileName()));
@


1.7
log
@Added new File Status icons and some compilation fixes.
@
text
@d74 1
a74 1
	{	
d82 1
a82 1
	strBuffer.Format(_T("%.1f %s"), max((double)m_pClient->GetDataRate() / 1024, .0),		
d90 1
a90 1
	
d107 11
d120 1
a120 1
	if(GetSafeHwnd())
d122 2
a123 7
		GetDlgItem(IDC_CURRENTDOWN_LBL)->SetWindowText(GetResString(IDS_CD_CDOWN));
		GetDlgItem(IDC_SESSIONDOWN_LBL)->SetWindowText(GetResString(IDS_CD_DOWN));
		GetDlgItem(IDC_TOTALDOWN_LBL)->SetWindowText(GetResString(IDS_CD_TDOWN));
		GetDlgItem(IDC_AVERAGEDOWNRATE_LBL)->SetWindowText(GetResString(IDS_CD_ADOWN));
		GetDlgItem(IDC_SESSIONUP_LBL)->SetWindowText(GetResString(IDS_CD_UP));
		GetDlgItem(IDC_TOTALUP_LBL)->SetWindowText(GetResString(IDS_CD_TUP));
		GetDlgItem(IDC_AVERAGEUPRATE_LBL)->SetWindowText(GetResString(IDS_CD_AUP));
@


1.6
log
@fix: transfer values
@
text
@d68 1
a68 2

	CKnownFile* pFile = g_eMuleApp.m_pSharedFilesList->GetFileByID(m_pClient->reqfileid);
@


1.5
log
@TRY & CATCH
@
text
@d81 3
a83 2
	m_ctrlDownloadedSession.SetWindowText(::CastItoXBytes(m_pClient->GetTransferredDown()));
	strBuffer.Format(_T("%.1f %s"), max((double)m_pClient->GetDataRate() / 1024, .0),
d87 1
a87 1
	m_ctrlUploadedSession.SetWindowText(::CastItoXBytes(m_pClient->GetTransferredUp()));
@


1.4
log
@*** empty log message ***
@
text
@d60 2
d101 2
d107 2
d119 2
@


1.3
log
@*** empty log message ***
@
text
@a13 1
, m_strCurrentDownload(_T(""))
a29 1
	DDX_Text(pDX, IDC_CURRENTDOWN_LBL, m_strCurrentDownload);
a98 2

	UpdateData(FALSE);
@


1.2
log
@Localization and some fixes for new detail dialogs by FoRcHa
@
text
@a71 9
		if(m_pClient->GetUploadState() == US_UPLOADING)
		{
			m_strCurrentDownload = ::GetResString(IDS_CD_CDOWN);
		}
		else
		{
			m_strCurrentDownload = ::GetResString(IDS_CURRENTLY);
		}
		
@


1.1
log
@new dialogs for file- & client-details
@
text
@a59 4
void CCDTransfer::Localize(void)
{
}

d112 15
a126 1
}@

