head	1.40;
access;
symbols
	PublicRelease_1_2e:1.38
	Interim_Release_1-2e_RC1:1.37
	PublicRelease_1_2d:1.37
	Interim_Release_1-2d_RC1:1.37
	Interim_Release_1-2d_beta1:1.36
	PublicRelease_1_2c:1.36
	Interim_Release_1-2c_RC1:1.36
	Interim_Release_1-2c_beta1:1.34
	PublicRelease_1_2b:1.34
	Interim_Release_1-2b_RC1:1.34
	PublicRelease_1_2a:1.32
	Interim_Release_1-2a_RC1:1.32
	Interim_Release_1-2a_beta2:1.32
	Interim_Release_1-2a_beta1:1.32
	PublicRelease_1_2:1.31
	Interim_Release_1-2_RC1:1.31
	Interim_Release_1-2_beta1:1.31
	PublicRelease_1_1g:1.28
	Interim_Release_1-1g_RC3:1.28
	Interim_Release_1-1g_RC2:1.28
	Interim_Release_1-1g_RC1:1.28
	Interim_Release_1-1g_beta2:1.27
	Interim_Release_1-1g_beta1:1.26
	PublicRelease_1_1f:1.26
	Interim_Release_1-1f_RC1:1.26
	PublicRelease_1_1e:1.26
	Interim_Release_1-1e_RC2:1.26
	Interim_Release_1-1e_RC1:1.26
	Interim_Release_1-1e_beta1:1.25
	PublicRelease_1_1d:1.25
	Interim_Release_1-1d_RC1:1.25
	PublicRelease_1_1c:1.25
	Interim_Release_1-1c_RC1:1.25
	Interim_Release_1-1c_beta2:1.25
	Interim_Release_1-1c_beta1:1.25
	PublicRelease_1_1b:1.25
	Interim_Release_1-1b_RC1:1.25
	PublicRelease_1_1a:1.25
	Interim_Release_1-1a_RC2:1.25
	Interim_Release_1-1a_RC1:1.25
	Interim_Release_1-1a_beta2:1.25
	Interim_Release_1-1a_beta1:1.25
	PublicRelease_1_1:1.25
	Interim_Release_1-1_beta1:1.25
	PublicRelease_1o:1.25
	Interim_Release_1o_RC1:1.25
	Interim_Release_1o_beta1:1.24
	PublicRelease_1n:1.22
	Interim_Release_1n_RC2:1.21
	Interim_Release_1n_RC1:1.21
	Interim_Release_1n_beta2:1.20
	PublicRelease_1m:1.19
	Interim_Release_1m_beta1:1.18
	PublicRelease_1l:1.18
	Interim_Release_1l_RC3:1.18
	Interim_Release_1l_RC2:1.18
	Interim_Release_1l_RC1:1.17
	Interim_Release_1l_beta2:1.17
	Interim_Release_1l_beta1:1.16
	PublicRelease_1k:1.12
	Interim_Release_1k_RC4:1.12
	Interim_1k_RC3:1.12
	Interim_1k_RC2:1.12
	Interim_Release_1k_RC1:1.12
	Interim_Release_1k_beta5:1.12
	Intrerim_Release_1k_beta4:1.12
	Interim_Release_1k_beta1:1.8
	PublicRelease_1j:1.8
	Interim_Release_1J_RC3:1.8
	Interim_Release_1j_RC3:1.8
	Interim_Release_1j_RC2:1.8
	Interim_Release_1j_RC1:1.8
	Interim_Release_1j_beta2:1.8
	Interim_Release_1j_beta1:1.8
	PublicRelease_1i:1.8
	Interim_Release_1i_RC6:1.8
	Interim_Release_1i_RC3:1.8
	Interim_Release_1i_RC2:1.8
	Interim_Release_1i_RC1:1.8
	Interim_Release_1i_beta3:1.8
	Interim_Release_1i_beta2:1.7
	Interim_Release_1i_beta1:1.4;
locks; strict;
comment	@// @;


1.40
date	2009.07.30.03.50.48;	author aw3;	state Exp;
branches;
next	1.39;

1.39
date	2009.06.17.02.27.14;	author aw3;	state Exp;
branches;
next	1.38;

1.38
date	2009.04.08.04.05.38;	author aw3;	state Exp;
branches;
next	1.37;

1.37
date	2008.03.03.04.38.39;	author aw3;	state Exp;
branches;
next	1.36;

1.36
date	2007.06.04.01.32.15;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2007.05.21.23.56.33;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2007.01.17.07.40.12;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2007.01.11.19.57.06;	author eklmn;	state Exp;
branches;
next	1.32;

1.32
date	2006.04.16.00.26.29;	author aw3;	state Exp;
branches;
next	1.31;

1.31
date	2006.01.20.04.14.16;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2006.01.19.16.50.10;	author eklmn;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.06.20.05.56;	author kush_eplus;	state Exp;
branches;
next	1.28;

1.28
date	2005.11.28.03.04.25;	author aw3;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.26.04.31.24;	author aw3;	state Exp;
branches;
next	1.26;

1.26
date	2005.06.19.04.45.01;	author aw3;	state Exp;
branches;
next	1.25;

1.25
date	2004.09.25.07.32.27;	author aw3;	state Exp;
branches;
next	1.24;

1.24
date	2004.09.21.20.14.49;	author aw3;	state Exp;
branches;
next	1.23;

1.23
date	2004.09.17.20.52.52;	author aw3;	state Exp;
branches;
next	1.22;

1.22
date	2004.09.09.19.58.49;	author aw3;	state Exp;
branches;
next	1.21;

1.21
date	2004.08.17.14.06.28;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2004.08.05.21.34.57;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2004.06.22.17.33.51;	author aw3;	state Exp;
branches;
next	1.18;

1.18
date	2004.06.01.22.31.04;	author aw3;	state Exp;
branches;
next	1.17;

1.17
date	2004.05.07.05.01.39;	author aw3;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.26.08.49.01;	author katsyonak;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.25.20.01.32;	author katsyonak;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.23.22.14.38;	author katsyonak;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.12.00.36.15;	author aw3;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.06.07.01.48;	author aw3;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.02.01.06.08;	author aw3;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.28.04.02.26;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.26.22.07.53;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.29.00.07.24;	author morevit;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.20.14.27.51;	author dongato;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.11.19.21.15;	author dongato;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.05.14.10.47;	author dongato;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.05.12.04.55;	author dongato;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.05.10.45.18;	author forcha;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.05.05.19.58;	author dongato;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.05.00.02.23;	author forcha;	state Exp;
branches;
next	;


desc
@@


1.40
log
@Reduced H-file dependency.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "..\resource.h"
#include "CDGeneral.h"
#include "..\updownclient.h"
#include "..\ServerList.h"
#include "..\server.h"
#include "..\emule.h"
#include "..\IP2Country.h"
#include "..\ListenSocket.h"

IMPLEMENT_DYNCREATE(CCDGeneral, CPropertyPage)

CCDGeneral::CCDGeneral() : CPropertyPage(CCDGeneral::IDD)
{
	m_hClientIcon = NULL;
	m_eCurrClientSoft = SO_LAST;
}

CCDGeneral::~CCDGeneral()
{
	if(m_hClientIcon != NULL)
		::DestroyIcon(m_hClientIcon);
}

void CCDGeneral::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_USERNAME_VAL, m_ctrlUserName);
	DDX_Control(pDX, IDC_SERVERNAME_VAL, m_ctrlServerName);
	DDX_Control(pDX, IDC_CLIENTSOFTWARE_VAL, m_ctrlClientSoftware);
	DDX_Control(pDX, IDC_CLIENTICON, m_ctrlClientIcon);
}


BEGIN_MESSAGE_MAP(CCDGeneral, CPropertyPage)
END_MESSAGE_MAP()

BOOL CCDGeneral::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	Localize();
	Update();

	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
}

void CCDGeneral::Update()
{
	static const uint16 s_auClientIconResID[] =
	{
		IDI_COMPROT32,			//SO_PLUS
		IDI_COMPROT32,			//SO_EMULE
		IDI_AMULE32,			//SO_AMULE
		IDI_EDONKEYHYBRID32,	//SO_EDONKEYHYBRID
		IDI_NORMAL32,			//SO_EDONKEY
		IDI_MLDONKEY32,			//SO_MLDONKEY
		IDI_SECUREHASH32,		//SO_OLDEMULE + non-SUI
		IDI_SHAREAZA32,			//SO_SHAREAZA
		IDI_XMULE32,			//SO_XMULE
		IDI_LPHANT32,			//SO_LPHANT
		IDI_UNKNOWN32			//SO_UNKNOWN
	};

	EMULE_TRY

	if ((m_pClient == NULL) || !::IsWindow(GetSafeHwnd()))
		return;

//	Reload icon only when client version is changed (e.g. Unknown->another)
	if (m_eCurrClientSoft != m_pClient->GetClientSoft())
	{
		m_eCurrClientSoft = m_pClient->GetClientSoft();
		if(m_hClientIcon != NULL)
			::DestroyIcon(m_hClientIcon);

		HINSTANCE	hInst = AfxGetInstanceHandle();
		uint32		dwIdx = m_eCurrClientSoft;

		if ((dwIdx == SO_EMULE) || (dwIdx == SO_PLUS))
		{
			if (m_pClient->m_pCredits->GetCurrentIdentState(m_pClient->GetIP()) != IS_IDENTIFIED)
				dwIdx = SO_OLDEMULE;
		}
		else if (dwIdx > SO_UNKNOWN)
			dwIdx = SO_UNKNOWN;
		m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(s_auClientIconResID[dwIdx]), IMAGE_ICON, 0, 0, 0));
		m_ctrlClientIcon.SetIcon(m_hClientIcon);
	}

	CString	strBuffer;
	UINT	dwResStrId;

	if (!m_pClient->IsUserNameEmpty())
		m_ctrlUserName.SetWindowText(m_pClient->GetUserName());
	else
		m_ctrlUserName.SetWindowText(_T("?"));
	
	if (m_pClient->HasValidHash())
	{
		TCHAR acHashStr[MAX_HASHSTR_SIZE];

		SetDlgItemText(IDC_USERHASH_VAL, md4str(m_pClient->GetUserHash(), acHashStr));
	}
	else
		SetDlgItemText(IDC_USERHASH_VAL, _T("?"));

	m_ctrlClientSoftware.SetWindowText(m_pClient->GetFullSoftVersionString());

	if (m_pClient->SupportsCryptLayer())
	{
		if ( g_App.m_pPrefs->IsClientCryptLayerSupported() &&
			(m_pClient->RequestsCryptLayer() || g_App.m_pPrefs->IsClientCryptLayerRequested()) &&
			(m_pClient->IsObfuscatedConnectionEstablished() || !((m_pClient->m_pRequestSocket != NULL) && m_pClient->m_pRequestSocket->IsConnected())) )
		{
			dwResStrId = IDS_ENABLED;
		}
		else
			dwResStrId = IDS_SUPPORTED;
	}
	else
		dwResStrId = IDS_IDENTNOSUPPORT;
	::GetResString(&strBuffer, dwResStrId);
	SetDlgItemText(IDC_OBFUSCATION_VAL, strBuffer);

	SetDlgItemText(IDC_BANNED_VAL, m_pClient->GetBanString());

	strBuffer.Format(_T("%u (%s)"), m_pClient->GetUserIDHybrid(),
						::GetResString((m_pClient->HasLowID()) ? IDS_PRIOLOW : IDS_PRIOHIGH));
	SetDlgItemText(IDC_ID_VAL, strBuffer);

	strBuffer.Format(_T("%s:%u"), m_pClient->GetFullIP(), m_pClient->GetUserPort());
	if (g_App.m_pIP2Country->IsIP2Country())
		strBuffer.AppendFormat(_T(" (%s)"), m_pClient->GetCountryName());
	SetDlgItemText(IDC_IPADDRESS_VAL, strBuffer);
	
	if (m_pClient->GetServerIP())
	{
		strBuffer.Format(_T("%s:%u"), ipstr(m_pClient->GetServerIP()), m_pClient->GetServerPort());

		CServer	*pServer = g_App.m_pServerList->GetServerByIPTCP(m_pClient->GetServerIP(), m_pClient->GetServerPort());

		if (pServer != NULL)
		{
			if (g_App.m_pIP2Country->IsIP2Country())
				strBuffer.AppendFormat(_T(" (%s)"), pServer->GetCountryName());
			m_ctrlServerName.SetWindowText(pServer->GetListName());
		}
		else
			m_ctrlServerName.SetWindowText(_T("?"));
		SetDlgItemText(IDC_SERVERIP_VAL, strBuffer);
	}
	else
	{
		SetDlgItemText(IDC_SERVERIP_VAL, _T("?"));
		m_ctrlServerName.SetWindowText(_T("?"));
	}

	if (m_pClient->Credits())
	{
		dwResStrId = IDS_IDENTNOSUPPORT;
		if (g_App.m_pClientCreditList->CryptoAvailable())
		{
			switch (m_pClient->Credits()->GetCurrentIdentState(m_pClient->GetIP()))
			{
				case IS_IDFAILED:
				case IS_IDNEEDED:
				case IS_IDBADGUY:
					dwResStrId = IDS_IDENTFAILED;
					break;
				case IS_IDENTIFIED:
					dwResStrId = IDS_IDENTOK;
				case IS_NOTAVAILABLE:
					break;
			}
		}
		::GetResString(&strBuffer, dwResStrId);
		SetDlgItemText(IDC_IDENTIFICATION_VAL, strBuffer);
	}
	else
		SetDlgItemText(IDC_IDENTIFICATION_VAL, _T("?"));

	EMULE_CATCH
}

void CCDGeneral::Localize(void)
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_USERHASH_LBL, IDS_CD_UHASH },
		{ IDC_IDENTIFICATION_LBL, IDS_CD_IDENT },
		{ IDC_CLIENTSOFTWARE_LBL, IDS_CD_CSOFT },
		{ IDC_CDG_IPADDRESS_LBL, IDS_CD_UIP },
		{ IDC_SERVERNAME_LBL, IDS_CD_SNAME },
	};
	static const uint16 s_auResTbl2[][2] =
	{
		{ IDC_ID_LBL, IDS_ID },
		{ IDC_SERVERIP_LBL, IDS_SERVERIP },
		{ IDC_BANNED_LBL, IDS_BANNED },
		{ IDC_OBFUSCATION_LBL, IDS_OBFUSCATION }
	};

	if (GetSafeHwnd())
	{
		CString strBuffer;

		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
		{
			GetResString(&strBuffer, static_cast<UINT>(s_auResTbl[i][1]));
			SetDlgItemText(s_auResTbl[i][0], strBuffer);
		}
		for (uint32 i = 0; i < ARRSIZE(s_auResTbl2); i++)
		{
			GetResString(&strBuffer, static_cast<UINT>(s_auResTbl2[i][1]));
			strBuffer += _T(":");
			SetDlgItemText(s_auResTbl2[i][0], strBuffer);
		}
	}
}
@


1.39
log
@Updated server list search API for encryption implementation.
@
text
@d25 1
@


1.38
log
@Reduced H-file dependency.
@
text
@d157 1
a157 1
		CServer	*pServer = g_App.m_pServerList->GetServerByIP(m_pClient->GetServerIP());
@


1.37
log
@ELEMENT_COUNT -> ARRSIZE.
@
text
@d21 1
@


1.36
log
@Encryption preparations.
@
text
@a51 2
// CCDGeneral message handlers

d223 1
a223 1
		for (uint32 i = 0; i < ELEMENT_COUNT(s_auResTbl); i++)
d228 1
a228 1
		for (uint32 i = 0; i < ELEMENT_COUNT(s_auResTbl2); i++)
@


1.35
log
@Clean up; Dropped classes for static controls to reduce overhead;
#include moved to C-file; Obfuscation information in client details.
@
text
@d128 10
a137 1
		dwResStrId = IDS_SUPPORTED;
@


1.34
log
@Newly added stuff was renamed according to the original for easier reference.
@
text
@d1 1
a1 1
// CDGeneral.cpp : implementation file
d3 13
d18 1
d20 1
a20 1
#include "..\UpDownClient.h"
a24 3

// CCDGeneral dialog

a28 3
	//{{AFX_DATA_INIT(CCDGeneral)
	//}}AFX_DATA_INIT

a35 1
	{
a36 1
	}
a41 1
	//{{AFX_DATA_MAP(CCDGeneral)
a42 1
	DDX_Control(pDX, IDC_USERHASH_VAL, m_ctrlUserHash);
a43 3
	DDX_Control(pDX, IDC_SERVERIP_VAL, m_ctrlServerIP);
	DDX_Control(pDX, IDC_IPADDRESS_VAL, m_ctrlClientIP);
	DDX_Control(pDX, IDC_ID_VAL, m_ctrlClientID);
a45 3
	DDX_Control(pDX, IDC_IDENTIFICATION_VAL, m_ctrlIdentification);
	DDX_Control(pDX, IDC_BANNED_VAL, m_ctrlBanned);
	//}}AFX_DATA_MAP
a49 3
	//{{AFX_MSG_MAP(CCDGeneral)
		// NOTE: the ClassWizard will add message map macros here
	//}}AFX_MSG_MAP
d84 1
a84 4
	if(m_pClient == NULL)
		return;

	if(!::IsWindow(GetSafeHwnd()))
a91 1
		{
a92 1
		}
d108 2
a109 1
	CString strBuffer;
d120 1
a120 1
		m_ctrlUserHash.SetWindowText(md4str(m_pClient->GetUserHash(), acHashStr));
d123 1
a123 1
		m_ctrlUserHash.SetWindowText(_T("?"));
d127 8
a134 1
	m_ctrlBanned.SetWindowText(m_pClient->GetBanString());
d138 1
a138 1
	m_ctrlClientID.SetWindowText(strBuffer);
d143 1
a143 1
	m_ctrlClientIP.SetWindowText(strBuffer);
d159 1
a159 1
		m_ctrlServerIP.SetWindowText(strBuffer);
d163 1
a163 1
		m_ctrlServerIP.SetWindowText(_T("?"));
d169 1
a169 2
		UINT		dwResStrId = IDS_IDENTNOSUPPORT;

a173 4
				case IS_NOTAVAILABLE:
				{
					break;
				}
a176 1
				{
a178 1
				}
a179 1
				{
d181 1
a182 1
				}
d185 2
a186 1
		m_ctrlIdentification.SetWindowText(::GetResString(dwResStrId));
d189 1
a189 3
	{
		m_ctrlIdentification.SetWindowText(_T("?"));
	}
d208 2
a209 1
		{ IDC_BANNED_LBL, IDS_BANNED }
@


1.33
log
@1) updated source exchange protocol to ver.3
2) support of HighID clients with IP "x.x.x.0"  (see description in updownclient.h)
3) removed dublicated ip check for LowID clients in TryToConnect()
4) fixed a client name change by download start from remote client shared file list.
5) some formating
@
text
@d138 1
a138 1
	strBuffer.Format(_T("%u (%s)"), m_pClient->GetHybridUserID(),
@


1.32
log
@Don't use server port while looking for a server in the list
(server can have several ports); Faster search for server name.
@
text
@d138 1
a138 1
	strBuffer.Format(_T("%u (%s)"), m_pClient->GetUserID(),
@


1.31
log
@Removed new duplicate string IDS_CD_BANNED;
Removed similar strings IDS_CD_UID and IDS_CD_SIP.
@
text
@d149 1
a149 2
		CString	strPort;
		in_addr	server;
d151 1
a151 5
		server.S_un.S_addr = m_pClient->GetServerIP();
		strBuffer.Format(_T("%s"), inet_ntoa(server));
		strPort.Format(_T(":%u"), m_pClient->GetServerPort());

		CServer	*pServer = g_App.m_pServerList->GetServerByAddress(strBuffer, m_pClient->GetServerPort()); 
d156 1
a156 1
				strPort.AppendFormat(_T(" (%s)"), pServer->GetCountryName());
d161 1
a161 1
		m_ctrlServerIP.SetWindowText(strBuffer + strPort);
@


1.30
log
@1) keep ban reason information (part 2 - GUI)
2) removed debug string "incoming FR for LowID.."
@
text
@d212 1
a212 1
	static const int s_aiResTbl[][2] =
a217 1
		{ IDC_ID_LBL, IDS_CD_UID },
a218 2
		{ IDC_SERVERIP_LBL, IDS_CD_SIP },
		{ IDC_BANNED_LBL, IDS_CD_BANNED }
d220 6
a225 2

	EMULE_TRY
d229 13
a241 2
		for (uint32 i = 0; i < ELEMENT_COUNT(s_aiResTbl); i++)
			SetDlgItemText(s_aiResTbl[i][0], GetResString(static_cast<UINT>(s_aiResTbl[i][1])));
a242 2

	EMULE_CATCH
@


1.29
log
@UNICODE preparation (first shot)
@
text
@d46 1
d136 2
d220 2
a221 1
		{ IDC_SERVERIP_LBL, IDS_CD_SIP }
@


1.28
log
@Finished renaming to make sources compilable again...
@
text
@d144 1
a144 1
	if(m_pClient->GetServerIP())
d146 3
a148 2
		CString strPort;
		in_addr server;
d151 3
a153 1
		strPort.Format(":%u", m_pClient->GetServerPort());
d155 1
a155 2
		CServer* pServer = g_App.m_pServerList->GetServerByAddress(strBuffer, m_pClient->GetServerPort()); 
		if(pServer)
a161 1
		{
a162 1
		}
@


1.27
log
@Hash to string conversion is ready for Unicode.
@
text
@d140 1
a140 1
	if (g_eMuleApp.m_pIP2Country->IsIP2Country())
d152 1
a152 1
		CServer* pServer = g_eMuleApp.m_pServerList->GetServerByAddress(strBuffer, m_pClient->GetServerPort()); 
d155 1
a155 1
			if (g_eMuleApp.m_pIP2Country->IsIP2Country())
d175 1
a175 1
		if (g_eMuleApp.m_pClientCreditList->CryptoAvailable())
@


1.26
log
@Faster remote client name handling in the lists;
Fixed user hash display in client details for Exchanged Source (hash is available so we can show it).
@
text
@d126 1
a126 1
		char hashStr[MAX_HASHSTR_SIZE];
d128 1
a128 2
		md4str(m_pClient->GetUserHash(), hashStr);
		m_ctrlUserHash.SetWindowText(hashStr);
@


1.25
log
@Own client type for eMule Plus clients.
@
text
@d117 1
a117 1
	CString strBuffer = m_pClient->GetUserName();
d119 2
a120 4
	if(!strBuffer.IsEmpty())
	{
		m_ctrlUserName.SetWindowText(strBuffer);
	}
a121 1
	{
a122 1
	}
d124 1
a124 8
	bool bLoadedSourceName = false ;
	if(m_pClient->GetUserName())
	{
		bLoadedSourceName = (_tcsstr(m_pClient->GetUserName(), ::GetResString(IDS_LOADEDSOURCE)) != NULL) ||
							(_tcsstr(m_pClient->GetUserName(), ::GetResString(IDS_EXCHANGEDSOURCE)) != NULL) ;
	}

	if (m_pClient->HasValidHash() && !bLoadedSourceName)
a131 1
	{
a132 1
	}
d134 1
a134 1
	m_ctrlClientSoftware.SetWindowText(m_pClient->GetClientNameAndVersionString());
@


1.24
log
@LMULE -> XMULE.
@
text
@d73 1
d106 1
a106 1
		if (dwIdx == SO_EMULE)
@


1.23
log
@Faster client icons processing.
@
text
@d80 1
a80 1
		IDI_LMULE32,			//SO_LMULE
@


1.22
log
@Finally own icon for lphant.
@
text
@d7 1
a7 1
#include "..\Server.h"
d71 14
d102 2
a103 1
		HINSTANCE hInst = AfxGetInstanceHandle();
d105 1
a105 1
		switch (m_eCurrClientSoft)
d107 2
a108 35
			case SO_AMULE:
				m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_AMULE32), IMAGE_ICON, 0, 0, 0));
				break;
			case SO_LMULE:
				m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_LMULE32), IMAGE_ICON, 0, 0, 0));
				break;
			case SO_SHAREAZA:
				m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_SHAREAZA32), IMAGE_ICON, 0, 0, 0));
				break;
			case SO_EDONKEYHYBRID:
				m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_EDONKEYHYBRID32), IMAGE_ICON, 0, 0, 0));
				break;
			case SO_MLDONKEY:
				m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_MLDONKEY32), IMAGE_ICON, 0, 0, 0));
				break;
			case SO_LPHANT:
				m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_LPHANT32), IMAGE_ICON, 0, 0, 0));
				break;
			case SO_EMULE:
			case SO_OLDEMULE:
				if (m_pClient->m_pCredits->GetCurrentIdentState(m_pClient->GetIP()) != IS_IDENTIFIED)
				{
					m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_SECUREHASH32), IMAGE_ICON, 0, 0, 0));
				}
				else
				{
					m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_COMPROT32), IMAGE_ICON, 0, 0, 0));
				}
				break;
			case SO_EDONKEY:
				m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_NORMAL32), IMAGE_ICON, 0, 0, 0));
				break;
			default:
				m_hClientIcon = reinterpret_cast<HICON>(::LoadImage(hInst, MAKEINTRESOURCE(IDI_UNKNOWN32), IMAGE_ICON, 0, 0, 0));
				break;
d110 3
@


1.21
log
@lphant client support.
@
text
@d108 2
@


1.20
log
@Preparations for new client version report code;
Removed separate version string.
@
text
@d107 1
@


1.19
log
@Fixed GUI resource unloading in Client Details dialog.
@
text
@a42 1
	DDX_Control(pDX, IDC_CLIENTVERSION_VAL, m_ctrlClientVersion);
d158 1
a158 41
	strBuffer = ::GetClientNameString(m_pClient->GetClientSoft());

	bool bIsPlus = m_pClient->GetPlusVersion() && m_pClient->GetPlusVersion() < 0x2600;

	if (bIsPlus)
	{
		strBuffer += _T(" ");
		strBuffer += ::GetClientNameAndVersionString(m_pClient);
	}
	m_ctrlClientSoftware.SetWindowText(strBuffer);
	
	switch(m_pClient->GetClientSoft())
	{
		case SO_EMULE:
		case SO_LMULE:
		case SO_OLDEMULE:
		case SO_AMULE:
		case SO_SHAREAZA:
		{
			strBuffer = ::GetClientVersionString(m_pClient->GetClientSoft(), m_pClient->GetMuleVersion());
			break;
		}
		case SO_UNKNOWN:
		{
			strBuffer = _T("?");
			break;
		}
		default:
		{
			strBuffer = ::GetClientVersionString(m_pClient->GetClientSoft(), m_pClient->GetVersion());
			break;
		}
	}
	
	if(!m_pClient->GetModVersion().IsEmpty() && !bIsPlus)
	{
		strBuffer += _T(" [");
		strBuffer += m_pClient->GetModVersion();
		strBuffer += _T("]");
	}
	m_ctrlClientVersion.SetWindowText(strBuffer);	
a238 1
		{ IDC_CLIENTVERSION_LBL, IDS_CD_VERSION },
@


1.18
log
@Add aMule client support;
CDonkey client support is eliminated.
@
text
@d94 1
a94 1
				m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_AMULE32));
d97 1
a97 1
				m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_LMULE32));
d100 1
a100 1
				m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_SHAREAZA32));
d103 1
a103 1
				m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_EDONKEYHYBRID32));
d106 1
a106 1
				m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_MLDONKEY32));
d112 1
a112 1
					m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_SECUREHASH32));
d116 1
a116 1
					m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_COMPROT32));
d120 1
a120 1
				m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_NORMAL32));
d123 1
a123 1
				m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_UNKNOWN32));
d129 1
a129 8
/*	// Display any Extra Overlay icons
	if (bIsBanned) //katsyonak 07/07/03
			m_imageList.Draw(dc, DL_ICON_BANNED_ONLY, point2, ILD_TRANSPARENT);
	else if (bIsFriend)
			m_imageList.Draw(dc, DL_ICON_FRIEND_ONLY, point2, ILD_TRANSPARENT);
	else if (fRemoteBaseModifier >= 1.1)
			m_imageList.Draw(dc, DL_ICON_CREDIT_DOWNESTIMATED, point2, ILD_TRANSPARENT);
*/
a130 1
	CString strBuffer = m_pClient->GetUserName();
@


1.17
log
@Corrected availability check of country name (more correct if flags weren't loaded).
@
text
@d93 2
a94 2
			case SO_CDONKEY:
				m_hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_CDONKEY32));
d183 1
a183 1
		case SO_CDONKEY:
@


1.16
log
@minor change
@
text
@d214 1
a214 1
	if (g_eMuleApp.m_pIP2Country->ShowCountryFlag())
d229 1
a229 1
			if (g_eMuleApp.m_pIP2Country->ShowCountryFlag())
@


1.15
log
@reduced the space between flag and user name + minor fix in client details
@
text
@d215 1
a215 1
		strBuffer.AppendFormat(_T(" (%s)"), m_pClient->GetCountryName(true));
@


1.14
log
@added IP to Country from MorphXT (Please extract ip-to-country.rar in your config dir in order for this to work)
@
text
@d191 1
a191 1
			strBuffer = _T("???");
d213 3
a215 1
	strBuffer.Format(_T("%s:%u (%s)"), m_pClient->GetFullIP(), m_pClient->GetUserPort(), m_pClient->GetCountryName(true));
a224 1
		m_ctrlServerIP.SetWindowText(strBuffer + strPort);
d229 2
d237 1
@


1.13
log
@minor improvements
@
text
@d9 1
d213 1
a213 1
	strBuffer.Format(_T("%s:%u"), m_pClient->GetFullIP(), m_pClient->GetUserPort());
@


1.12
log
@Improved client version to string conversion
@
text
@d278 1
a278 1
	static const int aiResTbl[][2] =
d294 2
a295 2
		for (uint32 i = 0; i < (sizeof(aiResTbl) / sizeof(aiResTbl[0])); i++)
			GetDlgItem(aiResTbl[i][0])->SetWindowText(GetResString(static_cast<UINT>(aiResTbl[i][1])));
@


1.11
log
@Load client icon only after client software version is changed;
Speed up dialog information drawing.
@
text
@d185 1
a185 2
			strBuffer.Format(_T("v%s"), ::GetClientVersionString(m_pClient->GetClientSoft(),
								m_pClient->GetMuleVersion()));
d195 1
a195 2
			strBuffer.Format(_T("v%s"), ::GetClientVersionString(m_pClient->GetClientSoft(),
								m_pClient->GetVersion()));
@


1.10
log
@Added big and nice client icons for Client Details dialog
@
text
@d21 1
d79 2
a80 40
	HICON hClientIcon;
	HINSTANCE hInst = AfxGetInstanceHandle();

	switch (m_pClient->GetClientSoft())
	{
		case SO_CDONKEY:
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_CDONKEY32));
			break;
		case SO_LMULE:
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_LMULE32));
			break;
		case SO_SHAREAZA:
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_SHAREAZA32));
			break;
		case SO_EDONKEYHYBRID:
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_EDONKEYHYBRID32));
			break;
		case SO_MLDONKEY:
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_MLDONKEY32));
			break;
		case SO_EMULE:
		case SO_OLDEMULE:
			if (m_pClient->m_pCredits->GetCurrentIdentState(m_pClient->GetIP()) != IS_IDENTIFIED)
			{
				hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_SECUREHASH32));
			}
			else
			{
				hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_COMPROT32));
			}
			break;
		case SO_EDONKEY:
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_NORMAL32));
			break;
		default:
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_UNKNOWN32));
			break;
	}

	if(m_hClientIcon != hClientIcon)
d82 1
a86 1
		m_hClientIcon = hClientIcon;
d88 3
a90 5
		m_ctrlClientIcon.SetIcon(m_hClientIcon);
	}
	else
	{
		if(hClientIcon != NULL)
d92 32
a123 1
			::DestroyIcon(hClientIcon);
d125 1
@


1.9
log
@Improved string processing; Unified localization; whitespace corrections;
Fixed display of server IP when IP isn't available; minor improvements.
@
text
@d80 2
a81 1
	switch(m_pClient->GetClientSoft()) 
d84 1
a84 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_CDONKEY));
d87 1
a87 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_LMULE));
d90 1
a90 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_SHAREAZA));
d93 1
a93 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_EDONKEYHYBRID));
d96 1
a96 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_MLDONKEY));
d100 1
a100 1
			if(m_pClient->m_pCredits->GetCurrentIdentState(m_pClient->GetIP()) != IS_IDENTIFIED)
d102 1
a102 1
				hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_SECUREHASH));
d106 1
a106 1
				hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_COMPROT));
d110 1
a110 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_NORMAL));
d113 1
a113 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_UNKNOWN));
@


1.8
log
@Formatting, comments, and name changes.
@
text
@d60 1
a60 1
	
d86 1
a86 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_LMULE));			
d89 1
a89 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_SHAREAZA));			
d92 1
a92 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_EDONKEYHYBRID));			
d109 1
a109 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_NORMAL));			
d112 1
a112 1
			hClientIcon = ::LoadIcon(hInst, MAKEINTRESOURCE(IDI_UNKNOWN));			
d143 1
a143 2
	CString strBuffer;
	strBuffer = m_pClient->GetUserName();
d145 1
a145 1
	{	
d149 1
a149 1
	{	
d156 1
a156 1
		bLoadedSourceName = (_tcsstr(m_pClient->GetUserName(), ::GetResString(IDS_LOADEDSOURCE)) != NULL) || 
d160 6
a165 10
	if(m_pClient->HasValidHash() && !bLoadedSourceName)
	{		
		strBuffer = "";
		CString strBuffer2;
		for(UINT i = 0; i < 16; i++)
		{
			strBuffer2.Format(_T("%02X"), m_pClient->GetUserHash()[i]);
			strBuffer += strBuffer2;
		}
		m_ctrlUserHash.SetWindowText(strBuffer);
d168 1
a168 1
	{	
d172 2
d175 5
a179 9
	if(bIsPlus)
	{	
		m_ctrlClientSoftware.SetWindowText(::GetClientNameString(m_pClient->GetClientSoft()) + 
											_T(" ") + 
											::GetClientNameAndVersionString(m_pClient));
	}
	else
	{	
		m_ctrlClientSoftware.SetWindowText(::GetClientNameString(m_pClient->GetClientSoft()));
d181 1
d190 1
a190 1
		{	
d196 2
a197 2
		{	
			strBuffer.Format(_T("???"));
d201 1
a201 1
		{	
d216 2
a217 2
	strBuffer.Format(_T("%u (%s)"), m_pClient->GetUserID(), m_pClient->HasLowID() ? 
						::GetResString(IDS_PRIOLOW) : ::GetResString(IDS_PRIOHIGH));
d219 2
a220 2
		
	strBuffer.Format(_T("%s:%i"), m_pClient->GetFullIP(), m_pClient->GetUserPort());
d229 1
a229 1
		strPort.Format(":%i", m_pClient->GetServerPort());
d231 1
a231 1
				
d244 1
a244 1
		m_ctrlServerName.SetWindowText(_T("?"));
d248 1
a248 1
	if(m_pClient->Credits())
d250 3
a252 1
		if(g_eMuleApp.m_pClientCreditList->CryptoAvailable())
d254 1
a254 1
			switch(m_pClient->Credits()->GetCurrentIdentState(m_pClient->GetIP()))
d257 1
a257 2
				{	
					m_ctrlIdentification.SetWindowText(::GetResString(IDS_IDENTNOSUPPORT));
d263 2
a264 2
				{	
					m_ctrlIdentification.SetWindowText(::GetResString(IDS_IDENTFAILED));
d268 2
a269 2
				{	
					m_ctrlIdentification.SetWindowText(::GetResString(IDS_IDENTOK));
d274 1
a274 4
		else
		{	
			m_ctrlIdentification.SetWindowText(::GetResString(IDS_IDENTNOSUPPORT));
		}
d277 1
a277 1
	{		
d286 12
d300 1
a300 1
	if(GetSafeHwnd())
d302 2
a303 8
		GetDlgItem(IDC_USERHASH_LBL)->SetWindowText(GetResString(IDS_CD_UHASH));
		GetDlgItem(IDC_IDENTIFICATION_LBL)->SetWindowText(GetResString(IDS_CD_IDENT));
		GetDlgItem(IDC_CLIENTSOFTWARE_LBL)->SetWindowText(GetResString(IDS_CD_CSOFT));
		GetDlgItem(IDC_CLIENTVERSION_LBL)->SetWindowText(GetResString(IDS_CD_VERSION));
		GetDlgItem(IDC_CDG_IPADDRESS_LBL)->SetWindowText(GetResString(IDS_CD_UIP));
		GetDlgItem(IDC_ID_LBL)->SetWindowText(GetResString(IDS_CD_UID));
		GetDlgItem(IDC_SERVERNAME_LBL)->SetWindowText(GetResString(IDS_CD_SNAME));
		GetDlgItem(IDC_SERVERIP_LBL)->SetWindowText(GetResString(IDS_CD_SIP));
@


1.7
log
@Added new File Status icons and some compilation fixes.
@
text
@d177 1
a177 1
	bool bIsPlus = m_pClient->PlusVersion() && m_pClient->PlusVersion() < 0x2600;
@


1.6
log
@Minor change on how Plus clients are shown
@
text
@d99 1
a99 1
			if(m_pClient->credits->GetCurrentIdentState(m_pClient->GetIP()) != IS_IDENTIFIED)
@


1.5
log
@First fix post beta 1 (I'm to blame!)
@
text
@d181 2
a182 3
											_T(" [") + 
											::GetClientNameAndVersionString(m_pClient) +
											_T("]"));
d214 1
a214 1
	if(!m_pClient->GetModVersion().IsEmpty())
@


1.4
log
@Minor changes.
Returned project to VS2002 ;-)
@
text
@d235 1
a235 1
		strBuffer.Format(_T("%s:%i"), inet_ntoa(server));
@


1.3
log
@TRY & CATCH
@
text
@d232 1
d235 3
a237 2
		strBuffer.Format(_T("%s"), inet_ntoa(server));
		m_ctrlServerIP.SetWindowText(strBuffer);
d241 1
a241 1
		{	
d245 1
a245 1
		{	
@


1.2
log
@Localization and some fixes for new detail dialogs by FoRcHa
@
text
@d70 2
d77 1
a77 2
	
// client-icon >>> ------------------------------------------------------------
d287 2
d293 2
d306 2
@


1.1
log
@new dialogs for file- & client-details
@
text
@a67 4
void CCDGeneral::Localize(void)
{
}

d166 1
a166 1
			strBuffer.Format(_T("%02X"), m_pClient->GetUserHash()[i]);
d286 16
a301 1
}@

