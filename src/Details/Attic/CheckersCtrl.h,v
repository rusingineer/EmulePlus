head	1.2;
access;
symbols
	Interim_Release_1-1a_RC1:1.1
	Interim_Release_1-1a_beta2:1.1
	Interim_Release_1-1a_beta1:1.1
	PublicRelease_1_1:1.1
	Interim_Release_1-1_beta1:1.1
	PublicRelease_1o:1.1
	Interim_Release_1o_RC1:1.1
	Interim_Release_1o_beta1:1.1
	PublicRelease_1n:1.1
	Interim_Release_1n_RC2:1.1
	Interim_Release_1n_RC1:1.1
	Interim_Release_1n_beta2:1.1
	PublicRelease_1m:1.1
	Interim_Release_1m_beta1:1.1
	PublicRelease_1l:1.1
	Interim_Release_1l_RC3:1.1
	Interim_Release_1l_RC2:1.1
	Interim_Release_1l_RC1:1.1
	Interim_Release_1l_beta2:1.1
	Interim_Release_1l_beta1:1.1
	PublicRelease_1k:1.1
	Interim_Release_1k_RC4:1.1
	Interim_1k_RC3:1.1
	Interim_1k_RC2:1.1
	Interim_Release_1k_RC1:1.1
	Interim_Release_1k_beta5:1.1
	Intrerim_Release_1k_beta4:1.1
	Interim_Release_1k_beta1:1.1
	PublicRelease_1j:1.1
	Interim_Release_1J_RC3:1.1
	Interim_Release_1j_RC3:1.1
	Interim_Release_1j_RC2:1.1
	Interim_Release_1j_RC1:1.1
	Interim_Release_1j_beta2:1.1
	Interim_Release_1j_beta1:1.1
	PublicRelease_1i:1.1
	Interim_Release_1i_RC6:1.1
	Interim_Release_1i_RC3:1.1
	Interim_Release_1i_RC2:1.1
	Interim_Release_1i_RC1:1.1
	Interim_Release_1i_beta3:1.1
	Interim_Release_1i_beta2:1.1
	Interim_Release_1i_beta1:1.1
	PublicRelease_1h:1.1
	Interim_Release_1h_rc2:1.1
	Interim_Release_1h_RC1:1.1
	Interim_Release_1h_beta2:1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.11.27.05.27.07;	author aw3;	state dead;
branches;
next	1.1;

1.1
date	2003.08.23.00.32.24;	author forcha;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Detailed file parts information (removed old implementation).
@
text
@/*=============================================================================
 * This is an MFC based extension class.
 * Copyright (C) 2001 YEAsoft Int'l.
 * All rights reserved.
 *=============================================================================
 * Copyright (c) 2001 YEAsoft Int'l (Leo Moll, Andrea Pennelli).
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from the
 * use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software in
 *    a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 
 * 3. This notice may not be removed or altered from any source distribution.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *=============================================================================
 * FILENAME		:	CheckersCtrl.h
 * PURPOSE		:	Declaration of the Checkers Control class
 * SCOPE		:	
 * HISTORY		: =============================================================
 * 
 * $Log: CheckersCtrl.h,v $
 * Revision 1.1  2003/08/23 00:32:24  forcha
 * *** empty log message ***
 *
 * Revision 1.8  2001/11/28 18:12:14  leo
 * Fixed ClassWizard Comments
 *
 * Revision 1.7  2001/11/27 12:46:51  leo
 * Added support for deferred redraw
 *
 * Revision 1.6  2001/11/24 16:50:38  leo
 * Fixed overridables. Added missing methods
 *
 * Revision 1.5  2001/11/23 21:28:21  leo
 * Fixed scrollbar calculation
 * Implemented EnsureVisible
 *
 * Revision 1.4  2001/11/23 19:11:52  leo
 * Added more functionality (Insert and Delete items)
 *
 * Revision 1.3  2001/11/23 16:47:15  leo
 * Optimized allocation algorithm and reposition/size/tooltip stuff
 *
 * Revision 1.2  2001/11/23 15:06:06  leo
 * Improved color support
 *
 * Revision 1.1  2001/11/22 19:01:12  leo
 * Initial revision
 *
 *============================================================================*/
#ifndef __CheckersCtrl_h__
#define __CheckersCtrl_h__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

/*=============================================================================
 * CHECKERS CONTROL CLASS
 *============================================================================*/
class CCheckersCtrl : public CWnd
{
public:
	// Construction
	CCheckersCtrl				();
				
public:
	// Attributes
	int							GetMinSize				() const { return m_iMinSize; }
	int							GetMaxSize				() const { return m_iMaxSize; }
	BOOL						SetSizeLimits			(int iMinSize, int iMaxSize, BOOL bRedraw = TRUE);
	int							GetItemCount			() const { return m_iCheckers; }
	BOOL						SetItemCount			(int iCheckers, BYTE bInitialState = 0, DWORD dwData = 0, LPCTSTR pszTip = LPSTR_TEXTCALLBACK, BOOL bRedraw = TRUE);
	BOOL						IsAutoResize			() const { return m_iMinSize != m_iMaxSize; }
	BOOL						SetColorsArray			(COLORREF *pColors, int iNumColors, BOOL bRedraw = TRUE);
	void						SetDefaultColors		(BOOL bRedraw = TRUE);

	BOOL						SetItemData				(int nItem, DWORD dwData);
	DWORD						GetItemData				(int nItem) const;
	BOOL						SetItemDataPtr			(int nItem, void *pData) { return SetItemData (nItem, (DWORD) pData); }
	void *						GetItemDataPtr			(int nItem) const { return (void *) GetItemData (nItem); }

	BOOL						SetItemState			(int nItem, BYTE bState, BOOL bRedraw = TRUE);
	BYTE						GetItemState			(int nItem) const;
	BOOL						SetItemStateArray		(BYTE *baState, int cbSize = -1, BOOL bRedraw = TRUE);
	BOOL						GetItemStateArray		(BYTE *baState, int cbSize) const;

	BOOL						SetItemToolTip			(int nItem, LPCTSTR pszTip = LPSTR_TEXTCALLBACK);
	BOOL						GetItemToolTip			(int nItem, CString& str) const;

	CToolTipCtrl &				GetToolTipCtrl			() { return m_ctrlToolTip; }
	const CToolTipCtrl &		GetToolTipCtrl			() const { return m_ctrlToolTip; }

public:
	// Operations
	BOOL						Create					(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);
	BOOL						ResetState				(BYTE bState = 0, BOOL bRedraw = TRUE);
	BOOL						InsertItem				(int nItem, BYTE bInitialState = 0, DWORD dwData = 0, LPCTSTR pszTip = LPSTR_TEXTCALLBACK, BOOL bRedraw = TRUE) { return InsertItems (nItem, 1, bInitialState, dwData, pszTip, bRedraw); }
	BOOL						InsertItems				(int nItem, int nCount = 1, BYTE bInitialState = 0, DWORD dwData = 0, LPCTSTR pszTip = LPSTR_TEXTCALLBACK, BOOL bRedraw = TRUE);
	BOOL						DeleteItem				(int nItem, BOOL bRedraw = TRUE) { return DeleteItems (nItem, 1, bRedraw); }
	BOOL						DeleteItems				(int nItem, int nCount = 1, BOOL bRedraw = TRUE);
	BOOL						DeleteAllItems			(BOOL bRedraw = TRUE) { return SetItemCount (0, bRedraw); }
	int							FindItem				(DWORD dwData) const;
	int							HitTest					(CPoint pt) const;
	BOOL						EnsureVisible			(int nItem, BOOL bPartialOK);
	BOOL						EnableToolTips			(BOOL bEnable);
	void						Redraw					() { Redraw (TRUE); }

	
// Overrides
public:
	virtual BOOL				OnGetToolTipText		(int nItem, BYTE bState, DWORD dwParam, TOOLTIPTEXT *pTTT);
	virtual BOOL				OnLeftClick				(BOOL bDoubleClick, UINT nFlags, CPoint point, int nItem, BYTE bState, DWORD dwParam) { return FALSE; }
	virtual BOOL				OnMiddleClick			(BOOL bDoubleClick, UINT nFlags, CPoint point, int nItem, BYTE bState, DWORD dwParam) { return FALSE; }
	virtual BOOL				OnRightClick			(BOOL bDoubleClick, UINT nFlags, CPoint point, int nItem, BYTE bState, DWORD dwParam) { return FALSE; }

public:
				
	// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CCheckersCtrl)
	protected:
	virtual void PreSubclassWindow();
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	//}}AFX_VIRTUAL
				
	// Implementation
public:
	virtual ~CCheckersCtrl		();
				
	// Generated message map functions
protected:
				
	//{{AFX_MSG(CCheckersCtrl)
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
	afx_msg void OnSetFocus(CWnd* pOldWnd);
	afx_msg BOOL OnEraseBkgnd(CDC* pDC);
	afx_msg void OnPaint();
	afx_msg void OnSize(UINT nType, int cx, int cy);
	afx_msg void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnLButtonDblClk( UINT nFlags, CPoint point );
	afx_msg void OnMButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnMButtonDblClk( UINT nFlags, CPoint point );
	afx_msg void OnRButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnRButtonDblClk( UINT nFlags, CPoint point );
	afx_msg void OnSettingChange(UINT uFlags, LPCTSTR lpszSection);
	afx_msg void OnSysColorChange();
	afx_msg void OnDestroy();
	//}}AFX_MSG
	afx_msg BOOL OnToolTipNeedText(UINT id, NMHDR * pTTTStruct, LRESULT * pResult);
	DECLARE_MESSAGE_MAP()
					
// Implementation
protected:
	void						CommonConstructor		();
	BOOL						InitializeControl		();
	void						UninitializeControl		();
	BOOL						CreateToolTip			();
	BOOL						CreateScrollBar			();
	BOOL						CheckScrollBar			(CRect &rc, int iSize) { return CheckScrollBar (rc, iSize, m_iCheckers); }
	BOOL						CheckScrollBar			(CRect &rc, int iSize, int iCheckers);
	void						EnableScrollBar			(BOOL bEnable = TRUE);
	BOOL						IsScrollBarVisible		() const { return m_ctrlScroll.IsWindowVisible (); }
	void						UpdateTips				();
	BOOL						Realloc					(int iCheckers);
	BOOL						RecalcSizes				();
	BOOL						RecalcSizes				(int iCheckers, BOOL &bNeedsRepos);
	void						RepositionToolTips		();
	BOOL						RegenerateImageList		();
	void						Redraw					(BOOL bRedraw);
	void						Redraw					(CDC *pDC);
	void						SendClickNotification	(UINT code, UINT nFlags, int nItem, DWORD dwData, CPoint point);



// Implementation
protected:
	BOOL						m_bInitialized;
	BOOL						m_bHasToolTips;
	int							m_iMinSize;
	int							m_iMaxSize;
	int							m_iSize;
	int							m_iCheckers;
	int							m_iAllocItems;
	int							m_iColors;
	COLORREF *					m_crArray;
	BYTE *						m_stArray;
	DWORD *						m_dwArray;
	CImageList					m_ilCheckers;
	CScrollBar					m_ctrlScroll;
	CToolTipCtrl				m_ctrlToolTip;

	// color stuff
	static COLORREF				m_crDefArray[16];
	COLORREF					m_crSmaArray[16];
	COLORREF *					m_crDynArray;

	DECLARE_DYNCREATE(CCheckersCtrl)
};


#endif //__CheckersCtrl_h__
//
// EoF
////////
@


1.1
log
@*** empty log message ***
@
text
@d35 3
@

