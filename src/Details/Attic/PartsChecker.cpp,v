head	1.4;
access;
symbols
	Interim_Release_1-1a_RC1:1.3
	Interim_Release_1-1a_beta2:1.3
	Interim_Release_1-1a_beta1:1.3
	PublicRelease_1_1:1.3
	Interim_Release_1-1_beta1:1.3
	PublicRelease_1o:1.1
	Interim_Release_1o_RC1:1.1
	Interim_Release_1o_beta1:1.1
	PublicRelease_1n:1.1
	Interim_Release_1n_RC2:1.1
	Interim_Release_1n_RC1:1.1
	Interim_Release_1n_beta2:1.1
	PublicRelease_1m:1.1
	Interim_Release_1m_beta1:1.1
	PublicRelease_1l:1.1
	Interim_Release_1l_RC3:1.1
	Interim_Release_1l_RC2:1.1
	Interim_Release_1l_RC1:1.1
	Interim_Release_1l_beta2:1.1
	Interim_Release_1l_beta1:1.1
	PublicRelease_1k:1.1
	Interim_Release_1k_RC4:1.1
	Interim_1k_RC3:1.1
	Interim_1k_RC2:1.1
	Interim_Release_1k_RC1:1.1
	Interim_Release_1k_beta5:1.1
	Intrerim_Release_1k_beta4:1.1
	Interim_Release_1k_beta1:1.1
	PublicRelease_1j:1.1
	Interim_Release_1J_RC3:1.1
	Interim_Release_1j_RC3:1.1
	Interim_Release_1j_RC2:1.1
	Interim_Release_1j_RC1:1.1
	Interim_Release_1j_beta2:1.1
	Interim_Release_1j_beta1:1.1
	PublicRelease_1i:1.1
	Interim_Release_1i_RC6:1.1
	Interim_Release_1i_RC3:1.1
	Interim_Release_1i_RC2:1.1
	Interim_Release_1i_RC1:1.1
	Interim_Release_1i_beta3:1.1
	Interim_Release_1i_beta2:1.1
	Interim_Release_1i_beta1:1.1
	PublicRelease_1h:1.1
	Interim_Release_1h_rc2:1.1
	Interim_Release_1h_RC1:1.1
	Interim_Release_1h_beta2:1.1;
locks; strict;
comment	@// @;


1.4
date	2004.11.27.05.27.07;	author aw3;	state dead;
branches;
next	1.3;

1.3
date	2004.10.05.15.43.13;	author aw3;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.04.22.48.56;	author kush_eplus;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.23.00.32.24;	author forcha;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Detailed file parts information (removed old implementation).
@
text
@// PartsChecker.cpp: implementation of the CPartsChecker class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "PartsChecker.h"
#include "..\otherfunctions.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CPartsChecker::CPartsChecker()
{
	m_iLastClick = -1;
}

BOOL CPartsChecker::OnGetToolTipText(int nItem, BYTE bState, DWORD dwParam, TOOLTIPTEXT *pTTT)
{
	m_strBuffer.Format(GetResString(IDS_FD_PARTFILLEDPERCENTAGE), nItem + 1, GetItemData(nItem));
	pTTT->lpszText = (LPTSTR)m_strBuffer.GetString();
	return TRUE;
}
BEGIN_MESSAGE_MAP(CPartsChecker, CCheckersCtrl)
END_MESSAGE_MAP()

void CPartsChecker::Init()
{
	COLORREF crColors[64];

	for (unsigned ui = 0; ui < 64; ui++)
		crColors[ui] = RGB(0, 0, ui << 2);

	SetColorsArray(crColors, 64);
}
@


1.3
log
@Filenames in #includes must be the same as they are in CVS (required for portability);
Removed inefficient buffer reallocation.
@
text
@@


1.2
log
@updated and enabled file details Parts code
@
text
@d5 1
a5 1
#include "StdAfx.h"
d7 1
a7 1
#include "..\OtherFunctions.h"
a25 1
	m_strBuffer.ReleaseBuffer();
d27 1
a27 1
	pTTT->lpszText = m_strBuffer.GetBuffer();
d37 2
a38 2
	for (BYTE i = 0; i < 64; i++)
		crColors[i] = RGB(0, 0, i << 2);	// (i << 2) is optimised (i * 4)
d41 1
a41 1
}@


1.1
log
@*** empty log message ***
@
text
@d5 1
a5 1
#include "stdafx.h"
d7 1
a7 1
#include ".\partschecker.h"
d26 3
a28 2
	m_csBuffer.Format(_T("Part %d:\r\nBytes in Part: %d"), nItem+1, GetItemData(nItem));
	pTTT->lpszText = (LPTSTR)(LPCTSTR)m_csBuffer;
d36 6
a41 6
	COLORREF crColors[64];	
	for(int i = 0; i < 64; i++)
	{
		crColors[i] = RGB(0,0,i*4);
	}
	SetColorsArray(crColors, 64, TRUE);
@

