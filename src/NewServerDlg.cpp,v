head	1.10;
access;
symbols
	PublicRelease_1_2e:1.10
	Interim_Release_1-2e_RC1:1.10
	PublicRelease_1_2d:1.10
	Interim_Release_1-2d_RC1:1.10
	Interim_Release_1-2d_beta1:1.9
	PublicRelease_1_2c:1.9
	Interim_Release_1-2c_RC1:1.9
	Interim_Release_1-2c_beta1:1.9
	PublicRelease_1_2b:1.9
	Interim_Release_1-2b_RC1:1.9
	PublicRelease_1_2a:1.9
	Interim_Release_1-2a_RC1:1.9
	Interim_Release_1-2a_beta2:1.8
	Interim_Release_1-2a_beta1:1.8
	PublicRelease_1_2:1.8
	Interim_Release_1-2_RC1:1.8
	Interim_Release_1-2_beta1:1.8
	PublicRelease_1_1g:1.8
	Interim_Release_1-1g_RC3:1.8
	Interim_Release_1-1g_RC2:1.8
	Interim_Release_1-1g_RC1:1.8
	Interim_Release_1-1g_beta2:1.6
	Interim_Release_1-1g_beta1:1.6
	PublicRelease_1_1f:1.6
	Interim_Release_1-1f_RC1:1.6
	PublicRelease_1_1e:1.6
	Interim_Release_1-1e_RC2:1.6
	Interim_Release_1-1e_RC1:1.6
	Interim_Release_1-1e_beta1:1.6
	PublicRelease_1_1d:1.6
	Interim_Release_1-1d_RC1:1.6
	PublicRelease_1_1c:1.6
	Interim_Release_1-1c_RC1:1.6
	Interim_Release_1-1c_beta2:1.6
	Interim_Release_1-1c_beta1:1.6
	PublicRelease_1_1b:1.6
	Interim_Release_1-1b_RC1:1.6
	PublicRelease_1_1a:1.6
	Interim_Release_1-1a_RC2:1.6
	Interim_Release_1-1a_RC1:1.6
	Interim_Release_1-1a_beta2:1.6
	Interim_Release_1-1a_beta1:1.6
	PublicRelease_1_1:1.5
	Interim_Release_1-1_beta1:1.5
	PublicRelease_1o:1.5
	Interim_Release_1o_RC1:1.5
	Interim_Release_1o_beta1:1.5
	PublicRelease_1n:1.5
	Interim_Release_1n_RC2:1.5
	Interim_Release_1n_RC1:1.5
	Interim_Release_1n_beta2:1.5
	Interim_Release_1n_beta1:1.5
	PublicRelease_1m:1.5
	Interim_Release_1m_beta1:1.5
	PublicRelease_1l:1.5
	Interim_Release_1l_RC3:1.5
	Interim_Release_1l_RC2:1.5
	Interim_Release_1l_RC1:1.5
	Interim_Release_1l_beta2:1.5
	Interim_Release_1l_beta1:1.5
	PublicRelease_1k:1.5
	Interim_Release_1k_RC4:1.5
	Interim_1k_RC3:1.5
	Interim_1k_RC2:1.5
	Interim_Release_1k_RC1:1.3
	Interim_Release_1k_beta5:1.2
	Intrerim_Release_1k_beta4:1.2
	Interim_Release_1k_beta1:1.2
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.2
	PublicRelease_1i:1.2
	Interim_Release_1i_RC6:1.2
	Interim_Release_1i_RC3:1.2
	Interim_Release_1i_RC2:1.2
	Interim_Release_1i_RC1:1.2
	Interim_Release_1i_beta3:1.2
	Interim_Release_1i_beta2:1.2
	Interim_Release_1i_beta1:1.2
	PublicRelease_1h:1.2
	Interim_Release_1h_rc2:1.2
	Interim_Release_1h_RC1:1.2
	Interim_Release_1h_beta2:1.2
	Interim_Release_1h_beta1_now:1.2
	Interim_Release_1h_beta1:1.2
	PublicRelease_1g:1.2
	Interim_Release_1g_RC6_Final:1.2
	Interim_Release_1g_RC6:1.2
	Interim_Release_1g_RC5:1.2
	Interim_Release_1g_RC4:1.2
	Interim_Release_1g_RC3:1.2
	Interim_Release_1g_beta2:1.2
	Interim_Release_1g_beta1:1.2
	Interim_Release_1f_RC4:1.2
	Interim_Release_1f_RC3:1.2
	Interim_Release_1f_RC2:1.2
	Interim_Release_1f_RC:1.2
	Interim_Release_1f_beta2:1.2
	Interim_Release_1f_beta1:1.2
	PublicRelease_1e:1.2
	Interim_Release_1e_RC2:1.2
	Interim_Release_1e_RC:1.2
	Interim_Release_1e_beta3:1.2
	Interim_Release_1e_beta2:1.2
	Interim_Release_1e_beta2_before_kuchin:1.2
	Interim_Release_1e_beta1:1.2
	PublicRelease_1c:1.2
	featurestest:1.2.0.8
	Interim_Release_1c_RC:1.2
	Interim_Release_1c_beta2:1.2
	Interim_Release_1c_beta1:1.2
	threaded_downloadqueue:1.2.0.6
	PublicRelease_1b:1.2
	Interim_Release_1b_beta2:1.2
	Interim_Release_1b_beta1:1.2
	proxydeadlake:1.2.0.4
	PublicRelease_1a:1.2
	Interim_Release_1a_beta2:1.2
	BerkeleyDb:1.2.0.2
	Interim_Release_1a_beta1:1.2
	PublicRelease_1:1.2
	goldfish:1.2
	eMulePlus_1_RC2:1.2
	eMulePlus_26b_1RC1:1.2
	PreRelease_26b_i0e:1.2
	before_26d_merge:1.2
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.10
date	2008.03.03.04.38.38;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.02.03.58.11;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.27.22.11.48;	author eklmn;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.27.20.31.05;	author eklmn;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.28.04.25.27;	author aw3;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.31.22.53.21;	author kush_eplus;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.31.22.26.55;	author dropf;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.26.22.10.26;	author aw3;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.16.22.01.47;	author lord_kiron;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.20;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.17;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.10
log
@ELEMENT_COUNT -> ARRSIZE.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "ServerWnd.h"
#include "NewServerDlg.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNAMIC(CNewServerDlg, CDialog)
CNewServerDlg::CNewServerDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CNewServerDlg::IDD, pParent)
	, m_strServerAddr(_T(""))
	, m_strPort(_T("4661"))
	, m_strServerName(_T(""))
	, m_bAddAuxPort(FALSE)
	, m_strAuxPort(_T("0"))
{
	m_cpPosition.x = 0;
	m_cpPosition.y = 0;
	m_iCorner = 0;	// top-left
	m_bUsePos = false;
	m_pParent = NULL;
}

CNewServerDlg::~CNewServerDlg()
{
}

void CNewServerDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_IPADDRESS, m_strServerAddr);
	DDX_Text(pDX, IDC_SPORT, m_strPort);
	DDX_Text(pDX, IDC_SNAME, m_strServerName);
	DDX_Check(pDX, IDC_AUXPORT_CHECKBOX, m_bAddAuxPort);
	DDX_Text(pDX, IDC_AUXPORT, m_strAuxPort);
}


BEGIN_MESSAGE_MAP(CNewServerDlg, CDialog)
	ON_BN_CLICKED(IDC_ADDSERVER, OnBnClickedAddserver)
	ON_BN_CLICKED(IDC_AUXPORT_CHECKBOX, OnBnClickedAuxportCheckbox)
END_MESSAGE_MAP()


BOOL CNewServerDlg::OnInitDialog()
{
	CDialog::OnInitDialog();
	if(m_bUsePos)
	{
		CRect rWnd;
		GetWindowRect(rWnd);
		
		switch(m_iCorner)
		{
			case 0: // top-left
				SetWindowPos(NULL, m_cpPosition.x, m_cpPosition.y, 0, 0, SWP_NOZORDER | SWP_NOSIZE);
				break;
			case 1:	// top-right
				SetWindowPos(NULL, m_cpPosition.x - rWnd.Width(), m_cpPosition.y, 0, 0, SWP_NOZORDER | SWP_NOSIZE);
				break;
			case 2: // bottom-right
				SetWindowPos(NULL, m_cpPosition.x - rWnd.Width(), m_cpPosition.y - rWnd.Height(), 0, 0, SWP_NOZORDER | SWP_NOSIZE);
				break;
			case 3: // bottom-left
				SetWindowPos(NULL, m_cpPosition.x, m_cpPosition.y - rWnd.Height(), 0, 0, SWP_NOZORDER | SWP_NOSIZE);
				break;
			default:
				break;
		}
	}
	Localize();
	UpdateData(false);

	if (!g_App.m_pPrefs->IsServerAuxPortUsed())
	{
		GetDlgItem(IDC_AUXPORT_CHECKBOX)->EnableWindow(FALSE);
		GetDlgItem(IDC_AUXPORT)->EnableWindow(FALSE);
	}
	else
	{
		if (m_strAuxPort.Compare(_T("0")) == 0)
		{
			CheckDlgButton(IDC_AUXPORT_CHECKBOX, BST_UNCHECKED);
			GetDlgItem(IDC_AUXPORT)->EnableWindow(FALSE);
		}
		else
		{
			CheckDlgButton(IDC_AUXPORT_CHECKBOX, BST_CHECKED);
		}
	}

	if (m_bServerEditMode)
	{
		static_cast<CEdit*>(GetDlgItem(IDC_IPADDRESS))->SetReadOnly();
	}

	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
}

void CNewServerDlg::SetInitialPos(CPoint pos, int iCorner)
{
	m_iCorner = iCorner;
	m_cpPosition = pos;
	m_bUsePos = true;
}

void CNewServerDlg::OnBnClickedAddserver()
{
	UpdateData();
	if(!m_pParent)
		return;

	if ((m_strPort.Compare(m_strAuxPort) == 0) || (m_strAuxPort.Compare(_T("0")) == 0))
	{
		m_strAuxPort = _T("");
	}

	m_pParent->AddServer(m_strServerAddr, m_strPort, m_strServerName, m_strAuxPort, m_bServerEditMode);
	OnOK();
}

void CNewServerDlg::SetParent(CServerWnd* pParent)
{
	m_pParent = pParent;
}

void CNewServerDlg::SetLabels(CString strAddress, CString strPort, CString strName, CString strAuxPort)
{
	m_strServerAddr	= strAddress;
	m_strPort		= strPort;
	m_strServerName	= strName;
	m_strAuxPort	= strAuxPort;
}

void CNewServerDlg::Localize()
{
	static const uint16 s_auResTbl[][2] =
	{
		{ IDC_IPADDRESS_LBL, IDS_SV_ADDRESS },
		{ IDC_PORT_LBL, IDS_PORT },
		{ IDC_NAME_LBL, IDS_SW_NAME },
		{ IDC_ADDSERVER, IDS_SV_ADD },
		{ IDC_AUXPORT_CHECKBOX, IDS_SV_AUXPORT_CHECKBOX },
		{ IDCANCEL, IDS_CANCEL }
	};

	if(m_hWnd)
	{		
		for (uint32 i = 0; i < ARRSIZE(s_auResTbl); i++)
			SetDlgItemText(s_auResTbl[i][0], GetResString(static_cast<UINT>(s_auResTbl[i][1])));

		if (m_bServerEditMode)
		{
			SetDlgItemText(IDC_ADDSERVER, GetResString(IDS_OK_BUTTON));
			SetWindowText(GetResString(IDS_SV_EDITSERVER));
		}
		else
		{
			SetWindowText(GetResString(IDS_SV_NEWSERVER));
		}
	}
}

void CNewServerDlg::OnBnClickedAuxportCheckbox()
{
	UpdateData();
	GetDlgItem(IDC_AUXPORT)->EnableWindow(m_bAddAuxPort);
}
@


1.9
log
@Fixed "OK" localization for Edit Server dialog.
@
text
@d1 1
a1 1
// NewServerDlg.cpp : implementation file
d3 13
a27 2
// CNewServerDlg dialog

a38 1
	
a39 1

a40 1

a64 2
// CNewServerDlg message handlers

d158 1
a158 1
	static const int s_aiResTbl[][2] =
d170 2
a171 4
		for (uint32 i = 0; i < ELEMENT_COUNT(s_aiResTbl); i++)
		{
			SetDlgItemText(s_aiResTbl[i][0], GetResString(static_cast<UINT>(s_aiResTbl[i][1])));
		}
@


1.8
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d171 1
a171 1
			SetDlgItemText(IDC_ADDSERVER, _T("OK"));
@


1.7
log
@renamed 3 variables
@
text
@d88 1
a88 1
	if (!g_App.g_pPrefs->IsServerAuxPortUsed())
@


1.6
log
@Removed double strings.
@
text
@d88 1
a88 1
	if (!g_eMuleApp.m_pGlobPrefs->IsServerAuxPortUsed())
@


1.5
log
@tab alignement correction
@
text
@d155 1
a155 1
		{ IDC_PORT_LBL, IDS_SV_PORT },
@


1.4
log
@added auxiliary port support from KuSh (commited with eklmn's authorization)
@
text
@d167 1
a167 1
	}
@


1.3
log
@Unified localization; minor improvements.
@
text
@d23 2
d46 2
d53 1
d87 24
d128 7
a134 2
	m_pParent->AddServer(m_strServerAddr, m_strPort, m_strServerName);
	EndDialog(0x00);
d142 8
d157 3
a159 1
		{ IDC_ADDSERVER, IDS_SV_ADD }
a163 2
		SetWindowText(GetResString(IDS_SV_NEWSERVER));

d165 1
d168 11
d181 1
a181 1
void CNewServerDlg::OnOK()
d183 2
a184 1
	OnBnClickedAddserver();
@


1.2
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d110 8
d121 3
a123 4
		GetDlgItem(IDC_IPADDRESS_LBL)->SetWindowText(GetResString(IDS_SV_ADDRESS));
		GetDlgItem(IDC_PORT_LBL)->SetWindowText(GetResString(IDS_SV_PORT));
		GetDlgItem(IDC_NAME_LBL)->SetWindowText(GetResString(IDS_SW_NAME));
		GetDlgItem(IDC_ADDSERVER)->SetWindowText(GetResString(IDS_SV_ADD));
@


1.1
log
@*** empty log message ***
@
text
@d9 5
@


1.1.4.1
log
@updating this branch...
@
text
@@

