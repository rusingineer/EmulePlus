head	1.6;
access;
symbols
	PublicRelease_1_2e:1.6
	Interim_Release_1-2e_RC1:1.6
	PublicRelease_1_2d:1.6
	Interim_Release_1-2d_RC1:1.6
	Interim_Release_1-2d_beta1:1.5
	PublicRelease_1_2c:1.4
	Interim_Release_1-2c_RC1:1.4
	Interim_Release_1-2c_beta1:1.4
	PublicRelease_1_2b:1.4
	Interim_Release_1-2b_RC1:1.4
	PublicRelease_1_2a:1.4
	Interim_Release_1-2a_RC1:1.4
	Interim_Release_1-2a_beta2:1.4
	Interim_Release_1-2a_beta1:1.4
	PublicRelease_1_2:1.4
	Interim_Release_1-2_RC1:1.4
	Interim_Release_1-2_beta1:1.4
	PublicRelease_1_1g:1.4
	Interim_Release_1-1g_RC3:1.4
	Interim_Release_1-1g_RC2:1.4
	Interim_Release_1-1g_RC1:1.4
	Interim_Release_1-1g_beta2:1.4
	Interim_Release_1-1g_beta1:1.4
	PublicRelease_1_1f:1.4
	Interim_Release_1-1f_RC1:1.4
	PublicRelease_1_1e:1.4
	Interim_Release_1-1e_RC2:1.4
	Interim_Release_1-1e_RC1:1.4
	Interim_Release_1-1e_beta1:1.4
	PublicRelease_1_1d:1.4
	Interim_Release_1-1d_RC1:1.4
	PublicRelease_1_1c:1.4
	Interim_Release_1-1c_RC1:1.4
	Interim_Release_1-1c_beta2:1.4
	Interim_Release_1-1c_beta1:1.4
	PublicRelease_1_1b:1.4
	Interim_Release_1-1b_RC1:1.4
	PublicRelease_1_1a:1.4
	Interim_Release_1-1a_RC2:1.4
	Interim_Release_1-1a_RC1:1.4
	Interim_Release_1-1a_beta2:1.4
	Interim_Release_1-1a_beta1:1.4
	PublicRelease_1_1:1.4
	Interim_Release_1-1_beta1:1.4
	PublicRelease_1o:1.4
	Interim_Release_1o_RC1:1.4
	Interim_Release_1o_beta1:1.4
	PublicRelease_1n:1.4
	Interim_Release_1n_RC2:1.4
	Interim_Release_1n_RC1:1.4
	Interim_Release_1n_beta2:1.4
	Interim_Release_1n_beta1:1.4
	PublicRelease_1m:1.4
	Interim_Release_1m_beta1:1.4
	PublicRelease_1l:1.4
	Interim_Release_1l_RC3:1.4
	Interim_Release_1l_RC2:1.4
	Interim_Release_1l_RC1:1.4
	Interim_Release_1l_beta2:1.4
	Interim_Release_1l_beta1:1.4
	PublicRelease_1k:1.4
	Interim_Release_1k_RC4:1.4
	Interim_1k_RC3:1.4
	Interim_1k_RC2:1.4
	Interim_Release_1k_RC1:1.4
	Interim_Release_1k_beta5:1.4
	Intrerim_Release_1k_beta4:1.4
	Interim_Release_1k_beta1:1.4
	PublicRelease_1j:1.4
	Interim_Release_1J_RC3:1.4
	Interim_Release_1j_RC3:1.4
	Interim_Release_1j_RC2:1.4
	Interim_Release_1j_RC1:1.4
	Interim_Release_1j_beta2:1.4
	Interim_Release_1j_beta1:1.4
	PublicRelease_1i:1.4
	Interim_Release_1i_RC6:1.4
	Interim_Release_1i_RC3:1.4
	Interim_Release_1i_RC2:1.4
	Interim_Release_1i_RC1:1.4
	Interim_Release_1i_beta3:1.4
	Interim_Release_1i_beta2:1.4
	Interim_Release_1i_beta1:1.4
	PublicRelease_1h:1.4
	Interim_Release_1h_rc2:1.4
	Interim_Release_1h_RC1:1.4
	Interim_Release_1h_beta2:1.4
	Interim_Release_1h_beta1_now:1.4
	Interim_Release_1h_beta1:1.4
	PublicRelease_1g:1.4
	Interim_Release_1g_RC6_Final:1.4
	Interim_Release_1g_RC6:1.4
	Interim_Release_1g_RC5:1.4
	Interim_Release_1g_RC4:1.4
	Interim_Release_1g_RC3:1.4
	Interim_Release_1g_beta2:1.1
	Interim_Release_1g_beta1:1.1
	Interim_Release_1f_RC4:1.1
	Interim_Release_1f_RC3:1.1
	Interim_Release_1f_RC2:1.1
	Interim_Release_1f_RC:1.1
	Interim_Release_1f_beta2:1.1
	Interim_Release_1f_beta1:1.1
	PublicRelease_1e:1.1
	Interim_Release_1e_RC2:1.1
	Interim_Release_1e_RC:1.1
	Interim_Release_1e_beta3:1.1
	Interim_Release_1e_beta2:1.1
	Interim_Release_1e_beta2_before_kuchin:1.1
	Interim_Release_1e_beta1:1.1
	PublicRelease_1c:1.1
	featurestest:1.1.0.16
	Interim_Release_1c_RC:1.1
	Interim_Release_1c_beta2:1.1
	Interim_Release_1c_beta1:1.1
	threaded_downloadqueue:1.1.0.14
	PublicRelease_1b:1.1
	Interim_Release_1b_beta2:1.1
	Interim_Release_1b_beta1:1.1
	proxydeadlake:1.1.0.12
	PublicRelease_1a:1.1
	Interim_Release_1a_beta2:1.1
	BerkeleyDb:1.1.0.10
	Interim_Release_1a_beta1:1.1
	PublicRelease_1:1.1
	goldfish:1.1
	eMulePlus_1_RC2:1.1
	eMulePlus_26b_1RC1:1.1
	PreRelease_26b_i0e:1.1
	before_26d_merge:1.1
	Interim_Release_26b_i0d:1.1
	Interim_Release_26b_i0c:1.1
	Interim_Release_26b_i0b:1.1
	Interim_Release_26b_i0a:1.1
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2008.04.16.04.27.22;	author aw3;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.27.14.27.38;	author fuxie-dk;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.28.10.26.30;	author partyckip;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.22.18.04.22;	author partyckip;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.21.18.37.57;	author partyckip;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.22;	author cax2;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.28.16.54.24;	author cax2;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Simplified shared files hashing thread [KuSh].
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#define CMD_STOP	(WM_APP + 0)	// Shut down thread
#define CMD_HASH	(WM_APP + 1)	// Add a file to hash

struct UnknownFile_Struct;

class CProcessingCmdThread : public CWinThread
{
	DECLARE_DYNCREATE(CProcessingCmdThread)

public:
	CProcessingCmdThread();

	virtual BOOL InitInstance();

	bool StopThread();
	bool AddFileToHash(const CString &strFolder, const CString &strFileName);

protected:
	bool IsThreadAboutToStop();

//	Performs actual hashing of the file
	bool HashFile(UnknownFile_Struct *pStruct);

	afx_msg void OnHash(WPARAM wParam, LPARAM lParam);
	afx_msg void OnStop(WPARAM wParam, LPARAM lParam);

	DECLARE_MESSAGE_MAP()
};
@


1.5
log
@Removed unused stuff; Clean-up and formatting.
@
text
@d18 2
a19 1
class CSharedFileList;
d21 1
a21 1
enum ProcCommand {PC_QUIT=0,PC_HASH};
d23 1
a23 1
struct Process_Cmd_struct // stucture to pass command
d25 1
a25 6
	long lSize; // size of the structure
	ProcCommand eCommand; // command passed
	CSharedFileList *pOwner;
	TCHAR *cFileName;
	TCHAR *cFolder;
};
d27 2
a28 4
struct PThread_Init_struct
{
	HANDLE hCommandPipe;
};
d30 1
a30 1
// CProcessingCmdThread
d32 2
a33 3
class CProcessingCmdThread : public CWinThread
{
	DECLARE_DYNCREATE(CProcessingCmdThread)
d36 1
a36 4
	CProcessingCmdThread();           // protected constructor used by dynamic creation
	virtual ~CProcessingCmdThread();
	void SetStopThread(bool bStop);
	bool IsThreadAboutToStop(void);
d38 5
a42 1
	HANDLE m_hCommandPipe;
a43 6
public:
	virtual BOOL InitInstance();
	virtual int ExitInstance();
protected:
	CMutex m_StopLock;
	bool m_bStopThread;
a44 11
public:
	CEvent m_QuitPCmdEvent;
	BOOL SetStartupData(PThread_Init_struct* pInitStruct);
	virtual int Run();
	static bool SendQuitCommand(HANDLE hControlPipe);
	void SetThreadToStopProcessing(void);
	static bool AddFileToHash(HANDLE hControlPipe,CSharedFileList* pOwner, const CString &strFolder, const CString &strFileName);
protected:
	// Performs actual hashing of the file
	void HashFile(CSharedFileList *pOwner, const CString &strFolder, const CString &strFileName);
	void ReleaseHashStruct(Process_Cmd_struct* pStruct);
@


1.4
log
@unicode cleanup
@
text
@d1 15
a17 1
class CPartFile;
d26 1
a26 2
	CSharedFileList* pOwner;
	CPartFile* in_partfile_Owner;
d63 1
a63 1
	static bool AddFileToHash(HANDLE hControlPipe,CSharedFileList* pOwner, const CString& strFolder, const CString& strFileName, CPartFile* pPartFileOwner);
d66 1
a66 1
	void HashFile(CSharedFileList* pOwner, const CString& strFolder, const CString& strFileName, CPartFile* pPartFileOwner);
a67 2
public:

a68 2


@


1.3
log
@fixed crashes
@
text
@d14 2
a15 2
	char *cFileName;
	char *cFolder;
@


1.2
log
@char * to CString conversion
@
text
@d14 2
a15 2
	CString cFileName;
	CString cFolder;
d50 1
a50 1
	static bool AddFileToHash(HANDLE hControlPipe,CSharedFileList* pOwner, CString strFolder, CString strFileName, CPartFile* pPartFileOwner);
@


1.1
log
@*** empty log message ***
@
text
@d14 2
a15 2
	char *cFileName;
	char *cFolder;
d53 1
a53 1
	void HashFile(CSharedFileList* pOwner, CString strFolder, CString strFileName, CPartFile* pPartFileOwner);
@


1.1.4.1
log
@updating this branch...
@
text
@@

