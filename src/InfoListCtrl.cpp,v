head	1.103;
access;
symbols
	PublicRelease_1_2e:1.101
	Interim_Release_1-2e_RC1:1.100
	PublicRelease_1_2d:1.97
	Interim_Release_1-2d_RC1:1.97
	Interim_Release_1-2d_beta1:1.97
	PublicRelease_1_2c:1.96
	Interim_Release_1-2c_RC1:1.96
	Interim_Release_1-2c_beta1:1.95
	PublicRelease_1_2b:1.94
	Interim_Release_1-2b_RC1:1.94
	PublicRelease_1_2a:1.92
	Interim_Release_1-2a_RC1:1.92
	Interim_Release_1-2a_beta2:1.92
	Interim_Release_1-2a_beta1:1.90
	PublicRelease_1_2:1.87
	Interim_Release_1-2_RC1:1.87
	Interim_Release_1-2_beta1:1.87
	PublicRelease_1_1g:1.85
	Interim_Release_1-1g_RC3:1.85
	Interim_Release_1-1g_RC2:1.85
	Interim_Release_1-1g_RC1:1.85
	Interim_Release_1-1g_beta2:1.83
	Interim_Release_1-1g_beta1:1.81
	PublicRelease_1_1f:1.78
	Interim_Release_1-1f_RC1:1.78
	PublicRelease_1_1e:1.78
	Interim_Release_1-1e_RC2:1.78
	Interim_Release_1-1e_RC1:1.78
	Interim_Release_1-1e_beta1:1.77
	PublicRelease_1_1d:1.76
	Interim_Release_1-1d_RC1:1.76
	PublicRelease_1_1c:1.76
	Interim_Release_1-1c_RC1:1.76
	Interim_Release_1-1c_beta2:1.76
	Interim_Release_1-1c_beta1:1.76
	PublicRelease_1_1b:1.75
	Interim_Release_1-1b_RC1:1.75
	PublicRelease_1_1a:1.75
	Interim_Release_1-1a_RC2:1.75
	Interim_Release_1-1a_RC1:1.75
	Interim_Release_1-1a_beta2:1.75
	Interim_Release_1-1a_beta1:1.74
	PublicRelease_1_1:1.72
	Interim_Release_1-1_beta1:1.72
	PublicRelease_1o:1.70
	Interim_Release_1o_RC1:1.69
	Interim_Release_1o_beta1:1.69
	PublicRelease_1n:1.68
	Interim_Release_1n_RC2:1.68
	Interim_Release_1n_RC1:1.68
	Interim_Release_1n_beta2:1.66
	Interim_Release_1n_beta1:1.63
	PublicRelease_1m:1.63
	Interim_Release_1m_beta1:1.63
	PublicRelease_1l:1.63
	Interim_Release_1l_RC3:1.63
	Interim_Release_1l_RC2:1.63
	Interim_Release_1l_RC1:1.61
	Interim_Release_1l_beta2:1.61
	Interim_Release_1l_beta1:1.60
	PublicRelease_1k:1.56
	Interim_Release_1k_RC4:1.56
	Interim_1k_RC3:1.56
	Interim_1k_RC2:1.56
	Interim_Release_1k_RC1:1.56
	Interim_Release_1k_beta5:1.54
	Intrerim_Release_1k_beta4:1.54
	Interim_Release_1k_beta1:1.50
	PublicRelease_1j:1.48
	Interim_Release_1J_RC3:1.48
	Interim_Release_1j_RC3:1.48
	Interim_Release_1j_RC2:1.42
	Interim_Release_1j_RC1:1.42
	Interim_Release_1j_beta2:1.42
	Interim_Release_1j_beta1:1.42
	PublicRelease_1i:1.41
	Interim_Release_1i_RC6:1.41
	Interim_Release_1i_RC3:1.32
	Interim_Release_1i_RC2:1.31
	Interim_Release_1i_RC1:1.28
	Interim_Release_1i_beta3:1.28
	Interim_Release_1i_beta2:1.26
	Interim_Release_1i_beta1:1.24
	PublicRelease_1h:1.21
	Interim_Release_1h_rc2:1.21
	Interim_Release_1h_RC1:1.21
	Interim_Release_1h_beta2:1.21
	Interim_Release_1h_beta1_now:1.20
	Interim_Release_1h_beta1:1.20
	PublicRelease_1g:1.19
	Interim_Release_1g_RC6_Final:1.19
	Interim_Release_1g_RC6:1.18
	Interim_Release_1g_RC5:1.18
	Interim_Release_1g_RC4:1.18
	Interim_Release_1g_RC3:1.18
	Interim_Release_1g_beta2:1.16
	Interim_Release_1g_beta1:1.14
	Interim_Release_1f_RC4:1.11
	Interim_Release_1f_RC3:1.11
	Interim_Release_1f_RC2:1.11
	Interim_Release_1f_RC:1.11
	Interim_Release_1f_beta2:1.11
	Interim_Release_1f_beta1:1.9
	PublicRelease_1e:1.9
	Interim_Release_1e_RC2:1.9
	Interim_Release_1e_RC:1.9
	Interim_Release_1e_beta3:1.8
	Interim_Release_1e_beta2:1.8
	Interim_Release_1e_beta2_before_kuchin:1.8
	Interim_Release_1e_beta1:1.8
	PublicRelease_1c:1.7
	featurestest:1.7.0.2
	Interim_Release_1c_RC:1.7
	Interim_Release_1c_beta2:1.6
	Interim_Release_1c_beta1:1.6
	threaded_downloadqueue:1.6.0.2
	PublicRelease_1b:1.4
	Interim_Release_1b_beta2:1.4
	Interim_Release_1b_beta1:1.4
	proxydeadlake:1.4.0.4
	PublicRelease_1a:1.4
	Interim_Release_1a_beta2:1.4
	BerkeleyDb:1.4.0.2
	Interim_Release_1a_beta1:1.4
	PublicRelease_1:1.4
	goldfish:1.4
	eMulePlus_1_RC2:1.4
	eMulePlus_26b_1RC1:1.4
	PreRelease_26b_i0e:1.4
	before_26d_merge:1.4
	Interim_Release_26b_i0d:1.4
	Interim_Release_26b_i0c:1.4
	Interim_Release_26b_i0b:1.4
	Interim_Release_26b_i0a:1.4
	systraydlg:1.2.0.6
	plus26based:1.2.0.4
	Interim_Release_25b_i0b:1.2
	Proxy_Dev:1.2
	Interim_Release_25b_i0a:1.2.2.1
	proxytest:1.2.2.1.0.2
	official_sockets:1.2.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.103
date	2009.07.05.05.43.42;	author aw3;	state Exp;
branches;
next	1.102;

1.102
date	2009.06.17.02.27.14;	author aw3;	state Exp;
branches;
next	1.101;

1.101
date	2009.04.08.04.05.38;	author aw3;	state Exp;
branches;
next	1.100;

1.100
date	2008.11.03.05.45.23;	author aw3;	state Exp;
branches;
next	1.99;

1.99
date	2008.07.17.04.19.07;	author aw3;	state Exp;
branches;
next	1.98;

1.98
date	2008.07.14.04.43.59;	author aw3;	state Exp;
branches;
next	1.97;

1.97
date	2008.02.20.04.35.53;	author aw3;	state Exp;
branches;
next	1.96;

1.96
date	2007.07.07.04.07.37;	author aw3;	state Exp;
branches;
next	1.95;

1.95
date	2007.02.17.05.48.45;	author aw3;	state Exp;
branches;
next	1.94;

1.94
date	2007.01.17.07.40.13;	author aw3;	state Exp;
branches;
next	1.93;

1.93
date	2007.01.11.19.57.04;	author eklmn;	state Exp;
branches;
next	1.92;

1.92
date	2006.05.25.05.02.01;	author aw3;	state Exp;
branches;
next	1.91;

1.91
date	2006.05.19.04.06.07;	author aw3;	state Exp;
branches;
next	1.90;

1.90
date	2006.04.16.00.25.17;	author aw3;	state Exp;
branches;
next	1.89;

1.89
date	2006.04.09.01.28.12;	author aw3;	state Exp;
branches;
next	1.88;

1.88
date	2006.03.27.03.53.27;	author aw3;	state Exp;
branches;
next	1.87;

1.87
date	2006.01.25.05.23.50;	author aw3;	state Exp;
branches;
next	1.86;

1.86
date	2006.01.20.04.13.16;	author aw3;	state Exp;
branches;
next	1.85;

1.85
date	2005.11.27.22.11.47;	author eklmn;	state Exp;
branches;
next	1.84;

1.84
date	2005.11.27.20.31.04;	author eklmn;	state Exp;
branches;
next	1.83;

1.83
date	2005.09.26.00.29.07;	author aw3;	state Exp;
branches;
next	1.82;

1.82
date	2005.08.25.11.57.47;	author aw3;	state Exp;
branches;
next	1.81;

1.81
date	2005.08.24.04.01.24;	author aw3;	state Exp;
branches;
next	1.80;

1.80
date	2005.08.22.01.37.36;	author aw3;	state Exp;
branches;
next	1.79;

1.79
date	2005.08.11.05.19.37;	author aw3;	state Exp;
branches;
next	1.78;

1.78
date	2005.06.19.04.47.25;	author aw3;	state Exp;
branches;
next	1.77;

1.77
date	2005.05.15.03.36.08;	author aw3;	state Exp;
branches;
next	1.76;

1.76
date	2005.01.20.16.25.53;	author kush_eplus;	state Exp;
branches;
next	1.75;

1.75
date	2004.11.08.21.04.29;	author aw3;	state Exp;
branches;
next	1.74;

1.74
date	2004.11.02.17.08.17;	author aw3;	state Exp;
branches;
next	1.73;

1.73
date	2004.10.31.04.20.48;	author aw3;	state Exp;
branches;
next	1.72;

1.72
date	2004.10.18.04.41.38;	author aw3;	state Exp;
branches;
next	1.71;

1.71
date	2004.10.01.03.30.50;	author aw3;	state Exp;
branches;
next	1.70;

1.70
date	2004.09.28.23.34.02;	author syrus77;	state Exp;
branches;
next	1.69;

1.69
date	2004.09.17.03.08.49;	author aw3;	state Exp;
branches;
next	1.68;

1.68
date	2004.08.12.21.54.12;	author eklmn;	state Exp;
branches;
next	1.67;

1.67
date	2004.08.07.15.25.03;	author eklmn;	state Exp;
branches;
next	1.66;

1.66
date	2004.08.07.08.51.53;	author eklmn;	state Exp;
branches;
next	1.65;

1.65
date	2004.08.06.17.00.46;	author eklmn;	state Exp;
branches;
next	1.64;

1.64
date	2004.08.05.21.34.57;	author aw3;	state Exp;
branches;
next	1.63;

1.63
date	2004.06.02.21.15.15;	author aw3;	state Exp;
branches;
next	1.62;

1.62
date	2004.06.01.22.31.02;	author aw3;	state Exp;
branches;
next	1.61;

1.61
date	2004.05.18.21.07.43;	author katsyonak;	state Exp;
branches;
next	1.60;

1.60
date	2004.05.06.01.39.08;	author katsyonak;	state Exp;
branches;
next	1.59;

1.59
date	2004.05.05.02.22.51;	author netwolf1;	state Exp;
branches;
next	1.58;

1.58
date	2004.05.04.17.51.07;	author netwolf1;	state Exp;
branches;
next	1.57;

1.57
date	2004.05.03.09.59.44;	author netwolf1;	state Exp;
branches;
next	1.56;

1.56
date	2004.03.23.18.37.13;	author dongato;	state Exp;
branches;
next	1.55;

1.55
date	2004.03.23.14.24.13;	author dongato;	state Exp;
branches;
next	1.54;

1.54
date	2004.03.16.00.42.23;	author aw3;	state Exp;
branches;
next	1.53;

1.53
date	2004.03.15.10.45.27;	author bavariansnail;	state Exp;
branches;
next	1.52;

1.52
date	2004.03.06.07.01.57;	author aw3;	state Exp;
branches;
next	1.51;

1.51
date	2004.02.25.17.58.55;	author kush_eplus;	state Exp;
branches;
next	1.50;

1.50
date	2004.02.16.23.22.39;	author aw3;	state Exp;
branches;
next	1.49;

1.49
date	2004.01.31.12.17.08;	author morevit;	state Exp;
branches;
next	1.48;

1.48
date	2004.01.21.15.04.10;	author dongato;	state Exp;
branches;
next	1.47;

1.47
date	2004.01.20.13.20.57;	author dongato;	state Exp;
branches;
next	1.46;

1.46
date	2004.01.16.19.51.23;	author dongato;	state Exp;
branches;
next	1.45;

1.45
date	2004.01.16.17.51.27;	author dongato;	state Exp;
branches;
next	1.44;

1.44
date	2004.01.16.17.06.11;	author eklmn;	state Exp;
branches;
next	1.43;

1.43
date	2004.01.16.12.25.53;	author dongato;	state Exp;
branches;
next	1.42;

1.42
date	2003.12.13.21.16.33;	author eklmn;	state Exp;
branches;
next	1.41;

1.41
date	2003.11.28.16.46.57;	author eklmn;	state Exp;
branches;
next	1.40;

1.40
date	2003.11.27.14.48.30;	author eklmn;	state Exp;
branches;
next	1.39;

1.39
date	2003.11.27.13.57.18;	author eklmn;	state Exp;
branches;
next	1.38;

1.38
date	2003.11.25.23.17.12;	author katsyonak;	state Exp;
branches;
next	1.37;

1.37
date	2003.11.24.17.06.22;	author eklmn;	state Exp;
branches;
next	1.36;

1.36
date	2003.11.23.14.41.16;	author eklmn;	state Exp;
branches;
next	1.35;

1.35
date	2003.11.22.22.31.37;	author forcha;	state Exp;
branches;
next	1.34;

1.34
date	2003.11.22.22.29.41;	author forcha;	state Exp;
branches;
next	1.33;

1.33
date	2003.11.22.13.13.08;	author eklmn;	state Exp;
branches;
next	1.32;

1.32
date	2003.11.19.07.50.05;	author eklmn;	state Exp;
branches;
next	1.31;

1.31
date	2003.11.12.13.17.24;	author dongato;	state Exp;
branches;
next	1.30;

1.30
date	2003.11.08.14.18.28;	author eklmn;	state Exp;
branches;
next	1.29;

1.29
date	2003.11.07.22.14.25;	author eklmn;	state Exp;
branches;
next	1.28;

1.28
date	2003.10.28.21.34.13;	author morevit;	state Exp;
branches;
next	1.27;

1.27
date	2003.10.26.13.50.15;	author morevit;	state Exp;
branches;
next	1.26;

1.26
date	2003.10.20.13.19.59;	author morevit;	state Exp;
branches;
next	1.25;

1.25
date	2003.10.05.17.53.56;	author morevit;	state Exp;
branches;
next	1.24;

1.24
date	2003.09.24.16.48.17;	author morevit;	state Exp;
branches;
next	1.23;

1.23
date	2003.09.20.15.39.30;	author morevit;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.19.00.13.37;	author morevit;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.30.11.23.25;	author emoulari;	state Exp;
branches;
next	1.20;

1.20
date	2003.07.30.00.35.15;	author netwolf1;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.23.22.05.22;	author netwolf1;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.19.07.31.53;	author partyckip;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.16.04.44.44;	author partyckip;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.09.00.31.11;	author syrus77;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.22.18.48;	author partyckip;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.31.17.14.28;	author partyckip;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.31.08.50.54;	author partyckip;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.30.17.11.45;	author syrus77;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.09.23.07.44;	author moosetea;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.06.23.11.20;	author moosetea;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.26.17.39.15;	author lord_kiron;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.30.12.10.20;	author moosetea;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.22.01.13.59;	author cax2;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2003.03.13.15.51.56;	author cax2;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.11.14.46.25;	author cax2;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.10.19.24.49;	author cax2;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.09.18.39.41;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.22.17.52.39;	author kuchin;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2003.01.21.18.21.18;	author cax2;	state Exp;
branches;
next	;

1.2.2.1
date	2003.01.28.16.54.11;	author cax2;	state Exp;
branches;
next	;

1.2.4.1
date	2003.02.05.01.58.41;	author obaldin;	state Exp;
branches;
next	;

1.7.2.1
date	2003.03.23.06.22.02;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.103
log
@Unified identical strings IDS_INFLST_FILE_PARTFILESTATUS and IDS_INFLST_FILE_FILEPARTCOUNT.
@
text
@//	This file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
// (p) 2002 by FoRcHa (a.k.a. NO)  [seppforcher38@@hotmail.com]

#include "stdafx.h"
#include "emule.h"
#include "server.h"
#include "ServerList.h"
#include "InfoListCtrl.h"
#include "updownclient.h"
#include "SharedFileList.h"
#include "otherfunctions.h"
#include "COptionTree\OptionTreeItemComboBox.h"
#include "COptionTree\OptionTreeItemStatic.h"
#include "COptionTree\OptionTreeDef.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CInfoListCtrl::CInfoListCtrl()
{
	m_eListType = INFOLISTTYPE_NONE;
	m_pPartFile = NULL;
	m_pClient = NULL;
	m_bShown = false;

	for(int i = 0; i < 4; i++)
		m_bExpandedUser[i] = true;
	for(int i = 0; i < 2; i++)
		m_bExpandedFile[i] = true;

	m_crEntryTextColor = RGB(0,45,126);

//	Initialize a file structure
	UserData.General = NULL;
	UserData.UserName = NULL;
	UserData.UserHash = NULL;
	UserData.ClientSoftware = NULL;
	UserData.IPAddress = NULL;
	UserData.ID = NULL;
	UserData.ServerIP = NULL;
	UserData.ServerName = NULL;

	UserData.Transfer = NULL;
	UserData.CurDownloading = NULL;
	UserData.DownloadedSession = NULL;
	UserData.UploadedSession = NULL;
	UserData.AverageDownloadrate = NULL;
	UserData.AverageUploadrate = NULL;
	UserData.DownloadedTotal = NULL;
	UserData.UploadedTotal = NULL;

	UserData.Scores = NULL;
	UserData.DlUpModifier = NULL;
	UserData.CommunityUser = NULL;
	UserData.Rating = NULL;
	UserData.UploadQueueScore = NULL;
	UserData.RFRatio = NULL;
	UserData.SFRatio = NULL;

	UserData.RemoteScores = NULL;
	UserData.RemoteDlUpModifier = NULL;
	UserData.RemoteRating = NULL;
	UserData.RemoteQueueRank = NULL;

//	Initialize a file structure
	FileData.General = NULL;
	FileData.FullName = NULL;
	FileData.MetFile = NULL;
	FileData.Hash = NULL;
	FileData.FileSize = NULL;
	FileData.RealSize = NULL;
	FileData.PartFileStatus = NULL;
	FileData.SourceNames = NULL;

	FileData.Transfer = NULL;
	FileData.FoundSources = NULL;
	FileData.CompleteSources = NULL;
	FileData.Transferring = NULL;
	FileData.FilepartCount = NULL;
	FileData.PartAvailable = NULL;
	FileData.LastSeenComplete = NULL;
	FileData.LastProgress = NULL;
	FileData.Transferred = NULL;
	FileData.CompletedSize = NULL;
	FileData.DataRate = NULL;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CInfoListCtrl::~CInfoListCtrl()
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BEGIN_MESSAGE_MAP(CInfoListCtrl, COptionTree)
	ON_WM_TIMER()
	ON_WM_SHOWWINDOW()
END_MESSAGE_MAP()
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CInfoListCtrl::Create(DWORD dwStyle, RECT rcRect, CWnd *pParentWnd, UINT nID)
{
	dwStyle |= WS_CLIPCHILDREN;
	return COptionTree::Create(dwStyle, rcRect, pParentWnd, OT_OPTIONS_SHADEEXPANDCOLUMN | OT_OPTIONS_SHADEROOTITEMS, nID);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CInfoListCtrl::Localize()
{
	if(GetSafeHwnd())
	{
		CreateList();
		UpdateData(false);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CInfoListCtrl::ClearList()
{
	SetRedraw(FALSE);
//	Now we can safely remove items from the tree (delete we call inside)
	DeleteAllItems();
	SetRedraw(TRUE);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// an intern fuction that create a OptionTree
// eklmn: please remember that SetRedraw() prevents COptionTree class from redraw during an objects creation
void CInfoListCtrl::CreateList()
{
	SetRedraw(FALSE);

	if (m_eListType != INFOLISTTYPE_NONE)
	{
	//	Now we can safely remove items from the tree (delete we call inside)
		DeleteAllItems();
	}

	SetRedraw(TRUE);

	try
	{
		if (m_eListType == INFOLISTTYPE_SOURCE)
		{
			UserData.General = InsertItem(new COptionTreeItem);
			UserData.General->SetLabelText(GetResString(IDS_PW_GENERAL));
			UserData.General->Expand(m_bExpandedUser[0]);
			UserData.UserName = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
			UserData.UserName->SetLabelText(GetResString(IDS_INFLST_USER_USERNAME));
			if(UserData.UserName->CreateStaticItem(0))
				UserData.UserName->SetTextColor(m_crEntryTextColor);
			UserData.UserHash = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
			UserData.UserHash->SetLabelText(GetResString(IDS_INFLST_USER_USERHASH));
			if(UserData.UserHash->CreateStaticItem(0))
				UserData.UserHash->SetTextColor(m_crEntryTextColor);
			UserData.ClientSoftware = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
			UserData.ClientSoftware->SetLabelText(GetResString(IDS_INFLST_USER_CLIENTSOFTWARE));
			if(UserData.ClientSoftware->CreateStaticItem(0))
				UserData.ClientSoftware->SetTextColor(m_crEntryTextColor);
			UserData.IPAddress = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
			UserData.IPAddress->SetLabelText(GetResString(IDS_INFLST_USER_IPADDRESS));
			if(UserData.IPAddress->CreateStaticItem(0))
				UserData.IPAddress->SetTextColor(m_crEntryTextColor);
			UserData.ID = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
			UserData.ID->SetLabelText(GetResString(IDS_ID));
			if(UserData.ID->CreateStaticItem(0))
				UserData.ID->SetTextColor(m_crEntryTextColor);
			UserData.ServerIP = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
			UserData.ServerIP->SetLabelText(GetResString(IDS_SERVERIP));
			if(UserData.ServerIP->CreateStaticItem(0))
				UserData.ServerIP->SetTextColor(m_crEntryTextColor);
			UserData.ServerName = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
			UserData.ServerName->SetLabelText(GetResString(IDS_INFLST_USER_SERVERNAME));
			if(UserData.ServerName->CreateStaticItem(0))
				UserData.ServerName->SetTextColor(m_crEntryTextColor);

			UserData.Transfer = InsertItem(new COptionTreeItem);
			UserData.Transfer->SetLabelText(GetResString(IDS_TRANSFER_NOUN));
			UserData.Transfer->Expand(m_bExpandedUser[1]);
			UserData.CurDownloading = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
			UserData.CurDownloading->SetLabelText(GetResString(IDS_INFLST_USER_CURDOWNLOAD));
			if(UserData.CurDownloading->CreateStaticItem(0))
				UserData.CurDownloading->SetTextColor(m_crEntryTextColor);
			UserData.DownloadedSession = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
			UserData.DownloadedSession->SetLabelText(GetResString(IDS_INFLST_USER_SESSIONDOWNLOAD));
			if(UserData.DownloadedSession->CreateStaticItem(0))
				UserData.DownloadedSession->SetTextColor(m_crEntryTextColor);
			UserData.UploadedSession = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
			UserData.UploadedSession->SetLabelText(GetResString(IDS_INFLST_USER_SESSIONUPLOAD));
			if(UserData.UploadedSession->CreateStaticItem(0))
				UserData.UploadedSession->SetTextColor(m_crEntryTextColor);
			UserData.AverageDownloadrate = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
			UserData.AverageDownloadrate->SetLabelText(GetResString(IDS_INFLST_USER_AVERAGEDOWNRATE));
			if(UserData.AverageDownloadrate->CreateStaticItem(0))
				UserData.AverageDownloadrate->SetTextColor(m_crEntryTextColor);
			UserData.AverageUploadrate = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
			UserData.AverageUploadrate->SetLabelText(GetResString(IDS_INFLST_USER_AVERAGEUPRATE));
			if(UserData.AverageUploadrate->CreateStaticItem(0))
				UserData.AverageUploadrate->SetTextColor(m_crEntryTextColor);
			UserData.DownloadedTotal = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
			UserData.DownloadedTotal->SetLabelText(GetResString(IDS_INFLST_USER_TOTALDOWNLOAD));
			if(UserData.DownloadedTotal->CreateStaticItem(0))
				UserData.DownloadedTotal->SetTextColor(m_crEntryTextColor);
			UserData.UploadedTotal = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
			UserData.UploadedTotal->SetLabelText(GetResString(IDS_INFLST_USER_TOTALUPLOAD));
			if(UserData.UploadedTotal->CreateStaticItem(0))
				UserData.UploadedTotal->SetTextColor(m_crEntryTextColor);

			UserData.Scores = InsertItem(new COptionTreeItem);
			UserData.Scores->SetLabelText(GetResString(IDS_INFLST_USER_SCORES));
			UserData.Scores->Expand(m_bExpandedUser[2]);
			UserData.DlUpModifier = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
			UserData.DlUpModifier->SetLabelText(GetResString(IDS_INFLST_USER_DLUPMODIFIER));
			if(UserData.DlUpModifier->CreateStaticItem(0))
				UserData.DlUpModifier->SetTextColor(m_crEntryTextColor);
			UserData.CommunityUser = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
			UserData.CommunityUser->SetLabelText(GetResString(IDS_COMMUNITY));
			if(UserData.CommunityUser->CreateStaticItem(0))
				UserData.CommunityUser->SetTextColor(m_crEntryTextColor);
			UserData.Rating = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
			UserData.Rating->SetLabelText(GetResString(IDS_RATING));
			if(UserData.Rating->CreateStaticItem(0))
				UserData.Rating->SetTextColor(m_crEntryTextColor);
			UserData.UploadQueueScore = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
			UserData.UploadQueueScore->SetLabelText(GetResString(IDS_INFLST_USER_UPLOADQUEUESCORE));
			if(UserData.UploadQueueScore->CreateStaticItem(0))
				UserData.UploadQueueScore->SetTextColor(m_crEntryTextColor);
			UserData.RFRatio = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
			UserData.RFRatio->SetLabelText(GetResString(IDS_INFLST_USER_RFRATIO));
			if(UserData.RFRatio->CreateStaticItem(0))
				UserData.RFRatio->SetTextColor(m_crEntryTextColor);
			UserData.SFRatio = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
			UserData.SFRatio->SetLabelText(GetResString(IDS_INFLST_USER_SFRATIO));
			if(UserData.SFRatio->CreateStaticItem(0))
				UserData.SFRatio->SetTextColor(m_crEntryTextColor);

			UserData.RemoteScores = InsertItem(new COptionTreeItem);
			UserData.RemoteScores->SetLabelText(GetResString(IDS_INFLST_REMOTE_SCORES));
			UserData.RemoteScores->Expand(m_bExpandedUser[3]);
			UserData.RemoteDlUpModifier = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
			UserData.RemoteDlUpModifier->SetLabelText(GetResString(IDS_INFLST_USER_DLUPMODIFIER));
			if(UserData.RemoteDlUpModifier->CreateStaticItem(0))
				UserData.RemoteDlUpModifier->SetTextColor(m_crEntryTextColor);
			UserData.RemoteRating = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
			UserData.RemoteRating->SetLabelText(GetResString(IDS_RATING));
			if(UserData.RemoteRating->CreateStaticItem(0))
				UserData.RemoteRating->SetTextColor(m_crEntryTextColor);
			UserData.RemoteQueueRank = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
			UserData.RemoteQueueRank->SetLabelText(GetResString(IDS_INFLST_REMOTE_RANKING));
			if(UserData.RemoteQueueRank->CreateStaticItem(0))
				UserData.RemoteQueueRank->SetTextColor(m_crEntryTextColor);
		}
		else
		{
			FileData.General = InsertItem(new COptionTreeItem);
			FileData.General->SetLabelText(GetResString(IDS_PW_GENERAL));
			FileData.General->Expand(m_bExpandedFile[0]);
			FileData.FullName = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
			FileData.FullName->SetLabelText(GetResString(IDS_INFLST_FILE_FULLNAME));
			if(FileData.FullName->CreateStaticItem(0))
				FileData.FullName->SetTextColor(m_crEntryTextColor);
			FileData.MetFile = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
			FileData.MetFile->SetLabelText(GetResString(IDS_DL_FILENAME));
			if(FileData.MetFile->CreateStaticItem(0))
				FileData.MetFile->SetTextColor(m_crEntryTextColor);
			FileData.Hash = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
			FileData.Hash->SetLabelText(GetResString(IDS_HASH));
			if(FileData.Hash->CreateStaticItem(0))
				FileData.Hash->SetTextColor(m_crEntryTextColor);
			FileData.FileSize = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
			FileData.FileSize->SetLabelText(GetResString(IDS_INFLST_FILE_FILESIZE));
			if(FileData.FileSize->CreateStaticItem(0))
				FileData.FileSize->SetTextColor(m_crEntryTextColor);
			FileData.RealSize = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
			FileData.RealSize->SetLabelText(GetResString(IDS_SIZE_ON_DISK));
			if(FileData.RealSize->CreateStaticItem(0))
				FileData.RealSize->SetTextColor(m_crEntryTextColor);
			FileData.PartFileStatus = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
			FileData.PartFileStatus->SetLabelText(GetResString(IDS_STATUS));
			if(FileData.PartFileStatus->CreateStaticItem(0))
				FileData.PartFileStatus->SetTextColor(m_crEntryTextColor);
			FileData.SourceNames = (COptionTreeItemComboBox*)InsertItem(new COptionTreeItemComboBox(), FileData.General);
			FileData.SourceNames->SetLabelText(GetResString(IDS_INFLST_FILE_SOURCENAMES));
			if(FileData.SourceNames->CreateComboItem(NULL) == TRUE)
			{
				FileData.SourceNames->SetTextColor(m_crEntryTextColor);
				FileData.SourceNames->SetCurSel(0);
				FileData.bSourceNameCombo = true;
			}
			else
				FileData.bSourceNameCombo = false;
			FileData.iSourceNameUpdateDelay = 0;

			FileData.Transfer = InsertItem(new COptionTreeItem);
			FileData.Transfer->SetLabelText(GetResString(IDS_TRANSFER_NOUN));
			FileData.Transfer->Expand(m_bExpandedFile[1]);
			FileData.FoundSources = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.FoundSources->SetLabelText(GetResString(IDS_FD_SOURCES));
			if(FileData.FoundSources->CreateStaticItem(0))
				FileData.FoundSources->SetTextColor(m_crEntryTextColor);
			FileData.CompleteSources = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.CompleteSources->SetLabelText(GetResString(IDS_SF_COMPLETESRC));
			if(FileData.CompleteSources->CreateStaticItem(0))
				FileData.CompleteSources->SetTextColor(m_crEntryTextColor);
			FileData.Transferring = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.Transferring->SetLabelText(GetResString(IDS_INFLST_FILE_TRANSFERRINGSOURCES));
			if(FileData.Transferring->CreateStaticItem(0))
				FileData.Transferring->SetTextColor(m_crEntryTextColor);

			FileData.FilepartCount = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.FilepartCount->SetLabelText(GetResString(IDS_FD_PARTS));
			if(FileData.FilepartCount->CreateStaticItem(0))
				FileData.FilepartCount->SetTextColor(m_crEntryTextColor);
			FileData.PartAvailable = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.PartAvailable->SetLabelText(GetResString(IDS_INFLST_FILE_PARTAVAILABLE));
			if(FileData.PartAvailable->CreateStaticItem(0))
				FileData.PartAvailable->SetTextColor(m_crEntryTextColor);
			FileData.LastSeenComplete = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.LastSeenComplete->SetLabelText(GetResString(IDS_LASTSEENCOMPLETE));
			if(FileData.LastSeenComplete->CreateStaticItem(0))
				FileData.LastSeenComplete->SetTextColor(m_crEntryTextColor);
			FileData.LastProgress = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.LastProgress->SetLabelText(GetResString(IDS_LASTRECEPTION));
			if(FileData.LastProgress->CreateStaticItem(0))
				FileData.LastProgress->SetTextColor(m_crEntryTextColor);
			FileData.Transferred = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.Transferred->SetLabelText(GetResString(IDS_INFLST_FILE_TRANSFERRED));
			if(FileData.Transferred->CreateStaticItem(0))
				FileData.Transferred->SetTextColor(m_crEntryTextColor);
			FileData.CompletedSize = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.CompletedSize->SetLabelText(GetResString(IDS_INFLST_FILE_COMPLETEDSIZE));
			if(FileData.CompletedSize->CreateStaticItem(0))
				FileData.CompletedSize->SetTextColor(m_crEntryTextColor);
			FileData.DataRate = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
			FileData.DataRate->SetLabelText(GetResString(IDS_INFLST_FILE_DATARATE));
			if(FileData.DataRate->CreateStaticItem(0))
				FileData.DataRate->SetTextColor(m_crEntryTextColor);
		}
	}
	catch (CException* error )
	{
		OUTPUT_DEBUG_TRACE();
		error->Delete();
		ClearList();
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// this sfunction create & fill an InfoList if it visible
void CInfoListCtrl::UpdateData(bool bExpandAllItems)
{
	if(!IsWindowVisible())
		return;

	EMULE_TRY

	CString strBuffer;

	if (m_eListType == INFOLISTTYPE_SOURCE)
	{
		if (m_pClient != NULL)
		{
			if(UserData.General->IsExpanded())
			{
				if (!m_pClient->IsUserNameEmpty())
					UserData.UserName->SetStaticText(m_pClient->GetUserName());
				else
					UserData.UserName->SetStaticText(_T("?"));

				if (m_pClient->HasValidHash())
					UserData.UserHash->SetStaticText(HashToString(m_pClient->GetUserHash()));
				else
					UserData.UserHash->SetStaticText(_T("?"));

				UserData.ClientSoftware->SetStaticText(m_pClient->GetFullSoftVersionString());
				
				strBuffer.Format(_T("%u (%s)"), m_pClient->GetUserIDHybrid(),
					::GetResString((m_pClient->HasLowID()) ? IDS_PRIOLOW : IDS_PRIOHIGH));
				UserData.ID->SetStaticText(strBuffer);

				strBuffer.Format(_T("%s:%u"),m_pClient->GetFullIP(), m_pClient->GetUserPort());
				UserData.IPAddress->SetStaticText(strBuffer);

				if(m_pClient->GetServerIP())
				{
					strBuffer.Format(_T("%s:%u"), ipstr(m_pClient->GetServerIP()), m_pClient->GetServerPort());
					UserData.ServerIP->SetStaticText(strBuffer);

					CServer	*pServer = g_App.m_pServerList->GetServerByIPTCP(m_pClient->GetServerIP(), m_pClient->GetServerPort());
					if(pServer)
						UserData.ServerName->SetStaticText(pServer->GetListName());
					else
						UserData.ServerName->SetStaticText(_T("?"));
				}
				else
				{
					UserData.ServerIP->SetStaticText(_T("?"));
					UserData.ServerName->SetStaticText(_T("?"));
				}
			}

			if(UserData.Transfer->IsExpanded())
			{
				CKnownFile* pSharedFile = g_App.m_pSharedFilesList->GetFileByID(m_pClient->m_reqFileHash);
				if(pSharedFile)
					UserData.CurDownloading->SetStaticText(pSharedFile->GetFileName());
				else
					UserData.CurDownloading->SetStaticText(_T("-"));

				UserData.UploadedSession->SetStaticText(CastItoXBytes(m_pClient->GetTransferredDown()));

				UserData.DownloadedSession->SetStaticText(CastItoXBytes(m_pClient->GetTransferredUp()));

				strBuffer.Format(_T("%.1f %s"),
					static_cast<double>(m_pClient->GetDownloadDataRate())/1024.0, GetResString(IDS_KBYTESEC));
				UserData.AverageUploadrate->SetStaticText(strBuffer);

				strBuffer.Format(_T("%.1f %s"),
					static_cast<double>(m_pClient->GetUpDataRate()) / 1024.0, GetResString(IDS_KBYTESEC));
				UserData.AverageDownloadrate->SetStaticText(strBuffer);
			}

			if(m_pClient->Credits())
			{

				UserData.UploadedTotal->SetStaticText(CastItoXBytes(m_pClient->Credits()->GetDownloadedTotal()));
				UserData.DownloadedTotal->SetStaticText(CastItoXBytes(m_pClient->Credits()->GetUploadedTotal()));

				strBuffer.Format(_T("%.1f"),m_pClient->Credits()->GetScoreRatio(m_pClient->GetIP()));
				UserData.DlUpModifier->SetStaticText(strBuffer);
			}
			else
			{
				UserData.UploadedTotal->SetStaticText(_T("?"));
				UserData.DownloadedTotal->SetStaticText(_T("?"));
				UserData.DlUpModifier->SetStaticText(_T("?"));
			}

			if(UserData.Scores->IsExpanded())
			{
				if(g_App.m_pPrefs->CommunityEnabled())
					UserData.CommunityUser->SetStaticText(YesNoStr(m_pClient->IsCommunity()));
				else
					UserData.CommunityUser->SetStaticText(GetResString(IDS_DISABLED));

				bool	bLoadSourceName = (_tcsstr(m_pClient->GetUserName(), ::GetResString(IDS_SAVED_SOURCE)) != NULL) ||
					(_tcsstr(m_pClient->GetUserName(), ::GetResString(IDS_EXCHANGEDSOURCE)) != NULL);

				if (!bLoadSourceName)
				{
					if (m_pClient->IsDownloading())
						strBuffer = _T("-");
					else
						strBuffer.Format(_T("%u"), m_pClient->GetScore(true));
					UserData.Rating->SetStaticText(strBuffer);
				}
				else
					UserData.Rating->SetStaticText(_T("?"));

				if(m_pClient->GetUploadState() != US_NONE && !m_pClient->IsDownloading())
				{
					strBuffer.Format(_T("%u"), m_pClient->GetScore(false));
					UserData.UploadQueueScore->SetStaticText(strBuffer);
				}
				else
					UserData.UploadQueueScore->SetStaticText(_T("-"));

				CKnownFile* pSharedFile = g_App.m_pSharedFilesList->GetFileByID(m_pClient->m_reqFileHash);

				if (pSharedFile)
				{
					strBuffer.Format(_T("%.2f"), pSharedFile->GetPopularityRatio());
					UserData.RFRatio->SetStaticText(strBuffer);
				}
				else
					UserData.RFRatio->SetStaticText(_T("-"));

				if (pSharedFile)
				{
					strBuffer.Format(_T("%.2f"), pSharedFile->GetSizeRatio());
					UserData.SFRatio->SetStaticText(strBuffer);
				}
				else
					UserData.SFRatio->SetStaticText(_T("-"));
			}

			if(UserData.RemoteScores->IsExpanded())
			{
				if (m_pClient->GetRemoteQueueRank())
				{
					strBuffer.Format(_T("%u"),m_pClient->GetRemoteQueueRank());
					UserData.RemoteQueueRank->SetStaticText(strBuffer);
				}
				else
					UserData.RemoteQueueRank->SetStaticText(_T("?"));

				strBuffer.Format(_T("%.1f"),m_pClient->GetRemoteBaseModifier());
				UserData.RemoteDlUpModifier->SetStaticText(strBuffer);

				strBuffer.Format(_T("%u"),m_pClient->GetRemoteRatio());
				UserData.RemoteRating->SetStaticText(strBuffer);
			}
		}
	}
	else if (m_eListType == INFOLISTTYPE_FILE)
	{
		if (m_pPartFile != NULL)
		{
			if(FileData.General->IsExpanded())
			{
				FileData.FullName->SetStaticText(m_pPartFile->GetFileName());
				FileData.MetFile->SetStaticText(m_pPartFile->GetFilePath());
				FileData.Hash->SetStaticText(HashToString(m_pPartFile->GetFileHash()));
				FileData.FileSize->SetStaticText(CastItoXBytes(m_pPartFile->GetFileSize()));
				FileData.RealSize->SetStaticText(CastItoXBytes(m_pPartFile->GetRealFileSize()));
				FileData.PartFileStatus->SetStaticText(m_pPartFile->GetPartFileStatus());
				if(FileData.iSourceNameUpdateDelay % 10 == 0)
					FillSourcenameList();
				FileData.iSourceNameUpdateDelay++;
			}

			if(FileData.Transfer->IsExpanded())
			{
				strBuffer.Format(_T("%u"),m_pPartFile->GetPartCount());
				FileData.FilepartCount->SetStaticText(strBuffer);

				double percent	=	0.0;
				if (m_pPartFile->GetPartCount())
				{
					percent	=	static_cast<double>((m_pPartFile->GetAvailablePartCount()*100.0) / m_pPartFile->GetPartCount());
				}
				strBuffer.Format(_T("%u (%.1f%%)"), m_pPartFile->GetAvailablePartCount(), percent);
				FileData.PartAvailable->SetStaticText(strBuffer);

				if(m_pPartFile->lastseencomplete == NULL)
					FileData.LastSeenComplete->SetStaticText(GetResString(IDS_NEVER));
				else
					FileData.LastSeenComplete->SetStaticText(m_pPartFile->LocalizeLastSeenComplete());

				if (m_pPartFile->GetTransferred()==0)
					FileData.LastProgress->SetStaticText(GetResString(IDS_NEVER));
				else
					FileData.LastProgress->SetStaticText(m_pPartFile->LocalizeLastDownTransfer());

				FileData.Transferred->SetStaticText(CastItoXBytes(m_pPartFile->GetTransferred()));


				strBuffer.Format(_T("%s (%.2f%%)"), CastItoXBytes(m_pPartFile->GetCompletedSize()), m_pPartFile->GetPercentCompleted2());

				EnumPartFileStatuses	eFileStatus = m_pPartFile->GetStatus();
				uint64	qwFileSz = ((eFileStatus == PS_COMPLETING) || (eFileStatus == PS_COMPLETE)) ? m_pPartFile->GetFileSize() : m_pPartFile->GetCompletedSize();

				if (qwFileSz != 0)
				{
					double	dTmp = 100 / static_cast<double>(qwFileSz);

					strBuffer.AppendFormat( _T("  %s %.2f%%  %s %.2f%%"),
						GetResString(IDS_FD_COMPRESSION), dTmp * static_cast<double>(m_pPartFile->GetGainDueToCompression()),
						GetResString(IDS_FD_CORRUPTION), dTmp * static_cast<double>(m_pPartFile->GetLostDueToCorruption()) );
				}
				FileData.CompletedSize->SetStaticText(strBuffer);

				strBuffer.Format(_T("%.2f %s"),
					static_cast<double>(m_pPartFile->GetDataRate())/1024.0, GetResString(IDS_KBYTESEC));
				FileData.DataRate->SetStaticText(strBuffer);

				strBuffer.Format(_T("%u"), m_pPartFile->GetSourceCount());
				FileData.FoundSources->SetStaticText(strBuffer);

				strBuffer.Format(_T("%u"), m_pPartFile->GetCompleteSourcesCount());
				FileData.CompleteSources->SetStaticText(strBuffer);

				strBuffer.Format(_T("%u"), m_pPartFile->GetTransferringSrcCount());
				FileData.Transferring->SetStaticText(strBuffer);
			}
		}
	}

	if(bExpandAllItems)
		ExpandAllItems();

	UpdatedItems();

	EMULE_CATCH
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CInfoListCtrl::OnTimer(UINT nIDEvent)
{
	if(nIDEvent == m_nUpdateTimer)
		UpdateData();
	COptionTree::OnTimer(nIDEvent);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CInfoListCtrl::OnShowWindow(BOOL bShow, UINT nStatus)
{
	COptionTree::OnShowWindow(bShow, nStatus);

	if(bShow)
	{
		//create a list by the open if client was specified
		if (m_pClient != NULL || m_pPartFile != NULL)
			CreateList();
		//activate a timer to fill a list
		m_nUpdateTimer = SetTimer(1, 500, NULL);
		m_bShown = true;
	}
	else
	{
		KillTimer(m_nUpdateTimer);
		//save actuall state before list will be cleared
		SaveState(m_eListType);
		ClearList();
		m_bShown = false;
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CInfoListCtrl::SetList(EnumInfoListType enumItemType, void * pObject)
{
	BOOL	bIsWindowVisible = IsWindowVisible();

	// change an item
	switch(enumItemType)
	{
		case INFOLISTTYPE_SOURCE:
			// update pointers
			m_pClient = reinterpret_cast<CUpDownClient*>(pObject);
			m_pPartFile = NULL;
			//create a list if windows is visible, infolist is open  & type was changed
			if (m_bShown && bIsWindowVisible && m_eListType != INFOLISTTYPE_SOURCE)
			{
				//save actuall state
				SaveState(m_eListType);
				// update a object type & create a list
				m_eListType = INFOLISTTYPE_SOURCE;
				CreateList();
			}
			else
				// just update a object type
				m_eListType = INFOLISTTYPE_SOURCE;
			// update a header in Transfer window
			g_App.m_pMDlg->m_wndTransfer.UpdateInfoHeader();
			break;
		case INFOLISTTYPE_FILE:
			// update pointers
			m_pClient = NULL;
			m_pPartFile = reinterpret_cast<CPartFile*>(pObject);
			if (m_bShown && bIsWindowVisible && m_eListType != INFOLISTTYPE_FILE)
			{
				//save actuall state
				SaveState(m_eListType);
				// update a object type, infolist is open & create a list
				m_eListType = INFOLISTTYPE_FILE;
				CreateList();
			}
			else
				// just update a object type
				m_eListType = INFOLISTTYPE_FILE;
			// update a header in Transfer window
			g_App.m_pMDlg->m_wndTransfer.UpdateInfoHeader();
			break;
		case INFOLISTTYPE_NONE:
		default:
			m_pClient = NULL;
			m_pPartFile = NULL;
		//	Update the header in the Transfer window
			g_App.m_pMDlg->m_wndTransfer.UpdateInfoHeader();
			if (m_bShown && bIsWindowVisible && m_eListType != INFOLISTTYPE_NONE)
			{
				ClearList();
			}
			m_eListType = INFOLISTTYPE_NONE;
	}

	// Update ( (re)create & fill the InfoList) will be done every 500ms over timer
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FSL_TempStruct
{
	CString strFileName;
	int iCount;
};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CInfoListCtrl::FillSourcenameList()
{
	if (FileData.bSourceNameCombo)
	{
		//FileData.SourceNames->Clear();
		while(FileData.SourceNames->GetCount())
			FileData.SourceNames->DeleteString(0);

		if (m_pPartFile)
		{
			CList<FSL_TempStruct,FSL_TempStruct&> lstSourceNames;
			ClientList		clientListCopy;
			POSITION		pos2, pos3, posHighest;
			CUpDownClient	*pClient;
			CString			strFileName;

			m_pPartFile->GetCopySourceLists(SLM_ALL, &clientListCopy);
			for (ClientList::const_iterator cIt = clientListCopy.begin(); cIt != clientListCopy.end(); cIt++)
			{
				pClient = *cIt;
				if (!pClient->IsClientFilenameEmpty())
				{
					strFileName = pClient->GetClientFilename();

					bool bFound = false;
					pos2 = lstSourceNames.GetHeadPosition();
					for(int i = 0; i < lstSourceNames.GetCount(); i++)
					{
						pos3 = pos2;
						FSL_TempStruct src = lstSourceNames.GetNext(pos2);
						if (strFileName == src.strFileName)
						{
							src.iCount++;
							lstSourceNames.SetAt(pos3, src);
							bFound = true;
							break;
						}
					}
					if(!bFound)
					{
						FSL_TempStruct src;
						src.strFileName = strFileName;
						src.iCount = 1;
						lstSourceNames.AddTail(src);
					}
				}
			}

			if (lstSourceNames.GetCount() > 0)
			{
				for (int i = 0; i < lstSourceNames.GetCount(); i++)
				{
					pos2 = lstSourceNames.GetHeadPosition();
					posHighest = pos2;

					int			iHighest = 0;

					for (int j = 0; j < lstSourceNames.GetCount(); j++)
					{
						pos3 = pos2;

						FSL_TempStruct srctmp = lstSourceNames.GetNext(pos2);

						if (srctmp.iCount > iHighest)
						{
							iHighest = srctmp.iCount;
							posHighest = pos3;
						}
					}

					FSL_TempStruct src = lstSourceNames.GetAt(posHighest);
					strFileName.Format(_T("%s   (%u)"), src.strFileName, src.iCount);
					FileData.SourceNames->AddString(strFileName);
					src.iCount = 0;
					lstSourceNames.SetAt(posHighest, src);
				}
			}
			else
			{
				FileData.SourceNames->AddString(GetResString(IDS_INFLST_FILE_NOSOURCES));
			}

			FileData.SourceNames->SetCurSel(0);
		}
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString CInfoListCtrl::GetName() const
{
	if (m_eListType == INFOLISTTYPE_SOURCE)
		return m_pClient == NULL ? _T("") : m_pClient->GetUserName();
	else
		return m_pPartFile == NULL ? _T("") : m_pPartFile->GetFileName();
}
@


1.102
log
@Updated server list search API for encryption implementation.
@
text
@d294 1
a294 1
			FileData.PartFileStatus->SetLabelText(GetResString(IDS_INFLST_FILE_PARTFILESTATUS));
d326 1
a326 1
			FileData.FilepartCount->SetLabelText(GetResString(IDS_INFLST_FILE_FILEPARTCOUNT));
@


1.101
log
@Reduced H-file dependency.
@
text
@d403 1
a403 1
					CServer* pServer = g_App.m_pServerList->GetServerByIP(m_pClient->GetServerIP());
@


1.100
log
@Reduced H-file dependency.
@
text
@d22 1
@


1.99
log
@Reduced H-file dependency.
@
text
@d24 1
@


1.98
log
@Reduced H-file dependency.
@
text
@d23 1
d782 7
@


1.97
log
@Suppressed compiler warnings.
@
text
@d1 16
a16 1
// InfoListCtrl.cpp: implementation of the CInfoListCtrl class.
a17 1
/////////////////////////////////////////////////////////////////////////////////
d24 3
@


1.96
log
@Reduced #include depedency.
@
text
@d613 1
a613 1
	bool bIsWindowVisible = IsWindowVisible();
@


1.95
log
@Don't calculate score for downloading sources.
@
text
@d7 1
@


1.94
log
@Newly added stuff was renamed according to the original for easier reference.
@
text
@d447 1
a447 1
						strBuffer.Format(_T("%u"),m_pClient->GetScore(m_pClient->IsDownloading(), true));
d455 1
a455 1
					strBuffer.Format(_T("%u"),m_pClient->GetScore(m_pClient->IsDownloading(),false));
@


1.93
log
@1) updated source exchange protocol to ver.3
2) support of HighID clients with IP "x.x.x.0"  (see description in updownclient.h)
3) removed dublicated ip check for LowID clients in TryToConnect()
4) fixed a client name change by download start from remote client shared file list.
5) some formating
@
text
@d370 1
a370 1
				strBuffer.Format(_T("%u (%s)"), m_pClient->GetHybridUserID(),
@


1.92
log
@Corrected file compression gain and corruption loss in Info pane.
@
text
@d370 1
a370 1
				strBuffer.Format(_T("%u (%s)"), m_pClient->GetUserID(),
@


1.91
log
@Removed IDS_INFLST_FILE_FOUNDSOURCES (substituted by IDS_SF_COMPLETESRC);
Added Complete Sources information to the file details.
@
text
@d521 1
a521 1
				if ( m_pPartFile->GetPartCount() )
d523 1
a523 1
					percent	=	static_cast<double>((m_pPartFile->GetAvailablePartCount()*100.0)/ m_pPartFile->GetPartCount());
a542 1
				double saved;
d544 1
d546 1
a546 3
				if ((eFileStatus == PS_COMPLETING) || (eFileStatus == PS_COMPLETE))
					saved = static_cast<double>(m_pPartFile->GetTransferred()) / static_cast<double>(m_pPartFile->GetFileSize());
				else
d548 5
a552 4
					if(m_pPartFile->GetCompletedSize())
						saved = static_cast<double>(m_pPartFile->GetTransferred()) / static_cast<double>(m_pPartFile->GetCompletedSize());
					else
						saved = 1;
a553 6
				saved *= 100.0;
				if(saved < 100.0)
					strBuffer.AppendFormat(_T("  %s %.2f%%"), GetResString(IDS_FD_COMPRESSION), 100.0 - saved);
				if(saved > 100.0)
					strBuffer.AppendFormat(_T("  %s %.2f%%"), GetResString(IDS_FD_CORRUPTION), saved - 100.0);

@


1.90
log
@Don't use server port while looking for a server in the list
(server can have several ports); Show server port in InfoView.
@
text
@d78 1
a90 1

a93 2
	//{{AFX_MSG_MAP(CInfoListCtrl)
	//}}AFX_MSG_MAP
d292 1
a292 1
			FileData.FoundSources->SetLabelText(GetResString(IDS_INFLST_FILE_FOUNDSOURCES));
d295 4
d570 3
@


1.89
log
@Substituted IDS_INFLST_USER_RATING with IDS_RATING.
@
text
@d372 1
a372 1
				strBuffer.Format(_T("%s:%u"),m_pClient->GetFullIP(),m_pClient->GetUserPort());
d377 2
a378 4
					in_addr server;
					server.S_un.S_addr = m_pClient->GetServerIP();
					USES_CONVERSION;
					UserData.ServerIP->SetStaticText(A2T(inet_ntoa(server)));
d380 1
a380 1
					CServer* pServer = g_App.m_pServerList->GetServerByIP(m_pClient->GetServerIP(), m_pClient->GetServerPort());
@


1.88
log
@Simplified client upload data rate processing -- never return negative (Mantis #518).
@
text
@d217 1
a217 1
			UserData.Rating->SetLabelText(GetResString(IDS_INFLST_USER_RATING));
d241 1
a241 1
			UserData.RemoteRating->SetLabelText(GetResString(IDS_INFLST_USER_RATING));
a402 1

a404 1

@


1.87
log
@Renamed IDS_LASTCHANGE into IDS_LASTRECEPTION;
Removed duplicate string IDS_FD_LASTCHANGE & IDS_LASTSEENCOMPL.
@
text
@d414 1
a414 1
					(m_pClient->GetDataRate() == -1) ? 0.0 : static_cast<double>(m_pClient->GetDataRate())/1024.0, GetResString(IDS_KBYTESEC));
@


1.86
log
@Renamed IDS_INFLST_USER_ID -> IDS_ID;
Renamed IDS_INFLST_USER_SERVERIP -> IDS_SERVERIP.
@
text
@d315 1
a315 1
			FileData.LastProgress->SetLabelText(GetResString(IDS_LASTCHANGE));
@


1.85
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d161 1
a161 1
			UserData.ID->SetLabelText(GetResString(IDS_INFLST_USER_ID));
d165 1
a165 1
			UserData.ServerIP->SetLabelText(GetResString(IDS_INFLST_USER_SERVERIP));
@


1.84
log
@renamed 3 variables
@
text
@d436 1
a436 1
				if(g_App.g_pPrefs->CommunityEnabled())
@


1.83
log
@Unified processing of part and temporary file names.
@
text
@d382 1
a382 1
					CServer* pServer = g_eMuleApp.m_pServerList->GetServerByIP(m_pClient->GetServerIP(), m_pClient->GetServerPort());
d397 1
a397 1
				CKnownFile* pSharedFile = g_eMuleApp.m_pSharedFilesList->GetFileByID(m_pClient->m_reqFileHash);
d436 1
a436 1
				if(g_eMuleApp.m_pGlobPrefs->CommunityEnabled())
d463 1
a463 1
				CKnownFile* pSharedFile = g_eMuleApp.m_pSharedFilesList->GetFileByID(m_pClient->m_reqFileHash);
d640 1
a640 1
			g_eMuleApp.m_pdlgEmule->m_wndTransfer.UpdateInfoHeader();
d658 1
a658 1
			g_eMuleApp.m_pdlgEmule->m_wndTransfer.UpdateInfoHeader();
d665 1
a665 1
			g_eMuleApp.m_pdlgEmule->m_wndTransfer.UpdateInfoHeader();
@


1.82
log
@Corrections for SSDQ integration.
@
text
@d507 1
a507 1
				FileData.MetFile->SetStaticText(m_pPartFile->GetFullName());
@


1.81
log
@IDS_INFLST_USER_COMMUNITY renamed into IDS_COMMUNITY.
@
text
@d698 1
a698 1
			m_pPartFile->GetCopySourceList(DS_DOWNLOADING, DS_LAST_QUEUED_STATE, &clientListCopy);
@


1.80
log
@IDS_TRANSFER_NOUN substitutes IDS_FSTAT_TRANSFER and IDS_INFLST_FILE_TRANSFER.
@
text
@d213 1
a213 1
			UserData.CommunityUser->SetLabelText(GetResString(IDS_INFLST_USER_COMMUNITY));
@


1.79
log
@Simplified transition to eklmn's SSDQ.
@
text
@d174 1
a174 1
			UserData.Transfer->SetLabelText(GetResString(IDS_INFLST_USER_TRANSFER));
d291 1
a291 1
			FileData.Transfer->SetLabelText(GetResString(IDS_INFLST_FILE_TRANSFER));
@


1.78
log
@Fixed client rating display in client details for Saved Source (zero was displayed, though rating is unknown);
Improved string processing.
@
text
@d693 4
d698 2
a699 4
			POSITION			pos1, pos2, pos3, posHighest;
			CUpDownClient	   *pClient;

			for (int sl = 0; sl < SOURCESSLOTS; sl++)
d701 2
a702 1
				if (!m_pPartFile->m_srcLists[sl].IsEmpty())
d704 1
a704 1
					CString strFileName;
d706 3
a708 1
					for (pos1 = m_pPartFile->m_srcLists[sl].GetHeadPosition(); pos1 != NULL; )
d710 3
a712 2
						pClient = m_pPartFile->m_srcLists[sl].GetNext(pos1);
						if (!pClient->IsClientFilenameEmpty())
d714 4
a717 23
							strFileName = pClient->GetClientFilename();

							bool bFound = false;
							pos2 = lstSourceNames.GetHeadPosition();
							for(int i = 0; i < lstSourceNames.GetCount(); i++)
							{
								pos3 = pos2;
								FSL_TempStruct src = lstSourceNames.GetNext(pos2);
								if (strFileName == src.strFileName)
								{
									src.iCount++;
									lstSourceNames.SetAt(pos3, src);
									bFound = true;
									break;
								}
							}
							if(!bFound)
							{
								FSL_TempStruct src;
								src.strFileName = strFileName;
								src.iCount = 1;
								lstSourceNames.AddTail(src);
							}
d720 7
a731 2
				CString strTemp;

d753 2
a754 2
					strTemp.Format(_T("%s   (%u)"), src.strFileName, src.iCount);
					FileData.SourceNames->AddString(strTemp);
@


1.77
log
@Improved string processing.
@
text
@a347 1
	//filling a list
a353 4
			bool loadSourceName = FALSE;
			if(m_pClient->GetUserName())
				loadSourceName = _tcsstr(m_pClient->GetUserName(), GetResString(IDS_LOADEDSOURCE));

d356 1
a356 1
				if(m_pClient->GetUserName())
d361 1
a361 1
				if(m_pClient->GetUserName())
d366 1
a366 1
				UserData.ClientSoftware->SetStaticText(m_pClient->GetClientNameAndVersionString());
d441 2
d444 1
a444 1
				if(m_pClient->GetUserName() && !loadSourceName)
@


1.76
log
@Removed GetScore unused parameter
@
text
@d709 1
a709 1
						if (!pClient->GetClientFilename().IsEmpty())
@


1.75
log
@Removed non-working code.
@
text
@d452 1
a452 1
						strBuffer.Format(_T("%u"),m_pClient->GetScore(false,m_pClient->IsDownloading(),true));
@


1.74
log
@Renamed string IDS_INFLST_FILE_LASTSEENCOMPLETE -> IDS_LASTSEENCOMPLETE.
@
text
@a63 1
	UserData.RemoteUploadQueueScore = NULL;
a64 1
	UserData.RemoteClientSpeed = NULL;
a243 4
			UserData.RemoteUploadQueueScore = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
			UserData.RemoteUploadQueueScore->SetLabelText(GetResString(IDS_INFLST_USER_UPLOADQUEUESCORE));
			if(UserData.RemoteUploadQueueScore->CreateStaticItem(0))
				UserData.RemoteUploadQueueScore->SetTextColor(m_crEntryTextColor);
a247 4
			UserData.RemoteClientSpeed = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
			UserData.RemoteClientSpeed->SetLabelText(GetResString(IDS_INFLST_REMOTE_SPEED));
			if(UserData.RemoteClientSpeed->CreateStaticItem(0))
				UserData.RemoteClientSpeed->SetTextColor(m_crEntryTextColor);
d470 1
a470 1
					strBuffer.Format(_T("%0.2f"), pSharedFile->GetPopularityRatio());
d478 1
a478 1
					strBuffer.Format(_T("%0.2f"), pSharedFile->GetSizeRatio());
d493 1
a493 1
					UserData.RemoteQueueRank->SetStaticText(_T("??"));
d495 1
a495 1
				strBuffer.Format(_T("%0.1f"),m_pClient->GetRemoteBaseModifier());
a499 16

				if (m_pClient->IsRemoteInfoAvaiable())
				{
					strBuffer.Format(_T("%u"),m_pClient->GetRemoteScore());
					UserData.RemoteUploadQueueScore->SetStaticText(strBuffer);
				} else
				{
					UserData.RemoteUploadQueueScore->SetStaticText(_T("??"));
				}

				if (m_pClient->GetRemoteClientSpeed() == 0)
					UserData.RemoteClientSpeed->SetStaticText(_T("??"));
				else {
					strBuffer.Format(_T("%u"),m_pClient->GetRemoteClientSpeed());
					UserData.RemoteClientSpeed->SetStaticText(strBuffer);
				}
@


1.73
log
@Don't report 100.00% completed for file with minor amount left to download {vendetta7}.
@
text
@d321 1
a321 1
			FileData.LastSeenComplete->SetLabelText(GetResString(IDS_INFLST_FILE_LASTSEENCOMPLETE));
@


1.72
log
@Unified GUI strings for "file hash" (removed duplicate,
new full form is "File Hash" instead of "FileID").
@
text
@d572 1
a572 1
				strBuffer.Format(_T("%s (%.2f%%)"), CastItoXBytes(m_pPartFile->GetCompletedSize()), m_pPartFile->GetPercentCompleted());
@


1.71
log
@Removed unused strings IDS_FD_GENERAL, IDS_CD_GENERAL, IDS_INFLST_USER_GENERAL.
@
text
@d273 1
a273 1
			FileData.Hash->SetLabelText(GetResString(IDS_INFLST_FILE_HASH));
@


1.70
log
@BUGFIX: -0.0 KB/s display for average download rate in details pane {Fuxie - DK} [SyruS]
...and put a bit structure into changelog for crediting the reporter - hope u like it :P
@
text
@d144 1
a144 1
			UserData.General->SetLabelText(GetResString(IDS_INFLST_USER_GENERAL));
d262 1
a262 1
			FileData.General->SetLabelText(GetResString(IDS_INFLST_FILE_GENERAL));
@


1.69
log
@Unified way to display label for part and complete files.
@
text
@d429 1
a429 1
					static_cast<double>(m_pClient->GetDataRate())/1024.0, GetResString(IDS_KBYTESEC));
@


1.68
log
@rollback of old waiting queue
@
text
@d269 1
a269 1
			FileData.MetFile->SetLabelText(GetResString(IDS_INFLST_FILE_METFILE));
@


1.67
log
@prevent possible crash if file will not found
@
text
@d462 1
a462 1
						strBuffer.Format(_T("%u"),m_pClient->GetPosInWaitingQueue());
d470 1
a470 1
					strBuffer.Format(_T("%u"),m_pClient->GetWaitingScore());
@


1.66
log
@1) varios correction for SSWQ & Co
2) the file ratios moved to file class
3) corrected measurement of time on remote queue
@
text
@d478 7
a484 2
				strBuffer.Format(_T("%0.2f"), pSharedFile->GetPopularityRatio());
				UserData.RFRatio->SetStaticText(strBuffer);
d486 7
a492 2
				strBuffer.Format(_T("%0.2f"), pSharedFile->GetSizeRatio());
				UserData.SFRatio->SetStaticText(strBuffer);
@


1.65
log
@SSWQ
@
text
@d460 1
a460 1
						strBuffer = CString(_T("-"));
d476 3
a478 1
				strBuffer.Format(_T("%0.1f"),m_pClient->GetRareFilePushRatio());
d481 1
a481 1
				strBuffer.Format(_T("%0.1f"),m_pClient->GetSmallFilePushRatio());
@


1.64
log
@Preparations for new client version report code;
Removed separate version string.
@
text
@d459 4
a462 1
					strBuffer.Format(_T("%u"),m_pClient->GetScore(false,m_pClient->IsDownloading(),true));
d468 1
a468 1
				if(m_pClient->GetUploadState() != US_NONE)
d470 1
a470 1
					strBuffer.Format(_T("%u"),m_pClient->GetScore(m_pClient->IsDownloading(),false));
@


1.63
log
@Fixed wrong Info pane client software information;
Fixed Info pane localization for High/Low IDs.
@
text
@a38 1
	UserData.ClientVersion = NULL;
a157 4
			UserData.ClientVersion = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
			UserData.ClientVersion->SetLabelText(GetResString(IDS_INFLST_USER_CLIENTVERSION));
			if(UserData.ClientVersion->CreateStaticItem(0))
				UserData.ClientVersion->SetTextColor(m_crEntryTextColor);
d381 1
a381 33
				strBuffer = ::GetClientNameString(m_pClient->GetClientSoft());

				bool bIsPlus = m_pClient->GetPlusVersion() && m_pClient->GetPlusVersion() < 0x2600;

				if (bIsPlus)
				{
					strBuffer += _T(' ');
					strBuffer += ::GetClientNameAndVersionString(m_pClient);
				}
				UserData.ClientSoftware->SetStaticText(strBuffer);
				
				switch (m_pClient->GetClientSoft())
				{
					case SO_EMULE:
					case SO_LMULE:
					case SO_OLDEMULE:
					case SO_AMULE:
					case SO_SHAREAZA:
					{
						strBuffer = ::GetClientVersionString(m_pClient->GetClientSoft(), m_pClient->GetMuleVersion());
						break;
					}
					case SO_UNKNOWN:
					{
						strBuffer = _T("?");
						break;
					}
					default:
					{
						strBuffer = ::GetClientVersionString(m_pClient->GetClientSoft(), m_pClient->GetVersion());
						break;
					}
				}
a382 8
				if(!m_pClient->GetModVersion().IsEmpty() && !bIsPlus)
				{
					strBuffer += _T(" [");
					strBuffer += m_pClient->GetModVersion();
					strBuffer += _T("]");
				}
				UserData.ClientVersion->SetStaticText(strBuffer);

@


1.62
log
@Add aMule client support;
CDonkey client support is eliminated.
@
text
@d385 13
a397 2
				bool isPlus=(m_pClient->GetPlusVersion() && m_pClient->GetPlusVersion()<0x2600);
				switch(m_pClient->GetClientSoft())
a398 4
					case SO_UNKNOWN:
						UserData.ClientSoftware->SetStaticText(_T("?"));
						UserData.ClientVersion->SetStaticText(_T("?"));
						break;
d401 1
a402 1
					case SO_OLDEMULE:
d404 7
a410 16
					//	Second check - don't display the 38e (pre v1?) mods
						if(isPlus)	
							UserData.ClientSoftware->SetStaticText(_T("eMule  (")+GetClientNameAndVersionString(m_pClient)+_T(")"));
						else
							UserData.ClientSoftware->SetStaticText(_T("eMule"));

						if(m_pClient->GetMuleVersion())
						{
							if(!m_pClient->GetModVersion().IsEmpty() && !isPlus)
								strBuffer.Format(_T("v0.%02X [%s]"),m_pClient->GetMuleVersion(), m_pClient->GetModVersion());
							else
								strBuffer.Format(_T("v0.%02X"),m_pClient->GetMuleVersion());
							UserData.ClientVersion->SetStaticText(strBuffer);
						}
						else
							UserData.ClientVersion->SetStaticText(_T("?"));
d412 1
a412 1

d414 11
a424 2
						UserData.ClientSoftware->SetStaticText(GetClientNameString(m_pClient->GetClientSoft()));
						UserData.ClientVersion->SetStaticText(GetClientVersionString(m_pClient->GetClientSoft(), m_pClient->GetVersion()));
d426 1
d428 2
a429 1
				strBuffer.Format(_T("%u (%s)"),m_pClient->GetUserID(),(m_pClient->HasLowID() ? "Low":"High"));
@


1.61
log
@Tooltips string improvements
@
text
@d394 1
a394 1
					case SO_CDONKEY:
@


1.60
log
@added tooltips to the Server list
@
text
@a129 2
	CString strRes("");

d330 1
a330 3
			strRes.SetString(GetResString(IDS_FD_LASTCHANGE));
			strRes.Remove(':');
			FileData.LastProgress->SetLabelText(strRes);
@


1.59
log
@Added 'filesize on disk' info to details pane, file details, category tooltips and statistics
@
text
@d492 1
a492 6
				{
					if(m_pClient->IsCommunity())
						UserData.CommunityUser->SetStaticText(GetResString(IDS_YES));
					else
						UserData.CommunityUser->SetStaticText(GetResString(IDS_NO));
				}
@


1.58
log
@better estimation of own score on remote client + no more friend/community guess + minor Infolist fix + removed unused functions
@
text
@d75 1
a81 1

a84 1

d287 4
d569 1
a569 1

@


1.57
log
@minor changes (Partfile --> PartFile...)
@
text
@d27 1
a27 1
	for(int i = 0; i < 3; i++)
d34 1
a34 1
//	 initialize a file structure
a58 2

	//By Maverick
a63 1
	UserData.RemoteCommunityUser = NULL;
d69 1
a69 1
//	initialize a file structure
a85 1
	//SyruS last progress info
d122 1
a122 1
	// now we can safely remove an items from the tree (delete we call inside)
d137 1
a137 1
		// now we can safely remove an items from the tree (delete we call inside)
a233 1
			//By Maverick
a249 4
			UserData.RemoteCommunityUser = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
			UserData.RemoteCommunityUser->SetLabelText(GetResString(IDS_INFLST_USER_COMMUNITY));
			if(UserData.RemoteCommunityUser->CreateStaticItem(0))
				UserData.RemoteCommunityUser->SetTextColor(m_crEntryTextColor);
a327 1
			//SyruS last progress info
d398 2
a399 1
						if(isPlus)	//Cax2 - second check - don't display the 38e (pre v1?) mods
a415 1
					//Cax2 - hybrid bugfix & simplified the code
a500 1
					// Bugfix by Maverick
a514 1
				// By Maverick
a519 1
				// End Maverick
a521 1
			// By Maverick
a523 7
				if (!m_pClient->GetRemoteCommunityEnabled())
					UserData.RemoteCommunityUser->SetStaticText(GetResString(IDS_DISABLED));
				else if (m_pClient->GetRemoteCommunity())
					UserData.RemoteCommunityUser->SetStaticText(GetResString(IDS_YES));
				else
					UserData.RemoteCommunityUser->SetStaticText(GetResString(IDS_NO));

a553 1
			// By Maverick
a590 1
				//SyruS last progress info
a617 2
			//	if(saved == 100.0)
			//		strBuffer.AppendFormat("  Nothing special");
a637 1
	//RefreshItems(reinterpret_cast<COptionTreeItem*>(this));
@


1.56
log
@Hope now it's fixed the problem with InfoListCtrl and empty data when minimize+maximize
@
text
@d589 1
a589 1
				FileData.PartFileStatus->SetStaticText(m_pPartFile->GetPartfileStatus());
@


1.55
log
@Minor change... had to find where the bug is. :-(
@
text
@a127 1
	m_eListType = INFOLISTTYPE_NONE;
d691 2
a692 2
		// Save actual state before list is cleared
		SaveState();
a701 3
	// Save actual state
	SaveState();

d712 2
d730 2
@


1.54
log
@Remake for display '&' on info pane; now also all fields can show '&' correctly;
Improved string processing.
@
text
@d692 2
a693 2
		//save actuall state before list will be cleared
		SaveState(m_eListType);
d703 2
a704 2
	//save actuall state
	SaveState(m_eListType);
@


1.53
log
@display fix for & chars in filename for infolist pane
@
text
@d462 1
a462 1
					UserData.CurDownloading->SetStaticText(MakeStringEscaped(pSharedFile->GetFileName()));
d472 2
a473 1
				strBuffer.Format(_T("%.1f ") + GetResString(IDS_KBYTESEC),static_cast<double>(m_pClient->GetDownloadDataRate())/1024.0);
d476 2
a477 1
				strBuffer.Format(_T("%.1f ") + GetResString(IDS_KBYTESEC),static_cast<double>(m_pClient->GetDataRate())/1024.0);
d585 1
a585 1
				FileData.FullName->SetStaticText(MakeStringEscaped(m_pPartFile->GetFileName()));
d606 1
a606 1
				strBuffer.Format(_T("%i (%.1f%%)"),m_pPartFile->GetAvailablePartCount(),percent);
d610 1
a610 1
					strBuffer.Format(GetResString(IDS_NEVER));
d612 1
a612 5
					strBuffer.Format(m_pPartFile->LocalizeLastSeenComplete());

					//strBuffer.Format(m_pPartFile->lastseencomplete.Format("%A, %Y-%m-%d, %X"));

				FileData.LastSeenComplete->SetStaticText(strBuffer);
d616 1
a616 1
					strBuffer.Format(GetResString(IDS_NEVER));
d618 1
a618 2
					strBuffer.Format(m_pPartFile->LocalizeLastDownTransfer());
				FileData.LastProgress->SetStaticText(strBuffer);
d623 1
a623 1
				strBuffer.Format(_T("%s (%.02f%%)"), CastItoXBytes(m_pPartFile->GetCompletedSize()), m_pPartFile->GetPercentCompleted());
a624 1
				CString strBuffer2;
d626 3
a628 1
				if(m_pPartFile->GetStatus() == PS_COMPLETING || m_pPartFile->GetStatus() == PS_COMPLETE)
d639 1
a639 1
					strBuffer2.Format(_T("  ") + GetResString(IDS_FD_COMPRESSION) + _T(" %.02f%%"),100.0-saved);
d641 1
a641 1
					strBuffer2.Format(_T("  ") + GetResString(IDS_FD_CORRUPTION) + _T(" %.02f%%"),saved-100.0);
d643 1
a643 1
			//		strBuffer2.Format("  Nothing special");
a644 1
				strBuffer += strBuffer2;
d647 2
a648 1
				strBuffer.Format(_T("%.2f ") + GetResString(IDS_KBYTESEC),static_cast<double>(m_pPartFile->GetDataRate())/1024.0);
d651 1
a651 1
				strBuffer.Format(_T("%i"),m_pPartFile->GetSourceCount());
d654 1
a654 1
				strBuffer.Format(_T("%i"),m_pPartFile->GetTransferringSrcCount());
d783 1
d790 1
a790 1
							CString strFileName = MakeStringEscaped(pClient->GetClientFilename());
d801 1
d803 1
a803 2
									i = lstSourceNames.GetCount();
									lstSourceNames.SetAt(pos3, src);
d820 2
d843 1
a843 2
					CString strTemp;
					strTemp.Format(_T("%s   (%d)"), src.strFileName, src.iCount);
@


1.52
log
@Improved client version to string conversion
@
text
@d462 1
a462 1
					UserData.CurDownloading->SetStaticText(pSharedFile->GetFileName());
d583 1
a583 1
				FileData.FullName->SetStaticText(m_pPartFile->GetFileName());
d791 1
a791 1
							CString strFileName = pClient->GetClientFilename();
@


1.51
log
@list processing optimization
@
text
@d429 1
a429 1
						UserData.ClientVersion->SetStaticText(_T("v")+GetClientVersionString(m_pClient->GetClientSoft(),m_pClient->GetVersion()));
@


1.50
log
@Improved hash to string conversion
@
text
@d44 1
a44 1
		
d80 1
a80 1
			
d84 1
a84 1
		
d88 1
a88 1
	
d98 1
a98 1
	
d190 1
a190 1
			UserData.Transfer->Expand(m_bExpandedUser[1]);			
d278 1
a278 1
		{		
d305 1
a305 1
			{	
d325 1
a325 1
			
d377 1
a377 1
	
d383 1
a383 1
			if(m_pClient->GetUserName()) 
d385 1
a385 1
			
d392 1
a392 1
					
d431 1
a431 1
			
d434 1
a434 1
						
d444 2
a445 2
									
					CServer* pServer = g_eMuleApp.m_pServerList->GetServerByIP(m_pClient->GetServerIP(), m_pClient->GetServerPort()); 
d466 1
a466 1
				
d468 2
a469 2
				
				
d474 1
a474 1
				
d481 1
a481 1
				
d499 1
a499 1
					if(m_pClient->IsCommunity()) 
d506 2
a507 2
				
				
d516 1
a516 1
				
d518 1
a518 1
				{					
d525 1
a525 1
				// By Maverick				
d539 1
a539 1
				else if (m_pClient->GetRemoteCommunity()) 
d549 1
a549 1
				else 
d584 2
a585 2
				FileData.MetFile->SetStaticText(m_pPartFile->GetFullName());							
				FileData.Hash->SetStaticText(HashToString(m_pPartFile->GetFileHash()));				
d587 1
a587 1
				
d606 3
a608 3
				
				if(m_pPartFile->lastseencomplete == NULL) 
					strBuffer.Format(GetResString(IDS_NEVER)); 
d615 1
a615 1
						
d622 1
a622 1
				
d624 2
a625 2
				
				
d627 1
a627 1
							 
d629 5
a633 5
				double saved; 
				if(m_pPartFile->GetStatus() == PS_COMPLETING || m_pPartFile->GetStatus() == PS_COMPLETE) 
					saved = static_cast<double>(m_pPartFile->GetTransferred()) / static_cast<double>(m_pPartFile->GetFileSize()); 
				else 
				{	
d635 1
a635 1
						saved = static_cast<double>(m_pPartFile->GetTransferred()) / static_cast<double>(m_pPartFile->GetCompletedSize()); 
d639 6
a644 6
				saved *= 100.0; 
				if(saved < 100.0) 
					strBuffer2.Format(_T("  ") + GetResString(IDS_FD_COMPRESSION) + _T(" %.02f%%"),100.0-saved); 
				if(saved > 100.0) 
					strBuffer2.Format(_T("  ") + GetResString(IDS_FD_CORRUPTION) + _T(" %.02f%%"),saved-100.0); 
			//	if(saved == 100.0) 
d646 1
a646 1
	            
d652 1
a652 1
				
d655 1
a655 1
				
d766 1
a766 1
void CInfoListCtrl::FillSourcenameList() 
d768 1
a768 1
	if(FileData.bSourceNameCombo)
d773 2
a774 2
				
		if(m_pPartFile)
d778 2
a779 2
			POSITION pos1,pos2,pos3; 
			CUpDownClient* cur_src; 
d781 2
a782 1
			for (int sl=0;sl<SOURCESSLOTS;sl++) 
d785 5
a789 12
			
				for(pos1 = m_pPartFile->m_srcLists[sl].GetHeadPosition(); (pos2 = pos1) != NULL;) 
				{ 
					m_pPartFile->m_srcLists[sl].GetNext(pos1); 
					cur_src = m_pPartFile->m_srcLists[sl].GetAt(pos2); 
					if(!cur_src->GetClientFilename().IsEmpty()) 
					{ 
						CString strFileName = cur_src->GetClientFilename();

						bool bFound = false;
						pos3 = lstSourceNames.GetHeadPosition();
						for(int i = 0; i < lstSourceNames.GetCount(); i++)
d791 5
a795 2
							FSL_TempStruct src = lstSourceNames.GetAt(pos3);
							if(strFileName == src.strFileName)
d797 16
a812 4
								src.iCount++;
								bFound = true;
								i = lstSourceNames.GetCount();
								lstSourceNames.SetAt(pos3, src);
a813 8
							lstSourceNames.GetNext(pos3);
						}
						if(!bFound)
						{
							FSL_TempStruct src;
							src.strFileName = strFileName;
							src.iCount = 1;
							lstSourceNames.AddTail(src);
a816 1
								
d819 10
a828 7
			if(lstSourceNames.GetCount() > 0)
				for(int i = 0; i < lstSourceNames.GetCount(); i++)
				{	
					pos3 = lstSourceNames.GetHeadPosition();
					POSITION posHighest = pos3;
					int iHighest = 0;
					for(int j = 0; j < lstSourceNames.GetCount(); j++)
d830 5
a834 2
						FSL_TempStruct srctmp = lstSourceNames.GetAt(pos3);
						if(srctmp.iCount > iHighest)
a838 1
						lstSourceNames.GetNext(pos3);
d840 1
a840 1
					
d848 1
d850 1
d852 1
@


1.49
log
@Formatting, comments, and name changes.
@
text
@d394 1
a394 1
					UserData.UserHash->SetStaticText(FileHashToString(m_pClient->GetUserHash()));
d585 1
a585 1
				FileData.Hash->SetStaticText(FileHashToString(m_pPartFile->GetFileHash()));				
@


1.48
log
@Reverted a change that was causing problems on release.
@
text
@d150 1
a150 1
		if(m_eListType == INFOLISTTYPE_SOURCE)
d378 1
a378 1
	if(m_eListType == INFOLISTTYPE_SOURCE)
d380 1
a380 1
		if(m_pClient != NULL)
d577 1
a577 1
	else if(m_eListType == INFOLISTTYPE_FILE)
d579 1
a579 1
		if(m_pPartFile != NULL)
d748 1
a748 1
			// update a header in Transfer window
@


1.47
log
@eklmn changes for InfoListCtrl (hope no more GUI/Update bugs appear)
@
text
@d665 2
a666 2
	//UpdatedItems();
	RefreshItems(reinterpret_cast<COptionTreeItem*>(this));
@


1.46
log
@Changed InfoListCtrl code to use the existing EnumInfoListType
@
text
@d25 1
d133 1
d363 1
a363 2
		DeleteAllItems();
		m_eListType = INFOLISTTYPE_NONE;
d665 2
a666 1
	UpdatedItems();
d689 1
d697 1
d715 2
a716 2
			//create a list if windows is visible & type was changed
			if (bIsWindowVisible && m_eListType != INFOLISTTYPE_SOURCE)
d732 1
a732 1
			if (bIsWindowVisible && m_eListType != INFOLISTTYPE_FILE)
d734 1
a734 1
				// update a object type & create a list
d750 1
a750 1
			if (m_eListType != INFOLISTTYPE_NONE)
d754 1
@


1.45
log
@Fixed again the switch of File -> None -> File on InfoList.
Removed totally SetRedraw because of GUI bugs.
@
text
@d22 1
a22 2
	m_bClear = true;
	
a24 1
	m_bUser = TRUE;
d127 1
a127 1
	m_bClear = true;
d138 1
a138 1
	if (!m_bClear)
a141 1
		m_bClear = true;
d148 1
a148 1
		if(m_bUser)
a355 1
		m_bClear = false;
d362 1
a362 1
		m_bClear = true;
d377 1
a377 1
	if(m_bUser)
d379 1
a379 1
		if(m_pClient != NULL && !m_bClear)
d576 1
a576 1
	else
d578 1
a578 1
		if(m_pPartFile != NULL && !m_bClear)
d692 1
a692 1
		SaveState(m_bUser);
d702 1
a702 3
	SaveState(m_bUser);

	EnumInfoListType OldenumItemType = GetType();
d712 1
a712 1
			if (bIsWindowVisible && OldenumItemType != INFOLISTTYPE_SOURCE)
d715 1
a715 1
				m_bUser = true;
d720 1
a720 1
				m_bUser = true;
d728 1
a728 1
			if (bIsWindowVisible && OldenumItemType != INFOLISTTYPE_FILE)
d731 1
a731 1
				m_bUser = false;
d736 1
a736 1
				m_bUser = false;
a743 1
			m_bUser = false;
d746 1
a746 1
			if (!m_bClear)
@


1.44
log
@rollbck for LockWindow... changes, SetRedraw in Update() removed
@
text
@d139 1
d147 2
a367 1
	SetRedraw(TRUE);
a377 2
	//SetRedraw(FALSE);

a663 1
	//SetRedraw(TRUE);
d667 1
a667 1
		
d708 2
d718 1
a718 1
			if (bIsWindowVisible && !m_bUser)
d734 1
a734 1
			if (bIsWindowVisible && m_bUser)
@


1.43
log
@Some changes to fix blank infolist even while selecting a file and some GUI issues.
@
text
@d138 1
a138 3
	LockWindowUpdate();
//	SetRedraw(FALSE);

d365 1
a365 3

	UnlockWindowUpdate();
//	SetRedraw(TRUE);
d376 1
a376 2
	LockWindowUpdate();
//	SetRedraw(FALSE);
d649 1
a649 1

d655 1
a655 1

d658 1
a658 1

d664 1
a664 3

	UnlockWindowUpdate();
//	SetRedraw(TRUE);
d668 1
a668 1

d717 1
a717 1
			if (bIsWindowVisible)
d733 1
a733 1
			if (bIsWindowVisible)
d750 2
a753 1
				// update a header in Transfer window
a755 1
			g_eMuleApp.m_pdlgEmule->m_wndTransfer.UpdateInfoHeader();
@


1.42
log
@fixed incorrect listtype switching
@
text
@d138 3
a140 1
	SetRedraw(FALSE);
d367 3
a369 1
	SetRedraw(TRUE);
d380 2
a381 1
	SetRedraw(FALSE);
d654 1
a654 1
	            
d660 1
a660 1
				
d663 1
a663 1
				
d669 3
a671 1
	SetRedraw(TRUE);
a674 3
		
	//Invalidate();
	//UpdateWindow();
d724 1
a724 1
			if (bIsWindowVisible && !m_bUser)
d740 1
a740 1
			if (bIsWindowVisible && m_bUser)
a759 1
				g_eMuleApp.m_pdlgEmule->m_wndTransfer.UpdateInfoHeader();
d762 1
@


1.41
log
@small optimization
@
text
@d707 2
d716 1
d719 10
a728 1
			m_bUser = true;
a730 2
			//creating  a list (if list is not empty items will be deleted)
			CreateList();
d733 1
d736 9
a744 1
			m_bUser = false;
a746 2
			//creating  a list (if list is not empty items will be deleted)
			CreateList();
@


1.40
log
@small optimization
@
text
@d717 2
d726 2
d737 3
d741 1
d744 1
a744 5
	// Update ( (re)create & fill the InfoList)
	//UpdateData(false);

	// update a header in Transfer window
	g_eMuleApp.m_pdlgEmule->m_wndTransfer.UpdateInfoHeader();
@


1.39
log
@proper InfoList handling
@
text
@d732 2
a733 1
			ClearList();
@


1.38
log
@minor fix + hebrew localization
@
text
@d109 17
a125 10
void CInfoListCtrl::ReCreateList(BOOL bUserData)
{	
//	SetRedraw(FALSE);	 SetRedraw makes some troubles with scrollbar redraw/update :(

	const bool bWasWindowVisible = IsWindowVisible();
	if(bWasWindowVisible)
		ShowWindow(SW_HIDE);	// until i find a better solution

	CString strRes("");

d130 15
d148 2
a149 2
		if(bUserData)
		{			
d152 1
a184 2
			//expand a subtree when it filled
			UserData.General->Expand(m_bExpandedUser[0]);
d188 1
a216 2
			//expand a subtree when it filled
			UserData.Transfer->Expand(m_bExpandedUser[1]);
d220 1
a245 2
			//expand a subtree when it filled
			UserData.Scores->Expand(m_bExpandedUser[2]);
d249 1
a273 2
			//expand a subtree when it filled
			UserData.RemoteScores->Expand(m_bExpandedUser[3]);
d279 1
a310 2
			//expand a subtree when it filled
			FileData.General->Expand(m_bExpandedFile[0]);
d314 1
a354 2
			//expand a subtree when it filled
			FileData.Transfer->Expand(m_bExpandedFile[1]);
a365 10
	Invalidate();

	if(bWasWindowVisible)
		ShowWindow(SW_SHOW);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CInfoListCtrl::Create(DWORD dwStyle, RECT rcRect, CWnd *pParentWnd, UINT nID)
{
	dwStyle |= WS_CLIPCHILDREN;
	return COptionTree::Create(dwStyle, rcRect, pParentWnd, OT_OPTIONS_SHADEEXPANDCOLUMN | OT_OPTIONS_SHADEROOTITEMS, nID);
d368 2
a369 1
void CInfoListCtrl::UpdateData(bool bRedraw, bool bExpandAllItems)
a370 2
    EMULE_TRY
		
d374 2
d377 2
d380 1
d383 1
a383 1
		if(m_pClient != NULL)
d582 1
a582 1
		if(m_pPartFile != NULL)
d668 5
a672 3
	
	if(bRedraw)
		Invalidate();
d690 4
a693 1
		//UpdateData();	// bad one :(
d699 3
d705 1
a705 1
void CInfoListCtrl::Localize()
d707 1
a707 27
	if(GetSafeHwnd())
	{
		if(m_bUser)
		{
			if(m_pClient != NULL)
			{	
				ReCreateList(m_bUser);
				UpdateData(true,false);
			}
		}
		else
		{	
			if(m_pPartFile != NULL)
			{	
				ReCreateList(m_bUser);
				UpdateData(true,false);
			}
		}
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CInfoListCtrl::SwitchToUser(CUpDownClient* pTargetClient)
{
	if(pTargetClient == m_pClient)
		return;

	// save previous state
d710 2
a711 2
	// client is undefined => reser a client
	if(pTargetClient == NULL && !m_bClear)
d713 20
a732 49
		m_pClient = NULL;
		SetRedraw(FALSE);
		DeleteAllItems();
		m_bClear = true;
		SetRedraw(TRUE);
		if(IsWindowEnabled())
			Invalidate();
	
		m_pPartFile = NULL;
		m_bUser = true;
	}
	else		//target client was specified. 
	{		
		// recreate a list if : 1) InfoLis was empty 2) it was a file before 3) client was a NULL
		if(m_bClear || !m_bUser || m_pClient == NULL)
		{
			m_pClient = pTargetClient;
			ReCreateList(true);
		}
		else
			m_pClient = pTargetClient;

		m_pPartFile = NULL;
		m_bUser = true;

		UpdateData(TRUE, FALSE);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CInfoListCtrl::SwitchToFile(CPartFile* pTargetFile)
{
	if(pTargetFile == m_pPartFile && pTargetFile != NULL)
		return;

	// save previous state
	SaveState(m_bUser);

	if(pTargetFile == NULL && !m_bClear)
	{
		m_pPartFile = NULL;
		SetRedraw(FALSE);
		DeleteAllItems();
		m_bClear = true;
		SetRedraw(TRUE);
		if(IsWindowEnabled())
			Invalidate();

		m_pClient = NULL;
		m_bUser = false;
a733 13
	else		//target file was specified. 
	{		
		// recreate a list if : 1) it was a User before 2) file was a NULL
		if(m_bUser || m_pPartFile == NULL)
		{
			m_pPartFile = pTargetFile;
			ReCreateList(false);
		}
		else
			m_pPartFile = pTargetFile;

		m_pClient = NULL;
		m_bUser = false;
d735 2
a736 1
		FileData.iSourceNameUpdateDelay = 0;
d738 2
a739 2
		UpdateData(TRUE, FALSE);
	}
@


1.37
log
@data output corrections
@
text
@d465 1
a465 1
				strBuffer.Format(_T("%.1f KB/s"),static_cast<double>(m_pClient->GetDownloadDataRate())/1024.0);
d468 1
a468 1
				strBuffer.Format(_T("%.1f KB/s"),static_cast<double>(m_pClient->GetDataRate())/1024.0);
d634 1
a634 1
					strBuffer2.Format(_T("  Saved: %.02f %%"),100.0-saved); 
d636 1
a636 1
					strBuffer2.Format(_T("  Lost: %.02f %%"),saved-100.0); 
d643 1
a643 1
				strBuffer.Format(_T("%.2f kB/s"),static_cast<double>(m_pPartFile->GetDataRate())/1024.0);
@


1.36
log
@bugfix: intial drawing
@
text
@d428 1
a428 1
				strBuffer.Format(_T("%s:%i"),m_pClient->GetFullIP(),m_pClient->GetUserPort());
d539 1
a539 1
					strBuffer.Format(_T("%ld"),m_pClient->GetRemoteQueueRank());
d548 1
a548 1
				strBuffer.Format(_T("%ld"),m_pClient->GetRemoteRatio());
d553 1
a553 1
					strBuffer.Format(_T("%ld"),m_pClient->GetRemoteScore());
d563 2
a564 2
					strBuffer.Format(_T("%ld"),m_pClient->GetRemoteClientSpeed());
					UserData.RemoteClientSpeed->SetStaticText(_T("??"));
d589 1
a589 1
				strBuffer.Format(_T("%i"),m_pPartFile->GetPartCount());
@


1.35
log
@crashfix pt.2
@
text
@d746 1
a746 1
		UpdateData(FALSE, FALSE);
d787 1
a787 1
		UpdateData(FALSE, FALSE);
@


1.34
log
@crashfix
@
text
@d733 1
a733 2
	{
		m_pClient = pTargetClient;
d737 1
d740 2
@


1.33
log
@futher optimization to prevent resource possible leak
@
text
@d770 1
a770 2
	{
		m_pPartFile = pTargetFile;
d774 1
d777 2
@


1.32
log
@fix for resource leak in UL list
@
text
@d122 1
a129 1
			UserData.General->Expand(m_bExpandedUser[0]);
d162 2
a166 1
			UserData.Transfer->Expand(m_bExpandedUser[1]);
d195 2
a199 1
			UserData.Scores->Expand(m_bExpandedUser[2]);
a215 1

d225 2
a229 1
			UserData.RemoteScores->Expand(m_bExpandedUser[3]);
d254 2
a260 1
			FileData.General->Expand(m_bExpandedFile[0]);
d292 3
a294 1
				
a296 1
			FileData.Transfer->Expand(m_bExpandedFile[1]);
d337 2
a338 2

			m_bClear = false;
d372 1
a372 1
	{		
d380 1
a380 1
			{			
d408 1
a408 1
						{							
d464 1
a464 1
								
d475 1
a475 1
				UserData.UploadedTotal->SetStaticText(CastItoXBytes(m_pClient->Credits()->GetDownloadedTotal()));				
d477 1
a477 1
											
d491 1
a491 1
				{									
d503 1
a503 1
					// Bugfix by Maverick				
d542 2
a543 1
				else UserData.RemoteQueueRank->SetStaticText(_T("??"));
d661 2
a662 1
    EMULE_CATCH
d710 1
a710 1
void CInfoListCtrl::SwitchToUser(CUpDownClient* client)
d712 1
a712 1
	if(client == m_pClient)
d714 7
a720 4
			
	if(client == NULL)
	{				
		SaveState(m_bUser);
d724 1
a730 2

		return;
d732 1
a732 2
	
	if(m_bClear || !m_bUser || m_pClient == NULL)
d734 7
a740 4
		m_pClient = client;
		SaveState(m_bUser);
		ReCreateList(true);
            	
a744 1
		return;
a745 7
	
	m_pClient = client;
		
	m_pPartFile = NULL;
	m_bUser = true;
		
	UpdateData(FALSE, FALSE);
d748 1
a748 1
void CInfoListCtrl::SwitchToFile(CPartFile* file)
d750 1
a750 1
	if(file == m_pPartFile && file != NULL)
d752 5
a756 2
			
	if(file == NULL)
a757 1
		SaveState(m_bUser);
d761 1
a767 2

		return;
d769 1
a769 2
	
	if(m_bUser || m_pPartFile == NULL)
d771 3
a773 1
		if(m_pPartFile)
d775 1
a775 2
			m_pPartFile = file;
			SaveState(m_bUser);
a776 3
		else
			m_pPartFile = file;
		ReCreateList(false);
d781 2
a783 1
		return;
a784 7
			
	m_pPartFile = file;
	m_pClient = NULL;
	m_bUser = false;
	FileData.iSourceNameUpdateDelay = 0;

	UpdateData(FALSE, FALSE);
d808 3
a810 2
            for (int sl=0;sl<SOURCESSLOTS;sl++) if (!m_pPartFile->m_srcLists[sl].IsEmpty())
			{
d819 1
a819 1
												
d826 1
a826 1
							{	
@


1.31
log
@Reverted code changes (GUI/Update problems) and done a check on application exit.
@
text
@d113 1
a113 1
	bool bWasWindowVisible = IsWindowVisible();
d119 1
d333 2
d336 1
d343 1
d345 2
a346 3

//	SetRedraw(TRUE);
//	Invalidate();
a349 2
	
	m_bClear = false;
d361 1
d365 2
a366 1
	CString buffer;	
d406 1
a406 1
								buffer.Format(_T("v0.%02X [%s]"),m_pClient->GetMuleVersion(), m_pClient->GetModVersion());
d408 2
a409 2
								buffer.Format(_T("v0.%02X"),m_pClient->GetMuleVersion());
							UserData.ClientVersion->SetStaticText(buffer);
d417 2
a418 4
						buffer.Format(_T("%s"),GetClientNameString(m_pClient->GetClientSoft()));
						UserData.ClientSoftware->SetStaticText(buffer);
						buffer.Format(_T("v%s"),GetClientVersionString(m_pClient->GetClientSoft(),m_pClient->GetVersion()));
						UserData.ClientVersion->SetStaticText(buffer);
d421 2
a422 2
				buffer.Format(_T("%u (%s)"),m_pClient->GetUserID(),(m_pClient->HasLowID() ? "Low":"High"));
				UserData.ID->SetStaticText(buffer);
d424 2
a425 2
				buffer.Format(_T("%s:%i"),m_pClient->GetFullIP(),m_pClient->GetUserPort());
				UserData.IPAddress->SetStaticText(buffer);
d434 3
a436 3
					CServer* cserver = g_eMuleApp.m_pServerList->GetServerByAddress(A2T(inet_ntoa(server)), m_pClient->GetServerPort()); 
					if(cserver)
						UserData.ServerName->SetStaticText(cserver->GetListName());
d449 3
a451 3
				CKnownFile* file = g_eMuleApp.m_pSharedFilesList->GetFileByID(m_pClient->m_reqFileHash);
				if(file)
					UserData.CurDownloading->SetStaticText(file->GetFileName());
d461 2
a462 2
				buffer.Format(_T("%.1f KB/s"),static_cast<double>(m_pClient->GetDownloadDataRate())/1024.0);
				UserData.AverageUploadrate->SetStaticText(buffer);
d464 2
a465 2
				buffer.Format(_T("%.1f KB/s"),static_cast<double>(m_pClient->GetDataRate())/1024.0);
				UserData.AverageDownloadrate->SetStaticText(buffer);
d474 2
a475 2
				buffer.Format(_T("%.1f"),static_cast<double>(m_pClient->Credits()->GetScoreRatio(m_pClient->GetIP())));
				UserData.DlUpModifier->SetStaticText(buffer);
d500 2
a501 2
					buffer.Format(_T("%.1f"),static_cast<double>(m_pClient->GetScore(false,m_pClient->IsDownloading(),true)));
					UserData.Rating->SetStaticText(buffer);
d508 2
a509 2
					buffer.Format(_T("%u"),m_pClient->GetScore(m_pClient->IsDownloading(),false));
					UserData.UploadQueueScore->SetStaticText(buffer);
d515 2
a516 2
				buffer.Format(_T("%0.1f"),m_pClient->GetRareFilePushRatio());
				UserData.RFRatio->SetStaticText(buffer);
d518 2
a519 2
				buffer.Format(_T("%0.1f"),m_pClient->GetSmallFilePushRatio());
				UserData.SFRatio->SetStaticText(buffer);
d535 2
a536 2
					buffer.Format(_T("%ld"),m_pClient->GetRemoteQueueRank());
					UserData.RemoteQueueRank->SetStaticText(buffer);
d540 2
a541 2
				buffer.Format(_T("%0.1f"),m_pClient->GetRemoteBaseModifier());
				UserData.RemoteDlUpModifier->SetStaticText(buffer);
d543 2
a544 2
				buffer.Format(_T("%ld"),m_pClient->GetRemoteRatio());
				UserData.RemoteRating->SetStaticText(buffer);
d548 2
a549 2
					buffer.Format(_T("%ld"),m_pClient->GetRemoteScore());
					UserData.RemoteUploadQueueScore->SetStaticText(buffer);
d558 1
a558 1
					buffer.Format(_T("%ld"),m_pClient->GetRemoteClientSpeed());
d584 2
a585 2
				buffer.Format(_T("%i"),m_pPartFile->GetPartCount());
				FileData.FilepartCount->SetStaticText(buffer);
d592 2
a593 2
				buffer.Format(_T("%i (%.1f%%)"),m_pPartFile->GetAvailablePartCount(),percent);
				FileData.PartAvailable->SetStaticText(buffer);
d596 1
a596 1
					buffer.Format(GetResString(IDS_NEVER)); 
d598 1
a598 1
					buffer.Format(m_pPartFile->LocalizeLastSeenComplete());
d600 1
a600 1
					//buffer.Format(m_pPartFile->lastseencomplete.Format("%A, %Y-%m-%d, %X"));
d602 1
a602 1
				FileData.LastSeenComplete->SetStaticText(buffer);
d606 1
a606 1
					buffer.Format(GetResString(IDS_NEVER));
d608 2
a609 2
					buffer.Format(m_pPartFile->LocalizeLastDownTransfer());
				FileData.LastProgress->SetStaticText(buffer);
d614 1
a614 1
				buffer.Format(_T("%s (%.02f%%)"), CastItoXBytes(m_pPartFile->GetCompletedSize()), m_pPartFile->GetPercentCompleted());
d616 1
a616 1
				CString buffer2;
d629 1
a629 1
					buffer2.Format(_T("  Saved: %.02f %%"),100.0-saved); 
d631 1
a631 1
					buffer2.Format(_T("  Lost: %.02f %%"),saved-100.0); 
d633 1
a633 1
			//		buffer2.Format("  Nothing special");
d635 2
a636 2
				buffer += buffer2;
				FileData.CompletedSize->SetStaticText(buffer);
d638 2
a639 2
				buffer.Format(_T("%.2f kB/s"),static_cast<double>(m_pPartFile->GetDataRate())/1024.0);
				FileData.DataRate->SetStaticText(buffer);
d641 2
a642 2
				buffer.Format(_T("%i"),m_pPartFile->GetSourceCount());
				FileData.FoundSources->SetStaticText(buffer);
d644 2
a645 2
				buffer.Format(_T("%i"),m_pPartFile->GetTransferringSrcCount());
				FileData.Transferring->SetStaticText(buffer);
d649 1
d717 1
a717 1
		Invalidate();
d759 1
a759 1
		Invalidate();
@


1.30
log
@rollback my chages
@
text
@a118 1
	SetRedraw(FALSE);
a120 1
	SetRedraw(TRUE);
d709 1
a712 1
		m_pClient = NULL;
d751 1
a754 1
		m_pPartFile = NULL;
@


1.29
log
@memleak. Interim BUG:0000419
@
text
@d120 1
a120 3
	//eklmn: clear all the objects created before
	ClearList(m_bLastUserData);
	// now we can safely remove an items from the tree
d340 1
a340 1
		ClearList(bUserData);
a342 2
	// remember what kind of objects we created
	m_bLastUserData = bUserData;
a351 71
// eklmn: since list creation have done over construction of new objects we need to delete them properly
void CInfoListCtrl::ClearList(BOOL bUserData)
{	
	if(bUserData)
	{			
		safe_delete(UserData.General);
		safe_delete(UserData.UserName);
		safe_delete(UserData.UserHash);
		safe_delete(UserData.ClientSoftware);
		safe_delete(UserData.ClientVersion);
		safe_delete(UserData.IPAddress);
		safe_delete(UserData.ID);
		safe_delete(UserData.ServerIP);
		safe_delete(UserData.ServerName);
		
		safe_delete(UserData.Transfer);
		safe_delete(UserData.CurDownloading);
		safe_delete(UserData.DownloadedSession);
		safe_delete(UserData.UploadedSession);
		safe_delete(UserData.AverageDownloadrate);
		safe_delete(UserData.AverageUploadrate);
		safe_delete(UserData.DownloadedTotal);
		safe_delete(UserData.UploadedTotal);

		safe_delete(UserData.Scores);
		safe_delete(UserData.DlUpModifier);
		safe_delete(UserData.CommunityUser);
		safe_delete(UserData.Rating);
		safe_delete(UserData.UploadQueueScore);

		//By Maverick
		safe_delete(UserData.RFRatio);
		safe_delete(UserData.SFRatio);

		safe_delete(UserData.RemoteScores);
		safe_delete(UserData.RemoteDlUpModifier);
		safe_delete(UserData.RemoteCommunityUser);
		safe_delete(UserData.RemoteRating);
		safe_delete(UserData.RemoteUploadQueueScore);
		safe_delete(UserData.RemoteQueueRank);
		safe_delete(UserData.RemoteClientSpeed);
	}
	else
	{		
		safe_delete(FileData.General);
		safe_delete(FileData.FullName);
		safe_delete(FileData.MetFile);
		safe_delete(FileData.Hash);
		safe_delete(FileData.FileSize);
		safe_delete(FileData.PartFileStatus);
		safe_delete(FileData.SourceNames);
			
		safe_delete(FileData.Transfer);
		safe_delete(FileData.FoundSources);
		safe_delete(FileData.Transferring);
		
		safe_delete(FileData.FilepartCount);
		safe_delete(FileData.PartAvailable);
		safe_delete(FileData.LastSeenComplete);
		
		//SyruS last progress info
		safe_delete(FileData.LastProgress);
		safe_delete(FileData.Transferred);
		safe_delete(FileData.CompletedSize);
		safe_delete(FileData.DataRate);
	}

	m_bClear = true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
a710 1
		m_pClient = NULL;
a711 1
		ClearList(m_bLastUserData);
d714 1
a752 1
		m_pPartFile = NULL;
a753 1
		ClearList(m_bLastUserData);
d756 1
@


1.28
log
@Formatting, comments, and name changes.
@
text
@d24 2
a25 2
	m_file = NULL;
	m_client = NULL;
d34 61
d96 1
a96 1

d101 1
a101 1

d108 1
a108 1

d116 1
a116 2
	
	DeleteAllItems();
d119 6
a124 89
	if(bUserData)
	{			
		UserData.General = InsertItem(new COptionTreeItem);
		UserData.General->SetLabelText(GetResString(IDS_INFLST_USER_GENERAL));
		UserData.General->Expand(m_bExpandedUser[0]);
		UserData.UserName = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
		UserData.UserName->SetLabelText(GetResString(IDS_INFLST_USER_USERNAME));
		if(UserData.UserName->CreateStaticItem(0))
			UserData.UserName->SetTextColor(m_crEntryTextColor);
		UserData.UserHash = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
		UserData.UserHash->SetLabelText(GetResString(IDS_INFLST_USER_USERHASH));
		if(UserData.UserHash->CreateStaticItem(0))
			UserData.UserHash->SetTextColor(m_crEntryTextColor);
		UserData.ClientSoftware = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
		UserData.ClientSoftware->SetLabelText(GetResString(IDS_INFLST_USER_CLIENTSOFTWARE));
		if(UserData.ClientSoftware->CreateStaticItem(0))
			UserData.ClientSoftware->SetTextColor(m_crEntryTextColor);
		UserData.ClientVersion = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
		UserData.ClientVersion->SetLabelText(GetResString(IDS_INFLST_USER_CLIENTVERSION));
		if(UserData.ClientVersion->CreateStaticItem(0))
			UserData.ClientVersion->SetTextColor(m_crEntryTextColor);
		UserData.IPAddress = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
		UserData.IPAddress->SetLabelText(GetResString(IDS_INFLST_USER_IPADDRESS));
		if(UserData.IPAddress->CreateStaticItem(0))
			UserData.IPAddress->SetTextColor(m_crEntryTextColor);
		UserData.ID = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
		UserData.ID->SetLabelText(GetResString(IDS_INFLST_USER_ID));
		if(UserData.ID->CreateStaticItem(0))
			UserData.ID->SetTextColor(m_crEntryTextColor);
		UserData.ServerIP = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
		UserData.ServerIP->SetLabelText(GetResString(IDS_INFLST_USER_SERVERIP));
		if(UserData.ServerIP->CreateStaticItem(0))
			UserData.ServerIP->SetTextColor(m_crEntryTextColor);
		UserData.ServerName = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.General);
		UserData.ServerName->SetLabelText(GetResString(IDS_INFLST_USER_SERVERNAME));
		if(UserData.ServerName->CreateStaticItem(0))
			UserData.ServerName->SetTextColor(m_crEntryTextColor);

		UserData.Transfer = InsertItem(new COptionTreeItem);
		UserData.Transfer->SetLabelText(GetResString(IDS_INFLST_USER_TRANSFER));
		UserData.Transfer->Expand(m_bExpandedUser[1]);
		UserData.CurDownloading = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
		UserData.CurDownloading->SetLabelText(GetResString(IDS_INFLST_USER_CURDOWNLOAD));
		if(UserData.CurDownloading->CreateStaticItem(0))
			UserData.CurDownloading->SetTextColor(m_crEntryTextColor);
		UserData.DownloadedSession = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
		UserData.DownloadedSession->SetLabelText(GetResString(IDS_INFLST_USER_SESSIONDOWNLOAD));
		if(UserData.DownloadedSession->CreateStaticItem(0))
			UserData.DownloadedSession->SetTextColor(m_crEntryTextColor);
		UserData.UploadedSession = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
		UserData.UploadedSession->SetLabelText(GetResString(IDS_INFLST_USER_SESSIONUPLOAD));
		if(UserData.UploadedSession->CreateStaticItem(0))
			UserData.UploadedSession->SetTextColor(m_crEntryTextColor);
		UserData.AverageDownloadrate = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
		UserData.AverageDownloadrate->SetLabelText(GetResString(IDS_INFLST_USER_AVERAGEDOWNRATE));
		if(UserData.AverageDownloadrate->CreateStaticItem(0))
			UserData.AverageDownloadrate->SetTextColor(m_crEntryTextColor);
		UserData.AverageUploadrate = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
		UserData.AverageUploadrate->SetLabelText(GetResString(IDS_INFLST_USER_AVERAGEUPRATE));
		if(UserData.AverageUploadrate->CreateStaticItem(0))
			UserData.AverageUploadrate->SetTextColor(m_crEntryTextColor);
		UserData.DownloadedTotal = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
		UserData.DownloadedTotal->SetLabelText(GetResString(IDS_INFLST_USER_TOTALDOWNLOAD));
		if(UserData.DownloadedTotal->CreateStaticItem(0))
			UserData.DownloadedTotal->SetTextColor(m_crEntryTextColor);
		UserData.UploadedTotal = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Transfer);
		UserData.UploadedTotal->SetLabelText(GetResString(IDS_INFLST_USER_TOTALUPLOAD));
		if(UserData.UploadedTotal->CreateStaticItem(0))
			UserData.UploadedTotal->SetTextColor(m_crEntryTextColor);

		UserData.Scores = InsertItem(new COptionTreeItem);
		UserData.Scores->SetLabelText(GetResString(IDS_INFLST_USER_SCORES));
		UserData.Scores->Expand(m_bExpandedUser[2]);
		UserData.DlUpModifier = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
		UserData.DlUpModifier->SetLabelText(GetResString(IDS_INFLST_USER_DLUPMODIFIER));
		if(UserData.DlUpModifier->CreateStaticItem(0))
			UserData.DlUpModifier->SetTextColor(m_crEntryTextColor);
		UserData.CommunityUser = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
		UserData.CommunityUser->SetLabelText(GetResString(IDS_INFLST_USER_COMMUNITY));
		if(UserData.CommunityUser->CreateStaticItem(0))
			UserData.CommunityUser->SetTextColor(m_crEntryTextColor);
		UserData.Rating = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
		UserData.Rating->SetLabelText(GetResString(IDS_INFLST_USER_RATING));
		if(UserData.Rating->CreateStaticItem(0))
			UserData.Rating->SetTextColor(m_crEntryTextColor);
		UserData.UploadQueueScore = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
		UserData.UploadQueueScore->SetLabelText(GetResString(IDS_INFLST_USER_UPLOADQUEUESCORE));
		if(UserData.UploadQueueScore->CreateStaticItem(0))
			UserData.UploadQueueScore->SetTextColor(m_crEntryTextColor);
d126 129
a254 70
		//By Maverick
		UserData.RFRatio = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
		UserData.RFRatio->SetLabelText(GetResString(IDS_INFLST_USER_RFRATIO));
		if(UserData.RFRatio->CreateStaticItem(0))
			UserData.RFRatio->SetTextColor(m_crEntryTextColor);
		UserData.SFRatio = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.Scores);
		UserData.SFRatio->SetLabelText(GetResString(IDS_INFLST_USER_SFRATIO));
		if(UserData.SFRatio->CreateStaticItem(0))
			UserData.SFRatio->SetTextColor(m_crEntryTextColor);

		UserData.RemoteScores = InsertItem(new COptionTreeItem);
		UserData.RemoteScores->SetLabelText(GetResString(IDS_INFLST_REMOTE_SCORES));
		UserData.RemoteScores->Expand(m_bExpandedUser[3]);
		UserData.RemoteDlUpModifier = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
		UserData.RemoteDlUpModifier->SetLabelText(GetResString(IDS_INFLST_USER_DLUPMODIFIER));
		if(UserData.RemoteDlUpModifier->CreateStaticItem(0))
			UserData.RemoteDlUpModifier->SetTextColor(m_crEntryTextColor);
		UserData.RemoteCommunityUser = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
		UserData.RemoteCommunityUser->SetLabelText(GetResString(IDS_INFLST_USER_COMMUNITY));
		if(UserData.RemoteCommunityUser->CreateStaticItem(0))
			UserData.RemoteCommunityUser->SetTextColor(m_crEntryTextColor);
		UserData.RemoteRating = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
		UserData.RemoteRating->SetLabelText(GetResString(IDS_INFLST_USER_RATING));
		if(UserData.RemoteRating->CreateStaticItem(0))
			UserData.RemoteRating->SetTextColor(m_crEntryTextColor);
		UserData.RemoteUploadQueueScore = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
		UserData.RemoteUploadQueueScore->SetLabelText(GetResString(IDS_INFLST_USER_UPLOADQUEUESCORE));
		if(UserData.RemoteUploadQueueScore->CreateStaticItem(0))
			UserData.RemoteUploadQueueScore->SetTextColor(m_crEntryTextColor);
		UserData.RemoteQueueRank = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
		UserData.RemoteQueueRank->SetLabelText(GetResString(IDS_INFLST_REMOTE_RANKING));
		if(UserData.RemoteQueueRank->CreateStaticItem(0))
			UserData.RemoteQueueRank->SetTextColor(m_crEntryTextColor);
		UserData.RemoteClientSpeed = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, UserData.RemoteScores);
		UserData.RemoteClientSpeed->SetLabelText(GetResString(IDS_INFLST_REMOTE_SPEED));
		if(UserData.RemoteClientSpeed->CreateStaticItem(0))
			UserData.RemoteClientSpeed->SetTextColor(m_crEntryTextColor);
	}
	else
	{		
		FileData.General = InsertItem(new COptionTreeItem);
		FileData.General->SetLabelText(GetResString(IDS_INFLST_FILE_GENERAL));
		FileData.General->Expand(m_bExpandedFile[0]);
		FileData.FullName = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
		FileData.FullName->SetLabelText(GetResString(IDS_INFLST_FILE_FULLNAME));
		if(FileData.FullName->CreateStaticItem(0))
			FileData.FullName->SetTextColor(m_crEntryTextColor);
		FileData.MetFile = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
		FileData.MetFile->SetLabelText(GetResString(IDS_INFLST_FILE_METFILE));
		if(FileData.MetFile->CreateStaticItem(0))
			FileData.MetFile->SetTextColor(m_crEntryTextColor);
		FileData.Hash = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
		FileData.Hash->SetLabelText(GetResString(IDS_INFLST_FILE_HASH));
		if(FileData.Hash->CreateStaticItem(0))
			FileData.Hash->SetTextColor(m_crEntryTextColor);
		FileData.FileSize = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
		FileData.FileSize->SetLabelText(GetResString(IDS_INFLST_FILE_FILESIZE));
		if(FileData.FileSize->CreateStaticItem(0))
			FileData.FileSize->SetTextColor(m_crEntryTextColor);
		FileData.PartFileStatus = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.General);
		FileData.PartFileStatus->SetLabelText(GetResString(IDS_INFLST_FILE_PARTFILESTATUS));
		if(FileData.PartFileStatus->CreateStaticItem(0))
			FileData.PartFileStatus->SetTextColor(m_crEntryTextColor);
		FileData.SourceNames = (COptionTreeItemComboBox*)InsertItem(new COptionTreeItemComboBox(), FileData.General);
		FileData.SourceNames->SetLabelText(GetResString(IDS_INFLST_FILE_SOURCENAMES));
		if(FileData.SourceNames->CreateComboItem(NULL) == TRUE)
		{	
			FileData.SourceNames->SetTextColor(m_crEntryTextColor);
			FileData.SourceNames->SetCurSel(0);
			FileData.bSourceNameCombo = true;
d257 47
a303 2
			FileData.bSourceNameCombo = false;
		FileData.iSourceNameUpdateDelay = 0;
d305 38
a342 43
		FileData.Transfer = InsertItem(new COptionTreeItem);
		FileData.Transfer->SetLabelText(GetResString(IDS_INFLST_FILE_TRANSFER));
		FileData.Transfer->Expand(m_bExpandedFile[1]);
		FileData.FoundSources = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.FoundSources->SetLabelText(GetResString(IDS_INFLST_FILE_FOUNDSOURCES));
		if(FileData.FoundSources->CreateStaticItem(0))
			FileData.FoundSources->SetTextColor(m_crEntryTextColor);
		FileData.Transferring = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.Transferring->SetLabelText(GetResString(IDS_INFLST_FILE_TRANSFERRINGSOURCES));
		if(FileData.Transferring->CreateStaticItem(0))
			FileData.Transferring->SetTextColor(m_crEntryTextColor);
		
		FileData.FilepartCount = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.FilepartCount->SetLabelText(GetResString(IDS_INFLST_FILE_FILEPARTCOUNT));
		if(FileData.FilepartCount->CreateStaticItem(0))
			FileData.FilepartCount->SetTextColor(m_crEntryTextColor);
		FileData.PartAvailable = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.PartAvailable->SetLabelText(GetResString(IDS_INFLST_FILE_PARTAVAILABLE));
		if(FileData.PartAvailable->CreateStaticItem(0))
			FileData.PartAvailable->SetTextColor(m_crEntryTextColor);
		FileData.LastSeenComplete = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.LastSeenComplete->SetLabelText(GetResString(IDS_INFLST_FILE_LASTSEENCOMPLETE));
		if(FileData.LastSeenComplete->CreateStaticItem(0))
			FileData.LastSeenComplete->SetTextColor(m_crEntryTextColor);
		//SyruS last progress info
		FileData.LastProgress = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		strRes.SetString(GetResString(IDS_FD_LASTCHANGE));
		strRes.Remove(':');
		FileData.LastProgress->SetLabelText(strRes);
		if(FileData.LastProgress->CreateStaticItem(0))
			FileData.LastProgress->SetTextColor(m_crEntryTextColor);
		FileData.Transferred = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.Transferred->SetLabelText(GetResString(IDS_INFLST_FILE_TRANSFERRED));
		if(FileData.Transferred->CreateStaticItem(0))
			FileData.Transferred->SetTextColor(m_crEntryTextColor);
		FileData.CompletedSize = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.CompletedSize->SetLabelText(GetResString(IDS_INFLST_FILE_COMPLETEDSIZE));
		if(FileData.CompletedSize->CreateStaticItem(0))
			FileData.CompletedSize->SetTextColor(m_crEntryTextColor);
		FileData.DataRate = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.DataRate->SetLabelText(GetResString(IDS_INFLST_FILE_DATARATE));
		if(FileData.DataRate->CreateStaticItem(0))
			FileData.DataRate->SetTextColor(m_crEntryTextColor);
d345 2
d355 70
d426 1
d432 1
a432 1

d442 1
a442 1
		if(m_client != NULL)
d445 2
a446 2
			if(m_client->GetUserName()) 
				loadSourceName = _tcsstr(m_client->GetUserName(), GetResString(IDS_LOADEDSOURCE));
d450 2
a451 2
				if(m_client->GetUserName())
					UserData.UserName->SetStaticText(m_client->GetUserName());
d455 2
a456 2
				if(m_client->GetUserName())
					UserData.UserHash->SetStaticText(FileHashToString(m_client->GetUserHash()));
d459 2
a460 2
				bool isPlus=(m_client->GetPlusVersion() && m_client->GetPlusVersion()<0x2600);
				switch(m_client->GetClientSoft())
d472 1
a472 1
							UserData.ClientSoftware->SetStaticText(_T("eMule  (")+GetClientNameAndVersionString(m_client)+_T(")"));
d476 1
a476 1
						if(m_client->GetMuleVersion())
d478 2
a479 2
							if(!m_client->GetModVersion().IsEmpty() && !isPlus)
								buffer.Format(_T("v0.%02X [%s]"),m_client->GetMuleVersion(), m_client->GetModVersion());
d481 1
a481 1
								buffer.Format(_T("v0.%02X"),m_client->GetMuleVersion());
d490 1
a490 1
						buffer.Format(_T("%s"),GetClientNameString(m_client->GetClientSoft()));
d492 1
a492 1
						buffer.Format(_T("v%s"),GetClientVersionString(m_client->GetClientSoft(),m_client->GetVersion()));
d496 1
a496 1
				buffer.Format(_T("%u (%s)"),m_client->GetUserID(),(m_client->HasLowID() ? "Low":"High"));
d499 1
a499 1
				buffer.Format(_T("%s:%i"),m_client->GetFullIP(),m_client->GetUserPort());
d502 1
a502 1
				if(m_client->GetServerIP())
d505 1
a505 1
					server.S_un.S_addr = m_client->GetServerIP();
d509 1
a509 1
					CServer* cserver = g_eMuleApp.m_pServerList->GetServerByAddress(A2T(inet_ntoa(server)), m_client->GetServerPort()); 
d524 1
a524 1
				CKnownFile* file = g_eMuleApp.m_pSharedFilesList->GetFileByID(m_client->m_reqFileHash);
d531 1
a531 1
				UserData.UploadedSession->SetStaticText(CastItoXBytes(m_client->GetTransferredDown()));
d534 1
a534 1
				UserData.DownloadedSession->SetStaticText(CastItoXBytes(m_client->GetTransferredUp()));
d536 1
a536 1
				buffer.Format(_T("%.1f KB/s"),static_cast<double>(m_client->GetDownloadDataRate())/1024.0);
d539 1
a539 1
				buffer.Format(_T("%.1f KB/s"),static_cast<double>(m_client->GetDataRate())/1024.0);
d543 1
a543 1
			if(m_client->Credits())
d546 2
a547 2
				UserData.UploadedTotal->SetStaticText(CastItoXBytes(m_client->Credits()->GetDownloadedTotal()));				
				UserData.DownloadedTotal->SetStaticText(CastItoXBytes(m_client->Credits()->GetUploadedTotal()));
d549 1
a549 1
				buffer.Format(_T("%.1f"),static_cast<double>(m_client->Credits()->GetScoreRatio(m_client->GetIP())));
d563 1
a563 1
					if(m_client->IsCommunity()) 
d572 1
a572 1
				if(m_client->GetUserName() && !loadSourceName)
d575 1
a575 1
					buffer.Format(_T("%.1f"),static_cast<double>(m_client->GetScore(false,m_client->IsDownloading(),true)));
d581 1
a581 1
				if(m_client->GetUploadState() != US_NONE)
d583 1
a583 1
					buffer.Format(_T("%u"),m_client->GetScore(m_client->IsDownloading(),false));
d590 1
a590 1
				buffer.Format(_T("%0.1f"),m_client->GetRareFilePushRatio());
d593 1
a593 1
				buffer.Format(_T("%0.1f"),m_client->GetSmallFilePushRatio());
d601 1
a601 1
				if (!m_client->GetRemoteCommunityEnabled())
d603 1
a603 1
				else if (m_client->GetRemoteCommunity()) 
d608 1
a608 1
				if (m_client->GetRemoteQueueRank())
d610 1
a610 1
					buffer.Format(_T("%ld"),m_client->GetRemoteQueueRank());
d615 1
a615 1
				buffer.Format(_T("%0.1f"),m_client->GetRemoteBaseModifier());
d618 1
a618 1
				buffer.Format(_T("%ld"),m_client->GetRemoteRatio());
d621 1
a621 1
				if (m_client->IsRemoteInfoAvaiable())
d623 1
a623 1
					buffer.Format(_T("%ld"),m_client->GetRemoteScore());
d630 1
a630 1
				if (m_client->GetRemoteClientSpeed() == 0)
d633 1
a633 1
					buffer.Format(_T("%ld"),m_client->GetRemoteClientSpeed());
d642 1
a642 1
		if(m_file != NULL)
d646 4
a649 4
				FileData.FullName->SetStaticText(m_file->GetFileName());
				FileData.MetFile->SetStaticText(m_file->GetFullName());							
				FileData.Hash->SetStaticText(FileHashToString(m_file->GetFileHash()));				
				FileData.FileSize->SetStaticText(CastItoXBytes(m_file->GetFileSize()));
d651 1
a651 1
				FileData.PartFileStatus->SetStaticText(m_file->GetPartfileStatus());
d659 1
a659 1
				buffer.Format(_T("%i"),m_file->GetPartCount());
d663 1
a663 1
				if ( m_file->GetPartCount() )
d665 1
a665 1
					percent	=	static_cast<double>((m_file->GetAvailablePartCount()*100.0)/ m_file->GetPartCount());
d667 1
a667 1
				buffer.Format(_T("%i (%.1f%%)"),m_file->GetAvailablePartCount(),percent);
d670 1
a670 1
				if(m_file->lastseencomplete == NULL) 
d673 1
a673 1
					buffer.Format(m_file->LocalizeLastSeenComplete());
d675 1
a675 1
					//buffer.Format(m_file->lastseencomplete.Format("%A, %Y-%m-%d, %X"));
d680 1
a680 1
				if (m_file->GetTransferred()==0)
d683 1
a683 1
					buffer.Format(m_file->LocalizeLastDownTransfer());
d686 1
a686 1
				FileData.Transferred->SetStaticText(CastItoXBytes(m_file->GetTransferred()));
d689 1
a689 1
				buffer.Format(_T("%s (%.02f%%)"), CastItoXBytes(m_file->GetCompletedSize()), m_file->GetPercentCompleted());
d693 2
a694 2
				if(m_file->GetStatus() == PS_COMPLETING || m_file->GetStatus() == PS_COMPLETE) 
					saved = static_cast<double>(m_file->GetTransferred()) / static_cast<double>(m_file->GetFileSize()); 
d697 2
a698 2
					if(m_file->GetCompletedSize())
						saved = static_cast<double>(m_file->GetTransferred()) / static_cast<double>(m_file->GetCompletedSize()); 
d713 1
a713 1
				buffer.Format(_T("%.2f kB/s"),static_cast<double>(m_file->GetDataRate())/1024.0);
d716 1
a716 1
				buffer.Format(_T("%i"),m_file->GetSourceCount());
d719 1
a719 1
				buffer.Format(_T("%i"),m_file->GetTransferringSrcCount());
d732 1
a732 1

d739 1
a739 1

d754 1
a754 1

d761 1
a761 1
			if(m_client != NULL)
d769 1
a769 1
			if(m_file != NULL)
d777 1
a777 1

d780 1
a780 1
	if(client == m_client)
d786 1
a786 1
		m_client = NULL;
d788 1
d794 1
a794 1
		m_file = NULL;
d800 1
a800 1
	if(m_bClear || !m_bUser || m_client == NULL)
d802 1
a802 1
		m_client = client;
d806 1
a806 1
		m_file = NULL;
d813 1
a813 1
	m_client = client;
d815 1
a815 1
	m_file = NULL;
d820 1
a820 1

d823 1
a823 1
	if(file == m_file && file != NULL)
d829 1
a829 1
		m_file = NULL;
d831 1
d837 1
a837 1
		m_client = NULL;
d843 1
a843 1
	if(m_bUser || m_file == NULL)
d845 1
a845 1
		if(m_file)
d847 1
a847 1
			m_file = file;
d851 1
a851 1
			m_file = file;
d854 1
a854 1
		m_client = NULL;
d861 2
a862 2
	m_file = file;
	m_client = NULL;
d868 1
a868 1

d874 1
a874 1

d883 1
a883 1
		if(m_file)
d890 1
a890 1
            for (int sl=0;sl<SOURCESSLOTS;sl++) if (!m_file->m_srcLists[sl].IsEmpty())
d893 1
a893 1
				for(pos1 = m_file->m_srcLists[sl].GetHeadPosition(); (pos2 = pos1) != NULL;) 
d895 2
a896 2
					m_file->m_srcLists[sl].GetNext(pos1); 
					cur_src = m_file->m_srcLists[sl].GetAt(pos2); 
d957 2
a958 1
}@


1.27
log
@Formatting, comments, and name changes.
float => double conversion
@
text
@d310 1
a310 1
				bool isPlus=(m_client->PlusVersion() && m_client->PlusVersion()<0x2600);
@


1.26
log
@Formatting, comments, and name changes.
... and a few bug fixes.
@
text
@d387 1
a387 1
				buffer.Format(_T("%.1f KB/s"),(float)m_client->GetDownloadDataRate()/1024);
d390 1
a390 1
				buffer.Format(_T("%.1f KB/s"),(float)m_client->GetDataRate()/1024);
d400 1
a400 1
				buffer.Format(_T("%.1f"),(float)m_client->Credits()->GetScoreRatio(m_client->GetIP()));
d426 1
a426 1
					buffer.Format(_T("%.1f"),(float)m_client->GetScore(false,m_client->IsDownloading(),true));
d513 1
a513 1
				float percent	=	0.;
d516 1
a516 1
					percent	=	(float)((m_file->GetAvailablePartCount()*100)/ m_file->GetPartCount());
d543 1
a543 1
				float saved; 
d545 1
a545 1
					saved = (float)m_file->GetTransferred() / (float)m_file->GetFileSize(); 
d549 1
a549 1
						saved = (float)m_file->GetTransferred() / (float)m_file->GetCompletedSize(); 
d555 1
a555 1
					buffer2.Format(_T("  Saved: %.02f %%"),(float)100.0-saved); 
d557 1
a557 1
					buffer2.Format(_T("  Lost: %.02f %%"),(float)saved-100.0); 
d564 1
a564 1
				buffer.Format(_T("%.2f kB/s"),(float)m_file->GetDataRate()/1024);
@


1.25
log
@Formatting, comments, and name changes.
@
text
@d375 1
a375 1
				CKnownFile* file = g_eMuleApp.m_pSharedFilesList->GetFileByID(m_client->reqfileid);
@


1.24
log
@Formatting, comments, and name changes.
@
text
@d739 1
a739 1
            for (int sl=0;sl<SOURCESSLOTS;sl++) if (!m_file->srclists[sl].IsEmpty())
d742 1
a742 1
				for(pos1 = m_file->srclists[sl].GetHeadPosition(); (pos2 = pos1) != NULL;) 
d744 2
a745 2
					m_file->srclists[sl].GetNext(pos1); 
					cur_src = m_file->srclists[sl].GetAt(pos2); 
@


1.23
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d524 1
a524 1
					buffer.Format(m_file->localelastseencomplete());
d534 1
a534 1
					buffer.Format(m_file->localelastdowntransfer());
@


1.22
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@d360 1
a360 1
					CServer* cserver = theApp.serverlist->GetServerByAddress(A2T(inet_ntoa(server)), m_client->GetServerPort()); 
d375 1
a375 1
				CKnownFile* file = theApp.sharedfiles->GetFileByID(m_client->reqfileid);
d412 1
a412 1
				if(theApp.glob_prefs->CommunityEnabled())
@


1.21
log
@SecureIdent Support Mainly
Too many changes to mention here
@
text
@d231 4
a234 4
		FileData.Transfering = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.Transfering->SetLabelText(GetResString(IDS_INFLST_FILE_TRANSFERINGSOURCES));
		if(FileData.Transfering->CreateStaticItem(0))
			FileData.Transfering->SetTextColor(m_crEntryTextColor);
d255 4
a258 4
		FileData.Transfered = (COptionTreeItemStatic*)InsertItem(new COptionTreeItemStatic, FileData.Transfer);
		FileData.Transfered->SetLabelText(GetResString(IDS_INFLST_FILE_TRANSFERED));
		if(FileData.Transfered->CreateStaticItem(0))
			FileData.Transfered->SetTextColor(m_crEntryTextColor);
d382 1
a382 1
				UserData.UploadedSession->SetStaticText(CastItoXBytes(m_client->GetTransferedDown()));
d385 1
a385 1
				UserData.DownloadedSession->SetStaticText(CastItoXBytes(m_client->GetTransferedUp()));
d387 1
a387 1
				buffer.Format(_T("%.1f KB/s"),(float)m_client->GetDownloadDatarate()/1024);
d390 1
a390 1
				buffer.Format(_T("%.1f KB/s"),(float)m_client->GetDatarate()/1024);
d531 1
a531 1
				if (m_file->GetTransfered()==0)
d537 1
a537 1
				FileData.Transfered->SetStaticText(CastItoXBytes(m_file->GetTransfered()));
d545 1
a545 1
					saved = (float)m_file->GetTransfered() / (float)m_file->GetFileSize(); 
d549 1
a549 1
						saved = (float)m_file->GetTransfered() / (float)m_file->GetCompletedSize(); 
d564 1
a564 1
				buffer.Format(_T("%.2f kB/s"),(float)m_file->GetDatarate()/1024);
d570 2
a571 2
				buffer.Format(_T("%i"),m_file->GetTransferingSrcCount());
				FileData.Transfering->SetStaticText(buffer);
@


1.20
log
@CHANGE: now showing "never" instead of "unknown" for Last Reception [Andrerib]
@
text
@d400 1
a400 1
				buffer.Format(_T("%.1f"),(float)m_client->Credits()->GetScoreRatio());
@


1.19
log
@CHANGE: now showing "never" instead of "unknown" in Last Seen Complete column [Andrerib]
@
text
@d532 1
a532 1
					buffer.Format(GetResString(IDS_UNKNOWN));
@


1.18
log
@use helper method for community check
@
text
@d522 1
a522 1
					buffer.Format(GetResString(IDS_UNKNOWN)); 
@


1.17
log
@unicode cleanup
@
text
@d413 5
a417 12
				{
					CString copy1 = m_client->GetUserName().MakeUpper();
					CString copy2 = theApp.glob_prefs->CommunityString().MakeUpper();
 					if(!copy1.IsEmpty() && !copy2.IsEmpty())
					{
						bool iscommunity = (copy1.Find(copy2) != -1 );
									
						if(iscommunity) 
							UserData.CommunityUser->SetStaticText(GetResString(IDS_YES));
						else
							UserData.CommunityUser->SetStaticText(GetResString(IDS_NO));
					}
@


1.16
log
@CHANGE: code cleanup (m_modVerString & m_modExtendedString coverting to CString) [DoubleT]
@
text
@d297 1
a297 1
				loadSourceName = strstr(m_client->GetUserName(), GetResString(IDS_LOADEDSOURCE));
d304 1
a304 1
					UserData.UserName->SetStaticText("?");
d309 1
a309 1
					UserData.UserHash->SetStaticText("?");
d314 2
a315 2
						UserData.ClientSoftware->SetStaticText("?");
						UserData.ClientVersion->SetStaticText("?");
d323 1
a323 1
							UserData.ClientSoftware->SetStaticText("eMule  ("+GetClientNameAndVersionString(m_client)+")");
d325 1
a325 1
							UserData.ClientSoftware->SetStaticText("eMule");
d330 1
a330 1
								buffer.Format("v0.%02X [%s]",m_client->GetMuleVersion(), m_client->GetModVersion());
d332 1
a332 1
								buffer.Format("v0.%02X",m_client->GetMuleVersion());
d336 1
a336 1
							UserData.ClientVersion->SetStaticText("?");
d341 1
a341 1
						buffer.Format("%s",GetClientNameString(m_client->GetClientSoft()));
d343 1
a343 1
						buffer.Format("v%s",GetClientVersionString(m_client->GetClientSoft(),m_client->GetVersion()));
d347 1
a347 1
				buffer.Format("%u (%s)",m_client->GetUserID(),(m_client->HasLowID() ? "Low":"High"));
d350 1
a350 1
				buffer.Format("%s:%i",m_client->GetFullIP(),m_client->GetUserPort());
d357 2
a358 1
					UserData.ServerIP->SetStaticText(inet_ntoa(server));
d360 1
a360 1
					CServer* cserver = theApp.serverlist->GetServerByAddress(inet_ntoa(server), m_client->GetServerPort()); 
d364 1
a364 1
						UserData.ServerName->SetStaticText("?");
d368 2
a369 2
					UserData.ServerIP->SetStaticText("?");
					UserData.ServerName->SetStaticText("?");
d379 1
a379 1
					UserData.CurDownloading->SetStaticText("-");
d387 1
a387 1
				buffer.Format("%.1f KB/s",(float)m_client->GetDownloadDatarate()/1024);
d390 1
a390 1
				buffer.Format("%.1f KB/s",(float)m_client->GetDatarate()/1024);
d400 1
a400 1
				buffer.Format("%.1f",(float)m_client->Credits()->GetScoreRatio());
d405 3
a407 3
				UserData.UploadedTotal->SetStaticText("?");
				UserData.DownloadedTotal->SetStaticText("?");
				UserData.DlUpModifier->SetStaticText("?");
d412 1
a412 4
				char *copy1, *copy2;
				copy1 = _strupr(_strdup(m_client->GetUserName()));
				copy2 = _strupr(_strdup(theApp.glob_prefs->CommunityString()));
 				if(copy1 && copy2)
d414 5
a418 1
					bool iscommunity = (strstr(copy1 ,copy2) != NULL );
a419 2
					if(theApp.glob_prefs->CommunityEnabled())
					{
d424 1
a424 3
					} 
					else
						UserData.CommunityUser->SetStaticText(GetResString(IDS_DISABLED));
d426 3
a428 2
				free(copy1);
				free(copy2);
d433 1
a433 1
					buffer.Format("%.1f",(float)m_client->GetScore(false,m_client->IsDownloading(),true));
d437 1
a437 1
					UserData.Rating->SetStaticText("?");
d441 1
a441 1
					buffer.Format("%u",m_client->GetScore(m_client->IsDownloading(),false));
d445 1
a445 1
					UserData.UploadQueueScore->SetStaticText("-");
d448 1
a448 1
				buffer.Format("%0.1f",m_client->GetRareFilePushRatio());
d451 1
a451 1
				buffer.Format("%0.1f",m_client->GetSmallFilePushRatio());
d468 1
a468 1
					buffer.Format("%ld",m_client->GetRemoteQueueRank());
d471 1
a471 1
				else UserData.RemoteQueueRank->SetStaticText("??");
d473 1
a473 1
				buffer.Format("%0.1f",m_client->GetRemoteBaseModifier());
d476 1
a476 1
				buffer.Format("%ld",m_client->GetRemoteRatio());
d481 1
a481 1
					buffer.Format("%ld",m_client->GetRemoteScore());
d485 1
a485 1
					UserData.RemoteUploadQueueScore->SetStaticText("??");
d489 1
a489 1
					UserData.RemoteClientSpeed->SetStaticText("??");
d491 2
a492 2
					buffer.Format("%ld",m_client->GetRemoteClientSpeed());
					UserData.RemoteClientSpeed->SetStaticText("??");
d517 1
a517 1
				buffer.Format("%i",m_file->GetPartCount());
d525 1
a525 1
				buffer.Format("%i (%.1f%%)",m_file->GetAvailablePartCount(),percent);
d547 1
a547 1
				buffer.Format("%s (%.02f%%)", CastItoXBytes(m_file->GetCompletedSize()), m_file->GetPercentCompleted());
d562 1
a562 1
					buffer2.Format("  Saved: %.02f %%",(float)100.0-saved); 
d564 1
a564 1
					buffer2.Format("  Lost: %.02f %%",(float)saved-100.0); 
d571 1
a571 1
				buffer.Format("%.2f kB/s",(float)m_file->GetDatarate()/1024);
d574 1
a574 1
				buffer.Format("%i",m_file->GetSourceCount());
d577 1
a577 1
				buffer.Format("%i",m_file->GetTransferingSrcCount());
d802 1
a802 1
					strTemp.Format("%s   (%d)", src.strFileName, src.iCount);
@


1.15
log
@code cleanup
@
text
@d329 1
a329 1
							if(m_client->GetModVersion() && !isPlus)
@


1.14
log
@code cleanup
@
text
@d754 1
a754 1
					if(cur_src->GetClientFilename() != 0) 
d756 2
a757 3
						CString strFileName;
						strFileName.Format("%s", cur_src->GetClientFilename());
						
@


1.13
log
@code cleanup
@
text
@d289 2
a290 3
	
	char buffer[100];
	
d292 1
a292 1
	{
d307 1
a307 6
				{
					buffer[0] = 0;
					for (uint16 i = 0;i != 16;i++)
						sprintf(buffer,"%s%02X",buffer,m_client->GetUserHash()[i]);
					UserData.UserHash->SetStaticText(buffer);
				}
d328 1
a328 1
						{
d330 1
a330 1
								sprintf(buffer,"v0.%02X [%s]",m_client->GetMuleVersion(), m_client->GetModVersion());
d332 1
a332 1
								sprintf(buffer,"v0.%02X",m_client->GetMuleVersion());
d341 1
a341 1
						sprintf(buffer,"%s",GetClientNameString(m_client->GetClientSoft()));
d343 1
a343 1
						sprintf(buffer,"v%s",GetClientVersionString(m_client->GetClientSoft(),m_client->GetVersion()));
d346 2
a347 2

				sprintf(buffer,"%u (%s)",m_client->GetUserID(),(m_client->HasLowID() ? "Low":"High"));
d350 1
a350 1
				sprintf(buffer,"%s:%i",m_client->GetFullIP(),m_client->GetUserPort());
d385 2
a386 2
				
				sprintf(buffer,"%.1f KB/s",(float)m_client->GetDownloadDatarate()/1024);
d389 1
a389 1
				sprintf(buffer,"%.1f KB/s",(float)m_client->GetDatarate()/1024);
d396 1
a396 3
				UserData.UploadedTotal->SetStaticText(CastItoXBytes(m_client->Credits()->GetDownloadedTotal()));
				
				
d398 2
a399 2
								
				sprintf(buffer,"%.1f",(float)m_client->Credits()->GetScoreRatio());
d433 2
a434 2
					// Bugfix by Maverick
					sprintf(buffer,"%.1f",(float)m_client->GetScore(false,m_client->IsDownloading(),true));
d441 2
a442 2
				{
					sprintf(buffer,"%u",m_client->GetScore(m_client->IsDownloading(),false));
d448 2
a449 2
				// By Maverick
				sprintf(buffer,"%0.1f",m_client->GetRareFilePushRatio());
d452 1
a452 1
				sprintf(buffer,"%0.1f",m_client->GetSmallFilePushRatio());
d469 1
a469 1
					sprintf(buffer,"%ld",m_client->GetRemoteQueueRank());
d474 1
a474 1
				sprintf(buffer,"%0.1f",m_client->GetRemoteBaseModifier());
d477 1
a477 1
				sprintf(buffer,"%ld",m_client->GetRemoteRatio());
d482 1
a482 1
					sprintf(buffer,"%ld",m_client->GetRemoteScore());
d492 1
a492 1
					sprintf(buffer,"%ld",m_client->GetRemoteClientSpeed());
d518 1
a518 1
				sprintf(buffer,"%i",m_file->GetPartCount());
d526 1
a526 1
				sprintf(buffer,"%i (%.1f%%)",m_file->GetAvailablePartCount(),percent);
d530 1
a530 1
					sprintf(buffer, GetResString(IDS_UNKNOWN)); 
d532 1
a532 1
					sprintf(buffer,m_file->localelastseencomplete());
d534 1
a534 1
					//sprintf(buffer, m_file->lastseencomplete.Format("%A, %Y-%m-%d, %X"));
d540 1
a540 1
					sprintf(buffer,GetResString(IDS_UNKNOWN));
d542 1
a542 1
					sprintf(buffer,m_file->localelastdowntransfer());
d548 1
a548 1
				sprintf(buffer, "%s (%.02f%%)", CastItoXBytes(m_file->GetCompletedSize()), m_file->GetPercentCompleted());
d550 1
a550 1
				char buffer2[100] = "";
d563 1
a563 1
					sprintf(buffer2,"  Saved: %.02f %%",(float)100.0-saved); 
d565 1
a565 1
					sprintf(buffer2,"  Lost: %.02f %%",(float)saved-100.0); 
d567 1
a567 1
			//		sprintf(buffer2,"  Nothing special");
d569 1
a569 1
				strcat(buffer,buffer2);
d572 1
a572 1
				sprintf(buffer,"%.2f kB/s",(float)m_file->GetDatarate()/1024);
d575 1
a575 1
				sprintf(buffer,"%i",m_file->GetSourceCount());
d578 1
a578 1
				sprintf(buffer,"%i",m_file->GetTransferingSrcCount());
@


1.12
log
@added "last reception" to filedetail-dialog and infolist [SyruS]
@
text
@d514 2
a515 9
				FileData.MetFile->SetStaticText(m_file->GetFullName());
				
				buffer[0] = 0;
				for (uint16 i = 0;i != 16;i++) // hmm I wonder if there is a standart function for this
					sprintf(buffer,"%s%02X",buffer,m_file->GetFileHash()[i]);
				FileData.Hash->SetStaticText(buffer);
				
				
				sprintf(buffer,"%s",buffer);
@


1.11
log
@Added lmule detection, better mldonkey detection and fixed bug 208
@
text
@d57 1
d248 7
d545 1
a545 1
					sprintf(buffer, GetResString(IDS_UNKNOWN).MakeLower()); 
d552 7
a558 1
							
@


1.10
log
@shareaza identification.
@
text
@d316 1
d319 1
a319 1
					case SO_SHAREAZA://MTSHAZ
@


1.9
log
@Corrective solution for 0 size file proble in addition ti Ultra's "Preventive solution"
@
text
@d318 2
a319 1
							if(isPlus)	//Cax2 - second check - don't display the 38e (pre v1?) mods
@


1.8
log
@last seen complete and last downloaded are displayed under locale settings
@
text
@d526 6
a531 1
				sprintf(buffer,"%i (%.1f%%)",m_file->GetAvailablePartCount(),(float)((m_file->GetAvailablePartCount()*100)/ m_file->GetPartCount()));
@


1.7
log
@last bugfixes!
@
text
@d532 4
a535 1
					sprintf(buffer, m_file->lastseencomplete.Format("%A, %Y-%m-%d, %X"));
@


1.7.2.1
log
@27a partial merge
@
text
@a317 1
					case SO_LMULE:
d370 1
a370 1
				CKnownFile* file = theApp.sharedfiles->GetFileByID(m_client->GetUploadFileID());
@


1.6
log
@bugfix: plus v38e & hybrid not showing in details panel
@
text
@d308 1
a308 1
				
d318 1
a318 1
							if(m_client->PlusVersion()>0 && m_client->PlusVersion()<0x2600)	//Cax2 - second check - don't display the 38e (pre v1?) mods
d325 4
a328 1
							sprintf(buffer,"v0.%02X",m_client->GetMuleVersion());
@


1.5
log
@bugfixed bug 5.
@
text
@d316 1
d318 1
a318 1
						if(m_client->PlusVersion()>0)		//Cax2 - show plus version
d331 6
a336 9
					case SO_EDONKEY:
						UserData.ClientSoftware->SetStaticText("eDonkey");
						sprintf(buffer,"v%i",m_client->GetVersion());
						UserData.ClientVersion->SetStaticText(buffer);
						break;
					// By Maverick
					case SO_MLDONKEY:
						UserData.ClientSoftware->SetStaticText("MLDonkey");
						sprintf(buffer,"v%i",m_client->GetVersion());
a337 1
						break;
@


1.4
log
@.26b port
@
text
@d317 5
a321 1
						UserData.ClientSoftware->SetStaticText("eMule");
@


1.3
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@a371 2
				CastItoXBytes(m_client->GetTransferedDown(),buffer);
				UserData.UploadedSession->SetStaticText(buffer);
d373 4
a376 2
				CastItoXBytes(m_client->GetTransferedUp(),buffer);
				UserData.DownloadedSession->SetStaticText(buffer);
a386 2
				CastItoXBytes(m_client->Credits()->GetDownloadedTotal(),buffer);
				UserData.UploadedTotal->SetStaticText(buffer);
d388 4
a391 2
				CastItoXBytes(m_client->Credits()->GetUploadedTotal(),buffer);
				UserData.DownloadedTotal->SetStaticText(buffer);
d507 1
a507 1
				CastItoXBytes(m_file->GetFileSize(),buffer);
d509 1
a509 1
				FileData.FileSize->SetStaticText(buffer);
a530 2
				CastItoXBytes(m_file->GetTransfered(),buffer);
				FileData.Transfered->SetStaticText(buffer);
d532 4
a535 2
				CastItoXBytes(m_file->GetCompletedSize(),buffer);
				sprintf(buffer, "%s (%.02f%%)", buffer, m_file->GetPercentCompleted());
@


1.2
log
@*** empty log message ***
@
text
@d734 1
a734 1
			if(m_file->srclist.GetCount() > 0)
d737 1
a737 1
				for(pos1 = m_file->srclist.GetHeadPosition(); (pos2 = pos1) != NULL;) 
d739 2
a740 2
					m_file->srclist.GetNext(pos1); 
					cur_src = m_file->srclist.GetAt(pos2); 
d770 3
a795 1
			}
@


1.2.4.1
log
@initial upgrade to .26
@
text
@d734 1
a734 1
            for (int sl=0;sl<SOURCESSLOTS;sl++) if (!m_file->srclists[sl].IsEmpty())
d737 1
a737 1
				for(pos1 = m_file->srclists[sl].GetHeadPosition(); (pos2 = pos1) != NULL;) 
d739 2
a740 2
					m_file->srclists[sl].GetNext(pos1); 
					cur_src = m_file->srclists[sl].GetAt(pos2); 
a769 3
			}

			if(lstSourceNames.GetCount() > 0)
d793 1
@


1.2.2.1
log
@updating this branch...
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d147 38
d278 1
d331 6
d427 2
a428 1
					sprintf(buffer,"%.1f",(float)m_client->GetScore(m_client->IsDownloading(),true));
d441 48
d490 1
d576 1
@

