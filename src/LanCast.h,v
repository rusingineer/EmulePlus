head	1.10;
access;
symbols
	PublicRelease_1_2e:1.10
	Interim_Release_1-2e_RC1:1.10
	PublicRelease_1_2d:1.10
	Interim_Release_1-2d_RC1:1.10
	Interim_Release_1-2d_beta1:1.10
	PublicRelease_1_2c:1.9
	Interim_Release_1-2c_RC1:1.9
	Interim_Release_1-2c_beta1:1.9
	PublicRelease_1_2b:1.9
	Interim_Release_1-2b_RC1:1.9
	PublicRelease_1_2a:1.9
	Interim_Release_1-2a_RC1:1.9
	Interim_Release_1-2a_beta2:1.9
	Interim_Release_1-2a_beta1:1.9
	PublicRelease_1_2:1.9
	Interim_Release_1-2_RC1:1.9
	Interim_Release_1-2_beta1:1.9
	PublicRelease_1_1g:1.9
	Interim_Release_1-1g_RC3:1.9
	Interim_Release_1-1g_RC2:1.9
	Interim_Release_1-1g_RC1:1.9
	Interim_Release_1-1g_beta2:1.9
	Interim_Release_1-1g_beta1:1.8
	PublicRelease_1_1f:1.7
	Interim_Release_1-1f_RC1:1.7
	PublicRelease_1_1e:1.7
	Interim_Release_1-1e_RC2:1.7
	Interim_Release_1-1e_RC1:1.7
	Interim_Release_1-1e_beta1:1.7
	PublicRelease_1_1d:1.7
	Interim_Release_1-1d_RC1:1.7
	PublicRelease_1_1c:1.7
	Interim_Release_1-1c_RC1:1.7
	Interim_Release_1-1c_beta2:1.7
	Interim_Release_1-1c_beta1:1.7
	PublicRelease_1_1b:1.7
	Interim_Release_1-1b_RC1:1.7
	PublicRelease_1_1a:1.7
	Interim_Release_1-1a_RC2:1.7
	Interim_Release_1-1a_RC1:1.7
	Interim_Release_1-1a_beta2:1.7
	Interim_Release_1-1a_beta1:1.7
	PublicRelease_1_1:1.7
	Interim_Release_1-1_beta1:1.7
	PublicRelease_1o:1.7
	Interim_Release_1o_RC1:1.7
	Interim_Release_1o_beta1:1.7
	PublicRelease_1n:1.7
	Interim_Release_1n_RC2:1.7
	Interim_Release_1n_RC1:1.7
	Interim_Release_1n_beta2:1.7
	Interim_Release_1n_beta1:1.7
	PublicRelease_1m:1.7
	Interim_Release_1m_beta1:1.7
	PublicRelease_1l:1.7
	Interim_Release_1l_RC3:1.7
	Interim_Release_1l_RC2:1.7
	Interim_Release_1l_RC1:1.7
	Interim_Release_1l_beta2:1.7
	Interim_Release_1l_beta1:1.7
	PublicRelease_1k:1.7
	Interim_Release_1k_RC4:1.7
	Interim_1k_RC3:1.7
	Interim_1k_RC2:1.7
	Interim_Release_1k_RC1:1.7
	Interim_Release_1k_beta5:1.7
	Intrerim_Release_1k_beta4:1.7
	Interim_Release_1k_beta1:1.7
	PublicRelease_1j:1.5
	Interim_Release_1J_RC3:1.5
	Interim_Release_1j_RC3:1.5
	Interim_Release_1j_RC2:1.5
	Interim_Release_1j_RC1:1.5
	Interim_Release_1j_beta2:1.5
	Interim_Release_1j_beta1:1.5
	PublicRelease_1i:1.5
	Interim_Release_1i_RC6:1.5
	Interim_Release_1i_RC3:1.5
	Interim_Release_1i_RC2:1.5
	Interim_Release_1i_RC1:1.5
	Interim_Release_1i_beta3:1.5
	Interim_Release_1i_beta2:1.5
	Interim_Release_1i_beta1:1.4
	PublicRelease_1h:1.3
	Interim_Release_1h_rc2:1.3
	Interim_Release_1h_RC1:1.3
	Interim_Release_1h_beta2:1.3
	Interim_Release_1h_beta1_now:1.3
	Interim_Release_1h_beta1:1.3
	PublicRelease_1g:1.3
	Interim_Release_1g_RC6_Final:1.3
	Interim_Release_1g_RC6:1.3
	Interim_Release_1g_RC5:1.3
	Interim_Release_1g_RC4:1.3
	Interim_Release_1g_RC3:1.3
	Interim_Release_1g_beta2:1.3
	Interim_Release_1g_beta1:1.3
	Interim_Release_1f_RC4:1.3
	Interim_Release_1f_RC3:1.3
	Interim_Release_1f_RC2:1.3
	Interim_Release_1f_RC:1.3
	Interim_Release_1f_beta2:1.3
	Interim_Release_1f_beta1:1.3
	PublicRelease_1e:1.3
	Interim_Release_1e_RC2:1.3
	Interim_Release_1e_RC:1.3
	Interim_Release_1e_beta3:1.3
	Interim_Release_1e_beta2:1.3
	Interim_Release_1e_beta2_before_kuchin:1.3
	Interim_Release_1e_beta1:1.3
	PublicRelease_1c:1.3
	featurestest:1.3.0.4
	Interim_Release_1c_RC:1.3
	Interim_Release_1c_beta2:1.3
	Interim_Release_1c_beta1:1.3
	threaded_downloadqueue:1.3.0.2
	PublicRelease_1b:1.2
	Interim_Release_1b_beta2:1.1
	Interim_Release_1b_beta1:1.1;
locks; strict;
comment	@ * @;


1.10
date	2008.01.12.10.32.10;	author eklmn;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.05.05.36.19;	author aw3;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.04.03.25.21;	author aw3;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.03.12.53.48;	author morevit;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.08.01.53.32;	author morevit;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.19.00.13.37;	author morevit;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.14.15.57.16;	author partyckip;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.09.15.48.39;	author moosetea;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.03.22.10.18;	author moosetea;	state Exp;
branches;
next	;


desc
@@


1.10
log
@checked for Unicode. minor corrections
@
text
@#pragma once

#include "Loggable.h"

class CKnownFile;

class CLanCast : public CAsyncSocket, public CLoggable
{
public:
	CLanCast();
	~CLanCast();

	virtual void OnReceive(int iErrorCode);
	bool SendPacket(Packet* packet);

	void CLanCast::Start();
	void CLanCast::Stop();

	void CLanCast::BroadcastHash(CKnownFile *pKnownFile);

private:
	void CLanCast::ReceiveHash(byte *pbytePacketBuf, uint32 dwSize);

	bool JoinGroup(const char *pcGroupIP, uint32 dwGroupPort, uint32 dwTTL, bool bLoopback);
	bool LeaveGroup();

	void SetLoopBack(bool bLoop);
	bool SetTTL(uint32 dwTTL);
	bool CreateSendingSocket(uint32 dwTTL, bool bLoopBack);
	bool CreateReceivingSocket(const char *pcGroupIP, uint32 dwGroupPort);

	void static CALLBACK UDPTimerProc(HWND hwnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime);
	bool CLanCast::ProcessPacket(byte *pbytePacketBuf, uint32 size, byte byteOpcode);

	bool GetLancastEnabled();
	uint32 GetLancastIP();
	uint16 GetLancastPort();

private:
	SOCKADDR_IN m_saHostGroup;	// SOCKADDR structure to hold IP/Port of the Host group to send data to it
	ip_mreq m_mrMReq;			// Contains IP and interface of the host group

	CAsyncSocket m_SendSocket;	// Socket for sending data to the host group

	uint32 udp_timer;			// Timer to fire packet sends
	bool bStarted;
};
@


1.9
log
@Applied some corrections for Unicode; Formatting.
@
text
@d24 1
a24 1
	bool JoinGroup(LPCSTR pcGroupIP, uint32 dwGroupPort, uint32 dwTTL, bool bLoopback);
d30 1
a30 1
	bool CreateReceivingSocket(LPCSTR pcGroupIP, uint32 dwGroupPort);
@


1.8
log
@Global preferences reference for LanCast {WiZaRd}.
@
text
@a2 1
#include "KnownFile.h"
d5 1
a5 1
// CLanCast command target
d13 1
a13 1
	virtual void OnReceive(int nErrorCode);
d19 1
a19 1
	void CLanCast::BroadcastHash(CKnownFile* cur_file);
d22 1
a22 1
	void CLanCast::ReceiveHash(byte *pbytePacketBuf, uint32 nSize);
d24 2
a25 2
	BOOL JoinGroup(CString, UINT, UINT, BOOL);
	BOOL LeaveGroup();
d27 4
a30 4
	void SetLoopBack(BOOL);
	BOOL SetTTL(UINT nTTL);
	BOOL CreateSendingSocket(UINT, BOOL);
	BOOL CreateReceivingSocket(LPCTSTR, UINT);
d32 2
a33 2
	void static CALLBACK UDPTimerProc(HWND hwnd, UINT uMsg,UINT_PTR idEvent,DWORD dwTime);
	bool CLanCast::ProcessPacket(byte* pbytePacketBuf, uint32 size, byte opcode);
d45 1
a46 1
	uint32 udp_timer;												// Timer to fire packet sends
@


1.7
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@a2 1
// Specific includes needed by this class
a9 1

d11 1
a11 1
	CLanCast(CPreferences* in_prefs);
d23 1
a23 2

void CLanCast::ReceiveHash(byte* pbytePacketBuf, uint32 nSize);
d35 4
a38 1
		//(char* packet, uint16 size, byte opcode, char* host, uint16 port);
a40 1

a47 10

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CPreferences* m_prefs;											// Pointer to the preferences object

	bool GetLancastEnabled()		{return m_prefs->GetLancastEnabled();}	// Settings
	uint32 GetLancastIP()			{return m_prefs->GetLancastIP();}
	uint32 GetLancastSubnet()		{return m_prefs->GetLancastSubnet();}
	uint16 GetLancastPort()			{return m_prefs->GetLancastPort();}
	uint16 GetEmulePort()			{return m_prefs->GetPort();}					// Current Emule Listening Port

a48 1

@


1.6
log
@Formatting, comments, and name changes.
@
text
@d26 1
a26 1
void CLanCast::ReceiveHash(char* pachPacket, uint32 nSize);
d37 2
a38 2
	bool CLanCast::ProcessPacket(char* packet, uint32 size, uint8 opcode);
		//(char* packet, int16 size, int8 opcode, char* host, uint16 port);
@


1.5
log
@Formatting, comments, and name changes.
Created distinct tag classes and typed enumerations for tags, opcodes, and protocols.
@
text
@d26 1
a26 1
void CLanCast::RecieveHash(char* pachPacket, uint32 nSize);
@


1.4
log
@First batch of the threatened name changes. Shouldn't be any logic changes here.
@
text
@a6 8
#define OP_LANCASTPROT			0xC6

#define OP_HASH					0x01		// Broadcast hash
#define OP_HASHSEARCH			0x02		// Search the subnet for a hash
#define OP_HASHSEARCHRESPONCE	0x03		// Hash found on this client
#define OP_FILESEARCH			0x04		// Search the subnet for a file
#define OP_FILESEARCHRESPONCE	0x05		// File found on this client

@


1.3
log
@converted to new logging method
@
text
@d59 1
a59 1
	CPreferences* prefs;											// Pointer to the preferences object
d61 5
a65 5
	bool GetLancastEnabled()		{return prefs->GetLancastEnabled();}	// Settings
	uint32 GetLancastIP()			{return prefs->GetLancastIP();}
	uint32 GetLancastSubnet()		{return prefs->GetLancastSubnet();}
	uint16 GetLancastPort()			{return prefs->GetLancastPort();}
	uint16 GetEmulePort()			{return prefs->GetPort();}					// Current Emule Listening Port
@


1.2
log
@Lancast Tweak
@
text
@d5 1
d17 1
a17 1
class CLanCast : public CAsyncSocket
@


1.1
log
@Lancast : Help other emules on your lan complete/download files quicker, saving bandwith.

1) UDP broadcasts your hashs over your lan
2) Listens for other clients sending broadcasts and adds them as sources
3) Clients on your lan bypass the queue, and have unlimited upload (download rate is still limited by emule downlaod speed)
@
text
@d21 1
a21 1
	virtual ~CLanCast();
@

