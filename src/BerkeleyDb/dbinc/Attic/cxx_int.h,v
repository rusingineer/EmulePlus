head	1.2;
access;
symbols
	PublicRelease_1e:1.1
	Interim_Release_1e_RC2:1.1
	Interim_Release_1e_RC:1.1
	Interim_Release_1e_beta3:1.1
	Interim_Release_1e_beta2:1.1
	Interim_Release_1e_beta2_before_kuchin:1.1
	Interim_Release_1e_beta1:1.1
	PublicRelease_1c:1.1
	featurestest:1.1.0.8
	Interim_Release_1c_RC:1.1
	Interim_Release_1c_beta2:1.1
	Interim_Release_1c_beta1:1.1
	threaded_downloadqueue:1.1.0.6
	PublicRelease_1b:1.1
	Interim_Release_1b_beta2:1.1
	Interim_Release_1b_beta1:1.1
	proxydeadlake:1.1.0.4
	PublicRelease_1a:1.1
	Interim_Release_1a_beta2:1.1
	BerkeleyDb:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	2003.04.29.16.34.09;	author kuchin;	state dead;
branches;
next	1.1;

1.1
date	2003.02.25.10.54.18;	author kuchin;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.02.25.13.42.24;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Rearrangements
@
text
@/*-
 * See the file LICENSE for redistribution information.
 *
 * Copyright (c) 1997-2002
 *	Sleepycat Software.  All rights reserved.
 *
 * $Id: cxx_int.h,v 1.1 2003/02/25 10:54:18 kuchin Exp $
 */

#ifndef _CXX_INT_H_
#define	_CXX_INT_H_

// private data structures known to the implementation only

//
// Using FooImp classes will allow the implementation to change in the
// future without any modification to user code or even to header files
// that the user includes. FooImp * is just like void * except that it
// provides a little extra protection, since you cannot randomly assign
// any old pointer to a FooImp* as you can with void *.  Currently, a
// pointer to such an opaque class is always just a pointer to the
// appropriate underlying implementation struct.  These are converted
// back and forth using the various overloaded wrap()/unwrap() methods.
// This is essentially a use of the "Bridge" Design Pattern.
//
// WRAPPED_CLASS implements the appropriate wrap() and unwrap() methods
// for a wrapper class that has an underlying pointer representation.
//
#define	WRAPPED_CLASS(_WRAPPER_CLASS, _IMP_CLASS, _WRAPPED_TYPE)           \
									   \
	class _IMP_CLASS {};                                               \
									   \
	inline _WRAPPED_TYPE unwrap(_WRAPPER_CLASS *val)                   \
	{                                                                  \
		if (!val) return (0);                                      \
		return ((_WRAPPED_TYPE)((void *)(val->imp())));            \
	}                                                                  \
									   \
	inline const _WRAPPED_TYPE unwrapConst(const _WRAPPER_CLASS *val)  \
	{                                                                  \
		if (!val) return (0);                                      \
		return ((const _WRAPPED_TYPE)((void *)(val->constimp()))); \
	}                                                                  \
									   \
	inline _IMP_CLASS *wrap(_WRAPPED_TYPE val)                         \
	{                                                                  \
		return ((_IMP_CLASS*)((void *)val));                       \
	}

WRAPPED_CLASS(DbMpoolFile, DbMpoolFileImp, DB_MPOOLFILE*)
WRAPPED_CLASS(Db, DbImp, DB*)
WRAPPED_CLASS(DbEnv, DbEnvImp, DB_ENV*)
WRAPPED_CLASS(DbTxn, DbTxnImp, DB_TXN*)

// A tristate integer value used by the DB_ERROR macro below.
// We chose not to make this an enumerated type so it can
// be kept private, even though methods that return the
// tristate int can be declared in db_cxx.h .
//
#define	ON_ERROR_THROW     1
#define	ON_ERROR_RETURN    0
#define	ON_ERROR_UNKNOWN   (-1)

// Macros that handle detected errors, in case we want to
// change the default behavior.  The 'policy' is one of
// the tristate values given above.  If UNKNOWN is specified,
// the behavior is taken from the last initialized DbEnv.
//
#define	DB_ERROR(caller, ecode, policy) \
    DbEnv::runtime_error(caller, ecode, policy)

#define	DB_ERROR_DBT(caller, dbt, policy) \
    DbEnv::runtime_error_dbt(caller, dbt, policy)

#define	DB_OVERFLOWED_DBT(dbt) \
	(F_ISSET(dbt, DB_DBT_USERMEM) && dbt->size > dbt->ulen)

/* values for Db::flags_ */
#define	DB_CXX_PRIVATE_ENV      0x00000001

#endif /* !_CXX_INT_H_ */
@


1.1
log
@*** empty log message ***
@
text
@d7 1
a7 1
 * $Id: cxx_int.h,v 11.20 2002/01/11 15:52:23 bostic Exp $
@


1.1.2.1
log
@*** empty log message ***
@
text
@d7 1
a7 1
 * $Id: cxx_int.h,v 1.1 2003/02/25 10:54:18 kuchin Exp $
@

