head	1.2;
access;
symbols
	PublicRelease_1e:1.1
	Interim_Release_1e_RC2:1.1
	Interim_Release_1e_RC:1.1
	Interim_Release_1e_beta3:1.1
	Interim_Release_1e_beta2:1.1
	Interim_Release_1e_beta2_before_kuchin:1.1
	Interim_Release_1e_beta1:1.1
	PublicRelease_1c:1.1
	featurestest:1.1.0.8
	Interim_Release_1c_RC:1.1
	Interim_Release_1c_beta2:1.1
	Interim_Release_1c_beta1:1.1
	threaded_downloadqueue:1.1.0.6
	PublicRelease_1b:1.1
	Interim_Release_1b_beta2:1.1
	Interim_Release_1b_beta1:1.1
	proxydeadlake:1.1.0.4
	PublicRelease_1a:1.1
	Interim_Release_1a_beta2:1.1
	BerkeleyDb:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	2003.04.29.16.21.26;	author kuchin;	state dead;
branches;
next	1.1;

1.1
date	2003.02.25.10.55.51;	author kuchin;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.02.25.13.46.12;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/*-
 * See the file LICENSE for redistribution information.
 *
 * Copyright (c) 1997-2002
 *	Sleepycat Software.  All rights reserved.
 */

#include "db_config.h"

#ifndef lint
static const char revid[] = "$Id: os_seek.c,v 1.1 2003/02/25 10:55:51 kuchin Exp $";
#endif /* not lint */

#include "db_int.h"

/*
 * __os_seek --
 *	Seek to a page/byte offset in the file.
 */
int
__os_seek(dbenv, fhp, pgsize, pageno, relative, isrewind, db_whence)
	DB_ENV *dbenv;
	DB_FH *fhp;
	size_t pgsize;
	db_pgno_t pageno;
	u_int32_t relative;
	int isrewind;
	DB_OS_SEEK db_whence;
{
	/* Yes, this really is how Microsoft have designed their API */
	union {
		__int64 bigint;
		struct {
			unsigned long low;
			long high;
		};
	} offset;
	int ret, whence;
	DWORD from;

	if (DB_GLOBAL(j_seek) != NULL) {
		switch (db_whence) {
		case DB_OS_SEEK_CUR:
			whence = SEEK_CUR;
			break;
		case DB_OS_SEEK_END:
			whence = SEEK_END;
			break;
		case DB_OS_SEEK_SET:
			whence = SEEK_SET;
			break;
		default:
			return (EINVAL);
		}

		ret = DB_GLOBAL(j_seek)(fhp->fd, pgsize, pageno,
		    relative, isrewind, whence);
	} else {
		switch (db_whence) {
		case DB_OS_SEEK_CUR:
			from = FILE_CURRENT;
			break;
		case DB_OS_SEEK_END:
			from = FILE_END;
			break;
		case DB_OS_SEEK_SET:
			from = FILE_BEGIN;
			break;
		default:
			return (EINVAL);
		}

		offset.bigint = (__int64)pgsize * pageno + relative;
		if (isrewind)
			offset.bigint = -offset.bigint;

		ret = (SetFilePointer(fhp->handle,
		    offset.low, &offset.high, from) == (DWORD) - 1) ?
		    __os_win32_errno() : 0;
	}

	if (ret == 0) {
		fhp->pgsize = pgsize;
		fhp->pgno = pageno;
		fhp->offset = relative;
	} else {
		__db_err(dbenv, "seek: %lu %d %d: %s",
		    (u_long)pgsize * pageno + relative,
		    isrewind, db_whence, strerror(ret));
	}

	return (ret);
}
@


1.1
log
@*** empty log message ***
@
text
@d11 1
a11 1
static const char revid[] = "$Id: os_seek.c,v 11.17 2002/08/06 04:56:20 bostic Exp $";
@


1.1.2.1
log
@*** empty log message ***
@
text
@d11 1
a11 1
static const char revid[] = "$Id: os_seek.c,v 1.1 2003/02/25 10:55:51 kuchin Exp $";
@

