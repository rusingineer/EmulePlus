head	1.9;
access;
symbols
	PublicRelease_1_2e:1.9
	Interim_Release_1-2e_RC1:1.9
	PublicRelease_1_2d:1.9
	Interim_Release_1-2d_RC1:1.9
	Interim_Release_1-2d_beta1:1.9
	PublicRelease_1_2c:1.9
	Interim_Release_1-2c_RC1:1.9
	Interim_Release_1-2c_beta1:1.9
	PublicRelease_1_2b:1.9
	Interim_Release_1-2b_RC1:1.9
	PublicRelease_1_2a:1.9
	Interim_Release_1-2a_RC1:1.9
	Interim_Release_1-2a_beta2:1.9
	Interim_Release_1-2a_beta1:1.9
	PublicRelease_1_2:1.9
	Interim_Release_1-2_RC1:1.9
	Interim_Release_1-2_beta1:1.9
	PublicRelease_1_1g:1.9
	Interim_Release_1-1g_RC3:1.9
	Interim_Release_1-1g_RC2:1.9
	Interim_Release_1-1g_RC1:1.9
	Interim_Release_1-1g_beta2:1.9
	Interim_Release_1-1g_beta1:1.9
	PublicRelease_1_1f:1.9
	Interim_Release_1-1f_RC1:1.9
	PublicRelease_1_1e:1.9
	Interim_Release_1-1e_RC2:1.9
	Interim_Release_1-1e_RC1:1.9
	Interim_Release_1-1e_beta1:1.9
	PublicRelease_1_1d:1.4
	Interim_Release_1-1d_RC1:1.4
	PublicRelease_1_1c:1.4
	Interim_Release_1-1c_RC1:1.4
	Interim_Release_1-1c_beta2:1.2
	Interim_Release_1-1c_beta1:1.1;
locks; strict;
comment	@ * @;


1.9
date	2005.04.16.00.04.51;	author kuchin;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.08.11.09.30;	author kuchin;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.07.17.24.29;	author kuchin;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.07.06.48.18;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.22.15.53.22;	author kuchin;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.23.22.12.54;	author kuchin;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.18.18.31.18;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.03.15.13.49;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.04.13.21.14;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.9
log
@v2 - Xml events and other improvements
@
text
@#pragma once


#include "../Engine/Base/EmEngineBase.h"
#include "../Engine/XML/XMLEvents.h"

#define WM_UI_STATE	(WM_USER + 1001)

enum XmlStates
{
	XML_CONNECTED,
	XML_DISCONNECTED
};

struct CEmClient_Xml;

class CEmEngine : public CEmEngineBase
{
public:
	CEmClient_Xml*	m_pXmlClient;

	CEmEngine();

	bool Init(HWND hWndUI);

	inline void SetXmlState(XmlStates eState, DWORD dwData = 0)
	{
		m_eXmlState = eState;
		if(m_hWndUI)
			::PostMessage(m_hWndUI, WM_UI_STATE, (WPARAM)eState, (LPARAM)dwData);
	}
	inline XmlStates GetXmlState(){ return m_eXmlState; }


	HWND m_hMainWnd;
	void CloseApp(){ PostMessage(m_hMainWnd, WM_COMMAND, IDCANCEL, 0); }

	CXMLEvents	m_XmlEvents;

private:
	XmlStates	m_eXmlState;
	HWND		m_hWndUI;
};
@


1.8
log
@v2 - increased level of abstraction + minor improvements
@
text
@d5 1
a33 2
	void SetXmlResponse(ULONG ulId, LPCTSTR sResponse);
	CString WaitForXmlResponse(ULONG ulId, DWORD dwTimeout = 5000);
d38 2
a40 2
	typedef map<ULONG, CString> XmlRespMap;
	XmlRespMap	m_stXmlResponses;
a41 1
	CMutex		m_mutexXmlResponses;
@


1.7
log
@v2 - fixes for upload logic
@
text
@a2 1
#include "../Loggable.h"
d4 3
a6 1
#define WM_UI_STATE	(WM_USER + 1)
a13 4
struct CTask;
struct CEmClient;
struct CTcpCompletionTask;
struct CEmClient;
a14 11
class CTaskProcessor_Sockets;

// Upload queue priorities
enum EnumQueuePriority
{
	QUE_IMMEDIATE	= 0,
	QUE_HIGH		= 1,
	QUE_NORMAL		= 2,
	QUE_LOW			= 3
};
const UINT QUEUE_SIZE = 4;
d16 1
a16 1
class CEmEngine : public CLoggable
a17 3
	HANDLE	m_hStop; // termination event
	HWND	m_hWndUI;

a18 1

a21 1
	~CEmEngine() { Uninit(); }
a23 1
	void Uninit();
a24 4
	inline bool IsShuttingDown()
	{
		return WAIT_TIMEOUT != WaitForSingleObject(m_hStop, 0); 
	}
a32 3
	__declspec(property(get=_GetSocketsProcessor))	CTaskProcessor_Sockets&	Sockets;
	CTaskProcessor_Sockets&	_GetSocketsProcessor()	{ if(!m_pSocketsProcessor)throw;return *m_pSocketsProcessor; }

a35 2
	void ProcessSocketsTimeout(){ }

a39 2
	CTaskProcessor_Sockets*	m_pSocketsProcessor;

d44 1
@


1.6
log
@v2 - more webserver logic
@
text
@d20 10
@


1.5
log
@v2 - more upload logic
@
text
@d55 3
@


1.4
log
@v2 - minor improvements
@
text
@d53 2
@


1.3
log
@v2 - more minor rearrangements
@
text
@d7 1
a7 1
enum UIStates
d9 2
a10 2
	UI_CONNECTED,
	UI_DISCONNECTED
d39 1
a39 1
	inline void SendUIState(UIStates eState, DWORD dwData = 0)
d41 1
d45 1
d58 1
@


1.2
log
@Ideological switch (may be considered as temporary, but for long term) - ATL to MFC
Actually we don't need them both, but I want to work with our current KnownFile-based classes, which use MFC a lot
@
text
@a3 1
#include "../Engine/Sockets/TaskProcessorSockets.h"
d16 4
a38 27
	inline void PushToSocketsTP(CTask *pTask)
	{
		m_stSocketsTP.Push(pTask);
	}
	inline CEmClient* LookupClient(SOCKET hSocket)
	{
		return m_stSocketsTP.Lookup(hSocket);
	}
	inline void KillClient(CEmClient *pClient)
	{
	}
	inline CEmClient* AllocClient(T_CLIENT_TYPE eType)
	{
		return m_stSocketsTP.AllocClient(eType);
	}
	inline void AddClientToMap(SOCKET hSocket, CEmClient *pClient)
	{
		m_stSocketsTP.m_mapClients[hSocket] = pClient;
	}
	CEmClient* AllocTcpConnect(ULONG nAddr, USHORT nPort, T_CLIENT_TYPE eType, CTcpCompletionTask *pOnCompletionTask)
	{
		return m_stSocketsTP.AllocTcpConnect(nAddr, nPort, eType, pOnCompletionTask);
	}
	inline bool AllocSend(SOCKET hSocket, PCVOID pData, DWORD dwLen)
	{
		return m_stSocketsTP.m_stTcp.AllocSend(hSocket, pData, dwLen);
	}
d45 3
d52 1
a52 1
	CTaskProcessor_Sockets	m_stSocketsTP;
@


1.1
log
@XML connecting, tray app
@
text
@d68 4
d74 4
@

