head	1.39;
access;
symbols
	PublicRelease_1_2e:1.39
	Interim_Release_1-2e_RC1:1.39
	PublicRelease_1_2d:1.37
	Interim_Release_1-2d_RC1:1.37
	Interim_Release_1-2d_beta1:1.36
	PublicRelease_1_2c:1.35
	Interim_Release_1-2c_RC1:1.35
	Interim_Release_1-2c_beta1:1.35
	PublicRelease_1_2b:1.35
	Interim_Release_1-2b_RC1:1.35
	PublicRelease_1_2a:1.35
	Interim_Release_1-2a_RC1:1.35
	Interim_Release_1-2a_beta2:1.35
	Interim_Release_1-2a_beta1:1.35
	PublicRelease_1_2:1.33
	Interim_Release_1-2_RC1:1.33
	Interim_Release_1-2_beta1:1.33
	PublicRelease_1_1g:1.33
	Interim_Release_1-1g_RC3:1.33
	Interim_Release_1-1g_RC2:1.33
	Interim_Release_1-1g_RC1:1.33
	Interim_Release_1-1g_beta2:1.31
	Interim_Release_1-1g_beta1:1.29
	PublicRelease_1_1f:1.28
	Interim_Release_1-1f_RC1:1.28
	PublicRelease_1_1e:1.28
	Interim_Release_1-1e_RC2:1.28
	Interim_Release_1-1e_RC1:1.28
	Interim_Release_1-1e_beta1:1.28
	PublicRelease_1_1d:1.28
	Interim_Release_1-1d_RC1:1.28
	PublicRelease_1_1c:1.28
	Interim_Release_1-1c_RC1:1.28
	Interim_Release_1-1c_beta2:1.28
	Interim_Release_1-1c_beta1:1.28
	PublicRelease_1_1b:1.28
	Interim_Release_1-1b_RC1:1.28
	PublicRelease_1_1a:1.28
	Interim_Release_1-1a_RC2:1.28
	Interim_Release_1-1a_RC1:1.28
	Interim_Release_1-1a_beta2:1.28
	Interim_Release_1-1a_beta1:1.28
	PublicRelease_1_1:1.27
	Interim_Release_1-1_beta1:1.27
	PublicRelease_1o:1.27
	Interim_Release_1o_RC1:1.27
	Interim_Release_1o_beta1:1.27
	PublicRelease_1n:1.27
	Interim_Release_1n_RC2:1.27
	Interim_Release_1n_RC1:1.27
	Interim_Release_1n_beta2:1.27
	Interim_Release_1n_beta1:1.27
	PublicRelease_1m:1.27
	Interim_Release_1m_beta1:1.27
	PublicRelease_1l:1.23
	Interim_Release_1l_RC3:1.23
	Interim_Release_1l_RC2:1.23
	Interim_Release_1l_RC1:1.22
	Interim_Release_1l_beta2:1.21
	Interim_Release_1l_beta1:1.20
	PublicRelease_1k:1.20
	Interim_Release_1k_RC4:1.20
	Interim_1k_RC3:1.20
	Interim_1k_RC2:1.20
	Interim_Release_1k_RC1:1.20
	Interim_Release_1k_beta5:1.19
	Intrerim_Release_1k_beta4:1.19
	Interim_Release_1k_beta1:1.15
	PublicRelease_1j:1.15
	Interim_Release_1J_RC3:1.15
	Interim_Release_1j_RC3:1.15
	Interim_Release_1j_RC2:1.15
	Interim_Release_1j_RC1:1.15
	Interim_Release_1j_beta2:1.15
	Interim_Release_1j_beta1:1.15
	PublicRelease_1i:1.15
	Interim_Release_1i_RC6:1.15
	Interim_Release_1i_RC3:1.15
	Interim_Release_1i_RC2:1.12
	Interim_Release_1i_RC1:1.12
	Interim_Release_1i_beta3:1.12
	Interim_Release_1i_beta2:1.12
	Interim_Release_1i_beta1:1.10
	PublicRelease_1h:1.9
	Interim_Release_1h_rc2:1.9
	Interim_Release_1h_RC1:1.9
	Interim_Release_1h_beta2:1.9
	Interim_Release_1h_beta1_now:1.9
	Interim_Release_1h_beta1:1.9
	PublicRelease_1g:1.8
	Interim_Release_1g_RC6_Final:1.8
	Interim_Release_1g_RC6:1.8
	Interim_Release_1g_RC5:1.8
	Interim_Release_1g_RC4:1.8
	Interim_Release_1g_RC3:1.8
	Interim_Release_1g_beta2:1.7
	Interim_Release_1g_beta1:1.7
	Interim_Release_1f_RC4:1.6
	Interim_Release_1f_RC3:1.6
	Interim_Release_1f_RC2:1.6
	Interim_Release_1f_RC:1.6
	Interim_Release_1f_beta2:1.6
	Interim_Release_1f_beta1:1.5
	PublicRelease_1e:1.5
	Interim_Release_1e_RC2:1.5
	Interim_Release_1e_RC:1.5
	Interim_Release_1e_beta3:1.5
	Interim_Release_1e_beta2:1.5
	Interim_Release_1e_beta2_before_kuchin:1.5
	Interim_Release_1e_beta1:1.5
	PublicRelease_1c:1.5
	featurestest:1.5.0.4
	Interim_Release_1c_RC:1.5
	Interim_Release_1c_beta2:1.5
	Interim_Release_1c_beta1:1.5
	threaded_downloadqueue:1.5.0.2
	PublicRelease_1b:1.5
	Interim_Release_1b_beta2:1.5
	Interim_Release_1b_beta1:1.5
	proxydeadlake:1.4.0.4
	PublicRelease_1a:1.4
	Interim_Release_1a_beta2:1.4
	BerkeleyDb:1.4.0.2
	Interim_Release_1a_beta1:1.4
	PublicRelease_1:1.4
	goldfish:1.4
	eMulePlus_1_RC2:1.4
	eMulePlus_26b_1RC1:1.4
	PreRelease_26b_i0e:1.4
	before_26d_merge:1.4
	Interim_Release_26b_i0d:1.3
	Interim_Release_26b_i0c:1.2
	Interim_Release_26b_i0b:1.2
	Interim_Release_26b_i0a:1.2
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@// @;


1.39
date	2008.11.03.05.35.28;	author aw3;	state Exp;
branches;
next	1.38;

1.38
date	2008.10.28.02.41.52;	author aw3;	state Exp;
branches;
next	1.37;

1.37
date	2008.03.10.04.09.38;	author aw3;	state Exp;
branches;
next	1.36;

1.36
date	2007.12.16.21.38.00;	author aw3;	state Exp;
branches;
next	1.35;

1.35
date	2006.04.23.04.06.57;	author aw3;	state Exp;
branches;
next	1.34;

1.34
date	2006.04.09.01.31.16;	author aw3;	state Exp;
branches;
next	1.33;

1.33
date	2005.11.27.22.11.47;	author eklmn;	state Exp;
branches;
next	1.32;

1.32
date	2005.11.27.20.31.04;	author eklmn;	state Exp;
branches;
next	1.31;

1.31
date	2005.11.15.06.02.54;	author aw3;	state Exp;
branches;
next	1.30;

1.30
date	2005.08.25.11.57.47;	author aw3;	state Exp;
branches;
next	1.29;

1.29
date	2005.08.11.05.19.37;	author aw3;	state Exp;
branches;
next	1.28;

1.28
date	2004.11.06.04.47.39;	author aw3;	state Exp;
branches;
next	1.27;

1.27
date	2004.06.19.04.30.59;	author aw3;	state Exp;
branches;
next	1.26;

1.26
date	2004.06.18.20.03.47;	author aw3;	state Exp;
branches;
next	1.25;

1.25
date	2004.06.16.22.42.42;	author katsyonak;	state Exp;
branches;
next	1.24;

1.24
date	2004.06.16.17.36.19;	author katsyonak;	state Exp;
branches;
next	1.23;

1.23
date	2004.05.30.23.24.56;	author katsyonak;	state Exp;
branches;
next	1.22;

1.22
date	2004.05.22.19.39.41;	author dongato;	state Exp;
branches;
next	1.21;

1.21
date	2004.05.12.22.26.38;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2004.03.26.22.12.47;	author aw3;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.18.18.03.15;	author eklmn;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.14.21.10.11;	author aw3;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.25.17.58.54;	author kush_eplus;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.24.03.44.41;	author aw3;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.19.13.50.27;	author katsyonak;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.19.01.52.15;	author katsyonak;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.18.17.51.40;	author katsyonak;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.10.17.59.02;	author morevit;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.05.17.53.56;	author morevit;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.20.15.39.30;	author morevit;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.10.14.12.51;	author zegzav;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.14.18.08.22;	author partyckip;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.01.08.59.01;	author kuchin;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.08.17.08.24;	author netwolf1;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.01.01.16.56;	author dongato;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2003.02.16.22.01.46;	author lord_kiron;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2003.02.11.21.11.20;	author lord_kiron;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.09.18.39.41;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.07.05;	author cax2;	state Exp;
branches
	1.1.4.1
	1.1.6.1;
next	;

1.1.4.1
date	2003.01.28.16.54.00;	author cax2;	state Exp;
branches;
next	;

1.1.6.1
date	2003.02.05.01.58.41;	author obaldin;	state Exp;
branches;
next	;

1.4.2.1
date	2003.03.01.20.59.35;	author obaldin;	state Exp;
branches;
next	;

1.5.4.1
date	2003.03.23.06.22.02;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Speeded up list update by combining several window messages into one request.
@
text
@//this file is part of eMule
//Copyright (C)2002-2006 Merkur ( strEmail.Format("%s@@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#include "stdafx.h"
#include "emule.h"
#include "updownclient.h"
#include "CommentDialogLst.h"
#include "PastComment.h"
#include "Details\ClientDetails.h"
#include "TitleMenu.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif


#define DRAWTEXTFMT		(DT_LEFT | DT_BOTTOM | DT_SINGLELINE | DT_END_ELLIPSIS | DT_NOPREFIX | DT_NOCLIP)


IMPLEMENT_DYNAMIC(CCommentDialogLst, CDialog)
CCommentDialogLst::CCommentDialogLst(CPartFile* file)
	: CResizableDialog(CCommentDialogLst::IDD, 0)
{
	m_file = file;
}

CCommentDialogLst::~CCommentDialogLst()
{
}

void CCommentDialogLst::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_LST, pmyListCtrl);
}

BEGIN_MESSAGE_MAP(CCommentDialogLst, CResizableDialog)
	ON_BN_CLICKED(IDC_CMT_OK, OnBnClickedApply)
	ON_BN_CLICKED(IDC_CMT_REF, OnBnClickedRefresh)
	ON_WM_DESTROY()
	ON_NOTIFY(NM_RCLICK, IDC_LST, OnNMRclickList)
END_MESSAGE_MAP()



void CCommentDialogLst::OnBnClickedApply()
{
	CDialog::OnOK();
}

void CCommentDialogLst::OnBnClickedRefresh()
{
	CompleteList();
}

BOOL CCommentDialogLst::OnInitDialog()
{
	CResizableDialog::OnInitDialog();

	AddAnchor(IDC_LST,TOP_LEFT,BOTTOM_RIGHT);
	AddAnchor(IDC_CMT_OK,BOTTOM_RIGHT);
	AddAnchor(IDC_CMT_REF,BOTTOM_RIGHT);
	AddAnchor(IDC_CMSTATUS,BOTTOM_LEFT);

	pmyListCtrl.InsertColumn(0, GetResString(IDS_QL_USERNAME), LVCFMT_LEFT, 100, -1);
	pmyListCtrl.InsertColumn(1, GetResString(IDS_DL_FILENAME), LVCFMT_LEFT, 150, -1);
	pmyListCtrl.InsertColumn(2, GetResString(IDS_RATING), LVCFMT_LEFT, 80, 1);
	pmyListCtrl.InsertColumn(3, GetResString(IDS_COMMENT), LVCFMT_LEFT, 315, 1);

	Localize();
	CompleteList();

	return TRUE;
}

void CCommentDialogLst::Localize(void)
{
	static const int s_aiResTbl[][2] =
	{
		{ IDC_CMT_OK, IDS_CW_CLOSE },
		{ IDC_CMT_REF, IDS_CMT_REFRESH }
	};
	CString	strBuff;

	for (unsigned ui = 0; ui < ARRSIZE(s_aiResTbl); ui++)
		SetDlgItemText(s_aiResTbl[ui][0], GetResString(static_cast<UINT>(s_aiResTbl[ui][1])));

	strBuff.Format(_T("%s (%s)"), GetResString(IDS_CMT_READALL), m_file->GetFileName());
	SetWindowText(strBuff);
}

void CCommentDialogLst::CompleteList()
{
	POSITION	pos;
	ClientList	clientListCopy;
	int			iCount = 0;
	const TCHAR	*pcTmp;

	pmyListCtrl.DeleteAllItems();

	m_file->GetCopySourceLists(SLM_ALL, &clientListCopy);
	for (ClientList::const_iterator cIt = clientListCopy.begin(); cIt != clientListCopy.end(); cIt++)
	{
		CUpDownClient	*pClient = *cIt;

		if ((pClient->GetFileRating() != PF_RATING_NONE) || !pClient->IsFileCommentEmpty())
		{
			pmyListCtrl.InsertItem(LVIF_TEXT | LVIF_PARAM, iCount, pClient->GetUserName(), 0, 0, 0, reinterpret_cast<LPARAM>(pClient));
			pmyListCtrl.SetItemText(iCount, 1, pClient->GetClientFilename());
			pmyListCtrl.SetItemText(iCount, 2, GetRatingString(pClient->GetFileRating()));
			pmyListCtrl.SetItemText(iCount, 3, pClient->GetFileComment());
			iCount++;
		}
	}

	CString				strTmp = m_file->GetFileComment();
	EnumPartFileRating	eRated = m_file->GetFileRating();

	if (!strTmp.IsEmpty() || (eRated != PF_RATING_NONE))
	{
		pmyListCtrl.InsertItem(iCount, g_App.m_pPrefs->GetUserNick());
		pmyListCtrl.SetItemText(iCount, 1, m_file->GetFileName());
		pmyListCtrl.SetItemText(iCount, 2, GetRatingString(eRated));
		pmyListCtrl.SetItemText(iCount, 3, strTmp);
		iCount++;
	}

	CPastCommentList	   &pclist = m_file->GetPastCommentList();

	for (pos = pclist.GetHeadPosition(); pos != NULL;)
	{
		CPastComment &pc = pclist.GetNext(pos);

		pmyListCtrl.InsertItem(LVIF_TEXT | LVIF_STATE, iCount, pc.GetClientName(), LVIS_CUT, LVIS_CUT, 0, NULL);
		pmyListCtrl.SetItemText(iCount, 1, pc.GetFileName());
		pmyListCtrl.SetItemText(iCount, 2, GetRatingString(pc.GetRating()));
		pmyListCtrl.SetItemText(iCount, 3, pc.GetComment());
		iCount++;
	}

	pcTmp = _T("");
	if (iCount == 0)
	{
		strTmp.Format(_T("(%s)"), GetResString(IDS_CMT_NONE));
		pcTmp = strTmp.GetString();
	}
	SetDlgItemText(IDC_CMSTATUS, pcTmp);
	m_file->UpdateFileRatingCommentAvail();
}

void CCommentDialogLst::OnDestroy()
{
	CResizableDialog::OnDestroy();
}

void CCommentDialogLst::OnNMRclickList(NMHDR *pNMHDR, LRESULT *pResult)
{
	NOPRM(pNMHDR);
	if ((pmyListCtrl.GetSelectionMark() != (-1)) && (pmyListCtrl.GetSelectedCount() == 1))
	{
		CTitleMenu			menuCmt;
		CTitleMenu			menuClient;
		POINT				point;
		POSITION			posSelClient = pmyListCtrl.GetFirstSelectedItemPosition();
		CUpDownClient		*pClient = reinterpret_cast<CUpDownClient*>(pmyListCtrl.GetItemData(pmyListCtrl.GetNextSelectedItem(posSelClient)));
		UINT				dwMenuFlags = MF_STRING | MF_GRAYED;

		::GetCursorPos(&point);
		menuClient.CreateMenu();

		if (pClient != NULL)
		{
			UINT_PTR			dwRes = MP_ADDFRIEND;
			UINT				dwResStrId = IDS_ADDFRIEND;

			dwMenuFlags = MF_STRING | MF_ENABLED;
			if (pClient->IsFriend())
			{
				dwRes = MP_REMOVEFRIEND;
				dwResStrId = IDS_REMOVEFRIEND;
			}
			menuClient.AddMenuTitle(GetResString(IDS_CLIENT));
			menuClient.AppendMenu(dwMenuFlags, MP_DETAIL, GetResString(IDS_SHOWDETAILS));
			menuClient.AppendMenu(dwMenuFlags, dwRes, GetResString(dwResStrId));
			menuClient.AppendMenu(dwMenuFlags, MP_MESSAGE, GetResString(IDS_SEND_MSG));
			menuClient.AppendMenu( dwMenuFlags | ((pClient->GetViewSharedFilesSupport()) ? MF_ENABLED : MF_GRAYED),
				MP_SHOWLIST, GetResString(IDS_VIEWFILES) );
		}

		menuCmt.CreatePopupMenu();
		menuCmt.AddMenuTitle(GetResString(IDS_COMMENTS));
		menuCmt.AppendMenu(MF_STRING, MP_COPYSELECTED, GetResString(IDS_COPY));
		menuCmt.AppendMenu(MF_SEPARATOR);
		menuCmt.AppendMenu(dwMenuFlags|MF_POPUP,(UINT_PTR)menuClient.m_hMenu, GetResString(IDS_CLIENT));

		menuCmt.TrackPopupMenuEx(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this, NULL);
	}
	*pResult = 0;
}

BOOL CCommentDialogLst::OnCommand(WPARAM wParam,LPARAM lParam )
{
	POSITION			posSelClient;

	if ( (pmyListCtrl.GetNextItem(-1, LVIS_SELECTED | LVIS_FOCUSED) != -1) &&
		((posSelClient = pmyListCtrl.GetFirstSelectedItemPosition()) != NULL) )
	{
		int				iIdx = pmyListCtrl.GetNextSelectedItem(posSelClient);
		CUpDownClient	*pClient = reinterpret_cast<CUpDownClient*>(pmyListCtrl.GetItemData(iIdx));

		switch (wParam)
		{
			case MP_COPYSELECTED:
			{
				g_App.CopyTextToClipboard(pmyListCtrl.GetItemText(iIdx, 3));
				return true;
			}
			case MP_SHOWLIST:
			{
				pClient->RequestSharedFileList();
				return true;
			}
			case MP_MESSAGE:
			{
				g_App.m_pMDlg->m_wndChat.StartSession(pClient);
				return true;
			}
			case MP_ADDFRIEND:
			{
				g_App.m_pFriendList->AddFriend(pClient);
				return true;
			}
			case MP_REMOVEFRIEND:
			{
				g_App.m_pFriendList->RemoveFriend(pClient);
				return true;
			}
			case MP_DETAIL:
			{
				CClientDetails dialog(IDS_CD_TITLE, pClient, this, 0);
				dialog.DoModal();
				return true;
			}
		}
	}
	return CDialog::OnCommand(wParam, lParam);
}
@


1.38
log
@Reduced H-file dependency.
@
text
@d113 1
d124 1
a124 1
			pmyListCtrl.InsertItem(LVIF_TEXT|LVIF_PARAM, iCount, pClient->GetUserName(), 0, 0, 0, reinterpret_cast<LPARAM>(pClient));
d146 1
a146 1
	for (pos = pclist.GetHeadPosition(); pos != NULL; )
d150 1
a150 2
		pmyListCtrl.InsertItem(iCount, pc.GetClientName());
		pmyListCtrl.SetItemState(iCount, LVIS_CUT, LVIS_CUT);
d157 1
d161 1
d163 1
a163 5
	else
	{
		strTmp.Empty();
	}
	SetDlgItemText(IDC_CMSTATUS, strTmp);
@


1.37
log
@Optimized setting title for client details dialog.
@
text
@d20 1
@


1.36
log
@Suppressed level 4 warnings; Formatting.
@
text
@d257 1
a257 1
				CClientDetails dialog(GetResString(IDS_CD_TITLE), pClient, this, 0);
@


1.35
log
@Reduced H-file dependency.
@
text
@d100 1
a100 1
	for (unsigned ui = 0; ui < ELEMENT_COUNT(s_aiResTbl); ui++)
d175 1
@


1.34
log
@Renamed IDS_QL_RATING into IDS_RATING.
@
text
@d1 17
d22 2
a23 1
#include ".\Details\ClientDetails.h"
@


1.33
log
@renamed g_pPrefs->m_pPrefs (f... paste & copy :( )
@
text
@d64 1
a64 1
	pmyListCtrl.InsertColumn(2, GetResString(IDS_QL_RATING), LVCFMT_LEFT, 80, 1);
@


1.32
log
@renamed 3 variables
@
text
@d117 1
a117 1
		pmyListCtrl.InsertItem(iCount, g_App.g_pPrefs->GetUserNick());
@


1.31
log
@Faster processing of file comments.
@
text
@d117 1
a117 1
		pmyListCtrl.InsertItem(iCount, g_eMuleApp.m_pGlobPrefs->GetUserNick());
d213 1
a213 1
				g_eMuleApp.CopyTextToClipboard(pmyListCtrl.GetItemText(iIdx, 3));
d223 1
a223 1
				g_eMuleApp.m_pdlgEmule->m_wndChat.StartSession(pClient);
d228 1
a228 1
				g_eMuleApp.m_pFriendList->AddFriend(pClient);
d233 1
a233 1
				g_eMuleApp.m_pFriendList->RemoveFriend(pClient);
@


1.30
log
@Corrections for SSDQ integration.
@
text
@d102 1
a102 1
		if ((pClient->GetFileRating() != PF_RATING_NONE) || (pClient->GetFileComment().GetLength() > 0))
@


1.29
log
@Simplified transition to eklmn's SSDQ.
@
text
@d97 1
a97 1
	m_file->GetCopySourceList(DS_DOWNLOADING, DS_LAST_QUEUED_STATE, &clientListCopy);
@


1.28
log
@Inform a remote client when 'See my share = No one' to save traffic (original).
@
text
@d91 4
a94 4
	POSITION			pos;
	CUpDownClient		*pClient;
	int					iCount = 0;
    
d97 2
a98 1
	for (int sl = 0; sl < SOURCESSLOTS; sl++)
d100 3
a102 1
		if (!m_file->m_srcLists[sl].IsEmpty())
d104 5
a108 13
			for (pos = m_file->m_srcLists[sl].GetHeadPosition(); pos != NULL; )
			{
				pClient = m_file->m_srcLists[sl].GetNext(pos);

				if (pClient->GetFileComment().GetLength() > 0 || pClient->GetFileRating() != PF_RATING_NONE)
				{
					pmyListCtrl.InsertItem(LVIF_TEXT|LVIF_PARAM, iCount, pClient->GetUserName(), 0, 0, 0, reinterpret_cast<LPARAM>(pClient));
					pmyListCtrl.SetItemText(iCount, 1, pClient->GetClientFilename());
					pmyListCtrl.SetItemText(iCount, 2, GetRatingString(pClient->GetFileRating()));
					pmyListCtrl.SetItemText(iCount, 3, pClient->GetFileComment());
					iCount++;
				}
			}
@


1.27
log
@Fixed comment copy issue created by changes in 1.24.
@
text
@d189 2
a190 1
			menuClient.AppendMenu(dwMenuFlags, MP_SHOWLIST, GetResString(IDS_VIEWFILES));
@


1.26
log
@Minor correction: show Client submenu in submenu style when it is disabled.
@
text
@d205 1
a205 1
	POSITION			posSelClient = pmyListCtrl.GetFirstSelectedItemPosition();
d207 2
a208 1
	if (pmyListCtrl.GetNextItem(-1, LVIS_SELECTED | LVIS_FOCUSED) != -1 && posSelClient != NULL)
d210 2
a211 1
		CUpDownClient		*pClient = reinterpret_cast<CUpDownClient*>(pmyListCtrl.GetItemData(pmyListCtrl.GetNextSelectedItem(posSelClient)));
d217 1
a217 1
				g_eMuleApp.CopyTextToClipboard(pmyListCtrl.GetItemText(pmyListCtrl.GetNextSelectedItem(posSelClient), 3));
@


1.25
log
@Fixed another multi-monitor issue with the tooltips;
Better way to create Client menu in Comments dialog (Thanks again Aw3)
@
text
@d172 1
a184 1
			menuClient.CreateMenu();
@


1.24
log
@Added Client context menu to the Comments dialog
@
text
@d169 1
a169 3
		UINT				dwMenuFlags = MF_STRING | ((pClient != NULL) ? MF_ENABLED : MF_GRAYED);
		UINT_PTR			dwRes = MP_ADDFRIEND;
		UINT				dwResStrId = IDS_ADDFRIEND;
d171 3
a173 1
		if (pClient != NULL && pClient->IsFriend())
d175 15
a189 2
			dwRes = MP_REMOVEFRIEND;
			dwResStrId = IDS_REMOVEFRIEND;
a191 9
		::GetCursorPos(&point);

		menuClient.CreateMenu();
		menuClient.AddMenuTitle(GetResString(IDS_CLIENT));
		menuClient.AppendMenu(dwMenuFlags, MP_DETAIL, GetResString(IDS_SHOWDETAILS));
		menuClient.AppendMenu(dwMenuFlags, dwRes, GetResString(dwResStrId));
		menuClient.AppendMenu(dwMenuFlags, MP_MESSAGE, GetResString(IDS_SEND_MSG));
		menuClient.AppendMenu(dwMenuFlags, MP_SHOWLIST, GetResString(IDS_VIEWFILES));

d196 1
a196 1
		menuCmt.AppendMenu(MF_STRING|MF_POPUP,(UINT_PTR)menuClient.m_hMenu, GetResString(IDS_CLIENT));
@


1.23
log
@minor fix/changes
@
text
@a0 1

d5 1
d92 1
a92 1
	CUpDownClient	   *pClient;
d94 1
a94 1

d107 1
a107 1
					pmyListCtrl.InsertItem(iCount, pClient->GetUserName());
d164 14
a177 2
		CTitleMenu	menuCmt;
		POINT		point;
d180 8
d189 5
a193 2
		menuCmt.AddMenuTitle(GetResString(IDS_COMMENT));
		menuCmt.AppendMenu(MF_STRING, MP_MESSAGE, GetResString(IDS_COPY));
a194 1
//	Menu objects are destroyed in their destructor
d201 3
a203 1
	if (pmyListCtrl.GetNextItem(-1, LVIS_SELECTED | LVIS_FOCUSED) != -1 && wParam == MP_MESSAGE)
d205 1
a205 1
		POSITION pos = pmyListCtrl.GetFirstSelectedItemPosition();
d207 34
a240 2
		g_eMuleApp.CopyTextToClipboard( pmyListCtrl.GetItemText(pmyListCtrl.GetNextSelectedItem(pos), 3) );
		return true;
@


1.22
log
@Cleaned up resources
@
text
@a37 1
	ON_WM_DRAWITEM()
a65 1
	pmyListCtrl.SetExtendedStyle(LVS_EX_FULLROWSELECT);
d135 2
a136 1
		pmyListCtrl.InsertItem(LVIF_TEXT | LVIF_PARAM, iCount, pc.GetClientName(), 0, 0, 0, 1);
a159 51
void CCommentDialogLst::OnDrawItem(int nIDCtl, LPDRAWITEMSTRUCT lpDrawItemStruct)
{
	if (nIDCtl != IDC_LST)
		return;

	UINT nItemID= lpDrawItemStruct->itemID;
	if (nItemID == (UINT)-1)
		return;

	bool bPastComment= (pmyListCtrl.GetItemData(nItemID) != 0);

	CDC dc;
	dc.Attach(lpDrawItemStruct->hDC);
	CRect rc(lpDrawItemStruct->rcItem);

	dc.SetBkMode(TRANSPARENT);

	int	iTextColor, iFillColor;

	if ( (lpDrawItemStruct->itemAction | ODA_SELECT) && (lpDrawItemStruct->itemState & ODS_SELECTED) )
	{
		iFillColor = COLOR_HIGHLIGHT;
		iTextColor = COLOR_HIGHLIGHTTEXT;
	}
	else
	{
		iFillColor = COLOR_WINDOW;
		iTextColor = COLOR_WINDOWTEXT;
	}
	dc.FillSolidRect(rc, ::GetSysColor(iFillColor));
	dc.SetTextColor(::GetSysColor((bPastComment) ? COLOR_GRAYTEXT : iTextColor));

	rc.right= rc.left + pmyListCtrl.GetColumnWidth(0) - 2;
	rc.left+= 2;
	dc.DrawText(pmyListCtrl.GetItemText(nItemID, 0), rc, DRAWTEXTFMT);

	rc.left= rc.right + 4;
	rc.right+= pmyListCtrl.GetColumnWidth(1);
	dc.DrawText(pmyListCtrl.GetItemText(nItemID, 1), rc, DRAWTEXTFMT);

	rc.left= rc.right + 4;
	rc.right+= pmyListCtrl.GetColumnWidth(2);
	dc.DrawText(pmyListCtrl.GetItemText(nItemID, 2), rc, DRAWTEXTFMT);

	rc.left= rc.right + 4;
	rc.right+= pmyListCtrl.GetColumnWidth(3);
	dc.DrawText(pmyListCtrl.GetItemText(nItemID, 3), rc, DRAWTEXTFMT);

	dc.Detach();
}

d169 1
a169 1
		//menuCmt.AddMenuTitle(GetResString(IDS_COMMENT));
d179 1
a179 1
	if (pmyListCtrl.GetNextItem(-1, LVIS_SELECTED | LVIS_FOCUSED) != -1)
d181 4
a184 7
		switch (wParam)
		{
		case MP_MESSAGE:
			POSITION pos = pmyListCtrl.GetFirstSelectedItemPosition();
			g_eMuleApp.CopyTextToClipboard( pmyListCtrl.GetItemText(pmyListCtrl.GetNextSelectedItem(pos), 3) );
			return true;
		}
@


1.21
log
@Improved string processing and other optimization;
Whitespace corrections; Slightly faster output mode.
@
text
@d35 2
a36 2
	ON_BN_CLICKED(IDCOK, OnBnClickedApply)
	ON_BN_CLICKED(IDCREF, OnBnClickedRefresh)
d59 2
a60 2
	AddAnchor(IDCOK,BOTTOM_RIGHT);
	AddAnchor(IDCREF,BOTTOM_RIGHT);
d79 2
a80 2
		{ IDCOK, IDS_CW_CLOSE },
		{ IDCREF, IDS_CMT_REFRESH }
@


1.20
log
@Corrected username column title (':' is removed); minor improvements.
@
text
@d14 1
a14 1
#define DRAWTEXTFMT		(DT_LEFT | DT_BOTTOM | DT_SINGLELINE | DT_END_ELLIPSIS | DT_NOPREFIX)
d19 1
a19 1
   : CResizableDialog(CCommentDialogLst::IDD, 0)
d21 1
a21 1
   m_file = file;
d30 2
a31 2
   CDialog::DoDataExchange(pDX);
   DDX_Control(pDX, IDC_LST, pmyListCtrl);
d35 5
a39 5
   ON_BN_CLICKED(IDCOK, OnBnClickedApply)
   ON_BN_CLICKED(IDCREF, OnBnClickedRefresh)
   ON_WM_DESTROY()
   ON_WM_DRAWITEM()
   ON_NOTIFY(NM_RCLICK, IDC_LST, OnNMRclickList)
d46 1
a46 1
   CDialog::OnOK();
d51 1
a51 1
   CompleteList();
d56 1
a56 1
   CResizableDialog::OnInitDialog();
d58 10
a67 1
   //SetIcon(g_eMuleApp.m_pdlgEmule->m_hiconSourceTray,FALSE);
d69 2
a70 4
   AddAnchor(IDC_LST,TOP_LEFT,BOTTOM_RIGHT);
   AddAnchor(IDCOK,BOTTOM_RIGHT);
   AddAnchor(IDCREF,BOTTOM_RIGHT);
   AddAnchor(IDC_CMSTATUS,BOTTOM_LEFT);
d72 1
a72 10
   pmyListCtrl.InsertColumn(0, GetResString(IDS_QL_USERNAME), LVCFMT_LEFT, 100, -1);
   pmyListCtrl.InsertColumn(1, GetResString(IDS_DL_FILENAME), LVCFMT_LEFT, 150, -1);
   pmyListCtrl.InsertColumn(2, GetResString(IDS_QL_RATING), LVCFMT_LEFT, 80, 1);
   pmyListCtrl.InsertColumn(3, GetResString(IDS_COMMENT), LVCFMT_LEFT, 315, 1);
   pmyListCtrl.SetExtendedStyle(LVS_EX_FULLROWSELECT);

   Localize();
   CompleteList();

   return TRUE;
d77 12
a88 3
   SetDlgItemText(IDCOK, GetResString(IDS_CW_CLOSE));
   SetDlgItemText(IDCREF, GetResString(IDS_CMT_REFRESH));
   SetWindowText(GetResString(IDS_CMT_READALL)+_T(" (")+ m_file->GetFileName() +_T(")"));
d91 1
a91 1
void CCommentDialogLst::CompleteList ()
d114 1
a114 1
			  	}
d119 2
a120 2
   	CString	comment = m_file->GetFileComment();
	CString	rated = GetRatingString(m_file->GetFileRating());
d122 1
a122 1
	if (comment != _T("") || rated != GetRatingString(PF_RATING_NONE))
d126 2
a127 2
		pmyListCtrl.SetItemText(iCount, 2, rated);
		pmyListCtrl.SetItemText(iCount, 3, comment);
a143 2
	CString	info = _T("");

d146 1
a146 1
		info.Format(_T("(%s)"), GetResString(IDS_CMT_NONE));
d148 5
a152 1
	SetDlgItemText(IDC_CMSTATUS, info);
a169 4
	CString strUserName= pmyListCtrl.GetItemText(nItemID, 0);
	CString strFileName= pmyListCtrl.GetItemText(nItemID, 1);
	CString strRate= pmyListCtrl.GetItemText(nItemID, 2);
	CString strComment= pmyListCtrl.GetItemText(nItemID, 3);
d178 2
d182 2
a183 2
		dc.FillSolidRect(rc, GetSysColor(COLOR_HIGHLIGHT));
		dc.SetTextColor(bPastComment ? GetSysColor(COLOR_GRAYTEXT) : GetSysColor(COLOR_HIGHLIGHTTEXT));
d187 2
a188 2
		dc.FillSolidRect(rc, GetSysColor(COLOR_WINDOW));
		dc.SetTextColor(bPastComment ? GetSysColor(COLOR_GRAYTEXT) : GetSysColor(COLOR_WINDOWTEXT));
d190 2
d195 1
a195 1
	dc.DrawText(strUserName, rc, DRAWTEXTFMT);
d199 1
a199 1
	dc.DrawText(strFileName, rc, DRAWTEXTFMT);
d203 1
a203 1
	dc.DrawText(strRate, rc, DRAWTEXTFMT);
d207 1
a207 1
	dc.DrawText(strComment, rc, DRAWTEXTFMT);
@


1.19
log
@replaced TrackPopupMenu over TrackPopupMenuEx
@
text
@d65 1
a65 1
   pmyListCtrl.InsertColumn(0, GetResString(IDS_CD_UNAME), LVCFMT_LEFT, 100, -1);
d79 2
a80 2
   GetDlgItem(IDCOK)->SetWindowText(GetResString(IDS_CW_CLOSE));
   GetDlgItem(IDCREF)->SetWindowText(GetResString(IDS_CMT_REFRESH));
d143 1
a143 1
	GetDlgItem(IDC_CMSTATUS)->SetWindowText(info);
@


1.18
log
@Improved string processing
@
text
@d214 1
a214 1
		menuCmt.TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this);
@


1.17
log
@list processing optimization
@
text
@d141 1
a141 1
		info = _T("(") + GetResString(IDS_CMT_NONE) + _T(")");
@


1.16
log
@Improved context menu creation
@
text
@d2 1
a2 1
#include "stdafx.h" 
d17 14
a30 14
IMPLEMENT_DYNAMIC(CCommentDialogLst, CDialog) 
CCommentDialogLst::CCommentDialogLst(CPartFile* file) 
   : CResizableDialog(CCommentDialogLst::IDD, 0) 
{ 
   m_file = file; 
} 

CCommentDialogLst::~CCommentDialogLst() 
{ 
} 

void CCommentDialogLst::DoDataExchange(CDataExchange* pDX) 
{ 
   CDialog::DoDataExchange(pDX); 
d32 1
a32 1
} 
d34 3
a36 3
BEGIN_MESSAGE_MAP(CCommentDialogLst, CResizableDialog) 
   ON_BN_CLICKED(IDCOK, OnBnClickedApply) 
   ON_BN_CLICKED(IDCREF, OnBnClickedRefresh) 
d40 1
a40 1
END_MESSAGE_MAP() 
d44 4
a47 4
void CCommentDialogLst::OnBnClickedApply() 
{ 
   CDialog::OnOK(); 
} 
d49 4
a52 4
void CCommentDialogLst::OnBnClickedRefresh() 
{ 
   CompleteList(); 
} 
d55 2
a56 2
{ 
   CResizableDialog::OnInitDialog(); 
d65 3
a67 3
   pmyListCtrl.InsertColumn(0, GetResString(IDS_CD_UNAME), LVCFMT_LEFT, 100, -1); 
   pmyListCtrl.InsertColumn(1, GetResString(IDS_DL_FILENAME), LVCFMT_LEFT, 150, -1); 
   pmyListCtrl.InsertColumn(2, GetResString(IDS_QL_RATING), LVCFMT_LEFT, 80, 1); 
d71 2
a72 2
   Localize(); 
   CompleteList(); 
d74 2
a75 2
   return TRUE; 
} 
d78 5
a82 5
{ 
   GetDlgItem(IDCOK)->SetWindowText(GetResString(IDS_CW_CLOSE)); 
   GetDlgItem(IDCREF)->SetWindowText(GetResString(IDS_CMT_REFRESH)); 
   SetWindowText(GetResString(IDS_CMT_READALL)+_T(" (")+ m_file->GetFileName() +_T(")")); 
} 
d85 5
a89 5
{ 
	POSITION pos1,pos2; 
	CUpDownClient* cur_src; 
	int count=0; 
	
d91 4
a94 8
	
	for (int sl=0;sl<SOURCESSLOTS;sl++) if (!m_file->m_srcLists[sl].IsEmpty())
	for (pos1 = m_file->m_srcLists[sl].GetHeadPosition(); (pos2 = pos1) != NULL;) 
	{ 
		m_file->m_srcLists[sl].GetNext(pos1); 
		cur_src = m_file->m_srcLists[sl].GetAt(pos2); 
		
		if (cur_src->GetFileComment().GetLength()>0 || cur_src->GetFileRating() != PF_RATING_NONE)
d96 47
a142 32
			pmyListCtrl.InsertItem(count, cur_src->GetUserName()); 
			pmyListCtrl.SetItemText(count, 1, cur_src->GetClientFilename()); 
			pmyListCtrl.SetItemText(count, 2, GetRatingString(cur_src->GetFileRating())); 
			pmyListCtrl.SetItemText(count, 3, cur_src->GetFileComment()); 
			count++;
	  	} 
	} 

   	CString comment = m_file->GetFileComment(); 
	CString rated = GetRatingString(m_file->GetFileRating());
	if ((comment != "")||(rated!=GetRatingString(PF_RATING_NONE)))
	{ 
		pmyListCtrl.InsertItem(count, g_eMuleApp.m_pGlobPrefs->GetUserNick()); 
		pmyListCtrl.SetItemText(count, 1, m_file->GetFileName()); 
		pmyListCtrl.SetItemText(count, 2, rated); 
		pmyListCtrl.SetItemText(count, 3, comment); 
		count++;
	}
	
	CPastCommentList &pclist= m_file->GetPastCommentList();
	for (pos1= pclist.GetHeadPosition(); pos1 != 0;)
	{
		CPastComment &pc= pclist.GetNext(pos1);
		pmyListCtrl.InsertItem(LVIF_TEXT | LVIF_PARAM, count, pc.GetClientName(), 0, 0, 0, 1); 
		pmyListCtrl.SetItemText(count, 1, pc.GetFileName()); 
		pmyListCtrl.SetItemText(count, 2, GetRatingString(pc.GetRating()));
		pmyListCtrl.SetItemText(count, 3, pc.GetComment()); 
		count++;
	}
	
	CString info=_T("");
	if (count==0) info=_T("(")+GetResString(IDS_CMT_NONE)+_T(")");
d152 1
a152 1
void CCommentDialogLst::OnDrawItem(int nIDCtl, LPDRAWITEMSTRUCT lpDrawItemStruct)	
d227 1
a227 1
			POSITION pos = pmyListCtrl.GetFirstSelectedItemPosition(); 
@


1.15
log
@minor changes
@
text
@d196 3
a198 1
		POINT point;
d200 5
a204 6
		CTitleMenu m_CmtMenu;
		m_CmtMenu.CreatePopupMenu();
		//m_CmtMenu.AddMenuTitle(GetResString(IDS_COMMENT));
		m_CmtMenu.AppendMenu(MF_STRING, MP_MESSAGE, GetResString(IDS_COPY));
		m_CmtMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON, point.x, point.y, this);
		VERIFY( m_CmtMenu.DestroyMenu() );
@


1.14
log
@minor changes
@
text
@d108 2
a109 4
	CString comment;
	CString rated; 
   	comment = m_file->GetFileComment(); 
	rated = GetRatingString(m_file->GetFileRating());
d162 1
a162 2
	BOOL	bCtrlFocused = ((lpDrawItemStruct->itemAction | ODA_SELECT) && (lpDrawItemStruct->itemState & ODS_SELECTED ));
	if (bCtrlFocused)
d198 6
a203 5
		CTitleMenu popupMenu;
		popupMenu.CreatePopupMenu();
		popupMenu.AppendMenu(MF_STRING, MP_MESSAGE, GetResString(IDS_COPY));
		popupMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON, point.x, point.y, this);
		VERIFY( popupMenu.DestroyMenu() );
d210 1
a210 2
	int iSel = pmyListCtrl.GetNextItem(-1, LVIS_SELECTED | LVIS_FOCUSED);
	if (iSel != -1)
d216 1
a216 3
			int itemPosition = pmyListCtrl.GetNextSelectedItem(pos); 
			CString cmt = pmyListCtrl.GetItemText(itemPosition,3);
			g_eMuleApp.CopyTextToClipboard( cmt );
@


1.13
log
@minor fix + added an option to copy comments to clipboard
@
text
@d54 2
a55 1
BOOL CCommentDialogLst::OnInitDialog(){ 
d77 2
a78 1
void CCommentDialogLst::Localize(void){ 
d167 2
a168 2
		dc.FillSolidRect(rc, ::GetSysColor(COLOR_HIGHLIGHT));
		dc.SetTextColor(bPastComment ? ::GetSysColor(COLOR_GRAYTEXT) : ::GetSysColor(COLOR_HIGHLIGHTTEXT));
d172 2
a173 2
		dc.FillSolidRect(rc, ::GetSysColor(COLOR_WINDOW));
		dc.SetTextColor(bPastComment ? ::GetSysColor(COLOR_GRAYTEXT) : ::GetSysColor(COLOR_WINDOWTEXT));
d197 10
a206 12
	UINT flag = MF_STRING;
	if ((pmyListCtrl.GetSelectionMark() == (-1)) || (pmyListCtrl.GetSelectedCount() == 0))
		flag = MF_GRAYED;

	POINT point;
	::GetCursorPos(&point);
	CTitleMenu popupMenu;
	popupMenu.CreatePopupMenu();
	popupMenu.AppendMenu(MF_STRING | flag,MP_MESSAGE, GetResString(IDS_COPY));
	popupMenu.TrackPopupMenu(TPM_LEFTALIGN |TPM_RIGHTBUTTON, point.x, point.y, this);
	VERIFY( popupMenu.DestroyMenu() );

@


1.12
log
@Formatting, comments, and name changes.
@
text
@d5 1
a5 1
#include "PastComment.h"		// #zegzav:pastcomment
d14 1
a14 1
#define DRAWTEXTFMT		(DT_LEFT | DT_BOTTOM | DT_SINGLELINE | DT_END_ELLIPSIS | DT_NOPREFIX)	// #zegzav:pastcomment
d37 3
a39 2
   ON_WM_DESTROY()	// eklmn: bugfix(00): resource cleanup due to CResizableDialog
   ON_WM_DRAWITEM()	// #zegzav:pastcomment
d67 2
a68 1
   pmyListCtrl.InsertColumn(3, GetResString(IDS_COMMENT), LVCFMT_LEFT, 315, 1);		//netwolf 07.05.03 (was 250)
a105 2
	// [Lord KiRon/DonGato]
	// Adds support to show comments entered by the user himself
a117 1
	// [/Lord KiRon]
a118 1
	// #zegzav:pastcomment (BEGIN)
a128 1
	// #zegzav:pastcomment (END)
d135 1
a135 1
// v- eklmn: bugfix(00): resource cleanup due to CResizableDialog
a139 1
// ^- eklmn: bugfix(00): resource cleanup due to CResizableDialog
a140 1
// #zegzav:pastcomment (BEGIN)
a159 2
	dc.FillSolidRect(rc, ::GetSysColor(COLOR_WINDOW));
	dc.SetTextColor(bPastComment ? ::GetSysColor(COLOR_GRAYTEXT) : ::GetSysColor(COLOR_WINDOWTEXT));
d162 12
a191 1
// #zegzav:pastcomment (END)
d193 34
@


1.11
log
@Formatting, comments, and name changes.
@
text
@d94 1
a94 1
		if (cur_src->GetFileComment().GetLength()>0 || cur_src->GetFileRate()>0)
d98 1
a98 1
			pmyListCtrl.SetItemText(count, 2, GetRateString(cur_src->GetFileRate())); 
d109 2
a110 2
	rated = GetRateString(m_file->GetFileRate());
	if ((comment != "")||(rated!=GetRateString(0)))
d127 1
a127 1
		pmyListCtrl.SetItemText(count, 2, GetRateString(pc.GetRate())); 
@


1.10
log
@More name changes, reinstated CMuleCtrlItem class, moved srcsarevisible from CPartFile to CMuleCtrlItem (where it belongs), added "Show Full Status Icons" and "Show Gray Paused" features with corresponding preferences, modified "SmartOpen" code to make it sticky and to make it work with sources with changing states.
@
text
@d88 2
a89 2
	for (int sl=0;sl<SOURCESSLOTS;sl++) if (!m_file->srclists[sl].IsEmpty())
	for (pos1 = m_file->srclists[sl].GetHeadPosition(); (pos2 = pos1) != NULL;) 
d91 2
a92 2
		m_file->srclists[sl].GetNext(pos1); 
		cur_src = m_file->srclists[sl].GetAt(pos2); 
@


1.9
log
@added past comments
@
text
@d56 1
a56 1
   //SetIcon(theApp.emuledlg->sourceTrayIcon,FALSE);
d112 1
a112 1
		pmyListCtrl.InsertItem(count, theApp.glob_prefs->GetUserNick()); 
@


1.8
log
@unicode cleanup
@
text
@d5 1
d14 3
d38 1
d103 1
a103 1
	
d120 13
d143 46
a188 1
// ^- eklmn: bugfix(00): resource cleanup due to CResizableDialog@


1.7
log
@Eklmn and BavarianSnail changes. see changelog+
@
text
@d72 1
a72 1
   SetWindowText(GetResString(IDS_CMT_READALL)+" ("+ m_file->GetFileName() +")"); 
d115 2
a116 2
	CString info="";
	if (count==0) info="("+GetResString(IDS_CMT_NONE)+")";
@


1.6
log
@*** empty log message ***
@
text
@d33 1
d119 7
a125 1
}@


1.5
log
@Updated Comment List.
@
text
@d60 1
a60 1
   pmyListCtrl.InsertColumn(3, GetResString(IDS_COMMENT), LVCFMT_LEFT, 250, 1); 
@


1.5.4.1
log
@27a partial merge
@
text
@a32 1
   ON_NOTIFY(NM_DBLCLK, IDC_LST, OnNMDblclkLst)
d90 1
a90 2
//			pmyListCtrl.InsertItem(count, cur_src->GetUserName()); 
			pmyListCtrl.InsertItem(LVIF_TEXT|LVIF_PARAM,count,cur_src->GetUserName(),0,0,1,(LPARAM)cur_src);
d118 1
a118 11
}

void CCommentDialogLst::OnNMDblclkLst(NMHDR *pNMHDR, LRESULT *pResult)
{
	if (pmyListCtrl.GetSelectedCount()==0) return;

	CUpDownClient* client = (CUpDownClient*)pmyListCtrl.GetItemData(pmyListCtrl.GetSelectionMark());
	if (client) theApp.emuledlg->chatwnd.StartSession(client);
	theApp.emuledlg->SetActiveDialog(&theApp.emuledlg->chatwnd);
	*pResult = 0;
}
@


1.4
log
@Added instrumentation for debugging memory leaks :
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

To all .cpp files (I hope I didn't miss any one)
@
text
@d15 1
a15 1
   : CDialog(CCommentDialogLst::IDD, 0) 
d27 1
d30 1
a30 1
BEGIN_MESSAGE_MAP(CCommentDialogLst, CDialog) 
d48 14
a61 1
   CDialog::OnInitDialog(); 
d63 1
d71 1
a71 10

   SetWindowText(GetResString(IDS_CMT_READALL)); 
    
   CRect rect; 

   GetDlgItem(IDC_LST)->GetWindowRect(rect); 
   ::MapWindowPoints(NULL, m_hWnd, (LPPOINT)&rect, 2); 
   lstbox.CreateEx(WS_EX_STATICEDGE,0,"LSTWnd",WS_VISIBLE | WS_CHILD | HTC_WORDWRAP |HTC_AUTO_SCROLL_BARS | HTC_UNDERLINE_HOVER,rect.left,rect.top,rect.Width(),rect.Height(),m_hWnd,0); 
    
   CompleteList(); 
d74 20
a93 41
void CCommentDialogLst::CompleteList () { 
   POSITION pos1,pos2; 
   CUpDownClient* cur_src; 
   CString text; 
    
   int count; 
   count=0; 
   CString comment; 
   CString rated; 
   for (int sl=0;sl<SOURCESSLOTS;sl++) if (!m_file->srclists[sl].IsEmpty())
   for (pos1 = m_file->srclists[sl].GetHeadPosition(); (pos2 = pos1) != NULL;) { 
      m_file->srclists[sl].GetNext(pos1); 
      cur_src = m_file->srclists[sl].GetAt(pos2); 
      try{ 
         comment = cur_src->GetFileComment(); 
		 rated=GetRateString(cur_src->GetFileRate());
         if ((comment != "")||(rated!=GetRateString(0))) { 
            text += cur_src->GetUserName();
			text+=": "; 
			text+=" ("+GetResString(IDS_CMT_RATEQUEST)+": "+ rated +") ";
			if (comment != ""){
				text += comment; 
			}
			text+=CString("\n\n");
			count++;
		 }
	  } 
        catch (...){} 
   } 
   // [Lord KiRon]
   // Adds support to show comments entered by user himself
	comment =	m_file->GetFileComment(); 
	rated=GetRateString(m_file->GetFileRate());
	if ((comment != "")||(rated!=GetRateString(0))) { 
		text += theApp.glob_prefs->GetUserNick();
			text+=": "; 
			text+=" ("+GetResString(IDS_CMT_RATEQUEST)+": "+ rated +") ";
			if (comment != ""){
				text += comment; 
			}
			text+=CString("\n\n");
d95 17
a111 1
		 }
d113 5
a117 4
   if (count == 0) { 
      text += GetResString(IDS_CMT_NOCOMMENT) + CString("\n"); 
   } 
   lstbox.SetWindowText(CString(text)); 
@


1.4.2.1
log
@keeping in sync with the main cvs line
@
text
@d15 1
a15 1
   : CResizableDialog(CCommentDialogLst::IDD, 0) 
a26 1
   DDX_Control(pDX, IDC_LST, pmyListCtrl);
d29 1
a29 1
BEGIN_MESSAGE_MAP(CCommentDialogLst, CResizableDialog) 
d47 1
a47 14
   CResizableDialog::OnInitDialog(); 

   //SetIcon(theApp.emuledlg->sourceTrayIcon,FALSE);

   AddAnchor(IDC_LST,TOP_LEFT,BOTTOM_RIGHT);
   AddAnchor(IDCOK,BOTTOM_RIGHT);
   AddAnchor(IDCREF,BOTTOM_RIGHT);
   AddAnchor(IDC_CMSTATUS,BOTTOM_LEFT);

   pmyListCtrl.InsertColumn(0, GetResString(IDS_CD_UNAME), LVCFMT_LEFT, 100, -1); 
   pmyListCtrl.InsertColumn(1, GetResString(IDS_DL_FILENAME), LVCFMT_LEFT, 150, -1); 
   pmyListCtrl.InsertColumn(2, GetResString(IDS_QL_RATING), LVCFMT_LEFT, 80, 1); 
   pmyListCtrl.InsertColumn(3, GetResString(IDS_COMMENT), LVCFMT_LEFT, 250, 1); 

a48 1
   CompleteList(); 
d56 10
a65 1
   SetWindowText(GetResString(IDS_CMT_READALL)+" ("+ m_file->GetFileName() +")"); 
d68 41
a108 20
void CCommentDialogLst::CompleteList ()
{ 
	POSITION pos1,pos2; 
	CUpDownClient* cur_src; 
	int count=0; 
	
	pmyListCtrl.DeleteAllItems();
	
	for (int sl=0;sl<SOURCESSLOTS;sl++) if (!m_file->srclists[sl].IsEmpty())
	for (pos1 = m_file->srclists[sl].GetHeadPosition(); (pos2 = pos1) != NULL;) 
	{ 
		m_file->srclists[sl].GetNext(pos1); 
		cur_src = m_file->srclists[sl].GetAt(pos2); 
		
		if (cur_src->GetFileComment().GetLength()>0 || cur_src->GetFileRate()>0)
		{
			pmyListCtrl.InsertItem(count, cur_src->GetUserName()); 
			pmyListCtrl.SetItemText(count, 1, cur_src->GetClientFilename()); 
			pmyListCtrl.SetItemText(count, 2, GetRateString(cur_src->GetFileRate())); 
			pmyListCtrl.SetItemText(count, 3, cur_src->GetFileComment()); 
d110 1
a110 17
	  	} 
	} 
	
	// [Lord KiRon/DonGato]
	// Adds support to show comments entered by the user himself
	CString comment;
	CString rated; 
   	comment = m_file->GetFileComment(); 
	rated = GetRateString(m_file->GetFileRate());
	if ((comment != "")||(rated!=GetRateString(0)))
	{ 
		pmyListCtrl.InsertItem(count, theApp.glob_prefs->GetUserNick()); 
		pmyListCtrl.SetItemText(count, 1, m_file->GetFileName()); 
		pmyListCtrl.SetItemText(count, 2, rated); 
		pmyListCtrl.SetItemText(count, 3, comment); 
		count++;
	}
d112 4
a115 5
	
	CString info="";
	if (count==0) info="("+GetResString(IDS_CMT_NONE)+")";
	GetDlgItem(IDC_CMSTATUS)->SetWindowText(info);
	m_file->UpdateFileRatingCommentAvail();
@


1.3
log
@Comments entered by user himself now shown in "Shaw all comments" dialog too (as a last line)
@
text
@d6 6
@


1.2
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@d91 15
@


1.1
log
@*** empty log message ***
@
text
@d71 4
a74 3
   for (pos1 = m_file->srclist.GetHeadPosition(); (pos2 = pos1) != NULL;) { 
      m_file->srclist.GetNext(pos1); 
      cur_src = m_file->srclist.GetAt(pos2); 
@


1.1.6.1
log
@initial upgrade to .26
@
text
@d71 3
a73 4
   for (int sl=0;sl<SOURCESSLOTS;sl++) if (!m_file->srclists[sl].IsEmpty())
   for (pos1 = m_file->srclists[sl].GetHeadPosition(); (pos2 = pos1) != NULL;) { 
      m_file->srclists[sl].GetNext(pos1); 
      cur_src = m_file->srclists[sl].GetAt(pos2); 
@


1.1.4.1
log
@updating this branch...
@
text
@@

