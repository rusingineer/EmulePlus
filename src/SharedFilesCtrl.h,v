head	1.30;
access;
symbols
	PublicRelease_1_2e:1.29
	Interim_Release_1-2e_RC1:1.29
	PublicRelease_1_2d:1.25
	Interim_Release_1-2d_RC1:1.25
	Interim_Release_1-2d_beta1:1.24
	PublicRelease_1_2c:1.24
	Interim_Release_1-2c_RC1:1.24
	Interim_Release_1-2c_beta1:1.24
	PublicRelease_1_2b:1.24
	Interim_Release_1-2b_RC1:1.24
	PublicRelease_1_2a:1.24
	Interim_Release_1-2a_RC1:1.24
	Interim_Release_1-2a_beta2:1.23
	Interim_Release_1-2a_beta1:1.23
	PublicRelease_1_2:1.23
	Interim_Release_1-2_RC1:1.23
	Interim_Release_1-2_beta1:1.23
	PublicRelease_1_1g:1.23
	Interim_Release_1-1g_RC3:1.23
	Interim_Release_1-1g_RC2:1.23
	Interim_Release_1-1g_RC1:1.23
	Interim_Release_1-1g_beta2:1.23
	Interim_Release_1-1g_beta1:1.23
	PublicRelease_1_1f:1.23
	Interim_Release_1-1f_RC1:1.23
	PublicRelease_1_1e:1.23
	Interim_Release_1-1e_RC2:1.23
	Interim_Release_1-1e_RC1:1.23
	Interim_Release_1-1e_beta1:1.23
	PublicRelease_1_1d:1.22
	Interim_Release_1-1d_RC1:1.22
	PublicRelease_1_1c:1.21
	Interim_Release_1-1c_RC1:1.20
	Interim_Release_1-1c_beta2:1.20
	Interim_Release_1-1c_beta1:1.20
	PublicRelease_1_1b:1.20
	Interim_Release_1-1b_RC1:1.20
	PublicRelease_1_1a:1.20
	Interim_Release_1-1a_RC2:1.20
	Interim_Release_1-1a_RC1:1.20
	Interim_Release_1-1a_beta2:1.20
	Interim_Release_1-1a_beta1:1.20
	PublicRelease_1_1:1.20
	Interim_Release_1-1_beta1:1.20
	PublicRelease_1o:1.20
	Interim_Release_1o_RC1:1.20
	Interim_Release_1o_beta1:1.20
	PublicRelease_1n:1.20
	Interim_Release_1n_RC2:1.20
	Interim_Release_1n_RC1:1.20
	Interim_Release_1n_beta2:1.20
	Interim_Release_1n_beta1:1.20
	PublicRelease_1m:1.19
	Interim_Release_1m_beta1:1.19
	PublicRelease_1l:1.19
	Interim_Release_1l_RC3:1.19
	Interim_Release_1l_RC2:1.19
	Interim_Release_1l_RC1:1.19
	Interim_Release_1l_beta2:1.19
	Interim_Release_1l_beta1:1.19
	PublicRelease_1k:1.19
	Interim_Release_1k_RC4:1.19
	Interim_1k_RC3:1.18
	Interim_1k_RC2:1.18
	Interim_Release_1k_RC1:1.18
	Interim_Release_1k_beta5:1.18
	Intrerim_Release_1k_beta4:1.18
	Interim_Release_1k_beta1:1.18
	PublicRelease_1j:1.15
	Interim_Release_1J_RC3:1.15
	Interim_Release_1j_RC3:1.15
	Interim_Release_1j_RC2:1.15
	Interim_Release_1j_RC1:1.15
	Interim_Release_1j_beta2:1.15
	Interim_Release_1j_beta1:1.15
	PublicRelease_1i:1.15
	Interim_Release_1i_RC6:1.15
	Interim_Release_1i_RC3:1.15
	Interim_Release_1i_RC2:1.15
	Interim_Release_1i_RC1:1.15
	Interim_Release_1i_beta3:1.15
	Interim_Release_1i_beta2:1.12
	Interim_Release_1i_beta1:1.10
	PublicRelease_1h:1.8
	Interim_Release_1h_rc2:1.8
	Interim_Release_1h_RC1:1.7
	Interim_Release_1h_beta2:1.7
	Interim_Release_1h_beta1_now:1.7
	Interim_Release_1h_beta1:1.7
	PublicRelease_1g:1.5
	Interim_Release_1g_RC6_Final:1.5
	Interim_Release_1g_RC6:1.5
	Interim_Release_1g_RC5:1.5
	Interim_Release_1g_RC4:1.5
	Interim_Release_1g_RC3:1.5
	Interim_Release_1g_beta2:1.4
	Interim_Release_1g_beta1:1.4
	Interim_Release_1f_RC4:1.4
	Interim_Release_1f_RC3:1.4
	Interim_Release_1f_RC2:1.4
	Interim_Release_1f_RC:1.4
	Interim_Release_1f_beta2:1.4
	Interim_Release_1f_beta1:1.4
	PublicRelease_1e:1.4
	Interim_Release_1e_RC2:1.4
	Interim_Release_1e_RC:1.4
	Interim_Release_1e_beta3:1.4
	Interim_Release_1e_beta2:1.4
	Interim_Release_1e_beta2_before_kuchin:1.4
	Interim_Release_1e_beta1:1.4
	PublicRelease_1c:1.4
	featurestest:1.4.0.4
	Interim_Release_1c_RC:1.4
	Interim_Release_1c_beta2:1.4
	Interim_Release_1c_beta1:1.4
	threaded_downloadqueue:1.4.0.2
	PublicRelease_1b:1.3
	Interim_Release_1b_beta2:1.3
	Interim_Release_1b_beta1:1.2
	proxydeadlake:1.2.0.4
	PublicRelease_1a:1.2
	Interim_Release_1a_beta2:1.2
	BerkeleyDb:1.2.0.2
	Interim_Release_1a_beta1:1.2
	PublicRelease_1:1.2
	goldfish:1.2
	eMulePlus_1_RC2:1.2
	eMulePlus_26b_1RC1:1.2
	PreRelease_26b_i0e:1.2
	before_26d_merge:1.2
	Interim_Release_26b_i0d:1.2
	Interim_Release_26b_i0c:1.2
	Interim_Release_26b_i0b:1.2
	Interim_Release_26b_i0a:1.2
	systraydlg:1.1.0.8
	plus26based:1.1.0.6
	Interim_Release_25b_i0b:1.1
	Proxy_Dev:1.1
	Interim_Release_25b_i0a:1.1.4.1
	proxytest:1.1.4.1.0.2
	official_sockets:1.1.0.4
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.30
date	2009.05.14.03.14.15;	author aw3;	state Exp;
branches;
next	1.29;

1.29
date	2008.12.02.03.02.55;	author aw3;	state Exp;
branches;
next	1.28;

1.28
date	2008.12.01.18.09.14;	author kush_eplus;	state Exp;
branches;
next	1.27;

1.27
date	2008.11.03.05.59.07;	author aw3;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.29.04.34.36;	author aw3;	state Exp;
branches;
next	1.25;

1.25
date	2008.02.23.15.11.13;	author kush_eplus;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.24.12.55.20;	author aw3;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.09.02.29.36;	author aw3;	state Exp;
branches;
next	1.22;

1.22
date	2005.03.06.22.12.01;	author aw3;	state Exp;
branches;
next	1.21;

1.21
date	2005.02.25.04.39.37;	author aw3;	state Exp;
branches;
next	1.20;

1.20
date	2004.07.04.14.42.16;	author katsyonak;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.07.00.02.30;	author aw3;	state Exp;
branches;
next	1.18;

1.18
date	2004.02.15.11.55.58;	author morevit;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.07.00.50.45;	author netwolf1;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.03.22.53.58;	author netwolf1;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.30.02.44.37;	author morevit;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.29.22.13.33;	author dropf;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.26.14.01.34;	author morevit;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.09.16.17.11;	author eklmn;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.08.15.39.48;	author morevit;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.03.13.04.36;	author morevit;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.29.14.55.46;	author morevit;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.14.13.48.42;	author dongato;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.04.21.24.38;	author zegzav;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.26.11.27.02;	author zegzav;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.25.18.32.05;	author eklmn;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.14.15.57.17;	author partyckip;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.08.12.09.42;	author recdvst;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.09.18.39.42;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.18.21.23;	author cax2;	state Exp;
branches
	1.1.4.1
	1.1.6.1;
next	;

1.1.4.1
date	2003.01.28.16.54.27;	author cax2;	state Exp;
branches;
next	;

1.1.6.1
date	2003.02.05.01.58.42;	author obaldin;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Save sorting directions for all GUI lists; Unified list sort initialization and click processing;
Simplified list arrow configuration interface; Unified list column definitions.
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#include "MuleListCtrl.h"
#include "Loggable.h"


class CKnownFile;
class CSharedFileList;
class CShellContextMenu;

typedef struct
{
	bool		isFile;
	bool		isOpen;
	uint16		part;
	uint16		parts;
	CKnownFile	*knownFile;
} sfl_itemdata;

class CSharedFilesCtrl : public CMuleListCtrl, public CLoggable
{
	DECLARE_DYNAMIC(CSharedFilesCtrl)

public:
	CSharedFilesCtrl();
	virtual ~CSharedFilesCtrl();
	void	Init();
	void	ShowFileList(CSharedFileList* in_sflist);
	void	AddFile(CKnownFile *file);
	void	RemoveFile(CKnownFile* toremove);
	void	UpdateFile(CKnownFile* file, uint32 pos, bool resort=true);
	void	UpdateItem(CKnownFile* toupdate, bool resort=true);
	void	Localize();
	void	ShowFilesCount();
	void	SetColoring(byte mode);
	void	SetDisplay(byte mode, bool redraw);
	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	virtual BOOL DeleteAllItems();
	void	ShowKnownList();
	bool	IsKnownFilesView() const { return m_allYaKnow; }

protected:
	static int CALLBACK SortProc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
	static double CompleteSourcesCmpValue(CKnownFile* item, bool second);
	afx_msg void OnColumnClick(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnDoubleClick(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnNMClick(NMHDR *pNMHDR, LRESULT *pResult);
	afx_msg void OnGetDispInfo(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnContextMenu(CWnd* pWnd, CPoint point);

	virtual BOOL	OnWndMsg(UINT iMessage,WPARAM wParam, LPARAM lParam, LRESULT *pResult);
	virtual BOOL	OnCommand(WPARAM wParam, LPARAM lParam);
	virtual BOOL	PreTranslateMessage(MSG *pMsg);
	virtual void	OnNMDividerDoubleClick(NMHEADER *pNMHDR);

	DECLARE_MESSAGE_MAP()
private:
	bool			DrawStatusBarFile(CDC* dc, RECT* rect, const CFileStatistic& statistic);
	bool			DrawStatusBarPart(CDC* dc, RECT* rect, const CFileStatistic& statistic, uint16 part);
	void			ShowFile(CKnownFile *file, bool resort=true);
	void			ShowFile(CKnownFile *file, uint32 itemnr, bool resort=true);
	void			TraffiGram(CDC* dc, RECT* rect, const CFileStatistic& statistic, int use, double &bpp, uint64 qwStart=0);

	CImageList		m_imageList;
	static	bool	m_sortParts;
	COLORREF		(*GetTrafficColor)(double);
	byte			m_display;
	byte			m_display_atpte;
	byte			m_display_atbts;
	byte			m_display_atbte;
	byte			m_display_sbts;
	byte			m_display_sbte;

	bool			m_allYaKnow;
	bool			m_trafficgram;

//	For fast prio-sorting
	static uint32	m_p2p[5];

//	Make it Win9x compatible by using only one bitmap, brush...?
	CDC		cdcStatus;
	CBitmap	status;

	int		m_statusWidth;
	CShellContextMenu *m_pSCM;
};
@


1.29
log
@A correction for the previous change -- strange that compiler didn't complain about that...
@
text
@a22 7
#define SFL_ALT_REQUESTS	(SFL_NUMCOLUMNS + 0)
#define SFL_ALT_ACCEPTED	(SFL_NUMCOLUMNS + 1)
#define SFL_ALT_TRANSFERRED	(SFL_NUMCOLUMNS + 2)
#define SFL_ALT_PARTTRAFFIC	(SFL_NUMCOLUMNS + 3)
#define SFL_ALT_UPLOADS		(SFL_NUMCOLUMNS + 4)
#define SFL_ALT_COMPLETESRC	(SFL_NUMCOLUMNS + 5)

a48 1
	void	SortInit(int iSortCode);
d61 1
a61 1
	afx_msg void OnColumnClick( NMHDR* pNMHDR, LRESULT* pResult);
a101 2

	bool			m_bSortAscending[SFL_NUMCOLUMNS + 6];
@


1.28
log
@Changed a class without methods/constructors/destructors to a struct.
@
text
@d34 1
a34 1
struct sfl_itemdata
d41 1
a41 1
};
@


1.27
log
@Reduced H-file dependency.
@
text
@d34 1
a34 1
class sfl_itemdata
a35 1
public:
@


1.26
log
@Some local functions were made static.
@
text
@a18 3
#include "SharedFileList.h"
#include "KnownFile.h"
#include "types.h"
a19 1
#include "ShellContextMenu.h"
d30 4
a43 1
class CSharedFileList;
d79 1
@


1.25
log
@Fix priority sorting (thanks Aw3);
Suppressed as much compiler warnings I could.
@
text
@d17 1
a18 1
#pragma once
a113 6

// Part Traffic
COLORREF	GetTrafficColor0(double f);	/// rainbow (exp)
COLORREF	GetTrafficColor1(double f);	/// rainbow (lin)
COLORREF	GetTrafficColor2(double f);	/// blue
COLORREF	GetTrafficColor3(double f);	/// pink
@


1.24
log
@Large file size support preparations;
Speeded up drawing of Part Traffic status bar.
@
text
@d103 1
a103 1
	static byte		m_p2p[8];	//eklmn: extra place for new priority JUMPSTART...
@


1.23
log
@Faster part traffic drawing.
@
text
@d87 1
a87 1
	void			TraffiGram(CDC* dc, RECT* rect, const CFileStatistic& statistic, int use, double bpp, uint32 start=0);
a92 1
	byte			m_display_atpts;
d103 1
a103 1
	static byte		m_p2p[8];	//eklmn: extra place for new priority JUMPSTART,...
@


1.22
log
@Rewritten shared files list sorting to make it according to other lists;
Fixed sorting arrow in shared files list when second sorting level is used by default.
@
text
@a107 3
	CPen	pen;
	CBrush	brush;
	CBrush*	m_pOldBrush;
@


1.21
log
@Removed unused code called "offered files to server".
@
text
@d24 2
d27 6
a32 3
//--- its for "better" sorting ---
#include "listControlSorter.h"
#include "Loggable.h"
d34 1
a34 2
//--- we have two different items ---
class	sfl_itemdata
d58 1
a58 1
	void	SortInit(int sortCode);
a64 1
	bool	m_allYaKnow;
d66 1
d71 2
a72 2
	afx_msg	void OnColumnClick( NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg	void OnDoubleClick(NMHDR* pNMHDR, LRESULT* pResult);
d75 1
d78 2
d87 1
d89 3
a91 4
	CImageList  	m_imageList;
	CListCtrlSorter		m_listSorter;
	static	bool		m_sortParts;
	COLORREF(*GetTrafficColor)(double);// yes kids, thats a function pointer :)
d100 2
a101 2
	void	TraffiGram(CDC* dc, RECT* rect, const CFileStatistic& statistic, int use, double bpp, uint32 start=0);
	bool	m_trafficgram;
d104 1
a104 1
	static	byte	m_p2p[8];	//eklmn: extra place for new priority JUMPSTART,...
d107 1
a107 1
	CDC		cdcStatus; 
d111 1
a111 1
	CBitmap status;
d116 1
a116 6
public:
	afx_msg void OnContextMenu(CWnd* pWnd, CPoint point);
protected:
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);
public:
	virtual BOOL PreTranslateMessage(MSG* pMsg);
@


1.20
log
@Added clickable own rating icon in shared files list
@
text
@a17 1

d20 1
a20 1
#include "knownfile.h"
a60 1
	void	UpdateOfferedItems();
d117 1
a117 1
// Part Traffic 
@


1.19
log
@Corrected list title update (removed multiple title update during switching between Shared & Known file lists).
@
text
@d71 1
d83 1
@


1.18
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d51 1
a51 2
	void	ShowFile(CKnownFile* file, bool resort=true);
	void	ShowFile(CKnownFile* file, uint32 itemnr, bool resort=true);
d79 2
@


1.17
log
@upload auto priority sets very well spread files to low prio + minor changes + cleanup
@
text
@d59 2
a60 2
	void	SetColoring(uint8 mode);
	void	SetDisplay(uint8 mode, bool redraw);
d84 7
a90 7
	uint8			m_display;
	uint8			m_display_atpts;
	uint8			m_display_atpte;
	uint8			m_display_atbts;
	uint8			m_display_atbte;
	uint8			m_display_sbts;
	uint8			m_display_sbte;
d96 1
a96 1
	static	uint8	m_p2p[8];	//eklmn: extra place for new priority JUMPSTART,...
@


1.16
log
@added button to toggle between known and shared files + minor changes
@
text
@a33 3
	//sfl_itemdata() : knownFile(NULL), repaintBar(true), updated(0) {}
	//~sfl_itemdata() { bar.DeleteObject(); }

a38 4

	//uint32	updated;
	//bool		repaintBar;
	//CBitmap     	bar;
a40 1
// CSharedFilesCtrl
d95 1
a95 1
	//--- for fast prio-sorting ---
d98 1
a98 1
	//--- make it win9x compatible by using only one bitmap, brush...? ---
@


1.15
log
@Formatting, comments, and name changes.
@
text
@a25 1
//--- xrmb:parttraffic ---
a46 1
//--- :xrmb ---
a58 1
	//--- xrmb:parttraffic ---
a60 1
	//--- :xrmb ---
a61 1
	//--- xrmb:parttraffic ---
d64 1
a64 2
	//--- :xrmb ---
	void	SortInit(int sortCode);	//sortdlg Cax2
a66 1
	//--- xrmb:parttraffic ---
a70 1
	//--- :xrmb ---
d72 2
a78 1
	//--- xrmb:parttraffic ---
a79 1
	//--- :xrmb ---
a85 2
	//--- xrmb:parttraffic ---
	//CSharedFileList* sflist;	//no used
a88 5
	//--- dont need it anymore ---
	//CTitleMenu	m_SharedFilesMenu;
	//CMenu		   	m_menuPriority;
	//CMenu		   	m_PermMenu;

a113 7
	//--- :xrmb ---

	//--- xrmb:allyaknow ---
	//--- for the gone files ---
	bool	m_allYaKnow;
	void	ShowKnownList();
	//--- :xrmb ---
d124 1
a124 1
//--- xrmb:parttraffic ---
a128 1
//--- :xrmb ---
@


1.14
log
@*** empty log message ***
@
text
@d143 1
a143 1
	virtual BOOL PreTranslateMessage(MSG* pMsg);	// DropF - Keyboard Shortcuts
@


1.13
log
@Formatting, comments, and name changes.
float => double conversion
@
text
@d142 2
@


1.12
log
@incorrect use of GDI resources (CBrush class)
@
text
@d83 1
a83 1
	static float CompleteSourcesCmpValue(CKnownFile* item, bool second);
d106 1
a106 1
	COLORREF(*GetTrafficColor)(float);// yes kids, thats a function pointer :)
d145 4
a148 4
COLORREF	GetTrafficColor0(float f);	/// rainbow (exp)
COLORREF	GetTrafficColor1(float f);	/// rainbow (lin)
COLORREF	GetTrafficColor2(float f);	/// blue
COLORREF	GetTrafficColor3(float f);	/// pink
@


1.11
log
@Formatting, comments, and name changes. Factored various UI update methods out and modified to use async. messaging instead of sync. call.
@
text
@d125 1
@


1.10
log
@Formatting, comments, and name changes.
@
text
@d89 3
@


1.9
log
@Formatting, comments, and name changes.
@
text
@d98 1
a98 1
	//CMenu		   	m_PrioMenu;
@


1.8
log
@Fix for lists navigation [from official]
@
text
@d20 1
a20 1
#include "sharedfilelist.h"
@


1.7
log
@share files with soft limit
@
text
@d88 1
@


1.6
log
@updated complete sources (0.06b: display range of values)
@
text
@d79 1
@


1.5
log
@jumpstart support in SharedList (output, sorting...)
@
text
@d82 1
@


1.4
log
@converted to new logging method
@
text
@d113 1
a113 1
	static	uint8	m_p2p[6];
@


1.3
log
@all my stable changes and some minor fixes (refer to changelog)
@
text
@d29 1
d52 1
a52 1
class CSharedFilesCtrl : public CMuleListCtrl
@


1.2
log
@Merge from plus26based branch (without new sockets code yet)
@
text
@d24 1
d128 1
@


1.1
log
@*** empty log message ***
@
text
@d70 1
@


1.1.6.1
log
@initial upgrade to .26
@
text
@a69 1
	void	ShowFilesCount();
@


1.1.4.1
log
@updating this branch...
@
text
@@

