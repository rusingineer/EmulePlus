head	1.20;
access;
symbols
	PublicRelease_1_2e:1.20
	Interim_Release_1-2e_RC1:1.20
	PublicRelease_1_2d:1.20
	Interim_Release_1-2d_RC1:1.20
	Interim_Release_1-2d_beta1:1.20
	PublicRelease_1_2c:1.17
	Interim_Release_1-2c_RC1:1.17
	Interim_Release_1-2c_beta1:1.15
	PublicRelease_1_2b:1.14
	Interim_Release_1-2b_RC1:1.14
	PublicRelease_1_2a:1.13
	Interim_Release_1-2a_RC1:1.13
	Interim_Release_1-2a_beta2:1.13
	Interim_Release_1-2a_beta1:1.13
	PublicRelease_1_2:1.13
	Interim_Release_1-2_RC1:1.13
	Interim_Release_1-2_beta1:1.13
	PublicRelease_1_1g:1.12
	Interim_Release_1-1g_RC3:1.12
	Interim_Release_1-1g_RC2:1.12
	Interim_Release_1-1g_RC1:1.12
	Interim_Release_1-1g_beta2:1.12
	Interim_Release_1-1g_beta1:1.12
	PublicRelease_1_1f:1.12
	Interim_Release_1-1f_RC1:1.12
	PublicRelease_1_1e:1.12
	Interim_Release_1-1e_RC2:1.12
	Interim_Release_1-1e_RC1:1.12
	Interim_Release_1-1e_beta1:1.12
	PublicRelease_1_1d:1.12
	Interim_Release_1-1d_RC1:1.12
	PublicRelease_1_1c:1.12
	Interim_Release_1-1c_RC1:1.12
	Interim_Release_1-1c_beta2:1.12
	Interim_Release_1-1c_beta1:1.12
	PublicRelease_1_1b:1.12
	Interim_Release_1-1b_RC1:1.12
	PublicRelease_1_1a:1.10
	Interim_Release_1-1a_RC2:1.10
	Interim_Release_1-1a_RC1:1.10
	Interim_Release_1-1a_beta2:1.10
	Interim_Release_1-1a_beta1:1.9
	PublicRelease_1_1:1.9
	Interim_Release_1-1_beta1:1.9
	PublicRelease_1o:1.9
	Interim_Release_1o_RC1:1.9
	Interim_Release_1o_beta1:1.9
	PublicRelease_1n:1.9
	Interim_Release_1n_RC2:1.9
	Interim_Release_1n_RC1:1.9
	Interim_Release_1n_beta2:1.9
	Interim_Release_1n_beta1:1.9
	PublicRelease_1m:1.9
	Interim_Release_1m_beta1:1.9
	PublicRelease_1l:1.9
	Interim_Release_1l_RC3:1.9
	Interim_Release_1l_RC2:1.9
	Interim_Release_1l_RC1:1.9
	Interim_Release_1l_beta2:1.9
	Interim_Release_1l_beta1:1.9
	PublicRelease_1k:1.9
	Interim_Release_1k_RC4:1.9
	Interim_1k_RC3:1.9
	Interim_1k_RC2:1.9
	Interim_Release_1k_RC1:1.9
	Interim_Release_1k_beta5:1.9
	Intrerim_Release_1k_beta4:1.9
	Interim_Release_1k_beta1:1.9
	PublicRelease_1j:1.8
	Interim_Release_1J_RC3:1.8
	Interim_Release_1j_RC3:1.8
	Interim_Release_1j_RC2:1.8
	Interim_Release_1j_RC1:1.8
	Interim_Release_1j_beta2:1.8
	Interim_Release_1j_beta1:1.8
	PublicRelease_1i:1.8
	Interim_Release_1i_RC6:1.8
	Interim_Release_1i_RC3:1.8
	Interim_Release_1i_RC2:1.8
	Interim_Release_1i_RC1:1.8
	Interim_Release_1i_beta3:1.8
	Interim_Release_1i_beta2:1.7
	Interim_Release_1i_beta1:1.6
	PublicRelease_1h:1.6
	Interim_Release_1h_rc2:1.6
	Interim_Release_1h_RC1:1.6
	Interim_Release_1h_beta2:1.6
	Interim_Release_1h_beta1_now:1.5
	Interim_Release_1h_beta1:1.5
	PublicRelease_1g:1.5
	Interim_Release_1g_RC6_Final:1.5
	Interim_Release_1g_RC6:1.5
	Interim_Release_1g_RC5:1.5
	Interim_Release_1g_RC4:1.5
	Interim_Release_1g_RC3:1.5
	Interim_Release_1g_beta2:1.4
	Interim_Release_1g_beta1:1.4
	Interim_Release_1f_RC4:1.4
	Interim_Release_1f_RC3:1.4
	Interim_Release_1f_RC2:1.3
	Interim_Release_1f_RC:1.3
	Interim_Release_1f_beta2:1.3
	Interim_Release_1f_beta1:1.3
	PublicRelease_1e:1.3
	Interim_Release_1e_RC2:1.3
	Interim_Release_1e_RC:1.3
	Interim_Release_1e_beta3:1.3
	Interim_Release_1e_beta2:1.3
	Interim_Release_1e_beta2_before_kuchin:1.3
	Interim_Release_1e_beta1:1.3
	PublicRelease_1c:1.3
	featurestest:1.3.0.4
	Interim_Release_1c_RC:1.3
	Interim_Release_1c_beta2:1.3
	Interim_Release_1c_beta1:1.3
	threaded_downloadqueue:1.3.0.2
	PublicRelease_1b:1.2
	Interim_Release_1b_beta2:1.2
	Interim_Release_1b_beta1:1.2
	proxydeadlake:1.2.0.10
	PublicRelease_1a:1.2
	Interim_Release_1a_beta2:1.2
	BerkeleyDb:1.2.0.8
	Interim_Release_1a_beta1:1.2
	PublicRelease_1:1.2
	goldfish:1.2
	eMulePlus_1_RC2:1.2
	eMulePlus_26b_1RC1:1.2
	PreRelease_26b_i0e:1.2
	before_26d_merge:1.2
	Interim_Release_26b_i0d:1.2
	Interim_Release_26b_i0c:1.2
	Interim_Release_26b_i0b:1.2
	Interim_Release_26b_i0a:1.2
	systraydlg:1.2.0.6
	plus26based:1.2.0.4
	Interim_Release_25b_i0b:1.2
	Proxy_Dev:1.2
	Interim_Release_25b_i0a:1.2.2.1
	proxytest:1.2.2.1.0.2
	official_sockets:1.2.0.2
	eMulePlus_024b_5b:1.1.0.2;
locks; strict;
comment	@ * @;


1.20
date	2007.11.12.23.52.20;	author fuxie-dk;	state Exp;
branches;
next	1.19;

1.19
date	2007.11.01.18.20.58;	author fuxie-dk;	state Exp;
branches;
next	1.18;

1.18
date	2007.10.31.18.23.58;	author fuxie-dk;	state Exp;
branches;
next	1.17;

1.17
date	2007.07.27.06.21.18;	author aw3;	state Exp;
branches;
next	1.16;

1.16
date	2007.07.25.02.42.37;	author aw3;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.19.03.37.38;	author aw3;	state Exp;
branches;
next	1.14;

1.14
date	2006.11.21.12.09.41;	author eklmn;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.23.07.05.13;	author kush_eplus;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.21.21.03.42;	author aw3;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.14.05.42.26;	author aw3;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.11.19.11.00;	author aw3;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.15.11.55.57;	author morevit;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.26.13.50.15;	author morevit;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.20.13.19.57;	author morevit;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.30.11.23.25;	author emoulari;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.19.08.14.16;	author partyckip;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.20.20.46.25;	author netwolf1;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.14.15.59.54;	author partyckip;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2003.01.22.18.02.35;	author kuchin;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2003.01.21.17.59.09;	author cax2;	state Exp;
branches;
next	;

1.2.2.1
date	2003.01.28.16.53.58;	author cax2;	state Exp;
branches;
next	;

1.3.4.1
date	2003.03.24.09.39.42;	author recdvst;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Suppressed compiler warnings [KuSh/Aw3].
@
text
@//this file is part of eMule
//Copyright (C)2002 Merkur ( merkur-@@users.sourceforge.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#pragma once

#include "types.h"
#include "mapkey.h"

#pragma warning(push, 3)	// preserve current state, then set warning level 3
#pragma warning(disable:4702) // unreachable code
#include "crypto51\rsa.h"
#pragma warning(pop)

#define	 MAXPUBKEYSIZE		80

#define CRYPT_CIP_REMOTECLIENT	10
#define CRYPT_CIP_LOCALCLIENT	20
#define CRYPT_CIP_NONECLIENT	30

#pragma pack(1)
struct CreditStruct{
	uchar		abyKey[16];
	uint32		nUploadedLo;	// uploaded TO him
	uint32		nDownloadedLo;	// downloaded from him
	uint32		nLastSeen;
	uint32		nUploadedHi;	// upload high 32
	uint32		nDownloadedHi;	// download high 32
	uint16		nReserved3;
	byte		nKeySize;
	uchar		abySecureIdent[MAXPUBKEYSIZE];
};
#pragma pack()

enum EIdentState{
	IS_NOTAVAILABLE,
	IS_IDNEEDED,
	IS_IDENTIFIED,
	IS_IDFAILED,
	IS_IDBADGUY
};

class CClientCredits
{
	friend class CClientCreditsList;
public:
	CClientCredits(const CreditStruct *pInCredits);
	CClientCredits(const uchar* key);
	~CClientCredits();

	const uchar* GetKey() const				{return m_Credits.abyKey;}
	uchar*	GetSecureIdent()				{return m_abyPublicKey;}
	byte	GetSecIDKeyLen() const			{return m_nPublicKeyLen;}
	const CreditStruct* GetDataStruct() const	{return &m_Credits;}
	void	AddDownloaded(uint32 bytes, uint32 dwForIP);
	void	AddUploaded(uint32 bytes, uint32 dwForIP);
	uint64	GetUploadedTotal() const;
	uint64	GetDownloadedTotal() const;
	double	GetScoreRatio(uint32 dwForIP, bool inverted = false) const;
	bool	HasHigherScoreRatio(uint32 dwForIP) const;
	void	SetLastSeen()					{m_Credits.nLastSeen = time(NULL);}
	bool	SetSecureIdent(const uchar *pachIdent, byte nIdentLen); // Public key cannot change, use only if there is not public key yet
	EIdentState	GetCurrentIdentState(uint32 dwForIP) const; // can be != IdentState
	uint32	GetSecureWaitStartTime(uint32 dwForIP);
	void	SetSecWaitStartTime(uint32 dwForIP);

	uint32	m_dwCryptRndChallengeFor;
	uint32	m_dwCryptRndChallengeFrom;
private:
	void			InitalizeIdent();

	CreditStruct	m_Credits;
	byte			m_nPublicKeyLen;
	uint32			m_dwIdentIP;
	uint32			m_dwSecureWaitTime;
	uint32			m_dwUnSecureWaitTime;
	uint32			m_dwWaitTimeIP;			// client IP assigned to the waittime
	byte			m_abyPublicKey[MAXPUBKEYSIZE];			// even keys which are not verified will be stored here, and - if verified - copied into the struct
protected:
	void	Verified(uint32 dwForIP);
	EIdentState IdentState;
};

class CClientCreditsList : public CLoggable{
public:
	CClientCreditsList();
	~CClientCreditsList();
	
			// return signature size, 0 = Failed | use sigkey param for debug only
	byte	CreateSignature(CClientCredits* pTarget, uchar* pachOutput, byte nMaxSize, uint32 ChallengeIP, byte byChaIPKind, CryptoPP::RSASSA_PKCS1v15_SHA_Signer* sigkey = NULL);
	bool	VerifyIdent(CClientCredits* pTarget, const uchar *pachSignature, byte nInputSize, uint32 dwForIP, byte byChaIPKind);	

	CClientCredits* GetCredit(const uchar* key);
	void	Process();
	byte	GetPubKeyLen() const			{return m_nMyPublicKeyLen;}
	byte*	GetPublicKey()					{return m_abyMyPublicKey;}
	bool	CryptoAvailable();
protected:
	void	LoadList();
	void	SaveList();
	void	InitalizeCrypting();
	bool	CreateKeyPair();
#ifdef _DEBUG
	bool	Debug_CheckCrypting();
#endif
private:
	CMap<CCKey, const CCKey&, CClientCredits*, CClientCredits*> m_mapClients;
	uint32			m_nLastSaved;
	CryptoPP::RSASSA_PKCS1v15_SHA_Signer*		m_pSignkey;
	byte			m_abyMyPublicKey[MAXPUBKEYSIZE];
	byte			m_nMyPublicKeyLen;
};
@


1.19
log
@Corrected misunderstanding of Aw3
@
text
@d23 1
@


1.18
log
@Proper warning suppression in 3rd party code [Aw3].
@
text
@a21 3
#pragma warning(disable:4516) // access-declarations are deprecated; member using-declarations provide a better alternative
#pragma warning(disable:4100) // unreferenced formal parameter
#pragma warning(disable:4702) // unreachable code
a24 3
#pragma warning(default:4702) // unreachable code
#pragma warning(default:4100) // unreferenced formal parameter
#pragma warning(default:4516) // access-declarations are deprecated; member using-declarations provide a better alternative
@


1.17
log
@Suppressed level 4 warnings.
@
text
@d25 1
d27 1
@


1.16
log
@Preparations to compile with level 4 of warnings; Stricter class prototypes;
Name space declaration was moved to C-file to reduce the visible scope.
@
text
@d24 1
d26 1
@


1.15
log
@Optimized score calculation and higher score status detection;
Removed importing of v0.29a credit file format;
Removed unrequired #include;
Reorganized class members to have mostly used in the beginning for more compact code.
@
text
@d22 2
d25 3
a27 1
USING_NAMESPACE(CryptoPP)
d64 1
a64 1
	const uchar* GetKey()					{return m_Credits.abyKey;}
d66 2
a67 2
	byte	GetSecIDKeyLen()				{return m_nPublicKeyLen;}
	const CreditStruct* GetDataStruct()		{return &m_Credits;}
d70 4
a73 4
	uint64	GetUploadedTotal();
	uint64	GetDownloadedTotal();
	double	GetScoreRatio(uint32 dwForIP, bool inverted = false);
	bool	HasHigherScoreRatio(uint32 dwForIP);
d75 2
a76 2
	bool	SetSecureIdent(uchar* pachIdent, byte nIdentLen); // Public key cannot change, use only if there is not public key yet
	EIdentState	GetCurrentIdentState(uint32 dwForIP); // can be != IdentState
d103 2
a104 2
	byte	CreateSignature(CClientCredits* pTarget, uchar* pachOutput, byte nMaxSize, uint32 ChallengeIP, byte byChaIPKind, RSASSA_PKCS1v15_SHA_Signer* sigkey = NULL);
	bool	VerifyIdent(CClientCredits* pTarget, uchar* pachSignature, byte nInputSize, uint32 dwForIP, byte byChaIPKind);	
d108 1
a108 1
	byte	GetPubKeyLen()					{return m_nMyPublicKeyLen;}
d120 1
a120 1
	CMap<CCKey, CCKey&, CClientCredits*, CClientCredits*> m_mapClients;
d122 1
a122 1
	RSASSA_PKCS1v15_SHA_Signer*		m_pSignkey;
@


1.14
log
@protect the waiting time with SUI
@
text
@a16 1

a19 1
#include "Preferences.h"
a30 9
struct CreditStruct_29a{
	uchar		abyKey[16];
	uint32		nUploadedLo;	// uploaded TO him
	uint32		nDownloadedLo;	// downloaded from him
	uint32		nLastSeen;
	uint32		nUploadedHi;	// upload high 32
	uint32		nDownloadedHi;	// download high 32
	uint16		nReserved3;
};
d69 1
a82 1
	byte			m_abyPublicKey[MAXPUBKEYSIZE];			// even keys which are not verified will be stored here, and - if verified - copied into the struct
d87 1
@


1.13
log
@UNICODE preparation (first shot) ; removed use of preference member, use global one instead; minor improvements
@
text
@a74 1
	void	ClearWaitStartTime();
@


1.12
log
@Better data alignment for faster processing;
Reduced memory used by known client credits;
Possible fix for crash (CClientCredits object with m_pCredits = 0) {A.Vedjakin}.
@
text
@d106 1
a106 1
	CClientCreditsList(CPreferences* in_prefs);
a127 1
	CPreferences*	m_pAppPrefs;
@


1.11
log
@Reduced memory used by user credits {Moonlight snippet}.
@
text
@d24 1
a24 1
#include "crypto51\rsa.h" 
d60 1
a60 1
	IS_IDBADGUY,
d67 1
a67 1
	CClientCredits(CreditStruct* in_credits);
d71 1
a71 1
	const uchar* GetKey()					{return m_pCredits->abyKey;}
d74 1
a74 1
	CreditStruct* GetDataStruct()			{return m_pCredits;}
d81 1
a81 1
	void	SetLastSeen()					{m_pCredits->nLastSeen = time(NULL);}
a82 2
	uint32	m_dwCryptRndChallengeFor;
	uint32	m_dwCryptRndChallengeFrom;
d86 3
a88 3
protected:
	void	Verified(uint32 dwForIP);
	EIdentState IdentState;
d91 3
a93 1
	CreditStruct*	m_pCredits;
a94 1
	byte			m_nPublicKeyLen;
d98 4
a101 1
	uint32			m_dwWaitTimeIP;			   // client IP assigned to the waittime
@


1.10
log
@Define usage instead of numbers.
@
text
@a96 1
	uint32			m_dwWaitTime;
@


1.9
log
@Changed uint32 to unsigned long from unsigned int and made necessary code changes. Got rid of _unsigned_ types int8,int16,int32,int64. Eliminated uint8 to avoid confusion. Use "byte".
@
text
@d21 1
a21 1
#include "preferences.h"
d94 1
a94 1
	byte			m_abyPublicKey[80];			// even keys which are not verified will be stored here, and - if verified - copied into the struct
d130 1
a130 1
	byte			m_abyMyPublicKey[80];
d132 1
a132 1
};@


1.8
log
@Formatting, comments, and name changes.
float => double conversion
@
text
@d50 1
a50 1
	uint8		nKeySize;
d73 1
a73 1
	uint8	GetSecIDKeyLen()				{return m_nPublicKeyLen;}
d82 1
a82 1
	bool	SetSecureIdent(uchar* pachIdent, uint8 nIdentLen); // Public key cannot change, use only if there is not public key yet
d95 1
a95 1
	uint8			m_nPublicKeyLen;
d109 2
a110 2
	uint8	CreateSignature(CClientCredits* pTarget, uchar* pachOutput, uint8 nMaxSize, uint32 ChallengeIP, uint8 byChaIPKind, RSASSA_PKCS1v15_SHA_Signer* sigkey = NULL);
	bool	VerifyIdent(CClientCredits* pTarget, uchar* pachSignature, uint8 nInputSize, uint32 dwForIP, uint8 byChaIPKind);	
d114 1
a114 1
	uint8	GetPubKeyLen()					{return m_nMyPublicKeyLen;}
d131 1
a131 1
	uint8			m_nMyPublicKeyLen;
@


1.7
log
@Formatting, comments, and name changes.
... and a few bug fixes.
@
text
@d80 1
a80 1
	float	GetScoreRatio(uint32 dwForIP, bool inverted = false);
@


1.6
log
@SecureIdent Support Mainly
Too many changes to mention here
@
text
@d63 2
a64 1
class CClientCredits{
@


1.5
log
@simplified...
@
text
@d19 1
d24 38
d64 1
d66 2
a67 2
	CClientCredits(CFile& file);
	CClientCredits(uchar* key);
d70 20
a89 9
	uchar*	GetKey()						{return key;}
	void	AddDownloaded(uint32 bytes);	//		{credits->downloaded += bytes;}
	void	AddUploaded(uint32 bytes);	//		{credits->uploaded += bytes;}
	uint64	GetUploadedTotal(); //				{return credits->uploaded;} //uploaded TO him
	uint64	GetDownloadedTotal(); //			{return credits->downloaded; } // downloaded from him
	float	GetScoreRatio(bool inverted = false);
	void	SetLastSeen()					{CTime lwtime; lastseen = time(NULL);}
	bool	Load(CFile& file);
	bool	Save(CFile& file) const;
d91 9
a99 7
	uchar		key[16];
	uint32		uploaded;	//uploaded TO him
	uint32		downloaded; // downloaded from him
	uint32		lastseen;
	uint32		reserved1;
	uint32		reserved2;
	uint16		reserved3;
d106 10
a115 2
	CClientCredits* GetCredit(uchar* key);
	void			Process();
d119 5
d125 6
a130 3
	CPreferences* app_prefs;
	CMap<CCKey,CCKey&,CClientCredits*,CClientCredits*> client_map;
	uint32	lastsaved;
@


1.4
log
@minor fixes and improvements
@
text
@a22 11
#pragma pack(1)

struct Credit_Struct{
	uchar		key[16];
	uint32		uploaded;	//uploaded TO him
	uint32		downloaded; // downloaded from him
	uint32		lastseen;
	uint32		reserved1;
	uint32		reserved2;
	uint16		reserved3;
};
d26 1
a26 1
	CClientCredits(Credit_Struct* in_credits);
d30 1
a30 2
	uchar*	GetKey()						{return credits->key;}
	Credit_Struct* GetDataStruct()			{return credits;}
d36 3
a38 1
	void	SetLastSeen()					{CTime lwtime; credits->lastseen = time(NULL);}
d40 7
a46 1
	Credit_Struct* credits;
@


1.3
log
@converted to new logging method
@
text
@d43 4
a46 4
	void	AddDownloaded(uint32 bytes)		{credits->downloaded += bytes;}
	void	AddUploaded(uint32 bytes)		{credits->uploaded += bytes;}
	uint32	GetUploadedTotal()				{return credits->uploaded;} //uploaded TO him
	uint32	GetDownloadedTotal()			{return credits->downloaded; } // downloaded from him
d48 1
a48 1
	void	SetLastSeen()					{CTime lwtime; credits->lastseen = mktime(lwtime.GetLocalTm());}
@


1.3.4.1
log
@27c
@
text
@d30 2
a31 2
	uint32		reserved1; // upload high 32
	uint32		reserved2; // download high 32
d43 4
a46 4
	void	AddDownloaded(uint32 bytes);
	void	AddUploaded(uint32 bytes);
	uint64	GetUploadedTotal();
	uint64	GetDownloadedTotal();
@


1.2
log
@*** empty log message ***
@
text
@d53 1
a53 1
class CClientCreditsList{
@


1.2.2.1
log
@updating this branch...
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d47 1
a47 1
	float	GetScoreRatio();
@

