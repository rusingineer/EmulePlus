head	1.16;
access;
symbols
	PublicRelease_1_2e:1.16
	Interim_Release_1-2e_RC1:1.16
	PublicRelease_1_2d:1.16
	Interim_Release_1-2d_RC1:1.16
	Interim_Release_1-2d_beta1:1.16
	PublicRelease_1_2c:1.16
	Interim_Release_1-2c_RC1:1.16
	Interim_Release_1-2c_beta1:1.16
	PublicRelease_1_2b:1.16
	Interim_Release_1-2b_RC1:1.16
	PublicRelease_1_2a:1.16
	Interim_Release_1-2a_RC1:1.16
	Interim_Release_1-2a_beta2:1.16
	Interim_Release_1-2a_beta1:1.16
	PublicRelease_1_2:1.16
	Interim_Release_1-2_RC1:1.16
	Interim_Release_1-2_beta1:1.16
	PublicRelease_1_1g:1.16
	Interim_Release_1-1g_RC3:1.16
	Interim_Release_1-1g_RC2:1.16
	Interim_Release_1-1g_RC1:1.16
	Interim_Release_1-1g_beta2:1.16
	Interim_Release_1-1g_beta1:1.16
	PublicRelease_1_1f:1.16
	Interim_Release_1-1f_RC1:1.16
	PublicRelease_1_1e:1.16
	Interim_Release_1-1e_RC2:1.16
	Interim_Release_1-1e_RC1:1.16
	Interim_Release_1-1e_beta1:1.16
	PublicRelease_1_1d:1.13
	Interim_Release_1-1d_RC1:1.13
	PublicRelease_1_1c:1.12
	Interim_Release_1-1c_RC1:1.11
	Interim_Release_1-1c_beta2:1.7
	Interim_Release_1-1c_beta1:1.7
	PublicRelease_1_1b:1.7
	Interim_Release_1-1b_RC1:1.6
	PublicRelease_1_1a:1.6
	Interim_Release_1-1a_RC2:1.6
	Interim_Release_1-1a_RC1:1.6
	Interim_Release_1-1a_beta2:1.6
	Interim_Release_1-1a_beta1:1.6
	PublicRelease_1_1:1.6
	Interim_Release_1-1_beta1:1.6
	PublicRelease_1o:1.6
	Interim_Release_1o_RC1:1.6
	Interim_Release_1o_beta1:1.6
	PublicRelease_1n:1.6
	Interim_Release_1n_RC2:1.6
	Interim_Release_1n_RC1:1.6
	PublicRelease_1m:1.5
	Interim_Release_1m_beta1:1.5
	PublicRelease_1l:1.5
	Interim_Release_1l_RC3:1.5
	Interim_Release_1l_RC2:1.5
	Interim_Release_1l_RC1:1.5
	Interim_Release_1l_beta2:1.5
	Interim_Release_1l_beta1:1.5
	PublicRelease_1k:1.5
	Interim_Release_1k_RC4:1.5
	Interim_1k_RC3:1.5
	Interim_1k_RC2:1.5
	Interim_Release_1k_RC1:1.5
	Interim_Release_1k_beta5:1.5
	Intrerim_Release_1k_beta4:1.5
	Interim_Release_1k_beta1:1.5
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.2;
locks; strict;
comment	@ * @;


1.16
date	2005.03.29.14.36.13;	author kuchin;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.28.19.40.08;	author kuchin;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.22.15.54.09;	author kuchin;	state Exp;
branches;
next	1.13;

1.13
date	2005.03.08.17.09.08;	author kuchin;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.26.17.52.05;	author kuchin;	state Exp;
branches;
next	1.11;

1.11
date	2005.02.23.19.34.37;	author kuchin;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.23.18.58.03;	author kuchin;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.20.19.44.48;	author kuchin;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.19.20.40.57;	author kuchin;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.26.06.50.32;	author kuchin;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.14.14.19.30;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.06.20.50.07;	author kuchin;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.06.13.55.47;	author morevit;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.05.19.31.56;	author morevit;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.23.18.13.48;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.16.17.44.22;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.16
log
@v2 - increasing level of abstraction, more upload logic
@
text
@/////////////////////////////////////////////////////////
// EmMsgs.h - definition of all eMule messages (opcodes)
//
// NOTE Don't put <#pragma once> directive here. 
// This file should be included multiple times.



/////////////////////////////////////////////////////////
// Client OpCodes 
/////////////////////////////////////////////////////////

// Both HELLO and HELLOANSWER have almost the same parameters.

#ifndef OPCODE_HELLO_HELLOANSWER_PARAMS
	#define OPCODE_HELLO_HELLOANSWER_PARAMS \
		PARAM_HASH(UserHash) \
		PARAM_ADDRPORT(ClientAddr) \
		PARAM_TAGS_BEGIN \
			PARAM_TAG_STR(UserName,			CT_NAME) \
			PARAM_TAG_DWORD(SoftVersion,	CT_VERSION) \
			PARAM_TAG_DWORD(UserPort,		CT_PORT) \
			PARAM_TAG_STR(ModVersion,		CT_MOD_VERSION) \
			PARAM_TAG_DWORD(UserUDPPort,	CT_EMULE_UDPPORTS) \
			PARAM_TAG_DWORD(MiscOptions,	CT_EMULE_MISCOPTIONS1) \
			PARAM_TAG_DWORD(MuleVersion,	CT_EMULE_VERSION) \
		PARAM_TAGS_END \
		PARAM_ADDRPORT(ServerAddr)
#endif //OPCODE_HELLO_HELLOANSWER_PARAMS

/////////////////////////////////////////////////////////
// Hello OpCode, sent right after connecting to client
BEGIN_OPCODE(0x01, HELLO, EDONKEY, PEER)
	PARAM_BYTE_JUNK(16)
	OPCODE_HELLO_HELLOANSWER_PARAMS
END_OPCODE

/////////////////////////////////////////////////////////
// Answer to Hello OpCode
BEGIN_OPCODE(0x4C, HELLOANSWER, EDONKEY, PEER)
	OPCODE_HELLO_HELLOANSWER_PARAMS
END_OPCODE


// Both EMULEINFO and EMULEINFOANSWER have exactly the same parameters.
#ifndef OPCODE_EMULE_EMULEINFO_PARAMS
	#define OPCODE_EMULE_EMULEINFO_PARAMS \
		PARAM_BYTE(ClientVersion) \
		PARAM_BYTE(ProtocolVersion) \
		PARAM_TAGS_BEGIN \
			PARAM_TAG_DWORD(Compression,	ET_COMPRESSION) \
			PARAM_TAG_DWORD(UdpVersion,		ET_UDPVER) \
			PARAM_TAG_DWORD(UdpPort,		ET_UDPPORT) \
			PARAM_TAG_DWORD(SourceExchange,	ET_SOURCEEXCHANGE) \
			PARAM_TAG_DWORD(Comments,		ET_COMMENTS) \
			PARAM_TAG_DWORD(ModPlus,		ET_MOD_PLUS) \
			PARAM_TAG_DWORD(ExtendedRequest,ET_EXTENDEDREQUEST) \
			PARAM_TAG_STR(ModVersion,		ET_MOD_VERSION) \
			PARAM_TAG_DWORD(L2Hac,			ET_L2HAC) \
			PARAM_TAG_DWORD(Features,		ET_FEATURES) \
 		PARAM_TAGS_END \
//		PARAM_ADDRPORT(ServerAddr) \

#endif // OPCODE_EMULE_EMULEINFO_PARAMS


/////////////////////////////////////////////////////////
// EmuleInfo OpCode
BEGIN_OPCODE(0x01, EMULEINFO, EMULE, PEER)
	OPCODE_EMULE_EMULEINFO_PARAMS
END_OPCODE

BEGIN_OPCODE(0x02, EMULEINFOANSWER, EMULE, PEER)
	OPCODE_EMULE_EMULEINFO_PARAMS
END_OPCODE


/////////////////////////////////////////////////////////
// Offer files
BEGIN_OPCODE(0x15, OFFERFILES, EDONKEY, PEER)
	PARAM_COMPLEXARRAY_BEGIN(OFFERFILES, Files)
		PARAM_HASH(Hash)
		PARAM_ADDRPORT(ClientAddr)
		PARAM_TAGS_BEGIN
			PARAM_TAG_STR(FileName,		FT_FILENAME)
			PARAM_TAG_DWORD(FileSize,	FT_FILESIZE)
			PARAM_TAG_STR(FileType,		FT_FILETYPE)
		PARAM_TAGS_END
	PARAM_COMPLEXARRAY_END(Files)
END_OPCODE

/////////////////////////////////////////////////////////
// Request filename
BEGIN_OPCODE(0x58, REQUESTFILENAME, EDONKEY, PEER)
	PARAM_HASH(Hash)
END_OPCODE

/////////////////////////////////////////////////////////
// Request filename answer
BEGIN_OPCODE(0x59, REQFILENAMEANSWER, EDONKEY, PEER)
	PARAM_HASH(Hash)
	PARAM_STRING(FileName)
END_OPCODE

/////////////////////////////////////////////////////////
// Request file upload
BEGIN_OPCODE(0x54, STARTUPLOADREQ, EDONKEY, PEER)
	PARAM_HASH(Hash)
END_OPCODE

/////////////////////////////////////////////////////////
// Accept file upload
BEGIN_OPCODE(0x55, ACCEPTUPLOADREQ, EDONKEY, PEER)
	// Empty
END_OPCODE

/////////////////////////////////////////////////////////
// No such file
BEGIN_OPCODE(0x48, FILEREQANSNOFIL, EDONKEY, PEER)
	PARAM_HASH(Hash)
END_OPCODE

/////////////////////////////////////////////////////////
// No such file
BEGIN_OPCODE(0x47, REQUESTPARTS, EDONKEY, PEER)
	PARAM_HASH(Hash)
	PARAM_DWORD(Start1)
	PARAM_DWORD(Start2)
	PARAM_DWORD(Start3)
	PARAM_DWORD(End1)
	PARAM_DWORD(End2)
	PARAM_DWORD(End3)
END_OPCODE

/////////////////////////////////////////////////////////
// Sending file part
BEGIN_OPCODE(0x46, SENDINGPART, EDONKEY, PEER)
	PARAM_HASH(Hash)
	PARAM_DATABLOCK(Data)
END_OPCODE

/////////////////////////////////////////////////////////
// Set requested file
BEGIN_OPCODE(0x4F, SETREQFILEID, EDONKEY, PEER)
	PARAM_HASH(Hash)
END_OPCODE

/////////////////////////////////////////////////////////
// File status
BEGIN_OPCODE(0x50, FILESTATUS, EDONKEY, PEER)
	PARAM_HASH(Hash)
	PARAM_BITARRAY(FileStatus)
END_OPCODE

/////////////////////////////////////////////////////////
// Hash request
BEGIN_OPCODE(0x51, HASHSETREQUEST, EDONKEY, PEER)
	PARAM_HASH(Hash)
END_OPCODE


/////////////////////////////////////////////////////////
// Hash request answer
BEGIN_OPCODE(0x52, HASHSETANSWER, EDONKEY, PEER)
	PARAM_HASH(Hash)
	PARAM_ARRAY(Hashsets, HashType, USHORT)
END_OPCODE


/////////////////////////////////////////////////////////
// Upload ranking info
BEGIN_OPCODE(0x60, QUEUERANKING, EMULE, PEER)
	PARAM_USHORT(Rank)
	// Filling junk
	PARAM_DWORD(Junk1)
	PARAM_DWORD(Junk2)
	PARAM_USHORT(Junk3)
END_OPCODE


/////////////////////////////////////////////////////////
// Cancel transfer
BEGIN_OPCODE(0x56, CANCELTRANSFER, EDONKEY, PEER)
	// Empty
END_OPCODE


/////////////////////////////////////////////////////////
// Server OpCodes
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
// Login request
BEGIN_OPCODE(0x01, LOGINREQUEST, EDONKEY, SERVER)
	PARAM_HASH(UserHash)
	PARAM_ADDRPORT(ClientAddr)
	PARAM_TAGS_BEGIN
		PARAM_TAG_STR(UserName,				CT_NAME)
		PARAM_TAG_DWORD(ClientSoftVersion,	CT_VERSION)
		PARAM_TAG_DWORD(UserPort,			CT_PORT)
		PARAM_TAG_DWORD(Flags,				CT_SERVER_FLAGS)
		PARAM_TAG_DWORD(eMuleVersion,		CT_EMULE_VERSION)
	PARAM_TAGS_END
END_OPCODE

/////////////////////////////////////////////////////////
// Server message
BEGIN_OPCODE(0x38, SERVERMESSAGE, EDONKEY_EMULE, PEER_SERVER)
	PARAM_STRING(Msg)
	#ifdef PARAM_INTERNAL_DEFINITION // Internal variables
	int			m_nMsgCount;
	#endif // PARAM_INTERNAL_DEFINITION
END_OPCODE


/////////////////////////////////////////////////////////
// ID change
BEGIN_OPCODE(0x40, IDCHANGE, EDONKEY, SERVER)
	PARAM_DWORD(NewClientID)
	PARAM_DWORD(SupportedFeatures)
END_OPCODE

/////////////////////////////////////////////////////////
// Search results
BEGIN_OPCODE(0x33, SEARCHRESULT, EDONKEY, SERVER)
	// To do
END_OPCODE

/////////////////////////////////////////////////////////
// Found sources
BEGIN_OPCODE(0x42, FOUNDSOURCES, EDONKEY, SERVER)
	PARAM_HASH(Hash)
	PARAM_ARRAY(Sources, AddrPort, BYTE)
END_OPCODE

/////////////////////////////////////////////////////////
// Server status update
BEGIN_OPCODE(0x34, SERVERSTATUS, EDONKEY, SERVER)
	PARAM_DWORD(NumberOfUsers)
	PARAM_DWORD(NumberOfFiles)
END_OPCODE

/////////////////////////////////////////////////////////
// Server info
BEGIN_OPCODE(0x41, SERVERIDENT, EDONKEY, SERVER)
	PARAM_HASH(ServerHash)
	PARAM_ADDRPORT(ServerAddr)

	PARAM_TAGS_BEGIN
		PARAM_TAG_STR(ServerName,		ST_SERVERNAME)
		PARAM_TAG_STR(ServerDescription,ST_DESCRIPTION)
	PARAM_TAGS_END
END_OPCODE

/////////////////////////////////////////////////////////
// Server list
BEGIN_OPCODE(0x32, SERVERLIST, EDONKEY, SERVER)
	PARAM_ARRAY(Servers, AddrPort, BYTE)
END_OPCODE

/////////////////////////////////////////////////////////
BEGIN_OPCODE(0x1C, CALLBACKREQUEST, EDONKEY, SERVER)
	PARAM_DWORD(UserID)
END_OPCODE

/////////////////////////////////////////////////////////
//	Potential response to CALLBACKREQUEST. Unobserved in
//		the wild ;)
BEGIN_OPCODE(0x36, CALLBACKFAIL, EDONKEY, SERVER)
	// Todo
END_OPCODE

/////////////////////////////////////////////////////////
// Some client request callback through server
BEGIN_OPCODE(0x35, CALLBACKREQUESTED, EDONKEY, SERVER)
	PARAM_ADDRPORT(ClientAddr)
END_OPCODE
@


1.15
log
@v2 - more upload logic, limiting total upload speed
@
text
@a80 1

a83 1

a87 1
			
a88 1

a89 1

a94 1

a95 1

a100 1

a102 1

a107 1

a108 1

d114 1
a114 1

a119 1

a120 1

a125 1

a132 1

a137 1

a139 1

a144 1

a145 1

a150 1

a152 1

a157 1

a158 1

a164 1

a166 1

a172 1

d178 2
d181 4
a195 1

a197 1

a204 1

a209 1

a210 1

a213 1

a219 1

a221 1

d227 1
a227 3

	// search results

a232 1

a234 1

a239 1

a241 1

a246 1

a253 1

a258 1

a259 1

a263 1

a264 1

d271 1
a271 1

a276 1

a277 1

@


1.14
log
@v2 - more upload logic
@
text
@d200 4
@


1.13
log
@v2 - minor rearrangements, started defining client and clientlist
@
text
@d13 18
d35 1
a35 12
	PARAM_HASH(UserHash)
	PARAM_ADDRPORT(ClientAddr)
	PARAM_TAGS_BEGIN
		PARAM_TAG_STR(UserName,			CT_NAME)
		PARAM_TAG_DWORD(SoftVersion,	CT_VERSION)
		PARAM_TAG_DWORD(UserPort,		CT_PORT)
		PARAM_TAG_STR(ModVersion,		CT_MOD_VERSION)
		PARAM_TAG_DWORD(UserUDPPort,	CT_EMULE_UDPPORTS)
		PARAM_TAG_DWORD(MiscOptions,	CT_EMULE_MISCOPTIONS1)
		PARAM_TAG_DWORD(MuleVersion,	CT_EMULE_VERSION)
	PARAM_TAGS_END
	PARAM_ADDRPORT(ServerAddr)
d41 1
a41 12
	PARAM_HASH(UserHash)
	PARAM_ADDRPORT(ClientAddr)
	PARAM_TAGS_BEGIN
		PARAM_TAG_STR(UserName,			CT_NAME)
		PARAM_TAG_DWORD(SoftVersion,	CT_VERSION)
		PARAM_TAG_DWORD(UserPort,		CT_PORT)
		PARAM_TAG_STR(ModVersion,		CT_MOD_VERSION)
		PARAM_TAG_DWORD(UserUDPPort,	CT_EMULE_UDPPORTS)
		PARAM_TAG_DWORD(MiscOptions,	CT_EMULE_MISCOPTIONS1)
		PARAM_TAG_DWORD(MuleVersion,	CT_EMULE_VERSION)
	PARAM_TAGS_END
	PARAM_ADDRPORT(ServerAddr)
d47 1
a47 1
#	define OPCODE_EMULE_EMULEINFO_PARAMS \
d196 9
@


1.12
log
@v2 - upload already works, of course it has very poor implementation, without queues yet, but it works! Also webserver improvements - now you can enter commands through webinterface
@
text
@d20 7
a26 4
		PARAM_TAG_STR(UserName,				CT_NAME)
		PARAM_TAG_DWORD(ClientSoftVersion,	CT_VERSION)
		PARAM_TAG_DWORD(UserPort,			CT_PORT)
		PARAM_TAG_STR(ModVersion,			CT_MOD_VERSION)
d37 7
a43 5
		PARAM_TAG_STR(UserName,				CT_NAME)
		PARAM_TAG_DWORD(ClientSoftVersion,	CT_VERSION)
		PARAM_TAG_DWORD(UserUDPPort,		CT_EMULE_UDPPORTS)
		PARAM_TAG_DWORD(MiscOptions,		CT_EMULE_MISCOPTIONS1)
		PARAM_TAG_DWORD(ClientMuleVersion,	CT_EMULE_VERSION)
d194 1
a194 1
	PARAM_ARRAY(Hashsets, HASH, USHORT)
d256 1
a256 1
	PARAM_ARRAY(Sources, ADDRPORT, BYTE)
d287 1
a287 1
	PARAM_ARRAY(Servers, ADDRPORT, BYTE)
@


1.11
log
@v2 - updated protocol, need to fix packed protocol
@
text
@d40 1
a40 1
//	PARAM_ADDRPORT(ServerAddr)
d47 2
a48 2
		PARAM_BYTE(VersionClient) \
		PARAM_BYTE(VersionProtocol) \
d57 1
a57 1
			PARAM_TAG_DWORD(ModVersion,		ET_MOD_VERSION) \
d61 1
a61 1
		PARAM_ADDRPORT(ServerAddr) \
d96 97
@


1.10
log
@v2 - updated protocol, debug features, bugfix for completion task, revert to default struct byte alignment
@
text
@d121 1
a121 1
BEGIN_OPCODE(0x38, SERVERMESSAGE, EDONKEY, SERVER)
d131 1
@


1.9
log
@v2 - more shared files, other minor changes
@
text
@a12 16
// Both HELLO and HELLOANSWER have exactly the same parameters.
#ifndef OPCODE_ENDONKEY_HELLO_PARAMS
#	define OPCODE_ENDONKEY_HELLO_PARAMS \
		PARAM_BYTE_JUNK(16) \
		PARAM_HASH(UserHash) \
		PARAM_ADDRPORT(ClientAddr) \
		PARAM_TAGS_BEGIN \
			PARAM_TAG_STR(UserName,				CT_NAME) \
			PARAM_TAG_DWORD(ClientSoftVersion,	CT_VERSION) \
			PARAM_TAG_DWORD(UserPort,			CT_PORT) \
			PARAM_TAG_STR(ModVersion,			CT_MOD_VERSION) \
		PARAM_TAGS_END \
		PARAM_ADDRPORT(ServerAddr) \

#endif // OPCODE_ENDONKEY_HELLO_PARAMS

d16 10
a25 1
	OPCODE_ENDONKEY_HELLO_PARAMS
d31 10
a40 1
	OPCODE_ENDONKEY_HELLO_PARAMS
@


1.8
log
@v2 - connecting to server, updated protocol, bugfixes
@
text
@d20 4
a23 4
			PARAM_TAG_STR(UserName, CT_NAME) \
			PARAM_TAG_DWORD(ClientSoftVersion, CT_VERSION) \
			PARAM_TAG_DWORD(UserPort, CT_PORT) \
			PARAM_TAG_STR(ModVersion, CT_MOD_VERSION) \
d48 10
a57 10
			PARAM_TAG_DWORD(Compression, ET_COMPRESSION) \
			PARAM_TAG_DWORD(UdpVersion, ET_UDPVER) \
			PARAM_TAG_DWORD(UdpPort, ET_UDPPORT) \
			PARAM_TAG_DWORD(SourceExchange, ET_SOURCEEXCHANGE) \
			PARAM_TAG_DWORD(Comments, ET_COMMENTS) \
			PARAM_TAG_DWORD(ModPlus, ET_MOD_PLUS) \
			PARAM_TAG_DWORD(ExtendedRequest, ET_EXTENDEDREQUEST) \
			PARAM_TAG_DWORD(ModVersion, ET_MOD_VERSION) \
			PARAM_TAG_DWORD(L2Hac, ET_L2HAC) \
			PARAM_TAG_DWORD(Features, ET_FEATURES) \
a78 1
// implement complex array later
d84 4
a87 2
			PARAM_TAG_STR(FileName, FT_FILENAME)
			PARAM_TAG_DWORD(FileSize, FT_FILESIZE)
d105 1
a105 2
	PARAM_DWORD(ClientID)		// Why not ADDRPORT? Because LowID isn't IP? Isn't that true everywhere?
	PARAM_USHORT(ClientPort)
d108 5
a112 5
		PARAM_TAG_STR(UserName, CT_NAME)
		PARAM_TAG_DWORD(ClientSoftVersion, CT_VERSION)
		PARAM_TAG_DWORD(UserPort, CT_PORT)
		PARAM_TAG_DWORD(Flags, CT_SERVER_FLAGS)
		PARAM_TAG_DWORD(eMuleVersion, CT_EMULE_VERSION)
d172 2
a173 2
		PARAM_TAG_STR(ServerName, ST_SERVERNAME)
		PARAM_TAG_STR(ServerDescription, ST_DESCRIPTION)
@


1.7
log
@*** empty log message ***
@
text
@d111 2
@


1.6
log
@v2 - compressed opcodes
@
text
@a110 1
		PARAM_TAG_DWORD(SupportedFeatures, CT_SUPPORTED_FEATURES)
@


1.5
log
@New engine - logging
@
text
@d13 15
d32 1
a32 15

	PARAM_BYTE_JUNK(16)	//Hash Size
	
	PARAM_HASH(UserHash)
	PARAM_ADDRPORT(ClientAddr)

	PARAM_TAGS_BEGIN
		PARAM_TAG_STR(UserName, CT_NAME)
		PARAM_TAG_DWORD(ClientSoftVersion, CT_VERSION)
		PARAM_TAG_DWORD(UserPort, CT_PORT)			// Check this - EPLUSDOESNTSEND
		PARAM_TAG_STR(ModVersion, CT_MOD_VERSION)
	PARAM_TAGS_END

	PARAM_ADDRPORT(ServerAddr)

d38 2
a40 9
	PARAM_HASH(UserHash)
	PARAM_ADDRPORT(ClientAddr)

	PARAM_TAGS_BEGIN
		PARAM_TAG_STR(UserName, CT_NAME)
		PARAM_TAG_DWORD(ClientVersion, CT_VERSION)
		PARAM_TAG_DWORD(ClientPort, CT_PORT)		// ?? Check this - EPLUSDOESNTSEND
		PARAM_TAG_STR(ModVersion, CT_MOD_VERSION)	// EPLUSDOESNTSEND
	PARAM_TAGS_END
d42 18
a59 1
	PARAM_ADDRPORT(ServerAddr)
d61 1
a61 1
	#ifdef PARAM_INTERNAL_DEFINITION
a62 1
	// put any internal variables here
d64 5
a68 1
	#endif // PARAM_INTERNAL_DEFINITION
d70 2
d74 1
a160 4
//	#ifdef PARAM_INTERNAL_DEFINITION // Internal variables
//	ADDRPORT m_Server;
//	#endif // PARAM_INTERNAL_DEFINITION

@


1.4
log
@Formatting, comments, and name changes.
@
text
@d27 1
a27 1
		PARAM_OTAG_STR(ModVersion, CT_MOD_VERSION)
d44 2
a45 2
		PARAM_OTAG_DWORD(ClientPort, CT_PORT)		// ?? Check this - EPLUSDOESNTSEND
		PARAM_OTAG_STR(ModVersion, CT_MOD_VERSION)	// EPLUSDOESNTSEND
@


1.3
log
@Formatting, comments, and name changes, the usual.
@
text
@d26 2
a27 2
		PARAM_TAG_DWORD(UserPort, CT_PORT)
		PARAM_TAG_STR(ModVersion, CT_MOD_VERSION)
d44 2
a45 2
		PARAM_TAG_DWORD(ClientPort, CT_PORT) // ?? Check this - Also EPLUSDOESNTSEND
		PARAM_TAG_STR(ModVersion, CT_MOD_VERSION) // EPLUSDOESNTSEND
d86 2
a87 2
	PARAM_HASH(Hash)
	PARAM_DWORD(ClientID)
d92 1
a92 1
		PARAM_TAG_DWORD(ClientVersion, CT_VERSION)
d94 1
d115 2
a116 1
	PARAM_DWORD(ClientID)
d154 2
a155 2
	PARAM_HASH(Hash)
	PARAM_ADDRPORT(Server)
d173 14
@


1.2
log
@New engine - connecting to server
@
text
@d18 1
a18 1
	PARAM_BYTE_JUNK(16)
d20 2
a21 2
	PARAM_HASH(Hash)
	PARAM_ADDRPORT(Client)
d25 1
a25 1
		PARAM_TAG_DWORD(ClientVersion, CT_VERSION)
d27 1
d30 1
a30 1
	PARAM_ADDRPORT(Server)
d38 2
a39 2
	PARAM_HASH(Hash)
	PARAM_ADDRPORT(Client)
d44 2
d48 1
a48 1
	PARAM_ADDRPORT(Server)
d65 1
a65 1
		PARAM_ADDRPORT(Client)
d174 1
a174 1
	PARAM_ADDRPORT(Client)
@


1.1
log
@New engine
@
text
@a102 1
	ADDRPORT	m_Server;
d139 3
a141 3
	#ifdef PARAM_INTERNAL_DEFINITION // Internal variables
	ADDRPORT m_Server;
	#endif // PARAM_INTERNAL_DEFINITION
@

