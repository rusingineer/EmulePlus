head	1.2;
access;
symbols
	PublicRelease_1_2e:1.2
	Interim_Release_1-2e_RC1:1.2
	PublicRelease_1_2d:1.2
	Interim_Release_1-2d_RC1:1.2
	Interim_Release_1-2d_beta1:1.2
	PublicRelease_1_2c:1.2
	Interim_Release_1-2c_RC1:1.2
	Interim_Release_1-2c_beta1:1.2
	PublicRelease_1_2b:1.2
	Interim_Release_1-2b_RC1:1.2
	PublicRelease_1_2a:1.2
	Interim_Release_1-2a_RC1:1.2
	Interim_Release_1-2a_beta2:1.2
	Interim_Release_1-2a_beta1:1.2
	PublicRelease_1_2:1.2
	Interim_Release_1-2_RC1:1.2
	Interim_Release_1-2_beta1:1.2
	PublicRelease_1_1g:1.2
	Interim_Release_1-1g_RC3:1.2
	Interim_Release_1-1g_RC2:1.2
	Interim_Release_1-1g_RC1:1.2
	Interim_Release_1-1g_beta2:1.2
	Interim_Release_1-1g_beta1:1.2
	PublicRelease_1_1f:1.2
	Interim_Release_1-1f_RC1:1.2
	PublicRelease_1_1e:1.2
	Interim_Release_1-1e_RC2:1.2
	Interim_Release_1-1e_RC1:1.2
	Interim_Release_1-1e_beta1:1.2
	PublicRelease_1_1d:1.2
	Interim_Release_1-1d_RC1:1.2
	PublicRelease_1_1c:1.2
	Interim_Release_1-1c_RC1:1.2
	Interim_Release_1-1c_beta2:1.2
	Interim_Release_1-1c_beta1:1.2
	PublicRelease_1_1b:1.1
	Interim_Release_1-1b_RC1:1.1
	PublicRelease_1_1a:1.1
	Interim_Release_1-1a_RC2:1.1
	Interim_Release_1-1a_RC1:1.1
	Interim_Release_1-1a_beta2:1.1
	Interim_Release_1-1a_beta1:1.1
	PublicRelease_1_1:1.1
	Interim_Release_1-1_beta1:1.1
	PublicRelease_1o:1.1
	Interim_Release_1o_RC1:1.1
	Interim_Release_1o_beta1:1.1
	PublicRelease_1n:1.1
	Interim_Release_1n_RC2:1.1
	Interim_Release_1n_RC1:1.1
	PublicRelease_1m:1.1
	Interim_Release_1m_beta1:1.1
	PublicRelease_1l:1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.12.29.16.04.22;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.13.21.56.45;	author eklmn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@There can be only one engine :-)
@
text
@#pragma once

#include "../EmEngine.h"
#include "../Other/TagStream.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct MD4PartKey {
	UCHAR	fileHash[16];
	USHORT	uPartNumber;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum DBMD4PartTags
{
	DBMD4PT_HASH = 1,
	DBMD4PT_SHARED_STATUS,
	DBMD4PT_TRANSFERRED,
	DBMD4PT_FULL_TRANSFER,
	DBMD4PT_PART_TRANSFER,
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CFileMD4Part
{
public:
	CFileMD4Part(UCHAR* pFileHash, USHORT uNumber);
	~CFileMD4Part();

//	hash
	UCHAR*	GetHash() const			{return m_pcPartHash;}
	BOOL	SetHash(UCHAR* pcHash);

	BOOL	GetSharedStatus()		{return m_bSharedPart;}
	void		SetSharedStatus(BOOL b)	{m_bSharedPart = b;}

	//statistical values
	void		CountTransferSession(BOOL bFullPartTransfer);
	USHORT	GetFullTrasfer()		{return m_uFullTrasfer;}
	USHORT	GetPartTrasfer()		{return m_uPartTrasfer;}

	void		AddTransferred(uint32 dwBytes);
	DWORD	GetTransferred()					{return m_dwTransfered;}

//	load & save the properties
	bool		Load();
	bool		Save();
//	tag processing
	void 	GetPartTagsFromStream(CTagStream* pTagStream);
	void 	PutPartTagsInStream(CTagStream* pTagStream);

protected:
//	pointer to hasht of the file
	UCHAR*		m_pcFileHash;
//	pointer to hasht of the part
	UCHAR*		m_pcPartHash;

//	the number of the part
	USHORT		m_uNumber;

//	is part shared or not
	BOOL		m_bSharedPart;

//	statistical variables
	DWORD		m_dwTransfered;

	USHORT		m_uFullTrasfer;
	USHORT		m_uPartTrasfer;

private:
	

};
@


1.1
log
@changed the way of data storage in file classes, add new classes
@
text
@d34 1
a34 1
	void		CountTransferSession(CEmEngine& stEngine, BOOL bFullPartTransfer);
d38 1
a38 1
	void		AddTransferred(CEmEngine& stEngine, uint32 dwBytes);
d42 2
a43 2
	bool		Load(CEmEngine &stEngine);
	bool		Save(CEmEngine &stEngine);
@

