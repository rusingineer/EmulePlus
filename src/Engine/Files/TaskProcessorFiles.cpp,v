head	1.8;
access;
symbols
	PublicRelease_1_2e:1.8
	Interim_Release_1-2e_RC1:1.8
	PublicRelease_1_2d:1.8
	Interim_Release_1-2d_RC1:1.8
	Interim_Release_1-2d_beta1:1.8
	PublicRelease_1_2c:1.8
	Interim_Release_1-2c_RC1:1.8
	Interim_Release_1-2c_beta1:1.8
	PublicRelease_1_2b:1.8
	Interim_Release_1-2b_RC1:1.8
	PublicRelease_1_2a:1.8
	Interim_Release_1-2a_RC1:1.8
	Interim_Release_1-2a_beta2:1.8
	Interim_Release_1-2a_beta1:1.8
	PublicRelease_1_2:1.8
	Interim_Release_1-2_RC1:1.8
	Interim_Release_1-2_beta1:1.8
	PublicRelease_1_1g:1.8
	Interim_Release_1-1g_RC3:1.8
	Interim_Release_1-1g_RC2:1.8
	Interim_Release_1-1g_RC1:1.8
	Interim_Release_1-1g_beta2:1.8
	Interim_Release_1-1g_beta1:1.8
	PublicRelease_1_1f:1.8
	Interim_Release_1-1f_RC1:1.8
	PublicRelease_1_1e:1.8
	Interim_Release_1-1e_RC2:1.8
	Interim_Release_1-1e_RC1:1.8
	Interim_Release_1-1e_beta1:1.8
	PublicRelease_1_1d:1.5
	Interim_Release_1-1d_RC1:1.5
	PublicRelease_1_1c:1.5
	Interim_Release_1-1c_RC1:1.5
	Interim_Release_1-1c_beta2:1.1;
locks; strict;
comment	@// @;


1.8
date	2005.03.27.05.01.50;	author kuchin;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.22.22.02.09;	author kuchin;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.22.15.54.09;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.18.18.31.24;	author kuchin;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.18.18.03.29;	author kuchin;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.18.16.19.50;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.17.17.41.59;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.13.57.14;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@v2 - minor improvements
@
text
@// TaskProcessorFiles.cpp: implementation of the CTaskProcessor_Files class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "TaskProcessorFiles.h"
#include "../../KnownFileList.h"
#include "../../SharedFileList.h"
#include "../../FileHashControl.h"
#include "../Data/Prefs.h"

CTaskProcessor_Files::CTaskProcessor_Files()
{
	m_dwStartupTimeout = 10000;	// 10 seconds startup timeout
}

CTaskProcessor_Files::~CTaskProcessor_Files()
{
	Stop();
}

bool CTaskProcessor_Files::Start()
{
	m_dwWaitTimeout = 1000;

	EMULE_TRY

	m_pKnownFiles = new CKnownFileList(g_stEngine.Prefs.GetConfigDir());
	m_pSharedFiles = new CSharedFileList(&g_stEngine.Prefs, m_pKnownFiles);
	m_pFileHasher = new CFileHashControl;

	FileHasher.Init();
	SharedFiles.FindSharedFiles();

	return true;
	
	EMULE_CATCH

	return false;
}

void CTaskProcessor_Files::Stop()
{
	EMULE_TRY

	if(m_pSharedFiles)
	{
		delete m_pSharedFiles;
		m_pSharedFiles = NULL;
	}
	if(m_pKnownFiles)
	{
		delete m_pKnownFiles;
		m_pKnownFiles = NULL;
	}
	if(m_pFileHasher)
	{
		m_pFileHasher->Destroy();
		delete m_pFileHasher;
		m_pFileHasher = NULL;
	}

	EMULE_CATCH
}

void CTaskProcessor_Files::ProcessTimeout()
{
	EMULE_TRY

	m_dwWaitTimeout = 30000; // perform save once per 30 second

	KnownFiles.Save();

	EMULE_CATCH
}

CTask_FileHashed::CTask_FileHashed(CPartFile* pPartFile, CKnownFile* pKnownFile)
	:m_pPartFile(pPartFile)
	,m_pKnownFile(pKnownFile)
{
}

bool CTask_FileHashed::Process()
{
	EMULE_TRY

	if(m_pPartFile != 0)
		m_pPartFile->PartFileHashFinished(m_pKnownFile);
	else
	{
		g_stEngine.Files.KnownFiles.SafeAddKnownFile(m_pKnownFile);
		g_stEngine.Files.SharedFiles.SafeAddKnownFile(m_pKnownFile);
		AddLog(LOG_NOTICE, _T("File hashed: %s"), m_pKnownFile->GetFileName());
	}

	EMULE_CATCH

	return true;
}
@


1.7
log
@v2 - enhancing logging subsystem
@
text
@d93 1
a93 1
		AddLog(LOG_NOTICE, _T("File hashed: %s\n"), m_pKnownFile->GetFileName());
@


1.6
log
@v2 - more upload logic
@
text
@d93 1
a93 1
		TRACE(_T("File hashed: %s\n"), m_pKnownFile->GetFileName());
@


1.5
log
@v2 - more minor rearrangements
@
text
@d10 1
a10 1
#include "../../Preferences.h"
@


1.4
log
@v2 - minor rearrangements, fixes for EngineTray compilation
@
text
@d14 1
a14 1
	m_dwStartupTimeout = 10000;	// 10 seconds timeout to open all databases
@


1.3
log
@v2 - shared files
@
text
@a30 1
	m_pFileHasher->Init();
d32 2
a33 1
	m_pSharedFiles->FindSharedFiles();
@


1.2
log
@v2 - shared files
@
text
@d26 6
a31 6
	try
	{
		m_pKnownFiles = new CKnownFileList(g_stEngine.Prefs.GetConfigDir());
		m_pSharedFiles = new CSharedFileList(&g_stEngine.Prefs, m_pKnownFiles);
		m_pFileHasher = new CFileHashControl;
		m_pFileHasher->Init();
d33 1
a33 7
		m_pSharedFiles->FindSharedFiles();
	}
	catch(...)
	{
		TRACE("Problems. Closing.\n");
		return false;
	}
d36 4
d44 8
a51 1
	try
d53 2
a54 16
		if(m_pSharedFiles)
		{
			delete m_pSharedFiles;
			m_pSharedFiles = NULL;
		}
		if(m_pKnownFiles)
		{
			delete m_pKnownFiles;
			m_pKnownFiles = NULL;
		}
		if(m_pFileHasher)
		{
			m_pFileHasher->Destroy();
			delete m_pFileHasher;
			m_pFileHasher = NULL;
		}
d56 1
a56 1
	catch(...)
d58 3
a60 1
		TRACE("Problems.\n");
d62 2
d68 13
a80 1
	m_dwWaitTimeout = 1000; // perform check once per second
d83 17
@


1.1
log
@Connecting preferences and known/shared files
@
text
@d9 1
d30 4
d48 16
@

