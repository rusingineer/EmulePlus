head	1.6;
access;
symbols
	PublicRelease_1_2e:1.6
	Interim_Release_1-2e_RC1:1.6
	PublicRelease_1_2d:1.6
	Interim_Release_1-2d_RC1:1.6
	Interim_Release_1-2d_beta1:1.6
	PublicRelease_1_2c:1.6
	Interim_Release_1-2c_RC1:1.6
	Interim_Release_1-2c_beta1:1.6
	PublicRelease_1_2b:1.6
	Interim_Release_1-2b_RC1:1.6
	PublicRelease_1_2a:1.6
	Interim_Release_1-2a_RC1:1.6
	Interim_Release_1-2a_beta2:1.6
	Interim_Release_1-2a_beta1:1.6
	PublicRelease_1_2:1.6
	Interim_Release_1-2_RC1:1.6
	Interim_Release_1-2_beta1:1.6
	PublicRelease_1_1g:1.6
	Interim_Release_1-1g_RC3:1.6
	Interim_Release_1-1g_RC2:1.6
	Interim_Release_1-1g_RC1:1.6
	Interim_Release_1-1g_beta2:1.6
	Interim_Release_1-1g_beta1:1.6
	PublicRelease_1_1f:1.6
	Interim_Release_1-1f_RC1:1.6
	PublicRelease_1_1e:1.6
	Interim_Release_1-1e_RC2:1.6
	Interim_Release_1-1e_RC1:1.6
	Interim_Release_1-1e_beta1:1.6
	PublicRelease_1_1d:1.6
	Interim_Release_1-1d_RC1:1.6
	PublicRelease_1_1c:1.6
	Interim_Release_1-1c_RC1:1.6
	Interim_Release_1-1c_beta2:1.6
	Interim_Release_1-1c_beta1:1.5
	PublicRelease_1_1b:1.4
	Interim_Release_1-1b_RC1:1.4
	PublicRelease_1_1a:1.4
	Interim_Release_1-1a_RC2:1.4
	Interim_Release_1-1a_RC1:1.4
	Interim_Release_1-1a_beta2:1.4
	Interim_Release_1-1a_beta1:1.4
	PublicRelease_1_1:1.4
	Interim_Release_1-1_beta1:1.4
	PublicRelease_1o:1.4
	Interim_Release_1o_RC1:1.4
	Interim_Release_1o_beta1:1.4
	PublicRelease_1n:1.4
	Interim_Release_1n_RC2:1.4
	Interim_Release_1n_RC1:1.4
	PublicRelease_1m:1.4
	Interim_Release_1m_beta1:1.4
	PublicRelease_1l:1.4
	Interim_Release_1l_RC3:1.3
	Interim_Release_1l_RC2:1.3
	Interim_Release_1l_RC1:1.3
	Interim_Release_1l_beta2:1.1
	Interim_Release_1l_beta1:1.1;
locks; strict;
comment	@ * @;


1.6
date	2005.02.03.15.14.15;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.29.16.04.22;	author kuchin;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.13.21.56.45;	author eklmn;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.23.15.59.14;	author eklmn;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.23.14.55.18;	author eklmn;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.21.16.36.26;	author eklmn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Ideological switch (may be considered as temporary, but for long term) - ATL to MFC
Actually we don't need them both, but I want to work with our current KnownFile-based classes, which use MFC a lot
@
text
@#pragma once
////////////////////////////////////////////////////////////////////////////////////////
// describes properties of the file-object that does not have data part (i.e. was downloaded & deleted)
// 
////////////////////////////////////////////////////////////////////////////////////////
/*
		  CKnownFile - CSharedFile - CPartFile
		/
CAbstractFile
		\
		  CSearchFile

*/
////////////////////////////////////////////////////////////////////////////////////////
#include "../EmEngine.h"
#include "AbstractFile.h"
#include "../Other/TagStream.h"
////////////////////////////////////////////////////////////////////////////////////////
// The keys include basic properties of file in ed2k-network (exclude filename)
struct FileKey {
	UCHAR	fileHash[16];
	DWORD	dwFileSize;
};
////////////////////////////////////////////////////////////////////////////////////////
enum FileDBTags
{
	//abstract file properties
	DBF_FILESIZE = 1,
	DBF_FILENAME,
	//known file properties
	DBT_LAST_WRITE_DATE,
	DBF_REQUESTED,
	DBF_ACCEPTED,
	DBF_TRANSFERRED,
	//shared file properties
	DBF_SHARED_STATUS,
	DBF_JUMPSTART,
	DBF_PRIORITY,
	DBF_AUTO_PRIORITY,
	DBF_VIEW_PERMISSION,
	DBF_SOURCE_SHARE
};
////////////////////////////////////////////////////////////////////////////////////////
class CUpDownClient;

class CKnownFile : public CAbstractFile
{
public:
	CKnownFile();
	~CKnownFile();

//	time properies
	uint32	GetFileDate()						{return m_timetLastWriteDate;}

//	statistical values
	void		AddRequest();
	uint32	GetSessionRequests()			{return m_dwSessionRequested;}
	uint32	GetCumulativeRequests()			{return m_dwSessionRequested;}
	void		SetCumulativeRequests(uint32 dwV)	{m_dwSessionRequested  = dwV;}
	
	void		AddAccepted();
	uint32	GetSessionAccepts()				{return m_dwSessionAccepted;}
	uint32	GetCumulativeAccepts()			{return m_dwCumulativeRequested;}
	void		SetCumulativeAccepts(uint32 dwV)		{m_dwCumulativeRequested = dwV;}

	void		AddTransferred(uint32 dwBytes);
	uint64	GetSessionTransferred()			{return m_qwSessionTransferred;}
	uint64	GetCumulativeTransferred()		{return m_qwCumulativeTransferred;}
	void		SetCumulativeTransferred(uint64 qwV)		{m_qwCumulativeTransferred = qwV;}

	void	SetPath(const CString& path) 	{ m_strKnownFileDirectory = path; }
	CString	GetPath() const					{return m_strKnownFileDirectory;}

	const CString& GetFilePath() const { return m_strFilePath; }
	void	SetFilePath(LPCTSTR pszFilePath);

	bool	LoadHashsetFromFile(CFile& file, bool checkhash);
	bool	LoadDateFromFile(CFile& file);

	void	CreateHashFromFile(CFile *file, uint32 dwLength, uchar *pbyteHash)	{CreateHashFromInput(file, dwLength, pbyteHash, 0);}

	void	CreateHashFromInput(CFile *file, uint32 dwLength, uchar *pbyteHash, uchar *pbyteMem);


//	Index callbacks
	//static int FileHashIndex(Db *pDb, const Dbt *pKey, const Dbt *pData, Dbt *pNewKey);

//	load & save the file properties
	virtual bool		Load();
	virtual bool		Save();

	virtual void 	GetFileTagsFromStream(CTagStream* pTagStream);
	virtual void 	PutFileTagsInStream(CTagStream* pTagStream);

protected:
	uint32	m_timetLastWriteDate;
	CString	m_strKnownFileDirectory;
	CString	m_strFilePath;

	uint32	lastseencomplete;

	vector<CFileTag*>	m_tagArray;
	vector<uchar*>		m_partHashArray;
	
private:
//	statistical variables
	uint32	m_dwSessionRequested;
	uint32	m_dwCumulativeRequested;

	uint32	m_dwSessionAccepted;
	uint32	m_dwCumulativeAccepted;

	uint64	m_qwSessionTransferred;
	uint64	m_qwCumulativeTransferred;
};
@


1.5
log
@There can be only one engine :-)
@
text
@d71 14
d86 1
a86 1
	static int FileHashIndex(Db *pDb, const Dbt *pKey, const Dbt *pData, Dbt *pNewKey);
d97 7
@


1.4
log
@changed the way of data storage in file classes, add new classes
@
text
@d56 1
a56 1
	void		AddRequest(CEmEngine& stEngine);
d61 1
a61 1
	void		AddAccepted(CEmEngine& stEngine);
d66 1
a66 1
	void		AddTransferred(CEmEngine& stEngine, uint32 dwBytes);
d75 2
a76 2
	virtual bool		Load(CEmEngine& stEngine);
	virtual bool		Save(CEmEngine& stEngine);
@


1.3
log
@small correction
@
text
@d1 1
a14 2
#pragma once

d17 1
d19 1
a19 6
// please remember to update in case of new tag addition
#define TAGSET_VERSION 1

#define MAX_FILENAME_LEN 255
////////////////////////////////////////////////////////////////////////////////////////
// The keys include basic properties of file in ed2k-network (exclude filename) & tag
a22 1
	USHORT	uTag;
a23 13

/*
struct KnowFileProperties {
	USHORT	uVersion;
	BYTE	szName[MAX_FILENAME_LEN*sizeof(TCHAR)];
	UCHAR	fileHash[16];
	DWORD	dwFileSize;
	DWORD	dwLastWriteDate;		//last time the data was updated
	DWORD	dwRequested;
	DWORD	dwAccepted;
	UINT64	dwTransferred;
};
*/
a26 1
	DBT_VERSION = 1,	//required to find out what tag were supported in the moment of data insertion
d28 1
a28 1
	DBF_FILESIZE,
d34 1
a34 1
	DBF_TRANSFERRED
d36 6
d53 1
a53 1
	uint32	GetFileDate()					{return m_timetLastWriteDate;}
d55 1
a55 1
	//statistical values
d59 1
d64 1
d69 1
d71 1
a71 1
	// Index callbacks
d74 6
a79 5
	//load & save the file properties
	bool		Load(CEmEngine& stEngine);
	bool		Save(CEmEngine& stEngine);
	bool		LoadTag(CEmEngine& stEngine, USHORT uTag, LPVOID pData, ULONG ulDataSize);
	bool		SaveTag(CEmEngine& stEngine, USHORT uTag, LPVOID pData, ULONG ulDataSize);
d81 1
a81 3
private:
	USHORT	m_uDataVersion;
	
d84 2
a85 1
	//statistical variables
@


1.2
log
@basic support of tags save into DB
@
text
@d83 1
a83 1
	static int PrimaryIndex(Db *pDb, const Dbt *pKey, const Dbt *pData, Dbt *pNewKey);
@


1.1
log
@refactored v1 code, need interface adaptation
@
text
@d11 1
d14 1
d16 5
a20 9
#pragma once
#include "otherstructs.h"
#include "packets.h"
#include "types.h"
#include <afxcoll.h>
#include <afxtempl.h>
#include <afxcmn.h>
#include "securedvars.h"
#include "PastComment.h"
d22 1
a22 2
#include "opcodes.h"
#include "Loggable.h"
d24 6
d31 27
d66 3
d82 9
d92 4
a104 3

public:
	
@

