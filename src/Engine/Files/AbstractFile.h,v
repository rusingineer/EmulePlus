head	1.5;
access;
symbols
	PublicRelease_1_2e:1.5
	Interim_Release_1-2e_RC1:1.5
	PublicRelease_1_2d:1.5
	Interim_Release_1-2d_RC1:1.5
	Interim_Release_1-2d_beta1:1.5
	PublicRelease_1_2c:1.5
	Interim_Release_1-2c_RC1:1.5
	Interim_Release_1-2c_beta1:1.5
	PublicRelease_1_2b:1.5
	Interim_Release_1-2b_RC1:1.5
	PublicRelease_1_2a:1.5
	Interim_Release_1-2a_RC1:1.5
	Interim_Release_1-2a_beta2:1.5
	Interim_Release_1-2a_beta1:1.5
	PublicRelease_1_2:1.5
	Interim_Release_1-2_RC1:1.5
	Interim_Release_1-2_beta1:1.5
	PublicRelease_1_1g:1.5
	Interim_Release_1-1g_RC3:1.5
	Interim_Release_1-1g_RC2:1.5
	Interim_Release_1-1g_RC1:1.5
	Interim_Release_1-1g_beta2:1.5
	Interim_Release_1-1g_beta1:1.5
	PublicRelease_1_1f:1.5
	Interim_Release_1-1f_RC1:1.5
	PublicRelease_1_1e:1.5
	Interim_Release_1-1e_RC2:1.5
	Interim_Release_1-1e_RC1:1.5
	Interim_Release_1-1e_beta1:1.5
	PublicRelease_1_1d:1.5
	Interim_Release_1-1d_RC1:1.5
	PublicRelease_1_1c:1.5
	Interim_Release_1-1c_RC1:1.5
	Interim_Release_1-1c_beta2:1.5
	Interim_Release_1-1c_beta1:1.4
	PublicRelease_1_1b:1.3
	Interim_Release_1-1b_RC1:1.3
	PublicRelease_1_1a:1.3
	Interim_Release_1-1a_RC2:1.3
	Interim_Release_1-1a_RC1:1.3
	Interim_Release_1-1a_beta2:1.3
	Interim_Release_1-1a_beta1:1.3
	PublicRelease_1_1:1.3
	Interim_Release_1-1_beta1:1.3
	PublicRelease_1o:1.3
	Interim_Release_1o_RC1:1.3
	Interim_Release_1o_beta1:1.3
	PublicRelease_1n:1.3
	Interim_Release_1n_RC2:1.3
	Interim_Release_1n_RC1:1.3
	PublicRelease_1m:1.3
	Interim_Release_1m_beta1:1.3
	PublicRelease_1l:1.3
	Interim_Release_1l_RC3:1.2
	Interim_Release_1l_RC2:1.2
	Interim_Release_1l_RC1:1.2
	Interim_Release_1l_beta2:1.1
	Interim_Release_1l_beta1:1.1;
locks; strict;
comment	@ * @;


1.5
date	2005.02.03.15.14.15;	author kuchin;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.29.16.04.22;	author kuchin;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.13.21.56.45;	author eklmn;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.23.14.55.18;	author eklmn;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.21.16.36.26;	author eklmn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Ideological switch (may be considered as temporary, but for long term) - ATL to MFC
Actually we don't need them both, but I want to work with our current KnownFile-based classes, which use MFC a lot
@
text
@////////////////////////////////////////////////////////////////////////////////////////
// describes basic properties of the file-object in ed2k-Network
////////////////////////////////////////////////////////////////////////////////////////
/*
		  CKnownFile - CSharedFile - CPartFile
		/
CAbstractFile
		\
		  CSearchFile
*/
////////////////////////////////////////////////////////////////////////////////////////
#include "../EmEngine.h"
#include "../Other/ed2k_filetype.h"
#include "../Other/MDX_Hash.h"
////////////////////////////////////////////////////////////////////////////////////////
#define MAX_FILENAME_LENGTH 250
////////////////////////////////////////////////////////////////////////////////////////
class CAbstractFile : public CLoggable
{
public:
	CAbstractFile() : m_strFileName(_T(""))
	{
		m_dwFileSize = 0;
		m_uPartCount = 0;
		m_dwED2KPartCount = 0;
		m_dwED2KPartHashCount = 0;
		m_eFileType = ED2KFT_ANY;
	}
	virtual ~CAbstractFile()
	{
	}
	CString	GetFileName() const				{return m_strFileName;}
	void	SetFileName(const CString& NewName);
	BOOL	IsFileNameEmpty()				{return m_strFileName.IsEmpty();}

	//filename related property
	CString			GetFileTypeString();
	EED2KFileType	GetFileType()			{return m_eFileType;}

	uint32	GetFileSize() const				{return m_dwFileSize;}
	void 	SetFileSize(uint32 dwFileSize);

	//filesize related properties
	uint16	GetPartCount() const			{return m_uPartCount;}
	uint32	GetED2KPartHashCount() const	{return m_dwED2KPartHashCount;}
	uint32	GetED2KPartCount() const		{return m_dwED2KPartCount;}
	uint32	GetPartSize(uint16 uPart);


	//file hash
	const uchar*	GetFileHash() const			{return m_fileHash;}
	void	SetFileHash(uchar* pNewFileHash) 	{memcpy(&m_fileHash,pNewFileHash,16);}

	virtual CString CreateED2kLink() const;
	virtual CString CreateED2kSourceLink() const;
	virtual CString CreateHTMLED2kLink() const;

protected:
	CString		m_strFileName;
	uchar		m_fileHash[16];
	uint32		m_dwFileSize;

private:
	uint16			m_uPartCount;
	uint32			m_dwED2KPartCount;
	uint32			m_dwED2KPartHashCount;
	EED2KFileType 	m_eFileType;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The  file function outside the classes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CString StripInvalidFilenameChars(CString strText, bool bKeepSpaces);
@


1.4
log
@There can be only one engine :-)
@
text
@d18 1
a18 1
class CAbstractFile
d32 3
a34 3
	CString	GetFileName() const		{return m_strFileName;}
	void		SetFileName(const CString& NewName);
	BOOL		IsFileNameEmpty()		{return m_strFileName.IsEmpty();}
d38 1
a38 1
	EED2KFileType	GetFileType()		{return m_eFileType;}
d44 1
a44 1
	uint16	GetPartCount() const				{return m_uPartCount;}
d46 1
a46 1
	uint32	GetED2KPartCount() const			{return m_dwED2KPartCount;}
@


1.3
log
@changed the way of data storage in file classes, add new classes
@
text
@d33 1
a33 1
	void		SetFileName(CEmEngine& stEngine, const CString& NewName);
d41 1
a41 1
	void 	SetFileSize(CEmEngine& stEngine, uint32 dwFileSize);
@


1.2
log
@basic support of tags save into DB
@
text
@d34 1
a34 1
	bool		IsFileNameEmpty()		{return m_strFileName.IsEmpty();}
@


1.1
log
@refactored v1 code, need interface adaptation
@
text
@d12 7
a18 3
#include "ed2k_filetype.h"

class CAbstractFile : public CLoggable
a27 1
		m_fileHash = NULL;
d37 1
a37 1
	CString			GetFileType();
d52 1
d70 4
@

