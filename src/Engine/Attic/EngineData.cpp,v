head	1.4;
access;
symbols
	Interim_Release_1j_beta1:1.2;
locks; strict;
comment	@// @;


1.4
date	2004.01.07.10.54.30;	author kuchin;	state dead;
branches;
next	1.3;

1.3
date	2004.01.07.09.17.54;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.23.18.13.43;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.16.17.44.22;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@New engine - cosmetic changes
@
text
@// EngineData.cpp
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "EmEngine.h"
#include "EngineData.h"
#include "Sockets/TasksSockets.h"

//////////////////////////////////////////////////////////////////////
CEngineData::CEngineData(CEmEngine& stEngine)
: m_stEngine(stEngine)
{
	m_stServer.nConnState = SERVER_DISCONNECTED;
	m_stServer.hSocket = NULL;
	m_stServer.nAddr = 0;
	m_stServer.nPort = 0;
	m_stServer.nClientID = 0;

	m_pServerList = NULL;
}

//////////////////////////////////////////////////////////////////////
CEngineData::~CEngineData()
{
}

//////////////////////////////////////////////////////////////////////
bool CEngineData::IsConnecting()
{
	return (m_stServer.nConnState == SERVER_CONNECTING || 
			m_stServer.nConnState == SERVER_WAITFORLOGIN); 
}

//////////////////////////////////////////////////////////////////////
bool CEngineData::IsConnected()
{ 
	return (m_stServer.nConnState == SERVER_CONNECTED);
}

//////////////////////////////////////////////////////////////////////
bool CEngineData::IsLowID()
{ 
	return (m_stServer.nClientID < 0x1000000); 
}

//////////////////////////////////////////////////////////////////////
// Executed in GUI thread
void CEngineData::ImportServerState(CTask_ServerState* pTask)
{
/*	if(!pTask)
	{
		ASSERT(FALSE);
		return;
	}

	// should keep independent serverlist in the future
	if(!m_pServerList)
		m_pServerList = g_eMuleApp.m_pServerList;

	if(m_nClientID != pTask->m_nClientID)
	{
		m_nClientID = pTask->m_nClientID;
		AddLogLine(false, IDS_NEWCLIENTID, m_nClientID);
	}

	pState->pServer = m_pServerList->GetServerByIP(pState->nAddr, pState->nPort);

	if(pState->nConnState != pTask->m_stState.nConnState)
	{
		pState->nConnState = pTask->m_stState.nConnState;
		switch(pState->nConnState)
		{
		case SERVER_DISCONNECTED:
			if(m_stConnected.nConnState == SERVER_DISCONNECTED)
				g_eMuleApp.m_pdlgEmule->ShowConnectionState(false);
			break;
		case SERVER_CONNECTING:
			g_eMuleApp.m_pdlgEmule->ShowConnectionState(false);
			break;
		case SERVER_WAITFORLOGIN:
			if(m_stConnecting.pServer)
				AddLogLine(false, IDS_CONNECTEDTOREQ,
					m_stConnecting.pServer->GetListName(),
					m_stConnecting.pServer->GetFullIP(),
					m_stConnecting.pServer->GetPort());
			break;
		case SERVER_CONNECTED:
			if(m_stConnected.pServer)
			{
				AddLogLine(true, IDS_CONNECTEDTO, m_stConnected.pServer->GetListName());
				g_eMuleApp.m_pdlgEmule->ShowConnectionState(true, m_stConnected.pServer->GetListName());
//				if(IsLowID())
//					AddLogLine(false, GetResString(IDS_GOTLOWID));

				// Write online signature
				g_eMuleApp.OnlineSig();

				// Resume downloading files
				g_eMuleApp.m_pDownloadQueue->ResumeFiles();

				m_stEngine.SendSharedListToServer();
			}
			break;
		}
	}*/
}

//////////////////////////////////////////////////////////////////////
void CEngineData::SetConnectionState(short nConnectionState)
{
	m_stServer.nConnState = nConnectionState;
	// Export connection state
	switch(nConnectionState)
	{
	case SERVER_DISCONNECTED:
		m_stServer.hSocket = NULL;
		m_stServer.nAddr = 0;
		m_stServer.nPort = 0;
		m_stServer.nClientID = 0;
		TRACE("CONNECTION STATE CHANGE: DISCONNECTED\n");
		break;
	case SERVER_CONNECTING:
		TRACE("CONNECTION STATE CHANGE: CONNECTING\n");
		break;
	case SERVER_WAITFORLOGIN:
		TRACE("CONNECTION STATE CHANGE: WAITING FOR LOGIN\n");
		break;
	case SERVER_CONNECTED:
		TRACE("CONNECTION STATE CHANGE: CONNECTED\n");
		break;
	}
}

//////////////////////////////////////////////////////////////////////
void CEngineData::SetClientID(long cID)
{
	m_stServer.nClientID = cID; 
}

//////////////////////////////////////////////////////////////////////
void CEngineData::ConnectedTo(CEmClient_Server* pClient)
{
	m_stServer.hSocket = pClient->m_hSocket;
	m_stServer.nAddr = pClient->m_nAddr;
	m_stServer.nPort = pClient->m_uPort;
}

//////////////////////////////////////////////////////////////////////
bool CEngineData::IsLocalServer(ULONG nAddr, USHORT uPort)
{
	if(!IsConnected())
		return false;
/*	if(m_stConnected.pServer)
	{
		if (m_stConnected.pServer->GetIP() == nAddr &&
			m_stConnected.pServer->GetPort() == uPort)
			return true;
	}*/
	return false;
}

//////////////////////////////////////////////////////////////////////

#ifdef _DEBUG
static BYTE g_arrUserHash[16] = { 0x6c, 0x7c, 0x5d, 0x3b, 0x90, 0x0e, 0x11, 0x3f, 0xb1, 0x5c, 0x1c, 0x2e, 0xe8, 0x19, 0x6f, 0x59 };
#endif //_DEBUG

BYTE* CEngineData::GetUserHash()
{
//	return g_eMuleApp.m_pGlobPrefs->GetUserHash();
	return g_arrUserHash;
}

USHORT CEngineData::GetPort()
{
//	return g_eMuleApp.m_pGlobPrefs->GetPort();
	return 4662;
}

CString CEngineData::GetUserNick()
{
//	return g_eMuleApp.m_pGlobPrefs->GetUserNick();
	return _T("ePlus v2 debug (rus)(de)");
}
//////////////////////////////////////////////////////////////////////
@


1.3
log
@New engine - cosmetic changes
@
text
@@


1.2
log
@New engine - connecting to server
@
text
@a9 2
#ifdef NEW_SOCKETS

a186 2

#endif //NEW_SOCKETS@


1.1
log
@New engine
@
text
@d16 5
a20 13
	m_stConnected.nConnState = SERVER_DISCONNECTED;
	m_stConnected.hSocket = NULL;
	m_stConnected.nAddr = 0;
	m_stConnected.nPort = 0;
	m_stConnected.pServer = NULL;

	m_stConnecting.nConnState = SERVER_DISCONNECTED;
	m_stConnecting.hSocket = NULL;
	m_stConnecting.nAddr = 0;
	m_stConnecting.nPort = 0;
	m_stConnecting.pServer = NULL;

	m_nClientID = 0;
d33 2
a34 2
	return (m_stConnecting.nConnState == SERVER_CONNECTING || 
			m_stConnecting.nConnState == SERVER_WAITFORLOGIN); 
d40 1
a40 1
	return (m_stConnected.nConnState == SERVER_CONNECTED);
d46 1
a46 1
	return (m_nClientID < 0x1000000); 
d69 1
a69 6
	ServerState* pState = pTask->m_bForConnected ? &m_stConnected : &m_stConnecting;
	pState->hSocket = pTask->m_stState.hSocket;
	pState->nAddr = pTask->m_stState.nAddr;
	pState->nPort = pTask->m_stState.nPort;
	if(pState->pServer == NULL && m_pServerList && pState->nAddr != 0)
		pState->pServer = m_pServerList->GetServerByIP(pState->nAddr, pState->nPort);
d112 1
a112 1
void CEngineData::SetConnectionState(bool bForConnected, short nConnectionState)
d114 2
a115 3
	ServerState* pState = bForConnected ? &m_stConnected : &m_stConnecting;
	pState->nConnState = nConnectionState;	

d119 5
a123 4
		pState->hSocket = NULL;
		pState->nAddr = 0;
		pState->nPort = 0;
		pState->pServer = NULL;
d126 1
d129 1
d132 1
a132 9
		m_stConnected.hSocket = m_stConnecting.hSocket;
		m_stConnected.nAddr = m_stConnecting.nAddr;
		m_stConnected.nPort = m_stConnecting.nPort;
		m_stConnected.pServer = m_stConnecting.pServer;
		m_stConnecting.hSocket = NULL;
		m_stConnecting.pServer = NULL;
		m_stConnected.nConnState = SERVER_CONNECTED;
		m_stConnecting.nConnState = SERVER_DISCONNECTED;
		bForConnected = true;
d140 1
a140 10
	m_nClientID = cID; 
}

//////////////////////////////////////////////////////////////////////
void CEngineData::ConnectingTo(CEmClient_Server* pClient)
{
	m_stConnecting.hSocket = pClient->m_hSocket;
//	m_stConnecting.pServer = m_pServerList->GetServerByIP(pClient->m_nAddr, pClient->m_uPort);
	m_stConnecting.nAddr = pClient->m_nAddr;
	m_stConnecting.nPort = pClient->m_uPort;
d146 3
a148 4
	m_stConnected.hSocket = pClient->m_hSocket;
//	m_stConnected.pServer = m_pServerList->GetServerByIP(pClient->m_nAddr, pClient->m_uPort);
	m_stConnected.nAddr = pClient->m_nAddr;
	m_stConnected.nPort = pClient->m_uPort;
a165 2
// in the future, those functions should get data from local storage,
// not from global preferences
d180 1
a180 1
	return 4611;
@

