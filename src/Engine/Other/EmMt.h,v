head	1.2;
access;
symbols
	PublicRelease_1_2e:1.2
	Interim_Release_1-2e_RC1:1.2
	PublicRelease_1_2d:1.2
	Interim_Release_1-2d_RC1:1.2
	Interim_Release_1-2d_beta1:1.2
	PublicRelease_1_2c:1.2
	Interim_Release_1-2c_RC1:1.2
	Interim_Release_1-2c_beta1:1.2
	PublicRelease_1_2b:1.2
	Interim_Release_1-2b_RC1:1.2
	PublicRelease_1_2a:1.2
	Interim_Release_1-2a_RC1:1.2
	Interim_Release_1-2a_beta2:1.2
	Interim_Release_1-2a_beta1:1.2
	PublicRelease_1_2:1.2
	Interim_Release_1-2_RC1:1.2
	Interim_Release_1-2_beta1:1.2
	PublicRelease_1_1g:1.2
	Interim_Release_1-1g_RC3:1.2
	Interim_Release_1-1g_RC2:1.2
	Interim_Release_1-1g_RC1:1.2
	Interim_Release_1-1g_beta2:1.2
	Interim_Release_1-1g_beta1:1.2
	PublicRelease_1_1f:1.2
	Interim_Release_1-1f_RC1:1.2
	PublicRelease_1_1e:1.2
	Interim_Release_1-1e_RC2:1.2
	Interim_Release_1-1e_RC1:1.2
	Interim_Release_1-1e_beta1:1.2
	PublicRelease_1_1d:1.2
	Interim_Release_1-1d_RC1:1.2
	PublicRelease_1_1c:1.2
	Interim_Release_1-1c_RC1:1.2
	Interim_Release_1-1c_beta2:1.2
	Interim_Release_1-1c_beta1:1.2
	PublicRelease_1_1b:1.2
	Interim_Release_1-1b_RC1:1.2
	PublicRelease_1_1a:1.2
	Interim_Release_1-1a_RC2:1.2
	Interim_Release_1-1a_RC1:1.2
	Interim_Release_1-1a_beta2:1.2
	Interim_Release_1-1a_beta1:1.2
	PublicRelease_1_1:1.2
	Interim_Release_1-1_beta1:1.2
	PublicRelease_1o:1.2
	Interim_Release_1o_RC1:1.2
	Interim_Release_1o_beta1:1.2
	PublicRelease_1n:1.2
	Interim_Release_1n_RC2:1.2
	Interim_Release_1n_RC1:1.2
	PublicRelease_1m:1.2
	Interim_Release_1m_beta1:1.2
	PublicRelease_1l:1.2
	Interim_Release_1l_RC3:1.2
	Interim_Release_1l_RC2:1.2
	Interim_Release_1l_RC1:1.2
	Interim_Release_1l_beta2:1.2
	Interim_Release_1l_beta1:1.2
	PublicRelease_1k:1.2
	Interim_Release_1k_RC4:1.2
	Interim_1k_RC3:1.2
	Interim_1k_RC2:1.2
	Interim_Release_1k_RC1:1.2
	Interim_Release_1k_beta5:1.2
	Intrerim_Release_1k_beta4:1.2
	Interim_Release_1k_beta1:1.2
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.01.07.09.18.16;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.16.17.44.22;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@New engine - cosmetic changes
@
text
@// EmMt.h
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_ARLMT_H__6886ED1D_C47B_48B7_9467_47E10EF205E7__INCLUDED_)
#define AFX_ARLMT_H__6886ED1D_C47B_48B7_9467_47E10EF205E7__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "EmWinNT.h"

#ifndef CCriticalSection_INL_implemented
#define CCriticalSection_INL_implemented
class CCriticalSection_INL : public CRITICAL_SECTION {

	DWORD m_dwSafeValue;
	static const DWORD s_dwSafeValue;
public:
	inline CCriticalSection_INL() { InitializeCriticalSection(this); m_dwSafeValue = s_dwSafeValue; }
	inline ~CCriticalSection_INL() { m_dwSafeValue = 0; DeleteCriticalSection(this); }
	inline void Enter() { if (m_dwSafeValue == s_dwSafeValue) EnterCriticalSection(this); }
	inline void Leave() { if (m_dwSafeValue == s_dwSafeValue) LeaveCriticalSection(this); }

	// The following function will just return FALSE unless we are running in WinNT
	inline BOOL TryEnter() { return
		(m_dwSafeValue == s_dwSafeValue) &&
		CEmWinNT::s_stWinNT.IsInitialized() &&
		CEmWinNT::s_stWinNT.m_pfnTryEnterCriticalSection(this);
	}

	class CScope {
		CCriticalSection_INL& m_csLock;
	public:
		inline CScope(CCriticalSection_INL& csLock) : m_csLock(csLock) { m_csLock.Enter(); }
		inline CScope(CScope& stOther) : m_csLock(stOther.m_csLock) { m_csLock.Enter(); }
		inline ~CScope()	{ m_csLock.Leave(); }
	};

	inline CScope zget_Scope() { CScope stScope(*this); return stScope; }
	__declspec (property(get=zget_Scope)) CScope _Scope;
};

#endif // CCriticalSection_INL_implemented

#endif // !defined(AFX_ARLMT_H__6886ED1D_C47B_48B7_9467_47E10EF205E7__INCLUDED_)
@


1.1
log
@New engine
@
text
@d4 1
a4 1
#ifdef NEW_SOCKETS
a47 1
#endif@

