head	1.3;
access;
symbols
	PublicRelease_1_2e:1.3
	Interim_Release_1-2e_RC1:1.3
	PublicRelease_1_2d:1.3
	Interim_Release_1-2d_RC1:1.3
	Interim_Release_1-2d_beta1:1.3
	PublicRelease_1_2c:1.3
	Interim_Release_1-2c_RC1:1.3
	Interim_Release_1-2c_beta1:1.3
	PublicRelease_1_2b:1.3
	Interim_Release_1-2b_RC1:1.3
	PublicRelease_1_2a:1.3
	Interim_Release_1-2a_RC1:1.3
	Interim_Release_1-2a_beta2:1.3
	Interim_Release_1-2a_beta1:1.3
	PublicRelease_1_2:1.3
	Interim_Release_1-2_RC1:1.3
	Interim_Release_1-2_beta1:1.3
	PublicRelease_1_1g:1.3
	Interim_Release_1-1g_RC3:1.3
	Interim_Release_1-1g_RC2:1.3
	Interim_Release_1-1g_RC1:1.3
	Interim_Release_1-1g_beta2:1.3
	Interim_Release_1-1g_beta1:1.3
	PublicRelease_1_1f:1.3
	Interim_Release_1-1f_RC1:1.3
	PublicRelease_1_1e:1.3
	Interim_Release_1-1e_RC2:1.3
	Interim_Release_1-1e_RC1:1.3
	Interim_Release_1-1e_beta1:1.3
	PublicRelease_1_1d:1.3
	Interim_Release_1-1d_RC1:1.3
	PublicRelease_1_1c:1.3
	Interim_Release_1-1c_RC1:1.3
	Interim_Release_1-1c_beta2:1.3
	Interim_Release_1-1c_beta1:1.3
	PublicRelease_1_1b:1.3
	Interim_Release_1-1b_RC1:1.3
	PublicRelease_1_1a:1.3
	Interim_Release_1-1a_RC2:1.3
	Interim_Release_1-1a_RC1:1.3
	Interim_Release_1-1a_beta2:1.3
	Interim_Release_1-1a_beta1:1.3
	PublicRelease_1_1:1.3
	Interim_Release_1-1_beta1:1.3
	PublicRelease_1o:1.3
	Interim_Release_1o_RC1:1.3
	Interim_Release_1o_beta1:1.3
	PublicRelease_1n:1.3
	Interim_Release_1n_RC2:1.3
	Interim_Release_1n_RC1:1.3
	PublicRelease_1m:1.2
	Interim_Release_1m_beta1:1.2
	PublicRelease_1l:1.2
	Interim_Release_1l_RC3:1.2
	Interim_Release_1l_RC2:1.2
	Interim_Release_1l_RC1:1.2
	Interim_Release_1l_beta2:1.2
	Interim_Release_1l_beta1:1.2
	PublicRelease_1k:1.2
	Interim_Release_1k_RC4:1.2
	Interim_1k_RC3:1.2
	Interim_1k_RC2:1.2
	Interim_Release_1k_RC1:1.2
	Interim_Release_1k_beta5:1.2
	Intrerim_Release_1k_beta4:1.2
	Interim_Release_1k_beta1:1.2
	PublicRelease_1j:1.2
	Interim_Release_1J_RC3:1.2
	Interim_Release_1j_RC3:1.2
	Interim_Release_1j_RC2:1.2
	Interim_Release_1j_RC1:1.2
	Interim_Release_1j_beta2:1.2
	Interim_Release_1j_beta1:1.1;
locks; strict;
comment	@// @;


1.3
date	2004.06.30.13.39.03;	author dongato;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.07.09.18.16;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.16.17.44.22;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed AddDebugLogLine statusbar message option, added client transfer debug log option
@
text
@// EmWinNt.cpp: implementation of the CEmWinNt class.
//
//////////////////////////////////////////////////////////////////////
#include "StdAfx.h"

#include "EmWinNT.h"

void CEmDynModule::Uninit()
{
	if (m_hDll)
	{
		if (!FreeLibrary(m_hDll))
			AddDebugLogLine("FreeLibrary failed");
		m_hDll = NULL;
	}
}

CEmWinNT CEmWinNT::s_stWinNT;

CEmWinNT::CEmWinNT()
{
	// first of all determine if we are running on NT system
	OSVERSIONINFO stVersionInfo;
	stVersionInfo.dwOSVersionInfoSize = sizeof(stVersionInfo);

	if(GetVersionEx(&stVersionInfo) && (stVersionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))
		if (m_hDll = LoadLibrary(_T("kernel32.dll")))
			// Obtain now pointers to desired functions
			if (
				!(m_pfnCreateIoCompletionPort = (HANDLE (WINAPI *)(HANDLE, HANDLE, DWORD, DWORD)) GetProcAddress(m_hDll, "CreateIoCompletionPort")) ||
				!(m_pfnGetQueuedCompletionStatus = (BOOL (WINAPI *)(HANDLE, PDWORD, PDWORD, OVERLAPPED**, DWORD)) GetProcAddress(m_hDll, "GetQueuedCompletionStatus")) ||
				!(m_pfnPostQueuedCompletionStatus = (BOOL (WINAPI *)(HANDLE, DWORD, DWORD, OVERLAPPED*)) GetProcAddress(m_hDll, "PostQueuedCompletionStatus")) ||
				!(m_pfnTryEnterCriticalSection = (BOOL (WINAPI *)(CRITICAL_SECTION*)) GetProcAddress(m_hDll, "TryEnterCriticalSection")))
				Uninit(); // one or more exports are missing
}

CEmMswSock::CEmMswSock()
{
	// first of all determine if we are running on NT system
	OSVERSIONINFO stVersionInfo;
	stVersionInfo.dwOSVersionInfoSize = sizeof(stVersionInfo);

	if(GetVersionEx(&stVersionInfo) && (stVersionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))
		if (m_hDll = LoadLibrary(_T("mswsock.dll")))
			// Obtain now pointers to desired functions
			if (
				!(m_pfnAcceptEx = (BOOL (WINAPI *)(SOCKET, SOCKET, PVOID, DWORD, DWORD, DWORD, DWORD*, OVERLAPPED*)) GetProcAddress(m_hDll, "CreateIoCompletionPort")) ||
				!(m_pfnGetAcceptExSockaddrs = (void (WINAPI *)(PVOID, DWORD, DWORD, DWORD, SOCKADDR**, int*, SOCKADDR**, int*)) GetProcAddress(m_hDll, "GetQueuedCompletionStatus")))
				Uninit(); // one or more exports are missing
}
@


1.2
log
@New engine - cosmetic changes
@
text
@d13 1
a13 1
			AddDebugLogLine(false, "FreeLibrary failed");
@


1.1
log
@New engine
@
text
@a4 1
#ifdef NEW_SOCKETS
a50 1
#endif@

