head	1.3;
access;
symbols
	PublicRelease_1_2e:1.3
	Interim_Release_1-2e_RC1:1.3
	PublicRelease_1_2d:1.3
	Interim_Release_1-2d_RC1:1.3
	Interim_Release_1-2d_beta1:1.3
	PublicRelease_1_2c:1.3
	Interim_Release_1-2c_RC1:1.3
	Interim_Release_1-2c_beta1:1.3
	PublicRelease_1_2b:1.3
	Interim_Release_1-2b_RC1:1.3
	PublicRelease_1_2a:1.3
	Interim_Release_1-2a_RC1:1.3
	Interim_Release_1-2a_beta2:1.3
	Interim_Release_1-2a_beta1:1.3
	PublicRelease_1_2:1.3
	Interim_Release_1-2_RC1:1.3
	Interim_Release_1-2_beta1:1.3
	PublicRelease_1_1g:1.3
	Interim_Release_1-1g_RC3:1.3
	Interim_Release_1-1g_RC2:1.3
	Interim_Release_1-1g_RC1:1.3
	Interim_Release_1-1g_beta2:1.3
	Interim_Release_1-1g_beta1:1.3
	PublicRelease_1_1f:1.3
	Interim_Release_1-1f_RC1:1.3
	PublicRelease_1_1e:1.3
	Interim_Release_1-1e_RC2:1.3
	Interim_Release_1-1e_RC1:1.3
	Interim_Release_1-1e_beta1:1.3;
locks; strict;
comment	@ * @;


1.3
date	2005.04.08.11.09.34;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.06.05.24.57;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.29.14.36.13;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@v2 - increased level of abstraction + minor improvements
@
text
@// ClientList.h: interface for the CClientList class.
//
//////////////////////////////////////////////////////////////////////

#pragma once

#include "Client.h"

typedef map<CClient*, bool>	ClientMap;
typedef deque<CClient*>		ClientQueue;

class CClientList : public CLoggable2
{
public:
	CClientList();
	virtual ~CClientList();

	void AddClient(CClient* pClient);
	void RemoveClient(CClient* pClient);

	CClientMule* FindMuleClient(AddrPort Addr);
	CClientMule* FindMuleClient(HashType Hash);
	bool IsValidClient(CClient* pClient);
	int GetWaitingPosition(CClientMule* pClient);

	void AddToWaitingQueue(CClient* pClient);
	bool RemoveFromWaitingQueue(CClient* pClient);

	void CheckAcceptNewClient();
	void PurgeBadClients();
	bool RemoveFromUploadQueue(CClient* pClient, EnumEndTransferSession eReason);

	void ProcessUpload();

private:
	ClientMap m_Clients;
	ClientMap m_Waiting;
	ClientQueue m_Uploading;
};
@


1.2
log
@v2 - more upload logic
@
text
@d9 2
a10 1
typedef map<CClient*, bool> ClientMap;
d38 1
a38 1
	ClientMap m_Uploading;
@


1.1
log
@v2 - increasing level of abstraction, more upload logic
@
text
@d32 2
@

