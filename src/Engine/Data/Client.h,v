head	1.13;
access;
symbols
	PublicRelease_1_2e:1.13
	Interim_Release_1-2e_RC1:1.13
	PublicRelease_1_2d:1.13
	Interim_Release_1-2d_RC1:1.13
	Interim_Release_1-2d_beta1:1.13
	PublicRelease_1_2c:1.13
	Interim_Release_1-2c_RC1:1.13
	Interim_Release_1-2c_beta1:1.13
	PublicRelease_1_2b:1.13
	Interim_Release_1-2b_RC1:1.13
	PublicRelease_1_2a:1.13
	Interim_Release_1-2a_RC1:1.13
	Interim_Release_1-2a_beta2:1.13
	Interim_Release_1-2a_beta1:1.13
	PublicRelease_1_2:1.13
	Interim_Release_1-2_RC1:1.13
	Interim_Release_1-2_beta1:1.13
	PublicRelease_1_1g:1.13
	Interim_Release_1-1g_RC3:1.13
	Interim_Release_1-1g_RC2:1.13
	Interim_Release_1-1g_RC1:1.13
	Interim_Release_1-1g_beta2:1.13
	Interim_Release_1-1g_beta1:1.13
	PublicRelease_1_1f:1.13
	Interim_Release_1-1f_RC1:1.13
	PublicRelease_1_1e:1.13
	Interim_Release_1-1e_RC2:1.13
	Interim_Release_1-1e_RC1:1.13
	Interim_Release_1-1e_beta1:1.13
	PublicRelease_1_1d:1.6
	Interim_Release_1-1d_RC1:1.3;
locks; strict;
comment	@ * @;


1.13
date	2005.04.07.17.24.47;	author kuchin;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.06.05.24.57;	author kuchin;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.04.06.07.11;	author kuchin;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.29.14.36.12;	author kuchin;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.27.05.01.42;	author kuchin;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.22.22.02.09;	author kuchin;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.22.15.54.09;	author kuchin;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.18.15.35.55;	author kuchin;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.17.19.28.44;	author kuchin;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.15.20.00.27;	author kuchin;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.13.19.29.58;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.11.14.44.43;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.08.17.09.26;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.13
log
@v2 - fixes for upload logic
@
text
@// Client.h: interface for the CClient class.
//
//////////////////////////////////////////////////////////////////////

#pragma once

#include "../../OtherFunctions.h"

enum EnumClientType
{
	CLIENT_MULE
};

struct CEmClient_Peer;

class CClient : public CLoggable2
{
public:
	CClient();
	virtual ~CClient();

	// Basics
	__declspec(property(get=_GetClientType)) EnumClientType Type;
	__declspec(property(get=_GetParent, put=_PutParent))	CEmClient_Peer*	Parent;
	__declspec(property(get=_GetClientAddr/*,put=_PutClientAddr*/))	in_addr	ClientAddr;
	__declspec(property(get=_GetClientPort, put=_PutClientPort))	USHORT	ClientPort;

	virtual EnumClientType _GetClientType() = 0;
	CEmClient_Peer* _GetParent() const { return m_pParent; }
	in_addr	_GetClientAddr() { return *reinterpret_cast<in_addr*>(&m_Addr.Addr); }
	USHORT	_GetClientPort() const { return m_Addr.Port; }

	void _PutParent(CEmClient_Peer* pParent){ m_pParent = pParent; }

	// Comparison
	virtual bool operator==(const CClient* pClient) = 0;
	virtual bool operator==(const AddrPort Addr);

	// Connection state
	virtual void OnConnected(){ m_bConnected = true; }
	virtual void OnDisconnected(){ m_bConnected = false; m_pParent = NULL; }

	__declspec(property(get=_GetConnected)) bool Connected;

	bool _GetConnected() const { return m_bConnected; }

	// Identification
	__declspec(property(get=_GetUserName, put=_PutUserName)) CString UserName;

	CString	_GetUserName() const { return m_sUserName; }
	void _PutUserName(CString sUserName) { m_sUserName = sUserName; }
	void _PutClientPort(USHORT nPort){ m_Addr.Port = nPort; }

	USHORT	ClientCountry(){ return m_uCountry; }

	// Upload to client
	__declspec(property(get=_GetUpState, put=_PutUpState))		EnumULQState	UploadState;
	__declspec(property(get=_GetReqFile))						CKnownFile*		ReqFile;
	__declspec(property(get=_GetLastUpReq))						CPreciseTime	LastUploadRequest;
	__declspec(property(get=_GetWaitTime, put=_PutWaitTime))	CPreciseTime	WaitStartTime;

	EnumULQState _GetUpState() const { return m_eUploadState; }
	CKnownFile* _GetReqFile() const { return m_pReqFile; }
	CPreciseTime _GetLastUpReq() const { return m_tmLastUpRequest; }
	CPreciseTime _GetWaitTime() const { return m_tmWaitStartTime; }

	void _PutUpState(EnumULQState eUploadState){ m_eUploadState = eUploadState; }
	void _PutWaitTime(CPreciseTime tmWaitTime){ m_tmWaitStartTime = tmWaitTime; }

	// Download from client
	__declspec(property(get=_GetDownState, put=_PutDownState))	EnumDLQState	DownloadState;

	EnumDLQState _GetDownState() const { return m_eDownloadState; }

	void _PutDownState(EnumDLQState eDownloadState){ m_eDownloadState = eDownloadState; }

protected:
	// Basics
	CEmClient_Peer*	m_pParent;

	// Connection data
	AddrPort	m_Addr;
	CString		m_sFullIP;
	bool		m_bConnected;

	// Identification
	CString		m_sUserName;
	USHORT		m_uCountry;

	// Upload
	EnumULQState	m_eUploadState;
	CKnownFile*		m_pReqFile;
	CPreciseTime	m_tmLastUpRequest;
	CPreciseTime	m_tmWaitStartTime;

	// Download
	EnumDLQState	m_eDownloadState;
};

class CClientMule : public CClient
{
public:
	CClientMule(AddrPort Addr, HashType Hash);
	virtual ~CClientMule();

	virtual EnumClientType _GetClientType(){ return CLIENT_MULE; };

	// Comparison
	virtual bool operator==(const CClient* pClient);
	virtual bool operator==(const HashType Hash);

	// Connection state
	virtual void OnConnected();
	virtual void OnDisconnected();

	EnumClientTypes GetHashType();

	// Connection data, identification
	__declspec(property(put=_PutClientUDPPort))	USHORT	ClientUDPPort;
	__declspec(property(get=_GetClientVersion, put=_PutClientVersion))	DWORD	ClientVersion;
	__declspec(property(get=_GetMuleVersion, put=_PutMuleVersion))		BYTE	MuleVersion;
	__declspec(property(get=_GetClientSoft))	EnumClientTypes	ClientSoft;
	__declspec(property(get=_ExtProtocol))		bool	MuleProtocol;

	DWORD	_GetClientVersion() const { return m_dwClientVersion; }
	BYTE	_GetMuleVersion() const { return m_nEmuleVersion; }
	EnumClientTypes _GetClientSoft() const { return m_eClientSoft; }
	bool	_ExtProtocol() const { return m_bEmuleProtocol; }

	void _PutClientUDPPort(USHORT nUDPPort){ m_nUDPPort = nUDPPort; }
	void _PutClientVersion(DWORD dwClientVersion){ m_dwClientVersion = dwClientVersion; }
	void _PutMuleVersion(BYTE nMuleVersion);

	// Uploading
	void RequestFile(CKnownFile* pFile);
	void RequestFileBlock(CKnownFile* pFile, DWORD dwStart, DWORD dwEnd);
	void SendRankingInfo();

	bool SendNextBlockData(DWORD dwMaxSize, bool bPrioritized);
	bool IsNeedMercyPacket();

	__declspec(property(get=_GetScore))	int Score;

	int _GetScore(){ return 0; }

private:
	// Additional connection data
	USHORT	m_nUDPPort;

	// Come from server
	AddrPort	m_ServerAddr;

	// Additional identification
	DWORD		m_dwUserID;
	HashType	m_Hash;

	// Software identification
	EnumClientTypes	m_eClientSoft;
	CString	m_sClientSoft;
	DWORD	m_dwClientVersion;
	DWORD	m_dwPlusVers;
	BYTE	m_nEmuleVersion;
	BYTE	m_nCompatibleClient;
	bool	m_bIsHybrid;
	bool	m_bIsMLDonkey;

	// Supported protocols & features
	bool	m_bIsLowID;
	bool	m_bEmuleProtocol;
	BYTE	m_nAcceptCommentVer;
	BYTE	m_nDataCompVer;
	BYTE	m_nExtendedRequestsVer;
	BYTE	m_nSourceExchangeVer;
	BYTE	m_nUDPVer;
	BYTE	m_nSupportSecIdent;

	// Upload data
	struct RequestRange
	{
		DWORD dwStart;
		DWORD dwEnd;

		RequestRange(DWORD dwS, DWORD dwE)
			: dwStart(dwS), dwEnd(dwE) {}
	};
	typedef multimap<CKnownFile*, RequestRange> RequestedBlocksMap;
	typedef pair<CKnownFile*, RequestRange> BlocksMapPair;
	RequestedBlocksMap m_RequestedBlocks;
	CPreciseTime m_LastUploadTime;
};

@


1.12
log
@v2 - more upload logic
@
text
@d139 2
a140 1
	BOOL SendNextBlockData(DWORD dwMaxSize, bool bPrioritized);
d189 1
@


1.11
log
@v2 - more upload logic
@
text
@d139 2
@


1.10
log
@v2 - increasing level of abstraction, more upload logic
@
text
@d136 1
d173 13
@


1.9
log
@v2 - minor improvements
@
text
@d5 2
a173 27
typedef map<CClient*, bool> ClientMap;

class CClientList : public CLoggable2
{
public:
	CClientList();
	virtual ~CClientList();

	void AddClient(CClient* pClient);
	void RemoveClient(CClient* pClient);

	CClientMule* FindMuleClient(AddrPort Addr);
	CClientMule* FindMuleClient(HashType Hash);
	bool IsValidClient(CClient* pClient);
	int GetWaitingPosition(CClientMule* pClient);

	void AddToWaitingQueue(CClient* pClient);
	bool RemoveFromWaitingQueue(CClient* pClient);

	void CheckAcceptNewClient();
	void PurgeBadClients();

private:
	ClientMap m_Clients;
	ClientMap m_Waiting;
	ClientMap m_Uploading;
};
@


1.8
log
@v2 - enhancing logging subsystem
@
text
@d23 2
d27 4
a30 1
	CEmClient_Peer* _GetParent(){ return m_pParent; }
d50 1
a116 1
	__declspec(property(put=_PutClientPort))	USHORT	ClientPort;
a127 1
	void _PutClientPort(USHORT nPort){ m_Addr.Port = nPort; }
d174 1
a174 1
class CClientList : public CLoggable
@


1.7
log
@v2 - more upload logic
@
text
@a4 1
#include "../../Loggable.h"
d14 1
a14 1
class CClient : public CLoggable
d34 1
a34 1
	virtual void OnDisconnected(){ m_bConnected = false; }
d188 1
@


1.6
log
@v2 - more upload logic
@
text
@d49 5
a53 4
	// Upload
	__declspec(property(get=_GetUpState, put=_PutUpState))	EnumULQState	UploadState;
	__declspec(property(get=_GetReqFile))					CKnownFile*		ReqFile;
	__declspec(property(get=_GetLastUpReq))					CPreciseTime	LastUploadRequest;
d58 1
d61 8
d87 4
d117 1
d122 1
d131 5
d179 1
d183 1
d188 2
d193 1
@


1.5
log
@v2 - minor improvements
@
text
@d13 2
d21 1
d23 2
d26 2
d50 3
a52 2
	__declspec(property(get=_GetUploadState, put=_PutUploadState)) EnumULQState UploadState;
	__declspec(property(get=_GetReqFile, put=_PutReqFile)) CKnownFile* ReqFile;
d54 1
a54 1
	EnumULQState _GetUploadState() const { return m_eUploadState; }
d56 1
d58 1
a58 2
	void _PutUploadState(EnumULQState eUploadState){ m_eUploadState = eUploadState; }
	void _PutReqFile(CKnownFile* pReqFile){ m_pReqFile = pReqFile; }
d61 3
d76 1
d104 3
a106 3
	DWORD	_GetClientVersion(){ return m_dwClientVersion; }
	BYTE	_GetMuleVersion(){ return m_nEmuleVersion; }
	EnumClientTypes _GetClientSoft(){ return m_eClientSoft; }
@


1.4
log
@v2 - little improvements
@
text
@d101 3
@


1.3
log
@v2 - little improvements
@
text
@d19 2
a20 1
	virtual EnumClientType	ClientType() = 0;
d73 1
a73 1
	virtual EnumClientType	ClientType(){ return CLIENT_MULE; };
d88 7
a94 2
	__declspec(property(put=_PutClientVersion))	DWORD	ClientVersion;
	__declspec(property(put=_PutMuleVersion))	DWORD	MuleVersion;
d99 1
a99 1
	void _PutMuleVersion(DWORD dwMuleVersion);
d147 3
@


1.2
log
@v2 - more improvements
@
text
@a12 2
class CPartFile;

d20 2
d25 8
d36 2
a37 2
	CString	_GetUserName(){ return m_sUserName; }
	void _PutUserName(CString sUserName){ m_sUserName = sUserName; }
d45 2
a46 2
	EnumULQState _GetUploadState(){ return m_eUploadState; }
	CKnownFile* _GetReqFile(){ return m_pReqFile; }
d55 1
d73 2
d78 4
@


1.1
log
@v2 - minor rearrangements, started defining client and clientlist
@
text
@d6 1
a6 1
#include "../../otherfunctions.h"
d13 2
d22 2
a23 1
	virtual bool operator ==(const CClient* pClient) = 0;
d25 1
d27 1
d33 10
d51 4
a64 1
	virtual bool operator==(const AddrPort Addr);
d69 6
a74 1
	__declspec(property(put=_PutClientPort)) USHORT ClientPort;
a75 2

	__declspec(property(put=_PutClientUDPPort)) USHORT ClientUDPPort;
a76 2

	__declspec(property(put=_PutClientVersion)) DWORD ClientVersion;
a77 2

	__declspec(property(put=_PutMuleVersion)) DWORD MuleVersion;
d101 1
a101 1
	//	Supported protocols & features
d112 2
d124 1
d127 2
a128 1
	vector<CClient*> m_Clients;
@

