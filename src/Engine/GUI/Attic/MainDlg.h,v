head	1.5;
access;
symbols
	Interim_Release_1-1b_RC1:1.4
	PublicRelease_1_1a:1.4
	Interim_Release_1-1a_RC2:1.4
	Interim_Release_1-1a_RC1:1.4
	Interim_Release_1-1a_beta2:1.4
	Interim_Release_1-1a_beta1:1.4
	PublicRelease_1_1:1.4
	Interim_Release_1-1_beta1:1.4
	PublicRelease_1o:1.4
	Interim_Release_1o_RC1:1.4
	Interim_Release_1o_beta1:1.4
	PublicRelease_1n:1.4
	Interim_Release_1n_RC2:1.4
	Interim_Release_1n_RC1:1.4
	PublicRelease_1m:1.4
	Interim_Release_1m_beta1:1.4
	PublicRelease_1l:1.4
	Interim_Release_1l_RC3:1.4
	Interim_Release_1l_RC2:1.4
	Interim_Release_1l_RC1:1.4
	Interim_Release_1l_beta2:1.4
	Interim_Release_1l_beta1:1.4
	PublicRelease_1k:1.4
	Interim_Release_1k_RC4:1.4
	Interim_1k_RC3:1.4
	Interim_1k_RC2:1.4
	Interim_Release_1k_RC1:1.4
	Interim_Release_1k_beta5:1.4
	Intrerim_Release_1k_beta4:1.4
	Interim_Release_1k_beta1:1.4
	PublicRelease_1j:1.3
	Interim_Release_1J_RC3:1.3
	Interim_Release_1j_RC3:1.3
	Interim_Release_1j_RC2:1.3
	Interim_Release_1j_RC1:1.3
	Interim_Release_1j_beta2:1.3
	Interim_Release_1j_beta1:1.3;
locks; strict;
comment	@ * @;


1.5
date	2004.12.26.15.45.33;	author kuchin;	state dead;
branches;
next	1.4;

1.4
date	2004.02.05.19.31.57;	author morevit;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.22.17.24.10;	author forcha;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.22.16.34.51;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.21.14.02.37;	author forcha;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Rearrangements
@
text
@// MainDlg.h : interface of the CMainDlg class
//
/////////////////////////////////////////////////////////////////////////////

#pragma once

#include "TrayIconImpl.h"
#include "TrayMenuDlg.h"
#include "MeterIcon.h"

class CMainDlg : 
	public CDialogImpl<CMainDlg>, 
	public CUpdateUI<CMainDlg>,
	public CMessageFilter, 
	public CIdleHandler,
	public CTrayIconImpl<CMainDlg>
{
public:
	enum { IDD = IDD_MAINDLG };

protected:
	UINT m_nTimerID;

public:
	virtual BOOL PreTranslateMessage(MSG* pMsg)
	{
		return IsDialogMessage(pMsg);
	}

	virtual BOOL OnIdle()
	{
		return FALSE;
	}

	BEGIN_UPDATE_UI_MAP(CMainDlg)
	END_UPDATE_UI_MAP()

	BEGIN_MSG_MAP(CMainDlg)
		MESSAGE_HANDLER(WM_INITDIALOG, OnInitDialog)
		COMMAND_ID_HANDLER(IDOK, OnOK)
		COMMAND_ID_HANDLER(IDCANCEL, OnCancel)
		MSG_WM_TIMER(OnTimer)	// for testing purpose only
		CHAIN_MSG_MAP(CTrayIconImpl<CMainDlg>)
	END_MSG_MAP()

// Handler prototypes (uncomment arguments if needed):
//	LRESULT MessageHandler(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& /*bHandled*/)
//	LRESULT CommandHandler(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
//	LRESULT NotifyHandler(int /*idCtrl*/, LPNMHDR /*pnmh*/, BOOL& /*bHandled*/)

	LRESULT OnInitDialog(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& /*bHandled*/)
	{
		EMULE_TRY

		// center the dialog on the screen
		CenterWindow();

		// set icons
		HICON hIcon = (HICON)::LoadImage(_Module.GetResourceInstance(), MAKEINTRESOURCE(IDR_MAINFRAME), 
										 IMAGE_ICON, ::GetSystemMetrics(SM_CXICON), ::GetSystemMetrics(SM_CYICON),
										 LR_DEFAULTCOLOR);
		SetIcon(hIcon, TRUE);

		HICON hIconSmall = (HICON)::LoadImage(_Module.GetResourceInstance(), MAKEINTRESOURCE(IDR_MAINFRAME), 
												IMAGE_ICON, ::GetSystemMetrics(SM_CXSMICON),
												::GetSystemMetrics(SM_CYSMICON), LR_DEFAULTCOLOR);

		SetIcon(hIconSmall, FALSE);

		// register object for message filtering and idle updates
		CMessageLoop		*pLoop = _Module.GetMessageLoop();

		ATLASSERT(pLoop != NULL);
		pLoop->AddMessageFilter(this);
		pLoop->AddIdleHandler(this);

		UIAddChildWindowContainer(m_hWnd);

		// Install the tray icon
		HICON hTrayIcon = CreateMeterIcon(IDI_TRAYICON_STD, 16, 16, 10, 0, 0, 0);

		InstallTrayIcon(_T("eMule Plus"), hTrayIcon, NULL);
		
		// for testing purpose only
		m_nTimerID = SetTimer(1, 20);

		return TRUE;
		
		EMULE_CATCH
		return FALSE;
	}

	LRESULT OnOK(WORD /*wNotifyCode*/, WORD wID, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
	{
		CString		sXml;

		GetDlgItem(IDC_DEBUG_XML).GetWindowText(sXml.GetBuffer(1000), 1000);
		sXml.ReleaseBuffer();
		if(!sXml.IsEmpty())
			g_stEngine.ParseXmlCommand(sXml);
	//	Hide the dialog
		ShowWindow(SW_HIDE);
		return 0;
	}

	LRESULT OnCancel(WORD /*wNotifyCode*/, WORD wID, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
	{
		CloseDialog(wID);
		return 0;
	}

	void CloseDialog(int nVal)
	{
		DestroyWindow();
		::PostQuitMessage(nVal);
	}

	LRESULT TrayIconFct(UINT nMsg, UINT nHWP)
	{
		EMULE_TRY

		if (nMsg == WM_RBUTTONUP)
		{
			static bool bSingleInstance = true;
			if(bSingleInstance)
			{
				bSingleInstance = false;
				CPoint pos;
				GetCursorPos(&pos);
				CTrayMenuDlg dlg(pos, 16, 96, 8, 48);
				switch(dlg.DoModal(NULL))
				{					
					case IDC_SPEED:			OnTraySpeed();		 break;
					case IDC_TOMAX:			OnTrayToMax();		 break;
					case IDC_TOMIN:			OnTrayToMin();		 break;
					case IDC_CONNECT:		OnTrayConnect();	 break;
					case IDC_DISCONNECT:	OnTrayDisconnect();	 break;
					case IDC_PREFERENCES:	OnTrayPreferences(); break;
					case IDC_ABOUT:			OnTrayAbout();		 break;
					case IDC_EXIT:			OnTrayExit();		 break;
					default:									 break;
				}
				bSingleInstance = true;
			}
		}
		else if (nMsg == WM_LBUTTONDBLCLK)
		{			
			OnTrayAbout();
		}
		return 0;

		EMULE_CATCH
		return -1;
	}

	void OnTraySpeed()
	{
		::MessageBox(NULL, _T("Speed"), _T(""), MB_OK);
	}
	void OnTrayToMax()
	{
		::MessageBox(NULL, _T("ToMax"), _T(""), MB_OK);
	}
	void OnTrayToMin()
	{
		::MessageBox(NULL, _T("ToMin"), _T(""), MB_OK);
	}
	void OnTrayConnect()
	{
		::MessageBox(NULL, _T("Connect"), _T(""), MB_OK);
	}
	void OnTrayDisconnect()
	{
		::MessageBox(NULL, _T("Disconnect"), _T(""), MB_OK);						
	}
	void OnTrayPreferences()
	{
		::MessageBox(NULL, _T("Preferences"), _T(""), MB_OK);						
	}
	void OnTrayAbout()
	{
		ShowWindow(SW_SHOW);
	}
	void OnTrayExit()
	{
		CloseDialog(IDOK);
	}

	// for testing purpose only
	void OnTimer(UINT idEvent, TIMERPROC /*TimerProc*/)
	{
		if(idEvent == m_nTimerID)
		{
			static int maxval = 32;
			static int val = 0;
			static int dir = 1;

			HICON hIcon = CreateMeterIcon(IDI_TRAYICON_STD, 16, 16, 
										  maxval, val, 
										  RGB(0,255,0), RGB(39,95,39));
			val += dir;
			if(val <= 0 || val >= maxval)
				dir = -dir;
			
			ChangeTrayIcon(hIcon);
			CString strTooltip;
			strTooltip.Format(_T("Up: %d.%02d (%d.%02d) | Down: %d.%02d (%d.%02d)"), 
								rand()%33, rand()%100, rand()%2, rand()%100, 
								val, rand()%100, rand()%2, rand()%100);
			SetTooltipText(strTooltip);
		}
		return;
	}
};
@


1.4
log
@Formatting, comments, and name changes, the usual.
@
text
@@


1.3
log
@TRY-CATCH
@
text
@d60 2
a61 1
			IMAGE_ICON, ::GetSystemMetrics(SM_CXICON), ::GetSystemMetrics(SM_CYICON), LR_DEFAULTCOLOR);
d63 1
d65 3
a67 1
			IMAGE_ICON, ::GetSystemMetrics(SM_CXSMICON), ::GetSystemMetrics(SM_CYSMICON), LR_DEFAULTCOLOR);
d71 2
a72 1
		CMessageLoop* pLoop = _Module.GetMessageLoop();
d81 1
d95 2
a96 1
		CString sXml;
d101 1
a101 1
		// Hide the dialog
@


1.2
log
@New engine - XML
@
text
@d53 2
d82 3
d113 2
d144 3
@


1.1
log
@gui
@
text
@d84 5
@

