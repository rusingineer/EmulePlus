head	1.12;
access;
symbols
	PublicRelease_1_2e:1.12
	Interim_Release_1-2e_RC1:1.12
	PublicRelease_1_2d:1.12
	Interim_Release_1-2d_RC1:1.12
	Interim_Release_1-2d_beta1:1.12
	PublicRelease_1_2c:1.12
	Interim_Release_1-2c_RC1:1.12
	Interim_Release_1-2c_beta1:1.12
	PublicRelease_1_2b:1.12
	Interim_Release_1-2b_RC1:1.12
	PublicRelease_1_2a:1.12
	Interim_Release_1-2a_RC1:1.12
	Interim_Release_1-2a_beta2:1.12
	Interim_Release_1-2a_beta1:1.12
	PublicRelease_1_2:1.12
	Interim_Release_1-2_RC1:1.12
	Interim_Release_1-2_beta1:1.12
	PublicRelease_1_1g:1.12
	Interim_Release_1-1g_RC3:1.12
	Interim_Release_1-1g_RC2:1.12
	Interim_Release_1-1g_RC1:1.12
	Interim_Release_1-1g_beta2:1.12
	Interim_Release_1-1g_beta1:1.12
	PublicRelease_1_1f:1.12
	Interim_Release_1-1f_RC1:1.12
	PublicRelease_1_1e:1.12
	Interim_Release_1-1e_RC2:1.12
	Interim_Release_1-1e_RC1:1.12
	Interim_Release_1-1e_beta1:1.12
	PublicRelease_1_1d:1.10
	Interim_Release_1-1d_RC1:1.10
	PublicRelease_1_1c:1.10
	Interim_Release_1-1c_RC1:1.10
	Interim_Release_1-1c_beta2:1.9
	Interim_Release_1-1c_beta1:1.9
	PublicRelease_1_1b:1.7
	Interim_Release_1-1b_RC1:1.6
	PublicRelease_1_1a:1.6
	Interim_Release_1-1a_RC2:1.6
	Interim_Release_1-1a_RC1:1.6
	Interim_Release_1-1a_beta2:1.6
	Interim_Release_1-1a_beta1:1.6
	PublicRelease_1_1:1.6
	Interim_Release_1-1_beta1:1.6
	PublicRelease_1o:1.6
	Interim_Release_1o_RC1:1.6
	Interim_Release_1o_beta1:1.6
	PublicRelease_1n:1.6
	Interim_Release_1n_RC2:1.6
	Interim_Release_1n_RC1:1.6
	PublicRelease_1m:1.5
	Interim_Release_1m_beta1:1.5
	PublicRelease_1l:1.5
	Interim_Release_1l_RC3:1.5
	Interim_Release_1l_RC2:1.5
	Interim_Release_1l_RC1:1.5
	Interim_Release_1l_beta2:1.5
	Interim_Release_1l_beta1:1.5
	PublicRelease_1k:1.5
	Interim_Release_1k_RC4:1.5
	Interim_1k_RC3:1.5
	Interim_1k_RC2:1.5
	Interim_Release_1k_RC1:1.5
	Interim_Release_1k_beta5:1.5
	Intrerim_Release_1k_beta4:1.5
	Interim_Release_1k_beta1:1.5
	PublicRelease_1j:1.4
	Interim_Release_1J_RC3:1.4
	Interim_Release_1j_RC3:1.4
	Interim_Release_1j_RC2:1.3
	Interim_Release_1j_RC1:1.3
	Interim_Release_1j_beta2:1.3
	Interim_Release_1j_beta1:1.1;
locks; strict;
comment	@ * @;


1.12
date	2005.03.27.05.01.50;	author kuchin;	state Exp;
branches;
next	1.11;

1.11
date	2005.03.22.22.02.09;	author kuchin;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.23.18.57.47;	author kuchin;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.28.20.13.52;	author kuchin;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.29.16.04.22;	author kuchin;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.26.15.45.32;	author kuchin;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.30.13.39.02;	author dongato;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.05.19.31.57;	author morevit;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.16.14.50.55;	author kuchin;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.07.09.17.54;	author kuchin;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.06.11.13.13;	author kuchin;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.16.17.44.22;	author kuchin;	state Exp;
branches;
next	;


desc
@@


1.12
log
@v2 - minor improvements
@
text
@// TaskProcessor.h: interface for the CTaskProcessor class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_TASKPROCESSOR_H__186018D8_26C9_4A91_9F7C_DDC406696088__INCLUDED_)
#define AFX_TASKPROCESSOR_H__186018D8_26C9_4A91_9F7C_DDC406696088__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "Other/ThreadPool.h"

// Basic task definition
struct CTask : public CLoggable2 {
	virtual ~CTask();
	virtual bool Process() = 0;
	virtual bool OnException();		// Exception handling
	virtual LPCTSTR TaskName() = 0;	// Task name for debug purposes
};

// Useful for tasks states
enum
{
	TASK_START	= 0,
	TASK_READ	= 1,
	TASK_SEND	= 2
};

struct CStateMachine
{
	CStateMachine() : m_byteState(TASK_START){ }
	__declspec(property(get=_GetState, put=_PutState)) BYTE State;
	BYTE _GetState() const { return m_byteState; }
	void _PutState(BYTE byteState){ m_byteState = byteState; }
private:
	BYTE m_byteState;
};

class CTaskProcessor : public CLoggable2
{
	HANDLE m_hThread;
	HANDLE m_hStop;

	CTask* m_pCurrent;

	struct THREAD_INIT_PARAM
	{
		CTaskProcessor	   *m_pThis;
		HANDLE				m_hInitEvent;
		bool				m_bInitResult;
	};

	static UINT WINAPI ProcessingFunc(PVOID pPtr);

	CPtrQueue<CTask> m_queueTasks;

	virtual bool Start();
	virtual void Stop();
	virtual void ProcessTimeout();
	bool ProcessTask(CTask&);

protected:
	DWORD m_dwWaitTimeout;
	DWORD m_dwStartupTimeout;

public:

	bool Init();
	void Uninit();

	CTaskProcessor() :
		 m_hThread(NULL)
		,m_hStop(NULL)
		,m_pCurrent(NULL)
		,m_dwWaitTimeout(INFINITE)
		,m_dwStartupTimeout(1000)
	{}
	~CTaskProcessor() { Uninit(); };

	inline void Push(CTask* pTask) 
	{
		if (pTask) 
			m_queueTasks.Push(pTask); 
		else
		{
			ASSERT(FALSE);
			AddDebugLogLine(_T("no memory"));
		}
	}
	inline bool IsInContext(const CTask& stTask) { return &stTask == m_pCurrent; }
};

class CTaskProcessor_Main : public CTaskProcessor
{
	virtual bool Start(){ m_dwWaitTimeout = INFINITE; return true;	}
	virtual void Stop(){ }
	virtual void ProcessTimeout(){ }

public:
	CTaskProcessor_Main(){ }
};

#endif // !defined(AFX_TASKPROCESSOR_H__186018D8_26C9_4A91_9F7C_DDC406696088__INCLUDED_)
@


1.11
log
@v2 - enhancing logging subsystem
@
text
@d14 1
d22 17
@


1.10
log
@v2 - updated protocol, debug features, bugfix for completion task, revert to default struct byte alignment
@
text
@a11 1
#include "../Loggable.h"
d14 1
a14 1
struct CTask : public CLoggable {
d22 1
a22 1
class CTaskProcessor : public CLoggable
@


1.9
log
@Corrected v2 defines, improved v2 webserver and database functionality
@
text
@d18 2
a19 1
	virtual bool OnException(); // usually DB exception
@


1.8
log
@There can be only one engine :-)
@
text
@d47 1
d55 5
a59 3
		m_hThread(NULL),
		m_hStop(NULL),
		m_pCurrent(NULL)
@


1.7
log
@Rearrangements
@
text
@a14 1
class CEmEngine;
d17 2
a18 2
	virtual bool Process(CEmEngine&) = 0;
	virtual bool OnException(CEmEngine&); // usually DB exception
a49 2
	CEmEngine& m_stEngine;

d53 1
a53 1
	CTaskProcessor(CEmEngine& stEngine) :
d56 1
a56 2
		m_pCurrent(NULL),
		m_stEngine(stEngine)
d80 1
a80 3
	CTaskProcessor_Main(CEmEngine& stEngine) :
	  CTaskProcessor(stEngine)
	  {}
@


1.6
log
@Removed AddDebugLogLine statusbar message option, added client transfer debug log option
@
text
@d79 1
a79 1
	virtual bool Start(){ return true;	}
@


1.5
log
@Formatting, comments, and name changes, the usual.
@
text
@d71 1
a71 1
			AddDebugLogLine(false, _T("no memory"));
@


1.4
log
@*** empty log message ***
@
text
@d30 5
a34 4
	struct THREAD_INIT_PARAM {
		CTaskProcessor*	m_pThis;
		HANDLE		m_hInitEvent;
		bool		m_bInitResult;
@


1.3
log
@New engine - cosmetic changes
@
text
@a16 1
public:
@


1.2
log
@New engine - even more XML
@
text
@d4 1
a4 1
#ifdef NEW_SOCKETS
a89 1
#endif@


1.1
log
@New engine
@
text
@d77 12
@

