head	1.1;
branch	1.1.1;
access;
symbols
	arelease:1.1.1.3
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2007.10.18.14.44.12;	author fuxie-dk;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.10.18.14.44.12;	author fuxie-dk;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.10.31.18.08.18;	author fuxie-dk;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.12.23.39.36;	author fuxie-dk;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@// Ini2.h: Ini-File-Interface by bond006 <rene.landgrebe@@gmx.de>
// ****************************************************************
// This new interface replaces the old interface which was too slow

#pragma once
#include "types.h"

class CIni : public CFile
{
public:
	CIni(const CString& strFileName);
	~CIni();

	void		CloseWithoutSave(){CloseFile();}
	void		SaveAndClose();

	void		AddCategory(const CString& strCategoryName);
	void		SetDefaultCategory(const CString& strCategoryName);
	void		SetDefaultCategory(const TCHAR *pcCategoryName);
	void		DeleteCategory(const CString& strCategoryName);
	void		DeleteEntry(const CString& strCategoryName, const CString& strEntryName);

	CString		GetString(const TCHAR *pcEntryName, const CString& defValue);
	double		GetDouble(const TCHAR *pcEntryName, double defValue);
	float		GetFloat(const TCHAR *pcEntryName, float defValue);
	int			GetInt(const TCHAR *pcEntryName, int defValue);
	WORD		GetWORD(const TCHAR *pcEntryName, WORD defValue);
	uint32		GetUInt32(const TCHAR *pcEntryName, uint32 defValue);
	uint64		GetUInt64(const TCHAR *pcEntryName, uint64 defValue);
	bool		GetBool(const TCHAR *pcEntryName, bool defValue);
	void		SetString(const TCHAR *pcEntryName, const CString& strValue);
	void		SetDouble(const TCHAR *pcEntryName, double dValue);
	void		SetFloat(const TCHAR *pcEntryName, float fValue);
	void		SetInt(const TCHAR *pcEntryName, int nValue);
	void		SetWORD(const TCHAR *pcEntryName, WORD wValue);
	void		SetUInt32(const TCHAR *pcEntryName, uint32 nValue);
	void		SetUInt64(const TCHAR *pcEntryName, uint64 nValue);
	void		SetBool(const TCHAR *pcEntryName, bool bValue);

	void		GetArray(CString* pString, int nElements, const TCHAR *pcEntryName);
	void		GetArray(double* pDouble, int nElements, const TCHAR *pcEntryName);
	void		GetArray(float* pFloat, int nElements, const TCHAR *pcEntryName);
	void		GetArray(int* pInt, int nElements, const TCHAR *pcEntryName);
	void		GetArray(WORD* pWord, int nElements, const TCHAR *pcEntryName);
	void		GetArray(bool* pBool, int nElements, const TCHAR *pcEntryName);
	void		SetArray(CString* pString, int nElements, const TCHAR *pcEntryName);
	void		SetArray(double* pDouble, int nElements, const TCHAR *pcEntryName);
	void		SetArray(float* pFloat, int nElements, const TCHAR *pcEntryName);
	void		SetArray(int* pInt, int nElements, const TCHAR *pcEntryName);
	void		SetArray(WORD* pWord, int nElements, const TCHAR *pcEntryName);
	void		SetArray(bool* pBool, int nElements, const TCHAR *pcEntryName);

	bool		CategoryExist(const CString& strCategoryName);
	bool		EntryExist(const CString &strCategoryName, const TCHAR *pcEntryName);
	bool		ValueExist(const CString& strCategoryName, const CString& strEntryName);

private:
	void		OpenFile(const CString& strFileName);
	void		CloseFile();
	void		ReadData();

	void		SetValue(const TCHAR *pcEntryName, const CString &strValue);
	CString		GetValue(const TCHAR *pcEntryName);

	CString m_strDefCategory;
	CString m_strFileBuffer;
};
@


1.1.1.1
log
@Backup files as per Aw3's request 
@
text
@@


1.1.1.2
log
@Backup files as per Aw3's request
@
text
@a0 16
//	this file is part of eMule Plus
//
//	This program is free software; you can redistribute it and/or
//	modify it under the terms of the GNU General Public License
//	as published by the Free Software Foundation; either
//	version 2 of the License, or (at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program; if not, write to the Free Software
//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
d4 1
a5 1

d11 1
a11 1
	CIni(const CString &strFileName, bool bReadOnly = false);
d58 1
a58 1
	void		OpenFile(const CString &strFileName, bool bReadOnly);
@


1.1.1.3
log
@Backup files as per Aw3's request
@
text
@d1 1
a1 1
//	This file is part of eMule Plus
d39 2
a40 2
	__declspec(noinline) const CString&	GetString(const TCHAR *pcEntryName, const TCHAR *pcValue);
	__declspec(noinline) double		GetDouble(const TCHAR *pcEntryName, double defValue);
d42 1
a42 1
	__declspec(noinline) int			GetInt(const TCHAR *pcEntryName, int defValue);
d45 2
a46 2
	__declspec(noinline) uint64		GetUInt64(const TCHAR *pcEntryName, uint64 defValue);
	__declspec(noinline) bool		GetBool(const TCHAR *pcEntryName, bool defValue);
d50 1
a50 1
	void		SetInt(const TCHAR *pcEntryName, int iValue);
d52 2
a53 2
	void		SetUInt32(const TCHAR *pcEntryName, uint32 dwValue);
	void		SetUInt64(const TCHAR *pcEntryName, uint64 qwValue);
d56 12
a67 12
	void		GetArray(CString *pString, unsigned uiElements, const TCHAR *pcEntryName);
	void		GetArray(double *pDouble, unsigned uiElements, const TCHAR *pcEntryName);
	void		GetArray(float *pFloat, unsigned uiElements, const TCHAR *pcEntryName);
	void		GetArray(int *pInt, unsigned uiElements, const TCHAR *pcEntryName);
	void		GetArray(WORD *pWord, unsigned uiElements, const TCHAR *pcEntryName);
	void		GetArray(bool *pBool, unsigned uiElements, const TCHAR *pcEntryName);
	void		SetArray(CString *pString, unsigned uiElements, const TCHAR *pcEntryName);
	void		SetArray(double *pDouble, unsigned uiElements, const TCHAR *pcEntryName);
	void		SetArray(float *pFloat, unsigned uiElements, const TCHAR *pcEntryName);
	void		SetArray(int *pInt, unsigned uiElements, const TCHAR *pcEntryName);
	void		SetArray(WORD *pWord, unsigned uiElements, const TCHAR *pcEntryName);
	void		SetArray(bool *pBool, unsigned uiElements, const TCHAR *pcEntryName);
d79 1
a79 1
	void		GetValue(const TCHAR *pcEntryName);	// return value is in m_strInternXchg
a82 5
//	Used as internal class exchange buffer to avoid numerous memory allocations
//	based on the fact that all requests are done consecutively from one thread
	CString m_strInternXchg;
	CString m_strDefCatBraces;		// default category in format "[Name]"
	CString m_strDefCatBracesCR;	// default category in format "\r\n[Name]"
@


